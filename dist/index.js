!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var r in n)("object"==typeof exports?exports:t)[r]=n[r]}}(window,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=432)}([function(t,e,n){var r=n(2),o=n(27),i=n(13),a=n(12),s=n(21),u=function(t,e,n){var l,c,f,p,h=t&u.F,d=t&u.G,v=t&u.S,y=t&u.P,g=t&u.B,m=d?r:v?r[e]||(r[e]={}):(r[e]||{}).prototype,b=d?o:o[e]||(o[e]={}),_=b.prototype||(b.prototype={});for(l in d&&(n=e),n)f=((c=!h&&m&&void 0!==m[l])?m:n)[l],p=g&&c?s(f,r):y&&"function"==typeof f?s(Function.call,f):f,m&&a(m,l,f,t&u.U),b[l]!=f&&i(b,l,p),y&&_[l]!=f&&(_[l]=f)};r.core=o,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},function(t,e,n){var r=n(4);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(67)("wks"),o=n(42),i=n(2).Symbol,a="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=a&&i[t]||(a?i:o)("Symbol."+t))}).store=r},function(t,e,n){var r=n(24),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(1),o=n(156),i=n(26),a=Object.defineProperty;e.f=n(8)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){t.exports=!n(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(25);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var r=n(0),o=n(3),i=n(25),a=/"/g,s=function(t,e,n,r){var o=String(i(t)),s="<"+e;return""!==n&&(s+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),s+">"+o+"</"+e+">"};t.exports=function(t,e){var n={};n[t]=e(s),r(r.P+r.F*o(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",n)}},function(t,e,n){var r=n(2),o=n(13),i=n(14),a=n(42)("src"),s=Function.toString,u=(""+s).split("toString");n(27).inspectSource=function(t){return s.call(t)},(t.exports=function(t,e,n,s){var l="function"==typeof n;l&&(i(n,"name")||o(n,"name",e)),t[e]!==n&&(l&&(i(n,a)||o(n,a,t[e]?""+t[e]:u.join(String(e)))),t===r?t[e]=n:s?t[e]?t[e]=n:o(t,e,n):(delete t[e],o(t,e,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||s.call(this)})},function(t,e,n){var r=n(7),o=n(43);t.exports=n(8)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){"use strict";var r=n(120),o=n(215),i=Object.prototype.toString;function a(t){return"[object Array]"===i.call(t)}function s(t){return null!==t&&"object"==typeof t}function u(t){return"[object Function]"===i.call(t)}function l(t,e){if(null!==t&&void 0!==t)if("object"!=typeof t&&(t=[t]),a(t))for(var n=0,r=t.length;n<r;n++)e.call(null,t[n],n,t);else for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.call(null,t[o],o,t)}t.exports={isArray:a,isArrayBuffer:function(t){return"[object ArrayBuffer]"===i.call(t)},isBuffer:o,isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:s,isUndefined:function(t){return void 0===t},isDate:function(t){return"[object Date]"===i.call(t)},isFile:function(t){return"[object File]"===i.call(t)},isBlob:function(t){return"[object Blob]"===i.call(t)},isFunction:u,isStream:function(t){return s(t)&&u(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function t(){var e={};function n(n,r){"object"==typeof e[r]&&"object"==typeof n?e[r]=t(e[r],n):e[r]=n}for(var r=0,o=arguments.length;r<o;r++)l(arguments[r],n);return e},extend:function(t,e,n){return l(e,function(e,o){t[o]=n&&"function"==typeof e?r(e,n):e}),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(t,e,n){var r=n(14),o=n(9),i=n(100)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){var r=n(52),o=n(43),i=n(18),a=n(26),s=n(14),u=n(156),l=Object.getOwnPropertyDescriptor;e.f=n(8)?l:function(t,e){if(t=i(t),e=a(e,!0),u)try{return l(t,e)}catch(t){}if(s(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e,n){var r=n(53),o=n(25);t.exports=function(t){return r(o(t))}},function(t,e,n){"use strict";var r=n(3);t.exports=function(t,e){return!!t&&r(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(10);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){var r=n(21),o=n(53),i=n(9),a=n(6),s=n(83);t.exports=function(t,e){var n=1==t,u=2==t,l=3==t,c=4==t,f=6==t,p=5==t||f,h=e||s;return function(e,s,d){for(var v,y,g=i(e),m=o(g),b=r(s,d,3),_=a(m.length),w=0,x=n?h(e,_):u?h(e,0):void 0;_>w;w++)if((p||w in m)&&(y=b(v=m[w],w,g),t))if(n)x[w]=y;else if(y)switch(t){case 3:return!0;case 5:return v;case 6:return w;case 2:x.push(v)}else if(c)return!1;return f?-1:l||c?c:x}}},function(t,e,n){var r=n(0),o=n(27),i=n(3);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],a={};a[t]=e(n),r(r.S+r.F*i(function(){n(1)}),"Object",a)}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(4);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){var n=t.exports={version:"2.5.3"};"number"==typeof __e&&(__e=n)},function(t,e,n){"use strict";function r(t,e,n,r,o,i,a,s){var u=typeof(t=t||{}).default;"object"!==u&&"function"!==u||(t=t.default);var l,c="function"==typeof t?t.options:t;if(e&&(c.render=e,c.staticRenderFns=n,c._compiled=!0),r&&(c.functional=!0),i&&(c._scopeId=i),a?(l=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},c._ssrRegister=l):o&&(l=s?function(){o.call(this,this.$root.$options.shadowRoot)}:o),l)if(c.functional){c._injectStyles=l;var f=c.render;c.render=function(t,e){return l.call(e),f(t,e)}}else{var p=c.beforeCreate;c.beforeCreate=p?[].concat(p,l):[l]}return{exports:t,options:c}}n.d(e,"a",function(){return r})},function(t,e,n){var r=n(135),o=n(0),i=n(67)("metadata"),a=i.store||(i.store=new(n(132))),s=function(t,e,n){var o=a.get(t);if(!o){if(!n)return;a.set(t,o=new r)}var i=o.get(e);if(!i){if(!n)return;o.set(e,i=new r)}return i};t.exports={store:a,map:s,has:function(t,e,n){var r=s(e,n,!1);return void 0!==r&&r.has(t)},get:function(t,e,n){var r=s(e,n,!1);return void 0===r?void 0:r.get(t)},set:function(t,e,n,r){s(n,r,!0).set(t,e)},keys:function(t,e){var n=s(t,e,!1),r=[];return n&&n.forEach(function(t,e){r.push(e)}),r},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){o(o.S,"Reflect",t)}}},function(t,e,n){"use strict";if(n(8)){var r=n(41),o=n(2),i=n(3),a=n(0),s=n(57),u=n(77),l=n(21),c=n(35),f=n(43),p=n(13),h=n(33),d=n(24),v=n(6),y=n(130),g=n(39),m=n(26),b=n(14),_=n(51),w=n(4),x=n(9),O=n(86),E=n(38),A=n(16),k=n(37).f,N=n(84),S=n(42),j=n(5),T=n(22),P=n(66),C=n(59),L=n(81),q=n(46),M=n(62),I=n(36),R=n(82),B=n(140),D=n(7),F=n(17),U=D.f,$=F.f,H=o.RangeError,z=o.TypeError,K=o.Uint8Array,V=Array.prototype,Y=u.ArrayBuffer,W=u.DataView,G=T(0),Z=T(2),X=T(3),J=T(4),Q=T(5),tt=T(6),et=P(!0),nt=P(!1),rt=L.values,ot=L.keys,it=L.entries,at=V.lastIndexOf,st=V.reduce,ut=V.reduceRight,lt=V.join,ct=V.sort,ft=V.slice,pt=V.toString,ht=V.toLocaleString,dt=j("iterator"),vt=j("toStringTag"),yt=S("typed_constructor"),gt=S("def_constructor"),mt=s.CONSTR,bt=s.TYPED,_t=s.VIEW,wt=T(1,function(t,e){return kt(C(t,t[gt]),e)}),xt=i(function(){return 1===new K(new Uint16Array([1]).buffer)[0]}),Ot=!!K&&!!K.prototype.set&&i(function(){new K(1).set({})}),Et=function(t,e){var n=d(t);if(n<0||n%e)throw H("Wrong offset!");return n},At=function(t){if(w(t)&&bt in t)return t;throw z(t+" is not a typed array!")},kt=function(t,e){if(!(w(t)&&yt in t))throw z("It is not a typed array constructor!");return new t(e)},Nt=function(t,e){return St(C(t,t[gt]),e)},St=function(t,e){for(var n=0,r=e.length,o=kt(t,r);r>n;)o[n]=e[n++];return o},jt=function(t,e,n){U(t,e,{get:function(){return this._d[n]}})},Tt=function(t){var e,n,r,o,i,a,s=x(t),u=arguments.length,c=u>1?arguments[1]:void 0,f=void 0!==c,p=N(s);if(void 0!=p&&!O(p)){for(a=p.call(s),r=[],e=0;!(i=a.next()).done;e++)r.push(i.value);s=r}for(f&&u>2&&(c=l(c,arguments[2],2)),e=0,n=v(s.length),o=kt(this,n);n>e;e++)o[e]=f?c(s[e],e):s[e];return o},Pt=function(){for(var t=0,e=arguments.length,n=kt(this,e);e>t;)n[t]=arguments[t++];return n},Ct=!!K&&i(function(){ht.call(new K(1))}),Lt=function(){return ht.apply(Ct?ft.call(At(this)):At(this),arguments)},qt={copyWithin:function(t,e){return B.call(At(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return J(At(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return R.apply(At(this),arguments)},filter:function(t){return Nt(this,Z(At(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(At(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(At(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){G(At(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return nt(At(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(At(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return lt.apply(At(this),arguments)},lastIndexOf:function(t){return at.apply(At(this),arguments)},map:function(t){return wt(At(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return st.apply(At(this),arguments)},reduceRight:function(t){return ut.apply(At(this),arguments)},reverse:function(){for(var t,e=At(this).length,n=Math.floor(e/2),r=0;r<n;)t=this[r],this[r++]=this[--e],this[e]=t;return this},some:function(t){return X(At(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ct.call(At(this),t)},subarray:function(t,e){var n=At(this),r=n.length,o=g(t,r);return new(C(n,n[gt]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,v((void 0===e?r:g(e,r))-o))}},Mt=function(t,e){return Nt(this,ft.call(At(this),t,e))},It=function(t){At(this);var e=Et(arguments[1],1),n=this.length,r=x(t),o=v(r.length),i=0;if(o+e>n)throw H("Wrong length!");for(;i<o;)this[e+i]=r[i++]},Rt={entries:function(){return it.call(At(this))},keys:function(){return ot.call(At(this))},values:function(){return rt.call(At(this))}},Bt=function(t,e){return w(t)&&t[bt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Dt=function(t,e){return Bt(t,e=m(e,!0))?f(2,t[e]):$(t,e)},Ft=function(t,e,n){return!(Bt(t,e=m(e,!0))&&w(n)&&b(n,"value"))||b(n,"get")||b(n,"set")||n.configurable||b(n,"writable")&&!n.writable||b(n,"enumerable")&&!n.enumerable?U(t,e,n):(t[e]=n.value,t)};mt||(F.f=Dt,D.f=Ft),a(a.S+a.F*!mt,"Object",{getOwnPropertyDescriptor:Dt,defineProperty:Ft}),i(function(){pt.call({})})&&(pt=ht=function(){return lt.call(this)});var Ut=h({},qt);h(Ut,Rt),p(Ut,dt,Rt.values),h(Ut,{slice:Mt,set:It,constructor:function(){},toString:pt,toLocaleString:Lt}),jt(Ut,"buffer","b"),jt(Ut,"byteOffset","o"),jt(Ut,"byteLength","l"),jt(Ut,"length","e"),U(Ut,vt,{get:function(){return this[bt]}}),t.exports=function(t,e,n,u){var l=t+((u=!!u)?"Clamped":"")+"Array",f="get"+t,h="set"+t,d=o[l],g=d||{},m=d&&A(d),b=!d||!s.ABV,x={},O=d&&d.prototype,N=function(t,n){U(t,n,{get:function(){return function(t,n){var r=t._d;return r.v[f](n*e+r.o,xt)}(this,n)},set:function(t){return function(t,n,r){var o=t._d;u&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[h](n*e+o.o,r,xt)}(this,n,t)},enumerable:!0})};b?(d=n(function(t,n,r,o){c(t,d,l,"_d");var i,a,s,u,f=0,h=0;if(w(n)){if(!(n instanceof Y||"ArrayBuffer"==(u=_(n))||"SharedArrayBuffer"==u))return bt in n?St(d,n):Tt.call(d,n);i=n,h=Et(r,e);var g=n.byteLength;if(void 0===o){if(g%e)throw H("Wrong length!");if((a=g-h)<0)throw H("Wrong length!")}else if((a=v(o)*e)+h>g)throw H("Wrong length!");s=a/e}else s=y(n),i=new Y(a=s*e);for(p(t,"_d",{b:i,o:h,l:a,e:s,v:new W(i)});f<s;)N(t,f++)}),O=d.prototype=E(Ut),p(O,"constructor",d)):i(function(){d(1)})&&i(function(){new d(-1)})&&M(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=n(function(t,n,r,o){var i;return c(t,d,l),w(n)?n instanceof Y||"ArrayBuffer"==(i=_(n))||"SharedArrayBuffer"==i?void 0!==o?new g(n,Et(r,e),o):void 0!==r?new g(n,Et(r,e)):new g(n):bt in n?St(d,n):Tt.call(d,n):new g(y(n))}),G(m!==Function.prototype?k(g).concat(k(m)):k(g),function(t){t in d||p(d,t,g[t])}),d.prototype=O,r||(O.constructor=d));var S=O[dt],j=!!S&&("values"==S.name||void 0==S.name),T=Rt.values;p(d,yt,!0),p(O,bt,l),p(O,_t,!0),p(O,gt,d),(u?new d(1)[vt]==l:vt in O)||U(O,vt,{get:function(){return l}}),x[l]=d,a(a.G+a.W+a.F*(d!=g),x),a(a.S,l,{BYTES_PER_ELEMENT:e}),a(a.S+a.F*i(function(){g.of.call(d,1)}),l,{from:Tt,of:Pt}),"BYTES_PER_ELEMENT"in O||p(O,"BYTES_PER_ELEMENT",e),a(a.P,l,qt),I(l),a(a.P+a.F*Ot,l,{set:It}),a(a.P+a.F*!j,l,Rt),r||O.toString==pt||(O.toString=pt),a(a.P+a.F*i(function(){new d(1).slice()}),l,{slice:Mt}),a(a.P+a.F*(i(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!i(function(){O.toLocaleString.call([1,2])})),l,{toLocaleString:Lt}),q[l]=j?S:T,r||j||p(O,dt,T)}}else t.exports=function(){}},function(t,e,n){var r=n(5)("unscopables"),o=Array.prototype;void 0==o[r]&&n(13)(o,r,{}),t.exports=function(t){o[r][t]=!0}},function(t,e,n){var r=n(42)("meta"),o=n(4),i=n(14),a=n(7).f,s=0,u=Object.isExtensible||function(){return!0},l=!n(3)(function(){return u(Object.preventExtensions({}))}),c=function(t){a(t,r,{value:{i:"O"+ ++s,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!u(t))return"F";if(!e)return"E";c(t)}return t[r].i},getWeak:function(t,e){if(!i(t,r)){if(!u(t))return!0;if(!e)return!1;c(t)}return t[r].w},onFreeze:function(t){return l&&f.NEED&&u(t)&&!i(t,r)&&c(t),t}}},function(t,e,n){var r=n(12);t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},function(t,e,n){var r=n(21),o=n(142),i=n(86),a=n(1),s=n(6),u=n(84),l={},c={};(e=t.exports=function(t,e,n,f,p){var h,d,v,y,g=p?function(){return t}:u(t),m=r(n,f,e?2:1),b=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(i(g)){for(h=s(t.length);h>b;b++)if((y=e?m(a(d=t[b])[0],d[1]):m(t[b]))===l||y===c)return y}else for(v=g.call(t);!(d=v.next()).done;)if((y=o(v,m,d.value,e))===l||y===c)return y}).BREAK=l,e.RETURN=c},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){"use strict";var r=n(2),o=n(7),i=n(8),a=n(5)("species");t.exports=function(t){var e=r[t];i&&e&&!e[a]&&o.f(e,a,{configurable:!0,get:function(){return this}})}},function(t,e,n){var r=n(154),o=n(99).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){var r=n(1),o=n(153),i=n(99),a=n(100)("IE_PROTO"),s=function(){},u=function(){var t,e=n(102)("iframe"),r=i.length;for(e.style.display="none",n(98).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),u=t.F;r--;)delete u.prototype[i[r]];return u()};t.exports=Object.create||function(t,e){var n;return null!==t?(s.prototype=r(t),n=new s,s.prototype=null,n[a]=t):n=u(),void 0===e?n:o(n,e)}},function(t,e,n){var r=n(24),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):i(t,e)}},function(t,e,n){var r=n(154),o=n(99);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e){t.exports=!1},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(4);t.exports=function(t,e){if(!r(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e){t.exports={}},function(t,e,n){var r=n(0),o=n(25),i=n(3),a=n(96),s="["+a+"]",u=RegExp("^"+s+s+"*"),l=RegExp(s+s+"*$"),c=function(t,e,n){var o={},s=i(function(){return!!a[t]()||"​"!="​"[t]()}),u=o[t]=s?e(f):a[t];n&&(o[n]=u),r(r.P+r.F*s,"String",o)},f=c.trim=function(t,e){return t=String(o(t)),1&e&&(t=t.replace(u,"")),2&e&&(t=t.replace(l,"")),t};t.exports=c},function(t,e,n){var r=n(7).f,o=n(14),i=n(5)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){"use strict";function r(t,e){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=i[0],s={id:t+":"+o,css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}n.r(e),n.d(e,"default",function(){return d});var o="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!o)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var i={},a=o&&(document.head||document.getElementsByTagName("head")[0]),s=null,u=0,l=!1,c=function(){},f=null,p="data-vue-ssr-id",h="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function d(t,e,n,o){l=n,f=o||{};var a=r(t,e);return v(a),function(e){for(var n=[],o=0;o<a.length;o++){var s=a[o];(u=i[s.id]).refs--,n.push(u)}e?v(a=r(t,e)):a=[];for(o=0;o<n.length;o++){var u;if(0===(u=n[o]).refs){for(var l=0;l<u.parts.length;l++)u.parts[l]();delete i[u.id]}}}}function v(t){for(var e=0;e<t.length;e++){var n=t[e],r=i[n.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](n.parts[o]);for(;o<n.parts.length;o++)r.parts.push(g(n.parts[o]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{var a=[];for(o=0;o<n.parts.length;o++)a.push(g(n.parts[o]));i[n.id]={id:n.id,refs:1,parts:a}}}}function y(){var t=document.createElement("style");return t.type="text/css",a.appendChild(t),t}function g(t){var e,n,r=document.querySelector("style["+p+'~="'+t.id+'"]');if(r){if(l)return c;r.parentNode.removeChild(r)}if(h){var o=u++;r=s||(s=y()),e=_.bind(null,r,o,!1),n=_.bind(null,r,o,!0)}else r=y(),e=function(t,e){var n=e.css,r=e.media,o=e.sourceMap;r&&t.setAttribute("media",r);f.ssrId&&t.setAttribute(p,e.id);o&&(n+="\n/*# sourceURL="+o.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,r),n=function(){r.parentNode.removeChild(r)};return e(t),function(r){if(r){if(r.css===t.css&&r.media===t.media&&r.sourceMap===t.sourceMap)return;e(t=r)}else n()}}var m,b=(m=[],function(t,e){return m[t]=e,m.filter(Boolean).join("\n")});function _(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=b(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){var r=n(20),o=n(5)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:i?r(e):"Object"==(a=r(e))&&"function"==typeof e.callee?"Arguments":a}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var r=n(20);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){"use strict";var r=n(0),o=n(10),i=n(21),a=n(34);t.exports=function(t){r(r.S,t,{from:function(t){var e,n,r,s,u=arguments[1];return o(this),(e=void 0!==u)&&o(u),void 0==t?new this:(n=[],e?(r=0,s=i(u,arguments[2],2),a(t,!1,function(t){n.push(s(t,r++))})):a(t,!1,n.push,n),new this(n))}})}},function(t,e,n){"use strict";var r=n(0);t.exports=function(t){r(r.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},function(t,e,n){"use strict";t.exports=n(41)||!n(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete n(2)[t]})},function(t,e,n){for(var r,o=n(2),i=n(13),a=n(42),s=a("typed_array"),u=a("view"),l=!(!o.ArrayBuffer||!o.DataView),c=l,f=0,p="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=o[p[f++]])?(i(r.prototype,s,!0),i(r.prototype,u,!0)):c=!1;t.exports={ABV:l,CONSTR:c,TYPED:s,VIEW:u}},function(t,e,n){"use strict";var r=n(2),o=n(0),i=n(12),a=n(33),s=n(32),u=n(34),l=n(35),c=n(4),f=n(3),p=n(62),h=n(48),d=n(95);t.exports=function(t,e,n,v,y,g){var m=r[t],b=m,_=y?"set":"add",w=b&&b.prototype,x={},O=function(t){var e=w[t];i(w,t,"delete"==t?function(t){return!(g&&!c(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!c(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!c(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof b&&(g||w.forEach&&!f(function(){(new b).entries().next()}))){var E=new b,A=E[_](g?{}:-0,1)!=E,k=f(function(){E.has(1)}),N=p(function(t){new b(t)}),S=!g&&f(function(){for(var t=new b,e=5;e--;)t[_](e,e);return!t.has(-0)});N||((b=e(function(e,n){l(e,b,t);var r=d(new m,e,b);return void 0!=n&&u(n,y,r[_],r),r})).prototype=w,w.constructor=b),(k||S)&&(O("delete"),O("has"),y&&O("get")),(S||A)&&O(_),g&&w.clear&&delete w.clear}else b=v.getConstructor(e,t,y,_),a(b.prototype,n),s.NEED=!0;return h(b,t),x[t]=b,o(o.G+o.W+o.F*(b!=m),x),g||v.setStrong(b,t,y),b}},function(t,e,n){var r=n(1),o=n(10),i=n(5)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||void 0==(n=r(a)[i])?e:o(n)}},function(t,e,n){"use strict";var r=n(13),o=n(12),i=n(3),a=n(25),s=n(5);t.exports=function(t,e,n){var u=s(t),l=n(a,u,""[t]),c=l[0],f=l[1];i(function(){var e={};return e[u]=function(){return 7},7!=""[t](e)})&&(o(String.prototype,t,c),r(RegExp.prototype,u,2==e?function(t,e){return f.call(t,this,e)}:function(t){return f.call(t,this)}))}},function(t,e,n){"use strict";var r=n(1);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){var r=n(5)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:n=!0}},i[r]=function(){return a},t(i)}catch(t){}return n}},function(t,e,n){var r=n(4),o=n(20),i=n(5)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},function(t,e,n){var r=n(20);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(18),o=n(6),i=n(39);t.exports=function(t){return function(e,n,a){var s,u=r(e),l=o(u.length),c=i(a,l);if(t&&n!=n){for(;l>c;)if((s=u[c++])!=s)return!0}else for(;l>c;c++)if((t||c in u)&&u[c]===n)return t||c||0;return!t&&-1}}},function(t,e,n){var r=n(2),o=r["__core-js_shared__"]||(r["__core-js_shared__"]={});t.exports=function(t){return o[t]||(o[t]={})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"ql-video-embed",props:{url:{type:String,default:""},meta:{type:Object,default:function(){return{}}}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"ql-embed-source-image",props:{image:{type:String,default:""}},data:function(){return{hasError:!1}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"ql-embed-source-icon",props:{icon:{type:String,default:""}},data:function(){return{hasError:!1}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=a(n(189)),o=a(n(186)),i=a(n(183));function a(t){return t&&t.__esModule?t:{default:t}}e.default={name:"ql-link-embed",components:{SourceIcon:r.default,SourceImage:o.default},props:{url:{type:String,default:""},meta:{type:Object,default:function(){return{}}}},computed:{description:function(){return(0,i.default)(this.meta.description,{length:256})},publisher:function(){return this.meta.site_name||(0,i.default)(this.meta.url,{length:64})}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(n(192)),o=i(n(159));function i(t){return t&&t.__esModule?t:{default:t}}e.default={name:"ql-embed-item",components:{LinkEmbed:r.default,VideoEmbed:o.default},props:{url:{type:String,default:""},meta:{type:Object,default:function(){return{}}}},computed:{componentType:function(){return"video"===this.meta.embed.type?"video-embed":"link"===this.meta.embed.type?"link-embed":"default-embed"}},mounted:function(){console.log(this.meta)}}},function(t,e){var n=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");t.exports=function(t){return n.test(t)}},function(t,e,n){var r=n(182).Symbol;t.exports=r},function(t,e,n){"use strict";(function(e){var r=n(15),o=n(213),i={"Content-Type":"application/x-www-form-urlencoded"};function a(t,e){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var s,u={adapter:("undefined"!=typeof XMLHttpRequest?s=n(118):void 0!==e&&(s=n(118)),s),transformRequest:[function(t,e){return o(e,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(a(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(a(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(t){u.headers[t]={}}),r.forEach(["post","put","patch"],function(t){u.headers[t]=r.merge(i)}),t.exports=u}).call(this,n(119))},function(t,e,n){var r=n(2).navigator;t.exports=r&&r.userAgent||""},function(t,e,n){"use strict";var r=n(2),o=n(8),i=n(41),a=n(57),s=n(13),u=n(33),l=n(3),c=n(35),f=n(24),p=n(6),h=n(130),d=n(37).f,v=n(7).f,y=n(82),g=n(48),m="prototype",b="Wrong index!",_=r.ArrayBuffer,w=r.DataView,x=r.Math,O=r.RangeError,E=r.Infinity,A=_,k=x.abs,N=x.pow,S=x.floor,j=x.log,T=x.LN2,P=o?"_b":"buffer",C=o?"_l":"byteLength",L=o?"_o":"byteOffset";function q(t,e,n){var r,o,i,a=new Array(n),s=8*n-e-1,u=(1<<s)-1,l=u>>1,c=23===e?N(2,-24)-N(2,-77):0,f=0,p=t<0||0===t&&1/t<0?1:0;for((t=k(t))!=t||t===E?(o=t!=t?1:0,r=u):(r=S(j(t)/T),t*(i=N(2,-r))<1&&(r--,i*=2),(t+=r+l>=1?c/i:c*N(2,1-l))*i>=2&&(r++,i/=2),r+l>=u?(o=0,r=u):r+l>=1?(o=(t*i-1)*N(2,e),r+=l):(o=t*N(2,l-1)*N(2,e),r=0));e>=8;a[f++]=255&o,o/=256,e-=8);for(r=r<<e|o,s+=e;s>0;a[f++]=255&r,r/=256,s-=8);return a[--f]|=128*p,a}function M(t,e,n){var r,o=8*n-e-1,i=(1<<o)-1,a=i>>1,s=o-7,u=n-1,l=t[u--],c=127&l;for(l>>=7;s>0;c=256*c+t[u],u--,s-=8);for(r=c&(1<<-s)-1,c>>=-s,s+=e;s>0;r=256*r+t[u],u--,s-=8);if(0===c)c=1-a;else{if(c===i)return r?NaN:l?-E:E;r+=N(2,e),c-=a}return(l?-1:1)*r*N(2,c-e)}function I(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function R(t){return[255&t]}function B(t){return[255&t,t>>8&255]}function D(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function F(t){return q(t,52,8)}function U(t){return q(t,23,4)}function $(t,e,n){v(t[m],e,{get:function(){return this[n]}})}function H(t,e,n,r){var o=h(+n);if(o+e>t[C])throw O(b);var i=t[P]._b,a=o+t[L],s=i.slice(a,a+e);return r?s:s.reverse()}function z(t,e,n,r,o,i){var a=h(+n);if(a+e>t[C])throw O(b);for(var s=t[P]._b,u=a+t[L],l=r(+o),c=0;c<e;c++)s[u+c]=l[i?c:e-c-1]}if(a.ABV){if(!l(function(){_(1)})||!l(function(){new _(-1)})||l(function(){return new _,new _(1.5),new _(NaN),"ArrayBuffer"!=_.name})){for(var K,V=(_=function(t){return c(this,_),new A(h(t))})[m]=A[m],Y=d(A),W=0;Y.length>W;)(K=Y[W++])in _||s(_,K,A[K]);i||(V.constructor=_)}var G=new w(new _(2)),Z=w[m].setInt8;G.setInt8(0,2147483648),G.setInt8(1,2147483649),!G.getInt8(0)&&G.getInt8(1)||u(w[m],{setInt8:function(t,e){Z.call(this,t,e<<24>>24)},setUint8:function(t,e){Z.call(this,t,e<<24>>24)}},!0)}else _=function(t){c(this,_,"ArrayBuffer");var e=h(t);this._b=y.call(new Array(e),0),this[C]=e},w=function(t,e,n){c(this,w,"DataView"),c(t,_,"DataView");var r=t[C],o=f(e);if(o<0||o>r)throw O("Wrong offset!");if(o+(n=void 0===n?r-o:p(n))>r)throw O("Wrong length!");this[P]=t,this[L]=o,this[C]=n},o&&($(_,"byteLength","_l"),$(w,"buffer","_b"),$(w,"byteLength","_l"),$(w,"byteOffset","_o")),u(w[m],{getInt8:function(t){return H(this,1,t)[0]<<24>>24},getUint8:function(t){return H(this,1,t)[0]},getInt16:function(t){var e=H(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=H(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return I(H(this,4,t,arguments[1]))},getUint32:function(t){return I(H(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return M(H(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return M(H(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){z(this,1,t,R,e)},setUint8:function(t,e){z(this,1,t,R,e)},setInt16:function(t,e){z(this,2,t,B,e,arguments[2])},setUint16:function(t,e){z(this,2,t,B,e,arguments[2])},setInt32:function(t,e){z(this,4,t,D,e,arguments[2])},setUint32:function(t,e){z(this,4,t,D,e,arguments[2])},setFloat32:function(t,e){z(this,4,t,U,e,arguments[2])},setFloat64:function(t,e){z(this,8,t,F,e,arguments[2])}});g(_,"ArrayBuffer"),g(w,"DataView"),s(w[m],a.VIEW,!0),e.ArrayBuffer=_,e.DataView=w},function(t,e,n){"use strict";var r=n(10);t.exports.f=function(t){return new function(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r}),this.resolve=r(e),this.reject=r(n)}(t)}},function(t,e,n){var r=n(2),o=n(80).set,i=r.MutationObserver||r.WebKitMutationObserver,a=r.process,s=r.Promise,u="process"==n(20)(a);t.exports=function(){var t,e,n,l=function(){var r,o;for(u&&(r=a.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(u)n=function(){a.nextTick(l)};else if(!i||r.navigator&&r.navigator.standalone)if(s&&s.resolve){var c=s.resolve();n=function(){c.then(l)}}else n=function(){o.call(r,l)};else{var f=!0,p=document.createTextNode("");new i(l).observe(p,{characterData:!0}),n=function(){p.data=f=!f}}return function(r){var o={fn:r,next:void 0};e&&(e.next=o),t||(t=o,n()),e=o}}},function(t,e,n){var r,o,i,a=n(21),s=n(149),u=n(98),l=n(102),c=n(2),f=c.process,p=c.setImmediate,h=c.clearImmediate,d=c.MessageChannel,v=c.Dispatch,y=0,g={},m=function(){var t=+this;if(g.hasOwnProperty(t)){var e=g[t];delete g[t],e()}},b=function(t){m.call(t.data)};p&&h||(p=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return g[++y]=function(){s("function"==typeof t?t:Function(t),e)},r(y),y},h=function(t){delete g[t]},"process"==n(20)(f)?r=function(t){f.nextTick(a(m,t,1))}:v&&v.now?r=function(t){v.now(a(m,t,1))}:d?(i=(o=new d).port2,o.port1.onmessage=b,r=a(i.postMessage,i,1)):c.addEventListener&&"function"==typeof postMessage&&!c.importScripts?(r=function(t){c.postMessage(t+"","*")},c.addEventListener("message",b,!1)):r="onreadystatechange"in l("script")?function(t){u.appendChild(l("script")).onreadystatechange=function(){u.removeChild(this),m.call(t)}}:function(t){setTimeout(a(m,t,1),0)}),t.exports={set:p,clear:h}},function(t,e,n){"use strict";var r=n(31),o=n(139),i=n(46),a=n(18);t.exports=n(90)(Array,"Array",function(t,e){this._t=a(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,e,n){"use strict";var r=n(9),o=n(39),i=n(6);t.exports=function(t){for(var e=r(this),n=i(e.length),a=arguments.length,s=o(a>1?arguments[1]:void 0,n),u=a>2?arguments[2]:void 0,l=void 0===u?n:o(u,n);l>s;)e[s++]=t;return e}},function(t,e,n){var r=n(339);t.exports=function(t,e){return new(r(t))(e)}},function(t,e,n){var r=n(51),o=n(5)("iterator"),i=n(46);t.exports=n(27).getIteratorMethod=function(t){if(void 0!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,e,n){"use strict";var r=n(7),o=n(43);t.exports=function(t,e,n){e in t?r.f(t,e,o(0,n)):t[e]=n}},function(t,e,n){var r=n(46),o=n(5)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,e,n){var r=n(5)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,n){var r=n(63),o=n(25);t.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(t))}},function(t,e,n){"use strict";var r=n(38),o=n(43),i=n(48),a={};n(13)(a,n(5)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(a,{next:o(1,n)}),i(t,e+" Iterator")}},function(t,e,n){"use strict";var r=n(41),o=n(0),i=n(12),a=n(13),s=n(14),u=n(46),l=n(89),c=n(48),f=n(16),p=n(5)("iterator"),h=!([].keys&&"next"in[].keys()),d=function(){return this};t.exports=function(t,e,n,v,y,g,m){l(n,e,v);var b,_,w,x=function(t){if(!h&&t in k)return k[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},O=e+" Iterator",E="values"==y,A=!1,k=t.prototype,N=k[p]||k["@@iterator"]||y&&k[y],S=!h&&N||x(y),j=y?E?x("entries"):S:void 0,T="Array"==e&&k.entries||N;if(T&&(w=f(T.call(new t)))!==Object.prototype&&w.next&&(c(w,O,!0),r||s(w,p)||a(w,p,d)),E&&N&&"values"!==N.name&&(A=!0,S=function(){return N.call(this)}),r&&!m||!h&&!A&&k[p]||a(k,p,S),u[e]=S,u[O]=d,y)if(b={values:E?S:x("values"),keys:g?S:x("keys"),entries:j},m)for(_ in b)_ in k||i(k,_,b[_]);else o(o.P+o.F*(h||A),e,b);return b}},function(t,e,n){var r=n(24),o=n(25);t.exports=function(t){return function(e,n){var i,a,s=String(o(e)),u=r(n),l=s.length;return u<0||u>=l?t?"":void 0:(i=s.charCodeAt(u))<55296||i>56319||u+1===l||(a=s.charCodeAt(u+1))<56320||a>57343?t?s.charAt(u):i:t?s.slice(u,u+2):a-56320+(i-55296<<10)+65536}}},function(t,e){var n=Math.expm1;t.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:n},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e,n){"use strict";var r=n(24),o=n(25);t.exports=function(t){var e=String(o(this)),n="",i=r(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(e+=e))1&i&&(n+=e);return n}},function(t,e,n){var r=n(4),o=n(97).set;t.exports=function(t,e,n){var i,a=e.constructor;return a!==n&&"function"==typeof a&&(i=a.prototype)!==n.prototype&&r(i)&&o&&o(t,i),t}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,n){var r=n(4),o=n(1),i=function(t,e){if(o(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(21)(Function.call,n(17).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return i(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:i}},function(t,e,n){var r=n(2).document;t.exports=r&&r.documentElement},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(67)("keys"),o=n(42);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e,n){var r=n(2),o=n(27),i=n(41),a=n(155),s=n(7).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:a.f(t)})}},function(t,e,n){var r=n(4),o=n(2).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){"use strict";n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o});var r=function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"ql-embed-item"},[e(this.componentType,{tag:"component",attrs:{url:this.url,meta:this.meta}})],1)},o=[]},function(t,e,n){"use strict";n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o});var r=function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"ql-video-embed"},[this.meta.embed.html?e("div",{domProps:{innerHTML:this._s(this.meta.embed.html)}}):this._e()])},o=[]},function(t,e,n){"use strict";n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o});var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"ql-link-embed"},[n("a",{staticClass:"ql-embed-link",attrs:{href:t.meta.url,target:"_blank"}},[n("span",{staticClass:"ql-embed-content"},[n("span",{staticClass:"ql-embed-description"},[t._v(t._s(t.description))]),t._v(" "),n("span",{staticClass:"ql-embed-source"},[n("source-icon",{attrs:{icon:t.meta.icon.any}}),t._v(" "),n("small",{staticClass:"ql-embed-publisher"},[t._v(t._s(t.publisher))])],1)]),t._v(" "),n("span",{staticClass:"ql-embed-image"},[n("source-image",{attrs:{image:t.meta.image.url}})],1)])])},o=[]},function(t,e,n){"use strict";n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o});var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("span",{staticClass:"ql-embed-source-image"},[t.image&&!t.hasError?n("img",{attrs:{src:t.image},on:{error:function(e){t.hasError=!0}}}):n("span",[n("svg",{attrs:{viewBox:"0 0 80 80",version:"1.1"}},[n("g",{attrs:{stroke:"none","stroke-width":"1",fill:"none","fill-rule":"evenodd"}},[n("path",{attrs:{d:"M8,8 L36,8 L36,0 L8,0 C3.6,0 0,3.6 0,8 L0,36 L8,36 L8,8 L8,8 Z M32,44 L16,64 L64,64 L52,48 L43.88,58.84 L32,44 L32,44 Z M60,26 C60,22.68 57.32,20 54,20 C50.68,20 48,22.68 48,26 C48,29.32 50.68,32 54,32 C57.32,32 60,29.32 60,26 L60,26 Z M72,0 L44,0 L44,8 L72,8 L72,36 L80,36 L80,8 C80,3.6 76.4,0 72,0 L72,0 Z M72,72 L44,72 L44,80 L72,80 C76.4,80 80,76.4 80,72 L80,44 L72,44 L72,72 L72,72 Z M8,44 L0,44 L0,72 C0,76.4 3.6,80 8,80 L36,80 L36,72 L8,72 L8,44 L8,44 Z",id:"Shape",fill:"currentcolor"}})])])])])},o=[]},function(t,e,n){"use strict";n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o});var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("span",{staticClass:"ql-embed-source-icon"},[t.icon&&!t.hasError?n("img",{attrs:{src:t.icon},on:{error:function(e){t.hasError=!0}}}):n("span",[n("svg",{attrs:{viewBox:"0 0 8 12",version:"1.1"}},[n("g",{attrs:{stroke:"none","stroke-width":"1",fill:"none","fill-rule":"evenodd"}},[n("polygon",{attrs:{id:"Shape",fill:"currentcolor",points:"0 10.59 4.58 6 0 1.41 1.41 0 7.41 6 1.41 12"}})])])])])},o=[]},function(t,e,n){(function(e){
/*!
 * Quill Editor v1.3.6
 * https://quilljs.com/
 * Copyright (c) 2014, Jason Chen
 * Copyright (c) 2013, salesforce.com
 */
var n;"undefined"!=typeof self&&self,n=function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=109)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(17),o=n(18),i=n(19),a=n(45),s=n(46),u=n(47),l=n(48),c=n(49),f=n(12),p=n(32),h=n(33),d=n(31),v=n(1),y={Scope:v.Scope,create:v.create,find:v.find,query:v.query,register:v.register,Container:r.default,Format:o.default,Leaf:i.default,Embed:l.default,Scroll:a.default,Block:u.default,Inline:s.default,Text:c.default,Attributor:{Attribute:f.default,Class:p.default,Style:h.default,Store:d.default}};e.default=y},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e){var n=this;return e="[Parchment] "+e,(n=t.call(this,e)||this).message=e,n.name=n.constructor.name,n}return o(e,t),e}(Error);e.ParchmentError=i;var a,s={},u={},l={},c={};function f(t,e){var n;if(void 0===e&&(e=a.ANY),"string"==typeof t)n=c[t]||s[t];else if(t instanceof Text||t.nodeType===Node.TEXT_NODE)n=c.text;else if("number"==typeof t)t&a.LEVEL&a.BLOCK?n=c.block:t&a.LEVEL&a.INLINE&&(n=c.inline);else if(t instanceof HTMLElement){var r=(t.getAttribute("class")||"").split(/\s+/);for(var o in r)if(n=u[r[o]])break;n=n||l[t.tagName]}return null==n?null:e&a.LEVEL&n.scope&&e&a.TYPE&n.scope?n:null}e.DATA_KEY="__blot",function(t){t[t.TYPE=3]="TYPE",t[t.LEVEL=12]="LEVEL",t[t.ATTRIBUTE=13]="ATTRIBUTE",t[t.BLOT=14]="BLOT",t[t.INLINE=7]="INLINE",t[t.BLOCK=11]="BLOCK",t[t.BLOCK_BLOT=10]="BLOCK_BLOT",t[t.INLINE_BLOT=6]="INLINE_BLOT",t[t.BLOCK_ATTRIBUTE=9]="BLOCK_ATTRIBUTE",t[t.INLINE_ATTRIBUTE=5]="INLINE_ATTRIBUTE",t[t.ANY=15]="ANY"}(a=e.Scope||(e.Scope={})),e.create=function(t,e){var n=f(t);if(null==n)throw new i("Unable to create "+t+" blot");var r=n;return new r(t instanceof Node||t.nodeType===Node.TEXT_NODE?t:r.create(e),e)},e.find=function t(n,r){return void 0===r&&(r=!1),null==n?null:null!=n[e.DATA_KEY]?n[e.DATA_KEY].blot:r?t(n.parentNode,r):null},e.query=f,e.register=function t(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];if(e.length>1)return e.map(function(e){return t(e)});var r=e[0];if("string"!=typeof r.blotName&&"string"!=typeof r.attrName)throw new i("Invalid definition");if("abstract"===r.blotName)throw new i("Cannot register abstract class");c[r.blotName||r.attrName]=r,"string"==typeof r.keyName?s[r.keyName]=r:(null!=r.className&&(u[r.className]=r),null!=r.tagName&&(Array.isArray(r.tagName)?r.tagName=r.tagName.map(function(t){return t.toUpperCase()}):r.tagName=r.tagName.toUpperCase(),(Array.isArray(r.tagName)?r.tagName:[r.tagName]).forEach(function(t){null!=l[t]&&null!=r.className||(l[t]=r)})));return r}},function(t,e,n){var r=n(51),o=n(11),i=n(3),a=n(20),s=String.fromCharCode(0),u=function(t){Array.isArray(t)?this.ops=t:null!=t&&Array.isArray(t.ops)?this.ops=t.ops:this.ops=[]};u.prototype.insert=function(t,e){var n={};return 0===t.length?this:(n.insert=t,null!=e&&"object"==typeof e&&Object.keys(e).length>0&&(n.attributes=e),this.push(n))},u.prototype.delete=function(t){return t<=0?this:this.push({delete:t})},u.prototype.retain=function(t,e){if(t<=0)return this;var n={retain:t};return null!=e&&"object"==typeof e&&Object.keys(e).length>0&&(n.attributes=e),this.push(n)},u.prototype.push=function(t){var e=this.ops.length,n=this.ops[e-1];if(t=i(!0,{},t),"object"==typeof n){if("number"==typeof t.delete&&"number"==typeof n.delete)return this.ops[e-1]={delete:n.delete+t.delete},this;if("number"==typeof n.delete&&null!=t.insert&&(e-=1,"object"!=typeof(n=this.ops[e-1])))return this.ops.unshift(t),this;if(o(t.attributes,n.attributes)){if("string"==typeof t.insert&&"string"==typeof n.insert)return this.ops[e-1]={insert:n.insert+t.insert},"object"==typeof t.attributes&&(this.ops[e-1].attributes=t.attributes),this;if("number"==typeof t.retain&&"number"==typeof n.retain)return this.ops[e-1]={retain:n.retain+t.retain},"object"==typeof t.attributes&&(this.ops[e-1].attributes=t.attributes),this}}return e===this.ops.length?this.ops.push(t):this.ops.splice(e,0,t),this},u.prototype.chop=function(){var t=this.ops[this.ops.length-1];return t&&t.retain&&!t.attributes&&this.ops.pop(),this},u.prototype.filter=function(t){return this.ops.filter(t)},u.prototype.forEach=function(t){this.ops.forEach(t)},u.prototype.map=function(t){return this.ops.map(t)},u.prototype.partition=function(t){var e=[],n=[];return this.forEach(function(r){(t(r)?e:n).push(r)}),[e,n]},u.prototype.reduce=function(t,e){return this.ops.reduce(t,e)},u.prototype.changeLength=function(){return this.reduce(function(t,e){return e.insert?t+a.length(e):e.delete?t-e.delete:t},0)},u.prototype.length=function(){return this.reduce(function(t,e){return t+a.length(e)},0)},u.prototype.slice=function(t,e){t=t||0,"number"!=typeof e&&(e=1/0);for(var n=[],r=a.iterator(this.ops),o=0;o<e&&r.hasNext();){var i;o<t?i=r.next(t-o):(i=r.next(e-o),n.push(i)),o+=a.length(i)}return new u(n)},u.prototype.compose=function(t){for(var e=a.iterator(this.ops),n=a.iterator(t.ops),r=new u;e.hasNext()||n.hasNext();)if("insert"===n.peekType())r.push(n.next());else if("delete"===e.peekType())r.push(e.next());else{var o=Math.min(e.peekLength(),n.peekLength()),i=e.next(o),s=n.next(o);if("number"==typeof s.retain){var l={};"number"==typeof i.retain?l.retain=o:l.insert=i.insert;var c=a.attributes.compose(i.attributes,s.attributes,"number"==typeof i.retain);c&&(l.attributes=c),r.push(l)}else"number"==typeof s.delete&&"number"==typeof i.retain&&r.push(s)}return r.chop()},u.prototype.concat=function(t){var e=new u(this.ops.slice());return t.ops.length>0&&(e.push(t.ops[0]),e.ops=e.ops.concat(t.ops.slice(1))),e},u.prototype.diff=function(t,e){if(this.ops===t.ops)return new u;var n=[this,t].map(function(e){return e.map(function(n){if(null!=n.insert)return"string"==typeof n.insert?n.insert:s;throw new Error("diff() called "+(e===t?"on":"with")+" non-document")}).join("")}),i=new u,l=r(n[0],n[1],e),c=a.iterator(this.ops),f=a.iterator(t.ops);return l.forEach(function(t){for(var e=t[1].length;e>0;){var n=0;switch(t[0]){case r.INSERT:n=Math.min(f.peekLength(),e),i.push(f.next(n));break;case r.DELETE:n=Math.min(e,c.peekLength()),c.next(n),i.delete(n);break;case r.EQUAL:n=Math.min(c.peekLength(),f.peekLength(),e);var s=c.next(n),u=f.next(n);o(s.insert,u.insert)?i.retain(n,a.attributes.diff(s.attributes,u.attributes)):i.push(u).delete(n)}e-=n}}),i.chop()},u.prototype.eachLine=function(t,e){e=e||"\n";for(var n=a.iterator(this.ops),r=new u,o=0;n.hasNext();){if("insert"!==n.peekType())return;var i=n.peek(),s=a.length(i)-n.peekLength(),l="string"==typeof i.insert?i.insert.indexOf(e,s)-s:-1;if(l<0)r.push(n.next());else if(l>0)r.push(n.next(l));else{if(!1===t(r,n.next(1).attributes||{},o))return;o+=1,r=new u}}r.length()>0&&t(r,{},o)},u.prototype.transform=function(t,e){if(e=!!e,"number"==typeof t)return this.transformPosition(t,e);for(var n=a.iterator(this.ops),r=a.iterator(t.ops),o=new u;n.hasNext()||r.hasNext();)if("insert"!==n.peekType()||!e&&"insert"===r.peekType())if("insert"===r.peekType())o.push(r.next());else{var i=Math.min(n.peekLength(),r.peekLength()),s=n.next(i),l=r.next(i);if(s.delete)continue;l.delete?o.push(l):o.retain(i,a.attributes.transform(s.attributes,l.attributes,e))}else o.retain(a.length(n.next()));return o.chop()},u.prototype.transformPosition=function(t,e){e=!!e;for(var n=a.iterator(this.ops),r=0;n.hasNext()&&r<=t;){var o=n.peekLength(),i=n.peekType();n.next(),"delete"!==i?("insert"===i&&(r<t||!e)&&(t+=o),r+=o):t-=Math.min(o,t-r)}return t},t.exports=u},function(t,e){"use strict";var n=Object.prototype.hasOwnProperty,r=Object.prototype.toString,o=function(t){return"function"==typeof Array.isArray?Array.isArray(t):"[object Array]"===r.call(t)},i=function(t){if(!t||"[object Object]"!==r.call(t))return!1;var e,o=n.call(t,"constructor"),i=t.constructor&&t.constructor.prototype&&n.call(t.constructor.prototype,"isPrototypeOf");if(t.constructor&&!o&&!i)return!1;for(e in t);return void 0===e||n.call(t,e)};t.exports=function t(){var e,n,r,a,s,u,l=arguments[0],c=1,f=arguments.length,p=!1;for("boolean"==typeof l&&(p=l,l=arguments[1]||{},c=2),(null==l||"object"!=typeof l&&"function"!=typeof l)&&(l={});c<f;++c)if(null!=(e=arguments[c]))for(n in e)r=l[n],l!==(a=e[n])&&(p&&a&&(i(a)||(s=o(a)))?(s?(s=!1,u=r&&o(r)?r:[]):u=r&&i(r)?r:{},l[n]=t(p,u,a)):void 0!==a&&(l[n]=a));return l}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.BlockEmbed=e.bubbleFormats=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=f(n(3)),a=f(n(2)),s=f(n(0)),u=f(n(16)),l=f(n(6)),c=f(n(7));function f(t){return t&&t.__esModule?t:{default:t}}function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function d(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var v=function(t){function e(){return p(this,e),h(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return d(e,s.default.Embed),r(e,[{key:"attach",value:function(){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"attach",this).call(this),this.attributes=new s.default.Attributor.Store(this.domNode)}},{key:"delta",value:function(){return(new a.default).insert(this.value(),(0,i.default)(this.formats(),this.attributes.values()))}},{key:"format",value:function(t,e){var n=s.default.query(t,s.default.Scope.BLOCK_ATTRIBUTE);null!=n&&this.attributes.attribute(n,e)}},{key:"formatAt",value:function(t,e,n,r){this.format(n,r)}},{key:"insertAt",value:function(t,n,r){if("string"==typeof n&&n.endsWith("\n")){var i=s.default.create(y.blotName);this.parent.insertBefore(i,0===t?this:this.next),i.insertAt(0,n.slice(0,-1))}else o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertAt",this).call(this,t,n,r)}}]),e}();v.scope=s.default.Scope.BLOCK_BLOT;var y=function(t){function e(t){p(this,e);var n=h(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.cache={},n}return d(e,s.default.Block),r(e,[{key:"delta",value:function(){return null==this.cache.delta&&(this.cache.delta=this.descendants(s.default.Leaf).reduce(function(t,e){return 0===e.length()?t:t.insert(e.value(),g(e))},new a.default).insert("\n",g(this))),this.cache.delta}},{key:"deleteAt",value:function(t,n){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"deleteAt",this).call(this,t,n),this.cache={}}},{key:"formatAt",value:function(t,n,r,i){n<=0||(s.default.query(r,s.default.Scope.BLOCK)?t+n===this.length()&&this.format(r,i):o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"formatAt",this).call(this,t,Math.min(n,this.length()-t-1),r,i),this.cache={})}},{key:"insertAt",value:function(t,n,r){if(null!=r)return o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertAt",this).call(this,t,n,r);if(0!==n.length){var i=n.split("\n"),a=i.shift();a.length>0&&(t<this.length()-1||null==this.children.tail?o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertAt",this).call(this,Math.min(t,this.length()-1),a):this.children.tail.insertAt(this.children.tail.length(),a),this.cache={});var s=this;i.reduce(function(t,e){return(s=s.split(t,!0)).insertAt(0,e),e.length},t+a.length)}}},{key:"insertBefore",value:function(t,n){var r=this.children.head;o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertBefore",this).call(this,t,n),r instanceof u.default&&r.remove(),this.cache={}}},{key:"length",value:function(){return null==this.cache.length&&(this.cache.length=o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"length",this).call(this)+1),this.cache.length}},{key:"moveChildren",value:function(t,n){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"moveChildren",this).call(this,t,n),this.cache={}}},{key:"optimize",value:function(t){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t),this.cache={}}},{key:"path",value:function(t){return o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"path",this).call(this,t,!0)}},{key:"removeChild",value:function(t){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"removeChild",this).call(this,t),this.cache={}}},{key:"split",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(n&&(0===t||t>=this.length()-1)){var r=this.clone();return 0===t?(this.parent.insertBefore(r,this),this):(this.parent.insertBefore(r,this.next),r)}var i=o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"split",this).call(this,t,n);return this.cache={},i}}]),e}();function g(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return null==t?e:("function"==typeof t.formats&&(e=(0,i.default)(e,t.formats())),null==t.parent||"scroll"==t.parent.blotName||t.parent.statics.scope!==t.statics.scope?e:g(t.parent,e))}y.blotName="block",y.tagName="P",y.defaultChild="break",y.allowedChildren=[l.default,s.default.Embed,c.default],e.bubbleFormats=g,e.BlockEmbed=v,e.default=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.overload=e.expandConfig=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();n(50);var a=y(n(2)),s=y(n(14)),u=y(n(8)),l=y(n(9)),c=y(n(0)),f=n(15),p=y(f),h=y(n(3)),d=y(n(10)),v=y(n(34));function y(t){return t&&t.__esModule?t:{default:t}}function g(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var m=(0,d.default)("quill"),b=function(){function t(e){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.options=_(e,r),this.container=this.options.container,null==this.container)return m.error("Invalid Quill container",e);this.options.debug&&t.debug(this.options.debug);var o=this.container.innerHTML.trim();this.container.classList.add("ql-container"),this.container.innerHTML="",this.container.__quill=this,this.root=this.addContainer("ql-editor"),this.root.classList.add("ql-blank"),this.root.setAttribute("data-gramm",!1),this.scrollingContainer=this.options.scrollingContainer||this.root,this.emitter=new u.default,this.scroll=c.default.create(this.root,{emitter:this.emitter,whitelist:this.options.formats}),this.editor=new s.default(this.scroll),this.selection=new p.default(this.scroll,this.emitter),this.theme=new this.options.theme(this,this.options),this.keyboard=this.theme.addModule("keyboard"),this.clipboard=this.theme.addModule("clipboard"),this.history=this.theme.addModule("history"),this.theme.init(),this.emitter.on(u.default.events.EDITOR_CHANGE,function(t){t===u.default.events.TEXT_CHANGE&&n.root.classList.toggle("ql-blank",n.editor.isBlank())}),this.emitter.on(u.default.events.SCROLL_UPDATE,function(t,e){var r=n.selection.lastRange,o=r&&0===r.length?r.index:void 0;w.call(n,function(){return n.editor.update(null,e,o)},t)});var i=this.clipboard.convert("<div class='ql-editor' style=\"white-space: normal;\">"+o+"<p><br></p></div>");this.setContents(i),this.history.clear(),this.options.placeholder&&this.root.setAttribute("data-placeholder",this.options.placeholder),this.options.readOnly&&this.disable()}return i(t,null,[{key:"debug",value:function(t){!0===t&&(t="log"),d.default.level(t)}},{key:"find",value:function(t){return t.__quill||c.default.find(t)}},{key:"import",value:function(t){return null==this.imports[t]&&m.error("Cannot import "+t+". Are you sure it was registered?"),this.imports[t]}},{key:"register",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if("string"!=typeof t){var o=t.attrName||t.blotName;"string"==typeof o?this.register("formats/"+o,t,e):Object.keys(t).forEach(function(r){n.register(r,t[r],e)})}else null==this.imports[t]||r||m.warn("Overwriting "+t+" with",e),this.imports[t]=e,(t.startsWith("blots/")||t.startsWith("formats/"))&&"abstract"!==e.blotName?c.default.register(e):t.startsWith("modules")&&"function"==typeof e.register&&e.register()}}]),i(t,[{key:"addContainer",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if("string"==typeof t){var n=t;(t=document.createElement("div")).classList.add(n)}return this.container.insertBefore(t,e),t}},{key:"blur",value:function(){this.selection.setRange(null)}},{key:"deleteText",value:function(t,e,n){var r=this,i=x(t,e,n),a=o(i,4);return t=a[0],e=a[1],n=a[3],w.call(this,function(){return r.editor.deleteText(t,e)},n,t,-1*e)}},{key:"disable",value:function(){this.enable(!1)}},{key:"enable",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.scroll.enable(t),this.container.classList.toggle("ql-disabled",!t)}},{key:"focus",value:function(){var t=this.scrollingContainer.scrollTop;this.selection.focus(),this.scrollingContainer.scrollTop=t,this.scrollIntoView()}},{key:"format",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u.default.sources.API;return w.call(this,function(){var r=n.getSelection(!0),o=new a.default;if(null==r)return o;if(c.default.query(t,c.default.Scope.BLOCK))o=n.editor.formatLine(r.index,r.length,g({},t,e));else{if(0===r.length)return n.selection.format(t,e),o;o=n.editor.formatText(r.index,r.length,g({},t,e))}return n.setSelection(r,u.default.sources.SILENT),o},r)}},{key:"formatLine",value:function(t,e,n,r,i){var a,s=this,u=x(t,e,n,r,i),l=o(u,4);return t=l[0],e=l[1],a=l[2],i=l[3],w.call(this,function(){return s.editor.formatLine(t,e,a)},i,t,0)}},{key:"formatText",value:function(t,e,n,r,i){var a,s=this,u=x(t,e,n,r,i),l=o(u,4);return t=l[0],e=l[1],a=l[2],i=l[3],w.call(this,function(){return s.editor.formatText(t,e,a)},i,t,0)}},{key:"getBounds",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=void 0;n="number"==typeof t?this.selection.getBounds(t,e):this.selection.getBounds(t.index,t.length);var r=this.container.getBoundingClientRect();return{bottom:n.bottom-r.top,height:n.height,left:n.left-r.left,right:n.right-r.left,top:n.top-r.top,width:n.width}}},{key:"getContents",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.getLength()-t,n=x(t,e),r=o(n,2);return t=r[0],e=r[1],this.editor.getContents(t,e)}},{key:"getFormat",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.getSelection(!0),e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return"number"==typeof t?this.editor.getFormat(t,e):this.editor.getFormat(t.index,t.length)}},{key:"getIndex",value:function(t){return t.offset(this.scroll)}},{key:"getLength",value:function(){return this.scroll.length()}},{key:"getLeaf",value:function(t){return this.scroll.leaf(t)}},{key:"getLine",value:function(t){return this.scroll.line(t)}},{key:"getLines",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.MAX_VALUE;return"number"!=typeof t?this.scroll.lines(t.index,t.length):this.scroll.lines(t,e)}},{key:"getModule",value:function(t){return this.theme.modules[t]}},{key:"getSelection",value:function(){return arguments.length>0&&void 0!==arguments[0]&&arguments[0]&&this.focus(),this.update(),this.selection.getRange()[0]}},{key:"getText",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.getLength()-t,n=x(t,e),r=o(n,2);return t=r[0],e=r[1],this.editor.getText(t,e)}},{key:"hasFocus",value:function(){return this.selection.hasFocus()}},{key:"insertEmbed",value:function(e,n,r){var o=this,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.sources.API;return w.call(this,function(){return o.editor.insertEmbed(e,n,r)},i,e)}},{key:"insertText",value:function(t,e,n,r,i){var a,s=this,u=x(t,0,n,r,i),l=o(u,4);return t=l[0],a=l[2],i=l[3],w.call(this,function(){return s.editor.insertText(t,e,a)},i,t,e.length)}},{key:"isEnabled",value:function(){return!this.container.classList.contains("ql-disabled")}},{key:"off",value:function(){return this.emitter.off.apply(this.emitter,arguments)}},{key:"on",value:function(){return this.emitter.on.apply(this.emitter,arguments)}},{key:"once",value:function(){return this.emitter.once.apply(this.emitter,arguments)}},{key:"pasteHTML",value:function(t,e,n){this.clipboard.dangerouslyPasteHTML(t,e,n)}},{key:"removeFormat",value:function(t,e,n){var r=this,i=x(t,e,n),a=o(i,4);return t=a[0],e=a[1],n=a[3],w.call(this,function(){return r.editor.removeFormat(t,e)},n,t)}},{key:"scrollIntoView",value:function(){this.selection.scrollIntoView(this.scrollingContainer)}},{key:"setContents",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:u.default.sources.API;return w.call(this,function(){t=new a.default(t);var n=e.getLength(),r=e.editor.deleteText(0,n),o=e.editor.applyDelta(t),i=o.ops[o.ops.length-1];return null!=i&&"string"==typeof i.insert&&"\n"===i.insert[i.insert.length-1]&&(e.editor.deleteText(e.getLength()-1,1),o.delete(1)),r.compose(o)},n)}},{key:"setSelection",value:function(e,n,r){if(null==e)this.selection.setRange(null,n||t.sources.API);else{var i=x(e,n,r),a=o(i,4);e=a[0],n=a[1],r=a[3],this.selection.setRange(new f.Range(e,n),r),r!==u.default.sources.SILENT&&this.selection.scrollIntoView(this.scrollingContainer)}}},{key:"setText",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:u.default.sources.API,n=(new a.default).insert(t);return this.setContents(n,e)}},{key:"update",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.default.sources.USER,e=this.scroll.update(t);return this.selection.update(t),e}},{key:"updateContents",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:u.default.sources.API;return w.call(this,function(){return t=new a.default(t),e.editor.applyDelta(t,n)},n,!0)}}]),t}();function _(t,e){if((e=(0,h.default)(!0,{container:t,modules:{clipboard:!0,keyboard:!0,history:!0}},e)).theme&&e.theme!==b.DEFAULTS.theme){if(e.theme=b.import("themes/"+e.theme),null==e.theme)throw new Error("Invalid theme "+e.theme+". Did you register it?")}else e.theme=v.default;var n=(0,h.default)(!0,{},e.theme.DEFAULTS);[n,e].forEach(function(t){t.modules=t.modules||{},Object.keys(t.modules).forEach(function(e){!0===t.modules[e]&&(t.modules[e]={})})});var r=Object.keys(n.modules).concat(Object.keys(e.modules)).reduce(function(t,e){var n=b.import("modules/"+e);return null==n?m.error("Cannot load "+e+" module. Are you sure you registered it?"):t[e]=n.DEFAULTS||{},t},{});return null!=e.modules&&e.modules.toolbar&&e.modules.toolbar.constructor!==Object&&(e.modules.toolbar={container:e.modules.toolbar}),e=(0,h.default)(!0,{},b.DEFAULTS,{modules:r},n,e),["bounds","container","scrollingContainer"].forEach(function(t){"string"==typeof e[t]&&(e[t]=document.querySelector(e[t]))}),e.modules=Object.keys(e.modules).reduce(function(t,n){return e.modules[n]&&(t[n]=e.modules[n]),t},{}),e}function w(t,e,n,r){if(this.options.strict&&!this.isEnabled()&&e===u.default.sources.USER)return new a.default;var o=null==n?null:this.getSelection(),i=this.editor.delta,s=t();if(null!=o&&(!0===n&&(n=o.index),null==r?o=O(o,s,e):0!==r&&(o=O(o,n,r,e)),this.setSelection(o,u.default.sources.SILENT)),s.length()>0){var l,c,f=[u.default.events.TEXT_CHANGE,s,i,e];if((l=this.emitter).emit.apply(l,[u.default.events.EDITOR_CHANGE].concat(f)),e!==u.default.sources.SILENT)(c=this.emitter).emit.apply(c,f)}return s}function x(t,e,n,o,i){var a={};return"number"==typeof t.index&&"number"==typeof t.length?"number"!=typeof e?(i=o,o=n,n=e,e=t.length,t=t.index):(e=t.length,t=t.index):"number"!=typeof e&&(i=o,o=n,n=e,e=0),"object"===(void 0===n?"undefined":r(n))?(a=n,i=o):"string"==typeof n&&(null!=o?a[n]=o:i=n),[t,e,a,i=i||u.default.sources.API]}function O(t,e,n,r){if(null==t)return null;var i=void 0,s=void 0;if(e instanceof a.default){var l=[t.index,t.index+t.length].map(function(t){return e.transformPosition(t,r!==u.default.sources.USER)}),c=o(l,2);i=c[0],s=c[1]}else{var p=[t.index,t.index+t.length].map(function(t){return t<e||t===e&&r===u.default.sources.USER?t:n>=0?t+n:Math.max(e,t+n)}),h=o(p,2);i=h[0],s=h[1]}return new f.Range(i,s-i)}b.DEFAULTS={bounds:null,formats:null,modules:{},placeholder:"",readOnly:!1,scrollingContainer:null,strict:!0,theme:"default"},b.events=u.default.events,b.sources=u.default.sources,b.version="1.3.6",b.imports={delta:a.default,parchment:c.default,"core/module":l.default,"core/theme":v.default},e.expandConfig=_,e.overload=x,e.default=b},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=s(n(7)),a=s(n(0));function s(t){return t&&t.__esModule?t:{default:t}}var u=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default.Inline),r(e,[{key:"formatAt",value:function(t,n,r,i){if(e.compare(this.statics.blotName,r)<0&&a.default.query(r,a.default.Scope.BLOT)){var s=this.isolate(t,n);i&&s.wrap(r,i)}else o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"formatAt",this).call(this,t,n,r,i)}},{key:"optimize",value:function(t){if(o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t),this.parent instanceof e&&e.compare(this.statics.blotName,this.parent.statics.blotName)>0){var n=this.parent.isolate(this.offset(),this.length());this.moveChildren(n),n.wrap(this)}}}],[{key:"compare",value:function(t,n){var r=e.order.indexOf(t),o=e.order.indexOf(n);return r>=0||o>=0?r-o:t===n?0:t<n?-1:1}}]),e}();u.allowedChildren=[u,a.default.Embed,i.default],u.order=["cursor","inline","underline","strike","italic","bold","script","link","code"],e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};var a=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default.Text),e}();e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=i(n(54));function i(t){return t&&t.__esModule?t:{default:t}}var a=(0,i(n(10)).default)("quill:events");["selectionchange","mousedown","mouseup","click"].forEach(function(t){document.addEventListener(t,function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];[].slice.call(document.querySelectorAll(".ql-container")).forEach(function(t){var n;t.__quill&&t.__quill.emitter&&(n=t.__quill.emitter).handleDOM.apply(n,e)})})});var s=function(t){function e(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var t=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return t.listeners={},t.on("error",a.error),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,o.default),r(e,[{key:"emit",value:function(){a.log.apply(a,arguments),function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"emit",this).apply(this,arguments)}},{key:"handleDOM",value:function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];(this.listeners[t.type]||[]).forEach(function(e){var r=e.node,o=e.handler;(t.target===r||r.contains(t.target))&&o.apply(void 0,[t].concat(n))})}},{key:"listenDOM",value:function(t,e,n){this.listeners[t]||(this.listeners[t]=[]),this.listeners[t].push({node:e,handler:n})}}]),e}();s.events={EDITOR_CHANGE:"editor-change",SCROLL_BEFORE_UPDATE:"scroll-before-update",SCROLL_OPTIMIZE:"scroll-optimize",SCROLL_UPDATE:"scroll-update",SELECTION_CHANGE:"selection-change",TEXT_CHANGE:"text-change"},s.sources={API:"api",SILENT:"silent",USER:"user"},e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.quill=e,this.options=n};r.DEFAULTS={},e.default=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=["error","warn","log","info"],o="warn";function i(t){if(r.indexOf(t)<=r.indexOf(o)){for(var e,n=arguments.length,i=Array(n>1?n-1:0),a=1;a<n;a++)i[a-1]=arguments[a];(e=console)[t].apply(e,i)}}function a(t){return r.reduce(function(e,n){return e[n]=i.bind(console,n,t),e},{})}i.level=a.level=function(t){o=t},e.default=a},function(t,e,n){var r=Array.prototype.slice,o=n(52),i=n(53),a=t.exports=function(t,e,n){return n||(n={}),t===e||(t instanceof Date&&e instanceof Date?t.getTime()===e.getTime():!t||!e||"object"!=typeof t&&"object"!=typeof e?n.strict?t===e:t==e:function(t,e,n){var l,c;if(s(t)||s(e))return!1;if(t.prototype!==e.prototype)return!1;if(i(t))return!!i(e)&&(t=r.call(t),e=r.call(e),a(t,e,n));if(u(t)){if(!u(e))return!1;if(t.length!==e.length)return!1;for(l=0;l<t.length;l++)if(t[l]!==e[l])return!1;return!0}try{var f=o(t),p=o(e)}catch(t){return!1}if(f.length!=p.length)return!1;for(f.sort(),p.sort(),l=f.length-1;l>=0;l--)if(f[l]!=p[l])return!1;for(l=f.length-1;l>=0;l--)if(c=f[l],!a(t[c],e[c],n))return!1;return typeof t==typeof e}(t,e,n))};function s(t){return null===t||void 0===t}function u(t){return!(!t||"object"!=typeof t||"number"!=typeof t.length)&&("function"==typeof t.copy&&"function"==typeof t.slice&&!(t.length>0&&"number"!=typeof t[0]))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),o=function(){function t(t,e,n){void 0===n&&(n={}),this.attrName=t,this.keyName=e;var o=r.Scope.TYPE&r.Scope.ATTRIBUTE;null!=n.scope?this.scope=n.scope&r.Scope.LEVEL|o:this.scope=r.Scope.ATTRIBUTE,null!=n.whitelist&&(this.whitelist=n.whitelist)}return t.keys=function(t){return[].map.call(t.attributes,function(t){return t.name})},t.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(t.setAttribute(this.keyName,e),!0)},t.prototype.canAdd=function(t,e){return null!=r.query(t,r.Scope.BLOT&(this.scope|r.Scope.TYPE))&&(null==this.whitelist||("string"==typeof e?this.whitelist.indexOf(e.replace(/["']/g,""))>-1:this.whitelist.indexOf(e)>-1))},t.prototype.remove=function(t){t.removeAttribute(this.keyName)},t.prototype.value=function(t){var e=t.getAttribute(this.keyName);return this.canAdd(t,e)&&e?e:""},t}();e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.Code=void 0;var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=f(n(2)),s=f(n(0)),u=f(n(4)),l=f(n(6)),c=f(n(7));function f(t){return t&&t.__esModule?t:{default:t}}function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function d(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var v=function(t){function e(){return p(this,e),h(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return d(e,l.default),e}();v.blotName="code",v.tagName="CODE";var y=function(t){function e(){return p(this,e),h(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return d(e,u.default),o(e,[{key:"delta",value:function(){var t=this,e=this.domNode.textContent;return e.endsWith("\n")&&(e=e.slice(0,-1)),e.split("\n").reduce(function(e,n){return e.insert(n).insert("\n",t.formats())},new a.default)}},{key:"format",value:function(t,n){if(t!==this.statics.blotName||!n){var o=this.descendant(c.default,this.length()-1),a=r(o,1)[0];null!=a&&a.deleteAt(a.length()-1,1),i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n)}}},{key:"formatAt",value:function(t,n,r,o){if(0!==n&&null!=s.default.query(r,s.default.Scope.BLOCK)&&(r!==this.statics.blotName||o!==this.statics.formats(this.domNode))){var i=this.newlineIndex(t);if(!(i<0||i>=t+n)){var a=this.newlineIndex(t,!0)+1,u=i-a+1,l=this.isolate(a,u),c=l.next;l.format(r,o),c instanceof e&&c.formatAt(0,t-a+n-u,r,o)}}}},{key:"insertAt",value:function(t,e,n){if(null==n){var o=this.descendant(c.default,t),i=r(o,2),a=i[0],s=i[1];a.insertAt(s,e)}}},{key:"length",value:function(){var t=this.domNode.textContent.length;return this.domNode.textContent.endsWith("\n")?t:t+1}},{key:"newlineIndex",value:function(t){if(arguments.length>1&&void 0!==arguments[1]&&arguments[1])return this.domNode.textContent.slice(0,t).lastIndexOf("\n");var e=this.domNode.textContent.slice(t).indexOf("\n");return e>-1?t+e:-1}},{key:"optimize",value:function(t){this.domNode.textContent.endsWith("\n")||this.appendChild(s.default.create("text","\n")),i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t);var n=this.next;null!=n&&n.prev===this&&n.statics.blotName===this.statics.blotName&&this.statics.formats(this.domNode)===n.statics.formats(n.domNode)&&(n.optimize(t),n.moveChildren(this),n.remove())}},{key:"replace",value:function(t){i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"replace",this).call(this,t),[].slice.call(this.domNode.querySelectorAll("*")).forEach(function(t){var e=s.default.find(t);null==e?t.parentNode.removeChild(t):e instanceof s.default.Embed?e.remove():e.unwrap()})}}],[{key:"create",value:function(t){var n=i(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t);return n.setAttribute("spellcheck",!1),n}},{key:"formats",value:function(){return!0}}]),e}();y.blotName="code-block",y.tagName="PRE",y.TAB="  ",e.Code=v,e.default=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=g(n(2)),s=g(n(20)),u=g(n(0)),l=g(n(13)),c=g(n(24)),f=n(4),p=g(f),h=g(n(16)),d=g(n(21)),v=g(n(11)),y=g(n(3));function g(t){return t&&t.__esModule?t:{default:t}}var m=/^[ -~]*$/,b=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.scroll=e,this.delta=this.getDelta()}return i(t,[{key:"applyDelta",value:function(t){var e=this,n=!1;this.scroll.update();var i=this.scroll.length();return this.scroll.batchStart(),(t=function(t){return t.reduce(function(t,e){if(1===e.insert){var n=(0,d.default)(e.attributes);return delete n.image,t.insert({image:e.attributes.image},n)}if(null==e.attributes||!0!==e.attributes.list&&!0!==e.attributes.bullet||((e=(0,d.default)(e)).attributes.list?e.attributes.list="ordered":(e.attributes.list="bullet",delete e.attributes.bullet)),"string"==typeof e.insert){var r=e.insert.replace(/\r\n/g,"\n").replace(/\r/g,"\n");return t.insert(r,e.attributes)}return t.push(e)},new a.default)}(t)).reduce(function(t,a){var l=a.retain||a.delete||a.insert.length||1,c=a.attributes||{};if(null!=a.insert){if("string"==typeof a.insert){var h=a.insert;h.endsWith("\n")&&n&&(n=!1,h=h.slice(0,-1)),t>=i&&!h.endsWith("\n")&&(n=!0),e.scroll.insertAt(t,h);var d=e.scroll.line(t),v=o(d,2),g=v[0],m=v[1],b=(0,y.default)({},(0,f.bubbleFormats)(g));if(g instanceof p.default){var _=g.descendant(u.default.Leaf,m),w=o(_,1)[0];b=(0,y.default)(b,(0,f.bubbleFormats)(w))}c=s.default.attributes.diff(b,c)||{}}else if("object"===r(a.insert)){var x=Object.keys(a.insert)[0];if(null==x)return t;e.scroll.insertAt(t,x,a.insert[x])}i+=l}return Object.keys(c).forEach(function(n){e.scroll.formatAt(t,l,n,c[n])}),t+l},0),t.reduce(function(t,n){return"number"==typeof n.delete?(e.scroll.deleteAt(t,n.delete),t):t+(n.retain||n.insert.length||1)},0),this.scroll.batchEnd(),this.update(t)}},{key:"deleteText",value:function(t,e){return this.scroll.deleteAt(t,e),this.update((new a.default).retain(t).delete(e))}},{key:"formatLine",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.scroll.update(),Object.keys(r).forEach(function(o){if(null==n.scroll.whitelist||n.scroll.whitelist[o]){var i=n.scroll.lines(t,Math.max(e,1)),a=e;i.forEach(function(e){var i=e.length();if(e instanceof l.default){var s=t-e.offset(n.scroll),u=e.newlineIndex(s+a)-s+1;e.formatAt(s,u,o,r[o])}else e.format(o,r[o]);a-=i})}}),this.scroll.optimize(),this.update((new a.default).retain(t).retain(e,(0,d.default)(r)))}},{key:"formatText",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return Object.keys(r).forEach(function(o){n.scroll.formatAt(t,e,o,r[o])}),this.update((new a.default).retain(t).retain(e,(0,d.default)(r)))}},{key:"getContents",value:function(t,e){return this.delta.slice(t,t+e)}},{key:"getDelta",value:function(){return this.scroll.lines().reduce(function(t,e){return t.concat(e.delta())},new a.default)}},{key:"getFormat",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=[],r=[];0===e?this.scroll.path(t).forEach(function(t){var e=o(t,1)[0];e instanceof p.default?n.push(e):e instanceof u.default.Leaf&&r.push(e)}):(n=this.scroll.lines(t,e),r=this.scroll.descendants(u.default.Leaf,t,e));var i=[n,r].map(function(t){if(0===t.length)return{};for(var e=(0,f.bubbleFormats)(t.shift());Object.keys(e).length>0;){var n=t.shift();if(null==n)return e;e=_((0,f.bubbleFormats)(n),e)}return e});return y.default.apply(y.default,i)}},{key:"getText",value:function(t,e){return this.getContents(t,e).filter(function(t){return"string"==typeof t.insert}).map(function(t){return t.insert}).join("")}},{key:"insertEmbed",value:function(t,e,n){return this.scroll.insertAt(t,e,n),this.update((new a.default).retain(t).insert(function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}({},e,n)))}},{key:"insertText",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return e=e.replace(/\r\n/g,"\n").replace(/\r/g,"\n"),this.scroll.insertAt(t,e),Object.keys(r).forEach(function(o){n.scroll.formatAt(t,e.length,o,r[o])}),this.update((new a.default).retain(t).insert(e,(0,d.default)(r)))}},{key:"isBlank",value:function(){if(0==this.scroll.children.length)return!0;if(this.scroll.children.length>1)return!1;var t=this.scroll.children.head;return t.statics.blotName===p.default.blotName&&(!(t.children.length>1)&&t.children.head instanceof h.default)}},{key:"removeFormat",value:function(t,e){var n=this.getText(t,e),r=this.scroll.line(t+e),i=o(r,2),s=i[0],u=i[1],c=0,f=new a.default;null!=s&&(c=s instanceof l.default?s.newlineIndex(u)-u+1:s.length()-u,f=s.delta().slice(u,u+c-1).insert("\n"));var p=this.getContents(t,e+c).diff((new a.default).insert(n).concat(f)),h=(new a.default).retain(t).concat(p);return this.applyDelta(h)}},{key:"update",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,r=this.delta;if(1===e.length&&"characterData"===e[0].type&&e[0].target.data.match(m)&&u.default.find(e[0].target)){var o=u.default.find(e[0].target),i=(0,f.bubbleFormats)(o),s=o.offset(this.scroll),l=e[0].oldValue.replace(c.default.CONTENTS,""),p=(new a.default).insert(l),h=(new a.default).insert(o.value());t=(new a.default).retain(s).concat(p.diff(h,n)).reduce(function(t,e){return e.insert?t.insert(e.insert,i):t.push(e)},new a.default),this.delta=r.compose(t)}else this.delta=this.getDelta(),t&&(0,v.default)(r.compose(t),this.delta)||(t=r.diff(this.delta,n));return t}}]),t}();function _(t,e){return Object.keys(e).reduce(function(n,r){return null==t[r]?n:(e[r]===t[r]?n[r]=e[r]:Array.isArray(e[r])?e[r].indexOf(t[r])<0&&(n[r]=e[r].concat([t[r]])):n[r]=[e[r],t[r]],n)},{})}e.default=b},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.Range=void 0;var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=l(n(0)),a=l(n(21)),s=l(n(11)),u=l(n(8));function l(t){return t&&t.__esModule?t:{default:t}}function c(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function f(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var p=(0,l(n(10)).default)("quill:selection"),h=function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;f(this,t),this.index=e,this.length=n},d=function(){function t(e,n){var r=this;f(this,t),this.emitter=n,this.scroll=e,this.composing=!1,this.mouseDown=!1,this.root=this.scroll.domNode,this.cursor=i.default.create("cursor",this),this.lastRange=this.savedRange=new h(0,0),this.handleComposition(),this.handleDragging(),this.emitter.listenDOM("selectionchange",document,function(){r.mouseDown||setTimeout(r.update.bind(r,u.default.sources.USER),1)}),this.emitter.on(u.default.events.EDITOR_CHANGE,function(t,e){t===u.default.events.TEXT_CHANGE&&e.length()>0&&r.update(u.default.sources.SILENT)}),this.emitter.on(u.default.events.SCROLL_BEFORE_UPDATE,function(){if(r.hasFocus()){var t=r.getNativeRange();null!=t&&t.start.node!==r.cursor.textNode&&r.emitter.once(u.default.events.SCROLL_UPDATE,function(){try{r.setNativeRange(t.start.node,t.start.offset,t.end.node,t.end.offset)}catch(t){}})}}),this.emitter.on(u.default.events.SCROLL_OPTIMIZE,function(t,e){if(e.range){var n=e.range,o=n.startNode,i=n.startOffset,a=n.endNode,s=n.endOffset;r.setNativeRange(o,i,a,s)}}),this.update(u.default.sources.SILENT)}return o(t,[{key:"handleComposition",value:function(){var t=this;this.root.addEventListener("compositionstart",function(){t.composing=!0}),this.root.addEventListener("compositionend",function(){if(t.composing=!1,t.cursor.parent){var e=t.cursor.restore();if(!e)return;setTimeout(function(){t.setNativeRange(e.startNode,e.startOffset,e.endNode,e.endOffset)},1)}})}},{key:"handleDragging",value:function(){var t=this;this.emitter.listenDOM("mousedown",document.body,function(){t.mouseDown=!0}),this.emitter.listenDOM("mouseup",document.body,function(){t.mouseDown=!1,t.update(u.default.sources.USER)})}},{key:"focus",value:function(){this.hasFocus()||(this.root.focus(),this.setRange(this.savedRange))}},{key:"format",value:function(t,e){if(null==this.scroll.whitelist||this.scroll.whitelist[t]){this.scroll.update();var n=this.getNativeRange();if(null!=n&&n.native.collapsed&&!i.default.query(t,i.default.Scope.BLOCK)){if(n.start.node!==this.cursor.textNode){var r=i.default.find(n.start.node,!1);if(null==r)return;if(r instanceof i.default.Leaf){var o=r.split(n.start.offset);r.parent.insertBefore(this.cursor,o)}else r.insertBefore(this.cursor,n.start.node);this.cursor.attach()}this.cursor.format(t,e),this.scroll.optimize(),this.setNativeRange(this.cursor.textNode,this.cursor.textNode.data.length),this.update()}}}},{key:"getBounds",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=this.scroll.length();t=Math.min(t,n-1),e=Math.min(t+e,n-1)-t;var o=void 0,i=this.scroll.leaf(t),a=r(i,2),s=a[0],u=a[1];if(null==s)return null;var l=s.position(u,!0),c=r(l,2);o=c[0],u=c[1];var f=document.createRange();if(e>0){f.setStart(o,u);var p=this.scroll.leaf(t+e),h=r(p,2);if(s=h[0],u=h[1],null==s)return null;var d=s.position(u,!0),v=r(d,2);return o=v[0],u=v[1],f.setEnd(o,u),f.getBoundingClientRect()}var y="left",g=void 0;return o instanceof Text?(u<o.data.length?(f.setStart(o,u),f.setEnd(o,u+1)):(f.setStart(o,u-1),f.setEnd(o,u),y="right"),g=f.getBoundingClientRect()):(g=s.domNode.getBoundingClientRect(),u>0&&(y="right")),{bottom:g.top+g.height,height:g.height,left:g[y],right:g[y],top:g.top,width:0}}},{key:"getNativeRange",value:function(){var t=document.getSelection();if(null==t||t.rangeCount<=0)return null;var e=t.getRangeAt(0);if(null==e)return null;var n=this.normalizeNative(e);return p.info("getNativeRange",n),n}},{key:"getRange",value:function(){var t=this.getNativeRange();return null==t?[null,null]:[this.normalizedToRange(t),t]}},{key:"hasFocus",value:function(){return document.activeElement===this.root}},{key:"normalizedToRange",value:function(t){var e=this,n=[[t.start.node,t.start.offset]];t.native.collapsed||n.push([t.end.node,t.end.offset]);var o=n.map(function(t){var n=r(t,2),o=n[0],a=n[1],s=i.default.find(o,!0),u=s.offset(e.scroll);return 0===a?u:s instanceof i.default.Container?u+s.length():u+s.index(o,a)}),a=Math.min(Math.max.apply(Math,c(o)),this.scroll.length()-1),s=Math.min.apply(Math,[a].concat(c(o)));return new h(s,a-s)}},{key:"normalizeNative",value:function(t){if(!v(this.root,t.startContainer)||!t.collapsed&&!v(this.root,t.endContainer))return null;var e={start:{node:t.startContainer,offset:t.startOffset},end:{node:t.endContainer,offset:t.endOffset},native:t};return[e.start,e.end].forEach(function(t){for(var e=t.node,n=t.offset;!(e instanceof Text)&&e.childNodes.length>0;)if(e.childNodes.length>n)e=e.childNodes[n],n=0;else{if(e.childNodes.length!==n)break;n=(e=e.lastChild)instanceof Text?e.data.length:e.childNodes.length+1}t.node=e,t.offset=n}),e}},{key:"rangeToNative",value:function(t){var e=this,n=t.collapsed?[t.index]:[t.index,t.index+t.length],o=[],i=this.scroll.length();return n.forEach(function(t,n){t=Math.min(i-1,t);var a,s=e.scroll.leaf(t),u=r(s,2),l=u[0],c=u[1],f=l.position(c,0!==n),p=r(f,2);a=p[0],c=p[1],o.push(a,c)}),o.length<2&&(o=o.concat(o)),o}},{key:"scrollIntoView",value:function(t){var e=this.lastRange;if(null!=e){var n=this.getBounds(e.index,e.length);if(null!=n){var o=this.scroll.length()-1,i=this.scroll.line(Math.min(e.index,o)),a=r(i,1)[0],s=a;if(e.length>0){var u=this.scroll.line(Math.min(e.index+e.length,o));s=r(u,1)[0]}if(null!=a&&null!=s){var l=t.getBoundingClientRect();n.top<l.top?t.scrollTop-=l.top-n.top:n.bottom>l.bottom&&(t.scrollTop+=n.bottom-l.bottom)}}}}},{key:"setNativeRange",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:e,o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(p.info("setNativeRange",t,e,n,r),null==t||null!=this.root.parentNode&&null!=t.parentNode&&null!=n.parentNode){var i=document.getSelection();if(null!=i)if(null!=t){this.hasFocus()||this.root.focus();var a=(this.getNativeRange()||{}).native;if(null==a||o||t!==a.startContainer||e!==a.startOffset||n!==a.endContainer||r!==a.endOffset){"BR"==t.tagName&&(e=[].indexOf.call(t.parentNode.childNodes,t),t=t.parentNode),"BR"==n.tagName&&(r=[].indexOf.call(n.parentNode.childNodes,n),n=n.parentNode);var s=document.createRange();s.setStart(t,e),s.setEnd(n,r),i.removeAllRanges(),i.addRange(s)}}else i.removeAllRanges(),this.root.blur(),document.body.focus()}}},{key:"setRange",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u.default.sources.API;if("string"==typeof e&&(n=e,e=!1),p.info("setRange",t),null!=t){var r=this.rangeToNative(t);this.setNativeRange.apply(this,c(r).concat([e]))}else this.setNativeRange(null);this.update(n)}},{key:"update",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.default.sources.USER,e=this.lastRange,n=this.getRange(),o=r(n,2),i=o[0],l=o[1];if(this.lastRange=i,null!=this.lastRange&&(this.savedRange=this.lastRange),!(0,s.default)(e,this.lastRange)){var c;!this.composing&&null!=l&&l.native.collapsed&&l.start.node!==this.cursor.textNode&&this.cursor.restore();var f,p=[u.default.events.SELECTION_CHANGE,(0,a.default)(this.lastRange),(0,a.default)(e),t];if((c=this.emitter).emit.apply(c,[u.default.events.EDITOR_CHANGE].concat(p)),t!==u.default.sources.SILENT)(f=this.emitter).emit.apply(f,p)}}}]),t}();function v(t,e){try{e.parentNode}catch(t){return!1}return e instanceof Text&&(e=e.parentNode),t.contains(e)}e.Range=h,e.default=d},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(0),a=(r=i)&&r.__esModule?r:{default:r};var s=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default.Embed),o(e,[{key:"insertInto",value:function(t,n){0===t.children.length?function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertInto",this).call(this,t,n):this.remove()}},{key:"length",value:function(){return 0}},{key:"value",value:function(){return""}}],[{key:"value",value:function(){}}]),e}();s.blotName="break",s.tagName="BR",e.default=s},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(44),a=n(30),s=n(1),u=function(t){function e(e){var n=t.call(this,e)||this;return n.build(),n}return o(e,t),e.prototype.appendChild=function(t){this.insertBefore(t)},e.prototype.attach=function(){t.prototype.attach.call(this),this.children.forEach(function(t){t.attach()})},e.prototype.build=function(){var t=this;this.children=new i.default,[].slice.call(this.domNode.childNodes).reverse().forEach(function(e){try{var n=l(e);t.insertBefore(n,t.children.head||void 0)}catch(t){if(t instanceof s.ParchmentError)return;throw t}})},e.prototype.deleteAt=function(t,e){if(0===t&&e===this.length())return this.remove();this.children.forEachAt(t,e,function(t,e,n){t.deleteAt(e,n)})},e.prototype.descendant=function(t,n){var r=this.children.find(n),o=r[0],i=r[1];return null==t.blotName&&t(o)||null!=t.blotName&&o instanceof t?[o,i]:o instanceof e?o.descendant(t,i):[null,-1]},e.prototype.descendants=function(t,n,r){void 0===n&&(n=0),void 0===r&&(r=Number.MAX_VALUE);var o=[],i=r;return this.children.forEachAt(n,r,function(n,r,a){(null==t.blotName&&t(n)||null!=t.blotName&&n instanceof t)&&o.push(n),n instanceof e&&(o=o.concat(n.descendants(t,r,i))),i-=a}),o},e.prototype.detach=function(){this.children.forEach(function(t){t.detach()}),t.prototype.detach.call(this)},e.prototype.formatAt=function(t,e,n,r){this.children.forEachAt(t,e,function(t,e,o){t.formatAt(e,o,n,r)})},e.prototype.insertAt=function(t,e,n){var r=this.children.find(t),o=r[0],i=r[1];if(o)o.insertAt(i,e,n);else{var a=null==n?s.create("text",e):s.create(e,n);this.appendChild(a)}},e.prototype.insertBefore=function(t,e){if(null!=this.statics.allowedChildren&&!this.statics.allowedChildren.some(function(e){return t instanceof e}))throw new s.ParchmentError("Cannot insert "+t.statics.blotName+" into "+this.statics.blotName);t.insertInto(this,e)},e.prototype.length=function(){return this.children.reduce(function(t,e){return t+e.length()},0)},e.prototype.moveChildren=function(t,e){this.children.forEach(function(n){t.insertBefore(n,e)})},e.prototype.optimize=function(e){if(t.prototype.optimize.call(this,e),0===this.children.length)if(null!=this.statics.defaultChild){var n=s.create(this.statics.defaultChild);this.appendChild(n),n.optimize(e)}else this.remove()},e.prototype.path=function(t,n){void 0===n&&(n=!1);var r=this.children.find(t,n),o=r[0],i=r[1],a=[[this,t]];return o instanceof e?a.concat(o.path(i,n)):(null!=o&&a.push([o,i]),a)},e.prototype.removeChild=function(t){this.children.remove(t)},e.prototype.replace=function(n){n instanceof e&&n.moveChildren(this),t.prototype.replace.call(this,n)},e.prototype.split=function(t,e){if(void 0===e&&(e=!1),!e){if(0===t)return this;if(t===this.length())return this.next}var n=this.clone();return this.parent.insertBefore(n,this.next),this.children.forEachAt(t,this.length(),function(t,r,o){t=t.split(r,e),n.appendChild(t)}),n},e.prototype.unwrap=function(){this.moveChildren(this.parent,this.next),this.remove()},e.prototype.update=function(t,e){var n=this,r=[],o=[];t.forEach(function(t){t.target===n.domNode&&"childList"===t.type&&(r.push.apply(r,t.addedNodes),o.push.apply(o,t.removedNodes))}),o.forEach(function(t){if(!(null!=t.parentNode&&"IFRAME"!==t.tagName&&document.body.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY)){var e=s.find(t);null!=e&&(null!=e.domNode.parentNode&&e.domNode.parentNode!==n.domNode||e.detach())}}),r.filter(function(t){return t.parentNode==n.domNode}).sort(function(t,e){return t===e?0:t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING?1:-1}).forEach(function(t){var e=null;null!=t.nextSibling&&(e=s.find(t.nextSibling));var r=l(t);r.next==e&&null!=r.next||(null!=r.parent&&r.parent.removeChild(n),n.insertBefore(r,e||void 0))})},e}(a.default);function l(t){var e=s.find(t);if(null==e)try{e=s.create(t)}catch(n){e=s.create(s.Scope.INLINE),[].slice.call(t.childNodes).forEach(function(t){e.domNode.appendChild(t)}),t.parentNode&&t.parentNode.replaceChild(e.domNode,t),e.attach()}return e}e.default=u},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(12),a=n(31),s=n(17),u=n(1),l=function(t){function e(e){var n=t.call(this,e)||this;return n.attributes=new a.default(n.domNode),n}return o(e,t),e.formats=function(t){return"string"==typeof this.tagName||(Array.isArray(this.tagName)?t.tagName.toLowerCase():void 0)},e.prototype.format=function(t,e){var n=u.query(t);n instanceof i.default?this.attributes.attribute(n,e):e&&(null==n||t===this.statics.blotName&&this.formats()[t]===e||this.replaceWith(t,e))},e.prototype.formats=function(){var t=this.attributes.values(),e=this.statics.formats(this.domNode);return null!=e&&(t[this.statics.blotName]=e),t},e.prototype.replaceWith=function(e,n){var r=t.prototype.replaceWith.call(this,e,n);return this.attributes.copy(r),r},e.prototype.update=function(e,n){var r=this;t.prototype.update.call(this,e,n),e.some(function(t){return t.target===r.domNode&&"attributes"===t.type})&&this.attributes.build()},e.prototype.wrap=function(n,r){var o=t.prototype.wrap.call(this,n,r);return o instanceof e&&o.statics.scope===this.statics.scope&&this.attributes.move(o),o},e}(s.default);e.default=l},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(30),a=n(1),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.value=function(t){return!0},e.prototype.index=function(t,e){return this.domNode===t||this.domNode.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY?Math.min(e,1):-1},e.prototype.position=function(t,e){var n=[].indexOf.call(this.parent.domNode.childNodes,this.domNode);return t>0&&(n+=1),[this.parent.domNode,n]},e.prototype.value=function(){return(t={})[this.statics.blotName]=this.statics.value(this.domNode)||!0,t;var t},e.scope=a.Scope.INLINE_BLOT,e}(i.default);e.default=s},function(t,e,n){var r=n(11),o=n(3),i={attributes:{compose:function(t,e,n){"object"!=typeof t&&(t={}),"object"!=typeof e&&(e={});var r=o(!0,{},e);for(var i in n||(r=Object.keys(r).reduce(function(t,e){return null!=r[e]&&(t[e]=r[e]),t},{})),t)void 0!==t[i]&&void 0===e[i]&&(r[i]=t[i]);return Object.keys(r).length>0?r:void 0},diff:function(t,e){"object"!=typeof t&&(t={}),"object"!=typeof e&&(e={});var n=Object.keys(t).concat(Object.keys(e)).reduce(function(n,o){return r(t[o],e[o])||(n[o]=void 0===e[o]?null:e[o]),n},{});return Object.keys(n).length>0?n:void 0},transform:function(t,e,n){if("object"!=typeof t)return e;if("object"==typeof e){if(!n)return e;var r=Object.keys(e).reduce(function(n,r){return void 0===t[r]&&(n[r]=e[r]),n},{});return Object.keys(r).length>0?r:void 0}}},iterator:function(t){return new a(t)},length:function(t){return"number"==typeof t.delete?t.delete:"number"==typeof t.retain?t.retain:"string"==typeof t.insert?t.insert.length:1}};function a(t){this.ops=t,this.index=0,this.offset=0}a.prototype.hasNext=function(){return this.peekLength()<1/0},a.prototype.next=function(t){t||(t=1/0);var e=this.ops[this.index];if(e){var n=this.offset,r=i.length(e);if(t>=r-n?(t=r-n,this.index+=1,this.offset=0):this.offset+=t,"number"==typeof e.delete)return{delete:t};var o={};return e.attributes&&(o.attributes=e.attributes),"number"==typeof e.retain?o.retain=t:"string"==typeof e.insert?o.insert=e.insert.substr(n,t):o.insert=e.insert,o}return{retain:1/0}},a.prototype.peek=function(){return this.ops[this.index]},a.prototype.peekLength=function(){return this.ops[this.index]?i.length(this.ops[this.index])-this.offset:1/0},a.prototype.peekType=function(){return this.ops[this.index]?"number"==typeof this.ops[this.index].delete?"delete":"number"==typeof this.ops[this.index].retain?"retain":"insert":"retain"},t.exports=i},function(t,n){var r=function(){"use strict";function t(t,e){return null!=e&&t instanceof e}var n,r,o;try{n=Map}catch(t){n=function(){}}try{r=Set}catch(t){r=function(){}}try{o=Promise}catch(t){o=function(){}}function i(a,u,l,c,f){"object"==typeof u&&(l=u.depth,c=u.prototype,f=u.includeNonEnumerable,u=u.circular);var p=[],h=[],d=void 0!==e;return void 0===u&&(u=!0),void 0===l&&(l=1/0),function a(l,v){if(null===l)return null;if(0===v)return l;var y,g;if("object"!=typeof l)return l;if(t(l,n))y=new n;else if(t(l,r))y=new r;else if(t(l,o))y=new o(function(t,e){l.then(function(e){t(a(e,v-1))},function(t){e(a(t,v-1))})});else if(i.__isArray(l))y=[];else if(i.__isRegExp(l))y=new RegExp(l.source,s(l)),l.lastIndex&&(y.lastIndex=l.lastIndex);else if(i.__isDate(l))y=new Date(l.getTime());else{if(d&&e.isBuffer(l))return y=new e(l.length),l.copy(y),y;t(l,Error)?y=Object.create(l):void 0===c?(g=Object.getPrototypeOf(l),y=Object.create(g)):(y=Object.create(c),g=c)}if(u){var m=p.indexOf(l);if(-1!=m)return h[m];p.push(l),h.push(y)}for(var b in t(l,n)&&l.forEach(function(t,e){var n=a(e,v-1),r=a(t,v-1);y.set(n,r)}),t(l,r)&&l.forEach(function(t){var e=a(t,v-1);y.add(e)}),l){var _;g&&(_=Object.getOwnPropertyDescriptor(g,b)),_&&null==_.set||(y[b]=a(l[b],v-1))}if(Object.getOwnPropertySymbols){var w=Object.getOwnPropertySymbols(l);for(b=0;b<w.length;b++){var x=w[b];(!(E=Object.getOwnPropertyDescriptor(l,x))||E.enumerable||f)&&(y[x]=a(l[x],v-1),E.enumerable||Object.defineProperty(y,x,{enumerable:!1}))}}if(f){var O=Object.getOwnPropertyNames(l);for(b=0;b<O.length;b++){var E,A=O[b];(E=Object.getOwnPropertyDescriptor(l,A))&&E.enumerable||(y[A]=a(l[A],v-1),Object.defineProperty(y,A,{enumerable:!1}))}}return y}(a,l)}function a(t){return Object.prototype.toString.call(t)}function s(t){var e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),e}return i.clonePrototype=function(t){if(null===t)return null;var e=function(){};return e.prototype=t,new e},i.__objToStr=a,i.__isDate=function(t){return"object"==typeof t&&"[object Date]"===a(t)},i.__isArray=function(t){return"object"==typeof t&&"[object Array]"===a(t)},i.__isRegExp=function(t){return"object"==typeof t&&"[object RegExp]"===a(t)},i.__getRegExpFlags=s,i}();"object"==typeof t&&t.exports&&(t.exports=r)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=h(n(0)),s=h(n(8)),u=n(4),l=h(u),c=h(n(16)),f=h(n(13)),p=h(n(25));function h(t){return t&&t.__esModule?t:{default:t}}function d(t){return t instanceof l.default||t instanceof u.BlockEmbed}var v=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return r.emitter=n.emitter,Array.isArray(n.whitelist)&&(r.whitelist=n.whitelist.reduce(function(t,e){return t[e]=!0,t},{})),r.domNode.addEventListener("DOMNodeInserted",function(){}),r.optimize(),r.enable(),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default.Scroll),o(e,[{key:"batchStart",value:function(){this.batch=!0}},{key:"batchEnd",value:function(){this.batch=!1,this.optimize()}},{key:"deleteAt",value:function(t,n){var o=this.line(t),a=r(o,2),s=a[0],l=a[1],p=this.line(t+n),h=r(p,1)[0];if(i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"deleteAt",this).call(this,t,n),null!=h&&s!==h&&l>0){if(s instanceof u.BlockEmbed||h instanceof u.BlockEmbed)return void this.optimize();if(s instanceof f.default){var d=s.newlineIndex(s.length(),!0);if(d>-1&&(s=s.split(d+1))===h)return void this.optimize()}else if(h instanceof f.default){var v=h.newlineIndex(0);v>-1&&h.split(v+1)}var y=h.children.head instanceof c.default?null:h.children.head;s.moveChildren(h,y),s.remove()}this.optimize()}},{key:"enable",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.domNode.setAttribute("contenteditable",t)}},{key:"formatAt",value:function(t,n,r,o){(null==this.whitelist||this.whitelist[r])&&(i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"formatAt",this).call(this,t,n,r,o),this.optimize())}},{key:"insertAt",value:function(t,n,r){if(null==r||null==this.whitelist||this.whitelist[n]){if(t>=this.length())if(null==r||null==a.default.query(n,a.default.Scope.BLOCK)){var o=a.default.create(this.statics.defaultChild);this.appendChild(o),null==r&&n.endsWith("\n")&&(n=n.slice(0,-1)),o.insertAt(0,n,r)}else{var s=a.default.create(n,r);this.appendChild(s)}else i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertAt",this).call(this,t,n,r);this.optimize()}}},{key:"insertBefore",value:function(t,n){if(t.statics.scope===a.default.Scope.INLINE_BLOT){var r=a.default.create(this.statics.defaultChild);r.appendChild(t),t=r}i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertBefore",this).call(this,t,n)}},{key:"leaf",value:function(t){return this.path(t).pop()||[null,-1]}},{key:"line",value:function(t){return t===this.length()?this.line(t-1):this.descendant(d,t)}},{key:"lines",value:function(){return function t(e,n,r){var o=[],i=r;return e.children.forEachAt(n,r,function(e,n,r){d(e)?o.push(e):e instanceof a.default.Container&&(o=o.concat(t(e,n,i))),i-=r}),o}(this,arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.MAX_VALUE)}},{key:"optimize",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};!0!==this.batch&&(i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t,n),t.length>0&&this.emitter.emit(s.default.events.SCROLL_OPTIMIZE,t,n))}},{key:"path",value:function(t){return i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"path",this).call(this,t).slice(1)}},{key:"update",value:function(t){if(!0!==this.batch){var n=s.default.sources.USER;"string"==typeof t&&(n=t),Array.isArray(t)||(t=this.observer.takeRecords()),t.length>0&&this.emitter.emit(s.default.events.SCROLL_BEFORE_UPDATE,n,t),i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"update",this).call(this,t.concat([])),t.length>0&&this.emitter.emit(s.default.events.SCROLL_UPDATE,n,t)}}}]),e}();v.blotName="scroll",v.className="ql-editor",v.tagName="DIV",v.defaultChild="block",v.allowedChildren=[l.default,u.BlockEmbed,p.default],e.default=v},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SHORTKEY=e.default=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=v(n(21)),s=v(n(11)),u=v(n(3)),l=v(n(2)),c=v(n(20)),f=v(n(0)),p=v(n(5)),h=v(n(10)),d=v(n(9));function v(t){return t&&t.__esModule?t:{default:t}}function y(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var g=(0,h.default)("quill:keyboard"),m=/Mac/i.test(navigator.platform)?"metaKey":"ctrlKey",b=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.bindings={},Object.keys(r.options.bindings).forEach(function(e){("list autofill"!==e||null==t.scroll.whitelist||t.scroll.whitelist.list)&&r.options.bindings[e]&&r.addBinding(r.options.bindings[e])}),r.addBinding({key:e.keys.ENTER,shiftKey:null},E),r.addBinding({key:e.keys.ENTER,metaKey:null,ctrlKey:null,altKey:null},function(){}),/Firefox/i.test(navigator.userAgent)?(r.addBinding({key:e.keys.BACKSPACE},{collapsed:!0},w),r.addBinding({key:e.keys.DELETE},{collapsed:!0},x)):(r.addBinding({key:e.keys.BACKSPACE},{collapsed:!0,prefix:/^.?$/},w),r.addBinding({key:e.keys.DELETE},{collapsed:!0,suffix:/^.?$/},x)),r.addBinding({key:e.keys.BACKSPACE},{collapsed:!1},O),r.addBinding({key:e.keys.DELETE},{collapsed:!1},O),r.addBinding({key:e.keys.BACKSPACE,altKey:null,ctrlKey:null,metaKey:null,shiftKey:null},{collapsed:!0,offset:0},w),r.listen(),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,d.default),i(e,null,[{key:"match",value:function(t,e){return e=N(e),!["altKey","ctrlKey","metaKey","shiftKey"].some(function(n){return!!e[n]!==t[n]&&null!==e[n]})&&e.key===(t.which||t.keyCode)}}]),i(e,[{key:"addBinding",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=N(t);if(null==r||null==r.key)return g.warn("Attempted to add invalid keyboard binding",r);"function"==typeof e&&(e={handler:e}),"function"==typeof n&&(n={handler:n}),r=(0,u.default)(r,e,n),this.bindings[r.key]=this.bindings[r.key]||[],this.bindings[r.key].push(r)}},{key:"listen",value:function(){var t=this;this.quill.root.addEventListener("keydown",function(n){if(!n.defaultPrevented){var i=n.which||n.keyCode,a=(t.bindings[i]||[]).filter(function(t){return e.match(n,t)});if(0!==a.length){var u=t.quill.getSelection();if(null!=u&&t.quill.hasFocus()){var l=t.quill.getLine(u.index),c=o(l,2),p=c[0],h=c[1],d=t.quill.getLeaf(u.index),v=o(d,2),y=v[0],g=v[1],m=0===u.length?[y,g]:t.quill.getLeaf(u.index+u.length),b=o(m,2),_=b[0],w=b[1],x=y instanceof f.default.Text?y.value().slice(0,g):"",O=_ instanceof f.default.Text?_.value().slice(w):"",E={collapsed:0===u.length,empty:0===u.length&&p.length()<=1,format:t.quill.getFormat(u),offset:h,prefix:x,suffix:O};a.some(function(e){if(null!=e.collapsed&&e.collapsed!==E.collapsed)return!1;if(null!=e.empty&&e.empty!==E.empty)return!1;if(null!=e.offset&&e.offset!==E.offset)return!1;if(Array.isArray(e.format)){if(e.format.every(function(t){return null==E.format[t]}))return!1}else if("object"===r(e.format)&&!Object.keys(e.format).every(function(t){return!0===e.format[t]?null!=E.format[t]:!1===e.format[t]?null==E.format[t]:(0,s.default)(e.format[t],E.format[t])}))return!1;return!(null!=e.prefix&&!e.prefix.test(E.prefix))&&(!(null!=e.suffix&&!e.suffix.test(E.suffix))&&!0!==e.handler.call(t,u,E))})&&n.preventDefault()}}}})}}]),e}();function _(t,e){var n,r=t===b.keys.LEFT?"prefix":"suffix";return y(n={key:t,shiftKey:e,altKey:null},r,/^$/),y(n,"handler",function(n){var r=n.index;t===b.keys.RIGHT&&(r+=n.length+1);var i=this.quill.getLeaf(r);return!(o(i,1)[0]instanceof f.default.Embed)||(t===b.keys.LEFT?e?this.quill.setSelection(n.index-1,n.length+1,p.default.sources.USER):this.quill.setSelection(n.index-1,p.default.sources.USER):e?this.quill.setSelection(n.index,n.length+1,p.default.sources.USER):this.quill.setSelection(n.index+n.length+1,p.default.sources.USER),!1)}),n}function w(t,e){if(!(0===t.index||this.quill.getLength()<=1)){var n=this.quill.getLine(t.index),r=o(n,1)[0],i={};if(0===e.offset){var a=this.quill.getLine(t.index-1),s=o(a,1)[0];if(null!=s&&s.length()>1){var u=r.formats(),l=this.quill.getFormat(t.index-1,1);i=c.default.attributes.diff(u,l)||{}}}var f=/[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(e.prefix)?2:1;this.quill.deleteText(t.index-f,f,p.default.sources.USER),Object.keys(i).length>0&&this.quill.formatLine(t.index-f,f,i,p.default.sources.USER),this.quill.focus()}}function x(t,e){var n=/^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(e.suffix)?2:1;if(!(t.index>=this.quill.getLength()-n)){var r={},i=0,a=this.quill.getLine(t.index),s=o(a,1)[0];if(e.offset>=s.length()-1){var u=this.quill.getLine(t.index+1),l=o(u,1)[0];if(l){var f=s.formats(),h=this.quill.getFormat(t.index,1);r=c.default.attributes.diff(f,h)||{},i=l.length()}}this.quill.deleteText(t.index,n,p.default.sources.USER),Object.keys(r).length>0&&this.quill.formatLine(t.index+i-1,n,r,p.default.sources.USER)}}function O(t){var e=this.quill.getLines(t),n={};if(e.length>1){var r=e[0].formats(),o=e[e.length-1].formats();n=c.default.attributes.diff(o,r)||{}}this.quill.deleteText(t,p.default.sources.USER),Object.keys(n).length>0&&this.quill.formatLine(t.index,1,n,p.default.sources.USER),this.quill.setSelection(t.index,p.default.sources.SILENT),this.quill.focus()}function E(t,e){var n=this;t.length>0&&this.quill.scroll.deleteAt(t.index,t.length);var r=Object.keys(e.format).reduce(function(t,n){return f.default.query(n,f.default.Scope.BLOCK)&&!Array.isArray(e.format[n])&&(t[n]=e.format[n]),t},{});this.quill.insertText(t.index,"\n",r,p.default.sources.USER),this.quill.setSelection(t.index+1,p.default.sources.SILENT),this.quill.focus(),Object.keys(e.format).forEach(function(t){null==r[t]&&(Array.isArray(e.format[t])||"link"!==t&&n.quill.format(t,e.format[t],p.default.sources.USER))})}function A(t){return{key:b.keys.TAB,shiftKey:!t,format:{"code-block":!0},handler:function(e){var n=f.default.query("code-block"),r=e.index,i=e.length,a=this.quill.scroll.descendant(n,r),s=o(a,2),u=s[0],l=s[1];if(null!=u){var c=this.quill.getIndex(u),h=u.newlineIndex(l,!0)+1,d=u.newlineIndex(c+l+i),v=u.domNode.textContent.slice(h,d).split("\n");l=0,v.forEach(function(e,o){t?(u.insertAt(h+l,n.TAB),l+=n.TAB.length,0===o?r+=n.TAB.length:i+=n.TAB.length):e.startsWith(n.TAB)&&(u.deleteAt(h+l,n.TAB.length),l-=n.TAB.length,0===o?r-=n.TAB.length:i-=n.TAB.length),l+=e.length+1}),this.quill.update(p.default.sources.USER),this.quill.setSelection(r,i,p.default.sources.SILENT)}}}}function k(t){return{key:t[0].toUpperCase(),shortKey:!0,handler:function(e,n){this.quill.format(t,!n.format[t],p.default.sources.USER)}}}function N(t){if("string"==typeof t||"number"==typeof t)return N({key:t});if("object"===(void 0===t?"undefined":r(t))&&(t=(0,a.default)(t,!1)),"string"==typeof t.key)if(null!=b.keys[t.key.toUpperCase()])t.key=b.keys[t.key.toUpperCase()];else{if(1!==t.key.length)return null;t.key=t.key.toUpperCase().charCodeAt(0)}return t.shortKey&&(t[m]=t.shortKey,delete t.shortKey),t}b.keys={BACKSPACE:8,TAB:9,ENTER:13,ESCAPE:27,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46},b.DEFAULTS={bindings:{bold:k("bold"),italic:k("italic"),underline:k("underline"),indent:{key:b.keys.TAB,format:["blockquote","indent","list"],handler:function(t,e){if(e.collapsed&&0!==e.offset)return!0;this.quill.format("indent","+1",p.default.sources.USER)}},outdent:{key:b.keys.TAB,shiftKey:!0,format:["blockquote","indent","list"],handler:function(t,e){if(e.collapsed&&0!==e.offset)return!0;this.quill.format("indent","-1",p.default.sources.USER)}},"outdent backspace":{key:b.keys.BACKSPACE,collapsed:!0,shiftKey:null,metaKey:null,ctrlKey:null,altKey:null,format:["indent","list"],offset:0,handler:function(t,e){null!=e.format.indent?this.quill.format("indent","-1",p.default.sources.USER):null!=e.format.list&&this.quill.format("list",!1,p.default.sources.USER)}},"indent code-block":A(!0),"outdent code-block":A(!1),"remove tab":{key:b.keys.TAB,shiftKey:!0,collapsed:!0,prefix:/\t$/,handler:function(t){this.quill.deleteText(t.index-1,1,p.default.sources.USER)}},tab:{key:b.keys.TAB,handler:function(t){this.quill.history.cutoff();var e=(new l.default).retain(t.index).delete(t.length).insert("\t");this.quill.updateContents(e,p.default.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(t.index+1,p.default.sources.SILENT)}},"list empty enter":{key:b.keys.ENTER,collapsed:!0,format:["list"],empty:!0,handler:function(t,e){this.quill.format("list",!1,p.default.sources.USER),e.format.indent&&this.quill.format("indent",!1,p.default.sources.USER)}},"checklist enter":{key:b.keys.ENTER,collapsed:!0,format:{list:"checked"},handler:function(t){var e=this.quill.getLine(t.index),n=o(e,2),r=n[0],i=n[1],a=(0,u.default)({},r.formats(),{list:"checked"}),s=(new l.default).retain(t.index).insert("\n",a).retain(r.length()-i-1).retain(1,{list:"unchecked"});this.quill.updateContents(s,p.default.sources.USER),this.quill.setSelection(t.index+1,p.default.sources.SILENT),this.quill.scrollIntoView()}},"header enter":{key:b.keys.ENTER,collapsed:!0,format:["header"],suffix:/^$/,handler:function(t,e){var n=this.quill.getLine(t.index),r=o(n,2),i=r[0],a=r[1],s=(new l.default).retain(t.index).insert("\n",e.format).retain(i.length()-a-1).retain(1,{header:null});this.quill.updateContents(s,p.default.sources.USER),this.quill.setSelection(t.index+1,p.default.sources.SILENT),this.quill.scrollIntoView()}},"list autofill":{key:" ",collapsed:!0,format:{list:!1},prefix:/^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,handler:function(t,e){var n=e.prefix.length,r=this.quill.getLine(t.index),i=o(r,2),a=i[0],s=i[1];if(s>n)return!0;var u=void 0;switch(e.prefix.trim()){case"[]":case"[ ]":u="unchecked";break;case"[x]":u="checked";break;case"-":case"*":u="bullet";break;default:u="ordered"}this.quill.insertText(t.index," ",p.default.sources.USER),this.quill.history.cutoff();var c=(new l.default).retain(t.index-s).delete(n+1).retain(a.length()-2-s).retain(1,{list:u});this.quill.updateContents(c,p.default.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(t.index-n,p.default.sources.SILENT)}},"code exit":{key:b.keys.ENTER,collapsed:!0,format:["code-block"],prefix:/\n\n$/,suffix:/^\s+$/,handler:function(t){var e=this.quill.getLine(t.index),n=o(e,2),r=n[0],i=n[1],a=(new l.default).retain(t.index+r.length()-i-2).retain(1,{"code-block":null}).delete(1);this.quill.updateContents(a,p.default.sources.USER)}},"embed left":_(b.keys.LEFT,!1),"embed left shift":_(b.keys.LEFT,!0),"embed right":_(b.keys.RIGHT,!1),"embed right shift":_(b.keys.RIGHT,!0)}},e.default=b,e.SHORTKEY=m},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=u(n(0)),s=u(n(7));function u(t){return t&&t.__esModule?t:{default:t}}var l=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return r.selection=n,r.textNode=document.createTextNode(e.CONTENTS),r.domNode.appendChild(r.textNode),r._length=0,r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default.Embed),i(e,null,[{key:"value",value:function(){}}]),i(e,[{key:"detach",value:function(){null!=this.parent&&this.parent.removeChild(this)}},{key:"format",value:function(t,n){if(0!==this._length)return o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n);for(var r=this,i=0;null!=r&&r.statics.scope!==a.default.Scope.BLOCK_BLOT;)i+=r.offset(r.parent),r=r.parent;null!=r&&(this._length=e.CONTENTS.length,r.optimize(),r.formatAt(i,e.CONTENTS.length,t,n),this._length=0)}},{key:"index",value:function(t,n){return t===this.textNode?0:o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"index",this).call(this,t,n)}},{key:"length",value:function(){return this._length}},{key:"position",value:function(){return[this.textNode,this.textNode.data.length]}},{key:"remove",value:function(){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"remove",this).call(this),this.parent=null}},{key:"restore",value:function(){if(!this.selection.composing&&null!=this.parent){var t=this.textNode,n=this.selection.getNativeRange(),o=void 0,i=void 0,u=void 0;if(null!=n&&n.start.node===t&&n.end.node===t){var l=[t,n.start.offset,n.end.offset];o=l[0],i=l[1],u=l[2]}for(;null!=this.domNode.lastChild&&this.domNode.lastChild!==this.textNode;)this.domNode.parentNode.insertBefore(this.domNode.lastChild,this.domNode);if(this.textNode.data!==e.CONTENTS){var c=this.textNode.data.split(e.CONTENTS).join("");this.next instanceof s.default?(o=this.next.domNode,this.next.insertAt(0,c),this.textNode.data=e.CONTENTS):(this.textNode.data=c,this.parent.insertBefore(a.default.create(this.textNode),this),this.textNode=document.createTextNode(e.CONTENTS),this.domNode.appendChild(this.textNode))}if(this.remove(),null!=i){var f=[i,u].map(function(t){return Math.max(0,Math.min(o.data.length,t-1))}),p=r(f,2);return i=p[0],u=p[1],{startNode:o,startOffset:i,endNode:o,endOffset:u}}}}},{key:"update",value:function(t,e){var n=this;if(t.some(function(t){return"characterData"===t.type&&t.target===n.textNode})){var r=this.restore();r&&(e.range=r)}}},{key:"value",value:function(){return""}}]),e}();l.blotName="cursor",l.className="ql-cursor",l.tagName="span",l.CONTENTS="\ufeff",e.default=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=a(n(0)),o=n(4),i=a(o);function a(t){return t&&t.__esModule?t:{default:t}}var s=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,r.default.Container),e}();s.allowedChildren=[i.default,o.BlockEmbed,s],e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ColorStyle=e.ColorClass=e.ColorAttributor=void 0;var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(0),a=(r=i)&&r.__esModule?r:{default:r};var s=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default.Attributor.Style),o(e,[{key:"value",value:function(t){var n=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"value",this).call(this,t);return n.startsWith("rgb(")?(n=n.replace(/^[^\d]+/,"").replace(/[^\d]+$/,""),"#"+n.split(",").map(function(t){return("00"+parseInt(t).toString(16)).slice(-2)}).join("")):n}}]),e}(),u=new a.default.Attributor.Class("color","ql-color",{scope:a.default.Scope.INLINE}),l=new s("color","color",{scope:a.default.Scope.INLINE});e.ColorAttributor=s,e.ColorClass=u,e.ColorStyle=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.sanitize=e.default=void 0;var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(6),s=(r=a)&&r.__esModule?r:{default:r};var u=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,s.default),o(e,[{key:"format",value:function(t,n){if(t!==this.statics.blotName||!n)return i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n);n=this.constructor.sanitize(n),this.domNode.setAttribute("href",n)}}],[{key:"create",value:function(t){var n=i(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t);return t=this.sanitize(t),n.setAttribute("href",t),n.setAttribute("target","_blank"),n}},{key:"formats",value:function(t){return t.getAttribute("href")}},{key:"sanitize",value:function(t){return l(t,this.PROTOCOL_WHITELIST)?t:this.SANITIZED_URL}}]),e}();function l(t,e){var n=document.createElement("a");n.href=t;var r=n.href.slice(0,n.href.indexOf(":"));return e.indexOf(r)>-1}u.blotName="link",u.tagName="A",u.SANITIZED_URL="about:blank",u.PROTOCOL_WHITELIST=["http","https","mailto","tel"],e.default=u,e.sanitize=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=s(n(23)),a=s(n(107));function s(t){return t&&t.__esModule?t:{default:t}}var u=0;function l(t,e){t.setAttribute(e,!("true"===t.getAttribute(e)))}var c=function(){function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.select=e,this.container=document.createElement("span"),this.buildPicker(),this.select.style.display="none",this.select.parentNode.insertBefore(this.container,this.select),this.label.addEventListener("mousedown",function(){n.togglePicker()}),this.label.addEventListener("keydown",function(t){switch(t.keyCode){case i.default.keys.ENTER:n.togglePicker();break;case i.default.keys.ESCAPE:n.escape(),t.preventDefault()}}),this.select.addEventListener("change",this.update.bind(this))}return o(t,[{key:"togglePicker",value:function(){this.container.classList.toggle("ql-expanded"),l(this.label,"aria-expanded"),l(this.options,"aria-hidden")}},{key:"buildItem",value:function(t){var e=this,n=document.createElement("span");return n.tabIndex="0",n.setAttribute("role","button"),n.classList.add("ql-picker-item"),t.hasAttribute("value")&&n.setAttribute("data-value",t.getAttribute("value")),t.textContent&&n.setAttribute("data-label",t.textContent),n.addEventListener("click",function(){e.selectItem(n,!0)}),n.addEventListener("keydown",function(t){switch(t.keyCode){case i.default.keys.ENTER:e.selectItem(n,!0),t.preventDefault();break;case i.default.keys.ESCAPE:e.escape(),t.preventDefault()}}),n}},{key:"buildLabel",value:function(){var t=document.createElement("span");return t.classList.add("ql-picker-label"),t.innerHTML=a.default,t.tabIndex="0",t.setAttribute("role","button"),t.setAttribute("aria-expanded","false"),this.container.appendChild(t),t}},{key:"buildOptions",value:function(){var t=this,e=document.createElement("span");e.classList.add("ql-picker-options"),e.setAttribute("aria-hidden","true"),e.tabIndex="-1",e.id="ql-picker-options-"+u,u+=1,this.label.setAttribute("aria-controls",e.id),this.options=e,[].slice.call(this.select.options).forEach(function(n){var r=t.buildItem(n);e.appendChild(r),!0===n.selected&&t.selectItem(r)}),this.container.appendChild(e)}},{key:"buildPicker",value:function(){var t=this;[].slice.call(this.select.attributes).forEach(function(e){t.container.setAttribute(e.name,e.value)}),this.container.classList.add("ql-picker"),this.label=this.buildLabel(),this.buildOptions()}},{key:"escape",value:function(){var t=this;this.close(),setTimeout(function(){return t.label.focus()},1)}},{key:"close",value:function(){this.container.classList.remove("ql-expanded"),this.label.setAttribute("aria-expanded","false"),this.options.setAttribute("aria-hidden","true")}},{key:"selectItem",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.container.querySelector(".ql-selected");if(t!==n&&(null!=n&&n.classList.remove("ql-selected"),null!=t&&(t.classList.add("ql-selected"),this.select.selectedIndex=[].indexOf.call(t.parentNode.children,t),t.hasAttribute("data-value")?this.label.setAttribute("data-value",t.getAttribute("data-value")):this.label.removeAttribute("data-value"),t.hasAttribute("data-label")?this.label.setAttribute("data-label",t.getAttribute("data-label")):this.label.removeAttribute("data-label"),e))){if("function"==typeof Event)this.select.dispatchEvent(new Event("change"));else if("object"===("undefined"==typeof Event?"undefined":r(Event))){var o=document.createEvent("Event");o.initEvent("change",!0,!0),this.select.dispatchEvent(o)}this.close()}}},{key:"update",value:function(){var t=void 0;if(this.select.selectedIndex>-1){var e=this.container.querySelector(".ql-picker-options").children[this.select.selectedIndex];t=this.select.options[this.select.selectedIndex],this.selectItem(e)}else this.selectItem(null);var n=null!=t&&t!==this.select.querySelector("option[selected]");this.label.classList.toggle("ql-active",n)}}]),t}();e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=g(n(0)),o=g(n(5)),i=n(4),a=g(i),s=g(n(16)),u=g(n(25)),l=g(n(24)),c=g(n(35)),f=g(n(6)),p=g(n(22)),h=g(n(7)),d=g(n(55)),v=g(n(42)),y=g(n(23));function g(t){return t&&t.__esModule?t:{default:t}}o.default.register({"blots/block":a.default,"blots/block/embed":i.BlockEmbed,"blots/break":s.default,"blots/container":u.default,"blots/cursor":l.default,"blots/embed":c.default,"blots/inline":f.default,"blots/scroll":p.default,"blots/text":h.default,"modules/clipboard":d.default,"modules/history":v.default,"modules/keyboard":y.default}),r.default.register(a.default,s.default,l.default,f.default,p.default,h.default),e.default=o.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),o=function(){function t(t){this.domNode=t,this.domNode[r.DATA_KEY]={blot:this}}return Object.defineProperty(t.prototype,"statics",{get:function(){return this.constructor},enumerable:!0,configurable:!0}),t.create=function(t){if(null==this.tagName)throw new r.ParchmentError("Blot definition missing tagName");var e;return Array.isArray(this.tagName)?("string"==typeof t&&(t=t.toUpperCase(),parseInt(t).toString()===t&&(t=parseInt(t))),e="number"==typeof t?document.createElement(this.tagName[t-1]):this.tagName.indexOf(t)>-1?document.createElement(t):document.createElement(this.tagName[0])):e=document.createElement(this.tagName),this.className&&e.classList.add(this.className),e},t.prototype.attach=function(){null!=this.parent&&(this.scroll=this.parent.scroll)},t.prototype.clone=function(){var t=this.domNode.cloneNode(!1);return r.create(t)},t.prototype.detach=function(){null!=this.parent&&this.parent.removeChild(this),delete this.domNode[r.DATA_KEY]},t.prototype.deleteAt=function(t,e){this.isolate(t,e).remove()},t.prototype.formatAt=function(t,e,n,o){var i=this.isolate(t,e);if(null!=r.query(n,r.Scope.BLOT)&&o)i.wrap(n,o);else if(null!=r.query(n,r.Scope.ATTRIBUTE)){var a=r.create(this.statics.scope);i.wrap(a),a.format(n,o)}},t.prototype.insertAt=function(t,e,n){var o=null==n?r.create("text",e):r.create(e,n),i=this.split(t);this.parent.insertBefore(o,i)},t.prototype.insertInto=function(t,e){void 0===e&&(e=null),null!=this.parent&&this.parent.children.remove(this);var n=null;t.children.insertBefore(this,e),null!=e&&(n=e.domNode),this.domNode.parentNode==t.domNode&&this.domNode.nextSibling==n||t.domNode.insertBefore(this.domNode,n),this.parent=t,this.attach()},t.prototype.isolate=function(t,e){var n=this.split(t);return n.split(e),n},t.prototype.length=function(){return 1},t.prototype.offset=function(t){return void 0===t&&(t=this.parent),null==this.parent||this==t?0:this.parent.children.offset(this)+this.parent.offset(t)},t.prototype.optimize=function(t){null!=this.domNode[r.DATA_KEY]&&delete this.domNode[r.DATA_KEY].mutations},t.prototype.remove=function(){null!=this.domNode.parentNode&&this.domNode.parentNode.removeChild(this.domNode),this.detach()},t.prototype.replace=function(t){null!=t.parent&&(t.parent.insertBefore(this,t.next),t.remove())},t.prototype.replaceWith=function(t,e){var n="string"==typeof t?r.create(t,e):t;return n.replace(this),n},t.prototype.split=function(t,e){return 0===t?this:this.next},t.prototype.update=function(t,e){},t.prototype.wrap=function(t,e){var n="string"==typeof t?r.create(t,e):t;return null!=this.parent&&this.parent.insertBefore(n,this.next),n.appendChild(this),n},t.blotName="abstract",t}();e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(12),o=n(32),i=n(33),a=n(1),s=function(){function t(t){this.attributes={},this.domNode=t,this.build()}return t.prototype.attribute=function(t,e){e?t.add(this.domNode,e)&&(null!=t.value(this.domNode)?this.attributes[t.attrName]=t:delete this.attributes[t.attrName]):(t.remove(this.domNode),delete this.attributes[t.attrName])},t.prototype.build=function(){var t=this;this.attributes={};var e=r.default.keys(this.domNode),n=o.default.keys(this.domNode),s=i.default.keys(this.domNode);e.concat(n).concat(s).forEach(function(e){var n=a.query(e,a.Scope.ATTRIBUTE);n instanceof r.default&&(t.attributes[n.attrName]=n)})},t.prototype.copy=function(t){var e=this;Object.keys(this.attributes).forEach(function(n){var r=e.attributes[n].value(e.domNode);t.format(n,r)})},t.prototype.move=function(t){var e=this;this.copy(t),Object.keys(this.attributes).forEach(function(t){e.attributes[t].remove(e.domNode)}),this.attributes={}},t.prototype.values=function(){var t=this;return Object.keys(this.attributes).reduce(function(e,n){return e[n]=t.attributes[n].value(t.domNode),e},{})},t}();e.default=s},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});function i(t,e){return(t.getAttribute("class")||"").split(/\s+/).filter(function(t){return 0===t.indexOf(e+"-")})}Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.keys=function(t){return(t.getAttribute("class")||"").split(/\s+/).map(function(t){return t.split("-").slice(0,-1).join("-")})},e.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(this.remove(t),t.classList.add(this.keyName+"-"+e),!0)},e.prototype.remove=function(t){i(t,this.keyName).forEach(function(e){t.classList.remove(e)}),0===t.classList.length&&t.removeAttribute("class")},e.prototype.value=function(t){var e=(i(t,this.keyName)[0]||"").slice(this.keyName.length+1);return this.canAdd(t,e)?e:""},e}(n(12).default);e.default=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});function i(t){var e=t.split("-"),n=e.slice(1).map(function(t){return t[0].toUpperCase()+t.slice(1)}).join("");return e[0]+n}Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.keys=function(t){return(t.getAttribute("style")||"").split(";").map(function(t){return t.split(":")[0].trim()})},e.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(t.style[i(this.keyName)]=e,!0)},e.prototype.remove=function(t){t.style[i(this.keyName)]="",t.getAttribute("style")||t.removeAttribute("style")},e.prototype.value=function(t){var e=t.style[i(this.keyName)];return this.canAdd(t,e)?e:""},e}(n(12).default);e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var o=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.quill=e,this.options=n,this.modules={}}return r(t,[{key:"init",value:function(){var t=this;Object.keys(this.options.modules).forEach(function(e){null==t.modules[e]&&t.addModule(e)})}},{key:"addModule",value:function(t){var e=this.quill.constructor.import("modules/"+t);return this.modules[t]=new e(this.quill,this.options.modules[t]||{}),this.modules[t]}}]),t}();o.DEFAULTS={modules:{}},o.themes={default:o},e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=a(n(0)),i=a(n(7));function a(t){return t&&t.__esModule?t:{default:t}}var s="\ufeff",u=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.contentNode=document.createElement("span"),n.contentNode.setAttribute("contenteditable",!1),[].slice.call(n.domNode.childNodes).forEach(function(t){n.contentNode.appendChild(t)}),n.leftGuard=document.createTextNode(s),n.rightGuard=document.createTextNode(s),n.domNode.appendChild(n.leftGuard),n.domNode.appendChild(n.contentNode),n.domNode.appendChild(n.rightGuard),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,o.default.Embed),r(e,[{key:"index",value:function(t,n){return t===this.leftGuard?0:t===this.rightGuard?1:function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"index",this).call(this,t,n)}},{key:"restore",value:function(t){var e=void 0,n=void 0,r=t.data.split(s).join("");if(t===this.leftGuard)if(this.prev instanceof i.default){var a=this.prev.length();this.prev.insertAt(a,r),e={startNode:this.prev.domNode,startOffset:a+r.length}}else n=document.createTextNode(r),this.parent.insertBefore(o.default.create(n),this),e={startNode:n,startOffset:r.length};else t===this.rightGuard&&(this.next instanceof i.default?(this.next.insertAt(0,r),e={startNode:this.next.domNode,startOffset:r.length}):(n=document.createTextNode(r),this.parent.insertBefore(o.default.create(n),this.next),e={startNode:n,startOffset:r.length}));return t.data=s,e}},{key:"update",value:function(t,e){var n=this;t.forEach(function(t){if("characterData"===t.type&&(t.target===n.leftGuard||t.target===n.rightGuard)){var r=n.restore(t.target);r&&(e.range=r)}})}}]),e}();e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AlignStyle=e.AlignClass=e.AlignAttribute=void 0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};var a={scope:i.default.Scope.BLOCK,whitelist:["right","center","justify"]},s=new i.default.Attributor.Attribute("align","align",a),u=new i.default.Attributor.Class("align","ql-align",a),l=new i.default.Attributor.Style("align","text-align",a);e.AlignAttribute=s,e.AlignClass=u,e.AlignStyle=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BackgroundStyle=e.BackgroundClass=void 0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r},a=n(26);var s=new i.default.Attributor.Class("background","ql-bg",{scope:i.default.Scope.INLINE}),u=new a.ColorAttributor("background","background-color",{scope:i.default.Scope.INLINE});e.BackgroundClass=s,e.BackgroundStyle=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DirectionStyle=e.DirectionClass=e.DirectionAttribute=void 0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};var a={scope:i.default.Scope.BLOCK,whitelist:["rtl"]},s=new i.default.Attributor.Attribute("direction","dir",a),u=new i.default.Attributor.Class("direction","ql-direction",a),l=new i.default.Attributor.Style("direction","direction",a);e.DirectionAttribute=s,e.DirectionClass=u,e.DirectionStyle=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FontClass=e.FontStyle=void 0;var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(0),a=(r=i)&&r.__esModule?r:{default:r};var s={scope:a.default.Scope.INLINE,whitelist:["serif","monospace"]},u=new a.default.Attributor.Class("font","ql-font",s),l=new(function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default.Attributor.Style),o(e,[{key:"value",value:function(t){return function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"value",this).call(this,t).replace(/["']/g,"")}}]),e}())("font","font-family",s);e.FontStyle=l,e.FontClass=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SizeStyle=e.SizeClass=void 0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};var a=new i.default.Attributor.Class("size","ql-size",{scope:i.default.Scope.INLINE,whitelist:["small","large","huge"]}),s=new i.default.Attributor.Style("size","font-size",{scope:i.default.Scope.INLINE,whitelist:["10px","18px","32px"]});e.SizeClass=a,e.SizeStyle=s},function(t,e,n){"use strict";t.exports={align:{"":n(76),center:n(77),right:n(78),justify:n(79)},background:n(80),blockquote:n(81),bold:n(82),clean:n(83),code:n(58),"code-block":n(58),color:n(84),direction:{"":n(85),rtl:n(86)},float:{center:n(87),full:n(88),left:n(89),right:n(90)},formula:n(91),header:{1:n(92),2:n(93)},italic:n(94),image:n(95),indent:{"+1":n(96),"-1":n(97)},link:n(98),list:{ordered:n(99),bullet:n(100),check:n(101)},script:{sub:n(102),super:n(103)},strike:n(104),underline:n(105),video:n(106)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getLastChangeIndex=e.default=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=s(n(0)),i=s(n(5)),a=s(n(9));function s(t){return t&&t.__esModule?t:{default:t}}var u=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.lastRecorded=0,r.ignoreChange=!1,r.clear(),r.quill.on(i.default.events.EDITOR_CHANGE,function(t,e,n,o){t!==i.default.events.TEXT_CHANGE||r.ignoreChange||(r.options.userOnly&&o!==i.default.sources.USER?r.transform(e):r.record(e,n))}),r.quill.keyboard.addBinding({key:"Z",shortKey:!0},r.undo.bind(r)),r.quill.keyboard.addBinding({key:"Z",shortKey:!0,shiftKey:!0},r.redo.bind(r)),/Win/i.test(navigator.platform)&&r.quill.keyboard.addBinding({key:"Y",shortKey:!0},r.redo.bind(r)),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default),r(e,[{key:"change",value:function(t,e){if(0!==this.stack[t].length){var n=this.stack[t].pop();this.stack[e].push(n),this.lastRecorded=0,this.ignoreChange=!0,this.quill.updateContents(n[t],i.default.sources.USER),this.ignoreChange=!1;var r=l(n[t]);this.quill.setSelection(r)}}},{key:"clear",value:function(){this.stack={undo:[],redo:[]}}},{key:"cutoff",value:function(){this.lastRecorded=0}},{key:"record",value:function(t,e){if(0!==t.ops.length){this.stack.redo=[];var n=this.quill.getContents().diff(e),r=Date.now();if(this.lastRecorded+this.options.delay>r&&this.stack.undo.length>0){var o=this.stack.undo.pop();n=n.compose(o.undo),t=o.redo.compose(t)}else this.lastRecorded=r;this.stack.undo.push({redo:t,undo:n}),this.stack.undo.length>this.options.maxStack&&this.stack.undo.shift()}}},{key:"redo",value:function(){this.change("redo","undo")}},{key:"transform",value:function(t){this.stack.undo.forEach(function(e){e.undo=t.transform(e.undo,!0),e.redo=t.transform(e.redo,!0)}),this.stack.redo.forEach(function(e){e.undo=t.transform(e.undo,!0),e.redo=t.transform(e.redo,!0)})}},{key:"undo",value:function(){this.change("undo","redo")}}]),e}();function l(t){var e=t.reduce(function(t,e){return t+=e.delete||0},0),n=t.length()-e;return function(t){var e=t.ops[t.ops.length-1];return null!=e&&(null!=e.insert?"string"==typeof e.insert&&e.insert.endsWith("\n"):null!=e.attributes&&Object.keys(e.attributes).some(function(t){return null!=o.default.query(t,o.default.Scope.BLOCK)}))}(t)&&(n-=1),n}u.DEFAULTS={delay:1e3,maxStack:100,userOnly:!1},e.default=u,e.getLastChangeIndex=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.BaseTooltip=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=h(n(3)),i=h(n(2)),a=h(n(8)),s=h(n(23)),u=h(n(34)),l=h(n(59)),c=h(n(60)),f=h(n(28)),p=h(n(61));function h(t){return t&&t.__esModule?t:{default:t}}function d(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function v(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function y(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var g=[!1,"center","right","justify"],m=["#000000","#e60000","#ff9900","#ffff00","#008a00","#0066cc","#9933ff","#ffffff","#facccc","#ffebcc","#ffffcc","#cce8cc","#cce0f5","#ebd6ff","#bbbbbb","#f06666","#ffc266","#ffff66","#66b966","#66a3e0","#c285ff","#888888","#a10000","#b26b00","#b2b200","#006100","#0047b2","#6b24b2","#444444","#5c0000","#663d00","#666600","#003700","#002966","#3d1466"],b=[!1,"serif","monospace"],_=["1","2","3",!1],w=["small",!1,"large","huge"],x=function(t){function e(t,n){d(this,e);var r=v(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return t.emitter.listenDOM("click",document.body,function e(n){if(!document.body.contains(t.root))return document.body.removeEventListener("click",e);null==r.tooltip||r.tooltip.root.contains(n.target)||document.activeElement===r.tooltip.textbox||r.quill.hasFocus()||r.tooltip.hide(),null!=r.pickers&&r.pickers.forEach(function(t){t.container.contains(n.target)||t.close()})}),r}return y(e,u.default),r(e,[{key:"addModule",value:function(t){var n=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"addModule",this).call(this,t);return"toolbar"===t&&this.extendToolbar(n),n}},{key:"buildButtons",value:function(t,e){t.forEach(function(t){(t.getAttribute("class")||"").split(/\s+/).forEach(function(n){if(n.startsWith("ql-")&&(n=n.slice("ql-".length),null!=e[n]))if("direction"===n)t.innerHTML=e[n][""]+e[n].rtl;else if("string"==typeof e[n])t.innerHTML=e[n];else{var r=t.value||"";null!=r&&e[n][r]&&(t.innerHTML=e[n][r])}})})}},{key:"buildPickers",value:function(t,e){var n=this;this.pickers=t.map(function(t){if(t.classList.contains("ql-align"))return null==t.querySelector("option")&&E(t,g),new c.default(t,e.align);if(t.classList.contains("ql-background")||t.classList.contains("ql-color")){var n=t.classList.contains("ql-background")?"background":"color";return null==t.querySelector("option")&&E(t,m,"background"===n?"#ffffff":"#000000"),new l.default(t,e[n])}return null==t.querySelector("option")&&(t.classList.contains("ql-font")?E(t,b):t.classList.contains("ql-header")?E(t,_):t.classList.contains("ql-size")&&E(t,w)),new f.default(t)});this.quill.on(a.default.events.EDITOR_CHANGE,function(){n.pickers.forEach(function(t){t.update()})})}}]),e}();x.DEFAULTS=(0,o.default)(!0,{},u.default.DEFAULTS,{modules:{toolbar:{handlers:{formula:function(){this.quill.theme.tooltip.edit("formula")},image:function(){var t=this,e=this.container.querySelector("input.ql-image[type=file]");null==e&&((e=document.createElement("input")).setAttribute("type","file"),e.setAttribute("accept","image/png, image/gif, image/jpeg, image/bmp, image/x-icon"),e.classList.add("ql-image"),e.addEventListener("change",function(){if(null!=e.files&&null!=e.files[0]){var n=new FileReader;n.onload=function(n){var r=t.quill.getSelection(!0);t.quill.updateContents((new i.default).retain(r.index).delete(r.length).insert({image:n.target.result}),a.default.sources.USER),t.quill.setSelection(r.index+1,a.default.sources.SILENT),e.value=""},n.readAsDataURL(e.files[0])}}),this.container.appendChild(e)),e.click()},video:function(){this.quill.theme.tooltip.edit("video")}}}}});var O=function(t){function e(t,n){d(this,e);var r=v(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.textbox=r.root.querySelector('input[type="text"]'),r.listen(),r}return y(e,p.default),r(e,[{key:"listen",value:function(){var t=this;this.textbox.addEventListener("keydown",function(e){s.default.match(e,"enter")?(t.save(),e.preventDefault()):s.default.match(e,"escape")&&(t.cancel(),e.preventDefault())})}},{key:"cancel",value:function(){this.hide()}},{key:"edit",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"link",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.root.classList.remove("ql-hidden"),this.root.classList.add("ql-editing"),null!=e?this.textbox.value=e:t!==this.root.getAttribute("data-mode")&&(this.textbox.value=""),this.position(this.quill.getBounds(this.quill.selection.savedRange)),this.textbox.select(),this.textbox.setAttribute("placeholder",this.textbox.getAttribute("data-"+t)||""),this.root.setAttribute("data-mode",t)}},{key:"restoreFocus",value:function(){var t=this.quill.scrollingContainer.scrollTop;this.quill.focus(),this.quill.scrollingContainer.scrollTop=t}},{key:"save",value:function(){var t=this.textbox.value;switch(this.root.getAttribute("data-mode")){case"link":var e=this.quill.root.scrollTop;this.linkRange?(this.quill.formatText(this.linkRange,"link",t,a.default.sources.USER),delete this.linkRange):(this.restoreFocus(),this.quill.format("link",t,a.default.sources.USER)),this.quill.root.scrollTop=e;break;case"video":t=function(t){var e=t.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/)||t.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);if(e)return(e[1]||"https")+"://www.youtube.com/embed/"+e[2]+"?showinfo=0";if(e=t.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/))return(e[1]||"https")+"://player.vimeo.com/video/"+e[2]+"/";return t}(t);case"formula":if(!t)break;var n=this.quill.getSelection(!0);if(null!=n){var r=n.index+n.length;this.quill.insertEmbed(r,this.root.getAttribute("data-mode"),t,a.default.sources.USER),"formula"===this.root.getAttribute("data-mode")&&this.quill.insertText(r+1," ",a.default.sources.USER),this.quill.setSelection(r+2,a.default.sources.USER)}}this.textbox.value="",this.hide()}}]),e}();function E(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];e.forEach(function(e){var r=document.createElement("option");e===n?r.setAttribute("selected","selected"):r.setAttribute("value",e),t.appendChild(r)})}e.BaseTooltip=O,e.default=x},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){this.head=this.tail=null,this.length=0}return t.prototype.append=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.insertBefore(t[0],null),t.length>1&&this.append.apply(this,t.slice(1))},t.prototype.contains=function(t){for(var e,n=this.iterator();e=n();)if(e===t)return!0;return!1},t.prototype.insertBefore=function(t,e){t&&(t.next=e,null!=e?(t.prev=e.prev,null!=e.prev&&(e.prev.next=t),e.prev=t,e===this.head&&(this.head=t)):null!=this.tail?(this.tail.next=t,t.prev=this.tail,this.tail=t):(t.prev=null,this.head=this.tail=t),this.length+=1)},t.prototype.offset=function(t){for(var e=0,n=this.head;null!=n;){if(n===t)return e;e+=n.length(),n=n.next}return-1},t.prototype.remove=function(t){this.contains(t)&&(null!=t.prev&&(t.prev.next=t.next),null!=t.next&&(t.next.prev=t.prev),t===this.head&&(this.head=t.next),t===this.tail&&(this.tail=t.prev),this.length-=1)},t.prototype.iterator=function(t){return void 0===t&&(t=this.head),function(){var e=t;return null!=t&&(t=t.next),e}},t.prototype.find=function(t,e){void 0===e&&(e=!1);for(var n,r=this.iterator();n=r();){var o=n.length();if(t<o||e&&t===o&&(null==n.next||0!==n.next.length()))return[n,t];t-=o}return[null,0]},t.prototype.forEach=function(t){for(var e,n=this.iterator();e=n();)t(e)},t.prototype.forEachAt=function(t,e,n){if(!(e<=0))for(var r,o=this.find(t),i=o[0],a=t-o[1],s=this.iterator(i);(r=s())&&a<t+e;){var u=r.length();t>a?n(r,t-a,Math.min(e,a+u-t)):n(r,0,Math.min(u,t+e-a)),a+=u}},t.prototype.map=function(t){return this.reduce(function(e,n){return e.push(t(n)),e},[])},t.prototype.reduce=function(t,e){for(var n,r=this.iterator();n=r();)e=t(e,n);return e},t}();e.default=r},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(17),a=n(1),s={attributes:!0,characterData:!0,characterDataOldValue:!0,childList:!0,subtree:!0},u=function(t){function e(e){var n=t.call(this,e)||this;return n.scroll=n,n.observer=new MutationObserver(function(t){n.update(t)}),n.observer.observe(n.domNode,s),n.attach(),n}return o(e,t),e.prototype.detach=function(){t.prototype.detach.call(this),this.observer.disconnect()},e.prototype.deleteAt=function(e,n){this.update(),0===e&&n===this.length()?this.children.forEach(function(t){t.remove()}):t.prototype.deleteAt.call(this,e,n)},e.prototype.formatAt=function(e,n,r,o){this.update(),t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.insertAt=function(e,n,r){this.update(),t.prototype.insertAt.call(this,e,n,r)},e.prototype.optimize=function(e,n){var r=this;void 0===e&&(e=[]),void 0===n&&(n={}),t.prototype.optimize.call(this,n);for(var o=[].slice.call(this.observer.takeRecords());o.length>0;)e.push(o.pop());for(var s=function(t,e){void 0===e&&(e=!0),null!=t&&t!==r&&null!=t.domNode.parentNode&&(null==t.domNode[a.DATA_KEY].mutations&&(t.domNode[a.DATA_KEY].mutations=[]),e&&s(t.parent))},u=function(t){null!=t.domNode[a.DATA_KEY]&&null!=t.domNode[a.DATA_KEY].mutations&&(t instanceof i.default&&t.children.forEach(u),t.optimize(n))},l=e,c=0;l.length>0;c+=1){if(c>=100)throw new Error("[Parchment] Maximum optimize iterations reached");for(l.forEach(function(t){var e=a.find(t.target,!0);null!=e&&(e.domNode===t.target&&("childList"===t.type?(s(a.find(t.previousSibling,!1)),[].forEach.call(t.addedNodes,function(t){var e=a.find(t,!1);s(e,!1),e instanceof i.default&&e.children.forEach(function(t){s(t,!1)})})):"attributes"===t.type&&s(e.prev)),s(e))}),this.children.forEach(u),o=(l=[].slice.call(this.observer.takeRecords())).slice();o.length>0;)e.push(o.pop())}},e.prototype.update=function(e,n){var r=this;void 0===n&&(n={}),(e=e||this.observer.takeRecords()).map(function(t){var e=a.find(t.target,!0);return null==e?null:null==e.domNode[a.DATA_KEY].mutations?(e.domNode[a.DATA_KEY].mutations=[t],e):(e.domNode[a.DATA_KEY].mutations.push(t),null)}).forEach(function(t){null!=t&&t!==r&&null!=t.domNode[a.DATA_KEY]&&t.update(t.domNode[a.DATA_KEY].mutations||[],n)}),null!=this.domNode[a.DATA_KEY].mutations&&t.prototype.update.call(this,this.domNode[a.DATA_KEY].mutations,n),this.optimize(e,n)},e.blotName="scroll",e.defaultChild="block",e.scope=a.Scope.BLOCK_BLOT,e.tagName="DIV",e}(i.default);e.default=u},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(18),a=n(1);var s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.formats=function(n){if(n.tagName!==e.tagName)return t.formats.call(this,n)},e.prototype.format=function(n,r){var o=this;n!==this.statics.blotName||r?t.prototype.format.call(this,n,r):(this.children.forEach(function(t){t instanceof i.default||(t=t.wrap(e.blotName,!0)),o.attributes.copy(t)}),this.unwrap())},e.prototype.formatAt=function(e,n,r,o){null!=this.formats()[r]||a.query(r,a.Scope.ATTRIBUTE)?this.isolate(e,n).format(r,o):t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.optimize=function(n){t.prototype.optimize.call(this,n);var r=this.formats();if(0===Object.keys(r).length)return this.unwrap();var o=this.next;o instanceof e&&o.prev===this&&function(t,e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(var n in t)if(t[n]!==e[n])return!1;return!0}(r,o.formats())&&(o.moveChildren(this),o.remove())},e.blotName="inline",e.scope=a.Scope.INLINE_BLOT,e.tagName="SPAN",e}(i.default);e.default=s},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(18),a=n(1),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.formats=function(n){var r=a.query(e.blotName).tagName;if(n.tagName!==r)return t.formats.call(this,n)},e.prototype.format=function(n,r){null!=a.query(n,a.Scope.BLOCK)&&(n!==this.statics.blotName||r?t.prototype.format.call(this,n,r):this.replaceWith(e.blotName))},e.prototype.formatAt=function(e,n,r,o){null!=a.query(r,a.Scope.BLOCK)?this.format(r,o):t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.insertAt=function(e,n,r){if(null==r||null!=a.query(n,a.Scope.INLINE))t.prototype.insertAt.call(this,e,n,r);else{var o=this.split(e),i=a.create(n,r);o.parent.insertBefore(i,o)}},e.prototype.update=function(e,n){navigator.userAgent.match(/Trident/)?this.build():t.prototype.update.call(this,e,n)},e.blotName="block",e.scope=a.Scope.BLOCK_BLOT,e.tagName="P",e}(i.default);e.default=s},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.formats=function(t){},e.prototype.format=function(e,n){t.prototype.formatAt.call(this,0,this.length(),e,n)},e.prototype.formatAt=function(e,n,r,o){0===e&&n===this.length()?this.format(r,o):t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.formats=function(){return this.statics.formats(this.domNode)},e}(n(19).default);e.default=i},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(19),a=n(1),s=function(t){function e(e){var n=t.call(this,e)||this;return n.text=n.statics.value(n.domNode),n}return o(e,t),e.create=function(t){return document.createTextNode(t)},e.value=function(t){var e=t.data;return e.normalize&&(e=e.normalize()),e},e.prototype.deleteAt=function(t,e){this.domNode.data=this.text=this.text.slice(0,t)+this.text.slice(t+e)},e.prototype.index=function(t,e){return this.domNode===t?e:-1},e.prototype.insertAt=function(e,n,r){null==r?(this.text=this.text.slice(0,e)+n+this.text.slice(e),this.domNode.data=this.text):t.prototype.insertAt.call(this,e,n,r)},e.prototype.length=function(){return this.text.length},e.prototype.optimize=function(n){t.prototype.optimize.call(this,n),this.text=this.statics.value(this.domNode),0===this.text.length?this.remove():this.next instanceof e&&this.next.prev===this&&(this.insertAt(this.length(),this.next.value()),this.next.remove())},e.prototype.position=function(t,e){return void 0===e&&(e=!1),[this.domNode,t]},e.prototype.split=function(t,e){if(void 0===e&&(e=!1),!e){if(0===t)return this;if(t===this.length())return this.next}var n=a.create(this.domNode.splitText(t));return this.parent.insertBefore(n,this.next),this.text=this.statics.value(this.domNode),n},e.prototype.update=function(t,e){var n=this;t.some(function(t){return"characterData"===t.type&&t.target===n.domNode})&&(this.text=this.statics.value(this.domNode))},e.prototype.value=function(){return this.text},e.blotName="text",e.scope=a.Scope.INLINE_BLOT,e}(i.default);e.default=s},function(t,e,n){"use strict";var r=document.createElement("div");if(r.classList.toggle("test-class",!1),r.classList.contains("test-class")){var o=DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle=function(t,e){return arguments.length>1&&!this.contains(t)==!e?e:o.call(this,t)}}String.prototype.startsWith||(String.prototype.startsWith=function(t,e){return e=e||0,this.substr(e,t.length)===t}),String.prototype.endsWith||(String.prototype.endsWith=function(t,e){var n=this.toString();("number"!=typeof e||!isFinite(e)||Math.floor(e)!==e||e>n.length)&&(e=n.length),e-=t.length;var r=n.indexOf(t,e);return-1!==r&&r===e}),Array.prototype.find||Object.defineProperty(Array.prototype,"find",{value:function(t){if(null===this)throw new TypeError("Array.prototype.find called on null or undefined");if("function"!=typeof t)throw new TypeError("predicate must be a function");for(var e,n=Object(this),r=n.length>>>0,o=arguments[1],i=0;i<r;i++)if(e=n[i],t.call(o,e,i,n))return e}}),document.addEventListener("DOMContentLoaded",function(){document.execCommand("enableObjectResizing",!1,!1),document.execCommand("autoUrlDetect",!1,!1)})},function(t,e){var n=-1,r=1,o=0;function i(t,e,l){if(t==e)return t?[[o,t]]:[];(l<0||t.length<l)&&(l=null);var f=s(t,e),p=t.substring(0,f);f=u(t=t.substring(f),e=e.substring(f));var h=t.substring(t.length-f),d=function(t,e){var l;if(!t)return[[r,e]];if(!e)return[[n,t]];var c=t.length>e.length?t:e,f=t.length>e.length?e:t,p=c.indexOf(f);if(-1!=p)return l=[[r,c.substring(0,p)],[o,f],[r,c.substring(p+f.length)]],t.length>e.length&&(l[0][0]=l[2][0]=n),l;if(1==f.length)return[[n,t],[r,e]];var h=function(t,e){var n=t.length>e.length?t:e,r=t.length>e.length?e:t;if(n.length<4||2*r.length<n.length)return null;function o(t,e,n){for(var r,o,i,a,l=t.substring(n,n+Math.floor(t.length/4)),c=-1,f="";-1!=(c=e.indexOf(l,c+1));){var p=s(t.substring(n),e.substring(c)),h=u(t.substring(0,n),e.substring(0,c));f.length<h+p&&(f=e.substring(c-h,c)+e.substring(c,c+p),r=t.substring(0,n-h),o=t.substring(n+p),i=e.substring(0,c-h),a=e.substring(c+p))}return 2*f.length>=t.length?[r,o,i,a,f]:null}var i,a,l,c,f,p=o(n,r,Math.ceil(n.length/4)),h=o(n,r,Math.ceil(n.length/2));if(!p&&!h)return null;i=h?p&&p[4].length>h[4].length?p:h:p;t.length>e.length?(a=i[0],l=i[1],c=i[2],f=i[3]):(c=i[0],f=i[1],a=i[2],l=i[3]);var d=i[4];return[a,l,c,f,d]}(t,e);if(h){var d=h[0],v=h[1],y=h[2],g=h[3],m=h[4],b=i(d,y),_=i(v,g);return b.concat([[o,m]],_)}return function(t,e){for(var o=t.length,i=e.length,s=Math.ceil((o+i)/2),u=s,l=2*s,c=new Array(l),f=new Array(l),p=0;p<l;p++)c[p]=-1,f[p]=-1;c[u+1]=0,f[u+1]=0;for(var h=o-i,d=h%2!=0,v=0,y=0,g=0,m=0,b=0;b<s;b++){for(var _=-b+v;_<=b-y;_+=2){for(var w=u+_,x=(N=_==-b||_!=b&&c[w-1]<c[w+1]?c[w+1]:c[w-1]+1)-_;N<o&&x<i&&t.charAt(N)==e.charAt(x);)N++,x++;if(c[w]=N,N>o)y+=2;else if(x>i)v+=2;else if(d){var O=u+h-_;if(O>=0&&O<l&&-1!=f[O]){var E=o-f[O];if(N>=E)return a(t,e,N,x)}}}for(var A=-b+g;A<=b-m;A+=2){for(var O=u+A,k=(E=A==-b||A!=b&&f[O-1]<f[O+1]?f[O+1]:f[O-1]+1)-A;E<o&&k<i&&t.charAt(o-E-1)==e.charAt(i-k-1);)E++,k++;if(f[O]=E,E>o)m+=2;else if(k>i)g+=2;else if(!d){var w=u+h-A;if(w>=0&&w<l&&-1!=c[w]){var N=c[w],x=u+N-w;if(N>=(E=o-E))return a(t,e,N,x)}}}}return[[n,t],[r,e]]}(t,e)}(t=t.substring(0,t.length-f),e=e.substring(0,e.length-f));return p&&d.unshift([o,p]),h&&d.push([o,h]),function t(e){e.push([o,""]);var i=0;var a=0;var l=0;var c="";var f="";var p;for(;i<e.length;)switch(e[i][0]){case r:l++,f+=e[i][1],i++;break;case n:a++,c+=e[i][1],i++;break;case o:a+l>1?(0!==a&&0!==l&&(0!==(p=s(f,c))&&(i-a-l>0&&e[i-a-l-1][0]==o?e[i-a-l-1][1]+=f.substring(0,p):(e.splice(0,0,[o,f.substring(0,p)]),i++),f=f.substring(p),c=c.substring(p)),0!==(p=u(f,c))&&(e[i][1]=f.substring(f.length-p)+e[i][1],f=f.substring(0,f.length-p),c=c.substring(0,c.length-p))),0===a?e.splice(i-l,a+l,[r,f]):0===l?e.splice(i-a,a+l,[n,c]):e.splice(i-a-l,a+l,[n,c],[r,f]),i=i-a-l+(a?1:0)+(l?1:0)+1):0!==i&&e[i-1][0]==o?(e[i-1][1]+=e[i][1],e.splice(i,1)):i++,l=0,a=0,c="",f=""}""===e[e.length-1][1]&&e.pop();var h=!1;i=1;for(;i<e.length-1;)e[i-1][0]==o&&e[i+1][0]==o&&(e[i][1].substring(e[i][1].length-e[i-1][1].length)==e[i-1][1]?(e[i][1]=e[i-1][1]+e[i][1].substring(0,e[i][1].length-e[i-1][1].length),e[i+1][1]=e[i-1][1]+e[i+1][1],e.splice(i-1,1),h=!0):e[i][1].substring(0,e[i+1][1].length)==e[i+1][1]&&(e[i-1][1]+=e[i+1][1],e[i][1]=e[i][1].substring(e[i+1][1].length)+e[i+1][1],e.splice(i+1,1),h=!0)),i++;h&&t(e)}(d),null!=l&&(d=function(t,e){var r=function(t,e){if(0===e)return[o,t];for(var r=0,i=0;i<t.length;i++){var a=t[i];if(a[0]===n||a[0]===o){var s=r+a[1].length;if(e===s)return[i+1,t];if(e<s){t=t.slice();var u=e-r,l=[a[0],a[1].slice(0,u)],c=[a[0],a[1].slice(u)];return t.splice(i,1,l,c),[i+1,t]}r=s}}throw new Error("cursor_pos is out of bounds!")}(t,e),i=r[1],a=r[0],s=i[a],u=i[a+1];if(null==s)return t;if(s[0]!==o)return t;if(null!=u&&s[1]+u[1]===u[1]+s[1])return i.splice(a,2,u,s),c(i,a,2);if(null!=u&&0===u[1].indexOf(s[1])){i.splice(a,2,[u[0],s[1]],[0,s[1]]);var l=u[1].slice(s[1].length);return l.length>0&&i.splice(a+2,0,[u[0],l]),c(i,a,3)}return t}(d,l)),d=function(t){for(var e=!1,i=function(t){return t.charCodeAt(0)>=56320&&t.charCodeAt(0)<=57343},a=2;a<t.length;a+=1)t[a-2][0]===o&&((s=t[a-2][1]).charCodeAt(s.length-1)>=55296&&s.charCodeAt(s.length-1)<=56319)&&t[a-1][0]===n&&i(t[a-1][1])&&t[a][0]===r&&i(t[a][1])&&(e=!0,t[a-1][1]=t[a-2][1].slice(-1)+t[a-1][1],t[a][1]=t[a-2][1].slice(-1)+t[a][1],t[a-2][1]=t[a-2][1].slice(0,-1));var s;if(!e)return t;for(var u=[],a=0;a<t.length;a+=1)t[a][1].length>0&&u.push(t[a]);return u}(d)}function a(t,e,n,r){var o=t.substring(0,n),a=e.substring(0,r),s=t.substring(n),u=e.substring(r),l=i(o,a),c=i(s,u);return l.concat(c)}function s(t,e){if(!t||!e||t.charAt(0)!=e.charAt(0))return 0;for(var n=0,r=Math.min(t.length,e.length),o=r,i=0;n<o;)t.substring(i,o)==e.substring(i,o)?i=n=o:r=o,o=Math.floor((r-n)/2+n);return o}function u(t,e){if(!t||!e||t.charAt(t.length-1)!=e.charAt(e.length-1))return 0;for(var n=0,r=Math.min(t.length,e.length),o=r,i=0;n<o;)t.substring(t.length-o,t.length-i)==e.substring(e.length-o,e.length-i)?i=n=o:r=o,o=Math.floor((r-n)/2+n);return o}var l=i;function c(t,e,n){for(var r=e+n-1;r>=0&&r>=e-1;r--)if(r+1<t.length){var o=t[r],i=t[r+1];o[0]===i[1]&&t.splice(r,2,[o[0],o[1]+i[1]])}return t}l.INSERT=r,l.DELETE=n,l.EQUAL=o,t.exports=l},function(t,e){function n(t){var e=[];for(var n in t)e.push(n);return e}(t.exports="function"==typeof Object.keys?Object.keys:n).shim=n},function(t,e){var n="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();function r(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function o(t){return t&&"object"==typeof t&&"number"==typeof t.length&&Object.prototype.hasOwnProperty.call(t,"callee")&&!Object.prototype.propertyIsEnumerable.call(t,"callee")||!1}(e=t.exports=n?r:o).supported=r,e.unsupported=o},function(t,e){"use strict";var n=Object.prototype.hasOwnProperty,r="~";function o(){}function i(t,e,n){this.fn=t,this.context=e,this.once=n||!1}function a(){this._events=new o,this._eventsCount=0}Object.create&&(o.prototype=Object.create(null),(new o).__proto__||(r=!1)),a.prototype.eventNames=function(){var t,e,o=[];if(0===this._eventsCount)return o;for(e in t=this._events)n.call(t,e)&&o.push(r?e.slice(1):e);return Object.getOwnPropertySymbols?o.concat(Object.getOwnPropertySymbols(t)):o},a.prototype.listeners=function(t,e){var n=r?r+t:t,o=this._events[n];if(e)return!!o;if(!o)return[];if(o.fn)return[o.fn];for(var i=0,a=o.length,s=new Array(a);i<a;i++)s[i]=o[i].fn;return s},a.prototype.emit=function(t,e,n,o,i,a){var s=r?r+t:t;if(!this._events[s])return!1;var u,l,c=this._events[s],f=arguments.length;if(c.fn){switch(c.once&&this.removeListener(t,c.fn,void 0,!0),f){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,e),!0;case 3:return c.fn.call(c.context,e,n),!0;case 4:return c.fn.call(c.context,e,n,o),!0;case 5:return c.fn.call(c.context,e,n,o,i),!0;case 6:return c.fn.call(c.context,e,n,o,i,a),!0}for(l=1,u=new Array(f-1);l<f;l++)u[l-1]=arguments[l];c.fn.apply(c.context,u)}else{var p,h=c.length;for(l=0;l<h;l++)switch(c[l].once&&this.removeListener(t,c[l].fn,void 0,!0),f){case 1:c[l].fn.call(c[l].context);break;case 2:c[l].fn.call(c[l].context,e);break;case 3:c[l].fn.call(c[l].context,e,n);break;case 4:c[l].fn.call(c[l].context,e,n,o);break;default:if(!u)for(p=1,u=new Array(f-1);p<f;p++)u[p-1]=arguments[p];c[l].fn.apply(c[l].context,u)}}return!0},a.prototype.on=function(t,e,n){var o=new i(e,n||this),a=r?r+t:t;return this._events[a]?this._events[a].fn?this._events[a]=[this._events[a],o]:this._events[a].push(o):(this._events[a]=o,this._eventsCount++),this},a.prototype.once=function(t,e,n){var o=new i(e,n||this,!0),a=r?r+t:t;return this._events[a]?this._events[a].fn?this._events[a]=[this._events[a],o]:this._events[a].push(o):(this._events[a]=o,this._eventsCount++),this},a.prototype.removeListener=function(t,e,n,i){var a=r?r+t:t;if(!this._events[a])return this;if(!e)return 0==--this._eventsCount?this._events=new o:delete this._events[a],this;var s=this._events[a];if(s.fn)s.fn!==e||i&&!s.once||n&&s.context!==n||(0==--this._eventsCount?this._events=new o:delete this._events[a]);else{for(var u=0,l=[],c=s.length;u<c;u++)(s[u].fn!==e||i&&!s[u].once||n&&s[u].context!==n)&&l.push(s[u]);l.length?this._events[a]=1===l.length?l[0]:l:0==--this._eventsCount?this._events=new o:delete this._events[a]}return this},a.prototype.removeAllListeners=function(t){var e;return t?(e=r?r+t:t,this._events[e]&&(0==--this._eventsCount?this._events=new o:delete this._events[e])):(this._events=new o,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prototype.setMaxListeners=function(){return this},a.prefixed=r,a.EventEmitter=a,void 0!==t&&(t.exports=a)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.matchText=e.matchSpacing=e.matchNewline=e.matchBlot=e.matchAttributor=e.default=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=b(n(3)),s=b(n(2)),u=b(n(0)),l=b(n(5)),c=b(n(10)),f=b(n(9)),p=n(36),h=n(37),d=b(n(13)),v=n(26),y=n(38),g=n(39),m=n(40);function b(t){return t&&t.__esModule?t:{default:t}}function _(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var w=(0,c.default)("quill:clipboard"),x="__ql-matcher",O=[[Node.TEXT_NODE,I],[Node.TEXT_NODE,q],["br",function(t,e){j(e,"\n")||e.insert("\n");return e}],[Node.ELEMENT_NODE,q],[Node.ELEMENT_NODE,L],[Node.ELEMENT_NODE,M],[Node.ELEMENT_NODE,C],[Node.ELEMENT_NODE,function(t,e){var n={},r=t.style||{};r.fontStyle&&"italic"===S(t).fontStyle&&(n.italic=!0);r.fontWeight&&(S(t).fontWeight.startsWith("bold")||parseInt(S(t).fontWeight)>=700)&&(n.bold=!0);Object.keys(n).length>0&&(e=N(e,n));parseFloat(r.textIndent||0)>0&&(e=(new s.default).insert("\t").concat(e));return e}],["li",function(t,e){var n=u.default.query(t);if(null==n||"list-item"!==n.blotName||!j(e,"\n"))return e;var r=-1,o=t.parentNode;for(;!o.classList.contains("ql-clipboard");)"list"===(u.default.query(o)||{}).blotName&&(r+=1),o=o.parentNode;return r<=0?e:e.compose((new s.default).retain(e.length()-1).retain(1,{indent:r}))}],["b",P.bind(P,"bold")],["i",P.bind(P,"italic")],["style",function(){return new s.default}]],E=[p.AlignAttribute,y.DirectionAttribute].reduce(function(t,e){return t[e.keyName]=e,t},{}),A=[p.AlignStyle,h.BackgroundStyle,v.ColorStyle,y.DirectionStyle,g.FontStyle,m.SizeStyle].reduce(function(t,e){return t[e.keyName]=e,t},{}),k=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.quill.root.addEventListener("paste",r.onPaste.bind(r)),r.container=r.quill.addContainer("ql-clipboard"),r.container.setAttribute("contenteditable",!0),r.container.setAttribute("tabindex",-1),r.matchers=[],O.concat(r.options.matchers).forEach(function(t){var e=o(t,2),i=e[0],a=e[1];(n.matchVisual||a!==M)&&r.addMatcher(i,a)}),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,f.default),i(e,[{key:"addMatcher",value:function(t,e){this.matchers.push([t,e])}},{key:"convert",value:function(t){if("string"==typeof t)return this.container.innerHTML=t.replace(/\>\r?\n +\</g,"><"),this.convert();var e=this.quill.getFormat(this.quill.selection.savedRange.index);if(e[d.default.blotName]){var n=this.container.innerText;return this.container.innerHTML="",(new s.default).insert(n,_({},d.default.blotName,e[d.default.blotName]))}var r=this.prepareMatching(),i=o(r,2),a=i[0],u=i[1],l=function t(e,n,r){return e.nodeType===e.TEXT_NODE?r.reduce(function(t,n){return n(e,t)},new s.default):e.nodeType===e.ELEMENT_NODE?[].reduce.call(e.childNodes||[],function(o,i){var a=t(i,n,r);return i.nodeType===e.ELEMENT_NODE&&(a=n.reduce(function(t,e){return e(i,t)},a),a=(i[x]||[]).reduce(function(t,e){return e(i,t)},a)),o.concat(a)},new s.default):new s.default}(this.container,a,u);return j(l,"\n")&&null==l.ops[l.ops.length-1].attributes&&(l=l.compose((new s.default).retain(l.length()-1).delete(1))),w.log("convert",this.container.innerHTML,l),this.container.innerHTML="",l}},{key:"dangerouslyPasteHTML",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:l.default.sources.API;if("string"==typeof t)this.quill.setContents(this.convert(t),e),this.quill.setSelection(0,l.default.sources.SILENT);else{var r=this.convert(e);this.quill.updateContents((new s.default).retain(t).concat(r),n),this.quill.setSelection(t+r.length(),l.default.sources.SILENT)}}},{key:"onPaste",value:function(t){var e=this;if(!t.defaultPrevented&&this.quill.isEnabled()){var n=this.quill.getSelection(),r=(new s.default).retain(n.index),o=this.quill.scrollingContainer.scrollTop;this.container.focus(),this.quill.selection.update(l.default.sources.SILENT),setTimeout(function(){r=r.concat(e.convert()).delete(n.length),e.quill.updateContents(r,l.default.sources.USER),e.quill.setSelection(r.length()-n.length,l.default.sources.SILENT),e.quill.scrollingContainer.scrollTop=o,e.quill.focus()},1)}}},{key:"prepareMatching",value:function(){var t=this,e=[],n=[];return this.matchers.forEach(function(r){var i=o(r,2),a=i[0],s=i[1];switch(a){case Node.TEXT_NODE:n.push(s);break;case Node.ELEMENT_NODE:e.push(s);break;default:[].forEach.call(t.container.querySelectorAll(a),function(t){t[x]=t[x]||[],t[x].push(s)})}}),[e,n]}}]),e}();function N(t,e,n){return"object"===(void 0===e?"undefined":r(e))?Object.keys(e).reduce(function(t,n){return N(t,n,e[n])},t):t.reduce(function(t,r){return r.attributes&&r.attributes[e]?t.push(r):t.insert(r.insert,(0,a.default)({},_({},e,n),r.attributes))},new s.default)}function S(t){if(t.nodeType!==Node.ELEMENT_NODE)return{};return t["__ql-computed-style"]||(t["__ql-computed-style"]=window.getComputedStyle(t))}function j(t,e){for(var n="",r=t.ops.length-1;r>=0&&n.length<e.length;--r){var o=t.ops[r];if("string"!=typeof o.insert)break;n=o.insert+n}return n.slice(-1*e.length)===e}function T(t){if(0===t.childNodes.length)return!1;var e=S(t);return["block","list-item"].indexOf(e.display)>-1}function P(t,e,n){return N(n,t,!0)}function C(t,e){var n=u.default.Attributor.Attribute.keys(t),r=u.default.Attributor.Class.keys(t),o=u.default.Attributor.Style.keys(t),i={};return n.concat(r).concat(o).forEach(function(e){var n=u.default.query(e,u.default.Scope.ATTRIBUTE);null!=n&&(i[n.attrName]=n.value(t),i[n.attrName])||(null==(n=E[e])||n.attrName!==e&&n.keyName!==e||(i[n.attrName]=n.value(t)||void 0),null==(n=A[e])||n.attrName!==e&&n.keyName!==e||(n=A[e],i[n.attrName]=n.value(t)||void 0))}),Object.keys(i).length>0&&(e=N(e,i)),e}function L(t,e){var n=u.default.query(t);if(null==n)return e;if(n.prototype instanceof u.default.Embed){var r={},o=n.value(t);null!=o&&(r[n.blotName]=o,e=(new s.default).insert(r,n.formats(t)))}else"function"==typeof n.formats&&(e=N(e,n.blotName,n.formats(t)));return e}function q(t,e){return j(e,"\n")||(T(t)||e.length()>0&&t.nextSibling&&T(t.nextSibling))&&e.insert("\n"),e}function M(t,e){if(T(t)&&null!=t.nextElementSibling&&!j(e,"\n\n")){var n=t.offsetHeight+parseFloat(S(t).marginTop)+parseFloat(S(t).marginBottom);t.nextElementSibling.offsetTop>t.offsetTop+1.5*n&&e.insert("\n")}return e}function I(t,e){var n=t.data;if("O:P"===t.parentNode.tagName)return e.insert(n.trim());if(0===n.trim().length&&t.parentNode.classList.contains("ql-clipboard"))return e;if(!S(t.parentNode).whiteSpace.startsWith("pre")){var r=function(t,e){return(e=e.replace(/[^\u00a0]/g,"")).length<1&&t?" ":e};n=(n=n.replace(/\r\n/g," ").replace(/\n/g," ")).replace(/\s\s+/g,r.bind(r,!0)),(null==t.previousSibling&&T(t.parentNode)||null!=t.previousSibling&&T(t.previousSibling))&&(n=n.replace(/^\s+/,r.bind(r,!1))),(null==t.nextSibling&&T(t.parentNode)||null!=t.nextSibling&&T(t.nextSibling))&&(n=n.replace(/\s+$/,r.bind(r,!1)))}return e.insert(n)}k.DEFAULTS={matchers:[],matchVisual:!0},e.default=k,e.matchAttributor=C,e.matchBlot=L,e.matchNewline=q,e.matchSpacing=M,e.matchText=I},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(6),s=(r=a)&&r.__esModule?r:{default:r};var u=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,s.default),o(e,[{key:"optimize",value:function(t){i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t),this.domNode.tagName!==this.statics.tagName[0]&&this.replaceWith(this.statics.blotName)}}],[{key:"create",value:function(){return i(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this)}},{key:"formats",value:function(){return!0}}]),e}();u.blotName="bold",u.tagName=["STRONG","B"],e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.addControls=e.default=void 0;var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=c(n(2)),a=c(n(0)),s=c(n(5)),u=c(n(10)),l=c(n(9));function c(t){return t&&t.__esModule?t:{default:t}}function f(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var p=(0,u.default)("quill:toolbar"),h=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var o,i=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));if(Array.isArray(i.options.container)){var a=document.createElement("div");v(a,i.options.container),t.container.parentNode.insertBefore(a,t.container),i.container=a}else"string"==typeof i.options.container?i.container=document.querySelector(i.options.container):i.container=i.options.container;return i.container instanceof HTMLElement?(i.container.classList.add("ql-toolbar"),i.controls=[],i.handlers={},Object.keys(i.options.handlers).forEach(function(t){i.addHandler(t,i.options.handlers[t])}),[].forEach.call(i.container.querySelectorAll("button, select"),function(t){i.attach(t)}),i.quill.on(s.default.events.EDITOR_CHANGE,function(t,e){t===s.default.events.SELECTION_CHANGE&&i.update(e)}),i.quill.on(s.default.events.SCROLL_OPTIMIZE,function(){var t=i.quill.selection.getRange(),e=r(t,1)[0];i.update(e)}),i):(o=p.error("Container required for toolbar",i.options),f(i,o))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,l.default),o(e,[{key:"addHandler",value:function(t,e){this.handlers[t]=e}},{key:"attach",value:function(t){var e=this,n=[].find.call(t.classList,function(t){return 0===t.indexOf("ql-")});if(n){if(n=n.slice("ql-".length),"BUTTON"===t.tagName&&t.setAttribute("type","button"),null==this.handlers[n]){if(null!=this.quill.scroll.whitelist&&null==this.quill.scroll.whitelist[n])return void p.warn("ignoring attaching to disabled format",n,t);if(null==a.default.query(n))return void p.warn("ignoring attaching to nonexistent format",n,t)}var o="SELECT"===t.tagName?"change":"click";t.addEventListener(o,function(o){var u=void 0;if("SELECT"===t.tagName){if(t.selectedIndex<0)return;var l=t.options[t.selectedIndex];u=!l.hasAttribute("selected")&&(l.value||!1)}else u=!t.classList.contains("ql-active")&&(t.value||!t.hasAttribute("value")),o.preventDefault();e.quill.focus();var c=e.quill.selection.getRange(),f=r(c,1)[0];if(null!=e.handlers[n])e.handlers[n].call(e,u);else if(a.default.query(n).prototype instanceof a.default.Embed){if(!(u=prompt("Enter "+n)))return;e.quill.updateContents((new i.default).retain(f.index).delete(f.length).insert(function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}({},n,u)),s.default.sources.USER)}else e.quill.format(n,u,s.default.sources.USER);e.update(f)}),this.controls.push([n,t])}}},{key:"update",value:function(t){var e=null==t?{}:this.quill.getFormat(t);this.controls.forEach(function(n){var o=r(n,2),i=o[0],a=o[1];if("SELECT"===a.tagName){var s=void 0;if(null==t)s=null;else if(null==e[i])s=a.querySelector("option[selected]");else if(!Array.isArray(e[i])){var u=e[i];"string"==typeof u&&(u=u.replace(/\"/g,'\\"')),s=a.querySelector('option[value="'+u+'"]')}null==s?(a.value="",a.selectedIndex=-1):s.selected=!0}else if(null==t)a.classList.remove("ql-active");else if(a.hasAttribute("value")){var l=e[i]===a.getAttribute("value")||null!=e[i]&&e[i].toString()===a.getAttribute("value")||null==e[i]&&!a.getAttribute("value");a.classList.toggle("ql-active",l)}else a.classList.toggle("ql-active",null!=e[i])})}}]),e}();function d(t,e,n){var r=document.createElement("button");r.setAttribute("type","button"),r.classList.add("ql-"+e),null!=n&&(r.value=n),t.appendChild(r)}function v(t,e){Array.isArray(e[0])||(e=[e]),e.forEach(function(e){var n=document.createElement("span");n.classList.add("ql-formats"),e.forEach(function(t){if("string"==typeof t)d(n,t);else{var e=Object.keys(t)[0],r=t[e];Array.isArray(r)?function(t,e,n){var r=document.createElement("select");r.classList.add("ql-"+e),n.forEach(function(t){var e=document.createElement("option");!1!==t?e.setAttribute("value",t):e.setAttribute("selected","selected"),r.appendChild(e)}),t.appendChild(r)}(n,e,r):d(n,e,r)}}),t.appendChild(n)})}h.DEFAULTS={},h.DEFAULTS={container:null,handlers:{clean:function(){var t=this,e=this.quill.getSelection();if(null!=e)if(0==e.length){var n=this.quill.getFormat();Object.keys(n).forEach(function(e){null!=a.default.query(e,a.default.Scope.INLINE)&&t.quill.format(e,!1)})}else this.quill.removeFormat(e,s.default.sources.USER)},direction:function(t){var e=this.quill.getFormat().align;"rtl"===t&&null==e?this.quill.format("align","right",s.default.sources.USER):t||"right"!==e||this.quill.format("align",!1,s.default.sources.USER),this.quill.format("direction",t,s.default.sources.USER)},indent:function(t){var e=this.quill.getSelection(),n=this.quill.getFormat(e),r=parseInt(n.indent||0);if("+1"===t||"-1"===t){var o="+1"===t?1:-1;"rtl"===n.direction&&(o*=-1),this.quill.format("indent",r+o,s.default.sources.USER)}},link:function(t){!0===t&&(t=prompt("Enter link URL:")),this.quill.format("link",t,s.default.sources.USER)},list:function(t){var e=this.quill.getSelection(),n=this.quill.getFormat(e);"check"===t?"checked"===n.list||"unchecked"===n.list?this.quill.format("list",!1,s.default.sources.USER):this.quill.format("list","unchecked",s.default.sources.USER):this.quill.format("list",t,s.default.sources.USER)}}},e.default=h,e.addControls=v},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <polyline class="ql-even ql-stroke" points="5 7 3 9 5 11"></polyline> <polyline class="ql-even ql-stroke" points="13 7 15 9 13 11"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>'},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(28),s=(r=a)&&r.__esModule?r:{default:r};var u=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return r.label.innerHTML=n,r.container.classList.add("ql-color-picker"),[].slice.call(r.container.querySelectorAll(".ql-picker-item"),0,7).forEach(function(t){t.classList.add("ql-primary")}),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,s.default),o(e,[{key:"buildItem",value:function(t){var n=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"buildItem",this).call(this,t);return n.style.backgroundColor=t.getAttribute("value")||"",n}},{key:"selectItem",value:function(t,n){i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"selectItem",this).call(this,t,n);var r=this.label.querySelector(".ql-color-label"),o=t&&t.getAttribute("data-value")||"";r&&("line"===r.tagName?r.style.stroke=o:r.style.fill=o)}}]),e}();e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(28),a=(r=i)&&r.__esModule?r:{default:r};var s=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return r.container.classList.add("ql-icon-picker"),[].forEach.call(r.container.querySelectorAll(".ql-picker-item"),function(t){t.innerHTML=n[t.getAttribute("data-value")||""]}),r.defaultItem=r.container.querySelector(".ql-selected"),r.selectItem(r.defaultItem),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default),o(e,[{key:"selectItem",value:function(t,n){(function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0})(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"selectItem",this).call(this,t,n),t=t||this.defaultItem,this.label.innerHTML=t.innerHTML}}]),e}();e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var o=function(){function t(e,n){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.quill=e,this.boundsContainer=n||document.body,this.root=e.addContainer("ql-tooltip"),this.root.innerHTML=this.constructor.TEMPLATE,this.quill.root===this.quill.scrollingContainer&&this.quill.root.addEventListener("scroll",function(){r.root.style.marginTop=-1*r.quill.root.scrollTop+"px"}),this.hide()}return r(t,[{key:"hide",value:function(){this.root.classList.add("ql-hidden")}},{key:"position",value:function(t){var e=t.left+t.width/2-this.root.offsetWidth/2,n=t.bottom+this.quill.root.scrollTop;this.root.style.left=e+"px",this.root.style.top=n+"px",this.root.classList.remove("ql-flip");var r=this.boundsContainer.getBoundingClientRect(),o=this.root.getBoundingClientRect(),i=0;if(o.right>r.right&&(i=r.right-o.right,this.root.style.left=e+i+"px"),o.left<r.left&&(i=r.left-o.left,this.root.style.left=e+i+"px"),o.bottom>r.bottom){var a=o.bottom-o.top,s=t.bottom-t.top+a;this.root.style.top=n-s+"px",this.root.classList.add("ql-flip")}return i}},{key:"show",value:function(){this.root.classList.remove("ql-editing"),this.root.classList.remove("ql-hidden")}}]),t}();e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=h(n(3)),s=h(n(8)),u=n(43),l=h(u),c=h(n(27)),f=n(15),p=h(n(41));function h(t){return t&&t.__esModule?t:{default:t}}function d(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function v(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function y(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var g=[[{header:["1","2","3",!1]}],["bold","italic","underline","link"],[{list:"ordered"},{list:"bullet"}],["clean"]],m=function(t){function e(t,n){d(this,e),null!=n.modules.toolbar&&null==n.modules.toolbar.container&&(n.modules.toolbar.container=g);var r=v(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.quill.container.classList.add("ql-snow"),r}return y(e,l.default),i(e,[{key:"extendToolbar",value:function(t){t.container.classList.add("ql-snow"),this.buildButtons([].slice.call(t.container.querySelectorAll("button")),p.default),this.buildPickers([].slice.call(t.container.querySelectorAll("select")),p.default),this.tooltip=new b(this.quill,this.options.bounds),t.container.querySelector(".ql-link")&&this.quill.keyboard.addBinding({key:"K",shortKey:!0},function(e,n){t.handlers.link.call(t,!n.format.link)})}}]),e}();m.DEFAULTS=(0,a.default)(!0,{},l.default.DEFAULTS,{modules:{toolbar:{handlers:{link:function(t){if(t){var e=this.quill.getSelection();if(null==e||0==e.length)return;var n=this.quill.getText(e);/^\S+@\S+\.\S+$/.test(n)&&0!==n.indexOf("mailto:")&&(n="mailto:"+n),this.quill.theme.tooltip.edit("link",n)}else this.quill.format("link",!1)}}}}});var b=function(t){function e(t,n){d(this,e);var r=v(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.preview=r.root.querySelector("a.ql-preview"),r}return y(e,u.BaseTooltip),i(e,[{key:"listen",value:function(){var t=this;o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"listen",this).call(this),this.root.querySelector("a.ql-action").addEventListener("click",function(e){t.root.classList.contains("ql-editing")?t.save():t.edit("link",t.preview.textContent),e.preventDefault()}),this.root.querySelector("a.ql-remove").addEventListener("click",function(e){if(null!=t.linkRange){var n=t.linkRange;t.restoreFocus(),t.quill.formatText(n,"link",!1,s.default.sources.USER),delete t.linkRange}e.preventDefault(),t.hide()}),this.quill.on(s.default.events.SELECTION_CHANGE,function(e,n,o){if(null!=e){if(0===e.length&&o===s.default.sources.USER){var i=t.quill.scroll.descendant(c.default,e.index),a=r(i,2),u=a[0],l=a[1];if(null!=u){t.linkRange=new f.Range(e.index-l,u.length());var p=c.default.formats(u.domNode);return t.preview.textContent=p,t.preview.setAttribute("href",p),t.show(),void t.position(t.quill.getBounds(t.linkRange))}}else delete t.linkRange;t.hide()}})}},{key:"show",value:function(){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"show",this).call(this),this.root.removeAttribute("data-mode")}}]),e}();b.TEMPLATE=['<a class="ql-preview" target="_blank" href="about:blank"></a>','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-action"></a>','<a class="ql-remove"></a>'].join(""),e.default=m},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=M(n(29)),o=n(36),i=n(38),a=n(64),s=M(n(65)),u=M(n(66)),l=n(67),c=M(l),f=n(37),p=n(26),h=n(39),d=n(40),v=M(n(56)),y=M(n(68)),g=M(n(27)),m=M(n(69)),b=M(n(70)),_=M(n(71)),w=M(n(72)),x=M(n(73)),O=n(13),E=M(O),A=M(n(74)),k=M(n(75)),N=M(n(57)),S=M(n(41)),j=M(n(28)),T=M(n(59)),P=M(n(60)),C=M(n(61)),L=M(n(108)),q=M(n(62));function M(t){return t&&t.__esModule?t:{default:t}}r.default.register({"attributors/attribute/direction":i.DirectionAttribute,"attributors/class/align":o.AlignClass,"attributors/class/background":f.BackgroundClass,"attributors/class/color":p.ColorClass,"attributors/class/direction":i.DirectionClass,"attributors/class/font":h.FontClass,"attributors/class/size":d.SizeClass,"attributors/style/align":o.AlignStyle,"attributors/style/background":f.BackgroundStyle,"attributors/style/color":p.ColorStyle,"attributors/style/direction":i.DirectionStyle,"attributors/style/font":h.FontStyle,"attributors/style/size":d.SizeStyle},!0),r.default.register({"formats/align":o.AlignClass,"formats/direction":i.DirectionClass,"formats/indent":a.IndentClass,"formats/background":f.BackgroundStyle,"formats/color":p.ColorStyle,"formats/font":h.FontClass,"formats/size":d.SizeClass,"formats/blockquote":s.default,"formats/code-block":E.default,"formats/header":u.default,"formats/list":c.default,"formats/bold":v.default,"formats/code":O.Code,"formats/italic":y.default,"formats/link":g.default,"formats/script":m.default,"formats/strike":b.default,"formats/underline":_.default,"formats/image":w.default,"formats/video":x.default,"formats/list/item":l.ListItem,"modules/formula":A.default,"modules/syntax":k.default,"modules/toolbar":N.default,"themes/bubble":L.default,"themes/snow":q.default,"ui/icons":S.default,"ui/picker":j.default,"ui/icon-picker":P.default,"ui/color-picker":T.default,"ui/tooltip":C.default},!0),e.default=r.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IndentClass=void 0;var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(0),s=(r=a)&&r.__esModule?r:{default:r};var u=new(function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,s.default.Attributor.Class),o(e,[{key:"add",value:function(t,n){if("+1"===n||"-1"===n){var r=this.value(t)||0;n="+1"===n?r+1:r-1}return 0===n?(this.remove(t),!0):i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"add",this).call(this,t,n)}},{key:"canAdd",value:function(t,n){return i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"canAdd",this).call(this,t,n)||i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"canAdd",this).call(this,t,parseInt(n))}},{key:"value",value:function(t){return parseInt(i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"value",this).call(this,t))||void 0}}]),e}())("indent","ql-indent",{scope:s.default.Scope.BLOCK,whitelist:[1,2,3,4,5,6,7,8]});e.IndentClass=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(4),i=(r=o)&&r.__esModule?r:{default:r};var a=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),e}();a.blotName="blockquote",a.tagName="blockquote",e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(4),a=(r=i)&&r.__esModule?r:{default:r};var s=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default),o(e,null,[{key:"formats",value:function(t){return this.tagName.indexOf(t.tagName)+1}}]),e}();s.blotName="header",s.tagName=["H1","H2","H3","H4","H5","H6"],e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.ListItem=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=u(n(0)),a=u(n(4)),s=u(n(25));function u(t){return t&&t.__esModule?t:{default:t}}function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function f(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var p=function(t){function e(){return l(this,e),c(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return f(e,a.default),r(e,[{key:"format",value:function(t,n){t!==h.blotName||n?o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n):this.replaceWith(i.default.create(this.statics.scope))}},{key:"remove",value:function(){null==this.prev&&null==this.next?this.parent.remove():o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"remove",this).call(this)}},{key:"replaceWith",value:function(t,n){return this.parent.isolate(this.offset(this.parent),this.length()),t===this.parent.statics.blotName?(this.parent.replaceWith(t,n),this):(this.parent.unwrap(),o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"replaceWith",this).call(this,t,n))}}],[{key:"formats",value:function(t){return t.tagName===this.tagName?void 0:o(e.__proto__||Object.getPrototypeOf(e),"formats",this).call(this,t)}}]),e}();p.blotName="list-item",p.tagName="LI";var h=function(t){function e(t){l(this,e);var n=c(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t)),r=function(e){if(e.target.parentNode===t){var r=n.statics.formats(t),o=i.default.find(e.target);"checked"===r?o.format("list","unchecked"):"unchecked"===r&&o.format("list","checked")}};return t.addEventListener("touchstart",r),t.addEventListener("mousedown",r),n}return f(e,s.default),r(e,null,[{key:"create",value:function(t){var n="ordered"===t?"OL":"UL",r=o(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,n);return"checked"!==t&&"unchecked"!==t||r.setAttribute("data-checked","checked"===t),r}},{key:"formats",value:function(t){return"OL"===t.tagName?"ordered":"UL"===t.tagName?t.hasAttribute("data-checked")?"true"===t.getAttribute("data-checked")?"checked":"unchecked":"bullet":void 0}}]),r(e,[{key:"format",value:function(t,e){this.children.length>0&&this.children.tail.format(t,e)}},{key:"formats",value:function(){return t={},e=this.statics.blotName,n=this.statics.formats(this.domNode),e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t;var t,e,n}},{key:"insertBefore",value:function(t,n){if(t instanceof p)o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertBefore",this).call(this,t,n);else{var r=null==n?this.length():n.offset(this),i=this.split(r);i.parent.insertBefore(t,i)}}},{key:"optimize",value:function(t){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t);var n=this.next;null!=n&&n.prev===this&&n.statics.blotName===this.statics.blotName&&n.domNode.tagName===this.domNode.tagName&&n.domNode.getAttribute("data-checked")===this.domNode.getAttribute("data-checked")&&(n.moveChildren(this),n.remove())}},{key:"replace",value:function(t){if(t.statics.blotName!==this.statics.blotName){var n=i.default.create(this.statics.defaultChild);t.moveChildren(n),this.appendChild(n)}o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"replace",this).call(this,t)}}]),e}();h.blotName="list",h.scope=i.default.Scope.BLOCK_BLOT,h.tagName=["OL","UL"],h.defaultChild="list-item",h.allowedChildren=[p],e.ListItem=p,e.default=h},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(56),i=(r=o)&&r.__esModule?r:{default:r};var a=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),e}();a.blotName="italic",a.tagName=["EM","I"],e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(6),a=(r=i)&&r.__esModule?r:{default:r};var s=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default),o(e,null,[{key:"create",value:function(t){return"super"===t?document.createElement("sup"):"sub"===t?document.createElement("sub"):function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t)}},{key:"formats",value:function(t){return"SUB"===t.tagName?"sub":"SUP"===t.tagName?"super":void 0}}]),e}();s.blotName="script",s.tagName=["SUB","SUP"],e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(6),i=(r=o)&&r.__esModule?r:{default:r};var a=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),e}();a.blotName="strike",a.tagName="S",e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(6),i=(r=o)&&r.__esModule?r:{default:r};var a=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),e}();a.blotName="underline",a.tagName="U",e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(0),s=(r=a)&&r.__esModule?r:{default:r},u=n(27);var l=["alt","height","width"],c=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,s.default.Embed),o(e,[{key:"format",value:function(t,n){l.indexOf(t)>-1?n?this.domNode.setAttribute(t,n):this.domNode.removeAttribute(t):i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n)}}],[{key:"create",value:function(t){var n=i(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t);return"string"==typeof t&&n.setAttribute("src",this.sanitize(t)),n}},{key:"formats",value:function(t){return l.reduce(function(e,n){return t.hasAttribute(n)&&(e[n]=t.getAttribute(n)),e},{})}},{key:"match",value:function(t){return/\.(jpe?g|gif|png)$/.test(t)||/^data:image\/.+;base64/.test(t)}},{key:"sanitize",value:function(t){return(0,u.sanitize)(t,["http","https","data"])?t:"//:0"}},{key:"value",value:function(t){return t.getAttribute("src")}}]),e}();c.blotName="image",c.tagName="IMG",e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(4),s=n(27),u=(r=s)&&r.__esModule?r:{default:r};var l=["height","width"],c=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.BlockEmbed),o(e,[{key:"format",value:function(t,n){l.indexOf(t)>-1?n?this.domNode.setAttribute(t,n):this.domNode.removeAttribute(t):i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n)}}],[{key:"create",value:function(t){var n=i(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t);return n.setAttribute("frameborder","0"),n.setAttribute("allowfullscreen",!0),n.setAttribute("src",this.sanitize(t)),n}},{key:"formats",value:function(t){return l.reduce(function(e,n){return t.hasAttribute(n)&&(e[n]=t.getAttribute(n)),e},{})}},{key:"sanitize",value:function(t){return u.default.sanitize(t)}},{key:"value",value:function(t){return t.getAttribute("src")}}]),e}();c.blotName="video",c.className="ql-video",c.tagName="IFRAME",e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.FormulaBlot=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=s(n(35)),i=s(n(5)),a=s(n(9));function s(t){return t&&t.__esModule?t:{default:t}}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function c(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var f=function(t){function e(){return u(this,e),l(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return c(e,o.default),r(e,null,[{key:"create",value:function(t){var n=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t);return"string"==typeof t&&(window.katex.render(t,n,{throwOnError:!1,errorColor:"#f00"}),n.setAttribute("data-value",t)),n}},{key:"value",value:function(t){return t.getAttribute("data-value")}}]),e}();f.blotName="formula",f.className="ql-formula",f.tagName="SPAN";var p=function(t){function e(){u(this,e);var t=l(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));if(null==window.katex)throw new Error("Formula module requires KaTeX.");return t}return c(e,a.default),r(e,null,[{key:"register",value:function(){i.default.register(f,!0)}}]),e}();e.FormulaBlot=f,e.default=p},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.CodeToken=e.CodeBlock=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=u(n(0)),i=u(n(5)),a=u(n(9)),s=u(n(13));function u(t){return t&&t.__esModule?t:{default:t}}function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function f(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var p=function(t){function e(){return l(this,e),c(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return f(e,s.default),r(e,[{key:"replaceWith",value:function(t){this.domNode.textContent=this.domNode.textContent,this.attach(),function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"replaceWith",this).call(this,t)}},{key:"highlight",value:function(t){var e=this.domNode.textContent;this.cachedText!==e&&((e.trim().length>0||null==this.cachedText)&&(this.domNode.innerHTML=t(e),this.domNode.normalize(),this.attach()),this.cachedText=e)}}]),e}();p.className="ql-syntax";var h=new o.default.Attributor.Class("token","hljs",{scope:o.default.Scope.INLINE}),d=function(t){function e(t,n){l(this,e);var r=c(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));if("function"!=typeof r.options.highlight)throw new Error("Syntax module requires highlight.js. Please include the library on the page before Quill.");var o=null;return r.quill.on(i.default.events.SCROLL_OPTIMIZE,function(){clearTimeout(o),o=setTimeout(function(){r.highlight(),o=null},r.options.interval)}),r.highlight(),r}return f(e,a.default),r(e,null,[{key:"register",value:function(){i.default.register(h,!0),i.default.register(p,!0)}}]),r(e,[{key:"highlight",value:function(){var t=this;if(!this.quill.selection.composing){this.quill.update(i.default.sources.USER);var e=this.quill.getSelection();this.quill.scroll.descendants(p).forEach(function(e){e.highlight(t.options.highlight)}),this.quill.update(i.default.sources.SILENT),null!=e&&this.quill.setSelection(e,i.default.sources.SILENT)}}}]),e}();d.DEFAULTS={highlight:null==window.hljs?null:function(t){return window.hljs.highlightAuto(t).value},interval:1e3},e.CodeBlock=p,e.CodeToken=h,e.default=d},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <g class="ql-fill ql-color-label"> <polygon points="6 6.868 6 6 5 6 5 7 5.942 7 6 6.868"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points="6.817 5 6 5 6 6 6.38 6 6.817 5"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points="4 11.439 4 11 3 11 3 12 3.755 12 4 11.439"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points="4.63 10 4 10 4 11 4.192 11 4.63 10"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points="13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points="12 6.868 12 6 11.62 6 12 6.868"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points="12.933 9 13 9 13 8 12.495 8 12.933 9"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points="5.5 13 9 5 12.5 13"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <rect class="ql-fill ql-stroke" height=3 width=3 x=4 y=5></rect> <rect class="ql-fill ql-stroke" height=3 width=3 x=11 y=5></rect> <path class="ql-even ql-fill ql-stroke" d=M7,8c0,4.031-3,5-3,5></path> <path class="ql-even ql-fill ql-stroke" d=M14,8c0,4.031-3,5-3,5></path> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>'},function(t,e){t.exports='<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class="ql-color-label ql-stroke ql-transparent" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points="5.5 11 9 3 12.5 11"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="3 11 5 9 3 7 3 11"></polygon> <line class="ql-stroke ql-fill" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="15 12 13 10 15 8 15 12"></polygon> <line class="ql-stroke ql-fill" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform="translate(24 18) rotate(-180)"/> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>'},function(t,e){t.exports='<svg viewBox="0 0 18 18"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>'},function(t,e){t.exports='<svg viewBox="0 0 18 18"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class="ql-even ql-fill" points="5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12"></polyline> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class="ql-fill ql-stroke" points="3 7 3 11 5 9 3 7"></polyline> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="5 7 5 11 3 9 5 7"></polyline> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class="ql-even ql-stroke" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class="ql-even ql-stroke" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class="ql-stroke ql-thin" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class="ql-stroke ql-thin" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class="ql-stroke ql-thin" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>'},function(t,e){t.exports='<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points="3 4 4 5 6 3"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points="3 14 4 15 6 13"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="3 9 4 10 6 8"></polyline> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class="ql-stroke ql-thin" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <polygon class=ql-stroke points="7 11 9 13 11 11 7 11"></polygon> <polygon class=ql-stroke points="7 7 9 5 11 7 7 7"></polygon> </svg>'},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.BubbleTooltip=void 0;var r=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=f(n(3)),a=f(n(8)),s=n(43),u=f(s),l=n(15),c=f(n(41));function f(t){return t&&t.__esModule?t:{default:t}}function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function d(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var v=[["bold","italic","link"],[{header:1},{header:2},"blockquote"]],y=function(t){function e(t,n){p(this,e),null!=n.modules.toolbar&&null==n.modules.toolbar.container&&(n.modules.toolbar.container=v);var r=h(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.quill.container.classList.add("ql-bubble"),r}return d(e,u.default),o(e,[{key:"extendToolbar",value:function(t){this.tooltip=new g(this.quill,this.options.bounds),this.tooltip.root.appendChild(t.container),this.buildButtons([].slice.call(t.container.querySelectorAll("button")),c.default),this.buildPickers([].slice.call(t.container.querySelectorAll("select")),c.default)}}]),e}();y.DEFAULTS=(0,i.default)(!0,{},u.default.DEFAULTS,{modules:{toolbar:{handlers:{link:function(t){t?this.quill.theme.tooltip.edit():this.quill.format("link",!1)}}}}});var g=function(t){function e(t,n){p(this,e);var r=h(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.quill.on(a.default.events.EDITOR_CHANGE,function(t,e,n,o){if(t===a.default.events.SELECTION_CHANGE)if(null!=e&&e.length>0&&o===a.default.sources.USER){r.show(),r.root.style.left="0px",r.root.style.width="",r.root.style.width=r.root.offsetWidth+"px";var i=r.quill.getLines(e.index,e.length);if(1===i.length)r.position(r.quill.getBounds(e));else{var s=i[i.length-1],u=r.quill.getIndex(s),c=Math.min(s.length()-1,e.index+e.length-u),f=r.quill.getBounds(new l.Range(u,c));r.position(f)}}else document.activeElement!==r.textbox&&r.quill.hasFocus()&&r.hide()}),r}return d(e,s.BaseTooltip),o(e,[{key:"listen",value:function(){var t=this;r(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"listen",this).call(this),this.root.querySelector(".ql-close").addEventListener("click",function(){t.root.classList.remove("ql-editing")}),this.quill.on(a.default.events.SCROLL_OPTIMIZE,function(){setTimeout(function(){if(!t.root.classList.contains("ql-hidden")){var e=t.quill.getSelection();null!=e&&t.position(t.quill.getBounds(e))}},1)})}},{key:"cancel",value:function(){this.show()}},{key:"position",value:function(t){var n=r(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"position",this).call(this,t),o=this.root.querySelector(".ql-tooltip-arrow");if(o.style.marginLeft="",0===n)return n;o.style.marginLeft=-1*n-o.offsetWidth/2+"px"}}]),e}();g.TEMPLATE=['<span class="ql-tooltip-arrow"></span>','<div class="ql-tooltip-editor">','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-close"></a>',"</div>"].join(""),e.BubbleTooltip=g,e.default=y},function(t,e,n){t.exports=n(63)}]).default},t.exports=n()}).call(this,n(229).Buffer)},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e,n){var r=n(74),o=n(179),i=n(178),a="[object Null]",s="[object Undefined]",u=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?s:a:u&&u in Object(t)?o(t):i(t)}},function(t,e,n){var r=n(111),o=n(110),i="[object Symbol]";t.exports=function(t){return"symbol"==typeof t||o(t)&&r(t)==i}},function(t,e,n){(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.exports=n}).call(this,n(44))},function(t,e,n){var r=n(74),o=n(181),i=n(180),a=n(112),s=1/0,u=r?r.prototype:void 0,l=u?u.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(i(e))return o(e,t)+"";if(a(e))return l?l.call(e):"";var n=e+"";return"0"==n&&1/e==-s?"-0":n}},function(t,e,n){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},function(t,e,n){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,e,n){"use strict";var r=n(211);t.exports=function(t,e,n,o,i){var a=new Error(t);return r(a,e,n,o,i)}},function(t,e,n){"use strict";var r=n(15),o=n(212),i=n(210),a=n(209),s=n(208),u=n(117),l="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(207);t.exports=function(t){return new Promise(function(e,c){var f=t.data,p=t.headers;r.isFormData(f)&&delete p["Content-Type"];var h=new XMLHttpRequest,d="onreadystatechange",v=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in h||s(t.url)||(h=new window.XDomainRequest,d="onload",v=!0,h.onprogress=function(){},h.ontimeout=function(){}),t.auth){var y=t.auth.username||"",g=t.auth.password||"";p.Authorization="Basic "+l(y+":"+g)}if(h.open(t.method.toUpperCase(),i(t.url,t.params,t.paramsSerializer),!0),h.timeout=t.timeout,h[d]=function(){if(h&&(4===h.readyState||v)&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in h?a(h.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?h.response:h.responseText,status:1223===h.status?204:h.status,statusText:1223===h.status?"No Content":h.statusText,headers:n,config:t,request:h};o(e,c,r),h=null}},h.onerror=function(){c(u("Network Error",t,null,h)),h=null},h.ontimeout=function(){c(u("timeout of "+t.timeout+"ms exceeded",t,"ECONNABORTED",h)),h=null},r.isStandardBrowserEnv()){var m=n(206),b=(t.withCredentials||s(t.url))&&t.xsrfCookieName?m.read(t.xsrfCookieName):void 0;b&&(p[t.xsrfHeaderName]=b)}if("setRequestHeader"in h&&r.forEach(p,function(t,e){void 0===f&&"content-type"===e.toLowerCase()?delete p[e]:h.setRequestHeader(e,t)}),t.withCredentials&&(h.withCredentials=!0),t.responseType)try{h.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&h.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then(function(t){h&&(h.abort(),c(t),h=null)}),void 0===f&&(f=null),h.send(f)})}},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,l=[],c=!1,f=-1;function p(){c&&u&&(c=!1,u.length?l=u.concat(l):f=-1,l.length&&h())}function h(){if(!c){var t=s(p);c=!0;for(var e=l.length;e;){for(u=l,l=[];++f<e;)u&&u[f].run();f=-1,e=l.length}u=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function v(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new d(t,e)),1!==l.length||c||s(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return t.apply(e,n)}}},function(t,e,n){"use strict";var r=Object.prototype.hasOwnProperty,o=Object.prototype.toString,i=function(t){return"function"==typeof Array.isArray?Array.isArray(t):"[object Array]"===o.call(t)},a=function(t){if(!t||"[object Object]"!==o.call(t))return!1;var e,n=r.call(t,"constructor"),i=t.constructor&&t.constructor.prototype&&r.call(t.constructor.prototype,"isPrototypeOf");if(t.constructor&&!n&&!i)return!1;for(e in t);return void 0===e||r.call(t,e)};t.exports=function t(){var e,n,r,o,s,u,l=arguments[0],c=1,f=arguments.length,p=!1;for("boolean"==typeof l&&(p=l,l=arguments[1]||{},c=2),(null==l||"object"!=typeof l&&"function"!=typeof l)&&(l={});c<f;++c)if(null!=(e=arguments[c]))for(n in e)r=l[n],l!==(o=e[n])&&(p&&o&&(a(o)||(s=i(o)))?(s?(s=!1,u=r&&i(r)?r:[]):u=r&&a(r)?r:{},l[n]=t(p,u,o)):void 0!==o&&(l[n]=o));return l}},function(t,e,n){var r=Array.prototype.slice,o=n(220),i=n(219),a=t.exports=function(t,e,n){return n||(n={}),t===e||(t instanceof Date&&e instanceof Date?t.getTime()===e.getTime():!t||!e||"object"!=typeof t&&"object"!=typeof e?n.strict?t===e:t==e:function(t,e,n){var l,c;if(s(t)||s(e))return!1;if(t.prototype!==e.prototype)return!1;if(i(t))return!!i(e)&&(t=r.call(t),e=r.call(e),a(t,e,n));if(u(t)){if(!u(e))return!1;if(t.length!==e.length)return!1;for(l=0;l<t.length;l++)if(t[l]!==e[l])return!1;return!0}try{var f=o(t),p=o(e)}catch(t){return!1}if(f.length!=p.length)return!1;for(f.sort(),p.sort(),l=f.length-1;l>=0;l--)if(f[l]!=p[l])return!1;for(l=f.length-1;l>=0;l--)if(c=f[l],!a(t[c],e[c],n))return!1;return typeof t==typeof e}(t,e,n))};function s(t){return null===t||void 0===t}function u(t){return!(!t||"object"!=typeof t||"number"!=typeof t.length)&&("function"==typeof t.copy&&"function"==typeof t.slice&&!(t.length>0&&"number"!=typeof t[0]))}},function(t,e){t.exports=Math.scale||function(t,e,n,r,o){return 0===arguments.length||t!=t||e!=e||n!=n||r!=r||o!=o?NaN:t===1/0||t===-1/0?t:(t-e)*(o-r)/(n-e)+r}},function(t,e,n){var r=n(34);t.exports=function(t,e){var n=[];return r(t,!1,n.push,n,e),n}},function(t,e,n){var r=n(51),o=n(124);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return o(this)}}},function(t,e,n){var r=n(40),o=n(18),i=n(52).f;t.exports=function(t){return function(e){for(var n,a=o(e),s=r(a),u=s.length,l=0,c=[];u>l;)i.call(a,n=s[l++])&&c.push(t?[n,a[n]]:a[n]);return c}}},function(t,e,n){var r=n(6),o=n(94),i=n(25);t.exports=function(t,e,n,a){var s=String(i(t)),u=s.length,l=void 0===n?" ":String(n),c=r(e);if(c<=u||""==l)return s;var f=c-u,p=o.call(l,Math.ceil(f/l.length));return p.length>f&&(p=p.slice(0,f)),a?p+s:s+p}},function(t,e,n){"use strict";var r=n(64),o=n(4),i=n(6),a=n(21),s=n(5)("isConcatSpreadable");t.exports=function t(e,n,u,l,c,f,p,h){for(var d,v,y=c,g=0,m=!!p&&a(p,h,3);g<l;){if(g in u){if(d=m?m(u[g],g,n):u[g],v=!1,o(d)&&(v=void 0!==(v=d[s])?!!v:r(d)),v&&f>0)y=t(e,n,d,i(d.length),y,f-1)-1;else{if(y>=9007199254740991)throw TypeError();e[y]=d}y++}g++}return y}},function(t,e,n){var r=n(37),o=n(65),i=n(1),a=n(2).Reflect;t.exports=a&&a.ownKeys||function(t){var e=r.f(i(t)),n=o.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(24),o=n(6);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=o(e);if(e!==n)throw RangeError("Wrong length!");return n}},function(t,e,n){"use strict";var r=n(33),o=n(32).getWeak,i=n(1),a=n(4),s=n(35),u=n(34),l=n(22),c=n(14),f=n(45),p=l(5),h=l(6),d=0,v=function(t){return t._l||(t._l=new y)},y=function(){this.a=[]},g=function(t,e){return p(t.a,function(t){return t[0]===e})};y.prototype={get:function(t){var e=g(this,t);if(e)return e[1]},has:function(t){return!!g(this,t)},set:function(t,e){var n=g(this,t);n?n[1]=e:this.a.push([t,e])},delete:function(t){var e=h(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,i){var l=t(function(t,r){s(t,l,e,"_i"),t._t=e,t._i=d++,t._l=void 0,void 0!=r&&u(r,n,t[i],t)});return r(l.prototype,{delete:function(t){if(!a(t))return!1;var n=o(t);return!0===n?v(f(this,e)).delete(t):n&&c(n,this._i)&&delete n[this._i]},has:function(t){if(!a(t))return!1;var n=o(t);return!0===n?v(f(this,e)).has(t):n&&c(n,this._i)}}),l},def:function(t,e,n){var r=o(i(e),!0);return!0===r?v(t).set(e,n):r[t._i]=n,t},ufstore:v}},function(t,e,n){"use strict";var r,o=n(22)(0),i=n(12),a=n(32),s=n(151),u=n(131),l=n(4),c=n(3),f=n(45),p=a.getWeak,h=Object.isExtensible,d=u.ufstore,v={},y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},g={get:function(t){if(l(t)){var e=p(t);return!0===e?d(f(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return u.def(f(this,"WeakMap"),t,e)}},m=t.exports=n(58)("WeakMap",y,g,u,!0,!0);c(function(){return 7!=(new m).set((Object.freeze||Object)(v),7).get(v)})&&(s((r=u.getConstructor(y,"WeakMap")).prototype,g),a.NEED=!0,o(["delete","has","get","set"],function(t){var e=m.prototype,n=e[t];i(e,t,function(e,o){if(l(e)&&!h(e)){this._f||(this._f=new r);var i=this._f[t](e,o);return"set"==t?this:i}return n.call(this,e,o)})}))},function(t,e,n){"use strict";var r=n(134),o=n(45);t.exports=n(58)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"Set"),t=0===t?0:t,t)}},r)},function(t,e,n){"use strict";var r=n(7).f,o=n(38),i=n(33),a=n(21),s=n(35),u=n(34),l=n(90),c=n(139),f=n(36),p=n(8),h=n(32).fastKey,d=n(45),v=p?"_s":"size",y=function(t,e){var n,r=h(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};t.exports={getConstructor:function(t,e,n,l){var c=t(function(t,r){s(t,c,e,"_i"),t._t=e,t._i=o(null),t._f=void 0,t._l=void 0,t[v]=0,void 0!=r&&u(r,n,t[l],t)});return i(c.prototype,{clear:function(){for(var t=d(this,e),n=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var n=d(this,e),r=y(n,t);if(r){var o=r.n,i=r.p;delete n._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==r&&(n._f=o),n._l==r&&(n._l=i),n[v]--}return!!r},forEach:function(t){d(this,e);for(var n,r=a(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!y(d(this,e),t)}}),p&&r(c.prototype,"size",{get:function(){return d(this,e)[v]}}),c},def:function(t,e,n){var r,o,i=y(t,e);return i?i.v=n:(t._l=i={i:o=h(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=i),r&&(r.n=i),t[v]++,"F"!==o&&(t._i[o]=i)),t},getEntry:y,setStrong:function(t,e,n){l(t,e,function(t,n){this._t=d(t,e),this._k=n,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?c(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,c(1))},n?"entries":"values",!n,!0),f(e)}}},function(t,e,n){"use strict";var r=n(134),o=n(45);t.exports=n(58)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=r.getEntry(o(this,"Map"),t);return e&&e.v},set:function(t,e){return r.def(o(this,"Map"),0===t?0:t,e)}},r,!0)},function(t,e,n){var r=n(1),o=n(4),i=n(78);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){n(8)&&"g"!=/./g.flags&&n(7).f(RegExp.prototype,"flags",{configurable:!0,get:n(61)})},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){"use strict";var r=n(9),o=n(39),i=n(6);t.exports=[].copyWithin||function(t,e){var n=r(this),a=i(n.length),s=o(t,a),u=o(e,a),l=arguments.length>2?arguments[2]:void 0,c=Math.min((void 0===l?a:o(l,a))-u,a-s),f=1;for(u<s&&s<u+c&&(f=-1,u+=c-1,s+=c-1);c-- >0;)u in n?n[s]=n[u]:delete n[s],s+=f,u+=f;return n}},function(t,e,n){var r=n(10),o=n(9),i=n(53),a=n(6);t.exports=function(t,e,n,s,u){r(e);var l=o(t),c=i(l),f=a(l.length),p=u?f-1:0,h=u?-1:1;if(n<2)for(;;){if(p in c){s=c[p],p+=h;break}if(p+=h,u?p<0:f<=p)throw TypeError("Reduce of empty array with no initial value")}for(;u?p>=0:f>p;p+=h)p in c&&(s=e(s,c[p],p,l));return s}},function(t,e,n){var r=n(1);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},function(t,e,n){var r=n(93),o=Math.pow,i=o(2,-52),a=o(2,-23),s=o(2,127)*(2-a),u=o(2,-126);t.exports=Math.fround||function(t){var e,n,o=Math.abs(t),l=r(t);return o<u?l*(o/u/a+1/i-1/i)*u*a:(n=(e=(1+a/i)*o)-(e-o))>s||n!=n?l*(1/0):l*n}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,n){var r=n(4),o=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&o(t)===t}},function(t,e,n){var r=n(20);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(e);return+t}},function(t,e,n){var r=n(2).parseFloat,o=n(47).trim;t.exports=1/r(n(96)+"-0")!=-1/0?function(t){var e=o(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},function(t,e,n){var r=n(2).parseInt,o=n(47).trim,i=n(96),a=/^[-+]?0[xX]/;t.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(t,e){var n=o(String(t),3);return r(n,e>>>0||(a.test(n)?16:10))}:r},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){"use strict";var r=n(10),o=n(4),i=n(149),a=[].slice,s={};t.exports=Function.bind||function(t){var e=r(this),n=a.call(arguments,1),u=function(){var r=n.concat(a.call(arguments));return this instanceof u?function(t,e,n){if(!(e in s)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";s[e]=Function("F,a","return new F("+r.join(",")+")")}return s[e](t,n)}(e,r.length,r):i(e,r,t)};return o(e.prototype)&&(u.prototype=e.prototype),u}},function(t,e,n){"use strict";var r=n(40),o=n(65),i=n(52),a=n(9),s=n(53),u=Object.assign;t.exports=!u||n(3)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=u({},t)[n]||Object.keys(u({},e)).join("")!=r})?function(t,e){for(var n=a(t),u=arguments.length,l=1,c=o.f,f=i.f;u>l;)for(var p,h=s(arguments[l++]),d=c?r(h).concat(c(h)):r(h),v=d.length,y=0;v>y;)f.call(h,p=d[y++])&&(n[p]=h[p]);return n}:u},function(t,e,n){var r=n(18),o=n(37).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return a.slice()}}(t):o(r(t))}},function(t,e,n){var r=n(7),o=n(1),i=n(40);t.exports=n(8)?Object.defineProperties:function(t,e){o(t);for(var n,a=i(e),s=a.length,u=0;s>u;)r.f(t,n=a[u++],e[n]);return t}},function(t,e,n){var r=n(14),o=n(18),i=n(66)(!1),a=n(100)("IE_PROTO");t.exports=function(t,e){var n,s=o(t),u=0,l=[];for(n in s)n!=a&&r(s,n)&&l.push(n);for(;e.length>u;)r(s,n=e[u++])&&(~i(l,n)||l.push(n));return l}},function(t,e,n){e.f=n(5)},function(t,e,n){t.exports=!n(8)&&!n(3)(function(){return 7!=Object.defineProperty(n(102)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){(t.exports=n(50)(!1)).push([t.i,"",""])},function(t,e,n){var r=n(157);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(49).default)("59e71145",r,!0,{})},function(t,e,n){"use strict";n.r(e);var r=n(68),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);var a=n(104),s=n(28);var u=function(t){n(158)},l=Object(s.a)(o.a,a.a,a.b,!1,u,null,null);e.default=l.exports},function(t,e,n){var r=n(114);t.exports=function(t){return null==t?"":r(t)}},function(t,e,n){var r=n(109),o=n(112),i=NaN,a=/^\s+|\s+$/g,s=/^[-+]0x[0-9a-f]+$/i,u=/^0b[01]+$/i,l=/^0o[0-7]+$/i,c=parseInt;t.exports=function(t){if("number"==typeof t)return t;if(o(t))return i;if(r(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=r(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(a,"");var n=u.test(t);return n||l.test(t)?c(t.slice(2),n?2:8):s.test(t)?i:+t}},function(t,e,n){var r=n(161),o=1/0,i=1.7976931348623157e308;t.exports=function(t){return t?(t=r(t))===o||t===-o?(t<0?-1:1)*i:t==t?t:0:0===t?t:0}},function(t,e,n){var r=n(162);t.exports=function(t){var e=r(t),n=e%1;return e==e?n?e-n:e:0}},function(t,e){var n="[\\ud800-\\udfff]",r="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",o="\\ud83c[\\udffb-\\udfff]",i="[^\\ud800-\\udfff]",a="(?:\\ud83c[\\udde6-\\uddff]){2}",s="[\\ud800-\\udbff][\\udc00-\\udfff]",u="(?:"+r+"|"+o+")"+"?",l="[\\ufe0e\\ufe0f]?"+u+("(?:\\u200d(?:"+[i,a,s].join("|")+")[\\ufe0e\\ufe0f]?"+u+")*"),c="(?:"+[i+r+"?",r,a,s,n].join("|")+")",f=RegExp(o+"(?="+o+")|"+c+l,"g");t.exports=function(t){return t.match(f)||[]}},function(t,e){t.exports=function(t){return t.split("")}},function(t,e,n){var r=n(165),o=n(73),i=n(164);t.exports=function(t){return o(t)?i(t):r(t)}},function(t,e){var n="[\\ud800-\\udfff]",r="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",o="\\ud83c[\\udffb-\\udfff]",i="[^\\ud800-\\udfff]",a="(?:\\ud83c[\\udde6-\\uddff]){2}",s="[\\ud800-\\udbff][\\udc00-\\udfff]",u="(?:"+r+"|"+o+")"+"?",l="[\\ufe0e\\ufe0f]?"+u+("(?:\\u200d(?:"+[i,a,s].join("|")+")[\\ufe0e\\ufe0f]?"+u+")*"),c="(?:"+[i+r+"?",r,a,s,n].join("|")+")",f=RegExp(o+"(?="+o+")|"+c+l,"g");t.exports=function(t){for(var e=f.lastIndex=0;f.test(t);)++e;return e}},function(t,e){t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},function(t,e,n){var r=n(168)("length");t.exports=r},function(t,e,n){var r=n(169),o=n(73),i=n(167);t.exports=function(t){return o(t)?i(t):r(t)}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){(function(t){var r=n(113),o="object"==typeof e&&e&&!e.nodeType&&e,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,a=i&&i.exports===o&&r.process,s=function(){try{return a&&a.binding&&a.binding("util")}catch(t){}}();t.exports=s}).call(this,n(171)(t))},function(t,e){t.exports=function(t){return function(e){return t(e)}}},function(t,e,n){var r=n(111),o=n(110),i="[object RegExp]";t.exports=function(t){return o(t)&&r(t)==i}},function(t,e,n){var r=n(174),o=n(173),i=n(172),a=i&&i.isRegExp,s=a?o(a):r;t.exports=s},function(t,e){t.exports=function(t,e,n){var r=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(n=n>o?o:n)<0&&(n+=o),o=e>n?0:n-e>>>0,e>>>=0;for(var i=Array(o);++r<o;)i[r]=t[r+e];return i}},function(t,e,n){var r=n(176);t.exports=function(t,e,n){var o=t.length;return n=void 0===n?o:n,!e&&n>=o?t:r(t,e,n)}},function(t,e){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,e,n){var r=n(74),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,s=r?r.toStringTag:void 0;t.exports=function(t){var e=i.call(t,s),n=t[s];try{t[s]=void 0;var r=!0}catch(t){}var o=a.call(t);return r&&(e?t[s]=n:delete t[s]),o}},function(t,e){var n=Array.isArray;t.exports=n},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,o=Array(r);++n<r;)o[n]=e(t[n],n,t);return o}},function(t,e,n){var r=n(113),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();t.exports=i},function(t,e,n){var r=n(114),o=n(177),i=n(73),a=n(109),s=n(175),u=n(170),l=n(166),c=n(163),f=n(160),p=30,h="...",d=/\w*$/;t.exports=function(t,e){var n=p,v=h;if(a(e)){var y="separator"in e?e.separator:y;n="length"in e?c(e.length):n,v="omission"in e?r(e.omission):v}var g=(t=f(t)).length;if(i(t)){var m=l(t);g=m.length}if(n>=g)return t;var b=n-u(v);if(b<1)return v;var _=m?o(m,0,b).join(""):t.slice(0,b);if(void 0===y)return _+v;if(m&&(b+=_.length-b),s(y)){if(t.slice(b).search(y)){var w,x=_;for(y.global||(y=RegExp(y.source,f(d.exec(y))+"g")),y.lastIndex=0;w=y.exec(x);)var O=w.index;_=_.slice(0,void 0===O?b:O)}}else if(t.indexOf(r(y),b)!=b){var E=_.lastIndexOf(y);E>-1&&(_=_.slice(0,E))}return _+v}},function(t,e,n){(t.exports=n(50)(!1)).push([t.i,".ql-embed-source-image{height:100%;display:flex;align-items:center;justify-content:center}.ql-embed-source-image img{max-height:100%;width:auto;object-fit:contain;justify-self:right}.ql-embed-source-image span{background-color:#fff;min-height:100px;width:100%;display:flex;align-items:center;justify-content:center;padding:10px}.ql-embed-source-image span svg{width:60px;height:auto;color:#eee}",""])},function(t,e,n){var r=n(184);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(49).default)("1bea7281",r,!0,{})},function(t,e,n){"use strict";n.r(e);var r=n(69),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);var a=n(106),s=n(28);var u=function(t){n(185)},l=Object(s.a)(o.a,a.a,a.b,!1,u,null,null);e.default=l.exports},function(t,e,n){(t.exports=n(50)(!1)).push([t.i,".ql-embed-source-icon{margin-right:3px;display:inline-block;width:16px;height:16px}.ql-embed-source-icon img{height:100%;width:100%}.ql-embed-source-icon span{height:100%;width:100%;display:inline-flex;align-items:center;justify-content:center;background-color:#999;border-radius:50%;color:#fff}.ql-embed-source-icon span svg{width:5px;height:auto}",""])},function(t,e,n){var r=n(187);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(49).default)("0b4b9f1e",r,!0,{})},function(t,e,n){"use strict";n.r(e);var r=n(70),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);var a=n(107),s=n(28);var u=function(t){n(188)},l=Object(s.a)(o.a,a.a,a.b,!1,u,null,null);e.default=l.exports},function(t,e,n){(t.exports=n(50)(!1)).push([t.i,".ql-link-embed .ql-embed-link,.ql-link-embed .ql-embed-link:hover,.ql-link-embed .ql-embed-link:link{color:gray;text-decoration:none}.ql-link-embed .ql-embed-link{display:flex;position:relative;background-color:#fbfafa;border:1px solid #eeeded;font-size:.9em;max-height:200px}.ql-link-embed .ql-embed-content{width:70%;flex:0 0 70%;padding:15px;display:flex;flex-direction:column}.ql-link-embed .ql-embed-description{flex:1 1 0}.ql-link-embed .ql-embed-source{margin-top:15px;display:flex;align-items:center}.ql-link-embed .ql-embed-image{width:30%;flex:0 0 30%;padding:15px;background-color:#ccc}",""])},function(t,e,n){var r=n(190);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(49).default)("446e60be",r,!0,{})},function(t,e,n){"use strict";n.r(e);var r=n(71),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);var a=n(105),s=n(28);var u=function(t){n(191)},l=Object(s.a)(o.a,a.a,a.b,!1,u,null,null);e.default=l.exports},function(t,e,n){(t.exports=n(50)(!1)).push([t.i,"",""])},function(t,e,n){var r=n(193);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(49).default)("9322a6fe",r,!0,{})},function(t,e,n){"use strict";n.r(e);var r=n(72),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);var a=n(103),s=n(28);var u=function(t){n(194)},l=Object(s.a)(o.a,a.a,a.b,!1,u,null,null);e.default=l.exports},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,o,i,a,s,u=1,l={},c=!1,f=t.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(t);p=p&&p.setTimeout?p:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){d(t)})}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((i=new MessageChannel).port1.onmessage=function(t){d(t.data)},r=function(t){i.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(o=f.documentElement,r=function(t){var e=f.createElement("script");e.onreadystatechange=function(){d(t),e.onreadystatechange=null,o.removeChild(e),e=null},o.appendChild(e)}):r=function(t){setTimeout(d,0,t)}:(a="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(a)&&d(+e.data.slice(a.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),r=function(e){t.postMessage(a+e,"*")}),p.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var o={callback:t,args:e};return l[u]=o,r(u),u++},p.clearImmediate=h}function h(t){delete l[t]}function d(t){if(c)setTimeout(d,0,t);else{var e=l[t];if(e){c=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{h(t),c=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(44),n(119))},function(t,e,n){(function(t){var r=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(r.call(setTimeout,window,arguments),clearTimeout)},e.setInterval=function(){return new o(r.call(setInterval,window,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(window,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(196),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(44))},function(t,e,n){"use strict";n.r(e),function(t,n){
/*!
 * Vue.js v2.5.16
 * (c) 2014-2018 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({});function o(t){return void 0===t||null===t}function i(t){return void 0!==t&&null!==t}function a(t){return!0===t}function s(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function u(t){return null!==t&&"object"==typeof t}var l=Object.prototype.toString;function c(t){return"[object Object]"===l.call(t)}function f(t){return"[object RegExp]"===l.call(t)}function p(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function h(t){return null==t?"":"object"==typeof t?JSON.stringify(t,null,2):String(t)}function d(t){var e=parseFloat(t);return isNaN(e)?t:e}function v(t,e){for(var n=Object.create(null),r=t.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}v("slot,component",!0);var y=v("key,ref,slot,slot-scope,is");function g(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var m=Object.prototype.hasOwnProperty;function b(t,e){return m.call(t,e)}function _(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var w=/-(\w)/g,x=_(function(t){return t.replace(w,function(t,e){return e?e.toUpperCase():""})}),O=_(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}),E=/\B([A-Z])/g,A=_(function(t){return t.replace(E,"-$1").toLowerCase()});var k=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function N(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function S(t,e){for(var n in e)t[n]=e[n];return t}function j(t){for(var e={},n=0;n<t.length;n++)t[n]&&S(e,t[n]);return e}function T(t,e,n){}var P=function(t,e,n){return!1},C=function(t){return t};function L(t,e){if(t===e)return!0;var n=u(t),r=u(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var o=Array.isArray(t),i=Array.isArray(e);if(o&&i)return t.length===e.length&&t.every(function(t,n){return L(t,e[n])});if(o||i)return!1;var a=Object.keys(t),s=Object.keys(e);return a.length===s.length&&a.every(function(n){return L(t[n],e[n])})}catch(t){return!1}}function q(t,e){for(var n=0;n<t.length;n++)if(L(t[n],e))return n;return-1}function M(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var I="data-server-rendered",R=["component","directive","filter"],B=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured"],D={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:P,isReservedAttr:P,isUnknownElement:P,getTagNamespace:T,parsePlatformTagName:C,mustUseProp:P,_lifecycleHooks:B};function F(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var U=/[^\w.$]/;var $,H="__proto__"in{},z="undefined"!=typeof window,K="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,V=K&&WXEnvironment.platform.toLowerCase(),Y=z&&window.navigator.userAgent.toLowerCase(),W=Y&&/msie|trident/.test(Y),G=Y&&Y.indexOf("msie 9.0")>0,Z=Y&&Y.indexOf("edge/")>0,X=(Y&&Y.indexOf("android"),Y&&/iphone|ipad|ipod|ios/.test(Y)||"ios"===V),J=(Y&&/chrome\/\d+/.test(Y),{}.watch),Q=!1;if(z)try{var tt={};Object.defineProperty(tt,"passive",{get:function(){Q=!0}}),window.addEventListener("test-passive",null,tt)}catch(t){}var et=function(){return void 0===$&&($=!z&&!K&&void 0!==t&&"server"===t.process.env.VUE_ENV),$},nt=z&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function rt(t){return"function"==typeof t&&/native code/.test(t.toString())}var ot,it="undefined"!=typeof Symbol&&rt(Symbol)&&"undefined"!=typeof Reflect&&rt(Reflect.ownKeys);ot="undefined"!=typeof Set&&rt(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var at=T,st=0,ut=function(){this.id=st++,this.subs=[]};ut.prototype.addSub=function(t){this.subs.push(t)},ut.prototype.removeSub=function(t){g(this.subs,t)},ut.prototype.depend=function(){ut.target&&ut.target.addDep(this)},ut.prototype.notify=function(){for(var t=this.subs.slice(),e=0,n=t.length;e<n;e++)t[e].update()},ut.target=null;var lt=[];function ct(t){ut.target&&lt.push(ut.target),ut.target=t}function ft(){ut.target=lt.pop()}var pt=function(t,e,n,r,o,i,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},ht={child:{configurable:!0}};ht.child.get=function(){return this.componentInstance},Object.defineProperties(pt.prototype,ht);var dt=function(t){void 0===t&&(t="");var e=new pt;return e.text=t,e.isComment=!0,e};function vt(t){return new pt(void 0,void 0,void 0,String(t))}function yt(t){var e=new pt(t.tag,t.data,t.children,t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.isCloned=!0,e}var gt=Array.prototype,mt=Object.create(gt);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(t){var e=gt[t];F(mt,t,function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,i=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&a.observeArray(o),a.dep.notify(),i})});var bt=Object.getOwnPropertyNames(mt),_t=!0;function wt(t){_t=t}var xt=function(t){(this.value=t,this.dep=new ut,this.vmCount=0,F(t,"__ob__",this),Array.isArray(t))?((H?Ot:Et)(t,mt,bt),this.observeArray(t)):this.walk(t)};function Ot(t,e,n){t.__proto__=e}function Et(t,e,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];F(t,i,e[i])}}function At(t,e){var n;if(u(t)&&!(t instanceof pt))return b(t,"__ob__")&&t.__ob__ instanceof xt?n=t.__ob__:_t&&!et()&&(Array.isArray(t)||c(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new xt(t)),e&&n&&n.vmCount++,n}function kt(t,e,n,r,o){var i=new ut,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get;s||2!==arguments.length||(n=t[e]);var u=a&&a.set,l=!o&&At(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return ut.target&&(i.depend(),l&&(l.dep.depend(),Array.isArray(e)&&function t(e){for(var n=void 0,r=0,o=e.length;r<o;r++)(n=e[r])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&t(n)}(e))),e},set:function(e){var r=s?s.call(t):n;e===r||e!=e&&r!=r||(u?u.call(t,e):n=e,l=!o&&At(e),i.notify())}})}}function Nt(t,e,n){if(Array.isArray(t)&&p(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?(kt(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function St(t,e){if(Array.isArray(t)&&p(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||b(t,e)&&(delete t[e],n&&n.dep.notify())}}xt.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)kt(t,e[n])},xt.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)At(t[e])};var jt=D.optionMergeStrategies;function Tt(t,e){if(!e)return t;for(var n,r,o,i=Object.keys(e),a=0;a<i.length;a++)r=t[n=i[a]],o=e[n],b(t,n)?c(r)&&c(o)&&Tt(r,o):Nt(t,n,o);return t}function Pt(t,e,n){return n?function(){var r="function"==typeof e?e.call(n,n):e,o="function"==typeof t?t.call(n,n):t;return r?Tt(r,o):o}:e?t?function(){return Tt("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function Ct(t,e){return e?t?t.concat(e):Array.isArray(e)?e:[e]:t}function Lt(t,e,n,r){var o=Object.create(t||null);return e?S(o,e):o}jt.data=function(t,e,n){return n?Pt(t,e,n):e&&"function"!=typeof e?t:Pt(t,e)},B.forEach(function(t){jt[t]=Ct}),R.forEach(function(t){jt[t+"s"]=Lt}),jt.watch=function(t,e,n,r){if(t===J&&(t=void 0),e===J&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var o={};for(var i in S(o,t),e){var a=o[i],s=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},jt.props=jt.methods=jt.inject=jt.computed=function(t,e,n,r){if(!t)return e;var o=Object.create(null);return S(o,t),e&&S(o,e),o},jt.provide=Pt;var qt=function(t,e){return void 0===e?t:e};function Mt(t,e,n){"function"==typeof e&&(e=e.options),function(t,e){var n=t.props;if(n){var r,o,i={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(o=n[r])&&(i[x(o)]={type:null});else if(c(n))for(var a in n)o=n[a],i[x(a)]=c(o)?o:{type:o};t.props=i}}(e),function(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(c(n))for(var i in n){var a=n[i];r[i]=c(a)?S({from:i},a):{from:a}}}}(e),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}(e);var r=e.extends;if(r&&(t=Mt(t,r,n)),e.mixins)for(var o=0,i=e.mixins.length;o<i;o++)t=Mt(t,e.mixins[o],n);var a,s={};for(a in t)u(a);for(a in e)b(t,a)||u(a);function u(r){var o=jt[r]||qt;s[r]=o(t[r],e[r],n,r)}return s}function It(t,e,n,r){if("string"==typeof n){var o=t[e];if(b(o,n))return o[n];var i=x(n);if(b(o,i))return o[i];var a=O(i);return b(o,a)?o[a]:o[n]||o[i]||o[a]}}function Rt(t,e,n,r){var o=e[t],i=!b(n,t),a=n[t],s=Ft(Boolean,o.type);if(s>-1)if(i&&!b(o,"default"))a=!1;else if(""===a||a===A(t)){var u=Ft(String,o.type);(u<0||s<u)&&(a=!0)}if(void 0===a){a=function(t,e,n){if(!b(e,"default"))return;var r=e.default;0;if(t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n])return t._props[n];return"function"==typeof r&&"Function"!==Bt(e.type)?r.call(t):r}(r,o,t);var l=_t;wt(!0),At(a),wt(l)}return a}function Bt(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function Dt(t,e){return Bt(t)===Bt(e)}function Ft(t,e){if(!Array.isArray(e))return Dt(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Dt(e[n],t))return n;return-1}function Ut(t,e,n){if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(r,t,e,n))return}catch(t){$t(t,r,"errorCaptured hook")}}$t(t,e,n)}function $t(t,e,n){if(D.errorHandler)try{return D.errorHandler.call(null,t,e,n)}catch(t){Ht(t,null,"config.errorHandler")}Ht(t,e,n)}function Ht(t,e,n){if(!z&&!K||"undefined"==typeof console)throw t;console.error(t)}var zt,Kt,Vt=[],Yt=!1;function Wt(){Yt=!1;var t=Vt.slice(0);Vt.length=0;for(var e=0;e<t.length;e++)t[e]()}var Gt=!1;if(void 0!==n&&rt(n))Kt=function(){n(Wt)};else if("undefined"==typeof MessageChannel||!rt(MessageChannel)&&"[object MessageChannelConstructor]"!==MessageChannel.toString())Kt=function(){setTimeout(Wt,0)};else{var Zt=new MessageChannel,Xt=Zt.port2;Zt.port1.onmessage=Wt,Kt=function(){Xt.postMessage(1)}}if("undefined"!=typeof Promise&&rt(Promise)){var Jt=Promise.resolve();zt=function(){Jt.then(Wt),X&&setTimeout(T)}}else zt=Kt;function Qt(t,e){var n;if(Vt.push(function(){if(t)try{t.call(e)}catch(t){Ut(t,e,"nextTick")}else n&&n(e)}),Yt||(Yt=!0,Gt?Kt():zt()),!t&&"undefined"!=typeof Promise)return new Promise(function(t){n=t})}var te=new ot;function ee(t){!function t(e,n){var r,o;var i=Array.isArray(e);if(!i&&!u(e)||Object.isFrozen(e)||e instanceof pt)return;if(e.__ob__){var a=e.__ob__.dep.id;if(n.has(a))return;n.add(a)}if(i)for(r=e.length;r--;)t(e[r],n);else for(o=Object.keys(e),r=o.length;r--;)t(e[o[r]],n)}(t,te),te.clear()}var ne,re=_(function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}});function oe(t){function e(){var t=arguments,n=e.fns;if(!Array.isArray(n))return n.apply(null,arguments);for(var r=n.slice(),o=0;o<r.length;o++)r[o].apply(null,t)}return e.fns=t,e}function ie(t,e,n,r,i){var a,s,u,l;for(a in t)s=t[a],u=e[a],l=re(a),o(s)||(o(u)?(o(s.fns)&&(s=t[a]=oe(s)),n(l.name,s,l.once,l.capture,l.passive,l.params)):s!==u&&(u.fns=s,t[a]=u));for(a in e)o(t[a])&&r((l=re(a)).name,e[a],l.capture)}function ae(t,e,n){var r;t instanceof pt&&(t=t.data.hook||(t.data.hook={}));var s=t[e];function u(){n.apply(this,arguments),g(r.fns,u)}o(s)?r=oe([u]):i(s.fns)&&a(s.merged)?(r=s).fns.push(u):r=oe([s,u]),r.merged=!0,t[e]=r}function se(t,e,n,r,o){if(i(e)){if(b(e,n))return t[n]=e[n],o||delete e[n],!0;if(b(e,r))return t[n]=e[r],o||delete e[r],!0}return!1}function ue(t){return s(t)?[vt(t)]:Array.isArray(t)?function t(e,n){var r=[];var u,l,c,f;for(u=0;u<e.length;u++)o(l=e[u])||"boolean"==typeof l||(c=r.length-1,f=r[c],Array.isArray(l)?l.length>0&&(le((l=t(l,(n||"")+"_"+u))[0])&&le(f)&&(r[c]=vt(f.text+l[0].text),l.shift()),r.push.apply(r,l)):s(l)?le(f)?r[c]=vt(f.text+l):""!==l&&r.push(vt(l)):le(l)&&le(f)?r[c]=vt(f.text+l.text):(a(e._isVList)&&i(l.tag)&&o(l.key)&&i(n)&&(l.key="__vlist"+n+"_"+u+"__"),r.push(l)));return r}(t):void 0}function le(t){return i(t)&&i(t.text)&&!1===t.isComment}function ce(t,e){return(t.__esModule||it&&"Module"===t[Symbol.toStringTag])&&(t=t.default),u(t)?e.extend(t):t}function fe(t){return t.isComment&&t.asyncFactory}function pe(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(i(n)&&(i(n.componentOptions)||fe(n)))return n}}function he(t,e,n){n?ne.$once(t,e):ne.$on(t,e)}function de(t,e){ne.$off(t,e)}function ve(t,e,n){ne=t,ie(e,n||{},he,de),ne=void 0}function ye(t,e){var n={};if(!t)return n;for(var r=0,o=t.length;r<o;r++){var i=t[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var s=a.slot,u=n[s]||(n[s]=[]);"template"===i.tag?u.push.apply(u,i.children||[]):u.push(i)}}for(var l in n)n[l].every(ge)&&delete n[l];return n}function ge(t){return t.isComment&&!t.asyncFactory||" "===t.text}function me(t,e){e=e||{};for(var n=0;n<t.length;n++)Array.isArray(t[n])?me(t[n],e):e[t[n].key]=t[n].fn;return e}var be=null;function _e(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function we(t,e){if(e){if(t._directInactive=!1,_e(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)we(t.$children[n]);xe(t,"activated")}}function xe(t,e){ct();var n=t.$options[e];if(n)for(var r=0,o=n.length;r<o;r++)try{n[r].call(t)}catch(n){Ut(n,t,e+" hook")}t._hasHookEvent&&t.$emit("hook:"+e),ft()}var Oe=[],Ee=[],Ae={},ke=!1,Ne=!1,Se=0;function je(){var t,e;for(Ne=!0,Oe.sort(function(t,e){return t.id-e.id}),Se=0;Se<Oe.length;Se++)e=(t=Oe[Se]).id,Ae[e]=null,t.run();var n=Ee.slice(),r=Oe.slice();Se=Oe.length=Ee.length=0,Ae={},ke=Ne=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,we(t[e],!0)}(n),function(t){var e=t.length;for(;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&xe(r,"updated")}}(r),nt&&D.devtools&&nt.emit("flush")}var Te=0,Pe=function(t,e,n,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Te,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ot,this.newDepIds=new ot,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(t){if(!U.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=function(){})),this.value=this.lazy?void 0:this.get()};Pe.prototype.get=function(){var t;ct(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;Ut(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ee(t),ft(),this.cleanupDeps()}return t},Pe.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},Pe.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Pe.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==Ae[e]){if(Ae[e]=!0,Ne){for(var n=Oe.length-1;n>Se&&Oe[n].id>t.id;)n--;Oe.splice(n+1,0,t)}else Oe.push(t);ke||(ke=!0,Qt(je))}}(this)},Pe.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||u(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){Ut(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},Pe.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Pe.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},Pe.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||g(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var Ce={enumerable:!0,configurable:!0,get:T,set:T};function Le(t,e,n){Ce.get=function(){return this[e][n]},Ce.set=function(t){this[e][n]=t},Object.defineProperty(t,n,Ce)}function qe(t){t._watchers=[];var e=t.$options;e.props&&function(t,e){var n=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[];t.$parent&&wt(!1);var i=function(i){o.push(i);var a=Rt(i,e,n,t);kt(r,i,a),i in t||Le(t,"_props",i)};for(var a in e)i(a);wt(!0)}(t,e.props),e.methods&&function(t,e){t.$options.props;for(var n in e)t[n]=null==e[n]?T:k(e[n],t)}(t,e.methods),e.data?function(t){var e=t.$options.data;c(e=t._data="function"==typeof e?function(t,e){ct();try{return t.call(e,e)}catch(t){return Ut(t,e,"data()"),{}}finally{ft()}}(e,t):e||{})||(e={});var n=Object.keys(e),r=t.$options.props,o=(t.$options.methods,n.length);for(;o--;){var i=n[o];0,r&&b(r,i)||(void 0,36!==(a=(i+"").charCodeAt(0))&&95!==a&&Le(t,"_data",i))}var a;At(e,!0)}(t):At(t._data={},!0),e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),r=et();for(var o in e){var i=e[o],a="function"==typeof i?i:i.get;0,r||(n[o]=new Pe(t,a||T,T,Me)),o in t||Ie(t,o,i)}}(t,e.computed),e.watch&&e.watch!==J&&function(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)Be(t,n,r[o]);else Be(t,n,r)}}(t,e.watch)}var Me={lazy:!0};function Ie(t,e,n){var r=!et();"function"==typeof n?(Ce.get=r?Re(e):n,Ce.set=T):(Ce.get=n.get?r&&!1!==n.cache?Re(e):n.get:T,Ce.set=n.set?n.set:T),Object.defineProperty(t,e,Ce)}function Re(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),ut.target&&e.depend(),e.value}}function Be(t,e,n,r){return c(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}function De(t,e){if(t){for(var n=Object.create(null),r=it?Reflect.ownKeys(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}):Object.keys(t),o=0;o<r.length;o++){for(var i=r[o],a=t[i].from,s=e;s;){if(s._provided&&b(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s)if("default"in t[i]){var u=t[i].default;n[i]="function"==typeof u?u.call(e):u}else 0}return n}}function Fe(t,e){var n,r,o,a,s;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),r=0,o=t.length;r<o;r++)n[r]=e(t[r],r);else if("number"==typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(u(t))for(a=Object.keys(t),n=new Array(a.length),r=0,o=a.length;r<o;r++)s=a[r],n[r]=e(t[s],s,r);return i(n)&&(n._isVList=!0),n}function Ue(t,e,n,r){var o,i=this.$scopedSlots[t];if(i)n=n||{},r&&(n=S(S({},r),n)),o=i(n)||e;else{var a=this.$slots[t];a&&(a._rendered=!0),o=a||e}var s=n&&n.slot;return s?this.$createElement("template",{slot:s},o):o}function $e(t){return It(this.$options,"filters",t)||C}function He(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function ze(t,e,n,r,o){var i=D.keyCodes[e]||n;return o&&r&&!D.keyCodes[e]?He(o,r):i?He(i,t):r?A(r)!==e:void 0}function Ke(t,e,n,r,o){if(n)if(u(n)){var i;Array.isArray(n)&&(n=j(n));var a=function(a){if("class"===a||"style"===a||y(a))i=t;else{var s=t.attrs&&t.attrs.type;i=r||D.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}a in i||(i[a]=n[a],o&&((t.on||(t.on={}))["update:"+a]=function(t){n[a]=t}))};for(var s in n)a(s)}else;return t}function Ve(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e?r:(We(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r)}function Ye(t,e,n){return We(t,"__once__"+e+(n?"_"+n:""),!0),t}function We(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&Ge(t[r],e+"_"+r,n);else Ge(t,e,n)}function Ge(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function Ze(t,e){if(e)if(c(e)){var n=t.on=t.on?S({},t.on):{};for(var r in e){var o=n[r],i=e[r];n[r]=o?[].concat(o,i):i}}else;return t}function Xe(t){t._o=Ye,t._n=d,t._s=h,t._l=Fe,t._t=Ue,t._q=L,t._i=q,t._m=Ve,t._f=$e,t._k=ze,t._b=Ke,t._v=vt,t._e=dt,t._u=me,t._g=Ze}function Je(t,e,n,o,i){var s,u=i.options;b(o,"_uid")?(s=Object.create(o))._original=o:(s=o,o=o._original);var l=a(u._compiled),c=!l;this.data=t,this.props=e,this.children=n,this.parent=o,this.listeners=t.on||r,this.injections=De(u.inject,o),this.slots=function(){return ye(n,o)},l&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=t.scopedSlots||r),u._scopeId?this._c=function(t,e,n,r){var i=sn(s,t,e,n,r,c);return i&&!Array.isArray(i)&&(i.fnScopeId=u._scopeId,i.fnContext=o),i}:this._c=function(t,e,n,r){return sn(s,t,e,n,r,c)}}function Qe(t,e,n,r){var o=yt(t);return o.fnContext=n,o.fnOptions=r,e.slot&&((o.data||(o.data={})).slot=e.slot),o}function tn(t,e){for(var n in e)t[x(n)]=e[n]}Xe(Je.prototype);var en={init:function(t,e,n,r){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var o=t;en.prepatch(o,o)}else{(t.componentInstance=function(t,e,n,r){var o={_isComponent:!0,parent:e,_parentVnode:t,_parentElm:n||null,_refElm:r||null},a=t.data.inlineTemplate;i(a)&&(o.render=a.render,o.staticRenderFns=a.staticRenderFns);return new t.componentOptions.Ctor(o)}(t,be,n,r)).$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions;!function(t,e,n,o,i){var a=!!(i||t.$options._renderChildren||o.data.scopedSlots||t.$scopedSlots!==r);if(t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o),t.$options._renderChildren=i,t.$attrs=o.data.attrs||r,t.$listeners=n||r,e&&t.$options.props){wt(!1);for(var s=t._props,u=t.$options._propKeys||[],l=0;l<u.length;l++){var c=u[l],f=t.$options.props;s[c]=Rt(c,f,e,t)}wt(!0),t.$options.propsData=e}n=n||r;var p=t.$options._parentListeners;t.$options._parentListeners=n,ve(t,n,p),a&&(t.$slots=ye(i,o.context),t.$forceUpdate())}(e.componentInstance=t.componentInstance,n.propsData,n.listeners,e,n.children)},insert:function(t){var e,n=t.context,r=t.componentInstance;r._isMounted||(r._isMounted=!0,xe(r,"mounted")),t.data.keepAlive&&(n._isMounted?((e=r)._inactive=!1,Ee.push(e)):we(r,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?function t(e,n){if(!(n&&(e._directInactive=!0,_e(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)t(e.$children[r]);xe(e,"deactivated")}}(e,!0):e.$destroy())}},nn=Object.keys(en);function rn(t,e,n,s,l){if(!o(t)){var c=n.$options._base;if(u(t)&&(t=c.extend(t)),"function"==typeof t){var f;if(o(t.cid)&&void 0===(t=function(t,e,n){if(a(t.error)&&i(t.errorComp))return t.errorComp;if(i(t.resolved))return t.resolved;if(a(t.loading)&&i(t.loadingComp))return t.loadingComp;if(!i(t.contexts)){var r=t.contexts=[n],s=!0,l=function(){for(var t=0,e=r.length;t<e;t++)r[t].$forceUpdate()},c=M(function(n){t.resolved=ce(n,e),s||l()}),f=M(function(e){i(t.errorComp)&&(t.error=!0,l())}),p=t(c,f);return u(p)&&("function"==typeof p.then?o(t.resolved)&&p.then(c,f):i(p.component)&&"function"==typeof p.component.then&&(p.component.then(c,f),i(p.error)&&(t.errorComp=ce(p.error,e)),i(p.loading)&&(t.loadingComp=ce(p.loading,e),0===p.delay?t.loading=!0:setTimeout(function(){o(t.resolved)&&o(t.error)&&(t.loading=!0,l())},p.delay||200)),i(p.timeout)&&setTimeout(function(){o(t.resolved)&&f(null)},p.timeout))),s=!1,t.loading?t.loadingComp:t.resolved}t.contexts.push(n)}(f=t,c,n)))return function(t,e,n,r,o){var i=dt();return i.asyncFactory=t,i.asyncMeta={data:e,context:n,children:r,tag:o},i}(f,e,n,s,l);e=e||{},ln(t),i(e.model)&&function(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.props||(e.props={}))[n]=e.model.value;var o=e.on||(e.on={});i(o[r])?o[r]=[e.model.callback].concat(o[r]):o[r]=e.model.callback}(t.options,e);var p=function(t,e,n){var r=e.options.props;if(!o(r)){var a={},s=t.attrs,u=t.props;if(i(s)||i(u))for(var l in r){var c=A(l);se(a,u,l,c,!0)||se(a,s,l,c,!1)}return a}}(e,t);if(a(t.options.functional))return function(t,e,n,o,a){var s=t.options,u={},l=s.props;if(i(l))for(var c in l)u[c]=Rt(c,l,e||r);else i(n.attrs)&&tn(u,n.attrs),i(n.props)&&tn(u,n.props);var f=new Je(n,u,a,o,t),p=s.render.call(null,f._c,f);if(p instanceof pt)return Qe(p,n,f.parent,s);if(Array.isArray(p)){for(var h=ue(p)||[],d=new Array(h.length),v=0;v<h.length;v++)d[v]=Qe(h[v],n,f.parent,s);return d}}(t,p,e,n,s);var h=e.on;if(e.on=e.nativeOn,a(t.options.abstract)){var d=e.slot;e={},d&&(e.slot=d)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<nn.length;n++){var r=nn[n];e[r]=en[r]}}(e);var v=t.options.name||l;return new pt("vue-component-"+t.cid+(v?"-"+v:""),e,void 0,void 0,void 0,n,{Ctor:t,propsData:p,listeners:h,tag:l,children:s},f)}}}var on=1,an=2;function sn(t,e,n,r,l,c){return(Array.isArray(n)||s(n))&&(l=r,r=n,n=void 0),a(c)&&(l=an),function(t,e,n,r,s){if(i(n)&&i(n.__ob__))return dt();i(n)&&i(n.is)&&(e=n.is);if(!e)return dt();0;Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);s===an?r=ue(r):s===on&&(r=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(r));var l,c;if("string"==typeof e){var f;c=t.$vnode&&t.$vnode.ns||D.getTagNamespace(e),l=D.isReservedTag(e)?new pt(D.parsePlatformTagName(e),n,r,void 0,void 0,t):i(f=It(t.$options,"components",e))?rn(f,n,t,r,e):new pt(e,n,r,void 0,void 0,t)}else l=rn(e,n,t,r);return Array.isArray(l)?l:i(l)?(i(c)&&function t(e,n,r){e.ns=n;"foreignObject"===e.tag&&(n=void 0,r=!0);if(i(e.children))for(var s=0,u=e.children.length;s<u;s++){var l=e.children[s];i(l.tag)&&(o(l.ns)||a(r)&&"svg"!==l.tag)&&t(l,n,r)}}(l,c),i(n)&&function(t){u(t.style)&&ee(t.style);u(t.class)&&ee(t.class)}(n),l):dt()}(t,e,n,r,l)}var un=0;function ln(t){var e=t.options;if(t.super){var n=ln(t.super);if(n!==t.superOptions){t.superOptions=n;var r=function(t){var e,n=t.options,r=t.extendOptions,o=t.sealedOptions;for(var i in n)n[i]!==o[i]&&(e||(e={}),e[i]=cn(n[i],r[i],o[i]));return e}(t);r&&S(t.extendOptions,r),(e=t.options=Mt(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function cn(t,e,n){if(Array.isArray(t)){var r=[];n=Array.isArray(n)?n:[n],e=Array.isArray(e)?e:[e];for(var o=0;o<t.length;o++)(e.indexOf(t[o])>=0||n.indexOf(t[o])<0)&&r.push(t[o]);return r}return t}function fn(t){this._init(t)}function pn(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||n.options.name;var a=function(t){this._init(t)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=e++,a.options=Mt(n.options,t),a.super=n,a.options.props&&function(t){var e=t.options.props;for(var n in e)Le(t.prototype,"_props",n)}(a),a.options.computed&&function(t){var e=t.options.computed;for(var n in e)Ie(t.prototype,n,e[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,R.forEach(function(t){a[t]=n[t]}),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=S({},a.options),o[r]=a,a}}function hn(t){return t&&(t.Ctor.options.name||t.tag)}function dn(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!f(t)&&t.test(e)}function vn(t,e){var n=t.cache,r=t.keys,o=t._vnode;for(var i in n){var a=n[i];if(a){var s=hn(a.componentOptions);s&&!e(s)&&yn(n,i,r,o)}}}function yn(t,e,n,r){var o=t[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[e]=null,g(n,e)}!function(t){t.prototype._init=function(t){var e=this;e._uid=un++,e._isVue=!0,t&&t._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r,n._parentElm=e._parentElm,n._refElm=e._refElm;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(e,t):e.$options=Mt(ln(e.constructor),t||{},e),e._renderProxy=e,e._self=e,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(e),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&ve(t,e)}(e),function(t){t._vnode=null,t._staticTrees=null;var e=t.$options,n=t.$vnode=e._parentVnode,o=n&&n.context;t.$slots=ye(e._renderChildren,o),t.$scopedSlots=r,t._c=function(e,n,r,o){return sn(t,e,n,r,o,!1)},t.$createElement=function(e,n,r,o){return sn(t,e,n,r,o,!0)};var i=n&&n.data;kt(t,"$attrs",i&&i.attrs||r,null,!0),kt(t,"$listeners",e._parentListeners||r,null,!0)}(e),xe(e,"beforeCreate"),function(t){var e=De(t.$options.inject,t);e&&(wt(!1),Object.keys(e).forEach(function(n){kt(t,n,e[n])}),wt(!0))}(e),qe(e),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(e),xe(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(fn),function(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=Nt,t.prototype.$delete=St,t.prototype.$watch=function(t,e,n){if(c(e))return Be(this,t,e,n);(n=n||{}).user=!0;var r=new Pe(this,t,e,n);return n.immediate&&e.call(this,r.value),function(){r.teardown()}}}(fn),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){if(Array.isArray(t))for(var r=0,o=t.length;r<o;r++)this.$on(t[r],n);else(this._events[t]||(this._events[t]=[])).push(n),e.test(t)&&(this._hasHookEvent=!0);return this},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,o=t.length;r<o;r++)this.$off(t[r],e);return n}var i=n._events[t];if(!i)return n;if(!e)return n._events[t]=null,n;if(e)for(var a,s=i.length;s--;)if((a=i[s])===e||a.fn===e){i.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this._events[t];if(e){e=e.length>1?N(e):e;for(var n=N(arguments,1),r=0,o=e.length;r<o;r++)try{e[r].apply(this,n)}catch(e){Ut(e,this,'event handler for "'+t+'"')}}return this}}(fn),function(t){t.prototype._update=function(t,e){var n=this;n._isMounted&&xe(n,"beforeUpdate");var r=n.$el,o=n._vnode,i=be;be=n,n._vnode=t,o?n.$el=n.__patch__(o,t):(n.$el=n.__patch__(n.$el,t,e,!1,n.$options._parentElm,n.$options._refElm),n.$options._parentElm=n.$options._refElm=null),be=i,r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){xe(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||g(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),xe(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(fn),function(t){Xe(t.prototype),t.prototype.$nextTick=function(t){return Qt(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,o=n.render,i=n._parentVnode;i&&(e.$scopedSlots=i.data.scopedSlots||r),e.$vnode=i;try{t=o.call(e._renderProxy,e.$createElement)}catch(n){Ut(n,e,"render"),t=e._vnode}return t instanceof pt||(t=dt()),t.parent=i,t}}(fn);var gn=[String,RegExp,Array],mn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:gn,exclude:gn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)yn(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",function(e){vn(t,function(t){return dn(e,t)})}),this.$watch("exclude",function(e){vn(t,function(t){return!dn(e,t)})})},render:function(){var t=this.$slots.default,e=pe(t),n=e&&e.componentOptions;if(n){var r=hn(n),o=this.include,i=this.exclude;if(o&&(!r||!dn(o,r))||i&&r&&dn(i,r))return e;var a=this.cache,s=this.keys,u=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;a[u]?(e.componentInstance=a[u].componentInstance,g(s,u),s.push(u)):(a[u]=e,s.push(u),this.max&&s.length>parseInt(this.max)&&yn(a,s[0],s,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}}};!function(t){var e={get:function(){return D}};Object.defineProperty(t,"config",e),t.util={warn:at,extend:S,mergeOptions:Mt,defineReactive:kt},t.set=Nt,t.delete=St,t.nextTick=Qt,t.options=Object.create(null),R.forEach(function(e){t.options[e+"s"]=Object.create(null)}),t.options._base=t,S(t.options.components,mn),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=N(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=Mt(this.options,t),this}}(t),pn(t),function(t){R.forEach(function(e){t[e]=function(t,n){return n?("component"===e&&c(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}})}(t)}(fn),Object.defineProperty(fn.prototype,"$isServer",{get:et}),Object.defineProperty(fn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(fn,"FunctionalRenderContext",{value:Je}),fn.version="2.5.16";var bn=v("style,class"),_n=v("input,textarea,option,select,progress"),wn=v("contenteditable,draggable,spellcheck"),xn=v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),On="http://www.w3.org/1999/xlink",En=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},An=function(t){return En(t)?t.slice(6,t.length):""},kn=function(t){return null==t||!1===t};function Nn(t){for(var e=t.data,n=t,r=t;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=Sn(r.data,e));for(;i(n=n.parent);)n&&n.data&&(e=Sn(e,n.data));return function(t,e){if(i(t)||i(e))return jn(t,Tn(e));return""}(e.staticClass,e.class)}function Sn(t,e){return{staticClass:jn(t.staticClass,e.staticClass),class:i(t.class)?[t.class,e.class]:e.class}}function jn(t,e){return t?e?t+" "+e:t:e||""}function Tn(t){return Array.isArray(t)?function(t){for(var e,n="",r=0,o=t.length;r<o;r++)i(e=Tn(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):u(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var Pn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Cn=v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Ln=v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),qn=function(t){return Cn(t)||Ln(t)};var Mn=Object.create(null);var In=v("text,number,password,search,email,tel,url");var Rn=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t?n:(e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(t,e){return document.createElementNS(Pn[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),Bn={create:function(t,e){Dn(e)},update:function(t,e){t.data.ref!==e.data.ref&&(Dn(t,!0),Dn(e))},destroy:function(t){Dn(t,!0)}};function Dn(t,e){var n=t.data.ref;if(i(n)){var r=t.context,o=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?g(a[n],o):a[n]===o&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(o)<0&&a[n].push(o):a[n]=[o]:a[n]=o}}var Fn=new pt("",{},[]),Un=["create","activate","update","remove","destroy"];function $n(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&i(t.data)===i(e.data)&&function(t,e){if("input"!==t.tag)return!0;var n,r=i(n=t.data)&&i(n=n.attrs)&&n.type,o=i(n=e.data)&&i(n=n.attrs)&&n.type;return r===o||In(r)&&In(o)}(t,e)||a(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&o(e.asyncFactory.error))}function Hn(t,e,n){var r,o,a={};for(r=e;r<=n;++r)i(o=t[r].key)&&(a[o]=r);return a}var zn={create:Kn,update:Kn,destroy:function(t){Kn(t,Fn)}};function Kn(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,o,i=t===Fn,a=e===Fn,s=Yn(t.data.directives,t.context),u=Yn(e.data.directives,e.context),l=[],c=[];for(n in u)r=s[n],o=u[n],r?(o.oldValue=r.value,Gn(o,"update",e,t),o.def&&o.def.componentUpdated&&c.push(o)):(Gn(o,"bind",e,t),o.def&&o.def.inserted&&l.push(o));if(l.length){var f=function(){for(var n=0;n<l.length;n++)Gn(l[n],"inserted",e,t)};i?ae(e,"insert",f):f()}c.length&&ae(e,"postpatch",function(){for(var n=0;n<c.length;n++)Gn(c[n],"componentUpdated",e,t)});if(!i)for(n in s)u[n]||Gn(s[n],"unbind",t,t,a)}(t,e)}var Vn=Object.create(null);function Yn(t,e){var n,r,o=Object.create(null);if(!t)return o;for(n=0;n<t.length;n++)(r=t[n]).modifiers||(r.modifiers=Vn),o[Wn(r)]=r,r.def=It(e.$options,"directives",r.name);return o}function Wn(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function Gn(t,e,n,r,o){var i=t.def&&t.def[e];if(i)try{i(n.elm,t,n,r,o)}catch(r){Ut(r,n.context,"directive "+t.name+" "+e+" hook")}}var Zn=[Bn,zn];function Xn(t,e){var n=e.componentOptions;if(!(i(n)&&!1===n.Ctor.options.inheritAttrs||o(t.data.attrs)&&o(e.data.attrs))){var r,a,s=e.elm,u=t.data.attrs||{},l=e.data.attrs||{};for(r in i(l.__ob__)&&(l=e.data.attrs=S({},l)),l)a=l[r],u[r]!==a&&Jn(s,r,a);for(r in(W||Z)&&l.value!==u.value&&Jn(s,"value",l.value),u)o(l[r])&&(En(r)?s.removeAttributeNS(On,An(r)):wn(r)||s.removeAttribute(r))}}function Jn(t,e,n){t.tagName.indexOf("-")>-1?Qn(t,e,n):xn(e)?kn(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):wn(e)?t.setAttribute(e,kn(n)||"false"===n?"false":"true"):En(e)?kn(n)?t.removeAttributeNS(On,An(e)):t.setAttributeNS(On,e,n):Qn(t,e,n)}function Qn(t,e,n){if(kn(n))t.removeAttribute(e);else{if(W&&!G&&"TEXTAREA"===t.tagName&&"placeholder"===e&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var tr={create:Xn,update:Xn};function er(t,e){var n=e.elm,r=e.data,a=t.data;if(!(o(r.staticClass)&&o(r.class)&&(o(a)||o(a.staticClass)&&o(a.class)))){var s=Nn(e),u=n._transitionClasses;i(u)&&(s=jn(s,Tn(u))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var nr,rr={create:er,update:er},or="__r",ir="__c";function ar(t,e,n,r,o){var i;e=(i=e)._withTask||(i._withTask=function(){Gt=!0;var t=i.apply(null,arguments);return Gt=!1,t}),n&&(e=function(t,e,n){var r=nr;return function o(){null!==t.apply(null,arguments)&&sr(e,o,n,r)}}(e,t,r)),nr.addEventListener(t,e,Q?{capture:r,passive:o}:r)}function sr(t,e,n,r){(r||nr).removeEventListener(t,e._withTask||e,n)}function ur(t,e){if(!o(t.data.on)||!o(e.data.on)){var n=e.data.on||{},r=t.data.on||{};nr=e.elm,function(t){if(i(t[or])){var e=W?"change":"input";t[e]=[].concat(t[or],t[e]||[]),delete t[or]}i(t[ir])&&(t.change=[].concat(t[ir],t.change||[]),delete t[ir])}(n),ie(n,r,ar,sr,e.context),nr=void 0}}var lr={create:ur,update:ur};function cr(t,e){if(!o(t.data.domProps)||!o(e.data.domProps)){var n,r,a=e.elm,s=t.data.domProps||{},u=e.data.domProps||{};for(n in i(u.__ob__)&&(u=e.data.domProps=S({},u)),s)o(u[n])&&(a[n]="");for(n in u){if(r=u[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),r===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n){a._value=r;var l=o(r)?"":String(r);fr(a,l)&&(a.value=l)}else a[n]=r}}}function fr(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,r=t._vModifiers;if(i(r)){if(r.lazy)return!1;if(r.number)return d(n)!==d(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var pr={create:cr,update:cr},hr=_(function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach(function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}}),e});function dr(t){var e=vr(t.style);return t.staticStyle?S(t.staticStyle,e):e}function vr(t){return Array.isArray(t)?j(t):"string"==typeof t?hr(t):t}var yr,gr=/^--/,mr=/\s*!important$/,br=function(t,e,n){if(gr.test(e))t.style.setProperty(e,n);else if(mr.test(n))t.style.setProperty(e,n.replace(mr,""),"important");else{var r=wr(e);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)t.style[r]=n[o];else t.style[r]=n}},_r=["Webkit","Moz","ms"],wr=_(function(t){if(yr=yr||document.createElement("div").style,"filter"!==(t=x(t))&&t in yr)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<_r.length;n++){var r=_r[n]+e;if(r in yr)return r}});function xr(t,e){var n=e.data,r=t.data;if(!(o(n.staticStyle)&&o(n.style)&&o(r.staticStyle)&&o(r.style))){var a,s,u=e.elm,l=r.staticStyle,c=r.normalizedStyle||r.style||{},f=l||c,p=vr(e.data.style)||{};e.data.normalizedStyle=i(p.__ob__)?S({},p):p;var h=function(t,e){var n,r={};if(e)for(var o=t;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=dr(o.data))&&S(r,n);(n=dr(t.data))&&S(r,n);for(var i=t;i=i.parent;)i.data&&(n=dr(i.data))&&S(r,n);return r}(e,!0);for(s in f)o(h[s])&&br(u,s,"");for(s in h)(a=h[s])!==f[s]&&br(u,s,null==a?"":a)}}var Or={create:xr,update:xr};function Er(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.add(e)}):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function Ar(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.remove(e)}):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function kr(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&S(e,Nr(t.name||"v")),S(e,t),e}return"string"==typeof t?Nr(t):void 0}}var Nr=_(function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}}),Sr=z&&!G,jr="transition",Tr="animation",Pr="transition",Cr="transitionend",Lr="animation",qr="animationend";Sr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Pr="WebkitTransition",Cr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Lr="WebkitAnimation",qr="webkitAnimationEnd"));var Mr=z?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function Ir(t){Mr(function(){Mr(t)})}function Rr(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),Er(t,e))}function Br(t,e){t._transitionClasses&&g(t._transitionClasses,e),Ar(t,e)}function Dr(t,e,n){var r=Ur(t,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return n();var s=o===jr?Cr:qr,u=0,l=function(){t.removeEventListener(s,c),n()},c=function(e){e.target===t&&++u>=a&&l()};setTimeout(function(){u<a&&l()},i+1),t.addEventListener(s,c)}var Fr=/\b(transform|all)(,|$)/;function Ur(t,e){var n,r=window.getComputedStyle(t),o=r[Pr+"Delay"].split(", "),i=r[Pr+"Duration"].split(", "),a=$r(o,i),s=r[Lr+"Delay"].split(", "),u=r[Lr+"Duration"].split(", "),l=$r(s,u),c=0,f=0;return e===jr?a>0&&(n=jr,c=a,f=i.length):e===Tr?l>0&&(n=Tr,c=l,f=u.length):f=(n=(c=Math.max(a,l))>0?a>l?jr:Tr:null)?n===jr?i.length:u.length:0,{type:n,timeout:c,propCount:f,hasTransform:n===jr&&Fr.test(r[Pr+"Property"])}}function $r(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map(function(e,n){return Hr(e)+Hr(t[n])}))}function Hr(t){return 1e3*Number(t.slice(0,-1))}function zr(t,e){var n=t.elm;i(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=kr(t.data.transition);if(!o(r)&&!i(n._enterCb)&&1===n.nodeType){for(var a=r.css,s=r.type,l=r.enterClass,c=r.enterToClass,f=r.enterActiveClass,p=r.appearClass,h=r.appearToClass,v=r.appearActiveClass,y=r.beforeEnter,g=r.enter,m=r.afterEnter,b=r.enterCancelled,_=r.beforeAppear,w=r.appear,x=r.afterAppear,O=r.appearCancelled,E=r.duration,A=be,k=be.$vnode;k&&k.parent;)A=(k=k.parent).context;var N=!A._isMounted||!t.isRootInsert;if(!N||w||""===w){var S=N&&p?p:l,j=N&&v?v:f,T=N&&h?h:c,P=N&&_||y,C=N&&"function"==typeof w?w:g,L=N&&x||m,q=N&&O||b,I=d(u(E)?E.enter:E);0;var R=!1!==a&&!G,B=Yr(C),D=n._enterCb=M(function(){R&&(Br(n,T),Br(n,j)),D.cancelled?(R&&Br(n,S),q&&q(n)):L&&L(n),n._enterCb=null});t.data.show||ae(t,"insert",function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),C&&C(n,D)}),P&&P(n),R&&(Rr(n,S),Rr(n,j),Ir(function(){Br(n,S),D.cancelled||(Rr(n,T),B||(Vr(I)?setTimeout(D,I):Dr(n,s,D)))})),t.data.show&&(e&&e(),C&&C(n,D)),R||B||D()}}}function Kr(t,e){var n=t.elm;i(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=kr(t.data.transition);if(o(r)||1!==n.nodeType)return e();if(!i(n._leaveCb)){var a=r.css,s=r.type,l=r.leaveClass,c=r.leaveToClass,f=r.leaveActiveClass,p=r.beforeLeave,h=r.leave,v=r.afterLeave,y=r.leaveCancelled,g=r.delayLeave,m=r.duration,b=!1!==a&&!G,_=Yr(h),w=d(u(m)?m.leave:m);0;var x=n._leaveCb=M(function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),b&&(Br(n,c),Br(n,f)),x.cancelled?(b&&Br(n,l),y&&y(n)):(e(),v&&v(n)),n._leaveCb=null});g?g(O):O()}function O(){x.cancelled||(t.data.show||((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),p&&p(n),b&&(Rr(n,l),Rr(n,f),Ir(function(){Br(n,l),x.cancelled||(Rr(n,c),_||(Vr(w)?setTimeout(x,w):Dr(n,s,x)))})),h&&h(n,x),b||_||x())}}function Vr(t){return"number"==typeof t&&!isNaN(t)}function Yr(t){if(o(t))return!1;var e=t.fns;return i(e)?Yr(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function Wr(t,e){!0!==e.data.show&&zr(e)}var Gr=function(t){var e,n,r={},u=t.modules,l=t.nodeOps;for(e=0;e<Un.length;++e)for(r[Un[e]]=[],n=0;n<u.length;++n)i(u[n][Un[e]])&&r[Un[e]].push(u[n][Un[e]]);function c(t){var e=l.parentNode(t);i(e)&&l.removeChild(e,t)}function f(t,e,n,o,s,u,c){if(i(t.elm)&&i(u)&&(t=u[c]=yt(t)),t.isRootInsert=!s,!function(t,e,n,o){var s=t.data;if(i(s)){var u=i(t.componentInstance)&&s.keepAlive;if(i(s=s.hook)&&i(s=s.init)&&s(t,!1,n,o),i(t.componentInstance))return p(t,e),a(u)&&function(t,e,n,o){for(var a,s=t;s.componentInstance;)if(s=s.componentInstance._vnode,i(a=s.data)&&i(a=a.transition)){for(a=0;a<r.activate.length;++a)r.activate[a](Fn,s);e.push(s);break}h(n,t.elm,o)}(t,e,n,o),!0}}(t,e,n,o)){var f=t.data,v=t.children,y=t.tag;i(y)?(t.elm=t.ns?l.createElementNS(t.ns,y):l.createElement(y,t),m(t),d(t,v,e),i(f)&&g(t,e),h(n,t.elm,o)):a(t.isComment)?(t.elm=l.createComment(t.text),h(n,t.elm,o)):(t.elm=l.createTextNode(t.text),h(n,t.elm,o))}}function p(t,e){i(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,y(t)?(g(t,e),m(t)):(Dn(t),e.push(t))}function h(t,e,n){i(t)&&(i(n)?n.parentNode===t&&l.insertBefore(t,e,n):l.appendChild(t,e))}function d(t,e,n){if(Array.isArray(e))for(var r=0;r<e.length;++r)f(e[r],n,t.elm,null,!0,e,r);else s(t.text)&&l.appendChild(t.elm,l.createTextNode(String(t.text)))}function y(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return i(t.tag)}function g(t,n){for(var o=0;o<r.create.length;++o)r.create[o](Fn,t);i(e=t.data.hook)&&(i(e.create)&&e.create(Fn,t),i(e.insert)&&n.push(t))}function m(t){var e;if(i(e=t.fnScopeId))l.setStyleScope(t.elm,e);else for(var n=t;n;)i(e=n.context)&&i(e=e.$options._scopeId)&&l.setStyleScope(t.elm,e),n=n.parent;i(e=be)&&e!==t.context&&e!==t.fnContext&&i(e=e.$options._scopeId)&&l.setStyleScope(t.elm,e)}function b(t,e,n,r,o,i){for(;r<=o;++r)f(n[r],i,t,e,!1,n,r)}function _(t){var e,n,o=t.data;if(i(o))for(i(e=o.hook)&&i(e=e.destroy)&&e(t),e=0;e<r.destroy.length;++e)r.destroy[e](t);if(i(e=t.children))for(n=0;n<t.children.length;++n)_(t.children[n])}function w(t,e,n,r){for(;n<=r;++n){var o=e[n];i(o)&&(i(o.tag)?(x(o),_(o)):c(o.elm))}}function x(t,e){if(i(e)||i(t.data)){var n,o=r.remove.length+1;for(i(e)?e.listeners+=o:e=function(t,e){function n(){0==--n.listeners&&c(t)}return n.listeners=e,n}(t.elm,o),i(n=t.componentInstance)&&i(n=n._vnode)&&i(n.data)&&x(n,e),n=0;n<r.remove.length;++n)r.remove[n](t,e);i(n=t.data.hook)&&i(n=n.remove)?n(t,e):e()}else c(t.elm)}function O(t,e,n,r){for(var o=n;o<r;o++){var a=e[o];if(i(a)&&$n(t,a))return o}}function E(t,e,n,s){if(t!==e){var u=e.elm=t.elm;if(a(t.isAsyncPlaceholder))i(e.asyncFactory.resolved)?N(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(a(e.isStatic)&&a(t.isStatic)&&e.key===t.key&&(a(e.isCloned)||a(e.isOnce)))e.componentInstance=t.componentInstance;else{var c,p=e.data;i(p)&&i(c=p.hook)&&i(c=c.prepatch)&&c(t,e);var h=t.children,d=e.children;if(i(p)&&y(e)){for(c=0;c<r.update.length;++c)r.update[c](t,e);i(c=p.hook)&&i(c=c.update)&&c(t,e)}o(e.text)?i(h)&&i(d)?h!==d&&function(t,e,n,r,a){for(var s,u,c,p=0,h=0,d=e.length-1,v=e[0],y=e[d],g=n.length-1,m=n[0],_=n[g],x=!a;p<=d&&h<=g;)o(v)?v=e[++p]:o(y)?y=e[--d]:$n(v,m)?(E(v,m,r),v=e[++p],m=n[++h]):$n(y,_)?(E(y,_,r),y=e[--d],_=n[--g]):$n(v,_)?(E(v,_,r),x&&l.insertBefore(t,v.elm,l.nextSibling(y.elm)),v=e[++p],_=n[--g]):$n(y,m)?(E(y,m,r),x&&l.insertBefore(t,y.elm,v.elm),y=e[--d],m=n[++h]):(o(s)&&(s=Hn(e,p,d)),o(u=i(m.key)?s[m.key]:O(m,e,p,d))?f(m,r,t,v.elm,!1,n,h):$n(c=e[u],m)?(E(c,m,r),e[u]=void 0,x&&l.insertBefore(t,c.elm,v.elm)):f(m,r,t,v.elm,!1,n,h),m=n[++h]);p>d?b(t,o(n[g+1])?null:n[g+1].elm,n,h,g,r):h>g&&w(0,e,p,d)}(u,h,d,n,s):i(d)?(i(t.text)&&l.setTextContent(u,""),b(u,null,d,0,d.length-1,n)):i(h)?w(0,h,0,h.length-1):i(t.text)&&l.setTextContent(u,""):t.text!==e.text&&l.setTextContent(u,e.text),i(p)&&i(c=p.hook)&&i(c=c.postpatch)&&c(t,e)}}}function A(t,e,n){if(a(n)&&i(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var k=v("attrs,class,staticClass,staticStyle,key");function N(t,e,n,r){var o,s=e.tag,u=e.data,l=e.children;if(r=r||u&&u.pre,e.elm=t,a(e.isComment)&&i(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(i(u)&&(i(o=u.hook)&&i(o=o.init)&&o(e,!0),i(o=e.componentInstance)))return p(e,n),!0;if(i(s)){if(i(l))if(t.hasChildNodes())if(i(o=u)&&i(o=o.domProps)&&i(o=o.innerHTML)){if(o!==t.innerHTML)return!1}else{for(var c=!0,f=t.firstChild,h=0;h<l.length;h++){if(!f||!N(f,l[h],n,r)){c=!1;break}f=f.nextSibling}if(!c||f)return!1}else d(e,l,n);if(i(u)){var v=!1;for(var y in u)if(!k(y)){v=!0,g(e,n);break}!v&&u.class&&ee(u.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,s,u,c){if(!o(e)){var p,h=!1,d=[];if(o(t))h=!0,f(e,d,u,c);else{var v=i(t.nodeType);if(!v&&$n(t,e))E(t,e,d,s);else{if(v){if(1===t.nodeType&&t.hasAttribute(I)&&(t.removeAttribute(I),n=!0),a(n)&&N(t,e,d))return A(e,d,!0),t;p=t,t=new pt(l.tagName(p).toLowerCase(),{},[],void 0,p)}var g=t.elm,m=l.parentNode(g);if(f(e,d,g._leaveCb?null:m,l.nextSibling(g)),i(e.parent))for(var b=e.parent,x=y(e);b;){for(var O=0;O<r.destroy.length;++O)r.destroy[O](b);if(b.elm=e.elm,x){for(var k=0;k<r.create.length;++k)r.create[k](Fn,b);var S=b.data.hook.insert;if(S.merged)for(var j=1;j<S.fns.length;j++)S.fns[j]()}else Dn(b);b=b.parent}i(m)?w(0,[t],0,0):i(t.tag)&&_(t)}}return A(e,d,h),e.elm}i(t)&&_(t)}}({nodeOps:Rn,modules:[tr,rr,lr,pr,Or,z?{create:Wr,activate:Wr,remove:function(t,e){!0!==t.data.show?Kr(t,e):e()}}:{}].concat(Zn)});G&&document.addEventListener("selectionchange",function(){var t=document.activeElement;t&&t.vmodel&&ro(t,"input")});var Zr={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?ae(n,"postpatch",function(){Zr.componentUpdated(t,e,n)}):Xr(t,e,n.context),t._vOptions=[].map.call(t.options,to)):("textarea"===n.tag||In(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",eo),t.addEventListener("compositionend",no),t.addEventListener("change",no),G&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){Xr(t,e,n.context);var r=t._vOptions,o=t._vOptions=[].map.call(t.options,to);if(o.some(function(t,e){return!L(t,r[e])}))(t.multiple?e.value.some(function(t){return Qr(t,o)}):e.value!==e.oldValue&&Qr(e.value,o))&&ro(t,"change")}}};function Xr(t,e,n){Jr(t,e,n),(W||Z)&&setTimeout(function(){Jr(t,e,n)},0)}function Jr(t,e,n){var r=e.value,o=t.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,u=t.options.length;s<u;s++)if(a=t.options[s],o)i=q(r,to(a))>-1,a.selected!==i&&(a.selected=i);else if(L(to(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));o||(t.selectedIndex=-1)}}function Qr(t,e){return e.every(function(e){return!L(e,t)})}function to(t){return"_value"in t?t._value:t.value}function eo(t){t.target.composing=!0}function no(t){t.target.composing&&(t.target.composing=!1,ro(t.target,"input"))}function ro(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function oo(t){return!t.componentInstance||t.data&&t.data.transition?t:oo(t.componentInstance._vnode)}var io={model:Zr,show:{bind:function(t,e,n){var r=e.value,o=(n=oo(n)).data&&n.data.transition,i=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&o?(n.data.show=!0,zr(n,function(){t.style.display=i})):t.style.display=r?i:"none"},update:function(t,e,n){var r=e.value;!r!=!e.oldValue&&((n=oo(n)).data&&n.data.transition?(n.data.show=!0,r?zr(n,function(){t.style.display=t.__vOriginalDisplay}):Kr(n,function(){t.style.display="none"})):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,o){o||(t.style.display=t.__vOriginalDisplay)}}},ao={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function so(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?so(pe(e.children)):t}function uo(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var o=n._parentListeners;for(var i in o)e[x(i)]=o[i];return e}function lo(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var co={name:"transition",props:ao,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(function(t){return t.tag||fe(t)})).length){0;var r=this.mode;0;var o=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return o;var i=so(o);if(!i)return o;if(this._leaving)return lo(t,o);var a="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?a+"comment":a+i.tag:s(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var u=(i.data||(i.data={})).transition=uo(this),l=this._vnode,c=so(l);if(i.data.directives&&i.data.directives.some(function(t){return"show"===t.name})&&(i.data.show=!0),c&&c.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(i,c)&&!fe(c)&&(!c.componentInstance||!c.componentInstance._vnode.isComment)){var f=c.data.transition=S({},u);if("out-in"===r)return this._leaving=!0,ae(f,"afterLeave",function(){e._leaving=!1,e.$forceUpdate()}),lo(t,o);if("in-out"===r){if(fe(i))return l;var p,h=function(){p()};ae(u,"afterEnter",h),ae(u,"enterCancelled",h),ae(f,"delayLeave",function(t){p=t})}}return o}}},fo=S({tag:String,moveClass:String},ao);function po(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function ho(t){t.data.newPos=t.elm.getBoundingClientRect()}function vo(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,o=e.top-n.top;if(r||o){t.data.moved=!0;var i=t.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}delete fo.mode;var yo={Transition:co,TransitionGroup:{props:fo,render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=uo(this),s=0;s<o.length;s++){var u=o[s];if(u.tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))i.push(u),n[u.key]=u,(u.data||(u.data={})).transition=a;else;}if(r){for(var l=[],c=[],f=0;f<r.length;f++){var p=r[f];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?l.push(p):c.push(p)}this.kept=t(e,null,l),this.removed=c}return t(e,null,i)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(po),t.forEach(ho),t.forEach(vo),this._reflow=document.body.offsetHeight,t.forEach(function(t){if(t.data.moved){var n=t.elm,r=n.style;Rr(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Cr,n._moveCb=function t(r){r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Cr,t),n._moveCb=null,Br(n,e))})}}))},methods:{hasMove:function(t,e){if(!Sr)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach(function(t){Ar(n,t)}),Er(n,e),n.style.display="none",this.$el.appendChild(n);var r=Ur(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};fn.config.mustUseProp=function(t,e,n){return"value"===n&&_n(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},fn.config.isReservedTag=qn,fn.config.isReservedAttr=bn,fn.config.getTagNamespace=function(t){return Ln(t)?"svg":"math"===t?"math":void 0},fn.config.isUnknownElement=function(t){if(!z)return!0;if(qn(t))return!1;if(t=t.toLowerCase(),null!=Mn[t])return Mn[t];var e=document.createElement(t);return t.indexOf("-")>-1?Mn[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Mn[t]=/HTMLUnknownElement/.test(e.toString())},S(fn.options.directives,io),S(fn.options.components,yo),fn.prototype.__patch__=z?Gr:T,fn.prototype.$mount=function(t,e){return function(t,e,n){return t.$el=e,t.$options.render||(t.$options.render=dt),xe(t,"beforeMount"),new Pe(t,function(){t._update(t._render(),n)},T,null,!0),n=!1,null==t.$vnode&&(t._isMounted=!0,xe(t,"mounted")),t}(this,t=t&&z?function(t){if("string"==typeof t){var e=document.querySelector(t);return e||document.createElement("div")}return t}(t):void 0,e)},z&&setTimeout(function(){D.devtools&&nt&&nt.emit("init",fn)},0),e.default=fn}.call(this,n(44),n(197).setImmediate)},function(t,e,n){"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},function(t,e,n){"use strict";var r=n(115);function o(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise(function(t){e=t});var n=this;t(function(t){n.reason||(n.reason=new r(t),e(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var t;return{token:new o(function(e){t=e}),cancel:t}},t.exports=o},function(t,e,n){"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},function(t,e,n){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,e,n){"use strict";var r=n(15);t.exports=function(t,e,n){return r.forEach(n,function(n){t=n(t,e)}),t}},function(t,e,n){"use strict";var r=n(15),o=n(203),i=n(116),a=n(75),s=n(202),u=n(201);function l(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return l(t),t.baseURL&&!s(t.url)&&(t.url=u(t.baseURL,t.url)),t.headers=t.headers||{},t.data=o(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(e){delete t.headers[e]}),(t.adapter||a.adapter)(t).then(function(e){return l(t),e.data=o(e.data,e.headers,t.transformResponse),e},function(e){return i(e)||(l(t),e&&e.response&&(e.response.data=o(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)})}},function(t,e,n){"use strict";var r=n(15);function o(){this.handlers=[]}o.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},o.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},o.prototype.forEach=function(t){r.forEach(this.handlers,function(e){null!==e&&t(e)})},t.exports=o},function(t,e,n){"use strict";var r=n(15);t.exports=r.isStandardBrowserEnv()?{write:function(t,e,n,o,i,a){var s=[];s.push(t+"="+encodeURIComponent(e)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,e,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",t.exports=function(t){for(var e,n,i=String(t),a="",s=0,u=r;i.charAt(0|s)||(u="=",s%1);a+=u.charAt(63&e>>8-s%1*8)){if((n=i.charCodeAt(s+=.75))>255)throw new o;e=e<<8|n}return a}},function(t,e,n){"use strict";var r=n(15);t.exports=r.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(t){var r=t;return e&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return t=o(window.location.href),function(e){var n=r.isString(e)?o(e):e;return n.protocol===t.protocol&&n.host===t.host}}():function(){return!0}},function(t,e,n){"use strict";var r=n(15),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,n,i,a={};return t?(r.forEach(t.split("\n"),function(t){if(i=t.indexOf(":"),e=r.trim(t.substr(0,i)).toLowerCase(),n=r.trim(t.substr(i+1)),e){if(a[e]&&o.indexOf(e)>=0)return;a[e]="set-cookie"===e?(a[e]?a[e]:[]).concat([n]):a[e]?a[e]+", "+n:n}}),a):a}},function(t,e,n){"use strict";var r=n(15);function o(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,n){if(!e)return t;var i;if(n)i=n(e);else if(r.isURLSearchParams(e))i=e.toString();else{var a=[];r.forEach(e,function(t,e){null!==t&&void 0!==t&&(r.isArray(t)?e+="[]":t=[t],r.forEach(t,function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),a.push(o(e)+"="+o(t))}))}),i=a.join("&")}return i&&(t+=(-1===t.indexOf("?")?"?":"&")+i),t}},function(t,e,n){"use strict";t.exports=function(t,e,n,r,o){return t.config=e,n&&(t.code=n),t.request=r,t.response=o,t}},function(t,e,n){"use strict";var r=n(117);t.exports=function(t,e,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?e(r("Request failed with status code "+n.status,n.config,null,n.request,n)):t(n)}},function(t,e,n){"use strict";var r=n(15);t.exports=function(t,e){r.forEach(t,function(n,r){r!==e&&r.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[r])})}},function(t,e,n){"use strict";var r=n(75),o=n(15),i=n(205),a=n(204);function s(t){this.defaults=t,this.interceptors={request:new i,response:new i}}s.prototype.request=function(t){"string"==typeof t&&(t=o.merge({url:arguments[0]},arguments[1])),(t=o.merge(r,{method:"get"},this.defaults,t)).method=t.method.toLowerCase();var e=[a,void 0],n=Promise.resolve(t);for(this.interceptors.request.forEach(function(t){e.unshift(t.fulfilled,t.rejected)}),this.interceptors.response.forEach(function(t){e.push(t.fulfilled,t.rejected)});e.length;)n=n.then(e.shift(),e.shift());return n},o.forEach(["delete","get","head","options"],function(t){s.prototype[t]=function(e,n){return this.request(o.merge(n||{},{method:t,url:e}))}}),o.forEach(["post","put","patch"],function(t){s.prototype[t]=function(e,n,r){return this.request(o.merge(r||{},{method:t,url:e,data:n}))}}),t.exports=s},function(t,e){function n(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
t.exports=function(t){return null!=t&&(n(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&n(t.slice(0,0))}(t)||!!t._isBuffer)}},function(t,e,n){"use strict";var r=n(15),o=n(120),i=n(214),a=n(75);function s(t){var e=new i(t),n=o(i.prototype.request,e);return r.extend(n,i.prototype,e),r.extend(n,e),n}var u=s(a);u.Axios=i,u.create=function(t){return s(r.merge(a,t))},u.Cancel=n(115),u.CancelToken=n(200),u.isCancel=n(116),u.all=function(t){return Promise.all(t)},u.spread=n(199),t.exports=u,t.exports.default=u},function(t,e,n){t.exports=n(216)},function(t,e,n){var r=n(122),o=n(121),i={attributes:{compose:function(t,e,n){"object"!=typeof t&&(t={}),"object"!=typeof e&&(e={});var r=o(!0,{},e);for(var i in n||(r=Object.keys(r).reduce(function(t,e){return null!=r[e]&&(t[e]=r[e]),t},{})),t)void 0!==t[i]&&void 0===e[i]&&(r[i]=t[i]);return Object.keys(r).length>0?r:void 0},diff:function(t,e){"object"!=typeof t&&(t={}),"object"!=typeof e&&(e={});var n=Object.keys(t).concat(Object.keys(e)).reduce(function(n,o){return r(t[o],e[o])||(n[o]=void 0===e[o]?null:e[o]),n},{});return Object.keys(n).length>0?n:void 0},transform:function(t,e,n){if("object"!=typeof t)return e;if("object"==typeof e){if(!n)return e;var r=Object.keys(e).reduce(function(n,r){return void 0===t[r]&&(n[r]=e[r]),n},{});return Object.keys(r).length>0?r:void 0}}},iterator:function(t){return new a(t)},length:function(t){return"number"==typeof t.delete?t.delete:"number"==typeof t.retain?t.retain:"string"==typeof t.insert?t.insert.length:1}};function a(t){this.ops=t,this.index=0,this.offset=0}a.prototype.hasNext=function(){return this.peekLength()<1/0},a.prototype.next=function(t){t||(t=1/0);var e=this.ops[this.index];if(e){var n=this.offset,r=i.length(e);if(t>=r-n?(t=r-n,this.index+=1,this.offset=0):this.offset+=t,"number"==typeof e.delete)return{delete:t};var o={};return e.attributes&&(o.attributes=e.attributes),"number"==typeof e.retain?o.retain=t:"string"==typeof e.insert?o.insert=e.insert.substr(n,t):o.insert=e.insert,o}return{retain:1/0}},a.prototype.peek=function(){return this.ops[this.index]},a.prototype.peekLength=function(){return this.ops[this.index]?i.length(this.ops[this.index])-this.offset:1/0},a.prototype.peekType=function(){return this.ops[this.index]?"number"==typeof this.ops[this.index].delete?"delete":"number"==typeof this.ops[this.index].retain?"retain":"insert":"retain"},t.exports=i},function(t,e){var n="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();function r(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function o(t){return t&&"object"==typeof t&&"number"==typeof t.length&&Object.prototype.hasOwnProperty.call(t,"callee")&&!Object.prototype.propertyIsEnumerable.call(t,"callee")||!1}(e=t.exports=n?r:o).supported=r,e.unsupported=o},function(t,e){function n(t){var e=[];for(var n in t)e.push(n);return e}(t.exports="function"==typeof Object.keys?Object.keys:n).shim=n},function(t,e){var n=-1,r=1,o=0;function i(t,e,l){if(t==e)return t?[[o,t]]:[];(l<0||t.length<l)&&(l=null);var f=s(t,e),p=t.substring(0,f);f=u(t=t.substring(f),e=e.substring(f));var h=t.substring(t.length-f),d=function(t,e){var l;if(!t)return[[r,e]];if(!e)return[[n,t]];var c=t.length>e.length?t:e,f=t.length>e.length?e:t,p=c.indexOf(f);if(-1!=p)return l=[[r,c.substring(0,p)],[o,f],[r,c.substring(p+f.length)]],t.length>e.length&&(l[0][0]=l[2][0]=n),l;if(1==f.length)return[[n,t],[r,e]];var h=function(t,e){var n=t.length>e.length?t:e,r=t.length>e.length?e:t;if(n.length<4||2*r.length<n.length)return null;function o(t,e,n){for(var r,o,i,a,l=t.substring(n,n+Math.floor(t.length/4)),c=-1,f="";-1!=(c=e.indexOf(l,c+1));){var p=s(t.substring(n),e.substring(c)),h=u(t.substring(0,n),e.substring(0,c));f.length<h+p&&(f=e.substring(c-h,c)+e.substring(c,c+p),r=t.substring(0,n-h),o=t.substring(n+p),i=e.substring(0,c-h),a=e.substring(c+p))}return 2*f.length>=t.length?[r,o,i,a,f]:null}var i,a,l,c,f,p=o(n,r,Math.ceil(n.length/4)),h=o(n,r,Math.ceil(n.length/2));if(!p&&!h)return null;i=h?p&&p[4].length>h[4].length?p:h:p;t.length>e.length?(a=i[0],l=i[1],c=i[2],f=i[3]):(c=i[0],f=i[1],a=i[2],l=i[3]);var d=i[4];return[a,l,c,f,d]}(t,e);if(h){var d=h[0],v=h[1],y=h[2],g=h[3],m=h[4],b=i(d,y),_=i(v,g);return b.concat([[o,m]],_)}return function(t,e){for(var o=t.length,i=e.length,s=Math.ceil((o+i)/2),u=s,l=2*s,c=new Array(l),f=new Array(l),p=0;p<l;p++)c[p]=-1,f[p]=-1;c[u+1]=0,f[u+1]=0;for(var h=o-i,d=h%2!=0,v=0,y=0,g=0,m=0,b=0;b<s;b++){for(var _=-b+v;_<=b-y;_+=2){for(var w=u+_,x=(N=_==-b||_!=b&&c[w-1]<c[w+1]?c[w+1]:c[w-1]+1)-_;N<o&&x<i&&t.charAt(N)==e.charAt(x);)N++,x++;if(c[w]=N,N>o)y+=2;else if(x>i)v+=2;else if(d){var O=u+h-_;if(O>=0&&O<l&&-1!=f[O]){var E=o-f[O];if(N>=E)return a(t,e,N,x)}}}for(var A=-b+g;A<=b-m;A+=2){for(var O=u+A,k=(E=A==-b||A!=b&&f[O-1]<f[O+1]?f[O+1]:f[O-1]+1)-A;E<o&&k<i&&t.charAt(o-E-1)==e.charAt(i-k-1);)E++,k++;if(f[O]=E,E>o)m+=2;else if(k>i)g+=2;else if(!d){var w=u+h-A;if(w>=0&&w<l&&-1!=c[w]){var N=c[w],x=u+N-w;if(N>=(E=o-E))return a(t,e,N,x)}}}}return[[n,t],[r,e]]}(t,e)}(t=t.substring(0,t.length-f),e=e.substring(0,e.length-f));return p&&d.unshift([o,p]),h&&d.push([o,h]),function t(e){e.push([o,""]);var i=0;var a=0;var l=0;var c="";var f="";var p;for(;i<e.length;)switch(e[i][0]){case r:l++,f+=e[i][1],i++;break;case n:a++,c+=e[i][1],i++;break;case o:a+l>1?(0!==a&&0!==l&&(0!==(p=s(f,c))&&(i-a-l>0&&e[i-a-l-1][0]==o?e[i-a-l-1][1]+=f.substring(0,p):(e.splice(0,0,[o,f.substring(0,p)]),i++),f=f.substring(p),c=c.substring(p)),0!==(p=u(f,c))&&(e[i][1]=f.substring(f.length-p)+e[i][1],f=f.substring(0,f.length-p),c=c.substring(0,c.length-p))),0===a?e.splice(i-l,a+l,[r,f]):0===l?e.splice(i-a,a+l,[n,c]):e.splice(i-a-l,a+l,[n,c],[r,f]),i=i-a-l+(a?1:0)+(l?1:0)+1):0!==i&&e[i-1][0]==o?(e[i-1][1]+=e[i][1],e.splice(i,1)):i++,l=0,a=0,c="",f=""}""===e[e.length-1][1]&&e.pop();var h=!1;i=1;for(;i<e.length-1;)e[i-1][0]==o&&e[i+1][0]==o&&(e[i][1].substring(e[i][1].length-e[i-1][1].length)==e[i-1][1]?(e[i][1]=e[i-1][1]+e[i][1].substring(0,e[i][1].length-e[i-1][1].length),e[i+1][1]=e[i-1][1]+e[i+1][1],e.splice(i-1,1),h=!0):e[i][1].substring(0,e[i+1][1].length)==e[i+1][1]&&(e[i-1][1]+=e[i+1][1],e[i][1]=e[i][1].substring(e[i+1][1].length)+e[i+1][1],e.splice(i+1,1),h=!0)),i++;h&&t(e)}(d),null!=l&&(d=function(t,e){var r=function(t,e){if(0===e)return[o,t];for(var r=0,i=0;i<t.length;i++){var a=t[i];if(a[0]===n||a[0]===o){var s=r+a[1].length;if(e===s)return[i+1,t];if(e<s){t=t.slice();var u=e-r,l=[a[0],a[1].slice(0,u)],c=[a[0],a[1].slice(u)];return t.splice(i,1,l,c),[i+1,t]}r=s}}throw new Error("cursor_pos is out of bounds!")}(t,e),i=r[1],a=r[0],s=i[a],u=i[a+1];if(null==s)return t;if(s[0]!==o)return t;if(null!=u&&s[1]+u[1]===u[1]+s[1])return i.splice(a,2,u,s),c(i,a,2);if(null!=u&&0===u[1].indexOf(s[1])){i.splice(a,2,[u[0],s[1]],[0,s[1]]);var l=u[1].slice(s[1].length);return l.length>0&&i.splice(a+2,0,[u[0],l]),c(i,a,3)}return t}(d,l)),d=function(t){for(var e=!1,i=function(t){return t.charCodeAt(0)>=56320&&t.charCodeAt(0)<=57343},a=2;a<t.length;a+=1)t[a-2][0]===o&&((s=t[a-2][1]).charCodeAt(s.length-1)>=55296&&s.charCodeAt(s.length-1)<=56319)&&t[a-1][0]===n&&i(t[a-1][1])&&t[a][0]===r&&i(t[a][1])&&(e=!0,t[a-1][1]=t[a-2][1].slice(-1)+t[a-1][1],t[a][1]=t[a-2][1].slice(-1)+t[a][1],t[a-2][1]=t[a-2][1].slice(0,-1));var s;if(!e)return t;for(var u=[],a=0;a<t.length;a+=1)t[a][1].length>0&&u.push(t[a]);return u}(d)}function a(t,e,n,r){var o=t.substring(0,n),a=e.substring(0,r),s=t.substring(n),u=e.substring(r),l=i(o,a),c=i(s,u);return l.concat(c)}function s(t,e){if(!t||!e||t.charAt(0)!=e.charAt(0))return 0;for(var n=0,r=Math.min(t.length,e.length),o=r,i=0;n<o;)t.substring(i,o)==e.substring(i,o)?i=n=o:r=o,o=Math.floor((r-n)/2+n);return o}function u(t,e){if(!t||!e||t.charAt(t.length-1)!=e.charAt(e.length-1))return 0;for(var n=0,r=Math.min(t.length,e.length),o=r,i=0;n<o;)t.substring(t.length-o,t.length-i)==e.substring(e.length-o,e.length-i)?i=n=o:r=o,o=Math.floor((r-n)/2+n);return o}var l=i;function c(t,e,n){for(var r=e+n-1;r>=0&&r>=e-1;r--)if(r+1<t.length){var o=t[r],i=t[r+1];o[0]===i[1]&&t.splice(r,2,[o[0],o[1]+i[1]])}return t}l.INSERT=r,l.DELETE=n,l.EQUAL=o,t.exports=l},function(t,e,n){var r=n(221),o=n(122),i=n(121),a=n(218),s=String.fromCharCode(0),u=function(t){Array.isArray(t)?this.ops=t:null!=t&&Array.isArray(t.ops)?this.ops=t.ops:this.ops=[]};u.prototype.insert=function(t,e){var n={};return 0===t.length?this:(n.insert=t,null!=e&&"object"==typeof e&&Object.keys(e).length>0&&(n.attributes=e),this.push(n))},u.prototype.delete=function(t){return t<=0?this:this.push({delete:t})},u.prototype.retain=function(t,e){if(t<=0)return this;var n={retain:t};return null!=e&&"object"==typeof e&&Object.keys(e).length>0&&(n.attributes=e),this.push(n)},u.prototype.push=function(t){var e=this.ops.length,n=this.ops[e-1];if(t=i(!0,{},t),"object"==typeof n){if("number"==typeof t.delete&&"number"==typeof n.delete)return this.ops[e-1]={delete:n.delete+t.delete},this;if("number"==typeof n.delete&&null!=t.insert&&(e-=1,"object"!=typeof(n=this.ops[e-1])))return this.ops.unshift(t),this;if(o(t.attributes,n.attributes)){if("string"==typeof t.insert&&"string"==typeof n.insert)return this.ops[e-1]={insert:n.insert+t.insert},"object"==typeof t.attributes&&(this.ops[e-1].attributes=t.attributes),this;if("number"==typeof t.retain&&"number"==typeof n.retain)return this.ops[e-1]={retain:n.retain+t.retain},"object"==typeof t.attributes&&(this.ops[e-1].attributes=t.attributes),this}}return e===this.ops.length?this.ops.push(t):this.ops.splice(e,0,t),this},u.prototype.chop=function(){var t=this.ops[this.ops.length-1];return t&&t.retain&&!t.attributes&&this.ops.pop(),this},u.prototype.filter=function(t){return this.ops.filter(t)},u.prototype.forEach=function(t){this.ops.forEach(t)},u.prototype.map=function(t){return this.ops.map(t)},u.prototype.partition=function(t){var e=[],n=[];return this.forEach(function(r){(t(r)?e:n).push(r)}),[e,n]},u.prototype.reduce=function(t,e){return this.ops.reduce(t,e)},u.prototype.changeLength=function(){return this.reduce(function(t,e){return e.insert?t+a.length(e):e.delete?t-e.delete:t},0)},u.prototype.length=function(){return this.reduce(function(t,e){return t+a.length(e)},0)},u.prototype.slice=function(t,e){t=t||0,"number"!=typeof e&&(e=1/0);for(var n=[],r=a.iterator(this.ops),o=0;o<e&&r.hasNext();){var i;o<t?i=r.next(t-o):(i=r.next(e-o),n.push(i)),o+=a.length(i)}return new u(n)},u.prototype.compose=function(t){for(var e=a.iterator(this.ops),n=a.iterator(t.ops),r=new u;e.hasNext()||n.hasNext();)if("insert"===n.peekType())r.push(n.next());else if("delete"===e.peekType())r.push(e.next());else{var o=Math.min(e.peekLength(),n.peekLength()),i=e.next(o),s=n.next(o);if("number"==typeof s.retain){var l={};"number"==typeof i.retain?l.retain=o:l.insert=i.insert;var c=a.attributes.compose(i.attributes,s.attributes,"number"==typeof i.retain);c&&(l.attributes=c),r.push(l)}else"number"==typeof s.delete&&"number"==typeof i.retain&&r.push(s)}return r.chop()},u.prototype.concat=function(t){var e=new u(this.ops.slice());return t.ops.length>0&&(e.push(t.ops[0]),e.ops=e.ops.concat(t.ops.slice(1))),e},u.prototype.diff=function(t,e){if(this.ops===t.ops)return new u;var n=[this,t].map(function(e){return e.map(function(n){if(null!=n.insert)return"string"==typeof n.insert?n.insert:s;throw new Error("diff() called "+(e===t?"on":"with")+" non-document")}).join("")}),i=new u,l=r(n[0],n[1],e),c=a.iterator(this.ops),f=a.iterator(t.ops);return l.forEach(function(t){for(var e=t[1].length;e>0;){var n=0;switch(t[0]){case r.INSERT:n=Math.min(f.peekLength(),e),i.push(f.next(n));break;case r.DELETE:n=Math.min(e,c.peekLength()),c.next(n),i.delete(n);break;case r.EQUAL:n=Math.min(c.peekLength(),f.peekLength(),e);var s=c.next(n),u=f.next(n);o(s.insert,u.insert)?i.retain(n,a.attributes.diff(s.attributes,u.attributes)):i.push(u).delete(n)}e-=n}}),i.chop()},u.prototype.eachLine=function(t,e){e=e||"\n";for(var n=a.iterator(this.ops),r=new u,o=0;n.hasNext();){if("insert"!==n.peekType())return;var i=n.peek(),s=a.length(i)-n.peekLength(),l="string"==typeof i.insert?i.insert.indexOf(e,s)-s:-1;if(l<0)r.push(n.next());else if(l>0)r.push(n.next(l));else{if(!1===t(r,n.next(1).attributes||{},o))return;o+=1,r=new u}}r.length()>0&&t(r,{},o)},u.prototype.transform=function(t,e){if(e=!!e,"number"==typeof t)return this.transformPosition(t,e);for(var n=a.iterator(this.ops),r=a.iterator(t.ops),o=new u;n.hasNext()||r.hasNext();)if("insert"!==n.peekType()||!e&&"insert"===r.peekType())if("insert"===r.peekType())o.push(r.next());else{var i=Math.min(n.peekLength(),r.peekLength()),s=n.next(i),l=r.next(i);if(s.delete)continue;l.delete?o.push(l):o.retain(i,a.attributes.transform(s.attributes,l.attributes,e))}else o.retain(a.length(n.next()));return o.chop()},u.prototype.transformPosition=function(t,e){e=!!e;for(var n=a.iterator(this.ops),r=0;n.hasNext()&&r<=t;){var o=n.peekLength(),i=n.peekType();n.next(),"delete"!==i?("insert"===i&&(r<t||!e)&&(t+=o),r+=o):t-=Math.min(o,t-r)}return t},t.exports=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=c(n(222)),s=c(n(217)),u=c(n(198)),l=c(n(195));function c(t){return t&&t.__esModule?t:{default:t}}function f(t){return function(){var e=t.apply(this,arguments);return new Promise(function(t,n){return function r(o,i){try{var a=e[o](i),s=a.value}catch(t){return void n(t)}if(!a.done)return Promise.resolve(s).then(function(t){r("next",t)},function(t){r("throw",t)});t(s)}("next")})}}u.default.component(l.default);var p={urlRegex:/^https?:\/\/[\S]+$/gm},h=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.quill=e,n=n||{},this.options=o({},p,n),this.registerTypeListener(),this.registerPasteListener()}return i(t,[{key:"registerPasteListener",value:function(){var t=this;this.quill.clipboard.addMatcher(Node.TEXT_NODE,function(e,n){if("string"==typeof e.data){var r=e.data.match(t.options.urlRegex);if(r&&r.length>0){var o=new a.default,i=e.data;r.forEach(function(e){var n=i.split(e),r=n.shift(),a=t.buildUrlEmbed(e);o.insert(r),o.insert(a),i=n.join(e)}),o.insert(i),n.ops=o.ops}return n}})}},{key:"registerTypeListener",value:function(){var t=this;this.quill.on("text-change",function(e){var n=e.ops;if(!(!n||n.length<1||n.length>2)){var r=n[n.length-1];r.insert&&"string"==typeof r.insert&&r.insert.match(/\s/)&&t.checkTextForUrl()}})}},{key:"checkTextForUrl",value:function(){var t=this.quill.getSelection();if(t){var e=this.quill.getLeaf(t.index),n=r(e,1)[0];if(n.text){console.log(n.text);var o=n.text.match(this.options.urlRegex);if(o&&o.length){var i=n.text.length,a=t.index-i;this.textToUrl(a,o[0])}}}}},{key:"textToUrl",value:function(){var t=f(regeneratorRuntime.mark(function t(e,n){var r,o;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.buildUrlEmbed(n);case 2:r=t.sent,o=(new a.default).retain(e).delete(n.length).insert(r),this.quill.updateContents(o);case 5:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}()},{key:"buildUrlEmbed",value:function(t){var e={urlEmbed:{url:t,html:t}};return this.addMetaInfo(t),e}},{key:"addMetaInfo",value:function(){var t=f(regeneratorRuntime.mark(function t(e){var n,r,o;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.getMetaInfo(e);case 2:if(n=t.sent,r=n.data,(o=document.querySelectorAll('[data-url-embed="'+e+'"]'))&&o.length){t.next=7;break}return t.abrupt("return");case 7:o.forEach(function(t){var n=document.createElement("div");t.innerHTML="",t.appendChild(n),new u.default({el:n,render:function(t){return t(l.default,{props:{url:e,meta:r}})}})});case 8:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()},{key:"getMetaInfo",value:function(){var t=f(regeneratorRuntime.mark(function t(e){var n,r;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e=encodeURIComponent(e),n=this.options.metaApi+"/embeds?url="+e,t.next=4,s.default.get(n);case 4:return r=t.sent,t.abrupt("return",r);case 6:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()}]),t}();e.default=h},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(108);var a=((r=i)&&r.__esModule?r:{default:r}).default.import("blots/block/embed"),s=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a),o(e,null,[{key:"create",value:function(t){var n=t.url,r=t.html,o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this);return o.setAttribute("data-url-embed",n),o.setAttribute("contenteditable","false"),o.insertAdjacentHTML("beforeend",r),o}},{key:"value",value:function(t){return t.getAttribute("data-url-embed")}}]),e}();s.blotName="urlEmbed",s.className="url-embed",s.tagName="div",e.default=s},function(t,e,n){var r;"undefined"!=typeof self&&self,r=function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=9)}([function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e){var n=this;return e="[Parchment] "+e,(n=t.call(this,e)||this).message=e,n.name=n.constructor.name,n}return o(e,t),e}(Error);e.ParchmentError=i;var a,s={},u={},l={},c={};function f(t,e){var n;if(void 0===e&&(e=a.ANY),"string"==typeof t)n=c[t]||s[t];else if(t instanceof Text||t.nodeType===Node.TEXT_NODE)n=c.text;else if("number"==typeof t)t&a.LEVEL&a.BLOCK?n=c.block:t&a.LEVEL&a.INLINE&&(n=c.inline);else if(t instanceof HTMLElement){var r=(t.getAttribute("class")||"").split(/\s+/);for(var o in r)if(n=u[r[o]])break;n=n||l[t.tagName]}return null==n?null:e&a.LEVEL&n.scope&&e&a.TYPE&n.scope?n:null}e.DATA_KEY="__blot",function(t){t[t.TYPE=3]="TYPE",t[t.LEVEL=12]="LEVEL",t[t.ATTRIBUTE=13]="ATTRIBUTE",t[t.BLOT=14]="BLOT",t[t.INLINE=7]="INLINE",t[t.BLOCK=11]="BLOCK",t[t.BLOCK_BLOT=10]="BLOCK_BLOT",t[t.INLINE_BLOT=6]="INLINE_BLOT",t[t.BLOCK_ATTRIBUTE=9]="BLOCK_ATTRIBUTE",t[t.INLINE_ATTRIBUTE=5]="INLINE_ATTRIBUTE",t[t.ANY=15]="ANY"}(a=e.Scope||(e.Scope={})),e.create=function(t,e){var n=f(t);if(null==n)throw new i("Unable to create "+t+" blot");var r=n;return new r(t instanceof Node||t.nodeType===Node.TEXT_NODE?t:r.create(e),e)},e.find=function t(n,r){return void 0===r&&(r=!1),null==n?null:null!=n[e.DATA_KEY]?n[e.DATA_KEY].blot:r?t(n.parentNode,r):null},e.query=f,e.register=function t(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];if(e.length>1)return e.map(function(e){return t(e)});var r=e[0];if("string"!=typeof r.blotName&&"string"!=typeof r.attrName)throw new i("Invalid definition");if("abstract"===r.blotName)throw new i("Cannot register abstract class");c[r.blotName||r.attrName]=r,"string"==typeof r.keyName?s[r.keyName]=r:(null!=r.className&&(u[r.className]=r),null!=r.tagName&&(Array.isArray(r.tagName)?r.tagName=r.tagName.map(function(t){return t.toUpperCase()}):r.tagName=r.tagName.toUpperCase(),(Array.isArray(r.tagName)?r.tagName:[r.tagName]).forEach(function(t){null!=l[t]&&null!=r.className||(l[t]=r)})));return r}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),o=function(){function t(t,e,n){void 0===n&&(n={}),this.attrName=t,this.keyName=e;var o=r.Scope.TYPE&r.Scope.ATTRIBUTE;null!=n.scope?this.scope=n.scope&r.Scope.LEVEL|o:this.scope=r.Scope.ATTRIBUTE,null!=n.whitelist&&(this.whitelist=n.whitelist)}return t.keys=function(t){return[].map.call(t.attributes,function(t){return t.name})},t.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(t.setAttribute(this.keyName,e),!0)},t.prototype.canAdd=function(t,e){return null!=r.query(t,r.Scope.BLOT&(this.scope|r.Scope.TYPE))&&(null==this.whitelist||("string"==typeof e?this.whitelist.indexOf(e.replace(/["']/g,""))>-1:this.whitelist.indexOf(e)>-1))},t.prototype.remove=function(t){t.removeAttribute(this.keyName)},t.prototype.value=function(t){var e=t.getAttribute(this.keyName);return this.canAdd(t,e)&&e?e:""},t}();e.default=o},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(11),a=n(5),s=n(0),u=function(t){function e(e){var n=t.call(this,e)||this;return n.build(),n}return o(e,t),e.prototype.appendChild=function(t){this.insertBefore(t)},e.prototype.attach=function(){t.prototype.attach.call(this),this.children.forEach(function(t){t.attach()})},e.prototype.build=function(){var t=this;this.children=new i.default,[].slice.call(this.domNode.childNodes).reverse().forEach(function(e){try{var n=l(e);t.insertBefore(n,t.children.head||void 0)}catch(t){if(t instanceof s.ParchmentError)return;throw t}})},e.prototype.deleteAt=function(t,e){if(0===t&&e===this.length())return this.remove();this.children.forEachAt(t,e,function(t,e,n){t.deleteAt(e,n)})},e.prototype.descendant=function(t,n){var r=this.children.find(n),o=r[0],i=r[1];return null==t.blotName&&t(o)||null!=t.blotName&&o instanceof t?[o,i]:o instanceof e?o.descendant(t,i):[null,-1]},e.prototype.descendants=function(t,n,r){void 0===n&&(n=0),void 0===r&&(r=Number.MAX_VALUE);var o=[],i=r;return this.children.forEachAt(n,r,function(n,r,a){(null==t.blotName&&t(n)||null!=t.blotName&&n instanceof t)&&o.push(n),n instanceof e&&(o=o.concat(n.descendants(t,r,i))),i-=a}),o},e.prototype.detach=function(){this.children.forEach(function(t){t.detach()}),t.prototype.detach.call(this)},e.prototype.formatAt=function(t,e,n,r){this.children.forEachAt(t,e,function(t,e,o){t.formatAt(e,o,n,r)})},e.prototype.insertAt=function(t,e,n){var r=this.children.find(t),o=r[0],i=r[1];if(o)o.insertAt(i,e,n);else{var a=null==n?s.create("text",e):s.create(e,n);this.appendChild(a)}},e.prototype.insertBefore=function(t,e){if(null!=this.statics.allowedChildren&&!this.statics.allowedChildren.some(function(e){return t instanceof e}))throw new s.ParchmentError("Cannot insert "+t.statics.blotName+" into "+this.statics.blotName);t.insertInto(this,e)},e.prototype.length=function(){return this.children.reduce(function(t,e){return t+e.length()},0)},e.prototype.moveChildren=function(t,e){this.children.forEach(function(n){t.insertBefore(n,e)})},e.prototype.optimize=function(e){if(t.prototype.optimize.call(this,e),0===this.children.length)if(null!=this.statics.defaultChild){var n=s.create(this.statics.defaultChild);this.appendChild(n),n.optimize(e)}else this.remove()},e.prototype.path=function(t,n){void 0===n&&(n=!1);var r=this.children.find(t,n),o=r[0],i=r[1],a=[[this,t]];return o instanceof e?a.concat(o.path(i,n)):(null!=o&&a.push([o,i]),a)},e.prototype.removeChild=function(t){this.children.remove(t)},e.prototype.replace=function(n){n instanceof e&&n.moveChildren(this),t.prototype.replace.call(this,n)},e.prototype.split=function(t,e){if(void 0===e&&(e=!1),!e){if(0===t)return this;if(t===this.length())return this.next}var n=this.clone();return this.parent.insertBefore(n,this.next),this.children.forEachAt(t,this.length(),function(t,r,o){t=t.split(r,e),n.appendChild(t)}),n},e.prototype.unwrap=function(){this.moveChildren(this.parent,this.next),this.remove()},e.prototype.update=function(t,e){var n=this,r=[],o=[];t.forEach(function(t){t.target===n.domNode&&"childList"===t.type&&(r.push.apply(r,t.addedNodes),o.push.apply(o,t.removedNodes))}),o.forEach(function(t){if(!(null!=t.parentNode&&"IFRAME"!==t.tagName&&document.body.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY)){var e=s.find(t);null!=e&&(null!=e.domNode.parentNode&&e.domNode.parentNode!==n.domNode||e.detach())}}),r.filter(function(t){return t.parentNode==n.domNode}).sort(function(t,e){return t===e?0:t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING?1:-1}).forEach(function(t){var e=null;null!=t.nextSibling&&(e=s.find(t.nextSibling));var r=l(t);r.next==e&&null!=r.next||(null!=r.parent&&r.parent.removeChild(n),n.insertBefore(r,e||void 0))})},e}(a.default);function l(t){var e=s.find(t);if(null==e)try{e=s.create(t)}catch(n){e=s.create(s.Scope.INLINE),[].slice.call(t.childNodes).forEach(function(t){e.domNode.appendChild(t)}),t.parentNode&&t.parentNode.replaceChild(e.domNode,t),e.attach()}return e}e.default=u},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(1),a=n(6),s=n(2),u=n(0),l=function(t){function e(e){var n=t.call(this,e)||this;return n.attributes=new a.default(n.domNode),n}return o(e,t),e.formats=function(t){return"string"==typeof this.tagName||(Array.isArray(this.tagName)?t.tagName.toLowerCase():void 0)},e.prototype.format=function(t,e){var n=u.query(t);n instanceof i.default?this.attributes.attribute(n,e):e&&(null==n||t===this.statics.blotName&&this.formats()[t]===e||this.replaceWith(t,e))},e.prototype.formats=function(){var t=this.attributes.values(),e=this.statics.formats(this.domNode);return null!=e&&(t[this.statics.blotName]=e),t},e.prototype.replaceWith=function(e,n){var r=t.prototype.replaceWith.call(this,e,n);return this.attributes.copy(r),r},e.prototype.update=function(e,n){var r=this;t.prototype.update.call(this,e,n),e.some(function(t){return t.target===r.domNode&&"attributes"===t.type})&&this.attributes.build()},e.prototype.wrap=function(n,r){var o=t.prototype.wrap.call(this,n,r);return o instanceof e&&o.statics.scope===this.statics.scope&&this.attributes.move(o),o},e}(s.default);e.default=l},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(5),a=n(0),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.value=function(t){return!0},e.prototype.index=function(t,e){return this.domNode===t||this.domNode.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY?Math.min(e,1):-1},e.prototype.position=function(t,e){var n=[].indexOf.call(this.parent.domNode.childNodes,this.domNode);return t>0&&(n+=1),[this.parent.domNode,n]},e.prototype.value=function(){return(t={})[this.statics.blotName]=this.statics.value(this.domNode)||!0,t;var t},e.scope=a.Scope.INLINE_BLOT,e}(i.default);e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),o=function(){function t(t){this.domNode=t,this.domNode[r.DATA_KEY]={blot:this}}return Object.defineProperty(t.prototype,"statics",{get:function(){return this.constructor},enumerable:!0,configurable:!0}),t.create=function(t){if(null==this.tagName)throw new r.ParchmentError("Blot definition missing tagName");var e;return Array.isArray(this.tagName)?("string"==typeof t&&(t=t.toUpperCase(),parseInt(t).toString()===t&&(t=parseInt(t))),e="number"==typeof t?document.createElement(this.tagName[t-1]):this.tagName.indexOf(t)>-1?document.createElement(t):document.createElement(this.tagName[0])):e=document.createElement(this.tagName),this.className&&e.classList.add(this.className),e},t.prototype.attach=function(){null!=this.parent&&(this.scroll=this.parent.scroll)},t.prototype.clone=function(){var t=this.domNode.cloneNode(!1);return r.create(t)},t.prototype.detach=function(){null!=this.parent&&this.parent.removeChild(this),delete this.domNode[r.DATA_KEY]},t.prototype.deleteAt=function(t,e){this.isolate(t,e).remove()},t.prototype.formatAt=function(t,e,n,o){var i=this.isolate(t,e);if(null!=r.query(n,r.Scope.BLOT)&&o)i.wrap(n,o);else if(null!=r.query(n,r.Scope.ATTRIBUTE)){var a=r.create(this.statics.scope);i.wrap(a),a.format(n,o)}},t.prototype.insertAt=function(t,e,n){var o=null==n?r.create("text",e):r.create(e,n),i=this.split(t);this.parent.insertBefore(o,i)},t.prototype.insertInto=function(t,e){void 0===e&&(e=null),null!=this.parent&&this.parent.children.remove(this);var n=null;t.children.insertBefore(this,e),null!=e&&(n=e.domNode),this.domNode.parentNode==t.domNode&&this.domNode.nextSibling==n||t.domNode.insertBefore(this.domNode,n),this.parent=t,this.attach()},t.prototype.isolate=function(t,e){var n=this.split(t);return n.split(e),n},t.prototype.length=function(){return 1},t.prototype.offset=function(t){return void 0===t&&(t=this.parent),null==this.parent||this==t?0:this.parent.children.offset(this)+this.parent.offset(t)},t.prototype.optimize=function(t){null!=this.domNode[r.DATA_KEY]&&delete this.domNode[r.DATA_KEY].mutations},t.prototype.remove=function(){null!=this.domNode.parentNode&&this.domNode.parentNode.removeChild(this.domNode),this.detach()},t.prototype.replace=function(t){null!=t.parent&&(t.parent.insertBefore(this,t.next),t.remove())},t.prototype.replaceWith=function(t,e){var n="string"==typeof t?r.create(t,e):t;return n.replace(this),n},t.prototype.split=function(t,e){return 0===t?this:this.next},t.prototype.update=function(t,e){},t.prototype.wrap=function(t,e){var n="string"==typeof t?r.create(t,e):t;return null!=this.parent&&this.parent.insertBefore(n,this.next),n.appendChild(this),n},t.blotName="abstract",t}();e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),o=n(7),i=n(8),a=n(0),s=function(){function t(t){this.attributes={},this.domNode=t,this.build()}return t.prototype.attribute=function(t,e){e?t.add(this.domNode,e)&&(null!=t.value(this.domNode)?this.attributes[t.attrName]=t:delete this.attributes[t.attrName]):(t.remove(this.domNode),delete this.attributes[t.attrName])},t.prototype.build=function(){var t=this;this.attributes={};var e=r.default.keys(this.domNode),n=o.default.keys(this.domNode),s=i.default.keys(this.domNode);e.concat(n).concat(s).forEach(function(e){var n=a.query(e,a.Scope.ATTRIBUTE);n instanceof r.default&&(t.attributes[n.attrName]=n)})},t.prototype.copy=function(t){var e=this;Object.keys(this.attributes).forEach(function(n){var r=e.attributes[n].value(e.domNode);t.format(n,r)})},t.prototype.move=function(t){var e=this;this.copy(t),Object.keys(this.attributes).forEach(function(t){e.attributes[t].remove(e.domNode)}),this.attributes={}},t.prototype.values=function(){var t=this;return Object.keys(this.attributes).reduce(function(e,n){return e[n]=t.attributes[n].value(t.domNode),e},{})},t}();e.default=s},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});function i(t,e){return(t.getAttribute("class")||"").split(/\s+/).filter(function(t){return 0===t.indexOf(e+"-")})}Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.keys=function(t){return(t.getAttribute("class")||"").split(/\s+/).map(function(t){return t.split("-").slice(0,-1).join("-")})},e.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(this.remove(t),t.classList.add(this.keyName+"-"+e),!0)},e.prototype.remove=function(t){i(t,this.keyName).forEach(function(e){t.classList.remove(e)}),0===t.classList.length&&t.removeAttribute("class")},e.prototype.value=function(t){var e=(i(t,this.keyName)[0]||"").slice(this.keyName.length+1);return this.canAdd(t,e)?e:""},e}(n(1).default);e.default=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});function i(t){var e=t.split("-"),n=e.slice(1).map(function(t){return t[0].toUpperCase()+t.slice(1)}).join("");return e[0]+n}Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.keys=function(t){return(t.getAttribute("style")||"").split(";").map(function(t){return t.split(":")[0].trim()})},e.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(t.style[i(this.keyName)]=e,!0)},e.prototype.remove=function(t){t.style[i(this.keyName)]="",t.getAttribute("style")||t.removeAttribute("style")},e.prototype.value=function(t){var e=t.style[i(this.keyName)];return this.canAdd(t,e)?e:""},e}(n(1).default);e.default=a},function(t,e,n){t.exports=n(10)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(2),o=n(3),i=n(4),a=n(12),s=n(13),u=n(14),l=n(15),c=n(16),f=n(1),p=n(7),h=n(8),d=n(6),v=n(0),y={Scope:v.Scope,create:v.create,find:v.find,query:v.query,register:v.register,Container:r.default,Format:o.default,Leaf:i.default,Embed:l.default,Scroll:a.default,Block:u.default,Inline:s.default,Text:c.default,Attributor:{Attribute:f.default,Class:p.default,Style:h.default,Store:d.default}};e.default=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){this.head=this.tail=null,this.length=0}return t.prototype.append=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.insertBefore(t[0],null),t.length>1&&this.append.apply(this,t.slice(1))},t.prototype.contains=function(t){for(var e,n=this.iterator();e=n();)if(e===t)return!0;return!1},t.prototype.insertBefore=function(t,e){t&&(t.next=e,null!=e?(t.prev=e.prev,null!=e.prev&&(e.prev.next=t),e.prev=t,e===this.head&&(this.head=t)):null!=this.tail?(this.tail.next=t,t.prev=this.tail,this.tail=t):(t.prev=null,this.head=this.tail=t),this.length+=1)},t.prototype.offset=function(t){for(var e=0,n=this.head;null!=n;){if(n===t)return e;e+=n.length(),n=n.next}return-1},t.prototype.remove=function(t){this.contains(t)&&(null!=t.prev&&(t.prev.next=t.next),null!=t.next&&(t.next.prev=t.prev),t===this.head&&(this.head=t.next),t===this.tail&&(this.tail=t.prev),this.length-=1)},t.prototype.iterator=function(t){return void 0===t&&(t=this.head),function(){var e=t;return null!=t&&(t=t.next),e}},t.prototype.find=function(t,e){void 0===e&&(e=!1);for(var n,r=this.iterator();n=r();){var o=n.length();if(t<o||e&&t===o&&(null==n.next||0!==n.next.length()))return[n,t];t-=o}return[null,0]},t.prototype.forEach=function(t){for(var e,n=this.iterator();e=n();)t(e)},t.prototype.forEachAt=function(t,e,n){if(!(e<=0))for(var r,o=this.find(t),i=o[0],a=t-o[1],s=this.iterator(i);(r=s())&&a<t+e;){var u=r.length();t>a?n(r,t-a,Math.min(e,a+u-t)):n(r,0,Math.min(u,t+e-a)),a+=u}},t.prototype.map=function(t){return this.reduce(function(e,n){return e.push(t(n)),e},[])},t.prototype.reduce=function(t,e){for(var n,r=this.iterator();n=r();)e=t(e,n);return e},t}();e.default=r},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),a=n(0),s={attributes:!0,characterData:!0,characterDataOldValue:!0,childList:!0,subtree:!0},u=function(t){function e(e){var n=t.call(this,e)||this;return n.scroll=n,n.observer=new MutationObserver(function(t){n.update(t)}),n.observer.observe(n.domNode,s),n.attach(),n}return o(e,t),e.prototype.detach=function(){t.prototype.detach.call(this),this.observer.disconnect()},e.prototype.deleteAt=function(e,n){this.update(),0===e&&n===this.length()?this.children.forEach(function(t){t.remove()}):t.prototype.deleteAt.call(this,e,n)},e.prototype.formatAt=function(e,n,r,o){this.update(),t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.insertAt=function(e,n,r){this.update(),t.prototype.insertAt.call(this,e,n,r)},e.prototype.optimize=function(e,n){var r=this;void 0===e&&(e=[]),void 0===n&&(n={}),t.prototype.optimize.call(this,n);for(var o=[].slice.call(this.observer.takeRecords());o.length>0;)e.push(o.pop());for(var s=function(t,e){void 0===e&&(e=!0),null!=t&&t!==r&&null!=t.domNode.parentNode&&(null==t.domNode[a.DATA_KEY].mutations&&(t.domNode[a.DATA_KEY].mutations=[]),e&&s(t.parent))},u=function(t){null!=t.domNode[a.DATA_KEY]&&null!=t.domNode[a.DATA_KEY].mutations&&(t instanceof i.default&&t.children.forEach(u),t.optimize(n))},l=e,c=0;l.length>0;c+=1){if(c>=100)throw new Error("[Parchment] Maximum optimize iterations reached");for(l.forEach(function(t){var e=a.find(t.target,!0);null!=e&&(e.domNode===t.target&&("childList"===t.type?(s(a.find(t.previousSibling,!1)),[].forEach.call(t.addedNodes,function(t){var e=a.find(t,!1);s(e,!1),e instanceof i.default&&e.children.forEach(function(t){s(t,!1)})})):"attributes"===t.type&&s(e.prev)),s(e))}),this.children.forEach(u),o=(l=[].slice.call(this.observer.takeRecords())).slice();o.length>0;)e.push(o.pop())}},e.prototype.update=function(e,n){var r=this;void 0===n&&(n={}),(e=e||this.observer.takeRecords()).map(function(t){var e=a.find(t.target,!0);return null==e?null:null==e.domNode[a.DATA_KEY].mutations?(e.domNode[a.DATA_KEY].mutations=[t],e):(e.domNode[a.DATA_KEY].mutations.push(t),null)}).forEach(function(t){null!=t&&t!==r&&null!=t.domNode[a.DATA_KEY]&&t.update(t.domNode[a.DATA_KEY].mutations||[],n)}),null!=this.domNode[a.DATA_KEY].mutations&&t.prototype.update.call(this,this.domNode[a.DATA_KEY].mutations,n),this.optimize(e,n)},e.blotName="scroll",e.defaultChild="block",e.scope=a.Scope.BLOCK_BLOT,e.tagName="DIV",e}(i.default);e.default=u},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(3),a=n(0);var s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.formats=function(n){if(n.tagName!==e.tagName)return t.formats.call(this,n)},e.prototype.format=function(n,r){var o=this;n!==this.statics.blotName||r?t.prototype.format.call(this,n,r):(this.children.forEach(function(t){t instanceof i.default||(t=t.wrap(e.blotName,!0)),o.attributes.copy(t)}),this.unwrap())},e.prototype.formatAt=function(e,n,r,o){null!=this.formats()[r]||a.query(r,a.Scope.ATTRIBUTE)?this.isolate(e,n).format(r,o):t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.optimize=function(n){t.prototype.optimize.call(this,n);var r=this.formats();if(0===Object.keys(r).length)return this.unwrap();var o=this.next;o instanceof e&&o.prev===this&&function(t,e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(var n in t)if(t[n]!==e[n])return!1;return!0}(r,o.formats())&&(o.moveChildren(this),o.remove())},e.blotName="inline",e.scope=a.Scope.INLINE_BLOT,e.tagName="SPAN",e}(i.default);e.default=s},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(3),a=n(0),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.formats=function(n){var r=a.query(e.blotName).tagName;if(n.tagName!==r)return t.formats.call(this,n)},e.prototype.format=function(n,r){null!=a.query(n,a.Scope.BLOCK)&&(n!==this.statics.blotName||r?t.prototype.format.call(this,n,r):this.replaceWith(e.blotName))},e.prototype.formatAt=function(e,n,r,o){null!=a.query(r,a.Scope.BLOCK)?this.format(r,o):t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.insertAt=function(e,n,r){if(null==r||null!=a.query(n,a.Scope.INLINE))t.prototype.insertAt.call(this,e,n,r);else{var o=this.split(e),i=a.create(n,r);o.parent.insertBefore(i,o)}},e.prototype.update=function(e,n){navigator.userAgent.match(/Trident/)?this.build():t.prototype.update.call(this,e,n)},e.blotName="block",e.scope=a.Scope.BLOCK_BLOT,e.tagName="P",e}(i.default);e.default=s},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.formats=function(t){},e.prototype.format=function(e,n){t.prototype.formatAt.call(this,0,this.length(),e,n)},e.prototype.formatAt=function(e,n,r,o){0===e&&n===this.length()?this.format(r,o):t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.formats=function(){return this.statics.formats(this.domNode)},e}(n(4).default);e.default=i},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(4),a=n(0),s=function(t){function e(e){var n=t.call(this,e)||this;return n.text=n.statics.value(n.domNode),n}return o(e,t),e.create=function(t){return document.createTextNode(t)},e.value=function(t){var e=t.data;return e.normalize&&(e=e.normalize()),e},e.prototype.deleteAt=function(t,e){this.domNode.data=this.text=this.text.slice(0,t)+this.text.slice(t+e)},e.prototype.index=function(t,e){return this.domNode===t?e:-1},e.prototype.insertAt=function(e,n,r){null==r?(this.text=this.text.slice(0,e)+n+this.text.slice(e),this.domNode.data=this.text):t.prototype.insertAt.call(this,e,n,r)},e.prototype.length=function(){return this.text.length},e.prototype.optimize=function(n){t.prototype.optimize.call(this,n),this.text=this.statics.value(this.domNode),0===this.text.length?this.remove():this.next instanceof e&&this.next.prev===this&&(this.insertAt(this.length(),this.next.value()),this.next.remove())},e.prototype.position=function(t,e){return void 0===e&&(e=!1),[this.domNode,t]},e.prototype.split=function(t,e){if(void 0===e&&(e=!1),!e){if(0===t)return this;if(t===this.length())return this.next}var n=a.create(this.domNode.splitText(t));return this.parent.insertBefore(n,this.next),this.text=this.statics.value(this.domNode),n},e.prototype.update=function(t,e){var n=this;t.some(function(t){return"characterData"===t.type&&t.target===n.domNode})&&(this.text=this.statics.value(this.domNode))},e.prototype.value=function(){return this.text},e.blotName="text",e.scope=a.Scope.INLINE_BLOT,e}(i.default);e.default=s}])},t.exports=r()},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e){e.read=function(t,e,n,r,o){var i,a,s=8*o-r-1,u=(1<<s)-1,l=u>>1,c=-7,f=n?o-1:0,p=n?-1:1,h=t[e+f];for(f+=p,i=h&(1<<-c)-1,h>>=-c,c+=s;c>0;i=256*i+t[e+f],f+=p,c-=8);for(a=i&(1<<-c)-1,i>>=-c,c+=r;c>0;a=256*a+t[e+f],f+=p,c-=8);if(0===i)i=1-l;else{if(i===u)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,r),i-=l}return(h?-1:1)*a*Math.pow(2,i-r)},e.write=function(t,e,n,r,o,i){var a,s,u,l=8*i-o-1,c=(1<<l)-1,f=c>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:i-1,d=r?1:-1,v=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=c):(a=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-a))<1&&(a--,u*=2),(e+=a+f>=1?p/u:p*Math.pow(2,1-f))*u>=2&&(a++,u/=2),a+f>=c?(s=0,a=c):a+f>=1?(s=(e*u-1)*Math.pow(2,o),a+=f):(s=e*Math.pow(2,f-1)*Math.pow(2,o),a=0));o>=8;t[n+h]=255&s,h+=d,s/=256,o-=8);for(a=a<<o|s,l+=o;l>0;t[n+h]=255&a,h+=d,a/=256,l-=8);t[n+h-d]|=128*v}},function(t,e,n){"use strict";e.byteLength=function(t){return 3*t.length/4-l(t)},e.toByteArray=function(t){var e,n,r,a,s,u=t.length;a=l(t),s=new i(3*u/4-a),n=a>0?u-4:u;var c=0;for(e=0;e<n;e+=4)r=o[t.charCodeAt(e)]<<18|o[t.charCodeAt(e+1)]<<12|o[t.charCodeAt(e+2)]<<6|o[t.charCodeAt(e+3)],s[c++]=r>>16&255,s[c++]=r>>8&255,s[c++]=255&r;2===a?(r=o[t.charCodeAt(e)]<<2|o[t.charCodeAt(e+1)]>>4,s[c++]=255&r):1===a&&(r=o[t.charCodeAt(e)]<<10|o[t.charCodeAt(e+1)]<<4|o[t.charCodeAt(e+2)]>>2,s[c++]=r>>8&255,s[c++]=255&r);return s},e.fromByteArray=function(t){for(var e,n=t.length,o=n%3,i="",a=[],s=0,u=n-o;s<u;s+=16383)a.push(c(t,s,s+16383>u?u:s+16383));1===o?(e=t[n-1],i+=r[e>>2],i+=r[e<<4&63],i+="=="):2===o&&(e=(t[n-2]<<8)+t[n-1],i+=r[e>>10],i+=r[e>>4&63],i+=r[e<<2&63],i+="=");return a.push(i),a.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)r[s]=a[s],o[a.charCodeAt(s)]=s;function l(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===t[e-2]?2:"="===t[e-1]?1:0}function c(t,e,n){for(var o,i,a=[],s=e;s<n;s+=3)o=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),a.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(228),o=n(227),i=n(226);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(a()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return l(this,t,e,n)}function l(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=p(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(e,n),o=(t=s(t,r)).write(e,n);o!==r&&(t=t.slice(0,o));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|h(e.length);return 0===(t=s(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?s(t,0):p(t,e);if("Buffer"===e.type&&i(e.data))return p(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(c(e),t=s(t,e<0?0:0|h(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function p(t,e){var n=e.length<0?0:0|h(e.length);t=s(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function h(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return F(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return U(t).length;default:if(r)return F(t).length;e=(""+e).toLowerCase(),r=!0}}function v(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function y(t,e,n,r,o){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(o)return-1;n=t.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:g(t,e,n,r,o);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):g(t,[e],n,r,o);throw new TypeError("val must be string, number or Buffer")}function g(t,e,n,r,o){var i,a=1,s=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,s/=2,u/=2,n/=2}function l(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(o){var c=-1;for(i=n;i<s;i++)if(l(t,i)===l(e,-1===c?0:i-c)){if(-1===c&&(c=i),i-c+1===u)return c*a}else-1!==c&&(i-=i-c),c=-1}else for(n+u>s&&(n=s-u),i=n;i>=0;i--){for(var f=!0,p=0;p<u;p++)if(l(t,i+p)!==l(e,p)){f=!1;break}if(f)return i}return-1}function m(t,e,n,r){n=Number(n)||0;var o=t.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var s=parseInt(e.substr(2*a,2),16);if(isNaN(s))return a;t[n+a]=s}return a}function b(t,e,n,r){return $(F(e,t.length-n),t,n,r)}function _(t,e,n,r){return $(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function w(t,e,n,r){return _(t,e,n,r)}function x(t,e,n,r){return $(U(e),t,n,r)}function O(t,e,n,r){return $(function(t,e){for(var n,r,o,i=[],a=0;a<t.length&&!((e-=2)<0);++a)n=t.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(e,t.length-n),t,n,r)}function E(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function A(t,e,n){n=Math.min(t.length,n);for(var r=[],o=e;o<n;){var i,a,s,u,l=t[o],c=null,f=l>239?4:l>223?3:l>191?2:1;if(o+f<=n)switch(f){case 1:l<128&&(c=l);break;case 2:128==(192&(i=t[o+1]))&&(u=(31&l)<<6|63&i)>127&&(c=u);break;case 3:i=t[o+1],a=t[o+2],128==(192&i)&&128==(192&a)&&(u=(15&l)<<12|(63&i)<<6|63&a)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:i=t[o+1],a=t[o+2],s=t[o+3],128==(192&i)&&128==(192&a)&&128==(192&s)&&(u=(15&l)<<18|(63&i)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(c=u)}null===c?(c=65533,f=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),o+=f}return function(t){var e=t.length;if(e<=k)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=k));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=a(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return l(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return c(e),e<=0?s(t,e):void 0!==n?"string"==typeof r?s(t,e).fill(n,r):s(t,e).fill(n):s(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return f(null,t)},u.allocUnsafeSlow=function(t){return f(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),o=0;for(n=0;n<t.length;++n){var a=t[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)v(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)v(this,e,e+3),v(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)v(this,e,e+7),v(this,e+1,e+6),v(this,e+2,e+5),v(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?A(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return j(this,e,n);case"utf8":case"utf-8":return A(this,e,n);case"ascii":return N(this,e,n);case"latin1":case"binary":return S(this,e,n);case"base64":return E(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,o){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),e<0||n>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&e>=n)return 0;if(r>=o)return-1;if(e>=n)return 1;if(e>>>=0,n>>>=0,r>>>=0,o>>>=0,this===t)return 0;for(var i=o-r,a=n-e,s=Math.min(i,a),l=this.slice(r,o),c=t.slice(e,n),f=0;f<s;++f)if(l[f]!==c[f]){i=l[f],a=c[f];break}return i<a?-1:a<i?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return y(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return y(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return m(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return _(this,t,e,n);case"latin1":case"binary":return w(this,t,e,n);case"base64":return x(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var k=4096;function N(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function S(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function j(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=e;i<n;++i)o+=D(t[i]);return o}function T(t,e,n){for(var r=t.slice(e,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function P(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function C(t,e,n,r,o,i){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function L(t,e,n,r){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-n,2);o<i;++o)t[n+o]=(e&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function q(t,e,n,r){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-n,4);o<i;++o)t[n+o]=e>>>8*(r?o:3-o)&255}function M(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function I(t,e,n,r,i){return i||M(t,0,n,4),o.write(t,e,n,r,23,4),n+4}function R(t,e,n,r,i){return i||M(t,0,n,8),o.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if(t=~~t,e=void 0===e?r:~~e,t<0?(t+=r)<0&&(t=0):t>r&&(t=r),e<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var o=e-t;n=new u(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||P(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||P(t,e,this.length);for(var r=this[t+--e],o=1;e>0&&(o*=256);)r+=this[t+--e]*o;return r},u.prototype.readUInt8=function(t,e){return e||P(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||P(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||P(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||P(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||P(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||P(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||P(t,e,this.length);for(var r=e,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},u.prototype.readInt8=function(t,e){return e||P(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||P(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||P(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||P(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||P(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||P(t,4,this.length),o.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||P(t,4,this.length),o.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||P(t,8,this.length),o.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||P(t,8,this.length),o.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||C(this,t,e,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[e]=255&t;++i<n&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||C(this,t,e,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):L(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):L(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):q(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):q(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);C(this,t,e,n,o-1,-o)}var i=0,a=1,s=0;for(this[e]=255&t;++i<n&&(a*=256);)t<0&&0===s&&0!==this[e+i-1]&&(s=1),this[e+i]=(t/a>>0)-s&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);C(this,t,e,n,o-1,-o)}var i=n-1,a=1,s=0;for(this[e+i]=255&t;--i>=0&&(a*=256);)t<0&&0===s&&0!==this[e+i+1]&&(s=1),this[e+i]=(t/a>>0)-s&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):L(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):L(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):q(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):q(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return I(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return I(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return R(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return R(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var o,i=r-n;if(this===t&&n<e&&e<r)for(o=i-1;o>=0;--o)t[o+e]=this[o+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+i),e);return i},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else{var a=u.isBuffer(t)?t:F(new u(t,r).toString()),s=a.length;for(i=0;i<n-e;++i)this[i+e]=a[i%s]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function D(t){return t<16?"0"+t.toString(16):t.toString(16)}function F(t,e){var n;e=e||1/0;for(var r=t.length,o=null,i=[],a=0;a<r;++a){if((n=t.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function U(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(B,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function $(t,e,n,r){for(var o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}}).call(this,n(44))},function(t,e){t.exports=function(t,e){var n=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,n)}}},function(t,e,n){var r=n(0),o=n(230)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return o(t)}})},function(t,e,n){n(231),t.exports=n(27).RegExp.escape},function(t,e,n){(function(e){!function(e){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag",l="object"==typeof t,c=e.regeneratorRuntime;if(c)l&&(t.exports=c);else{(c=e.regeneratorRuntime=l?t.exports:{}).wrap=_;var f="suspendedStart",p="suspendedYield",h="executing",d="completed",v={},y={};y[a]=function(){return this};var g=Object.getPrototypeOf,m=g&&g(g(P([])));m&&m!==r&&o.call(m,a)&&(y=m);var b=E.prototype=x.prototype=Object.create(y);O.prototype=b.constructor=E,E.constructor=O,E[u]=O.displayName="GeneratorFunction",c.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===O||"GeneratorFunction"===(e.displayName||e.name))},c.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,E):(t.__proto__=E,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(b),t},c.awrap=function(t){return{__await:t}},A(k.prototype),k.prototype[s]=function(){return this},c.AsyncIterator=k,c.async=function(t,e,n,r){var o=new k(_(t,e,n,r));return c.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},A(b),b[u]="Generator",b[a]=function(){return this},b.toString=function(){return"[object Generator]"},c.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},c.values=P,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(j),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,o){return s.type="throw",s.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var u=o.call(a,"catchLoc"),l=o.call(a,"finallyLoc");if(u&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),j(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:P(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function _(t,e,n,r){var o=e&&e.prototype instanceof x?e:x,i=Object.create(o.prototype),a=new T(r||[]);return i._invoke=function(t,e,n){var r=f;return function(o,i){if(r===h)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return C()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=N(a,n);if(s){if(s===v)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var u=w(t,e,n);if("normal"===u.type){if(r=n.done?d:p,u.arg===v)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=d,n.method="throw",n.arg=u.arg)}}}(t,n,a),i}function w(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function x(){}function O(){}function E(){}function A(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function k(t){function n(e,r,i,a){var s=w(t[e],t,r);if("throw"!==s.type){var u=s.arg,l=u.value;return l&&"object"==typeof l&&o.call(l,"__await")?Promise.resolve(l.__await).then(function(t){n("next",t,i,a)},function(t){n("throw",t,i,a)}):Promise.resolve(l).then(function(t){u.value=t,i(u)},a)}a(s.arg)}var r;"object"==typeof e.process&&e.process.domain&&(n=e.process.domain.bind(n)),this._invoke=function(t,e){function o(){return new Promise(function(r,o){n(t,e,r,o)})}return r=r?r.then(o,o):o()}}function N(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,N(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=w(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,v;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function j(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function P(t){if(t){var e=t[a];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(o.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return i.next=i}}return{next:C}}function C(){return{value:n,done:!0}}}("object"==typeof e?e:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,n(44))},function(t,e,n){for(var r=n(81),o=n(40),i=n(12),a=n(2),s=n(13),u=n(46),l=n(5),c=l("iterator"),f=l("toStringTag"),p=u.Array,h={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=o(h),v=0;v<d.length;v++){var y,g=d[v],m=h[g],b=a[g],_=b&&b.prototype;if(_&&(_[c]||s(_,c,p),_[f]||s(_,f,g),u[g]=p,m))for(y in r)_[y]||i(_,y,r[y],!0)}},function(t,e,n){var r=n(0),o=n(80);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(t,e,n){var r=n(2),o=n(0),i=n(76),a=[].slice,s=/MSIE .\./.test(i),u=function(t){return function(e,n){var r=arguments.length>2,o=!!r&&a.call(arguments,2);return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,o)}:e,n)}};o(o.G+o.B+o.F*s,{setTimeout:u(r.setTimeout),setInterval:u(r.setInterval)})},function(t,e,n){"use strict";var r=n(0),o=n(2),i=n(27),a=n(79)(),s=n(5)("observable"),u=n(10),l=n(1),c=n(35),f=n(33),p=n(13),h=n(34),d=h.RETURN,v=function(t){return null==t?void 0:u(t)},y=function(t){var e=t._c;e&&(t._c=void 0,e())},g=function(t){return void 0===t._o},m=function(t){g(t)||(t._o=void 0,y(t))},b=function(t,e){l(t),this._c=void 0,this._o=t,t=new _(this);try{var n=e(t),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:u(n),this._c=n)}catch(e){return void t.error(e)}g(this)&&y(this)};b.prototype=f({},{unsubscribe:function(){m(this)}});var _=function(t){this._s=t};_.prototype=f({},{next:function(t){var e=this._s;if(!g(e)){var n=e._o;try{var r=v(n.next);if(r)return r.call(n,t)}catch(t){try{m(e)}finally{throw t}}}},error:function(t){var e=this._s;if(g(e))throw t;var n=e._o;e._o=void 0;try{var r=v(n.error);if(!r)throw t;t=r.call(n,t)}catch(t){try{y(e)}finally{throw t}}return y(e),t},complete:function(t){var e=this._s;if(!g(e)){var n=e._o;e._o=void 0;try{var r=v(n.complete);t=r?r.call(n,t):void 0}catch(t){try{y(e)}finally{throw t}}return y(e),t}}});var w=function(t){c(this,w,"Observable","_f")._f=u(t)};f(w.prototype,{subscribe:function(t){return new b(t,this._f)},forEach:function(t){var e=this;return new(i.Promise||o.Promise)(function(n,r){u(t);var o=e.subscribe({next:function(e){try{return t(e)}catch(t){r(t),o.unsubscribe()}},error:r,complete:n})})}}),f(w,{from:function(t){var e="function"==typeof this?this:w,n=v(l(t)[s]);if(n){var r=l(n.call(t));return r.constructor===e?r:new e(function(t){return r.subscribe(t)})}return new e(function(e){var n=!1;return a(function(){if(!n){try{if(h(t,!1,function(t){if(e.next(t),n)return d})===d)return}catch(t){if(n)throw t;return void e.error(t)}e.complete()}}),function(){n=!0}})},of:function(){for(var t=0,e=arguments.length,n=new Array(e);t<e;)n[t]=arguments[t++];return new("function"==typeof this?this:w)(function(t){var e=!1;return a(function(){if(!e){for(var r=0;r<n.length;++r)if(t.next(n[r]),e)return;t.complete()}}),function(){e=!0}})}}),p(w.prototype,s,function(){return this}),r(r.G,{Observable:w}),n(36)("Observable")},function(t,e,n){var r=n(0),o=n(79)(),i=n(2).process,a="process"==n(20)(i);r(r.G,{asap:function(t){var e=a&&i.domain;o(e?e.bind(t):t)}})},function(t,e,n){var r=n(29),o=n(1),i=n(10),a=r.key,s=r.set;r.exp({metadata:function(t,e){return function(n,r){s(t,e,(void 0!==r?o:i)(n),a(r))}}})},function(t,e,n){var r=n(29),o=n(1),i=r.has,a=r.key;r.exp({hasOwnMetadata:function(t,e){return i(t,o(e),arguments.length<3?void 0:a(arguments[2]))}})},function(t,e,n){var r=n(29),o=n(1),i=n(16),a=r.has,s=r.key,u=function(t,e,n){if(a(t,e,n))return!0;var r=i(e);return null!==r&&u(t,r,n)};r.exp({hasMetadata:function(t,e){return u(t,o(e),arguments.length<3?void 0:s(arguments[2]))}})},function(t,e,n){var r=n(29),o=n(1),i=r.keys,a=r.key;r.exp({getOwnMetadataKeys:function(t){return i(o(t),arguments.length<2?void 0:a(arguments[1]))}})},function(t,e,n){var r=n(29),o=n(1),i=r.get,a=r.key;r.exp({getOwnMetadata:function(t,e){return i(t,o(e),arguments.length<3?void 0:a(arguments[2]))}})},function(t,e,n){var r=n(133),o=n(124),i=n(29),a=n(1),s=n(16),u=i.keys,l=i.key,c=function(t,e){var n=u(t,e),i=s(t);if(null===i)return n;var a=c(i,e);return a.length?n.length?o(new r(n.concat(a))):a:n};i.exp({getMetadataKeys:function(t){return c(a(t),arguments.length<2?void 0:l(arguments[1]))}})},function(t,e,n){var r=n(29),o=n(1),i=n(16),a=r.has,s=r.get,u=r.key,l=function(t,e,n){if(a(t,e,n))return s(t,e,n);var r=i(e);return null!==r?l(t,r,n):void 0};r.exp({getMetadata:function(t,e){return l(t,o(e),arguments.length<3?void 0:u(arguments[2]))}})},function(t,e,n){var r=n(29),o=n(1),i=r.key,a=r.map,s=r.store;r.exp({deleteMetadata:function(t,e){var n=arguments.length<3?void 0:i(arguments[2]),r=a(o(e),n,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var u=s.get(e);return u.delete(n),!!u.size||s.delete(e)}})},function(t,e,n){var r=n(29),o=n(1),i=r.key,a=r.set;r.exp({defineMetadata:function(t,e,n,r){a(t,e,o(n),i(r))}})},function(t,e,n){"use strict";var r=n(0),o=n(78),i=n(137);r(r.S,"Promise",{try:function(t){var e=o.f(this),n=i(t);return(n.e?e.reject:e.resolve)(n.v),e.promise}})},function(t,e,n){"use strict";var r=n(0),o=n(27),i=n(2),a=n(59),s=n(136);r(r.P+r.R,"Promise",{finally:function(t){var e=a(this,o.Promise||i.Promise),n="function"==typeof t;return this.then(n?function(n){return s(e,t()).then(function(){return n})}:t,n?function(n){return s(e,t()).then(function(){throw n})}:t)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,e,n){var r=n(0);r(r.S,"Math",{umulh:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r,a=n>>>16,s=r>>>16,u=(a*i>>>0)+(o*i>>>16);return a*s+(u>>>16)+((o*s>>>0)+(65535&u)>>>16)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{scale:n(123)})},function(t,e,n){var r=n(0),o=Math.PI/180;r(r.S,"Math",{radians:function(t){return t*o}})},function(t,e,n){var r=n(0);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,e,n){var r=n(0);r(r.S,"Math",{imulh:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r,a=n>>16,s=r>>16,u=(a*i>>>0)+(o*i>>>16);return a*s+(u>>16)+((o*s>>>0)+(65535&u)>>16)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{isubh:function(t,e,n,r){var o=t>>>0,i=n>>>0;return(e>>>0)-(r>>>0)-((~o&i|~(o^i)&o-i>>>0)>>>31)|0}})},function(t,e,n){var r=n(0);r(r.S,"Math",{iaddh:function(t,e,n,r){var o=t>>>0,i=n>>>0;return(e>>>0)+(r>>>0)+((o&i|(o|i)&~(o+i>>>0))>>>31)|0}})},function(t,e,n){var r=n(0),o=n(123),i=n(143);r(r.S,"Math",{fscale:function(t,e,n,r,a){return i(o(t,e,n,r,a))}})},function(t,e,n){var r=n(0),o=180/Math.PI;r(r.S,"Math",{degrees:function(t){return t*o}})},function(t,e,n){var r=n(0);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,e,n){var r=n(0);r(r.S,"Math",{clamp:function(t,e,n){return Math.min(n,Math.max(e,t))}})},function(t,e,n){var r=n(0),o=n(20);r(r.S,"Error",{isError:function(t){return"Error"===o(t)}})},function(t,e,n){var r=n(0);r(r.S,"System",{global:n(2)})},function(t,e,n){var r=n(0);r(r.G,{global:n(2)})},function(t,e,n){n(54)("WeakSet")},function(t,e,n){n(54)("WeakMap")},function(t,e,n){n(54)("Set")},function(t,e,n){n(54)("Map")},function(t,e,n){n(55)("WeakSet")},function(t,e,n){n(55)("WeakMap")},function(t,e,n){n(55)("Set")},function(t,e,n){n(55)("Map")},function(t,e,n){var r=n(0);r(r.P+r.R,"Set",{toJSON:n(125)("Set")})},function(t,e,n){var r=n(0);r(r.P+r.R,"Map",{toJSON:n(125)("Map")})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(26),a=n(16),s=n(17).f;n(8)&&r(r.P+n(56),"Object",{__lookupSetter__:function(t){var e,n=o(this),r=i(t,!0);do{if(e=s(n,r))return e.set}while(n=a(n))}})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(26),a=n(16),s=n(17).f;n(8)&&r(r.P+n(56),"Object",{__lookupGetter__:function(t){var e,n=o(this),r=i(t,!0);do{if(e=s(n,r))return e.get}while(n=a(n))}})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(10),a=n(7);n(8)&&r(r.P+n(56),"Object",{__defineSetter__:function(t,e){a.f(o(this),t,{set:i(e),enumerable:!0,configurable:!0})}})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(10),a=n(7);n(8)&&r(r.P+n(56),"Object",{__defineGetter__:function(t,e){a.f(o(this),t,{get:i(e),enumerable:!0,configurable:!0})}})},function(t,e,n){var r=n(0),o=n(126)(!0);r(r.S,"Object",{entries:function(t){return o(t)}})},function(t,e,n){var r=n(0),o=n(126)(!1);r(r.S,"Object",{values:function(t){return o(t)}})},function(t,e,n){var r=n(0),o=n(129),i=n(18),a=n(17),s=n(85);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,n,r=i(t),u=a.f,l=o(r),c={},f=0;l.length>f;)void 0!==(n=u(r,e=l[f++]))&&s(c,e,n);return c}})},function(t,e,n){n(101)("observable")},function(t,e,n){n(101)("asyncIterator")},function(t,e,n){"use strict";var r=n(0),o=n(25),i=n(6),a=n(63),s=n(61),u=RegExp.prototype,l=function(t,e){this._r=t,this._s=e};n(89)(l,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),r(r.P,"String",{matchAll:function(t){if(o(this),!a(t))throw TypeError(t+" is not a regexp!");var e=String(this),n="flags"in u?String(t.flags):s.call(t),r=new RegExp(t.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=i(t.lastIndex),new l(r,e)}})},function(t,e,n){"use strict";n(47)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,e,n){"use strict";n(47)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,e,n){"use strict";var r=n(0),o=n(127),i=n(76);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,n){"use strict";var r=n(0),o=n(127),i=n(76);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,n){"use strict";var r=n(0),o=n(91)(!0);r(r.P,"String",{at:function(t){return o(this,t)}})},function(t,e,n){"use strict";var r=n(0),o=n(128),i=n(9),a=n(6),s=n(24),u=n(83);r(r.P,"Array",{flatten:function(){var t=arguments[0],e=i(this),n=a(e.length),r=u(e,0);return o(r,e,e,n,0,void 0===t?1:s(t)),r}}),n(31)("flatten")},function(t,e,n){"use strict";var r=n(0),o=n(128),i=n(9),a=n(6),s=n(10),u=n(83);r(r.P,"Array",{flatMap:function(t){var e,n,r=i(this);return s(t),e=a(r.length),n=u(r,0),o(n,r,r,e,0,1,t,arguments[1]),n}}),n(31)("flatMap")},function(t,e,n){"use strict";var r=n(0),o=n(66)(!0);r(r.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(31)("includes")},function(t,e,n){var r=n(0),o=n(97);o&&r(r.S,"Reflect",{setPrototypeOf:function(t,e){o.check(t,e);try{return o.set(t,e),!0}catch(t){return!1}}})},function(t,e,n){var r=n(7),o=n(17),i=n(16),a=n(14),s=n(0),u=n(43),l=n(1),c=n(4);s(s.S,"Reflect",{set:function t(e,n,s){var f,p,h=arguments.length<4?e:arguments[3],d=o.f(l(e),n);if(!d){if(c(p=i(e)))return t(p,n,s,h);d=u(0)}return a(d,"value")?!(!1===d.writable||!c(h)||((f=o.f(h,n)||u(0)).value=s,r.f(h,n,f),0)):void 0!==d.set&&(d.set.call(h,s),!0)}})},function(t,e,n){var r=n(0),o=n(1),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){o(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{ownKeys:n(129)})},function(t,e,n){var r=n(0),o=n(1),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return o(t),!i||i(t)}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,n){var r=n(0),o=n(16),i=n(1);r(r.S,"Reflect",{getPrototypeOf:function(t){return o(i(t))}})},function(t,e,n){var r=n(17),o=n(0),i=n(1);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return r.f(i(t),e)}})},function(t,e,n){var r=n(17),o=n(16),i=n(14),a=n(0),s=n(4),u=n(1);a(a.S,"Reflect",{get:function t(e,n){var a,l,c=arguments.length<3?e:arguments[2];return u(e)===c?e[n]:(a=r.f(e,n))?i(a,"value")?a.value:void 0!==a.get?a.get.call(c):void 0:s(l=o(e))?t(l,n,c):void 0}})},function(t,e,n){"use strict";var r=n(0),o=n(1),i=function(t){this._t=o(t),this._i=0;var e,n=this._k=[];for(e in t)n.push(e)};n(89)(i,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new i(t)}})},function(t,e,n){var r=n(0),o=n(17).f,i=n(1);r(r.S,"Reflect",{deleteProperty:function(t,e){var n=o(i(t),e);return!(n&&!n.configurable)&&delete t[e]}})},function(t,e,n){var r=n(7),o=n(0),i=n(1),a=n(26);o(o.S+o.F*n(3)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,n){i(t),e=a(e,!0),i(n);try{return r.f(t,e,n),!0}catch(t){return!1}}})},function(t,e,n){var r=n(0),o=n(38),i=n(10),a=n(1),s=n(4),u=n(3),l=n(150),c=(n(2).Reflect||{}).construct,f=u(function(){function t(){}return!(c(function(){},[],t)instanceof t)}),p=!u(function(){c(function(){})});r(r.S+r.F*(f||p),"Reflect",{construct:function(t,e){i(t),a(e);var n=arguments.length<3?t:i(arguments[2]);if(p&&!f)return c(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(l.apply(t,r))}var u=n.prototype,h=o(s(u)?u:Object.prototype),d=Function.apply.call(t,h,e);return s(d)?d:h}})},function(t,e,n){var r=n(0),o=n(10),i=n(1),a=(n(2).Reflect||{}).apply,s=Function.apply;r(r.S+r.F*!n(3)(function(){a(function(){})}),"Reflect",{apply:function(t,e,n){var r=o(t),u=i(n);return a?a(r,e,u):s.call(r,e,u)}})},function(t,e,n){n(30)("Float64",8,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Float32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Uint32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Int32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Uint16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Int16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}},!0)},function(t,e,n){n(30)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Int8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){var r=n(0);r(r.G+r.W+r.F*!n(57).ABV,{DataView:n(77).DataView})},function(t,e,n){"use strict";var r=n(0),o=n(57),i=n(77),a=n(1),s=n(39),u=n(6),l=n(4),c=n(2).ArrayBuffer,f=n(59),p=i.ArrayBuffer,h=i.DataView,d=o.ABV&&c.isView,v=p.prototype.slice,y=o.VIEW;r(r.G+r.W+r.F*(c!==p),{ArrayBuffer:p}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||l(t)&&y in t}}),r(r.P+r.U+r.F*n(3)(function(){return!new p(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==v&&void 0===e)return v.call(a(this),t);for(var n=a(this).byteLength,r=s(t,n),o=s(void 0===e?n:e,n),i=new(f(this,p))(u(o-r)),l=new h(this),c=new h(i),d=0;r<o;)c.setUint8(d++,l.getUint8(r++));return i}}),n(36)("ArrayBuffer")},function(t,e,n){"use strict";var r=n(131),o=n(45);n(58)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,e,n){"use strict";var r,o,i,a,s=n(41),u=n(2),l=n(21),c=n(51),f=n(0),p=n(4),h=n(10),d=n(35),v=n(34),y=n(59),g=n(80).set,m=n(79)(),b=n(78),_=n(137),w=n(136),x=u.TypeError,O=u.process,E=u.Promise,A="process"==c(O),k=function(){},N=o=b.f,S=!!function(){try{var t=E.resolve(1),e=(t.constructor={})[n(5)("species")]=function(t){t(k,k)};return(A||"function"==typeof PromiseRejectionEvent)&&t.then(k)instanceof e}catch(t){}}(),j=function(t){var e;return!(!p(t)||"function"!=typeof(e=t.then))&&e},T=function(t,e){if(!t._n){t._n=!0;var n=t._c;m(function(){for(var r=t._v,o=1==t._s,i=0,a=function(e){var n,i,a=o?e.ok:e.fail,s=e.resolve,u=e.reject,l=e.domain;try{a?(o||(2==t._h&&L(t),t._h=1),!0===a?n=r:(l&&l.enter(),n=a(r),l&&l.exit()),n===e.promise?u(x("Promise-chain cycle")):(i=j(n))?i.call(n,s,u):s(n)):u(r)}catch(t){u(t)}};n.length>i;)a(n[i++]);t._c=[],t._n=!1,e&&!t._h&&P(t)})}},P=function(t){g.call(u,function(){var e,n,r,o=t._v,i=C(t);if(i&&(e=_(function(){A?O.emit("unhandledRejection",o,t):(n=u.onunhandledrejection)?n({promise:t,reason:o}):(r=u.console)&&r.error&&r.error("Unhandled promise rejection",o)}),t._h=A||C(t)?2:1),t._a=void 0,i&&e.e)throw e.v})},C=function(t){return 1!==t._h&&0===(t._a||t._c).length},L=function(t){g.call(u,function(){var e;A?O.emit("rejectionHandled",t):(e=u.onrejectionhandled)&&e({promise:t,reason:t._v})})},q=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),T(e,!0))},M=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw x("Promise can't be resolved itself");(e=j(t))?m(function(){var r={_w:n,_d:!1};try{e.call(t,l(M,r,1),l(q,r,1))}catch(t){q.call(r,t)}}):(n._v=t,n._s=1,T(n,!1))}catch(t){q.call({_w:n,_d:!1},t)}}};S||(E=function(t){d(this,E,"Promise","_h"),h(t),r.call(this);try{t(l(M,this,1),l(q,this,1))}catch(t){q.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(33)(E.prototype,{then:function(t,e){var n=N(y(this,E));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=A?O.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&T(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r;this.promise=t,this.resolve=l(M,t,1),this.reject=l(q,t,1)},b.f=N=function(t){return t===E||t===a?new i(t):o(t)}),f(f.G+f.W+f.F*!S,{Promise:E}),n(48)(E,"Promise"),n(36)("Promise"),a=n(27).Promise,f(f.S+f.F*!S,"Promise",{reject:function(t){var e=N(this);return(0,e.reject)(t),e.promise}}),f(f.S+f.F*(s||!S),"Promise",{resolve:function(t){return w(s&&this===a?E:this,t)}}),f(f.S+f.F*!(S&&n(62)(function(t){E.all(t).catch(k)})),"Promise",{all:function(t){var e=this,n=N(e),r=n.resolve,o=n.reject,i=_(function(){var n=[],i=0,a=1;v(t,!1,function(t){var s=i++,u=!1;n.push(void 0),a++,e.resolve(t).then(function(t){u||(u=!0,n[s]=t,--a||r(n))},o)}),--a||r(n)});return i.e&&o(i.v),n.promise},race:function(t){var e=this,n=N(e),r=n.reject,o=_(function(){v(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(t,e,n){n(60)("split",2,function(t,e,r){"use strict";var o=n(63),i=r,a=[].push;if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length){var s=void 0===/()??/.exec("")[1];r=function(t,e){var n=String(this);if(void 0===t&&0===e)return[];if(!o(t))return i.call(n,t,e);var r,u,l,c,f,p=[],h=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),d=0,v=void 0===e?4294967295:e>>>0,y=new RegExp(t.source,h+"g");for(s||(r=new RegExp("^"+y.source+"$(?!\\s)",h));(u=y.exec(n))&&!((l=u.index+u[0].length)>d&&(p.push(n.slice(d,u.index)),!s&&u.length>1&&u[0].replace(r,function(){for(f=1;f<arguments.length-2;f++)void 0===arguments[f]&&(u[f]=void 0)}),u.length>1&&u.index<n.length&&a.apply(p,u.slice(1)),c=u[0].length,d=l,p.length>=v));)y.lastIndex===u.index&&y.lastIndex++;return d===n.length?!c&&y.test("")||p.push(""):p.push(n.slice(d)),p.length>v?p.slice(0,v):p}}else"0".split(void 0,0).length&&(r=function(t,e){return void 0===t&&0===e?[]:i.call(this,t,e)});return[function(n,o){var i=t(this),a=void 0==n?void 0:n[e];return void 0!==a?a.call(n,i,o):r.call(String(i),n,o)},r]})},function(t,e,n){n(60)("search",1,function(t,e,n){return[function(n){"use strict";var r=t(this),o=void 0==n?void 0:n[e];return void 0!==o?o.call(n,r):new RegExp(n)[e](String(r))},n]})},function(t,e,n){n(60)("replace",2,function(t,e,n){return[function(r,o){"use strict";var i=t(this),a=void 0==r?void 0:r[e];return void 0!==a?a.call(r,i,o):n.call(String(i),r,o)},n]})},function(t,e,n){n(60)("match",1,function(t,e,n){return[function(n){"use strict";var r=t(this),o=void 0==n?void 0:n[e];return void 0!==o?o.call(n,r):new RegExp(n)[e](String(r))},n]})},function(t,e,n){"use strict";n(138);var r=n(1),o=n(61),i=n(8),a=/./.toString,s=function(t){n(12)(RegExp.prototype,"toString",t,!0)};n(3)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?s(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)}):"toString"!=a.name&&s(function(){return a.call(this)})},function(t,e,n){var r=n(2),o=n(95),i=n(7).f,a=n(37).f,s=n(63),u=n(61),l=r.RegExp,c=l,f=l.prototype,p=/a/g,h=/a/g,d=new l(p)!==p;if(n(8)&&(!d||n(3)(function(){return h[n(5)("match")]=!1,l(p)!=p||l(h)==h||"/a/i"!=l(p,"i")}))){l=function(t,e){var n=this instanceof l,r=s(t),i=void 0===e;return!n&&r&&t.constructor===l&&i?t:o(d?new c(r&&!i?t.source:t,e):c((r=t instanceof l)?t.source:t,r&&i?u.call(t):e),n?this:f,l)};for(var v=function(t){t in l||i(l,t,{configurable:!0,get:function(){return c[t]},set:function(e){c[t]=e}})},y=a(c),g=0;y.length>g;)v(y[g++]);f.constructor=l,l.prototype=f,n(12)(r,"RegExp",l)}n(36)("RegExp")},function(t,e,n){n(36)("Array")},function(t,e,n){"use strict";var r=n(0),o=n(22)(6),i="findIndex",a=!0;i in[]&&Array(1)[i](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(31)(i)},function(t,e,n){"use strict";var r=n(0),o=n(22)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(31)("find")},function(t,e,n){var r=n(0);r(r.P,"Array",{fill:n(82)}),n(31)("fill")},function(t,e,n){var r=n(0);r(r.P,"Array",{copyWithin:n(140)}),n(31)("copyWithin")},function(t,e,n){"use strict";var r=n(0),o=n(18),i=n(24),a=n(6),s=[].lastIndexOf,u=!!s&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(u||!n(19)(s)),"Array",{lastIndexOf:function(t){if(u)return s.apply(this,arguments)||0;var e=o(this),n=a(e.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in e&&e[r]===t)return r||0;return-1}})},function(t,e,n){"use strict";var r=n(0),o=n(66)(!1),i=[].indexOf,a=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(19)(i)),"Array",{indexOf:function(t){return a?i.apply(this,arguments)||0:o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(141);r(r.P+r.F*!n(19)([].reduceRight,!0),"Array",{reduceRight:function(t){return o(this,t,arguments.length,arguments[1],!0)}})},function(t,e,n){"use strict";var r=n(0),o=n(141);r(r.P+r.F*!n(19)([].reduce,!0),"Array",{reduce:function(t){return o(this,t,arguments.length,arguments[1],!1)}})},function(t,e,n){"use strict";var r=n(0),o=n(22)(4);r(r.P+r.F*!n(19)([].every,!0),"Array",{every:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(22)(3);r(r.P+r.F*!n(19)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(22)(2);r(r.P+r.F*!n(19)([].filter,!0),"Array",{filter:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(22)(1);r(r.P+r.F*!n(19)([].map,!0),"Array",{map:function(t){return o(this,t,arguments[1])}})},function(t,e,n){var r=n(4),o=n(64),i=n(5)("species");t.exports=function(t){var e;return o(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!o(e.prototype)||(e=void 0),r(e)&&null===(e=e[i])&&(e=void 0)),void 0===e?Array:e}},function(t,e,n){"use strict";var r=n(0),o=n(22)(0),i=n(19)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(10),i=n(9),a=n(3),s=[].sort,u=[1,2,3];r(r.P+r.F*(a(function(){u.sort(void 0)})||!a(function(){u.sort(null)})||!n(19)(s)),"Array",{sort:function(t){return void 0===t?s.call(i(this)):s.call(i(this),o(t))}})},function(t,e,n){"use strict";var r=n(0),o=n(98),i=n(20),a=n(39),s=n(6),u=[].slice;r(r.P+r.F*n(3)(function(){o&&u.call(o)}),"Array",{slice:function(t,e){var n=s(this.length),r=i(this);if(e=void 0===e?n:e,"Array"==r)return u.call(this,t,e);for(var o=a(t,n),l=a(e,n),c=s(l-o),f=new Array(c),p=0;p<c;p++)f[p]="String"==r?this.charAt(o+p):this[o+p];return f}})},function(t,e,n){"use strict";var r=n(0),o=n(18),i=[].join;r(r.P+r.F*(n(53)!=Object||!n(19)(i)),"Array",{join:function(t){return i.call(o(this),void 0===t?",":t)}})},function(t,e,n){"use strict";var r=n(0),o=n(85);r(r.S+r.F*n(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)o(n,t,arguments[t++]);return n.length=e,n}})},function(t,e,n){"use strict";var r=n(21),o=n(0),i=n(9),a=n(142),s=n(86),u=n(6),l=n(85),c=n(84);o(o.S+o.F*!n(62)(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,o,f,p=i(t),h="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,y=void 0!==v,g=0,m=c(p);if(y&&(v=r(v,d>2?arguments[2]:void 0,2)),void 0==m||h==Array&&s(m))for(n=new h(e=u(p.length));e>g;g++)l(n,g,y?v(p[g],g):p[g]);else for(f=m.call(p),n=new h;!(o=f.next()).done;g++)l(n,g,y?a(f,v,[o.value,g],!0):o.value);return n.length=g,n}})},function(t,e,n){var r=n(0);r(r.S,"Array",{isArray:n(64)})},function(t,e,n){"use strict";var r=n(1),o=n(26);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return o(r(this),"number"!=t)}},function(t,e,n){var r=n(5)("toPrimitive"),o=Date.prototype;r in o||n(13)(o,r,n(347))},function(t,e,n){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(12)(r,"toString",function(){var t=i.call(this);return t==t?o.call(this):"Invalid Date"})},function(t,e,n){"use strict";var r=n(3),o=Date.prototype.getTime,i=Date.prototype.toISOString,a=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!r(function(){i.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+("00000"+Math.abs(e)).slice(r?-6:-4)+"-"+a(t.getUTCMonth()+1)+"-"+a(t.getUTCDate())+"T"+a(t.getUTCHours())+":"+a(t.getUTCMinutes())+":"+a(t.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:i},function(t,e,n){var r=n(0),o=n(350);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(26);r(r.P+r.F*n(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=o(this),n=i(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},function(t,e,n){var r=n(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,n){"use strict";n(11)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,n){"use strict";n(11)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,n){"use strict";n(11)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,n){"use strict";n(11)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,n){"use strict";n(11)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,n){"use strict";n(11)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,n){"use strict";n(11)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,n){"use strict";n(11)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,n){"use strict";n(11)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,n){"use strict";n(11)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,n){"use strict";n(11)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,n){"use strict";n(11)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,n){"use strict";n(11)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,n){"use strict";var r=n(0),o=n(6),i=n(88),a="".startsWith;r(r.P+r.F*n(87)("startsWith"),"String",{startsWith:function(t){var e=i(this,t,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return a?a.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){var r=n(0);r(r.P,"String",{repeat:n(94)})},function(t,e,n){"use strict";var r=n(0),o=n(88);r(r.P+r.F*n(87)("includes"),"String",{includes:function(t){return!!~o(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){"use strict";var r=n(0),o=n(6),i=n(88),a="".endsWith;r(r.P+r.F*n(87)("endsWith"),"String",{endsWith:function(t){var e=i(this,t,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=o(e.length),s=void 0===n?r:Math.min(o(n),r),u=String(t);return a?a.call(e,u,s):e.slice(s-u.length,s)===u}})},function(t,e,n){"use strict";var r=n(0),o=n(91)(!1);r(r.P,"String",{codePointAt:function(t){return o(this,t)}})},function(t,e,n){"use strict";var r=n(91)(!0);n(90)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){"use strict";n(47)("trim",function(t){return function(){return t(this,3)}})},function(t,e,n){var r=n(0),o=n(18),i=n(6);r(r.S,"String",{raw:function(t){for(var e=o(t.raw),n=i(e.length),r=arguments.length,a=[],s=0;n>s;)a.push(String(e[s++])),s<r&&a.push(String(arguments[s]));return a.join("")}})},function(t,e,n){var r=n(0),o=n(39),i=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,a=0;r>a;){if(e=+arguments[a++],o(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?i(e):i(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},function(t,e,n){var r=n(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,n){var r=n(0),o=n(92),i=Math.exp;r(r.S,"Math",{tanh:function(t){var e=o(t=+t),n=o(-t);return e==1/0?1:n==1/0?-1:(e-n)/(i(t)+i(-t))}})},function(t,e,n){var r=n(0),o=n(92),i=Math.exp;r(r.S+r.F*n(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(o(t)-o(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{sign:n(93)})},function(t,e,n){var r=n(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,n){var r=n(0);r(r.S,"Math",{log1p:n(144)})},function(t,e,n){var r=n(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,n){var r=n(0),o=Math.imul;r(r.S+r.F*n(3)(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r;return 0|o*i+((65535&n>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(t,e,n){var r=n(0),o=Math.abs;r(r.S,"Math",{hypot:function(t,e){for(var n,r,i=0,a=0,s=arguments.length,u=0;a<s;)u<(n=o(arguments[a++]))?(i=i*(r=u/n)*r+1,u=n):i+=n>0?(r=n/u)*r:n;return u===1/0?1/0:u*Math.sqrt(i)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{fround:n(143)})},function(t,e,n){var r=n(0),o=n(92);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(t,e,n){var r=n(0),o=Math.exp;r(r.S,"Math",{cosh:function(t){return(o(t=+t)+o(-t))/2}})},function(t,e,n){var r=n(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,n){var r=n(0),o=n(93);r(r.S,"Math",{cbrt:function(t){return o(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,n){var r=n(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,n){var r=n(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,n){var r=n(0),o=n(144),i=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:o(t-1+i(t-1)*i(t+1))}})},function(t,e,n){var r=n(0),o=n(148);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(t,e,n){var r=n(0),o=n(147);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(t,e,n){var r=n(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,n){var r=n(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){var r=n(0),o=n(145),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},function(t,e,n){var r=n(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,n){var r=n(0);r(r.S,"Number",{isInteger:n(145)})},function(t,e,n){var r=n(0),o=n(2).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&o(t)}})},function(t,e,n){var r=n(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,n){"use strict";var r=n(0),o=n(3),i=n(146),a=1..toPrecision;r(r.P+r.F*(o(function(){return"1"!==a.call(1,void 0)})||!o(function(){a.call({})})),"Number",{toPrecision:function(t){var e=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?a.call(e):a.call(e,t)}})},function(t,e,n){"use strict";var r=n(0),o=n(24),i=n(146),a=n(94),s=1..toFixed,u=Math.floor,l=[0,0,0,0,0,0],c="Number.toFixed: incorrect invocation!",f=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*l[n],l[n]=r%1e7,r=u(r/1e7)},p=function(t){for(var e=6,n=0;--e>=0;)n+=l[e],l[e]=u(n/t),n=n%t*1e7},h=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==l[t]){var n=String(l[t]);e=""===e?n:e+a.call("0",7-n.length)+n}return e},d=function(t,e,n){return 0===e?n:e%2==1?d(t,e-1,n*t):d(t*t,e/2,n)};r(r.P+r.F*(!!s&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(3)(function(){s.call({})})),"Number",{toFixed:function(t){var e,n,r,s,u=i(this,c),l=o(t),v="",y="0";if(l<0||l>20)throw RangeError(c);if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(v="-",u=-u),u>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(u*d(2,69,1))-69)<0?u*d(2,-e,1):u/d(2,e,1),n*=4503599627370496,(e=52-e)>0){for(f(0,n),r=l;r>=7;)f(1e7,0),r-=7;for(f(d(10,r,1),0),r=e-1;r>=23;)p(1<<23),r-=23;p(1<<r),f(1,1),p(2),y=h()}else f(0,n),f(1<<-e,0),y=h()+a.call("0",l);return y=l>0?v+((s=y.length)<=l?"0."+a.call("0",l-s)+y:y.slice(0,s-l)+"."+y.slice(s-l)):v+y}})},function(t,e,n){"use strict";var r=n(2),o=n(14),i=n(20),a=n(95),s=n(26),u=n(3),l=n(37).f,c=n(17).f,f=n(7).f,p=n(47).trim,h=r.Number,d=h,v=h.prototype,y="Number"==i(n(38)(v)),g="trim"in String.prototype,m=function(t){var e=s(t,!1);if("string"==typeof e&&e.length>2){var n,r,o,i=(e=g?e.trim():p(e,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=e.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(e.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+e}for(var a,u=e.slice(2),l=0,c=u.length;l<c;l++)if((a=u.charCodeAt(l))<48||a>o)return NaN;return parseInt(u,r)}}return+e};if(!h(" 0o1")||!h("0b1")||h("+0x1")){h=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof h&&(y?u(function(){v.valueOf.call(n)}):"Number"!=i(n))?a(new d(m(e)),n,h):m(e)};for(var b,_=n(8)?l(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;_.length>w;w++)o(d,b=_[w])&&!o(h,b)&&f(h,b,c(d,b));h.prototype=v,v.constructor=h,n(12)(r,"Number",h)}},function(t,e,n){var r=n(0),o=n(147);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(t,e,n){var r=n(0),o=n(148);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(t,e,n){"use strict";var r=n(4),o=n(16),i=n(5)("hasInstance"),a=Function.prototype;i in a||n(7).f(a,i,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,n){var r=n(7).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||n(8)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,e,n){var r=n(0);r(r.P,"Function",{bind:n(150)})},function(t,e,n){"use strict";var r=n(51),o={};o[n(5)("toStringTag")]="z",o+""!="[object z]"&&n(12)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,e,n){var r=n(0);r(r.S,"Object",{setPrototypeOf:n(97).set})},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,n){var r=n(0);r(r.S,"Object",{is:n(412)})},function(t,e,n){var r=n(0);r(r.S+r.F,"Object",{assign:n(151)})},function(t,e,n){var r=n(4);n(23)("isExtensible",function(t){return function(e){return!!r(e)&&(!t||t(e))}})},function(t,e,n){var r=n(4);n(23)("isSealed",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(4);n(23)("isFrozen",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(4),o=n(32).onFreeze;n(23)("preventExtensions",function(t){return function(e){return t&&r(e)?t(o(e)):e}})},function(t,e,n){var r=n(4),o=n(32).onFreeze;n(23)("seal",function(t){return function(e){return t&&r(e)?t(o(e)):e}})},function(t,e,n){var r=n(4),o=n(32).onFreeze;n(23)("freeze",function(t){return function(e){return t&&r(e)?t(o(e)):e}})},function(t,e,n){n(23)("getOwnPropertyNames",function(){return n(152).f})},function(t,e,n){var r=n(9),o=n(40);n(23)("keys",function(){return function(t){return o(r(t))}})},function(t,e,n){var r=n(9),o=n(16);n(23)("getPrototypeOf",function(){return function(t){return o(r(t))}})},function(t,e,n){var r=n(18),o=n(17).f;n(23)("getOwnPropertyDescriptor",function(){return function(t,e){return o(r(t),e)}})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(8),"Object",{defineProperties:n(153)})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(8),"Object",{defineProperty:n(7).f})},function(t,e,n){var r=n(0);r(r.S,"Object",{create:n(38)})},function(t,e,n){var r=n(40),o=n(65),i=n(52);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var a,s=n(t),u=i.f,l=0;s.length>l;)u.call(t,a=s[l++])&&e.push(a);return e}},function(t,e,n){"use strict";var r=n(2),o=n(14),i=n(8),a=n(0),s=n(12),u=n(32).KEY,l=n(3),c=n(67),f=n(48),p=n(42),h=n(5),d=n(155),v=n(101),y=n(428),g=n(64),m=n(1),b=n(4),_=n(18),w=n(26),x=n(43),O=n(38),E=n(152),A=n(17),k=n(7),N=n(40),S=A.f,j=k.f,T=E.f,P=r.Symbol,C=r.JSON,L=C&&C.stringify,q=h("_hidden"),M=h("toPrimitive"),I={}.propertyIsEnumerable,R=c("symbol-registry"),B=c("symbols"),D=c("op-symbols"),F=Object.prototype,U="function"==typeof P,$=r.QObject,H=!$||!$.prototype||!$.prototype.findChild,z=i&&l(function(){return 7!=O(j({},"a",{get:function(){return j(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=S(F,e);r&&delete F[e],j(t,e,n),r&&t!==F&&j(F,e,r)}:j,K=function(t){var e=B[t]=O(P.prototype);return e._k=t,e},V=U&&"symbol"==typeof P.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof P},Y=function(t,e,n){return t===F&&Y(D,e,n),m(t),e=w(e,!0),m(n),o(B,e)?(n.enumerable?(o(t,q)&&t[q][e]&&(t[q][e]=!1),n=O(n,{enumerable:x(0,!1)})):(o(t,q)||j(t,q,x(1,{})),t[q][e]=!0),z(t,e,n)):j(t,e,n)},W=function(t,e){m(t);for(var n,r=y(e=_(e)),o=0,i=r.length;i>o;)Y(t,n=r[o++],e[n]);return t},G=function(t){var e=I.call(this,t=w(t,!0));return!(this===F&&o(B,t)&&!o(D,t))&&(!(e||!o(this,t)||!o(B,t)||o(this,q)&&this[q][t])||e)},Z=function(t,e){if(t=_(t),e=w(e,!0),t!==F||!o(B,e)||o(D,e)){var n=S(t,e);return!n||!o(B,e)||o(t,q)&&t[q][e]||(n.enumerable=!0),n}},X=function(t){for(var e,n=T(_(t)),r=[],i=0;n.length>i;)o(B,e=n[i++])||e==q||e==u||r.push(e);return r},J=function(t){for(var e,n=t===F,r=T(n?D:_(t)),i=[],a=0;r.length>a;)!o(B,e=r[a++])||n&&!o(F,e)||i.push(B[e]);return i};U||(s((P=function(){if(this instanceof P)throw TypeError("Symbol is not a constructor!");var t=p(arguments.length>0?arguments[0]:void 0),e=function(n){this===F&&e.call(D,n),o(this,q)&&o(this[q],t)&&(this[q][t]=!1),z(this,t,x(1,n))};return i&&H&&z(F,t,{configurable:!0,set:e}),K(t)}).prototype,"toString",function(){return this._k}),A.f=Z,k.f=Y,n(37).f=E.f=X,n(52).f=G,n(65).f=J,i&&!n(41)&&s(F,"propertyIsEnumerable",G,!0),d.f=function(t){return K(h(t))}),a(a.G+a.W+a.F*!U,{Symbol:P});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)h(Q[tt++]);for(var et=N(h.store),nt=0;et.length>nt;)v(et[nt++]);a(a.S+a.F*!U,"Symbol",{for:function(t){return o(R,t+="")?R[t]:R[t]=P(t)},keyFor:function(t){if(!V(t))throw TypeError(t+" is not a symbol!");for(var e in R)if(R[e]===t)return e},useSetter:function(){H=!0},useSimple:function(){H=!1}}),a(a.S+a.F*!U,"Object",{create:function(t,e){return void 0===e?O(t):W(O(t),e)},defineProperty:Y,defineProperties:W,getOwnPropertyDescriptor:Z,getOwnPropertyNames:X,getOwnPropertySymbols:J}),C&&a(a.S+a.F*(!U||l(function(){var t=P();return"[null]"!=L([t])||"{}"!=L({a:t})||"{}"!=L(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(b(e)||void 0!==t)&&!V(t))return g(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!V(e))return e}),r[1]=e,L.apply(C,r)}}),P.prototype[M]||n(13)(P.prototype,M,P.prototype.valueOf),f(P,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,e,n){n(429),n(427),n(426),n(425),n(424),n(423),n(422),n(421),n(420),n(419),n(418),n(417),n(416),n(415),n(414),n(413),n(411),n(410),n(409),n(408),n(407),n(406),n(405),n(404),n(403),n(402),n(401),n(400),n(399),n(398),n(397),n(396),n(395),n(394),n(393),n(392),n(391),n(390),n(389),n(388),n(387),n(386),n(385),n(384),n(383),n(382),n(381),n(380),n(379),n(378),n(377),n(376),n(375),n(374),n(373),n(372),n(371),n(370),n(369),n(368),n(367),n(366),n(365),n(364),n(363),n(362),n(361),n(360),n(359),n(358),n(357),n(356),n(355),n(354),n(353),n(352),n(351),n(349),n(348),n(346),n(345),n(344),n(343),n(342),n(341),n(340),n(338),n(337),n(336),n(335),n(334),n(333),n(332),n(331),n(330),n(329),n(328),n(327),n(326),n(81),n(325),n(324),n(138),n(323),n(322),n(321),n(320),n(319),n(135),n(133),n(132),n(318),n(317),n(316),n(315),n(314),n(313),n(312),n(311),n(310),n(309),n(308),n(307),n(306),n(305),n(304),n(303),n(302),n(301),n(300),n(299),n(298),n(297),n(296),n(295),n(294),n(293),n(292),n(291),n(290),n(289),n(288),n(287),n(286),n(285),n(284),n(283),n(282),n(281),n(280),n(279),n(278),n(277),n(276),n(275),n(274),n(273),n(272),n(271),n(270),n(269),n(268),n(267),n(266),n(265),n(264),n(263),n(262),n(261),n(260),n(259),n(258),n(257),n(256),n(255),n(254),n(253),n(252),n(251),n(250),n(249),n(248),n(247),n(246),n(245),n(244),n(243),n(242),n(241),n(240),n(239),n(238),n(237),n(236),n(235),n(234),t.exports=n(27)},function(t,e,n){"use strict";(function(t){if(n(430),n(233),n(232),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var e="defineProperty";function r(t,n,r){t[n]||Object[e](t,n,{writable:!0,configurable:!0,value:r})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&r(Array,t,Function.call.bind([][t]))})}).call(this,n(44))},function(t,e,n){"use strict";n(431);var r=s(n(108)),o=s(n(225)),i=s(n(224)),a=s(n(223));function s(t){return t&&t.__esModule?t:{default:t}}r.default.register({"blots/urlEmbed":i.default,"modules/urlEmbeds":a.default}),o.default.register(i.default)}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLWZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvVmlkZW9FbWJlZC52dWUiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL1NvdXJjZUltYWdlLnZ1ZSIsIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvU291cmNlSWNvbi52dWUiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL0xpbmtFbWJlZC52dWUiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL0VtYmVkSXRlbS52dWUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzVW5pY29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRW1iZWRJdGVtLnZ1ZT8yZjc0Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1ZpZGVvRW1iZWQudnVlPzMwY2MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGlua0VtYmVkLnZ1ZT8yYzkyIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NvdXJjZUltYWdlLnZ1ZT9hMTQ4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NvdXJjZUljb24udnVlPzdiZDQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3F1aWxsL2Rpc3QvcXVpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHRlbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlZXAtZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tdG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1ZpZGVvRW1iZWQudnVlPzZiNzgiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVmlkZW9FbWJlZC52dWU/MDQ5OCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9WaWRlb0VtYmVkLnZ1ZSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9OdW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b0Zpbml0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvSW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL191bmljb2RlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc2NpaVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaW5nVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL191bmljb2RlU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNjaWlTaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmluZ1NpemUuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19ub2RlVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVW5hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzUmVnRXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNSZWdFeHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RTbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90cnVuY2F0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Tb3VyY2VJbWFnZS52dWU/ZGY3YSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Tb3VyY2VJbWFnZS52dWU/Y2JkMCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Tb3VyY2VJbWFnZS52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU291cmNlSWNvbi52dWU/YzFkYyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Tb3VyY2VJY29uLnZ1ZT84Mjg1Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NvdXJjZUljb24udnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xpbmtFbWJlZC52dWU/NmZhZCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MaW5rRW1iZWQudnVlP2E3NzAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGlua0VtYmVkLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9FbWJlZEl0ZW0udnVlPzU1MmYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRW1iZWRJdGVtLnZ1ZT80ODA0Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0VtYmVkSXRlbS52dWUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5ydW50aW1lLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J0b2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3F1aWxsLWRlbHRhL2xpYi9vcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVlcC1lcXVhbC9saWIvaXNfYXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWVwLWVxdWFsL2xpYi9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYXN0LWRpZmYvZGlmZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVpbGwtZGVsdGEvbGliL2RlbHRhLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcmNobWVudC9kaXN0L3BhcmNobWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVwbGFjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcmVnZXhwL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFzYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS50cnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pbXVsaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaWFkZGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5mc2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5jbGFtcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lmdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1tYXAub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS5ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaW11bC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNlYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImEiLCJpIiwid2luZG93IiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWwiLCJjb3JlIiwiaGlkZSIsInJlZGVmaW5lIiwiY3R4IiwiJGV4cG9ydCIsInR5cGUiLCJzb3VyY2UiLCJrZXkiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsInRhcmdldCIsImV4cFByb3RvIiwidW5kZWZpbmVkIiwiRnVuY3Rpb24iLCJVIiwiVyIsIlIiLCJpc09iamVjdCIsIml0IiwiVHlwZUVycm9yIiwiTWF0aCIsInNlbGYiLCJfX2ciLCJleGVjIiwiZSIsInN0b3JlIiwidWlkIiwiU3ltYm9sIiwiVVNFX1NZTUJPTCIsInRvSW50ZWdlciIsIm1pbiIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZiIsIk8iLCJBdHRyaWJ1dGVzIiwiZGVmaW5lZCIsImZhaWxzIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJTdHJpbmciLCJwMSIsInJlcGxhY2UiLCJOQU1FIiwidGVzdCIsInRvTG93ZXJDYXNlIiwic3BsaXQiLCJsZW5ndGgiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJpbnNwZWN0U291cmNlIiwidmFsIiwic2FmZSIsImlzRnVuY3Rpb24iLCJqb2luIiwidGhpcyIsImNyZWF0ZURlc2MiLCJiaW5kIiwiaXNCdWZmZXIiLCJ0b1N0cmluZyIsImlzQXJyYXkiLCJmb3JFYWNoIiwib2JqIiwiZm4iLCJpc0FycmF5QnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc1VuZGVmaW5lZCIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwiZG9jdW1lbnQiLCJtZXJnZSIsInJlc3VsdCIsImFzc2lnblZhbHVlIiwiYXJndW1lbnRzIiwiZXh0ZW5kIiwiYiIsInRoaXNBcmciLCJ0cmltIiwic3RyIiwidG9PYmplY3QiLCJJRV9QUk9UTyIsIk9iamVjdFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJjb25zdHJ1Y3RvciIsInBJRSIsInRvSU9iamVjdCIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJJT2JqZWN0IiwibWV0aG9kIiwiYXJnIiwic2xpY2UiLCJhRnVuY3Rpb24iLCJ0aGF0IiwiYXBwbHkiLCJ0b0xlbmd0aCIsImFzYyIsIlRZUEUiLCIkY3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiY3JlYXRlIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwicmVzIiwiaW5kZXgiLCJwdXNoIiwiS0VZIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJ2YWx1ZU9mIiwidmVyc2lvbiIsIl9fZSIsIm5vcm1hbGl6ZUNvbXBvbmVudCIsInNjcmlwdEV4cG9ydHMiLCJyZW5kZXIiLCJzdGF0aWNSZW5kZXJGbnMiLCJmdW5jdGlvbmFsVGVtcGxhdGUiLCJpbmplY3RTdHlsZXMiLCJzY29wZUlkIiwibW9kdWxlSWRlbnRpZmllciIsInNoYWRvd01vZGUiLCJkZWZhdWx0IiwiaG9vayIsIm9wdGlvbnMiLCJfY29tcGlsZWQiLCJmdW5jdGlvbmFsIiwiX3Njb3BlSWQiLCJjb250ZXh0IiwiJHZub2RlIiwic3NyQ29udGV4dCIsInBhcmVudCIsIl9fVlVFX1NTUl9DT05URVhUX18iLCJfcmVnaXN0ZXJlZENvbXBvbmVudHMiLCJhZGQiLCJfc3NyUmVnaXN0ZXIiLCIkcm9vdCIsIiRvcHRpb25zIiwic2hhZG93Um9vdCIsIl9pbmplY3RTdHlsZXMiLCJvcmlnaW5hbFJlbmRlciIsImgiLCJleGlzdGluZyIsImJlZm9yZUNyZWF0ZSIsImNvbmNhdCIsIl9fd2VicGFja19leHBvcnRzX18iLCJNYXAiLCJzaGFyZWQiLCJnZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwidGFyZ2V0S2V5IiwidGFyZ2V0TWV0YWRhdGEiLCJzZXQiLCJrZXlNZXRhZGF0YSIsIm1hcCIsIk1ldGFkYXRhS2V5IiwibWV0YWRhdGFNYXAiLCJNZXRhZGF0YVZhbHVlIiwia2V5cyIsIl8iLCJMSUJSQVJZIiwiJHR5cGVkIiwiJGJ1ZmZlciIsImFuSW5zdGFuY2UiLCJwcm9wZXJ0eURlc2MiLCJyZWRlZmluZUFsbCIsInRvSW5kZXgiLCJ0b0Fic29sdXRlSW5kZXgiLCJjbGFzc29mIiwiaXNBcnJheUl0ZXIiLCJnT1BOIiwiZ2V0SXRlckZuIiwid2tzIiwiY3JlYXRlQXJyYXlNZXRob2QiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiQXJyYXlJdGVyYXRvcnMiLCJJdGVyYXRvcnMiLCIkaXRlckRldGVjdCIsInNldFNwZWNpZXMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiQXJyYXlQcm90byIsIkFycmF5IiwiJEFycmF5QnVmZmVyIiwiJERhdGFWaWV3IiwiRGF0YVZpZXciLCJhcnJheUZvckVhY2giLCJhcnJheUZpbHRlciIsImFycmF5U29tZSIsImFycmF5RXZlcnkiLCJhcnJheUZpbmQiLCJhcnJheUZpbmRJbmRleCIsImFycmF5SW5jbHVkZXMiLCJhcnJheUluZGV4T2YiLCJhcnJheVZhbHVlcyIsInZhbHVlcyIsImFycmF5S2V5cyIsImFycmF5RW50cmllcyIsImVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVNsaWNlIiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIklURVJBVE9SIiwiVEFHIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJGT1JDRURfU0VUIiwidG9PZmZzZXQiLCJCWVRFUyIsIm9mZnNldCIsInZhbGlkYXRlIiwiQyIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsInN0ZXAiLCJpdGVyYXRvciIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJuZXh0IiwiZG9uZSIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJzdGFydCIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJpbmRleE9mIiwic2VhcmNoRWxlbWVudCIsImluY2x1ZGVzIiwic2VwYXJhdG9yIiwicmV2ZXJzZSIsIm1pZGRsZSIsInNvbWUiLCJjb21wYXJlZm4iLCJzdWJhcnJheSIsImJlZ2luIiwiZW5kIiwiJGJlZ2luIiwiYnl0ZU9mZnNldCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiJHNsaWNlIiwiJHNldCIsImFycmF5TGlrZSIsInNyYyIsImxlbiIsIiRpdGVyYXRvcnMiLCJpc1RBSW5kZXgiLCIkZ2V0RGVzYyIsIiRzZXREZXNjIiwiZGVzYyIsIndyaXRhYmxlIiwiJFR5cGVkQXJyYXlQcm90b3R5cGUkIiwid3JhcHBlciIsIkNMQU1QRUQiLCJHRVRURVIiLCJTRVRURVIiLCJUeXBlZEFycmF5IiwiQmFzZSIsIlRBQyIsIkZPUkNFRCIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJhZGRFbGVtZW50IiwiZGF0YSIsInYiLCJyb3VuZCIsInNldHRlciIsIiRvZmZzZXQiLCIkbGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImtsYXNzIiwiJGxlbiIsIml0ZXIiLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIm9mIiwiZnJvbSIsIlVOU0NPUEFCTEVTIiwiTUVUQSIsInNldERlc2MiLCJpZCIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsInciLCJtZXRhIiwiTkVFRCIsImZhc3RLZXkiLCJnZXRXZWFrIiwib25GcmVlemUiLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhYmxlIiwiQ29uc3RydWN0b3IiLCJmb3JiaWRkZW5GaWVsZCIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsIiRrZXlzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJkUHMiLCJlbnVtQnVnS2V5cyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJtYXgiLCJweCIsInJhbmRvbSIsImJpdG1hcCIsImciLCJldmFsIiwiX3QiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwiUmVnRXhwIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJkZWYiLCJzdGF0IiwibGlzdFRvU3R5bGVzIiwicGFyZW50SWQiLCJzdHlsZXMiLCJuZXdTdHlsZXMiLCJpdGVtIiwicGFydCIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicGFydHMiLCJhZGRTdHlsZXNDbGllbnRfYWRkU3R5bGVzQ2xpZW50IiwiYWRkU3R5bGVzQ2xpZW50X2hhc0RvY3VtZW50IiwiREVCVUciLCJFcnJvciIsImFkZFN0eWxlc0NsaWVudF9zdHlsZXNJbkRvbSIsImFkZFN0eWxlc0NsaWVudF9oZWFkIiwiaGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYWRkU3R5bGVzQ2xpZW50X3NpbmdsZXRvbkVsZW1lbnQiLCJhZGRTdHlsZXNDbGllbnRfc2luZ2xldG9uQ291bnRlciIsImFkZFN0eWxlc0NsaWVudF9pc1Byb2R1Y3Rpb24iLCJhZGRTdHlsZXNDbGllbnRfbm9vcCIsImFkZFN0eWxlc0NsaWVudF9vcHRpb25zIiwiYWRkU3R5bGVzQ2xpZW50X3NzcklkS2V5IiwiYWRkU3R5bGVzQ2xpZW50X2lzT2xkSUUiLCJ1c2VyQWdlbnQiLCJfaXNQcm9kdWN0aW9uIiwiX29wdGlvbnMiLCJhZGRTdHlsZXNDbGllbnRfYWRkU3R5bGVzVG9Eb20iLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsImFkZFN0eWxlc0NsaWVudF9hZGRTdHlsZSIsImFkZFN0eWxlc0NsaWVudF9jcmVhdGVTdHlsZUVsZW1lbnQiLCJzdHlsZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidXBkYXRlIiwicmVtb3ZlIiwicXVlcnlTZWxlY3RvciIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInN0eWxlSW5kZXgiLCJhZGRTdHlsZXNDbGllbnRfYXBwbHlUb1NpbmdsZXRvblRhZyIsInNldEF0dHJpYnV0ZSIsInNzcklkIiwic291cmNlcyIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIm5ld09iaiIsInRleHRTdG9yZSIsImFkZFN0eWxlc0NsaWVudF9yZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiQm9vbGVhbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwiaW5zZXJ0QmVmb3JlIiwidXNlU291cmNlTWFwIiwiY29udGVudCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJjb2YiLCJBUkciLCJUIiwidHJ5R2V0IiwiY2FsbGVlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJmb3JPZiIsIkNPTExFQ1RJT04iLCJBIiwiY2IiLCJtYXBGbiIsIm5leHRJdGVtIiwiSyIsIl9fZGVmaW5lU2V0dGVyX18iLCJUeXBlZCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMiLCJzZXRUb1N0cmluZ1RhZyIsImluaGVyaXRJZlJlcXVpcmVkIiwibWV0aG9kcyIsImNvbW1vbiIsIklTX1dFQUsiLCJBRERFUiIsImZpeE1ldGhvZCIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiY2xlYXIiLCJnZXRDb25zdHJ1Y3RvciIsInNldFN0cm9uZyIsIkQiLCJTWU1CT0wiLCJmbnMiLCJzdHJmbiIsInJ4Zm4iLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInN0aWNreSIsIlNBRkVfQ0xPU0lORyIsInJpdGVyIiwic2tpcENsb3NpbmciLCJhcnIiLCJNQVRDSCIsImlzUmVnRXhwIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfSU5DTFVERVMiLCJlbCIsImZyb21JbmRleCIsIlNvdXJjZUljb24iLCJfU291cmNlSWNvbjIiLCJTb3VyY2VJbWFnZSIsIl9Tb3VyY2VJbWFnZTIiLCJMaW5rRW1iZWQiLCJfTGlua0VtYmVkMiIsIlZpZGVvRW1iZWQiLCJfVmlkZW9FbWJlZDIiLCJyZUhhc1VuaWNvZGUiLCJ1dGlscyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsIkNvbnRlbnQtVHlwZSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJhZGFwdGVyIiwiZGVmYXVsdHMiLCJYTUxIdHRwUmVxdWVzdCIsInByb2Nlc3MiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwic3RhdHVzIiwiQWNjZXB0IiwiUFJPVE9UWVBFIiwiV1JPTkdfSU5ERVgiLCJJbmZpbml0eSIsIkJhc2VCdWZmZXIiLCJhYnMiLCJwb3ciLCJsb2ciLCJMTjIiLCIkQlVGRkVSIiwiJExFTkdUSCIsIiRPRkZTRVQiLCJwYWNrSUVFRTc1NCIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJOYU4iLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJ2aWV3IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsIl9iIiwicGFjayIsImNvbnZlcnNpb24iLCJBcnJheUJ1ZmZlclByb3RvIiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwiYnVmZmVyTGVuZ3RoIiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJyZXNvbHZlIiwicmVqZWN0IiwicHJvbWlzZSIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsIlByb21pc2UiLCJpc05vZGUiLCJsYXN0Iiwibm90aWZ5IiwiZmx1c2giLCJkb21haW4iLCJleGl0IiwiZW50ZXIiLCJuZXh0VGljayIsInN0YW5kYWxvbmUiLCJ0aGVuIiwidG9nZ2xlIiwibm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwidGFzayIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJpbnZva2UiLCJodG1sIiwiY2VsIiwic2V0VGFzayIsInNldEltbWVkaWF0ZSIsImNsZWFyVGFzayIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsImNvdW50ZXIiLCJxdWV1ZSIsInJ1biIsImxpc3RlbmVyIiwiZXZlbnQiLCJhcmdzIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJzZXRUaW1lb3V0IiwiYWRkVG9VbnNjb3BhYmxlcyIsIml0ZXJhdGVkIiwia2luZCIsIl9pIiwiX2siLCJBcmd1bWVudHMiLCJlbmRQb3MiLCJvcmlnaW5hbCIsImdldEl0ZXJhdG9yTWV0aG9kIiwiJGRlZmluZVByb3BlcnR5IiwicmUiLCJzZWFyY2hTdHJpbmciLCJkZXNjcmlwdG9yIiwiSXRlcmF0b3JQcm90b3R5cGUiLCIkaXRlckNyZWF0ZSIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkRFRkFVTFQiLCJJU19TRVQiLCJnZXRNZXRob2QiLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsIlRPX1NUUklORyIsInBvcyIsImNoYXJDb2RlQXQiLCJjaGFyQXQiLCIkZXhwbTEiLCJleHBtMSIsIngiLCJzaWduIiwiY291bnQiLCJzZXRQcm90b3R5cGVPZiIsImNoZWNrIiwiYnVnZ3kiLCJfX3Byb3RvX18iLCJkb2N1bWVudEVsZW1lbnQiLCJ3a3NFeHQiLCIkU3ltYm9sIiwiaXMiLCJfaCIsIiRjcmVhdGVFbGVtZW50IiwiX2MiLCJfc2VsZiIsInN0YXRpY0NsYXNzIiwiY29tcG9uZW50VHlwZSIsImF0dHJzIiwidXJsIiwiZW1iZWQiLCJkb21Qcm9wcyIsImlubmVySFRNTCIsIl9zIiwiX2UiLCJfdm0iLCJocmVmIiwiX3YiLCJkZXNjcmlwdGlvbiIsImljb24iLCJhbnkiLCJwdWJsaXNoZXIiLCJpbWFnZSIsImhhc0Vycm9yIiwib24iLCJlcnJvciIsIiRldmVudCIsInZpZXdCb3giLCJzdHJva2UiLCJzdHJva2Utd2lkdGgiLCJmaWxsLXJ1bGUiLCJwb2ludHMiLCJCdWZmZXIiLCJjb250YWluZXJfMSIsImZvcm1hdF8xIiwibGVhZl8xIiwic2Nyb2xsXzEiLCJpbmxpbmVfMSIsImJsb2NrXzEiLCJlbWJlZF8xIiwidGV4dF8xIiwiYXR0cmlidXRvcl8xIiwiY2xhc3NfMSIsInN0eWxlXzEiLCJzdG9yZV8xIiwiUmVnaXN0cnkiLCJQYXJjaG1lbnQiLCJTY29wZSIsInF1ZXJ5IiwicmVnaXN0ZXIiLCJDb250YWluZXIiLCJGb3JtYXQiLCJMZWFmIiwiRW1iZWQiLCJTY3JvbGwiLCJCbG9jayIsIklubGluZSIsIlRleHQiLCJBdHRyaWJ1dG9yIiwiQXR0cmlidXRlIiwiQ2xhc3MiLCJTdHlsZSIsIlN0b3JlIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsIl9fIiwiUGFyY2htZW50RXJyb3IiLCJfc3VwZXIiLCJtZXNzYWdlIiwiX3RoaXMiLCJhdHRyaWJ1dGVzIiwiY2xhc3NlcyIsInRhZ3MiLCJ0eXBlcyIsInNjb3BlIiwibWF0Y2giLCJBTlkiLCJOb2RlIiwiVEVYVF9OT0RFIiwiTEVWRUwiLCJCTE9DSyIsIklOTElORSIsIkhUTUxFbGVtZW50IiwibmFtZXMiLCJnZXRBdHRyaWJ1dGUiLCJ0YWdOYW1lIiwiREFUQV9LRVkiLCJpbnB1dCIsIkJsb3RDbGFzcyIsImJ1YmJsZSIsImJsb3QiLCJEZWZpbml0aW9ucyIsIkRlZmluaXRpb24iLCJibG90TmFtZSIsImF0dHJOYW1lIiwia2V5TmFtZSIsImNsYXNzTmFtZSIsInRvVXBwZXJDYXNlIiwiZGlmZiIsImVxdWFsIiwib3AiLCJOVUxMX0NIQVJBQ1RFUiIsImZyb21DaGFyQ29kZSIsIkRlbHRhIiwib3BzIiwiaW5zZXJ0IiwidGV4dCIsIm5ld09wIiwiZGVsZXRlIiwicmV0YWluIiwibGFzdE9wIiwidW5zaGlmdCIsInNwbGljZSIsImNob3AiLCJwb3AiLCJwYXJ0aXRpb24iLCJwYXNzZWQiLCJmYWlsZWQiLCJpbml0aWFsIiwiY2hhbmdlTGVuZ3RoIiwiZWxlbSIsImhhc05leHQiLCJuZXh0T3AiLCJjb21wb3NlIiwib3RoZXIiLCJ0aGlzSXRlciIsIm90aGVySXRlciIsImRlbHRhIiwicGVla1R5cGUiLCJwZWVrTGVuZ3RoIiwidGhpc09wIiwib3RoZXJPcCIsInN0cmluZ3MiLCJkaWZmUmVzdWx0IiwiY29tcG9uZW50Iiwib3BMZW5ndGgiLCJJTlNFUlQiLCJERUxFVEUiLCJFUVVBTCIsImVhY2hMaW5lIiwibmV3bGluZSIsImxpbmUiLCJwZWVrIiwidHJhbnNmb3JtIiwicHJpb3JpdHkiLCJ0cmFuc2Zvcm1Qb3NpdGlvbiIsIm5leHRUeXBlIiwiaGFzT3duIiwidG9TdHIiLCJpc1BsYWluT2JqZWN0IiwiaGFzT3duQ29uc3RydWN0b3IiLCJoYXNJc1Byb3RvdHlwZU9mIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJkZWVwIiwiQmxvY2tFbWJlZCIsImJ1YmJsZUZvcm1hdHMiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfZ2V0IiwicmVjZWl2ZXIiLCJfZXh0ZW5kMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfcXVpbGxEZWx0YTIiLCJfcGFyY2htZW50MiIsIl9icmVhazIiLCJfaW5saW5lMiIsIl90ZXh0MiIsIl9jbGFzc0NhbGxDaGVjayIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfUGFyY2htZW50JEVtYmVkIiwiZG9tTm9kZSIsImZvcm1hdHMiLCJCTE9DS19BVFRSSUJVVEUiLCJmb3JtYXQiLCJlbmRzV2l0aCIsImJsb2NrIiwiaW5zZXJ0QXQiLCJCTE9DS19CTE9UIiwiX1BhcmNobWVudCRCbG9jayIsIl90aGlzMiIsImNhY2hlIiwiZGVzY2VuZGFudHMiLCJsZWFmIiwibGluZXMiLCJzaGlmdCIsImNoaWxkcmVuIiwidGFpbCIsInJlZiIsImNoaWxkIiwiZm9yY2UiLCJzdGF0aWNzIiwiZGVmYXVsdENoaWxkIiwiYWxsb3dlZENoaWxkcmVuIiwib3ZlcmxvYWQiLCJleHBhbmRDb25maWciLCJfdHlwZW9mIiwiX3NsaWNlZFRvQXJyYXkiLCJfYXJyIiwiX24iLCJlcnIiLCJzbGljZUl0ZXJhdG9yIiwiX2VkaXRvcjIiLCJfZW1pdHRlcjQiLCJfbW9kdWxlMiIsIl9zZWxlY3Rpb24iLCJfc2VsZWN0aW9uMiIsIl9sb2dnZXIyIiwiX3RoZW1lMiIsIl9kZWZpbmVQcm9wZXJ0eSIsImRlYnVnIiwiUXVpbGwiLCJjb250YWluZXIiLCJjbGFzc0xpc3QiLCJfX3F1aWxsIiwiYWRkQ29udGFpbmVyIiwic2Nyb2xsaW5nQ29udGFpbmVyIiwiZW1pdHRlciIsInNjcm9sbCIsIndoaXRlbGlzdCIsImVkaXRvciIsInNlbGVjdGlvbiIsInRoZW1lIiwia2V5Ym9hcmQiLCJhZGRNb2R1bGUiLCJjbGlwYm9hcmQiLCJoaXN0b3J5IiwiaW5pdCIsImV2ZW50cyIsIkVESVRPUl9DSEFOR0UiLCJURVhUX0NIQU5HRSIsImlzQmxhbmsiLCJTQ1JPTExfVVBEQVRFIiwibXV0YXRpb25zIiwicmFuZ2UiLCJsYXN0UmFuZ2UiLCJtb2RpZnkiLCJjb250ZW50cyIsImNvbnZlcnQiLCJzZXRDb250ZW50cyIsInBsYWNlaG9sZGVyIiwicmVhZE9ubHkiLCJkaXNhYmxlIiwibGltaXQiLCJsZXZlbCIsImltcG9ydHMiLCJwYXRoIiwib3ZlcndyaXRlIiwid2FybiIsInN0YXJ0c1dpdGgiLCJyZWZOb2RlIiwic2V0UmFuZ2UiLCJfdGhpczMiLCJfb3ZlcmxvYWQiLCJfb3ZlcmxvYWQyIiwiZGVsZXRlVGV4dCIsImVuYWJsZSIsImVuYWJsZWQiLCJzY3JvbGxUb3AiLCJmb2N1cyIsInNjcm9sbEludG9WaWV3IiwiX3RoaXM0IiwiQVBJIiwiZ2V0U2VsZWN0aW9uIiwiY2hhbmdlIiwiZm9ybWF0TGluZSIsImZvcm1hdFRleHQiLCJzZXRTZWxlY3Rpb24iLCJTSUxFTlQiLCJfdGhpczUiLCJfb3ZlcmxvYWQzIiwiX292ZXJsb2FkNCIsIl90aGlzNiIsIl9vdmVybG9hZDUiLCJfb3ZlcmxvYWQ2IiwiYm91bmRzIiwiZ2V0Qm91bmRzIiwiY29udGFpbmVyQm91bmRzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYm90dG9tIiwidG9wIiwiaGVpZ2h0IiwibGVmdCIsInJpZ2h0Iiwid2lkdGgiLCJnZXRMZW5ndGgiLCJfb3ZlcmxvYWQ3IiwiX292ZXJsb2FkOCIsImdldENvbnRlbnRzIiwiZ2V0Rm9ybWF0IiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwiZ2V0UmFuZ2UiLCJfb3ZlcmxvYWQ5IiwiX292ZXJsb2FkMTAiLCJnZXRUZXh0IiwiaGFzRm9jdXMiLCJfdGhpczciLCJpbnNlcnRFbWJlZCIsIl90aGlzOCIsIl9vdmVybG9hZDExIiwiX292ZXJsb2FkMTIiLCJpbnNlcnRUZXh0IiwiY29udGFpbnMiLCJvZmYiLCJvbmNlIiwiZGFuZ2Vyb3VzbHlQYXN0ZUhUTUwiLCJfdGhpczkiLCJfb3ZlcmxvYWQxMyIsIl9vdmVybG9hZDE0IiwicmVtb3ZlRm9ybWF0IiwiX3RoaXMxMCIsImRlbGV0ZWQiLCJhcHBsaWVkIiwiYXBwbHlEZWx0YSIsIl9vdmVybG9hZDE1IiwiX292ZXJsb2FkMTYiLCJSYW5nZSIsIlVTRVIiLCJfdGhpczExIiwidXNlckNvbmZpZyIsIkRFRkFVTFRTIiwiaW1wb3J0IiwidGhlbWVDb25maWciLCJjb25maWciLCJtb2R1bGVDb25maWciLCJtb2R1bGVDbGFzcyIsInRvb2xiYXIiLCJtb2RpZmllciIsInN0cmljdCIsImlzRW5hYmxlZCIsIm9sZERlbHRhIiwic2hpZnRSYW5nZSIsIl9lbWl0dGVyIiwiX2VtaXR0ZXIyIiwiZW1pdCIsIl9tYXAiLCJfbWFwMiIsIl9tYXAzIiwiX21hcDQiLCJwYXJjaG1lbnQiLCJjb3JlL21vZHVsZSIsImNvcmUvdGhlbWUiLCJfUGFyY2htZW50JElubGluZSIsImNvbXBhcmUiLCJCTE9UIiwiaXNvbGF0ZSIsIndyYXAiLCJtb3ZlQ2hpbGRyZW4iLCJzZWxmSW5kZXgiLCJvcmRlciIsIm90aGVySW5kZXgiLCJfcGFyY2htZW50IiwiVGV4dEJsb3QiLCJfUGFyY2htZW50JFRleHQiLCJfZXZlbnRlbWl0dGVyMiIsImV2ZW50TmFtZSIsIl9sZW4iLCJfa2V5IiwicXVlcnlTZWxlY3RvckFsbCIsIl9ub2RlJF9fcXVpbGwkZW1pdHRlciIsImhhbmRsZURPTSIsIkVtaXR0ZXIiLCJfRXZlbnRFbWl0dGVyIiwibGlzdGVuZXJzIiwiX2xlbjIiLCJfa2V5MiIsIl9yZWYiLCJoYW5kbGVyIiwiU0NST0xMX0JFRk9SRV9VUERBVEUiLCJTQ1JPTExfT1BUSU1JWkUiLCJTRUxFQ1RJT05fQ0hBTkdFIiwiTW9kdWxlIiwicXVpbGwiLCJsZXZlbHMiLCJfY29uc29sZSIsImNvbnNvbGUiLCJuYW1lc3BhY2UiLCJucyIsImxvZ2dlciIsIm5ld0xldmVsIiwicFNsaWNlIiwib2JqZWN0S2V5cyIsImlzQXJndW1lbnRzIiwiZGVlcEVxdWFsIiwiYWN0dWFsIiwiZXhwZWN0ZWQiLCJvcHRzIiwiRGF0ZSIsImdldFRpbWUiLCJpc1VuZGVmaW5lZE9yTnVsbCIsImthIiwia2IiLCJvYmpFcXVpdiIsImF0dHJpYnV0ZUJpdCIsIkFUVFJJQlVURSIsImNhbkFkZCIsInJlbW92ZUF0dHJpYnV0ZSIsIkNvZGUiLCJfYmxvY2syIiwiX0lubGluZSIsIkNvZGVCbG9jayIsIl9CbG9jayIsInRleHRDb250ZW50IiwiZnJhZyIsIl9kZXNjZW5kYW50IiwiZGVzY2VuZGFudCIsImRlbGV0ZUF0IiwibmV4dE5ld2xpbmUiLCJuZXdsaW5lSW5kZXgiLCJwcmV2TmV3bGluZSIsImlzb2xhdGVMZW5ndGgiLCJmb3JtYXRBdCIsIl9kZXNjZW5kYW50MyIsIl9kZXNjZW5kYW50NCIsInNlYXJjaEluZGV4IiwicHJldiIsIm9wdGltaXplIiwidW53cmFwIiwiVEFCIiwiX29wMiIsIl9jb2RlMiIsIl9jdXJzb3IyIiwiX2Jsb2NrIiwiX2Nsb25lMiIsIl9kZWVwRXF1YWwyIiwiQVNDSUkiLCJFZGl0b3IiLCJnZXREZWx0YSIsImNvbnN1bWVOZXh0TmV3bGluZSIsInNjcm9sbExlbmd0aCIsImJhdGNoU3RhcnQiLCJidWxsZXQiLCJub3JtYWxpemVEZWx0YSIsIl9zY3JvbGwkbGluZSIsIl9zY3JvbGwkbGluZTIiLCJfbGluZSRkZXNjZW5kYW50IiwiYmF0Y2hFbmQiLCJsZW5ndGhSZW1haW5pbmciLCJsaW5lTGVuZ3RoIiwiY29kZUluZGV4IiwiY29kZUxlbmd0aCIsImxlYXZlcyIsImZvcm1hdHNBcnIiLCJibG90cyIsImNvbWJpbmVGb3JtYXRzIiwiX3Njcm9sbCRsaW5lMyIsIl9zY3JvbGwkbGluZTQiLCJzdWZmaXhMZW5ndGgiLCJzdWZmaXgiLCJjdXJzb3JJbmRleCIsInRleHRCbG90Iiwib2xkVmFsdWUiLCJDT05URU5UUyIsIm9sZFRleHQiLCJuZXdUZXh0IiwiY29tYmluZWQiLCJtZXJnZWQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIyIiwiU2VsZWN0aW9uIiwiY29tcG9zaW5nIiwibW91c2VEb3duIiwiY3Vyc29yIiwic2F2ZWRSYW5nZSIsImhhbmRsZUNvbXBvc2l0aW9uIiwiaGFuZGxlRHJhZ2dpbmciLCJsaXN0ZW5ET00iLCJuYXRpdmUiLCJnZXROYXRpdmVSYW5nZSIsInRleHROb2RlIiwic2V0TmF0aXZlUmFuZ2UiLCJpZ25vcmVkIiwiX2NvbnRleHQkcmFuZ2UiLCJzdGFydE5vZGUiLCJzdGFydE9mZnNldCIsImVuZE5vZGUiLCJlbmRPZmZzZXQiLCJyZXN0b3JlIiwiYm9keSIsIl9mb3JtYXQiLCJuYXRpdmVSYW5nZSIsImNvbGxhcHNlZCIsImFmdGVyIiwiYXR0YWNoIiwiX3Njcm9sbCRsZWFmIiwiX3Njcm9sbCRsZWFmMiIsIl9sZWFmJHBvc2l0aW9uIiwicG9zaXRpb24iLCJfbGVhZiRwb3NpdGlvbjIiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwiX3Njcm9sbCRsZWFmMyIsIl9zY3JvbGwkbGVhZjQiLCJfbGVhZiRwb3NpdGlvbjMiLCJfbGVhZiRwb3NpdGlvbjQiLCJzZXRFbmQiLCJzaWRlIiwicmVjdCIsInJhbmdlQ291bnQiLCJnZXRSYW5nZUF0Iiwibm9ybWFsaXplTmF0aXZlIiwiaW5mbyIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVkVG9SYW5nZSIsImFjdGl2ZUVsZW1lbnQiLCJwb3NpdGlvbnMiLCJpbmRleGVzIiwiX3Bvc2l0aW9uIiwic3RhcnRDb250YWluZXIiLCJlbmRDb250YWluZXIiLCJsYXN0Q2hpbGQiLCJfc2Nyb2xsJGxlYWY1IiwiX3Njcm9sbCRsZWFmNiIsIl9sZWFmJHBvc2l0aW9uNSIsIl9sZWFmJHBvc2l0aW9uNiIsImZpcnN0Iiwic2Nyb2xsQm91bmRzIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJibHVyIiwicmFuZ2VUb05hdGl2ZSIsIm9sZFJhbmdlIiwiX2dldFJhbmdlIiwiX2dldFJhbmdlMiIsIkJyZWFrIiwibGlua2VkX2xpc3RfMSIsInNoYWRvd18xIiwiQ29udGFpbmVyQmxvdCIsImJ1aWxkIiwibWFrZUJsb3QiLCJmb3JFYWNoQXQiLCJjcml0ZXJpYSIsIl9hIiwibGVuZ3RoTGVmdCIsImRldGFjaCIsImNoaWxkQmxvdCIsInJlZkJsb3QiLCJpbnNlcnRJbnRvIiwibWVtbyIsInRhcmdldFBhcmVudCIsImluY2x1c2l2ZSIsImFkZGVkTm9kZXMiLCJyZW1vdmVkTm9kZXMiLCJtdXRhdGlvbiIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTkVEX0JZIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwibmV4dFNpYmxpbmciLCJyZXBsYWNlQ2hpbGQiLCJGb3JtYXRCbG90IiwicmVwbGFjZVdpdGgiLCJtb3ZlIiwiTGVhZkJsb3QiLCJJTkxJTkVfQkxPVCIsImxpYiIsImtlZXBOdWxsIiwiSXRlcmF0b3IiLCJyZXRPcCIsInN1YnN0ciIsIl9pbnN0YW5jZW9mIiwibmF0aXZlTWFwIiwibmF0aXZlU2V0IiwibmF0aXZlUHJvbWlzZSIsIlNldCIsImNpcmN1bGFyIiwiZGVwdGgiLCJpbmNsdWRlTm9uRW51bWVyYWJsZSIsImFsbFBhcmVudHMiLCJhbGxDaGlsZHJlbiIsInVzZUJ1ZmZlciIsIl9jbG9uZSIsIl9faXNBcnJheSIsIl9faXNSZWdFeHAiLCJfX2dldFJlZ0V4cEZsYWdzIiwibGFzdEluZGV4IiwiX19pc0RhdGUiLCJrZXlDaGlsZCIsInZhbHVlQ2hpbGQiLCJlbnRyeUNoaWxkIiwic3ltYm9scyIsInN5bWJvbCIsImFsbFByb3BlcnR5TmFtZXMiLCJwcm9wZXJ0eU5hbWUiLCJfX29ialRvU3RyIiwiZmxhZ3MiLCJjbG9uZVByb3RvdHlwZSIsIl9jb250YWluZXIyIiwiaXNMaW5lIiwiX1BhcmNobWVudCRTY3JvbGwiLCJiYXRjaCIsIl9saW5lIiwiX2xpbmUyIiwiX2xpbmUzIiwiX25ld2xpbmVJbmRleCIsImdldExpbmVzIiwib2JzZXJ2ZXIiLCJ0YWtlUmVjb3JkcyIsIlNIT1JUS0VZIiwiX3F1aWxsMiIsInBsYXRmb3JtIiwiS2V5Ym9hcmQiLCJfTW9kdWxlIiwiYmluZGluZ3MiLCJhZGRCaW5kaW5nIiwiRU5URVIiLCJzaGlmdEtleSIsImhhbmRsZUVudGVyIiwibWV0YUtleSIsImN0cmxLZXkiLCJhbHRLZXkiLCJCQUNLU1BBQ0UiLCJoYW5kbGVCYWNrc3BhY2UiLCJoYW5kbGVEZWxldGUiLCJwcmVmaXgiLCJoYW5kbGVEZWxldGVSYW5nZSIsImxpc3RlbiIsImV2dCIsImJpbmRpbmciLCJub3JtYWxpemUiLCJ3aGljaCIsImtleUNvZGUiLCJkZWZhdWx0UHJldmVudGVkIiwiX3F1aWxsJGdldExpbmUiLCJnZXRMaW5lIiwiX3F1aWxsJGdldExpbmUyIiwiX3F1aWxsJGdldExlYWYiLCJnZXRMZWFmIiwiX3F1aWxsJGdldExlYWYyIiwibGVhZlN0YXJ0Iiwib2Zmc2V0U3RhcnQiLCJfcmVmMiIsImxlYWZFbmQiLCJvZmZzZXRFbmQiLCJwcmVmaXhUZXh0Iiwic3VmZml4VGV4dCIsImN1ckNvbnRleHQiLCJlbXB0eSIsInByZXZlbnREZWZhdWx0IiwibWFrZUVtYmVkQXJyb3dIYW5kbGVyIiwiX3JlZjMiLCJ3aGVyZSIsIkxFRlQiLCJSSUdIVCIsIl9xdWlsbCRnZXRMZWFmMyIsIl9xdWlsbCRnZXRMaW5lMTEiLCJfcXVpbGwkZ2V0TGluZTEzIiwiY3VyRm9ybWF0cyIsInByZXZGb3JtYXRzIiwibmV4dExlbmd0aCIsIl9xdWlsbCRnZXRMaW5lMTUiLCJfcXVpbGwkZ2V0TGluZTE3IiwibmV4dEZvcm1hdHMiLCJmaXJzdEZvcm1hdHMiLCJsYXN0Rm9ybWF0cyIsImxpbmVGb3JtYXRzIiwibWFrZUNvZGVCbG9ja0hhbmRsZXIiLCJpbmRlbnQiLCJjb2RlLWJsb2NrIiwiX3F1aWxsJHNjcm9sbCRkZXNjZW5kIiwiX3F1aWxsJHNjcm9sbCRkZXNjZW5kMiIsInNjcm9sbEluZGV4IiwiZ2V0SW5kZXgiLCJtYWtlRm9ybWF0SGFuZGxlciIsInNob3J0S2V5IiwiRVNDQVBFIiwiVVAiLCJET1dOIiwiYm9sZCIsIml0YWxpYyIsInVuZGVybGluZSIsIm91dGRlbnQiLCJvdXRkZW50IGJhY2tzcGFjZSIsImluZGVudCBjb2RlLWJsb2NrIiwib3V0ZGVudCBjb2RlLWJsb2NrIiwicmVtb3ZlIHRhYiIsInRhYiIsImN1dG9mZiIsInVwZGF0ZUNvbnRlbnRzIiwibGlzdCBlbXB0eSBlbnRlciIsImNoZWNrbGlzdCBlbnRlciIsIl9xdWlsbCRnZXRMaW5lMyIsIl9xdWlsbCRnZXRMaW5lNCIsImhlYWRlciBlbnRlciIsIl9xdWlsbCRnZXRMaW5lNSIsIl9xdWlsbCRnZXRMaW5lNiIsImhlYWRlciIsImxpc3QgYXV0b2ZpbGwiLCJfcXVpbGwkZ2V0TGluZTciLCJfcXVpbGwkZ2V0TGluZTgiLCJjb2RlIGV4aXQiLCJfcXVpbGwkZ2V0TGluZTkiLCJfcXVpbGwkZ2V0TGluZTEwIiwiZW1iZWQgbGVmdCIsImVtYmVkIGxlZnQgc2hpZnQiLCJlbWJlZCByaWdodCIsImVtYmVkIHJpZ2h0IHNoaWZ0IiwiQ3Vyc29yIiwiX2xlbmd0aCIsInJlc3RvcmVUZXh0IiwiX1BhcmNobWVudCRDb250YWluZXIiLCJDb2xvclN0eWxlIiwiQ29sb3JDbGFzcyIsIkNvbG9yQXR0cmlidXRvciIsIl9QYXJjaG1lbnQkQXR0cmlidXRvciIsInBhcnNlSW50Iiwic2FuaXRpemUiLCJfaW5saW5lIiwiTGluayIsIl9zYW5pdGl6ZSIsIlBST1RPQ09MX1dISVRFTElTVCIsIlNBTklUSVpFRF9VUkwiLCJwcm90b2NvbHMiLCJhbmNob3IiLCJwcm90b2NvbCIsIl9rZXlib2FyZDIiLCJfZHJvcGRvd24yIiwib3B0aW9uc0NvdW50ZXIiLCJ0b2dnbGVBcmlhQXR0cmlidXRlIiwiZWxlbWVudCIsIlBpY2tlciIsInNlbGVjdCIsImJ1aWxkUGlja2VyIiwibGFiZWwiLCJ0b2dnbGVQaWNrZXIiLCJlc2NhcGUiLCJvcHRpb24iLCJ0YWJJbmRleCIsImhhc0F0dHJpYnV0ZSIsInNlbGVjdEl0ZW0iLCJidWlsZEl0ZW0iLCJzZWxlY3RlZCIsImJ1aWxkTGFiZWwiLCJidWlsZE9wdGlvbnMiLCJ0cmlnZ2VyIiwic2VsZWN0ZWRJbmRleCIsIkV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiaXNBY3RpdmUiLCJfZW1iZWQyIiwiX3Njcm9sbDIiLCJfY2xpcGJvYXJkMiIsIl9oaXN0b3J5MiIsImJsb3RzL2Jsb2NrIiwiYmxvdHMvYmxvY2svZW1iZWQiLCJibG90cy9icmVhayIsImJsb3RzL2NvbnRhaW5lciIsImJsb3RzL2N1cnNvciIsImJsb3RzL2VtYmVkIiwiYmxvdHMvaW5saW5lIiwiYmxvdHMvc2Nyb2xsIiwiYmxvdHMvdGV4dCIsIm1vZHVsZXMvY2xpcGJvYXJkIiwibW9kdWxlcy9oaXN0b3J5IiwibW9kdWxlcy9rZXlib2FyZCIsIlNoYWRvd0Jsb3QiLCJjbG9uZU5vZGUiLCJwYXJlbnRCbG90IiwicmVmRG9tTm9kZSIsIkF0dHJpYnV0b3JTdG9yZSIsImF0dHIiLCJDbGFzc0F0dHJpYnV0b3IiLCJjYW1lbGl6ZSIsInJlc3QiLCJTdHlsZUF0dHJpYnV0b3IiLCJUaGVtZSIsInRoZW1lcyIsIkdVQVJEX1RFWFQiLCJjb250ZW50Tm9kZSIsImNoaWxkTm9kZSIsImxlZnRHdWFyZCIsInJpZ2h0R3VhcmQiLCJwcmV2TGVuZ3RoIiwiQWxpZ25TdHlsZSIsIkFsaWduQ2xhc3MiLCJBbGlnbkF0dHJpYnV0ZSIsIkJhY2tncm91bmRTdHlsZSIsIkJhY2tncm91bmRDbGFzcyIsIl9jb2xvciIsIkRpcmVjdGlvblN0eWxlIiwiRGlyZWN0aW9uQ2xhc3MiLCJEaXJlY3Rpb25BdHRyaWJ1dGUiLCJGb250Q2xhc3MiLCJGb250U3R5bGUiLCJGb250U3R5bGVBdHRyaWJ1dG9yIiwiU2l6ZVN0eWxlIiwiU2l6ZUNsYXNzIiwiYWxpZ24iLCIiLCJjZW50ZXIiLCJqdXN0aWZ5IiwiYmFja2dyb3VuZCIsImJsb2NrcXVvdGUiLCJjbGVhbiIsImNvZGUiLCJjb2xvciIsImRpcmVjdGlvbiIsInJ0bCIsImZsb2F0IiwiZnVsbCIsImZvcm11bGEiLCIxIiwiMiIsIisxIiwiLTEiLCJsaW5rIiwib3JkZXJlZCIsInNjcmlwdCIsInN1YiIsInN1cGVyIiwic3RyaWtlIiwidmlkZW8iLCJnZXRMYXN0Q2hhbmdlSW5kZXgiLCJIaXN0b3J5IiwibGFzdFJlY29yZGVkIiwiaWdub3JlQ2hhbmdlIiwidXNlck9ubHkiLCJyZWNvcmQiLCJ1bmRvIiwicmVkbyIsImRlc3QiLCJzdGFjayIsImNoYW5nZURlbHRhIiwidW5kb0RlbHRhIiwidGltZXN0YW1wIiwiZGVsYXkiLCJtYXhTdGFjayIsImRlbGV0ZUxlbmd0aCIsImNoYW5nZUluZGV4IiwiZW5kc1dpdGhOZXdsaW5lQ2hhbmdlIiwiQmFzZVRvb2x0aXAiLCJfY29sb3JQaWNrZXIyIiwiX2ljb25QaWNrZXIyIiwiX3BpY2tlcjIiLCJfdG9vbHRpcDIiLCJBTElHTlMiLCJDT0xPUlMiLCJGT05UUyIsIkhFQURFUlMiLCJTSVpFUyIsIkJhc2VUaGVtZSIsIl9UaGVtZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0b29sdGlwIiwidGV4dGJveCIsInBpY2tlcnMiLCJwaWNrZXIiLCJleHRlbmRUb29sYmFyIiwiYnV0dG9ucyIsImljb25zIiwiYnV0dG9uIiwic2VsZWN0cyIsImZpbGxTZWxlY3QiLCJoYW5kbGVycyIsImVkaXQiLCJmaWxlSW5wdXQiLCJmaWxlcyIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZWFkQXNEYXRhVVJMIiwiY2xpY2siLCJfVG9vbHRpcCIsImJvdW5kc0NvbnRhaW5lciIsInNhdmUiLCJjYW5jZWwiLCJtb2RlIiwicHJldmlldyIsImxpbmtSYW5nZSIsInJlc3RvcmVGb2N1cyIsImV4dHJhY3RWaWRlb1VybCIsImRlZmF1bHRWYWx1ZSIsIkxpbmtlZExpc3QiLCJhcHBlbmQiLCJub2RlcyIsImN1ciIsImN1ck5vZGUiLCJyZXQiLCJjYWxsYmFjayIsImN1ckluZGV4IiwiY3VyTGVuZ3RoIiwiT0JTRVJWRVJfQ09ORklHIiwiY2hhcmFjdGVyRGF0YU9sZFZhbHVlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsIlNjcm9sbEJsb3QiLCJkaXNjb25uZWN0IiwicmVjb3JkcyIsIm1hcmsiLCJtYXJrUGFyZW50IiwicmVtYWluaW5nIiwicHJldmlvdXNTaWJsaW5nIiwiZ3JhbmRDaGlsZCIsIklubGluZUJsb3QiLCJvYmoxIiwib2JqMiIsInByb3AiLCJpc0VxdWFsIiwiQmxvY2tCbG90IiwiRW1iZWRCbG90Iiwic3BsaXRUZXh0IiwiX3RvZ2dsZSIsIkRPTVRva2VuTGlzdCIsInRva2VuIiwic3ViamVjdFN0cmluZyIsImlzRmluaXRlIiwiZXhlY0NvbW1hbmQiLCJESUZGX0RFTEVURSIsIkRJRkZfSU5TRVJUIiwiRElGRl9FUVVBTCIsImRpZmZfbWFpbiIsInRleHQxIiwidGV4dDIiLCJjdXJzb3JfcG9zIiwiY29tbW9ubGVuZ3RoIiwiZGlmZl9jb21tb25QcmVmaXgiLCJjb21tb25wcmVmaXgiLCJzdWJzdHJpbmciLCJkaWZmX2NvbW1vblN1ZmZpeCIsImNvbW1vbnN1ZmZpeCIsImRpZmZzIiwibG9uZ3RleHQiLCJzaG9ydHRleHQiLCJobSIsImRpZmZfaGFsZk1hdGNoSV8iLCJiZXN0X2xvbmd0ZXh0X2EiLCJiZXN0X2xvbmd0ZXh0X2IiLCJiZXN0X3Nob3J0dGV4dF9hIiwiYmVzdF9zaG9ydHRleHRfYiIsInNlZWQiLCJiZXN0X2NvbW1vbiIsInByZWZpeExlbmd0aCIsInRleHQxX2EiLCJ0ZXh0MV9iIiwidGV4dDJfYSIsInRleHQyX2IiLCJobTEiLCJobTIiLCJtaWRfY29tbW9uIiwiZGlmZl9oYWxmTWF0Y2hfIiwiZGlmZnNfYSIsImRpZmZzX2IiLCJ0ZXh0MV9sZW5ndGgiLCJ0ZXh0Ml9sZW5ndGgiLCJtYXhfZCIsInZfb2Zmc2V0Iiwidl9sZW5ndGgiLCJ2MSIsInYyIiwiZnJvbnQiLCJrMXN0YXJ0IiwiazFlbmQiLCJrMnN0YXJ0IiwiazJlbmQiLCJrMSIsImsxX29mZnNldCIsInkxIiwieDEiLCJrMl9vZmZzZXQiLCJ4MiIsImRpZmZfYmlzZWN0U3BsaXRfIiwiazIiLCJ5MiIsImRpZmZfYmlzZWN0XyIsImRpZmZfY29tcHV0ZV8iLCJkaWZmX2NsZWFudXBNZXJnZSIsInBvaW50ZXIiLCJjb3VudF9kZWxldGUiLCJjb3VudF9pbnNlcnQiLCJ0ZXh0X2RlbGV0ZSIsInRleHRfaW5zZXJ0IiwiY2hhbmdlcyIsIm5vcm0iLCJjdXJyZW50X3BvcyIsIm5leHRfcG9zIiwic3BsaXRfcG9zIiwiZF9sZWZ0IiwiZF9yaWdodCIsImN1cnNvcl9ub3JtYWxpemVfZGlmZiIsIm5kaWZmcyIsImN1cnNvcl9wb2ludGVyIiwiZF9uZXh0IiwibWVyZ2VfdHVwbGVzIiwiZml4X2N1cnNvciIsImNvbXBhY3QiLCJzdGFydHNfd2l0aF9wYWlyX2VuZCIsImZpeGVkX2RpZmZzIiwiZml4X2Vtb2ppIiwieSIsInRleHQxYSIsInRleHQyYSIsInRleHQxYiIsInRleHQyYiIsImRpZmZzYiIsInBvaW50ZXJtaW4iLCJwb2ludGVybWF4IiwicG9pbnRlcm1pZCIsInBvaW50ZXJzdGFydCIsInBvaW50ZXJlbmQiLCJsZWZ0X2QiLCJyaWdodF9kIiwic2hpbSIsInN1cHBvcnRzQXJndW1lbnRzQ2xhc3MiLCJzdXBwb3J0ZWQiLCJ1bnN1cHBvcnRlZCIsIkV2ZW50cyIsIkVFIiwiRXZlbnRFbWl0dGVyIiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsImV2ZW50TmFtZXMiLCJleGlzdHMiLCJhdmFpbGFibGUiLCJlZSIsImExIiwiYTIiLCJhMyIsImE0IiwiYTUiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImFkZExpc3RlbmVyIiwic2V0TWF4TGlzdGVuZXJzIiwicHJlZml4ZWQiLCJtYXRjaFRleHQiLCJtYXRjaFNwYWNpbmciLCJtYXRjaE5ld2xpbmUiLCJtYXRjaEJsb3QiLCJtYXRjaEF0dHJpYnV0b3IiLCJfZXh0ZW5kMyIsIl9hbGlnbiIsIl9iYWNrZ3JvdW5kIiwiX2RpcmVjdGlvbiIsIl9mb250IiwiX3NpemUiLCJET01fS0VZIiwiQ0xJUEJPQVJEX0NPTkZJRyIsImRlbHRhRW5kc1dpdGgiLCJFTEVNRU5UX05PREUiLCJmb250U3R5bGUiLCJjb21wdXRlU3R5bGUiLCJmb250V2VpZ2h0IiwiYXBwbHlGb3JtYXQiLCJwYXJzZUZsb2F0IiwidGV4dEluZGVudCIsIm1hdGNoQWxpYXMiLCJBVFRSSUJVVEVfQVRUUklCVVRPUlMiLCJTVFlMRV9BVFRSSUJVVE9SUyIsIkNsaXBib2FyZCIsIm9uUGFzdGUiLCJtYXRjaGVycyIsInNlbGVjdG9yIiwibWF0Y2hlciIsIm1hdGNoVmlzdWFsIiwiYWRkTWF0Y2hlciIsImlubmVyVGV4dCIsIl9wcmVwYXJlTWF0Y2hpbmciLCJwcmVwYXJlTWF0Y2hpbmciLCJfcHJlcGFyZU1hdGNoaW5nMiIsImVsZW1lbnRNYXRjaGVycyIsInRleHRNYXRjaGVycyIsInRyYXZlcnNlIiwibm9kZVR5cGUiLCJjaGlsZHJlbkRlbHRhIiwicGFzdGUiLCJwYWlyIiwiX3BhaXIiLCJnZXRDb21wdXRlZFN0eWxlIiwiZW5kVGV4dCIsIm5leHRFbGVtZW50U2libGluZyIsIm5vZGVIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJvZmZzZXRUb3AiLCJ3aGl0ZVNwYWNlIiwicmVwbGFjZXIiLCJjb2xsYXBzZSIsIkJvbGQiLCJhZGRDb250cm9scyIsIlRvb2xiYXIiLCJfcmV0IiwiY29udHJvbHMiLCJhZGRIYW5kbGVyIiwiX3RoaXMkcXVpbGwkc2VsZWN0aW9uIiwiX3F1aWxsJHNlbGVjdGlvbiRnZXRSIiwicHJvbXB0IiwiYWRkQnV0dG9uIiwiZ3JvdXBzIiwiZ3JvdXAiLCJjb250cm9sIiwiYWRkU2VsZWN0IiwiX3BpY2tlciIsIkNvbG9yUGlja2VyIiwiX1BpY2tlciIsImJhY2tncm91bmRDb2xvciIsImNvbG9yTGFiZWwiLCJJY29uUGlja2VyIiwiZGVmYXVsdEl0ZW0iLCJUb29sdGlwIiwiVEVNUExBVEUiLCJyZWZlcmVuY2UiLCJvZmZzZXRXaWR0aCIsInJvb3RCb3VuZHMiLCJ2ZXJ0aWNhbFNoaWZ0IiwiX2Jhc2UiLCJfYmFzZTIiLCJfbGluazIiLCJfaWNvbnMyIiwiVE9PTEJBUl9DT05GSUciLCJTbm93VGhlbWUiLCJfQmFzZVRoZW1lIiwiYnVpbGRCdXR0b25zIiwiYnVpbGRQaWNrZXJzIiwiU25vd1Rvb2x0aXAiLCJfQmFzZVRvb2x0aXAiLCJzaG93IiwiX2NvcmUyIiwiX2luZGVudCIsIl9ibG9ja3F1b3RlMiIsIl9oZWFkZXIyIiwiX2xpc3QiLCJfbGlzdDIiLCJfYm9sZDIiLCJfaXRhbGljMiIsIl9zY3JpcHQyIiwiX3N0cmlrZTIiLCJfdW5kZXJsaW5lMiIsIl9pbWFnZTIiLCJfdmlkZW8yIiwiX2NvZGUiLCJfZm9ybXVsYTIiLCJfc3ludGF4MiIsIl90b29sYmFyMiIsIl9idWJibGUyIiwiX3Nub3cyIiwiYXR0cmlidXRvcnMvYXR0cmlidXRlL2RpcmVjdGlvbiIsImF0dHJpYnV0b3JzL2NsYXNzL2FsaWduIiwiYXR0cmlidXRvcnMvY2xhc3MvYmFja2dyb3VuZCIsImF0dHJpYnV0b3JzL2NsYXNzL2NvbG9yIiwiYXR0cmlidXRvcnMvY2xhc3MvZGlyZWN0aW9uIiwiYXR0cmlidXRvcnMvY2xhc3MvZm9udCIsImF0dHJpYnV0b3JzL2NsYXNzL3NpemUiLCJhdHRyaWJ1dG9ycy9zdHlsZS9hbGlnbiIsImF0dHJpYnV0b3JzL3N0eWxlL2JhY2tncm91bmQiLCJhdHRyaWJ1dG9ycy9zdHlsZS9jb2xvciIsImF0dHJpYnV0b3JzL3N0eWxlL2RpcmVjdGlvbiIsImF0dHJpYnV0b3JzL3N0eWxlL2ZvbnQiLCJhdHRyaWJ1dG9ycy9zdHlsZS9zaXplIiwiZm9ybWF0cy9hbGlnbiIsImZvcm1hdHMvZGlyZWN0aW9uIiwiZm9ybWF0cy9pbmRlbnQiLCJJbmRlbnRDbGFzcyIsImZvcm1hdHMvYmFja2dyb3VuZCIsImZvcm1hdHMvY29sb3IiLCJmb3JtYXRzL2ZvbnQiLCJmb3JtYXRzL3NpemUiLCJmb3JtYXRzL2Jsb2NrcXVvdGUiLCJmb3JtYXRzL2NvZGUtYmxvY2siLCJmb3JtYXRzL2hlYWRlciIsImZvcm1hdHMvbGlzdCIsImZvcm1hdHMvYm9sZCIsImZvcm1hdHMvY29kZSIsImZvcm1hdHMvaXRhbGljIiwiZm9ybWF0cy9saW5rIiwiZm9ybWF0cy9zY3JpcHQiLCJmb3JtYXRzL3N0cmlrZSIsImZvcm1hdHMvdW5kZXJsaW5lIiwiZm9ybWF0cy9pbWFnZSIsImZvcm1hdHMvdmlkZW8iLCJmb3JtYXRzL2xpc3QvaXRlbSIsIkxpc3RJdGVtIiwibW9kdWxlcy9mb3JtdWxhIiwibW9kdWxlcy9zeW50YXgiLCJtb2R1bGVzL3Rvb2xiYXIiLCJ0aGVtZXMvYnViYmxlIiwidGhlbWVzL3Nub3ciLCJ1aS9pY29ucyIsInVpL3BpY2tlciIsInVpL2ljb24tcGlja2VyIiwidWkvY29sb3ItcGlja2VyIiwidWkvdG9vbHRpcCIsIklkZW50QXR0cmlidXRvciIsIkJsb2NrcXVvdGUiLCJIZWFkZXIiLCJMaXN0IiwiX0NvbnRhaW5lciIsImxpc3RFdmVudEhhbmRsZXIiLCJfYm9sZCIsIkl0YWxpYyIsIl9Cb2xkIiwiU2NyaXB0IiwiU3RyaWtlIiwiVW5kZXJsaW5lIiwiX2xpbmsiLCJBVFRSSUJVVEVTIiwiSW1hZ2UiLCJWaWRlbyIsIl9CbG9ja0VtYmVkIiwiRm9ybXVsYUJsb3QiLCJfRW1iZWQiLCJrYXRleCIsInRocm93T25FcnJvciIsImVycm9yQ29sb3IiLCJGb3JtdWxhIiwiQ29kZVRva2VuIiwiU3ludGF4Q29kZUJsb2NrIiwiX0NvZGVCbG9jayIsIl9oaWdobGlnaHQiLCJjYWNoZWRUZXh0IiwiU3ludGF4IiwiaGlnaGxpZ2h0IiwidGltZXIiLCJjbGVhclRpbWVvdXQiLCJpbnRlcnZhbCIsImhsanMiLCJoaWdobGlnaHRBdXRvIiwiQnViYmxlVG9vbHRpcCIsIkJ1YmJsZVRoZW1lIiwibGFzdExpbmUiLCJfYm91bmRzIiwiYXJyb3ciLCJtYXJnaW5MZWZ0IiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJudWxsVGFnIiwidW5kZWZpbmVkVGFnIiwic3ltVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsImJhc2VHZXRUYWciLCJpc09iamVjdExpa2UiLCJzeW1ib2xUYWciLCJmcmVlR2xvYmFsIiwiYXJyYXlNYXAiLCJpc1N5bWJvbCIsIklORklOSVRZIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xUb1N0cmluZyIsImJhc2VUb1N0cmluZyIsIkNhbmNlbCIsIl9fQ0FOQ0VMX18iLCJlbmhhbmNlRXJyb3IiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJzZXR0bGUiLCJidWlsZFVSTCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImxvYWRFdmVudCIsInhEb21haW4iLCJYRG9tYWluUmVxdWVzdCIsIm9ucHJvZ3Jlc3MiLCJvbnRpbWVvdXQiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkF1dGhvcml6YXRpb24iLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uZXJyb3IiLCJjb29raWVzIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwicmVhZCIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJhYm9ydCIsInNlbmQiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsInNjYWxlIiwiaW5Mb3ciLCJpbkhpZ2giLCJvdXRMb3ciLCJvdXRIaWdoIiwiZ2V0S2V5cyIsImlzRW51bSIsImlzRW50cmllcyIsInJlcGVhdCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJzdHJpbmdMZW5ndGgiLCJmaWxsU3RyIiwiaW50TWF4TGVuZ3RoIiwiZmlsbExlbiIsInN0cmluZ0ZpbGxlciIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiZmxhdHRlbkludG9BcnJheSIsInNvdXJjZUxlbiIsIm1hcHBlciIsInNwcmVhZGFibGUiLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwiZ09QUyIsIlJlZmxlY3QiLCJvd25LZXlzIiwiZ2V0U3ltYm9scyIsIm51bWJlciIsIiRoYXMiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiX2wiLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZmluZFVuY2F1Z2h0RnJvemVuIiwiZW50cnkiLCJ1ZnN0b3JlIiwiSW50ZXJuYWxNYXAiLCJlYWNoIiwiYXNzaWduIiwid2VhayIsInRtcCIsIiRXZWFrTWFwIiwiZnJlZXplIiwiX2YiLCJzdHJvbmciLCIkaXRlckRlZmluZSIsIlNJWkUiLCJnZXRFbnRyeSIsImsiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsInByb21pc2VDYXBhYmlsaXR5IiwidG8iLCJpbmMiLCJpc1JpZ2h0IiwiRVBTSUxPTiIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJmcm91bmQiLCIkYWJzIiwiJHNpZ24iLCJsb2cxcCIsIm1zZyIsIiRwYXJzZUZsb2F0IiwiJHRyaW0iLCIkcGFyc2VJbnQiLCJ3cyIsImhleCIsInJhZGl4IiwidW4iLCJmYWN0b3JpZXMiLCJwYXJ0QXJncyIsImJvdW5kIiwiY29uc3RydWN0IiwiJGFzc2lnbiIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJsb2NhbHMiLCJfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX3J1bnRpbWVfY29tcG9uZW50X25vcm1hbGl6ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl9fdnVlX3N0eWxlc19fIiwiQ29tcG9uZW50IiwiX2JhYmVsX2xvYWRlcl9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfc2VsZWN0b3JfdHlwZV9zY3JpcHRfaW5kZXhfMF9WaWRlb0VtYmVkX3Z1ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX3RlbXBsYXRlX2NvbXBpbGVyX2luZGV4X2lkX2RhdGFfdl9lODI0MzQ4OF9oYXNTY29wZWRfZmFsc2Vfb3B0aW9uc0lkXzBfYnVibGVfdHJhbnNmb3Jtc19ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfc2VsZWN0b3JfdHlwZV90ZW1wbGF0ZV9pbmRleF8wX1ZpZGVvRW1iZWRfdnVlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJOQU4iLCJyZVRyaW0iLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNPY3RhbCIsImZyZWVQYXJzZUludCIsImlzQmluYXJ5IiwidG9OdW1iZXIiLCJNQVhfSU5URUdFUiIsInRvRmluaXRlIiwicmVtYWluZGVyIiwicnNBc3RyYWwiLCJyc0NvbWJvIiwicnNGaXR6IiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJlT3B0TW9kIiwicnNTZXEiLCJyc1N5bWJvbCIsInJlVW5pY29kZSIsImFzY2lpVG9BcnJheSIsImhhc1VuaWNvZGUiLCJ1bmljb2RlVG9BcnJheSIsImFzY2lpU2l6ZSIsImJhc2VQcm9wZXJ0eSIsInVuaWNvZGVTaXplIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJmcmVlRXhwb3J0cyIsImZyZWVNb2R1bGUiLCJmcmVlUHJvY2VzcyIsIm5vZGVVdGlsIiwiZnVuYyIsInJlZ2V4cFRhZyIsImJhc2VJc1JlZ0V4cCIsImJhc2VVbmFyeSIsIm5vZGVJc1JlZ0V4cCIsImJhc2VTbGljZSIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwib2JqZWN0UHJvdG8iLCJpc093biIsInVubWFza2VkIiwiaXRlcmF0ZWUiLCJmcmVlU2VsZiIsImNhc3RTbGljZSIsInN0cmluZ1NpemUiLCJzdHJpbmdUb0FycmF5IiwiREVGQVVMVF9UUlVOQ19MRU5HVEgiLCJERUZBVUxUX1RSVU5DX09NSVNTSU9OIiwicmVGbGFncyIsIm9taXNzaW9uIiwic3RyTGVuZ3RoIiwic3RyU3ltYm9scyIsInNlYXJjaCIsIm5ld0VuZCIsIl9iYWJlbF9sb2FkZXJfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX3NlbGVjdG9yX3R5cGVfc2NyaXB0X2luZGV4XzBfU291cmNlSW1hZ2VfdnVlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIl9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfdGVtcGxhdGVfY29tcGlsZXJfaW5kZXhfaWRfZGF0YV92XzAzNmFiNTQ2X2hhc1Njb3BlZF9mYWxzZV9vcHRpb25zSWRfMF9idWJsZV90cmFuc2Zvcm1zX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9zZWxlY3Rvcl90eXBlX3RlbXBsYXRlX2luZGV4XzBfU291cmNlSW1hZ2VfdnVlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfYmFiZWxfbG9hZGVyX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9zZWxlY3Rvcl90eXBlX3NjcmlwdF9pbmRleF8wX1NvdXJjZUljb25fdnVlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIl9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfdGVtcGxhdGVfY29tcGlsZXJfaW5kZXhfaWRfZGF0YV92XzU4MWU2ZTMyX2hhc1Njb3BlZF9mYWxzZV9vcHRpb25zSWRfMF9idWJsZV90cmFuc2Zvcm1zX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9zZWxlY3Rvcl90eXBlX3RlbXBsYXRlX2luZGV4XzBfU291cmNlSWNvbl92dWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9iYWJlbF9sb2FkZXJfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX3NlbGVjdG9yX3R5cGVfc2NyaXB0X2luZGV4XzBfTGlua0VtYmVkX3Z1ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX3RlbXBsYXRlX2NvbXBpbGVyX2luZGV4X2lkX2RhdGFfdl9jMzg0MDA3NF9oYXNTY29wZWRfZmFsc2Vfb3B0aW9uc0lkXzBfYnVibGVfdHJhbnNmb3Jtc19ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfc2VsZWN0b3JfdHlwZV90ZW1wbGF0ZV9pbmRleF8wX0xpbmtFbWJlZF92dWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9iYWJlbF9sb2FkZXJfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX3NlbGVjdG9yX3R5cGVfc2NyaXB0X2luZGV4XzBfRW1iZWRJdGVtX3Z1ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX3RlbXBsYXRlX2NvbXBpbGVyX2luZGV4X2lkX2RhdGFfdl9jMTNiOTU3Ml9oYXNTY29wZWRfZmFsc2Vfb3B0aW9uc0lkXzBfYnVibGVfdHJhbnNmb3Jtc19ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfc2VsZWN0b3JfdHlwZV90ZW1wbGF0ZV9pbmRleF8wX0VtYmVkSXRlbV92dWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInJlZ2lzdGVySW1tZWRpYXRlIiwibWVzc2FnZVByZWZpeCIsIm9uR2xvYmFsTWVzc2FnZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiZG9jIiwiYXR0YWNoVG8iLCJoYW5kbGUiLCJydW5JZlByZXNlbnQiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJhdHRhY2hFdmVudCIsIlRpbWVvdXQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ1bnJlZiIsImVucm9sbCIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsImFjdGl2ZSIsIl9vblRpbWVvdXQiLCJlbXB0eU9iamVjdCIsImlzVW5kZWYiLCJpc0RlZiIsImlzVHJ1ZSIsImlzUHJpbWl0aXZlIiwiX3RvU3RyaW5nIiwiaXNWYWxpZEFycmF5SW5kZXgiLCJtYWtlTWFwIiwiZXhwZWN0c0xvd2VyQ2FzZSIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJjYWNoZWQiLCJjYW1lbGl6ZVJFIiwiY2FwaXRhbGl6ZSIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwiYm91bmRGbiIsInRvQXJyYXkiLCJfZnJvbSIsIm5vIiwiaWRlbnRpdHkiLCJsb29zZUVxdWFsIiwiaXNPYmplY3RBIiwiaXNPYmplY3RCIiwiaXNBcnJheUEiLCJpc0FycmF5QiIsImtleXNBIiwia2V5c0IiLCJsb29zZUluZGV4T2YiLCJjYWxsZWQiLCJTU1JfQVRUUiIsIkFTU0VUX1RZUEVTIiwiTElGRUNZQ0xFX0hPT0tTIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwic2lsZW50IiwicHJvZHVjdGlvblRpcCIsImRldnRvb2xzIiwicGVyZm9ybWFuY2UiLCJlcnJvckhhbmRsZXIiLCJ3YXJuSGFuZGxlciIsImlnbm9yZWRFbGVtZW50cyIsImtleUNvZGVzIiwiaXNSZXNlcnZlZFRhZyIsImlzUmVzZXJ2ZWRBdHRyIiwiaXNVbmtub3duRWxlbWVudCIsImdldFRhZ05hbWVzcGFjZSIsInBhcnNlUGxhdGZvcm1UYWdOYW1lIiwibXVzdFVzZVByb3AiLCJfbGlmZWN5Y2xlSG9va3MiLCJiYWlsUkUiLCJfaXNTZXJ2ZXIiLCJoYXNQcm90byIsImluQnJvd3NlciIsImluV2VleCIsIldYRW52aXJvbm1lbnQiLCJ3ZWV4UGxhdGZvcm0iLCJVQSIsImlzSUUiLCJpc0lFOSIsImlzRWRnZSIsImlzSU9TIiwibmF0aXZlV2F0Y2giLCJ3YXRjaCIsInN1cHBvcnRzUGFzc2l2ZSIsImlzU2VydmVyUmVuZGVyaW5nIiwiVlVFX0VOViIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc05hdGl2ZSIsIkN0b3IiLCJfU2V0IiwiaGFzU3ltYm9sIiwiRGVwIiwic3VicyIsImFkZFN1YiIsInJlbW92ZVN1YiIsImRlcGVuZCIsImFkZERlcCIsInRhcmdldFN0YWNrIiwicHVzaFRhcmdldCIsIl90YXJnZXQiLCJwb3BUYXJnZXQiLCJWTm9kZSIsImVsbSIsImNvbXBvbmVudE9wdGlvbnMiLCJhc3luY0ZhY3RvcnkiLCJmbkNvbnRleHQiLCJmbk9wdGlvbnMiLCJmblNjb3BlSWQiLCJjb21wb25lbnRJbnN0YW5jZSIsInJhdyIsImlzU3RhdGljIiwiaXNSb290SW5zZXJ0IiwiaXNDb21tZW50IiwiaXNDbG9uZWQiLCJpc09uY2UiLCJhc3luY01ldGEiLCJpc0FzeW5jUGxhY2Vob2xkZXIiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJjcmVhdGVFbXB0eVZOb2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsImluc2VydGVkIiwib2IiLCJfX29iX18iLCJvYnNlcnZlQXJyYXkiLCJkZXAiLCJzaG91bGRPYnNlcnZlIiwidG9nZ2xlT2JzZXJ2aW5nIiwidm1Db3VudCIsInByb3RvQXVnbWVudCIsImNvcHlBdWdtZW50Iiwid2FsayIsImFzUm9vdERhdGEiLCJfaXNWdWUiLCJkZWZpbmVSZWFjdGl2ZSIsImN1c3RvbVNldHRlciIsInNoYWxsb3ciLCJjaGlsZE9iIiwiZGVwZW5kQXJyYXkiLCJuZXdWYWwiLCJkZWwiLCJpdGVtcyIsInN0cmF0cyIsIm1lcmdlRGF0YSIsInRvVmFsIiwiZnJvbVZhbCIsIm1lcmdlRGF0YU9yRm4iLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsInZtIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJtZXJnZUhvb2siLCJtZXJnZUFzc2V0cyIsImtleSQxIiwiaW5qZWN0IiwiY29tcHV0ZWQiLCJwcm92aWRlIiwiZGVmYXVsdFN0cmF0IiwibWVyZ2VPcHRpb25zIiwibm9ybWFsaXplUHJvcHMiLCJub3JtYWxpemVJbmplY3QiLCJkaXJzIiwiZGlyZWN0aXZlcyIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMiLCJleHRlbmRzRnJvbSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJwcm9wc0RhdGEiLCJhYnNlbnQiLCJib29sZWFuSW5kZXgiLCJnZXRUeXBlSW5kZXgiLCJzdHJpbmdJbmRleCIsIl9wcm9wcyIsImdldFR5cGUiLCJnZXRQcm9wRGVmYXVsdFZhbHVlIiwicHJldlNob3VsZE9ic2VydmUiLCJpc1NhbWVUeXBlIiwiZXhwZWN0ZWRUeXBlcyIsImhhbmRsZUVycm9yIiwiJHBhcmVudCIsImhvb2tzIiwiZXJyb3JDYXB0dXJlZCIsImdsb2JhbEhhbmRsZUVycm9yIiwibG9nRXJyb3IiLCJtaWNyb1RpbWVyRnVuYyIsIm1hY3JvVGltZXJGdW5jIiwiY2FsbGJhY2tzIiwicGVuZGluZyIsImZsdXNoQ2FsbGJhY2tzIiwiY29waWVzIiwidXNlTWFjcm9UYXNrIiwiX3Jlc29sdmUiLCJzZWVuT2JqZWN0cyIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJpc0Zyb3plbiIsImRlcElkIiwibm9ybWFsaXplRXZlbnQiLCJwYXNzaXZlIiwib25jZSQkMSIsImNhcHR1cmUiLCJjcmVhdGVGbkludm9rZXIiLCJpbnZva2VyIiwiYXJndW1lbnRzJDEiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJvbGRPbiIsInJlbW92ZSQkMSIsIm9sZCIsIm1lcmdlVk5vZGVIb29rIiwiaG9va0tleSIsIm9sZEhvb2siLCJ3cmFwcGVkSG9vayIsImNoZWNrUHJvcCIsImhhc2giLCJwcmVzZXJ2ZSIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsIm5lc3RlZEluZGV4IiwiaXNUZXh0Tm9kZSIsIl9pc1ZMaXN0IiwiZW5zdXJlQ3RvciIsImNvbXAiLCJiYXNlIiwiZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCIsIiRvbmNlIiwiJG9uIiwicmVtb3ZlJDEiLCIkb2ZmIiwidXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIiwib2xkTGlzdGVuZXJzIiwicmVzb2x2ZVNsb3RzIiwic2xvdHMiLCJzbG90IiwibmFtZSQxIiwiaXNXaGl0ZXNwYWNlIiwicmVzb2x2ZVNjb3BlZFNsb3RzIiwiYWN0aXZlSW5zdGFuY2UiLCJpc0luSW5hY3RpdmVUcmVlIiwiX2luYWN0aXZlIiwiYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImRpcmVjdCIsIl9kaXJlY3RJbmFjdGl2ZSIsIiRjaGlsZHJlbiIsImNhbGxIb29rIiwiX2hhc0hvb2tFdmVudCIsIiRlbWl0IiwiYWN0aXZhdGVkQ2hpbGRyZW4iLCJ3YWl0aW5nIiwiZmx1c2hpbmciLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsImFjdGl2YXRlZFF1ZXVlIiwidXBkYXRlZFF1ZXVlIiwiY2FsbEFjdGl2YXRlZEhvb2tzIiwiX3dhdGNoZXIiLCJfaXNNb3VudGVkIiwiY2FsbFVwZGF0ZWRIb29rcyIsInVpZCQxIiwiV2F0Y2hlciIsImV4cE9yRm4iLCJpc1JlbmRlcldhdGNoZXIiLCJfd2F0Y2hlcnMiLCJ1c2VyIiwibGF6eSIsInN5bmMiLCJkaXJ0eSIsImRlcHMiLCJuZXdEZXBzIiwiZGVwSWRzIiwibmV3RGVwSWRzIiwiZXhwcmVzc2lvbiIsInNlZ21lbnRzIiwicGFyc2VQYXRoIiwiY2xlYW51cERlcHMiLCJxdWV1ZVdhdGNoZXIiLCJldmFsdWF0ZSIsInRlYXJkb3duIiwiX2lzQmVpbmdEZXN0cm95ZWQiLCJzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24iLCJwcm94eSIsInNvdXJjZUtleSIsImluaXRTdGF0ZSIsInByb3BzT3B0aW9ucyIsIl9wcm9wS2V5cyIsImxvb3AiLCJpbml0UHJvcHMiLCJpbml0TWV0aG9kcyIsIl9kYXRhIiwiZ2V0RGF0YSIsImluaXREYXRhIiwid2F0Y2hlcnMiLCJfY29tcHV0ZWRXYXRjaGVycyIsImlzU1NSIiwidXNlckRlZiIsImNvbXB1dGVkV2F0Y2hlck9wdGlvbnMiLCJkZWZpbmVDb21wdXRlZCIsImluaXRDb21wdXRlZCIsImNyZWF0ZVdhdGNoZXIiLCJpbml0V2F0Y2giLCJzaG91bGRDYWNoZSIsImNyZWF0ZUNvbXB1dGVkR2V0dGVyIiwiJHdhdGNoIiwicmVzb2x2ZUluamVjdCIsInByb3ZpZGVLZXkiLCJfcHJvdmlkZWQiLCJwcm92aWRlRGVmYXVsdCIsInJlbmRlckxpc3QiLCJyZW5kZXJTbG90IiwiZmFsbGJhY2siLCJiaW5kT2JqZWN0Iiwic2NvcGVkU2xvdEZuIiwiJHNjb3BlZFNsb3RzIiwic2xvdE5vZGVzIiwiJHNsb3RzIiwiX3JlbmRlcmVkIiwicmVzb2x2ZUZpbHRlciIsImlzS2V5Tm90TWF0Y2giLCJleHBlY3QiLCJjaGVja0tleUNvZGVzIiwiZXZlbnRLZXlDb2RlIiwiYnVpbHRJbktleUNvZGUiLCJldmVudEtleU5hbWUiLCJidWlsdEluS2V5TmFtZSIsIm1hcHBlZEtleUNvZGUiLCJiaW5kT2JqZWN0UHJvcHMiLCJhc1Byb3AiLCJpc1N5bmMiLCJyZW5kZXJTdGF0aWMiLCJpc0luRm9yIiwiX3N0YXRpY1RyZWVzIiwidHJlZSIsIm1hcmtTdGF0aWMiLCJfcmVuZGVyUHJveHkiLCJtYXJrT25jZSIsIm1hcmtTdGF0aWNOb2RlIiwiYmluZE9iamVjdExpc3RlbmVycyIsIm91cnMiLCJpbnN0YWxsUmVuZGVySGVscGVycyIsIl9vIiwiX3EiLCJfbSIsIl91IiwiX2ciLCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCIsImNvbnRleHRWbSIsIl9vcmlnaW5hbCIsImlzQ29tcGlsZWQiLCJuZWVkTm9ybWFsaXphdGlvbiIsImluamVjdGlvbnMiLCJzY29wZWRTbG90cyIsImNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQiLCJtZXJnZVByb3BzIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImh5ZHJhdGluZyIsInBhcmVudEVsbSIsInJlZkVsbSIsIl9pc0Rlc3Ryb3llZCIsImtlZXBBbGl2ZSIsIm1vdW50ZWROb2RlIiwicHJlcGF0Y2giLCJfaXNDb21wb25lbnQiLCJfcGFyZW50Vm5vZGUiLCJfcGFyZW50RWxtIiwiX3JlZkVsbSIsImlubGluZVRlbXBsYXRlIiwiY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSIsIiRtb3VudCIsIm9sZFZub2RlIiwicGFyZW50Vm5vZGUiLCJyZW5kZXJDaGlsZHJlbiIsImhhc0NoaWxkcmVuIiwiX3JlbmRlckNoaWxkcmVuIiwiX3Zub2RlIiwiJGF0dHJzIiwiJGxpc3RlbmVycyIsInByb3BLZXlzIiwiX3BhcmVudExpc3RlbmVycyIsIiRmb3JjZVVwZGF0ZSIsInVwZGF0ZUNoaWxkQ29tcG9uZW50IiwiZGVzdHJveSIsImRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsIiRkZXN0cm95IiwiaG9va3NUb01lcmdlIiwiY3JlYXRlQ29tcG9uZW50IiwiYmFzZUN0b3IiLCJjaWQiLCJlcnJvckNvbXAiLCJyZXNvbHZlZCIsImxvYWRpbmciLCJsb2FkaW5nQ29tcCIsImNvbnRleHRzIiwiZm9yY2VSZW5kZXIiLCJyZWFzb24iLCJyZXNvbHZlQXN5bmNDb21wb25lbnQiLCJjcmVhdGVBc3luY1BsYWNlaG9sZGVyIiwicmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyIsIm1vZGVsIiwidHJhbnNmb3JtTW9kZWwiLCJleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIiwicmVuZGVyQ29udGV4dCIsInZub2RlcyIsImNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJuYXRpdmVPbiIsImFic3RyYWN0IiwiaW5zdGFsbENvbXBvbmVudEhvb2tzIiwiU0lNUExFX05PUk1BTElaRSIsIkFMV0FZU19OT1JNQUxJWkUiLCJub3JtYWxpemF0aW9uVHlwZSIsImFsd2F5c05vcm1hbGl6ZSIsInNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIiwiYXBwbHlOUyIsImNsYXNzIiwicmVnaXN0ZXJEZWVwQmluZGluZ3MiLCJfY3JlYXRlRWxlbWVudCIsInVpZCQzIiwic3VwZXJPcHRpb25zIiwibW9kaWZpZWRPcHRpb25zIiwibW9kaWZpZWQiLCJsYXRlc3QiLCJleHRlbmRlZCIsImV4dGVuZE9wdGlvbnMiLCJzZWFsZWQiLCJzZWFsZWRPcHRpb25zIiwiZGVkdXBlIiwicmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyIsImNvbXBvbmVudHMiLCJWdWUiLCJfaW5pdCIsImluaXRFeHRlbmQiLCJTdXBlciIsIlN1cGVySWQiLCJjYWNoZWRDdG9ycyIsIl9DdG9yIiwiU3ViIiwiQ29tcCIsImluaXRQcm9wcyQxIiwiaW5pdENvbXB1dGVkJDEiLCJtaXhpbiIsInVzZSIsImdldENvbXBvbmVudE5hbWUiLCJtYXRjaGVzIiwicGF0dGVybiIsInBydW5lQ2FjaGUiLCJrZWVwQWxpdmVJbnN0YW5jZSIsImNhY2hlZE5vZGUiLCJwcnVuZUNhY2hlRW50cnkiLCJjdXJyZW50IiwiY2FjaGVkJCQxIiwiX3VpZCIsInZub2RlQ29tcG9uZW50T3B0aW9ucyIsIl9jb21wb25lbnRUYWciLCJpbml0SW50ZXJuYWxDb21wb25lbnQiLCIkcmVmcyIsImluaXRMaWZlY3ljbGUiLCJpbml0RXZlbnRzIiwicGFyZW50RGF0YSIsImluaXRSZW5kZXIiLCJpbml0SW5qZWN0aW9ucyIsImluaXRQcm92aWRlIiwiaW5pdE1peGluIiwiZGF0YURlZiIsInByb3BzRGVmIiwiJGRlbGV0ZSIsImltbWVkaWF0ZSIsInN0YXRlTWl4aW4iLCJob29rUkUiLCJjYnMiLCJpJDEiLCJldmVudHNNaXhpbiIsIl91cGRhdGUiLCJwcmV2RWwiLCIkZWwiLCJwcmV2Vm5vZGUiLCJwcmV2QWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwibGlmZWN5Y2xlTWl4aW4iLCIkbmV4dFRpY2siLCJfcmVuZGVyIiwicmVuZGVyTWl4aW4iLCJwYXR0ZXJuVHlwZXMiLCJidWlsdEluQ29tcG9uZW50cyIsIktlZXBBbGl2ZSIsImluY2x1ZGUiLCJleGNsdWRlIiwiY3JlYXRlZCIsImRlc3Ryb3llZCIsIm1vdW50ZWQiLCJ0aGlzJDEiLCJjb25maWdEZWYiLCJ1dGlsIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwiaW5zdGFsbCIsImluaXRVc2UiLCJpbml0TWl4aW4kMSIsImRlZmluaXRpb24iLCJpbml0QXNzZXRSZWdpc3RlcnMiLCJpbml0R2xvYmFsQVBJIiwiYWNjZXB0VmFsdWUiLCJpc0VudW1lcmF0ZWRBdHRyIiwiaXNCb29sZWFuQXR0ciIsInhsaW5rTlMiLCJpc1hsaW5rIiwiZ2V0WGxpbmtQcm9wIiwiaXNGYWxzeUF0dHJWYWx1ZSIsImdlbkNsYXNzRm9yVm5vZGUiLCJtZXJnZUNsYXNzRGF0YSIsImR5bmFtaWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwicmVuZGVyQ2xhc3MiLCJzdHJpbmdpZmllZCIsInN0cmluZ2lmeUFycmF5Iiwic3RyaW5naWZ5T2JqZWN0IiwibmFtZXNwYWNlTWFwIiwic3ZnIiwibWF0aCIsImlzSFRNTFRhZyIsImlzU1ZHIiwidW5rbm93bkVsZW1lbnRDYWNoZSIsImlzVGV4dElucHV0VHlwZSIsIm5vZGVPcHMiLCJtdWx0aXBsZSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZUNvbW1lbnQiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsInNldFRleHRDb250ZW50Iiwic2V0U3R5bGVTY29wZSIsInJlZ2lzdGVyUmVmIiwiaXNSZW1vdmFsIiwicmVmSW5Gb3IiLCJlbXB0eU5vZGUiLCJzYW1lVm5vZGUiLCJ0eXBlQSIsInR5cGVCIiwic2FtZUlucHV0VHlwZSIsImNyZWF0ZUtleVRvT2xkSWR4IiwiYmVnaW5JZHgiLCJlbmRJZHgiLCJ1cGRhdGVEaXJlY3RpdmVzIiwib2xkRGlyIiwiaXNDcmVhdGUiLCJpc0Rlc3Ryb3kiLCJvbGREaXJzIiwibm9ybWFsaXplRGlyZWN0aXZlcyQxIiwibmV3RGlycyIsImRpcnNXaXRoSW5zZXJ0IiwiZGlyc1dpdGhQb3N0cGF0Y2giLCJjYWxsSG9vayQxIiwiY29tcG9uZW50VXBkYXRlZCIsImNhbGxJbnNlcnQiLCJlbXB0eU1vZGlmaWVycyIsIm1vZGlmaWVycyIsImdldFJhd0Rpck5hbWUiLCJyYXdOYW1lIiwiYmFzZU1vZHVsZXMiLCJ1cGRhdGVBdHRycyIsImluaGVyaXRBdHRycyIsIm9sZEF0dHJzIiwic2V0QXR0ciIsInJlbW92ZUF0dHJpYnV0ZU5TIiwiYmFzZVNldEF0dHIiLCJzZXRBdHRyaWJ1dGVOUyIsIl9faWVwaCIsImJsb2NrZXIiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJ1cGRhdGVDbGFzcyIsIm9sZERhdGEiLCJjbHMiLCJ0cmFuc2l0aW9uQ2xhc3MiLCJfdHJhbnNpdGlvbkNsYXNzZXMiLCJfcHJldkNsYXNzIiwidGFyZ2V0JDEiLCJSQU5HRV9UT0tFTiIsIkNIRUNLQk9YX1JBRElPX1RPS0VOIiwiYWRkJDEiLCJfd2l0aFRhc2siLCJvbmNlSGFuZGxlciIsInJlbW92ZSQyIiwiY3JlYXRlT25jZUhhbmRsZXIiLCJ1cGRhdGVET01MaXN0ZW5lcnMiLCJub3JtYWxpemVFdmVudHMiLCJ1cGRhdGVET01Qcm9wcyIsIm9sZFByb3BzIiwiX3ZhbHVlIiwic3RyQ3VyIiwic2hvdWxkVXBkYXRlVmFsdWUiLCJjaGVja1ZhbCIsIm5vdEluRm9jdXMiLCJpc05vdEluRm9jdXNBbmREaXJ0eSIsIl92TW9kaWZpZXJzIiwiaXNEaXJ0eVdpdGhNb2RpZmllcnMiLCJwYXJzZVN0eWxlVGV4dCIsInByb3BlcnR5RGVsaW1pdGVyIiwibm9ybWFsaXplU3R5bGVEYXRhIiwibm9ybWFsaXplU3R5bGVCaW5kaW5nIiwic3RhdGljU3R5bGUiLCJiaW5kaW5nU3R5bGUiLCJlbXB0eVN0eWxlIiwiY3NzVmFyUkUiLCJpbXBvcnRhbnRSRSIsInNldFByb3AiLCJzZXRQcm9wZXJ0eSIsIm5vcm1hbGl6ZWROYW1lIiwidmVuZG9yTmFtZXMiLCJjYXBOYW1lIiwidXBkYXRlU3R5bGUiLCJvbGRTdGF0aWNTdHlsZSIsIm9sZFN0eWxlQmluZGluZyIsIm5vcm1hbGl6ZWRTdHlsZSIsIm9sZFN0eWxlIiwibmV3U3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwiZ2V0U3R5bGUiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwidGFyIiwicmVzb2x2ZVRyYW5zaXRpb24iLCJhdXRvQ3NzVHJhbnNpdGlvbiIsImVudGVyQ2xhc3MiLCJlbnRlclRvQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwibGVhdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJoYXNUcmFuc2l0aW9uIiwiVFJBTlNJVElPTiIsIkFOSU1BVElPTiIsInRyYW5zaXRpb25Qcm9wIiwidHJhbnNpdGlvbkVuZEV2ZW50IiwiYW5pbWF0aW9uUHJvcCIsImFuaW1hdGlvbkVuZEV2ZW50Iiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsInJhZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5leHRGcmFtZSIsImFkZFRyYW5zaXRpb25DbGFzcyIsInRyYW5zaXRpb25DbGFzc2VzIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiZXhwZWN0ZWRUeXBlIiwiZ2V0VHJhbnNpdGlvbkluZm8iLCJwcm9wQ291bnQiLCJlbmRlZCIsIm9uRW5kIiwidHJhbnNmb3JtUkUiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJkdXJhdGlvbnMiLCJ0b01zIiwidG9nZ2xlRGlzcGxheSIsIl9sZWF2ZUNiIiwiY2FuY2VsbGVkIiwidHJhbnNpdGlvbiIsIl9lbnRlckNiIiwiYXBwZWFyQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJiZWZvcmVFbnRlciIsImFmdGVyRW50ZXIiLCJlbnRlckNhbmNlbGxlZCIsImJlZm9yZUFwcGVhciIsImFwcGVhciIsImFmdGVyQXBwZWFyIiwiYXBwZWFyQ2FuY2VsbGVkIiwiZHVyYXRpb24iLCJ0cmFuc2l0aW9uTm9kZSIsImlzQXBwZWFyIiwic3RhcnRDbGFzcyIsImFjdGl2ZUNsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwbGljaXRFbnRlckR1cmF0aW9uIiwiZXhwZWN0c0NTUyIsInVzZXJXYW50c0NvbnRyb2wiLCJnZXRIb29rQXJndW1lbnRzTGVuZ3RoIiwicGVuZGluZ05vZGUiLCJfcGVuZGluZyIsImlzVmFsaWREdXJhdGlvbiIsImxlYXZlIiwicm0iLCJiZWZvcmVMZWF2ZSIsImFmdGVyTGVhdmUiLCJsZWF2ZUNhbmNlbGxlZCIsImRlbGF5TGVhdmUiLCJleHBsaWNpdExlYXZlRHVyYXRpb24iLCJwZXJmb3JtTGVhdmUiLCJpbnZva2VyRm5zIiwiX2VudGVyIiwicGF0Y2giLCJiYWNrZW5kIiwicmVtb3ZlTm9kZSIsImNyZWF0ZUVsbSIsImluc2VydGVkVm5vZGVRdWV1ZSIsIm5lc3RlZCIsIm93bmVyQXJyYXkiLCJpc1JlYWN0aXZhdGVkIiwiaW5pdENvbXBvbmVudCIsImlubmVyTm9kZSIsImFjdGl2YXRlIiwicmVhY3RpdmF0ZUNvbXBvbmVudCIsInNldFNjb3BlIiwiY3JlYXRlQ2hpbGRyZW4iLCJpbnZva2VDcmVhdGVIb29rcyIsInBlbmRpbmdJbnNlcnQiLCJpc1BhdGNoYWJsZSIsInJlZiQkMSIsImFuY2VzdG9yIiwiYWRkVm5vZGVzIiwic3RhcnRJZHgiLCJpbnZva2VEZXN0cm95SG9vayIsInJlbW92ZVZub2RlcyIsImNoIiwicmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayIsImNoaWxkRWxtIiwiY3JlYXRlUm1DYiIsImZpbmRJZHhJbk9sZCIsIm9sZENoIiwicGF0Y2hWbm9kZSIsInJlbW92ZU9ubHkiLCJoeWRyYXRlIiwibmV3Q2giLCJvbGRLZXlUb0lkeCIsImlkeEluT2xkIiwidm5vZGVUb01vdmUiLCJvbGRTdGFydElkeCIsIm5ld1N0YXJ0SWR4Iiwib2xkRW5kSWR4Iiwib2xkU3RhcnRWbm9kZSIsIm9sZEVuZFZub2RlIiwibmV3RW5kSWR4IiwibmV3U3RhcnRWbm9kZSIsIm5ld0VuZFZub2RlIiwiY2FuTW92ZSIsInVwZGF0ZUNoaWxkcmVuIiwicG9zdHBhdGNoIiwiaW52b2tlSW5zZXJ0SG9vayIsImlzUmVuZGVyZWRNb2R1bGUiLCJpblZQcmUiLCJwcmUiLCJoYXNDaGlsZE5vZGVzIiwiY2hpbGRyZW5NYXRjaCIsImZ1bGxJbnZva2UiLCJpc0luaXRpYWxQYXRjaCIsImlzUmVhbEVsZW1lbnQiLCJvbGRFbG0iLCJwYXJlbnRFbG0kMSIsInBhdGNoYWJsZSIsImkkMiIsImNyZWF0ZVBhdGNoRnVuY3Rpb24iLCJ2bW9kZWwiLCJkaXJlY3RpdmUiLCJfdk9wdGlvbnMiLCJzZXRTZWxlY3RlZCIsImdldFZhbHVlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsInByZXZPcHRpb25zIiwiY3VyT3B0aW9ucyIsImhhc05vTWF0Y2hpbmdPcHRpb24iLCJhY3R1YWxseVNldFNlbGVjdGVkIiwiaXNNdWx0aXBsZSIsImxvY2F0ZU5vZGUiLCJwbGF0Zm9ybURpcmVjdGl2ZXMiLCJ0cmFuc2l0aW9uJCQxIiwib3JpZ2luYWxEaXNwbGF5IiwiX192T3JpZ2luYWxEaXNwbGF5IiwidW5iaW5kIiwidHJhbnNpdGlvblByb3BzIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJyYXdDaGlsZCIsIlRyYW5zaXRpb24iLCJoYXNQYXJlbnRUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsIm9sZENoaWxkIiwiaXNTYW1lQ2hpbGQiLCJkZWxheWVkTGVhdmUiLCJtb3ZlQ2xhc3MiLCJjYWxsUGVuZGluZ0NicyIsIl9tb3ZlQ2IiLCJyZWNvcmRQb3NpdGlvbiIsIm5ld1BvcyIsImFwcGx5VHJhbnNsYXRpb24iLCJvbGRQb3MiLCJkeCIsImR5IiwibW92ZWQiLCJXZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJwbGF0Zm9ybUNvbXBvbmVudHMiLCJUcmFuc2l0aW9uR3JvdXAiLCJwcmV2Q2hpbGRyZW4iLCJyYXdDaGlsZHJlbiIsInRyYW5zaXRpb25EYXRhIiwia2VwdCIsInJlbW92ZWQiLCJjJDEiLCJiZWZvcmVVcGRhdGUiLCJ1cGRhdGVkIiwiaGFzTW92ZSIsIl9yZWZsb3ciLCJfaGFzTW92ZSIsIkhUTUxVbmtub3duRWxlbWVudCIsIm1vdW50Q29tcG9uZW50IiwiQ2FuY2VsVG9rZW4iLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwidGhyb3dJZlJlcXVlc3RlZCIsImJhc2VVUkwiLCJyZWxhdGl2ZVVSTCIsInRyYW5zZm9ybURhdGEiLCJpc0NhbmNlbCIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsImVqZWN0IiwiZXhwaXJlcyIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiY2hhcnMiLCJFIiwiY2hhckNvZGUiLCJvdXRwdXQiLCJpZHgiLCJvcmlnaW5VUkwiLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwiaG9zdCIsImhvc3RuYW1lIiwicGF0aG5hbWUiLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJwYXJzZWQiLCJpZ25vcmVEdXBsaWNhdGVPZiIsImVuY29kZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJ0b0lTT1N0cmluZyIsImRpc3BhdGNoUmVxdWVzdCIsIkF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJpbnRlcmNlcHRvcnMiLCJjaGFpbiIsImludGVyY2VwdG9yIiwicmVhZEZsb2F0TEUiLCJpc1Nsb3dCdWZmZXIiLCJfaXNCdWZmZXIiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJheGlvcyIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiX3Z1ZTIiLCJfRW1iZWRJdGVtMiIsInVybFJlZ2V4IiwiVXJsRW1iZWRzIiwiX2V4dGVuZHMiLCJyZWdpc3RlclR5cGVMaXN0ZW5lciIsInJlZ2lzdGVyUGFzdGVMaXN0ZW5lciIsIm5ld0RlbHRhIiwiYmVmb3JlTGluayIsInVybEVtYmVkIiwiYnVpbGRVcmxFbWJlZCIsImNoZWNrVGV4dEZvclVybCIsInNlbCIsInN0ZXBzQmFjayIsInRleHRUb1VybCIsImFkZE1ldGFJbmZvIiwiZ2V0TWV0YUluZm8iLCJlbWJlZHMiLCJlbWJlZERpdiIsInJlcXVlc3RVcmwiLCJtZXRhQXBpIiwiX2F4aW9zMiIsIl9xdWlsbCIsIlVybEVtYmVkIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwicGFyZW50XzEiLCJsZW5ndGhfMSIsImlzTEUiLCJiNjQiLCJwbGFjZUhvbGRlcnNDb3VudCIsInRvQnl0ZUFycmF5IiwicGxhY2VIb2xkZXJzIiwiQXJyIiwiTCIsInJldkxvb2t1cCIsImZyb21CeXRlQXJyYXkiLCJ1aW50OCIsImV4dHJhQnl0ZXMiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJsb29rdXAiLCJudW0iLCJiYXNlNjQiLCJpZWVlNzU0Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJlbmNvZGluZ09yT2Zmc2V0IiwiYWxsb2NVbnNhZmUiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiZnJvbVN0cmluZyIsImNoZWNrZWQiLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsInNpemUiLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInN3YXAiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsImJ1ZiIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImhleFdyaXRlIiwic3RyTGVuIiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJieXRlQXJyYXkiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJiYXNlNjRTbGljZSIsInV0ZjhTbGljZSIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJTbG93QnVmZmVyIiwiYWxsb2MiLCJJTlNQRUNUX01BWF9CWVRFUyIsImZvbyIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJhbGxvY1Vuc2FmZVNsb3ciLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJoZXhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsInV0ZjE2bGVTbGljZSIsImVxdWFscyIsImluc3BlY3QiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwidG9KU09OIiwidG9IZXgiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsIklOVkFMSURfQkFTRTY0X1JFIiwibGVhZFN1cnJvZ2F0ZSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsImRzdCIsInJlZ0V4cCIsIiRyZSIsIk9wIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5Nb2R1bGUiLCJydW50aW1lIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiR2VuZXJhdG9yIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiYXdyYXAiLCJfX2F3YWl0IiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsImFzeW5jIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsIkNvbnRleHQiLCJyZXNldCIsInNraXBUZW1wUmVzZXQiLCJzZW50IiwiX3NlbnQiLCJkZWxlZ2F0ZSIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJjb21wbGV0aW9uIiwicnZhbCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiZXhjZXB0aW9uIiwibG9jIiwiY2F1Z2h0IiwidHJ5TG9jIiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWJydXB0IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJhZnRlckxvYyIsImZpbmlzaCIsImNhdGNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHJvdG9HZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJfaW52b2tlIiwic3RhdGUiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJyZXR1cm4iLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiaXRlcmF0b3JNZXRob2QiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiJHRhc2siLCJNU0lFIiwidGltZSIsImJvdW5kQXJncyIsIm1pY3JvdGFzayIsIk9CU0VSVkFCTEUiLCJjbGVhbnVwU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uIiwiY2xlYW51cCIsInN1YnNjcmlwdGlvbkNsb3NlZCIsImNsb3NlU3Vic2NyaXB0aW9uIiwiU3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlciIsIlN1YnNjcmlwdGlvbk9ic2VydmVyIiwidW5zdWJzY3JpYmUiLCIkT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIm9ic2VydmFibGUiLCJPYnNlcnZhYmxlIiwiYXNhcCIsIiRtZXRhZGF0YSIsInRvTWV0YUtleSIsIm9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEiLCJtZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsIm9yZGluYXJ5SGFzT3duTWV0YWRhdGEiLCJoYXNPd25NZXRhZGF0YSIsIm9yZGluYXJ5SGFzTWV0YWRhdGEiLCJoYXNNZXRhZGF0YSIsIm9yZGluYXJ5T3duTWV0YWRhdGFLZXlzIiwiZ2V0T3duTWV0YWRhdGFLZXlzIiwib3JkaW5hcnlHZXRPd25NZXRhZGF0YSIsImdldE93bk1ldGFkYXRhIiwib3JkaW5hcnlNZXRhZGF0YUtleXMiLCJvS2V5cyIsInBLZXlzIiwiZ2V0TWV0YWRhdGFLZXlzIiwib3JkaW5hcnlHZXRNZXRhZGF0YSIsImdldE1ldGFkYXRhIiwiZGVsZXRlTWV0YWRhdGEiLCJkZWZpbmVNZXRhZGF0YSIsInBlcmZvcm0iLCJ0cnkiLCJwcm9taXNlUmVzb2x2ZSIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJzaWduYml0IiwidW11bGgiLCJ1IiwiJHUiLCIkdiIsInUwIiwidjAiLCJ1MSIsInQiLCJERUdfUEVSX1JBRCIsIlBJIiwicmFkaWFucyIsImRlZ3JlZXMiLCJSQURfUEVSX0RFRyIsImltdWxoIiwiaXN1YmgiLCJ4MCIsInkwIiwiJHgwIiwiJHkwIiwiaWFkZGgiLCJmc2NhbGUiLCJjbGFtcCIsImxvd2VyIiwidXBwZXIiLCJpc0Vycm9yIiwiX19sb29rdXBTZXR0ZXJfXyIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2RlZmluZUdldHRlcl9fIiwiJHZhbHVlcyIsImNyZWF0ZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImdldERlc2MiLCJnZXRGbGFncyIsIlJlZ0V4cFByb3RvIiwiJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yIiwicmVnZXhwIiwiX3IiLCJtYXRjaEFsbCIsInJ4IiwiJHBhZCIsInBhZEVuZCIsInBhZFN0YXJ0IiwiJGF0IiwiYXQiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJmbGF0dGVuIiwiZGVwdGhBcmciLCJmbGF0TWFwIiwiJGluY2x1ZGVzIiwic2V0UHJvdG8iLCJwcm9wZXJ0eUtleSIsIlYiLCJleGlzdGluZ0Rlc2NyaXB0b3IiLCJvd25EZXNjIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiJGlzRXh0ZW5zaWJsZSIsIkVudW1lcmF0ZSIsImVudW1lcmF0ZSIsImRlbGV0ZVByb3BlcnR5IiwickNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsInJBcHBseSIsImZBcHBseSIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCIkaXNWaWV3IiwiZmluYWwiLCJ2aWV3UyIsInZpZXdUIiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsIiRQcm9taXNlIiwiVVNFX05BVElWRSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0Iiwib2siLCJyZWFjdGlvbiIsImZhaWwiLCJvbkhhbmRsZVVuaGFuZGxlZCIsIm9uVW5oYW5kbGVkIiwidW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2FwYWJpbGl0eSIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiU1BMSVQiLCIkc3BsaXQiLCJfc3BsaXQiLCIkcHVzaCIsIk5QQ0ciLCJzZXBhcmF0b3IyIiwibGFzdExlbmd0aCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsIlNFQVJDSCIsIiRzZWFyY2giLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsIiRtYXRjaCIsIiRmbGFncyIsIiRSZWdFeHAiLCJyZTEiLCJyZTIiLCJDT1JSRUNUX05FVyIsInRpUkUiLCJwaVJFIiwiZmlVIiwiJGZpbmQiLCJmb3JjZWQiLCJORUdBVElWRV9aRVJPIiwiJGluZGV4T2YiLCIkcmVkdWNlIiwiJGV2ZXJ5IiwiJHNvbWUiLCIkZmlsdGVyIiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkc29ydCIsInVwVG8iLCJoaW50IiwiVE9fUFJJTUlUSVZFIiwiRGF0ZVByb3RvIiwiJHRvSVNPU3RyaW5nIiwibHoiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01pbGxpc2Vjb25kcyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJwdiIsIiRzdGFydHNXaXRoIiwiJGVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJjb2RlUG9pbnRBdCIsInBvaW50IiwiY2FsbFNpdGUiLCJ0cGwiLCIkZnJvbUNvZGVQb2ludCIsImZyb21Db2RlUG9pbnQiLCJ0cnVuYyIsInRhbmgiLCJzaW5oIiwibG9nMiIsImxvZzEwIiwiTE9HMTBFIiwiJGltdWwiLCJpbXVsIiwieG4iLCJ5biIsInhsIiwieWwiLCJoeXBvdCIsInZhbHVlMSIsInZhbHVlMiIsImRpdiIsInN1bSIsImxhcmciLCJzcXJ0IiwiY29zaCIsImNsejMyIiwiTE9HMkUiLCJjYnJ0IiwiJGF0YW5oIiwiYXRhbmgiLCIkYXNpbmgiLCJhc2luaCIsIiRhY29zaCIsImFjb3NoIiwiTUlOX1NBRkVfSU5URUdFUiIsIk1BWF9TQUZFX0lOVEVHRVIiLCJpc0ludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwiX2lzRmluaXRlIiwiJGZhaWxzIiwiYU51bWJlclZhbHVlIiwiJHRvUHJlY2lzaW9uIiwidG9QcmVjaXNpb24iLCJwcmVjaXNpb24iLCIkdG9GaXhlZCIsInRvRml4ZWQiLCJFUlJPUiIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJudW1Ub1N0cmluZyIsImFjYyIsImZyYWN0aW9uRGlnaXRzIiwieiIsIiROdW1iZXIiLCJCUk9LRU5fQ09GIiwiVFJJTSIsImFyZ3VtZW50IiwidGhpcmQiLCJtYXhDb2RlIiwiZGlnaXRzIiwiSEFTX0lOU1RBTkNFIiwiRnVuY3Rpb25Qcm90byIsIkZQcm90byIsIm5hbWVSRSIsIiRpc1NlYWxlZCIsIiRpc0Zyb3plbiIsIiRzZWFsIiwiJGZyZWV6ZSIsIiRnZXRQcm90b3R5cGVPZiIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiUU9iamVjdCIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJzeW0iLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJmb3IiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCIkcmVwbGFjZXIiLCJfYmFiZWxQb2x5ZmlsbCIsIkRFRklORV9QUk9QRVJUWSIsImJsb3RzL3VybEVtYmVkIiwiX2Jsb3QyIiwibW9kdWxlcy91cmxFbWJlZHMiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEdBQ0Esb0JBQUFDLFNBQUEsaUJBQUFDLE9BQ0FBLE9BQUFELFFBQUFELFNBQ0Esc0JBQUFHLGVBQUFDLElBQ0FELFVBQUFILE9BQ0EsQ0FDQSxJQUFBSyxFQUFBTCxJQUNBLFFBQUFNLEtBQUFELEdBQUEsaUJBQUFKLGdCQUFBRixHQUFBTyxHQUFBRCxFQUFBQyxJQVBBLENBU0NDLE9BQUEsV0FDRCxtQkNUQSxJQUFBQyxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBVCxRQUdBLElBQUFDLEVBQUFNLEVBQUFFLElBQ0FKLEVBQUFJLEVBQ0FDLEdBQUEsRUFDQVYsWUFVQSxPQU5BVyxFQUFBRixHQUFBRyxLQUFBWCxFQUFBRCxRQUFBQyxJQUFBRCxRQUFBUSxHQUdBUCxFQUFBUyxHQUFBLEVBR0FULEVBQUFELFFBMkNBLE9BdENBUSxFQUFBSyxFQUFBRixFQUdBSCxFQUFBTSxFQUFBUCxFQUdBQyxFQUFBTyxFQUFBLFNBQUFmLEVBQUFnQixFQUFBQyxHQUNBVCxFQUFBVSxFQUFBbEIsRUFBQWdCLElBQ0FHLE9BQUFDLGVBQUFwQixFQUFBZ0IsR0FDQUssY0FBQSxFQUNBQyxZQUFBLEVBQ0FDLElBQUFOLEtB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ZixFQUFBNGMsS0FBQSw0QkN6T0F0ZSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLElBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FQLEVBQUFELFFBQUFRLEVBQUEsK0NDNUxBLEdBTkFBLEVBQUEsS0FFQUEsRUFBQSxLQUVBQSxFQUFBLEtBRUEwQixFQUFBaWxILGVBQ0EsVUFBQTNxRyxNQUFBLGtEQUVBdGEsRUFBQWlsSCxnQkFBQSxFQUVBLElBQUFDLEVBQUEsaUJBQ0EsU0FBQWxuSCxFQUFBZ0YsRUFBQXhDLEVBQUFqQixHQUNBeUQsRUFBQXhDLElBQUF2QixPQUFBaW1ILEdBQUFsaUgsRUFBQXhDLEdBQ0E2VCxVQUFBLEVBQ0FsVixjQUFBLEVBQ0FJLFVBSUF2QixFQUFBeUYsT0FBQTdELFVBQUEsYUFBQWc0RyxVQUNBNTVHLEVBQUF5RixPQUFBN0QsVUFBQSxjQUFBKzNHLFFBRUEsZ01BQUE1ekcsTUFBQSxLQUFBaUIsUUFBQSxTQUFBeEUsTUFDQUEsSUFBQXhDLEVBQUFpUSxNQUFBek4sRUFBQWlCLFNBQUEvQyxLQUFBa0csUUFBQXBFLHdEQzFCQWxDLEVBQUEsS0FDQSxRQUFBQSxFQUFBLFVBQ0FBLEVBQUEsVUFDQUEsRUFBQSxVQUNBQSxFQUFBLHlEQUVBNnpDLEVBQUFsb0MsUUFBTW9sQixVQUNKODFGLGlCQUFBQyxFQUFBbjdHLFFBQ0FvN0csb0JBQUE3ckYsRUFBQXZ2QixVQUVGMnNCLEVBQUEzc0IsUUFBVW9sQixTQUFWKzFGLEVBQUFuN0ciLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2Uge1xuXHRcdHZhciBhID0gZmFjdG9yeSgpO1xuXHRcdGZvcih2YXIgaSBpbiBhKSAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnID8gZXhwb3J0cyA6IHJvb3QpW2ldID0gYVtpXTtcblx0fVxufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQzMik7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHF1b3QgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgZXhlYykge1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgaXNCdWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNS4zJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyLCAvKiBzZXJ2ZXIgb25seSAqL1xuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIHNjcmlwdEV4cG9ydHMgPSBzY3JpcHRFeHBvcnRzIHx8IHt9XG5cbiAgLy8gRVM2IG1vZHVsZXMgaW50ZXJvcFxuICB2YXIgdHlwZSA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgaWYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzY3JpcHRFeHBvcnRzID0gc2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIH1cblxuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9IHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIiwidmFyIE1hcCA9IHJlcXVpcmUoJy4vZXM2Lm1hcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbWV0YWRhdGEnKTtcbnZhciBzdG9yZSA9IHNoYXJlZC5zdG9yZSB8fCAoc2hhcmVkLnN0b3JlID0gbmV3IChyZXF1aXJlKCcuL2VzNi53ZWFrLW1hcCcpKSgpKTtcblxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSkge1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgaWYgKCF0YXJnZXRNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHN0b3JlLnNldCh0YXJnZXQsIHRhcmdldE1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfVxuICB2YXIga2V5TWV0YWRhdGEgPSB0YXJnZXRNZXRhZGF0YS5nZXQodGFyZ2V0S2V5KTtcbiAgaWYgKCFrZXlNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHRhcmdldE1ldGFkYXRhLnNldCh0YXJnZXRLZXksIGtleU1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfSByZXR1cm4ga2V5TWV0YWRhdGE7XG59O1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcbiAgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCB0cnVlKS5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xufTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIHZhciBrZXlzID0gW107XG4gIGlmIChtZXRhZGF0YU1hcCkgbWV0YWRhdGFNYXAuZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7IGtleXMucHVzaChrZXkpOyB9KTtcbiAgcmV0dXJuIGtleXM7XG59O1xudmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xudmFyIGV4cCA9IGZ1bmN0aW9uIChPKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIE8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0b3JlOiBzdG9yZSxcbiAgbWFwOiBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLFxuICBoYXM6IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEsXG4gIGdldDogb3JkaW5hcnlHZXRPd25NZXRhZGF0YSxcbiAgc2V0OiBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLFxuICBrZXlzOiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyxcbiAga2V5OiB0b01ldGFLZXksXG4gIGV4cDogZXhwXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykpIHtcbiAgdmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG4gIHZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbiAgdmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbiAgdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiAgdmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG4gIHZhciAkYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG4gIHZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbiAgdmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xuICB2YXIgcHJvcGVydHlEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuICB2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbiAgdmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG4gIHZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG4gIHZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuICB2YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG4gIHZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xuICB2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbiAgdmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xuICB2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbiAgdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4gIHZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xuICB2YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG4gIHZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG4gIHZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbiAgdmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG4gIHZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuICB2YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG4gIHZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbiAgdmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xuICB2YXIgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJyk7XG4gIHZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG4gIHZhciBBcnJheUl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG4gIHZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbiAgdmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbiAgdmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xuICB2YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xuICB2YXIgYXJyYXlDb3B5V2l0aGluID0gcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKTtcbiAgdmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuICB2YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xuICB2YXIgZFAgPSAkRFAuZjtcbiAgdmFyIGdPUEQgPSAkR09QRC5mO1xuICB2YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuICB2YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbiAgdmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbiAgdmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG4gIHZhciBTSEFSRURfQlVGRkVSID0gJ1NoYXJlZCcgKyBBUlJBWV9CVUZGRVI7XG4gIHZhciBCWVRFU19QRVJfRUxFTUVOVCA9ICdCWVRFU19QRVJfRUxFTUVOVCc7XG4gIHZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheVtQUk9UT1RZUEVdO1xuICB2YXIgJEFycmF5QnVmZmVyID0gJGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbiAgdmFyICREYXRhVmlldyA9ICRidWZmZXIuRGF0YVZpZXc7XG4gIHZhciBhcnJheUZvckVhY2ggPSBjcmVhdGVBcnJheU1ldGhvZCgwKTtcbiAgdmFyIGFycmF5RmlsdGVyID0gY3JlYXRlQXJyYXlNZXRob2QoMik7XG4gIHZhciBhcnJheVNvbWUgPSBjcmVhdGVBcnJheU1ldGhvZCgzKTtcbiAgdmFyIGFycmF5RXZlcnkgPSBjcmVhdGVBcnJheU1ldGhvZCg0KTtcbiAgdmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xuICB2YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbiAgdmFyIGFycmF5SW5jbHVkZXMgPSBjcmVhdGVBcnJheUluY2x1ZGVzKHRydWUpO1xuICB2YXIgYXJyYXlJbmRleE9mID0gY3JlYXRlQXJyYXlJbmNsdWRlcyhmYWxzZSk7XG4gIHZhciBhcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JzLnZhbHVlcztcbiAgdmFyIGFycmF5S2V5cyA9IEFycmF5SXRlcmF0b3JzLmtleXM7XG4gIHZhciBhcnJheUVudHJpZXMgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzO1xuICB2YXIgYXJyYXlMYXN0SW5kZXhPZiA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2Y7XG4gIHZhciBhcnJheVJlZHVjZSA9IEFycmF5UHJvdG8ucmVkdWNlO1xuICB2YXIgYXJyYXlSZWR1Y2VSaWdodCA9IEFycmF5UHJvdG8ucmVkdWNlUmlnaHQ7XG4gIHZhciBhcnJheUpvaW4gPSBBcnJheVByb3RvLmpvaW47XG4gIHZhciBhcnJheVNvcnQgPSBBcnJheVByb3RvLnNvcnQ7XG4gIHZhciBhcnJheVNsaWNlID0gQXJyYXlQcm90by5zbGljZTtcbiAgdmFyIGFycmF5VG9TdHJpbmcgPSBBcnJheVByb3RvLnRvU3RyaW5nO1xuICB2YXIgYXJyYXlUb0xvY2FsZVN0cmluZyA9IEFycmF5UHJvdG8udG9Mb2NhbGVTdHJpbmc7XG4gIHZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbiAgdmFyIFRBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbiAgdmFyIFRZUEVEX0NPTlNUUlVDVE9SID0gdWlkKCd0eXBlZF9jb25zdHJ1Y3RvcicpO1xuICB2YXIgREVGX0NPTlNUUlVDVE9SID0gdWlkKCdkZWZfY29uc3RydWN0b3InKTtcbiAgdmFyIEFMTF9DT05TVFJVQ1RPUlMgPSAkdHlwZWQuQ09OU1RSO1xuICB2YXIgVFlQRURfQVJSQVkgPSAkdHlwZWQuVFlQRUQ7XG4gIHZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG4gIHZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG5cbiAgdmFyICRtYXAgPSBjcmVhdGVBcnJheU1ldGhvZCgxLCBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsZW5ndGgpO1xuICB9KTtcblxuICB2YXIgTElUVExFX0VORElBTiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQxNkFycmF5KFsxXSkuYnVmZmVyKVswXSA9PT0gMTtcbiAgfSk7XG5cbiAgdmFyIEZPUkNFRF9TRVQgPSAhIVVpbnQ4QXJyYXkgJiYgISFVaW50OEFycmF5W1BST1RPVFlQRV0uc2V0ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgVWludDhBcnJheSgxKS5zZXQoe30pO1xuICB9KTtcblxuICB2YXIgdG9PZmZzZXQgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihpdCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9O1xuXG4gIHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIGlmIChpc09iamVjdChpdCkgJiYgVFlQRURfQVJSQVkgaW4gaXQpIHJldHVybiBpdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IScpO1xuICB9O1xuXG4gIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uIChDLCBsZW5ndGgpIHtcbiAgICBpZiAoIShpc09iamVjdChDKSAmJiBUWVBFRF9DT05TVFJVQ1RPUiBpbiBDKSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciEnKTtcbiAgICB9IHJldHVybiBuZXcgQyhsZW5ndGgpO1xuICB9O1xuXG4gIHZhciBzcGVjaWVzRnJvbUxpc3QgPSBmdW5jdGlvbiAoTywgbGlzdCkge1xuICAgIHJldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGlzdCk7XG4gIH07XG5cbiAgdmFyIGZyb21MaXN0ID0gZnVuY3Rpb24gKEMsIGxpc3QpIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChpdCwga2V5LCBpbnRlcm5hbCkge1xuICAgIGRQKGl0LCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kW2ludGVybmFsXTsgfSB9KTtcbiAgfTtcblxuICB2YXIgJGZyb20gPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChzb3VyY2UpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgaSwgbGVuZ3RoLCB2YWx1ZXMsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgdmFsdWVzID0gW10sIGkgPSAwOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGkrKykge1xuICAgICAgICB2YWx1ZXMucHVzaChzdGVwLnZhbHVlKTtcbiAgICAgIH0gTyA9IHZhbHVlcztcbiAgICB9XG4gICAgaWYgKG1hcHBpbmcgJiYgYUxlbiA+IDIpIG1hcGZuID0gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsgbGVuZ3RoID4gaTsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciAkb2YgPSBmdW5jdGlvbiBvZigvKiAuLi5pdGVtcyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxuICB2YXIgVE9fTE9DQUxFX0JVRyA9ICEhVWludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgVWludDhBcnJheSgxKSk7IH0pO1xuXG4gIHZhciAkdG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpIHtcbiAgICByZXR1cm4gYXJyYXlUb0xvY2FsZVN0cmluZy5hcHBseShUT19MT0NBTEVfQlVHID8gYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpKSA6IHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIHZhciBwcm90byA9IHtcbiAgICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyogLCBlbmQgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUNvcHlXaXRoaW4uY2FsbCh2YWxpZGF0ZSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlFdmVyeSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5RmlsbC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5RmlsdGVyKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLFxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpO1xuICAgIH0sXG4gICAgZmluZDogZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kKHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmRJbmRleCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICBhcnJheUZvckVhY2godmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluY2x1ZGVzKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5TGFzdEluZGV4T2YuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBtYXA6IGZ1bmN0aW9uIG1hcChtYXBmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiAkbWFwKHZhbGlkYXRlKHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2VSaWdodC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIgbGVuZ3RoID0gdmFsaWRhdGUodGhhdCkubGVuZ3RoO1xuICAgICAgdmFyIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMik7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgd2hpbGUgKGluZGV4IDwgbWlkZGxlKSB7XG4gICAgICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTtcbiAgICAgICAgdGhhdFtsZW5ndGhdID0gdmFsdWU7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH0sXG4gICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5U29tZSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICAgIHJldHVybiBhcnJheVNvcnQuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgY29tcGFyZWZuKTtcbiAgICB9LFxuICAgIHN1YmFycmF5OiBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gICAgICB2YXIgTyA9IHZhbGlkYXRlKHRoaXMpO1xuICAgICAgdmFyIGxlbmd0aCA9IE8ubGVuZ3RoO1xuICAgICAgdmFyICRiZWdpbiA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgICAgIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pKShcbiAgICAgICAgTy5idWZmZXIsXG4gICAgICAgIE8uYnl0ZU9mZnNldCArICRiZWdpbiAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCkpIC0gJGJlZ2luKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyICRzbGljZSA9IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgc3RhcnQsIGVuZCkpO1xuICB9O1xuXG4gIHZhciAkc2V0ID0gZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICAgIHZhbGlkYXRlKHRoaXMpO1xuICAgIHZhciBvZmZzZXQgPSB0b09mZnNldChhcmd1bWVudHNbMV0sIDEpO1xuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICB2YXIgc3JjID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgoc3JjLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBpZiAobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuKSB0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcbiAgfTtcblxuICB2YXIgJGl0ZXJhdG9ycyA9IHtcbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlLZXlzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGFyZ2V0KVxuICAgICAgJiYgdGFyZ2V0W1RZUEVEX0FSUkFZXVxuICAgICAgJiYgdHlwZW9mIGtleSAhPSAnc3ltYm9sJ1xuICAgICAgJiYga2V5IGluIHRhcmdldFxuICAgICAgJiYgU3RyaW5nKCtrZXkpID09IFN0cmluZyhrZXkpO1xuICB9O1xuICB2YXIgJGdldERlc2MgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKVxuICAgICAgOiBnT1BEKHRhcmdldCwga2V5KTtcbiAgfTtcbiAgdmFyICRzZXREZXNjID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICBpZiAoaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgICYmIGlzT2JqZWN0KGRlc2MpXG4gICAgICAmJiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICAgICYmICFoYXMoZGVzYywgJ2dldCcpXG4gICAgICAmJiAhaGFzKGRlc2MsICdzZXQnKVxuICAgICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZGVzY3JpcHRvciB3L28gY2FsbGluZyBhY2Nlc3NvcnNcbiAgICAgICYmICFkZXNjLmNvbmZpZ3VyYWJsZVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ3dyaXRhYmxlJykgfHwgZGVzYy53cml0YWJsZSlcbiAgICAgICYmICghaGFzKGRlc2MsICdlbnVtZXJhYmxlJykgfHwgZGVzYy5lbnVtZXJhYmxlKVxuICAgICkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBkZXNjLnZhbHVlO1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9IHJldHVybiBkUCh0YXJnZXQsIGtleSwgZGVzYyk7XG4gIH07XG5cbiAgaWYgKCFBTExfQ09OU1RSVUNUT1JTKSB7XG4gICAgJEdPUEQuZiA9ICRnZXREZXNjO1xuICAgICREUC5mID0gJHNldERlc2M7XG4gIH1cblxuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFBTExfQ09OU1RSVUNUT1JTLCAnT2JqZWN0Jywge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldERlc2MsXG4gICAgZGVmaW5lUHJvcGVydHk6ICRzZXREZXNjXG4gIH0pO1xuXG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKSB7XG4gICAgYXJyYXlUb1N0cmluZyA9IGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0aGlzKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyICRUeXBlZEFycmF5UHJvdG90eXBlJCA9IHJlZGVmaW5lQWxsKHt9LCBwcm90byk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJGl0ZXJhdG9ycyk7XG4gIGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBJVEVSQVRPUiwgJGl0ZXJhdG9ycy52YWx1ZXMpO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIHtcbiAgICBzbGljZTogJHNsaWNlLFxuICAgIHNldDogJHNldCxcbiAgICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gKCkgeyAvKiBub29wICovIH0sXG4gICAgdG9TdHJpbmc6IGFycmF5VG9TdHJpbmcsXG4gICAgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ1xuICB9KTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J1ZmZlcicsICdiJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlT2Zmc2V0JywgJ28nKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVMZW5ndGgnLCAnbCcpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnbGVuZ3RoJywgJ2UnKTtcbiAgZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBUQUcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbVFlQRURfQVJSQVldOyB9XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50c1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIEJZVEVTLCB3cmFwcGVyLCBDTEFNUEVEKSB7XG4gICAgQ0xBTVBFRCA9ICEhQ0xBTVBFRDtcbiAgICB2YXIgTkFNRSA9IEtFWSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JztcbiAgICB2YXIgR0VUVEVSID0gJ2dldCcgKyBLRVk7XG4gICAgdmFyIFNFVFRFUiA9ICdzZXQnICsgS0VZO1xuICAgIHZhciBUeXBlZEFycmF5ID0gZ2xvYmFsW05BTUVdO1xuICAgIHZhciBCYXNlID0gVHlwZWRBcnJheSB8fCB7fTtcbiAgICB2YXIgVEFDID0gVHlwZWRBcnJheSAmJiBnZXRQcm90b3R5cGVPZihUeXBlZEFycmF5KTtcbiAgICB2YXIgRk9SQ0VEID0gIVR5cGVkQXJyYXkgfHwgISR0eXBlZC5BQlY7XG4gICAgdmFyIE8gPSB7fTtcbiAgICB2YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkgJiYgVHlwZWRBcnJheVtQUk9UT1RZUEVdO1xuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIHJldHVybiBkYXRhLnZbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICBpZiAoQ0xBTVBFRCkgdmFsdWUgPSAodmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhmZiA/IDB4ZmYgOiB2YWx1ZSAmIDB4ZmY7XG4gICAgICBkYXRhLnZbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCB2YWx1ZSwgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgZFAodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgICB2YXIgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGgsIGtsYXNzO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyID0gbmV3ICRBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBvZmZzZXQgPSB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKCRsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCRsZW4gJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIG9mZnNldCA+ICRsZW4pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoID0gYnl0ZUxlbmd0aCAvIEJZVEVTO1xuICAgICAgICB9IGVsc2UgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7XG4gICAgICAgICAgYjogYnVmZmVyLFxuICAgICAgICAgIG86IG9mZnNldCxcbiAgICAgICAgICBsOiBieXRlTGVuZ3RoLFxuICAgICAgICAgIGU6IGxlbmd0aCxcbiAgICAgICAgICB2OiBuZXcgJERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IGNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpO1xuICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTtcbiAgICB9IGVsc2UgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5KDEpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSkgfHwgISRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkobnVsbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheSgxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSwgdHJ1ZSkpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7XG4gICAgICAgIHZhciBrbGFzcztcbiAgICAgICAgLy8gYHdzYCBtb2R1bGUgYnVnLCB0ZW1wb3JhcmlseSByZW1vdmUgdmFsaWRhdGlvbiBsZW5ndGggZm9yIFVpbnQ4QXJyYXlcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDVcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkgcmV0dXJuIG5ldyBCYXNlKHRvSW5kZXgoZGF0YSkpO1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiAkb2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IEJhc2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICB9KTtcbiAgICAgIGFycmF5Rm9yRWFjaChUQUMgIT09IEZ1bmN0aW9uLnByb3RvdHlwZSA/IGdPUE4oQmFzZSkuY29uY2F0KGdPUE4oVEFDKSkgOiBnT1BOKEJhc2UpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBUeXBlZEFycmF5KSkgaGlkZShUeXBlZEFycmF5LCBrZXksIEJhc2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IFR5cGVkQXJyYXlQcm90b3R5cGU7XG4gICAgICBpZiAoIUxJQlJBUlkpIFR5cGVkQXJyYXlQcm90b3R5cGUuY29uc3RydWN0b3IgPSBUeXBlZEFycmF5O1xuICAgIH1cbiAgICB2YXIgJG5hdGl2ZUl0ZXJhdG9yID0gVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl07XG4gICAgdmFyIENPUlJFQ1RfSVRFUl9OQU1FID0gISEkbmF0aXZlSXRlcmF0b3JcbiAgICAgICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpO1xuICAgIHZhciAkaXRlcmF0b3IgPSAkaXRlcmF0b3JzLnZhbHVlcztcbiAgICBoaWRlKFR5cGVkQXJyYXksIFRZUEVEX0NPTlNUUlVDVE9SLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRZUEVEX0FSUkFZLCBOQU1FKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgREVGX0NPTlNUUlVDVE9SLCBUeXBlZEFycmF5KTtcblxuICAgIGlmIChDTEFNUEVEID8gbmV3IFR5cGVkQXJyYXkoMSlbVEFHXSAhPSBOQU1FIDogIShUQUcgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIHtcbiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5BTUU7IH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9bTkFNRV0gPSBUeXBlZEFycmF5O1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheSAhPSBCYXNlKSwgTyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUywgTkFNRSwge1xuICAgICAgQllURVNfUEVSX0VMRU1FTlQ6IEJZVEVTXG4gICAgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgQmFzZS5vZi5jYWxsKFR5cGVkQXJyYXksIDEpOyB9KSwgTkFNRSwge1xuICAgICAgZnJvbTogJGZyb20sXG4gICAgICBvZjogJG9mXG4gICAgfSk7XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAsIE5BTUUsIHByb3RvKTtcblxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFRF9TRVQsIE5BTUUsIHsgc2V0OiAkc2V0IH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhQ09SUkVDVF9JVEVSX05BTUUsIE5BTUUsICRpdGVyYXRvcnMpO1xuXG4gICAgaWYgKCFMSUJSQVJZICYmIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgIT0gYXJyYXlUb1N0cmluZykgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyA9IGFycmF5VG9TdHJpbmc7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEpLnNsaWNlKCk7XG4gICAgfSksIE5BTUUsIHsgc2xpY2U6ICRzbGljZSB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgVHlwZWRBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKCk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xuICAgIH0pKSwgTkFNRSwgeyB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nIH0pO1xuXG4gICAgSXRlcmF0b3JzW05BTUVdID0gQ09SUkVDVF9JVEVSX05BTUUgPyAkbmF0aXZlSXRlcmF0b3IgOiAkaXRlcmF0b3I7XG4gICAgaWYgKCFMSUJSQVJZICYmICFDT1JSRUNUX0lURVJfTkFNRSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBJVEVSQVRPUiwgJGl0ZXJhdG9yKTtcbiAgfTtcbn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2ggKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNwYWNlcyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCIvKipcbiAqIFRyYW5zbGF0ZXMgdGhlIGxpc3QgZm9ybWF0IHByb2R1Y2VkIGJ5IGNzcy1sb2FkZXIgaW50byBzb21ldGhpbmdcbiAqIGVhc2llciB0byBtYW5pcHVsYXRlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaXN0VG9TdHlsZXMgKHBhcmVudElkLCBsaXN0KSB7XG4gIHZhciBzdHlsZXMgPSBbXVxuICB2YXIgbmV3U3R5bGVzID0ge31cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgdmFyIGlkID0gaXRlbVswXVxuICAgIHZhciBjc3MgPSBpdGVtWzFdXG4gICAgdmFyIG1lZGlhID0gaXRlbVsyXVxuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdXG4gICAgdmFyIHBhcnQgPSB7XG4gICAgICBpZDogcGFyZW50SWQgKyAnOicgKyBpLFxuICAgICAgY3NzOiBjc3MsXG4gICAgICBtZWRpYTogbWVkaWEsXG4gICAgICBzb3VyY2VNYXA6IHNvdXJjZU1hcFxuICAgIH1cbiAgICBpZiAoIW5ld1N0eWxlc1tpZF0pIHtcbiAgICAgIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7IGlkOiBpZCwgcGFydHM6IFtwYXJ0XSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0eWxlc1xufVxuIiwiLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuICBNb2RpZmllZCBieSBFdmFuIFlvdSBAeXl4OTkwODAzXG4qL1xuXG5pbXBvcnQgbGlzdFRvU3R5bGVzIGZyb20gJy4vbGlzdFRvU3R5bGVzJ1xuXG52YXIgaGFzRG9jdW1lbnQgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG5cbmlmICh0eXBlb2YgREVCVUcgIT09ICd1bmRlZmluZWQnICYmIERFQlVHKSB7XG4gIGlmICghaGFzRG9jdW1lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3Z1ZS1zdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudC4gJyArXG4gICAgXCJVc2UgeyB0YXJnZXQ6ICdub2RlJyB9IGluIHlvdXIgV2VicGFjayBjb25maWcgdG8gaW5kaWNhdGUgYSBzZXJ2ZXItcmVuZGVyaW5nIGVudmlyb25tZW50LlwiXG4gICkgfVxufVxuXG4vKlxudHlwZSBTdHlsZU9iamVjdCA9IHtcbiAgaWQ6IG51bWJlcjtcbiAgcGFydHM6IEFycmF5PFN0eWxlT2JqZWN0UGFydD5cbn1cblxudHlwZSBTdHlsZU9iamVjdFBhcnQgPSB7XG4gIGNzczogc3RyaW5nO1xuICBtZWRpYTogc3RyaW5nO1xuICBzb3VyY2VNYXA6ID9zdHJpbmdcbn1cbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHsvKlxuICBbaWQ6IG51bWJlcl06IHtcbiAgICBpZDogbnVtYmVyLFxuICAgIHJlZnM6IG51bWJlcixcbiAgICBwYXJ0czogQXJyYXk8KG9iaj86IFN0eWxlT2JqZWN0UGFydCkgPT4gdm9pZD5cbiAgfVxuKi99XG5cbnZhciBoZWFkID0gaGFzRG9jdW1lbnQgJiYgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXSlcbnZhciBzaW5nbGV0b25FbGVtZW50ID0gbnVsbFxudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwXG52YXIgaXNQcm9kdWN0aW9uID0gZmFsc2VcbnZhciBub29wID0gZnVuY3Rpb24gKCkge31cbnZhciBvcHRpb25zID0gbnVsbFxudmFyIHNzcklkS2V5ID0gJ2RhdGEtdnVlLXNzci1pZCdcblxuLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4vLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG52YXIgaXNPbGRJRSA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9tc2llIFs2LTldXFxiLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSlcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkU3R5bGVzQ2xpZW50IChwYXJlbnRJZCwgbGlzdCwgX2lzUHJvZHVjdGlvbiwgX29wdGlvbnMpIHtcbiAgaXNQcm9kdWN0aW9uID0gX2lzUHJvZHVjdGlvblxuXG4gIG9wdGlvbnMgPSBfb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMocGFyZW50SWQsIGxpc3QpXG4gIGFkZFN0eWxlc1RvRG9tKHN0eWxlcylcblxuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG4gICAgdmFyIG1heVJlbW92ZSA9IFtdXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gc3R5bGVzW2ldXG4gICAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXVxuICAgICAgZG9tU3R5bGUucmVmcy0tXG4gICAgICBtYXlSZW1vdmUucHVzaChkb21TdHlsZSlcbiAgICB9XG4gICAgaWYgKG5ld0xpc3QpIHtcbiAgICAgIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhwYXJlbnRJZCwgbmV3TGlzdClcbiAgICAgIGFkZFN0eWxlc1RvRG9tKHN0eWxlcylcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzID0gW11cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXVxuICAgICAgaWYgKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKClcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMgLyogQXJyYXk8U3R5bGVPYmplY3Q+ICovKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV1cbiAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXVxuICAgIGlmIChkb21TdHlsZSkge1xuICAgICAgZG9tU3R5bGUucmVmcysrXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pXG4gICAgICB9XG4gICAgICBmb3IgKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdKSlcbiAgICAgIH1cbiAgICAgIGlmIChkb21TdHlsZS5wYXJ0cy5sZW5ndGggPiBpdGVtLnBhcnRzLmxlbmd0aCkge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5sZW5ndGggPSBpdGVtLnBhcnRzLmxlbmd0aFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFydHMgPSBbXVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSkpXG4gICAgICB9XG4gICAgICBzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHsgaWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0cyB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAoKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpXG4gIHN0eWxlRWxlbWVudC50eXBlID0gJ3RleHQvY3NzJ1xuICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudClcbiAgcmV0dXJuIHN0eWxlRWxlbWVudFxufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqIC8qIFN0eWxlT2JqZWN0UGFydCAqLykge1xuICB2YXIgdXBkYXRlLCByZW1vdmVcbiAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlWycgKyBzc3JJZEtleSArICd+PVwiJyArIG9iai5pZCArICdcIl0nKVxuXG4gIGlmIChzdHlsZUVsZW1lbnQpIHtcbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAvLyBoYXMgU1NSIHN0eWxlcyBhbmQgaW4gcHJvZHVjdGlvbiBtb2RlLlxuICAgICAgLy8gc2ltcGx5IGRvIG5vdGhpbmcuXG4gICAgICByZXR1cm4gbm9vcFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBoYXMgU1NSIHN0eWxlcyBidXQgaW4gZGV2IG1vZGUuXG4gICAgICAvLyBmb3Igc29tZSByZWFzb24gQ2hyb21lIGNhbid0IGhhbmRsZSBzb3VyY2UgbWFwIGluIHNlcnZlci1yZW5kZXJlZFxuICAgICAgLy8gc3R5bGUgdGFncyAtIHNvdXJjZSBtYXBzIGluIDxzdHlsZT4gb25seSB3b3JrcyBpZiB0aGUgc3R5bGUgdGFnIGlzXG4gICAgICAvLyBjcmVhdGVkIGFuZCBpbnNlcnRlZCBkeW5hbWljYWxseS4gU28gd2UgcmVtb3ZlIHRoZSBzZXJ2ZXIgcmVuZGVyZWRcbiAgICAgIC8vIHN0eWxlcyBhbmQgaW5qZWN0IG5ldyBvbmVzLlxuICAgICAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIGlmIChpc09sZElFKSB7XG4gICAgLy8gdXNlIHNpbmdsZXRvbiBtb2RlIGZvciBJRTkuXG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKytcbiAgICBzdHlsZUVsZW1lbnQgPSBzaW5nbGV0b25FbGVtZW50IHx8IChzaW5nbGV0b25FbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KCkpXG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgZmFsc2UpXG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgdHJ1ZSlcbiAgfSBlbHNlIHtcbiAgICAvLyB1c2UgbXVsdGktc3R5bGUtdGFnIG1vZGUgaW4gYWxsIG90aGVyIGNhc2VzXG4gICAgc3R5bGVFbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KClcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50KVxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudClcbiAgICB9XG4gIH1cblxuICB1cGRhdGUob2JqKVxuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqIC8qIFN0eWxlT2JqZWN0UGFydCAqLykge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG4gICAgICAgICAgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcbiAgICAgICAgICBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iailcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKClcbiAgICB9XG4gIH1cbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnRcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKVxuICB9XG59KSgpXG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5jc3NcblxuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcylcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcylcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlRWxlbWVudC5jaGlsZE5vZGVzXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3NzTm9kZSlcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGVFbGVtZW50LCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3NcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwXG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSlcbiAgfVxuICBpZiAob3B0aW9ucy5zc3JJZCkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoc3NySWRLZXksIG9iai5pZClcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXApIHtcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2RldnRvb2xzL2RvY3MvamF2YXNjcmlwdC1kZWJ1Z2dpbmdcbiAgICAvLyB0aGlzIG1ha2VzIHNvdXJjZSBtYXBzIGluc2lkZSBzdHlsZSB0YWdzIHdvcmsgcHJvcGVybHkgaW4gQ2hyb21lXG4gICAgY3NzICs9ICdcXG4vKiMgc291cmNlVVJMPScgKyBzb3VyY2VNYXAuc291cmNlc1swXSArICcgKi8nXG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcbiAgICBjc3MgKz0gJ1xcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsJyArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyAnICovJ1xuICB9XG5cbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzc1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKVxuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSlcbiAgfVxufVxuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBmcm9tOiBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcEZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcEZuID0gYXJndW1lbnRzWzFdO1xuICAgIHZhciBtYXBwaW5nLCBBLCBuLCBjYjtcbiAgICBhRnVuY3Rpb24odGhpcyk7XG4gICAgbWFwcGluZyA9IG1hcEZuICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG1hcHBpbmcpIGFGdW5jdGlvbihtYXBGbik7XG4gICAgaWYgKHNvdXJjZSA9PSB1bmRlZmluZWQpIHJldHVybiBuZXcgdGhpcygpO1xuICAgIEEgPSBbXTtcbiAgICBpZiAobWFwcGluZykge1xuICAgICAgbiA9IDA7XG4gICAgICBjYiA9IGN0eChtYXBGbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIGZ1bmN0aW9uIChuZXh0SXRlbSkge1xuICAgICAgICBBLnB1c2goY2IobmV4dEl0ZW0sIG4rKykpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIEEucHVzaCwgQSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgQSA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkgQVtsZW5ndGhdID0gYXJndW1lbnRzW2xlbmd0aF07XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEZvcmNlZCByZXBsYWNlbWVudCBwcm90b3R5cGUgYWNjZXNzb3JzIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fbGlicmFyeScpIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEsgPSBNYXRoLnJhbmRvbSgpO1xuICAvLyBJbiBGRiB0aHJvd3Mgb25seSBkZWZpbmUgbWV0aG9kc1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWYsIG5vLXVzZWxlc3MtY2FsbFxuICBfX2RlZmluZVNldHRlcl9fLmNhbGwobnVsbCwgSywgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgZGVsZXRlIHJlcXVpcmUoJy4vX2dsb2JhbCcpW0tdO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmICh0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHsgbmV3IEMoaXRlcik7IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcbiIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgRCkge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuICB2YXIgZm5zID0gZXhlYyhkZWZpbmVkLCBTWU1CT0wsICcnW0tFWV0pO1xuICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gIHZhciByeGZuID0gZm5zWzFdO1xuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KSkge1xuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59O1xuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwicWwtdmlkZW8tZW1iZWRcIj5cbiAgICA8ZGl2IHYtaWY9XCJtZXRhLmVtYmVkLmh0bWxcIiB2LWh0bWw9XCJtZXRhLmVtYmVkLmh0bWxcIj48L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ3FsLXZpZGVvLWVtYmVkJyxcbiAgICBwcm9wczoge1xuICAgICAgdXJsOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH0sXG4gICAgICBtZXRhOiB7XG4gICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgZGVmYXVsdCAoKSB7XG4gICAgICAgICAgcmV0dXJuIHt9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxzcGFuIGNsYXNzPVwicWwtZW1iZWQtc291cmNlLWltYWdlXCI+XG4gICAgPGltZyA6c3JjPVwiaW1hZ2VcIlxuICAgICAgICBAZXJyb3I9XCJoYXNFcnJvciA9IHRydWVcIlxuICAgICAgICB2LWlmPVwiaW1hZ2UgJiYgIWhhc0Vycm9yXCIgLz5cbiAgICA8c3BhbiB2LWVsc2U+XG4gICAgICA8c3ZnIHZpZXdCb3g9XCIwIDAgODAgODBcIiB2ZXJzaW9uPVwiMS4xXCI+XG4gICAgICAgIDxnIHN0cm9rZT1cIm5vbmVcIiBzdHJva2Utd2lkdGg9XCIxXCIgZmlsbD1cIm5vbmVcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCI+XG4gICAgICAgICAgPHBhdGggZD1cIk04LDggTDM2LDggTDM2LDAgTDgsMCBDMy42LDAgMCwzLjYgMCw4IEwwLDM2IEw4LDM2IEw4LDggTDgsOCBaIE0zMiw0NCBMMTYsNjQgTDY0LDY0IEw1Miw0OCBMNDMuODgsNTguODQgTDMyLDQ0IEwzMiw0NCBaIE02MCwyNiBDNjAsMjIuNjggNTcuMzIsMjAgNTQsMjAgQzUwLjY4LDIwIDQ4LDIyLjY4IDQ4LDI2IEM0OCwyOS4zMiA1MC42OCwzMiA1NCwzMiBDNTcuMzIsMzIgNjAsMjkuMzIgNjAsMjYgTDYwLDI2IFogTTcyLDAgTDQ0LDAgTDQ0LDggTDcyLDggTDcyLDM2IEw4MCwzNiBMODAsOCBDODAsMy42IDc2LjQsMCA3MiwwIEw3MiwwIFogTTcyLDcyIEw0NCw3MiBMNDQsODAgTDcyLDgwIEM3Ni40LDgwIDgwLDc2LjQgODAsNzIgTDgwLDQ0IEw3Miw0NCBMNzIsNzIgTDcyLDcyIFogTTgsNDQgTDAsNDQgTDAsNzIgQzAsNzYuNCAzLjYsODAgOCw4MCBMMzYsODAgTDM2LDcyIEw4LDcyIEw4LDQ0IEw4LDQ0IFpcIiBpZD1cIlNoYXBlXCIgZmlsbD1cImN1cnJlbnRjb2xvclwiPjwvcGF0aD5cbiAgICAgICAgPC9nPlxuICAgICAgPC9zdmc+XG4gICAgPC9zcGFuPlxuICA8L3NwYW4+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ3FsLWVtYmVkLXNvdXJjZS1pbWFnZScsXG4gICAgcHJvcHM6IHtcbiAgICAgIGltYWdlOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH1cbiAgICB9LFxuICAgIGRhdGEgKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaGFzRXJyb3I6IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICB9XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG4gIC5xbC1lbWJlZC1zb3VyY2UtaW1hZ2Uge1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cbiAgICBpbWcgIHtcbiAgICAgIG1heC1oZWlnaHQ6IDEwMCU7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIG9iamVjdC1maXQ6IGNvbnRhaW47XG4gICAgICBqdXN0aWZ5LXNlbGY6IHJpZ2h0O1xuICAgIH1cblxuICAgIHNwYW4ge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICAgIG1pbi1oZWlnaHQ6IDEwMHB4O1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgcGFkZGluZzogMTBweDtcblxuICAgICAgc3ZnIHtcbiAgICAgICAgd2lkdGg6IDYwcHg7XG4gICAgICAgIGhlaWdodDogYXV0bztcbiAgICAgICAgY29sb3I6ICNlZWU7XG4gICAgICB9XG4gICAgfVxuICB9XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8c3BhbiBjbGFzcz1cInFsLWVtYmVkLXNvdXJjZS1pY29uXCI+XG4gICAgPGltZyA6c3JjPVwiaWNvblwiXG4gICAgICAgIEBlcnJvcj1cImhhc0Vycm9yID0gdHJ1ZVwiXG4gICAgICAgIHYtaWY9XCJpY29uICYmICFoYXNFcnJvclwiIC8+XG4gICAgPHNwYW4gdi1lbHNlPlxuICAgICAgPHN2ZyB2aWV3Qm94PVwiMCAwIDggMTJcIiB2ZXJzaW9uPVwiMS4xXCI+XG4gICAgICAgIDxnIHN0cm9rZT1cIm5vbmVcIiBzdHJva2Utd2lkdGg9XCIxXCIgZmlsbD1cIm5vbmVcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCI+XG4gICAgICAgICAgPHBvbHlnb24gaWQ9XCJTaGFwZVwiIGZpbGw9XCJjdXJyZW50Y29sb3JcIiBwb2ludHM9XCIwIDEwLjU5IDQuNTggNiAwIDEuNDEgMS40MSAwIDcuNDEgNiAxLjQxIDEyXCI+PC9wb2x5Z29uPlxuICAgICAgICA8L2c+XG4gICAgICA8L3N2Zz5cbiAgICA8L3NwYW4+XG4gIDwvc3Bhbj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAncWwtZW1iZWQtc291cmNlLWljb24nLFxuICAgIHByb3BzOiB7XG4gICAgICBpY29uOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH1cbiAgICB9LFxuICAgIGRhdGEgKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaGFzRXJyb3I6IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICB9XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG4gIC5xbC1lbWJlZC1zb3VyY2UtaWNvbiB7XG4gICAgbWFyZ2luLXJpZ2h0OiAzcHg7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiAxNnB4O1xuICAgIGhlaWdodDogMTZweDtcblxuICAgIGltZyB7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG5cbiAgICBzcGFuIHtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTk5O1xuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgY29sb3I6ICNmZmY7XG5cbiAgICAgIHN2ZyB7XG4gICAgICAgIHdpZHRoOiA1cHg7XG4gICAgICAgIGhlaWdodDogYXV0bztcbiAgICAgIH1cbiAgICB9XG4gIH1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJxbC1saW5rLWVtYmVkXCI+XG4gICAgPGEgOmhyZWY9XCJtZXRhLnVybFwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwicWwtZW1iZWQtbGlua1wiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJxbC1lbWJlZC1jb250ZW50XCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwicWwtZW1iZWQtZGVzY3JpcHRpb25cIj57eyBkZXNjcmlwdGlvbiB9fTwvc3Bhbj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJxbC1lbWJlZC1zb3VyY2VcIj5cbiAgICAgICAgICA8c291cmNlLWljb24gOmljb249XCJtZXRhLmljb24uYW55XCIgLz5cbiAgICAgICAgICA8c21hbGwgY2xhc3M9XCJxbC1lbWJlZC1wdWJsaXNoZXJcIj57eyBwdWJsaXNoZXIgfX08L3NtYWxsPlxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L3NwYW4+XG4gICAgICA8c3BhbiBjbGFzcz1cInFsLWVtYmVkLWltYWdlXCI+XG4gICAgICAgIDxzb3VyY2UtaW1hZ2UgOmltYWdlPVwibWV0YS5pbWFnZS51cmxcIiAvPlxuICAgICAgPC9zcGFuPlxuICAgIDwvYT5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICBpbXBvcnQgU291cmNlSWNvbiBmcm9tICcuL1NvdXJjZUljb24udnVlJ1xuICBpbXBvcnQgU291cmNlSW1hZ2UgZnJvbSAnLi9Tb3VyY2VJbWFnZS52dWUnXG4gIGltcG9ydCB0cnVuY2F0ZSBmcm9tICdsb2Rhc2gvdHJ1bmNhdGUnXG5cbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6ICdxbC1saW5rLWVtYmVkJyxcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICBTb3VyY2VJY29uLFxuICAgICAgU291cmNlSW1hZ2VcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICB1cmw6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgfSxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICBkZWZhdWx0ICgpIHtcbiAgICAgICAgICByZXR1cm4ge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgIGRlc2NyaXB0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRydW5jYXRlKHRoaXMubWV0YS5kZXNjcmlwdGlvbiwgeyBsZW5ndGg6IDI1NiB9KVxuICAgICAgfSxcbiAgICAgIHB1Ymxpc2hlciAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1ldGEuc2l0ZV9uYW1lIHx8IHRydW5jYXRlKHRoaXMubWV0YS51cmwsIHsgbGVuZ3RoOiA2NCB9KVxuICAgICAgfVxuICAgIH1cbiAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuICAucWwtbGluay1lbWJlZCB7XG4gICAgLnFsLWVtYmVkLWxpbmssXG4gICAgLnFsLWVtYmVkLWxpbms6bGluayxcbiAgICAucWwtZW1iZWQtbGluazpob3ZlciB7XG4gICAgICBjb2xvcjogZ3JheTtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICB9XG5cbiAgICAucWwtZW1iZWQtbGluayB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0ZCRkFGQTtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNFRUVERUQ7XG4gICAgICBmb250LXNpemU6IDAuOWVtO1xuICAgICAgbWF4LWhlaWdodDogMjAwcHg7XG4gICAgfVxuXG4gICAgLnFsLWVtYmVkLWNvbnRlbnQge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIGZsZXg6IDAgMCA3MCU7XG4gICAgICBwYWRkaW5nOiAxNXB4O1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgfVxuXG4gICAgLnFsLWVtYmVkLWRlc2NyaXB0aW9uIHtcbiAgICAgIGZsZXg6IDEgMSAwO1xuICAgIH1cblxuICAgIC5xbC1lbWJlZC1zb3VyY2Uge1xuICAgICAgbWFyZ2luLXRvcDogMTVweDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cblxuICAgIC5xbC1lbWJlZC1pbWFnZSB7XG4gICAgICB3aWR0aDogMzAlO1xuICAgICAgZmxleDogMCAwIDMwJTtcbiAgICAgIHBhZGRpbmc6IDE1cHg7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjO1xuICAgIH1cbiAgfVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInFsLWVtYmVkLWl0ZW1cIj5cbiAgICA8Y29tcG9uZW50XG4gICAgICA6dXJsPVwidXJsXCJcbiAgICAgIDptZXRhPVwibWV0YVwiXG4gICAgICA6aXM9XCJjb21wb25lbnRUeXBlXCI+PC9jb21wb25lbnQ+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbiAgaW1wb3J0IExpbmtFbWJlZCBmcm9tICcuL0xpbmtFbWJlZC52dWUnXG4gIGltcG9ydCBWaWRlb0VtYmVkIGZyb20gJy4vVmlkZW9FbWJlZC52dWUnXG5cbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6ICdxbC1lbWJlZC1pdGVtJyxcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICBMaW5rRW1iZWQsXG4gICAgICBWaWRlb0VtYmVkXG4gICAgfSxcbiAgICBwcm9wczoge1xuICAgICAgdXJsOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH0sXG4gICAgICBtZXRhOiB7XG4gICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgZGVmYXVsdCAoKSB7XG4gICAgICAgICAgcmV0dXJuIHt9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICBjb21wb25lbnRUeXBlICgpIHtcbiAgICAgICAgaWYgKHRoaXMubWV0YS5lbWJlZC50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgcmV0dXJuICd2aWRlby1lbWJlZCdcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tZXRhLmVtYmVkLnR5cGUgPT09ICdsaW5rJykge1xuICAgICAgICAgIHJldHVybiAnbGluay1lbWJlZCdcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2RlZmF1bHQtZW1iZWQnXG4gICAgICB9XG4gICAgfSxcbiAgICBtb3VudGVkICgpIHtcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMubWV0YSlcbiAgICB9XG4gIH1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbjwvc3R5bGU+XG4iLCIvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG52YXIgcmVIYXNVbmljb2RlID0gUmVnRXhwKCdbJyArIHJzWldKICsgcnNBc3RyYWxSYW5nZSAgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgJ10nKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgVW5pY29kZSBzeW1ib2xzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNVbmljb2RlKHN0cmluZykge1xuICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNVbmljb2RlO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG5hdmlnYXRvciA9IGdsb2JhbC5uYXZpZ2F0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJyc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCEnO1xudmFyICRBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xudmFyICREYXRhVmlldyA9IGdsb2JhbFtEQVRBX1ZJRVddO1xudmFyIE1hdGggPSBnbG9iYWwuTWF0aDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXNcbnZhciBJbmZpbml0eSA9IGdsb2JhbC5JbmZpbml0eTtcbnZhciBCYXNlQnVmZmVyID0gJEFycmF5QnVmZmVyO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcbnZhciBCVUZGRVIgPSAnYnVmZmVyJztcbnZhciBCWVRFX0xFTkdUSCA9ICdieXRlTGVuZ3RoJztcbnZhciBCWVRFX09GRlNFVCA9ICdieXRlT2Zmc2V0JztcbnZhciAkQlVGRkVSID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSO1xudmFyICRMRU5HVEggPSBERVNDUklQVE9SUyA/ICdfbCcgOiBCWVRFX0xFTkdUSDtcbnZhciAkT0ZGU0VUID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XG5cbi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG5mdW5jdGlvbiBwYWNrSUVFRTc1NCh2YWx1ZSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobkJ5dGVzKTtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBydCA9IG1MZW4gPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBpID0gMDtcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwO1xuICB2YXIgZSwgbSwgYztcbiAgdmFsdWUgPSBhYnModmFsdWUpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmICh2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpO1xuICAgIGlmICh2YWx1ZSAqIChjID0gcG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpO1xuICBlID0gZSA8PCBtTGVuIHwgbTtcbiAgZUxlbiArPSBtTGVuO1xuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltpKytdID0gZSAmIDI1NSwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG4gIGJ1ZmZlclstLWldIHw9IHMgKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59XG5mdW5jdGlvbiB1bnBhY2tJRUVFNzU0KGJ1ZmZlciwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgbkJpdHMgPSBlTGVuIC0gNztcbiAgdmFyIGkgPSBuQnl0ZXMgLSAxO1xuICB2YXIgcyA9IGJ1ZmZlcltpLS1dO1xuICB2YXIgZSA9IHMgJiAxMjc7XG4gIHZhciBtO1xuICBzID4+PSA3O1xuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZSA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6IHMgPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIHBvdygyLCBtTGVuKTtcbiAgICBlID0gZSAtIGVCaWFzO1xuICB9IHJldHVybiAocyA/IC0xIDogMSkgKiBtICogcG93KDIsIGUgLSBtTGVuKTtcbn1cblxuZnVuY3Rpb24gdW5wYWNrSTMyKGJ5dGVzKSB7XG4gIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xufVxuZnVuY3Rpb24gcGFja0k4KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMTYoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMzIoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrRjY0KGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpO1xufVxuZnVuY3Rpb24gcGFja0YzMihpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTtcbn1cblxuZnVuY3Rpb24gYWRkR2V0dGVyKEMsIGtleSwgaW50ZXJuYWwpIHtcbiAgZFAoQ1tQUk9UT1RZUEVdLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW2ludGVybmFsXTsgfSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufVxuZnVuY3Rpb24gc2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBjb252ZXJzaW9uKCt2YWx1ZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKykgc3RvcmVbc3RhcnQgKyBpXSA9IHBhY2tbaXNMaXR0bGVFbmRpYW4gPyBpIDogYnl0ZXMgLSBpIC0gMV07XG59XG5cbmlmICghJHR5cGVkLkFCVikge1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRvSW5kZXgobGVuZ3RoKTtcbiAgICB0aGlzLl9iID0gYXJyYXlGaWxsLmNhbGwobmV3IEFycmF5KGJ5dGVMZW5ndGgpLCAwKTtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF07XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XG4gICAgaWYgKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB0aGlzWyRCVUZGRVJdID0gYnVmZmVyO1xuICAgIHRoaXNbJE9GRlNFVF0gPSBvZmZzZXQ7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJVRkZFUiwgJ19iJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfT0ZGU0VULCAnX28nKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG4gICAgfSxcbiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDIzLCA0KTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTtcbiAgICB9LFxuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0SW50MzI6IGZ1bmN0aW9uIHNldEludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGNjQsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAkQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoTmFOKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICByZXR1cm4gJEFycmF5QnVmZmVyLm5hbWUgIT0gQVJSQVlfQlVGRkVSO1xuICB9KSkge1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIpO1xuICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHRvSW5kZXgobGVuZ3RoKSk7XG4gICAgfTtcbiAgICB2YXIgQXJyYXlCdWZmZXJQcm90byA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQmFzZUJ1ZmZlcltQUk9UT1RZUEVdO1xuICAgIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2VCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7KSB7XG4gICAgICBpZiAoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKSBoaWRlKCRBcnJheUJ1ZmZlciwga2V5LCBCYXNlQnVmZmVyW2tleV0pO1xuICAgIH1cbiAgICBpZiAoIUxJQlJBUlkpIEFycmF5QnVmZmVyUHJvdG8uY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH1cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB2aWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKTtcbiAgdmFyICRzZXRJbnQ4ID0gJERhdGFWaWV3W1BST1RPVFlQRV0uc2V0SW50ODtcbiAgdmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB2aWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7XG4gIGlmICh2aWV3LmdldEludDgoMCkgfHwgIXZpZXcuZ2V0SW50OCgxKSkgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cbnNldFRvU3RyaW5nVGFnKCRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcbmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTtcbmV4cG9ydHNbQVJSQVlfQlVGRkVSXSA9ICRBcnJheUJ1ZmZlcjtcbmV4cG9ydHNbREFUQV9WSUVXXSA9ICREYXRhVmlldztcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAoIUJVR0dZICYmICRuYXRpdmUpIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSk7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO1xuICBmb3IgKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzICs9IHN0cjtcbiAgcmV0dXJuIHJlcztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnICtcbiAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInFsLWVtYmVkLWl0ZW1cIn0sW19jKF92bS5jb21wb25lbnRUeXBlLHt0YWc6XCJjb21wb25lbnRcIixhdHRyczp7XCJ1cmxcIjpfdm0udXJsLFwibWV0YVwiOl92bS5tZXRhfX0pXSwxKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInFsLXZpZGVvLWVtYmVkXCJ9LFsoX3ZtLm1ldGEuZW1iZWQuaHRtbCk/X2MoJ2Rpdicse2RvbVByb3BzOntcImlubmVySFRNTFwiOl92bS5fcyhfdm0ubWV0YS5lbWJlZC5odG1sKX19KTpfdm0uX2UoKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicWwtbGluay1lbWJlZFwifSxbX2MoJ2EnLHtzdGF0aWNDbGFzczpcInFsLWVtYmVkLWxpbmtcIixhdHRyczp7XCJocmVmXCI6X3ZtLm1ldGEudXJsLFwidGFyZ2V0XCI6XCJfYmxhbmtcIn19LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwicWwtZW1iZWQtY29udGVudFwifSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcInFsLWVtYmVkLWRlc2NyaXB0aW9uXCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS5kZXNjcmlwdGlvbikpXSksX3ZtLl92KFwiIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwicWwtZW1iZWQtc291cmNlXCJ9LFtfYygnc291cmNlLWljb24nLHthdHRyczp7XCJpY29uXCI6X3ZtLm1ldGEuaWNvbi5hbnl9fSksX3ZtLl92KFwiIFwiKSxfYygnc21hbGwnLHtzdGF0aWNDbGFzczpcInFsLWVtYmVkLXB1Ymxpc2hlclwifSxbX3ZtLl92KF92bS5fcyhfdm0ucHVibGlzaGVyKSldKV0sMSldKSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJxbC1lbWJlZC1pbWFnZVwifSxbX2MoJ3NvdXJjZS1pbWFnZScse2F0dHJzOntcImltYWdlXCI6X3ZtLm1ldGEuaW1hZ2UudXJsfX0pXSwxKV0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwicWwtZW1iZWQtc291cmNlLWltYWdlXCJ9LFsoX3ZtLmltYWdlICYmICFfdm0uaGFzRXJyb3IpP19jKCdpbWcnLHthdHRyczp7XCJzcmNcIjpfdm0uaW1hZ2V9LG9uOntcImVycm9yXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uaGFzRXJyb3IgPSB0cnVlfX19KTpfYygnc3BhbicsW19jKCdzdmcnLHthdHRyczp7XCJ2aWV3Qm94XCI6XCIwIDAgODAgODBcIixcInZlcnNpb25cIjpcIjEuMVwifX0sW19jKCdnJyx7YXR0cnM6e1wic3Ryb2tlXCI6XCJub25lXCIsXCJzdHJva2Utd2lkdGhcIjpcIjFcIixcImZpbGxcIjpcIm5vbmVcIixcImZpbGwtcnVsZVwiOlwiZXZlbm9kZFwifX0sW19jKCdwYXRoJyx7YXR0cnM6e1wiZFwiOlwiTTgsOCBMMzYsOCBMMzYsMCBMOCwwIEMzLjYsMCAwLDMuNiAwLDggTDAsMzYgTDgsMzYgTDgsOCBMOCw4IFogTTMyLDQ0IEwxNiw2NCBMNjQsNjQgTDUyLDQ4IEw0My44OCw1OC44NCBMMzIsNDQgTDMyLDQ0IFogTTYwLDI2IEM2MCwyMi42OCA1Ny4zMiwyMCA1NCwyMCBDNTAuNjgsMjAgNDgsMjIuNjggNDgsMjYgQzQ4LDI5LjMyIDUwLjY4LDMyIDU0LDMyIEM1Ny4zMiwzMiA2MCwyOS4zMiA2MCwyNiBMNjAsMjYgWiBNNzIsMCBMNDQsMCBMNDQsOCBMNzIsOCBMNzIsMzYgTDgwLDM2IEw4MCw4IEM4MCwzLjYgNzYuNCwwIDcyLDAgTDcyLDAgWiBNNzIsNzIgTDQ0LDcyIEw0NCw4MCBMNzIsODAgQzc2LjQsODAgODAsNzYuNCA4MCw3MiBMODAsNDQgTDcyLDQ0IEw3Miw3MiBMNzIsNzIgWiBNOCw0NCBMMCw0NCBMMCw3MiBDMCw3Ni40IDMuNiw4MCA4LDgwIEwzNiw4MCBMMzYsNzIgTDgsNzIgTDgsNDQgTDgsNDQgWlwiLFwiaWRcIjpcIlNoYXBlXCIsXCJmaWxsXCI6XCJjdXJyZW50Y29sb3JcIn19KV0pXSldKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcInFsLWVtYmVkLXNvdXJjZS1pY29uXCJ9LFsoX3ZtLmljb24gJiYgIV92bS5oYXNFcnJvcik/X2MoJ2ltZycse2F0dHJzOntcInNyY1wiOl92bS5pY29ufSxvbjp7XCJlcnJvclwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmhhc0Vycm9yID0gdHJ1ZX19fSk6X2MoJ3NwYW4nLFtfYygnc3ZnJyx7YXR0cnM6e1widmlld0JveFwiOlwiMCAwIDggMTJcIixcInZlcnNpb25cIjpcIjEuMVwifX0sW19jKCdnJyx7YXR0cnM6e1wic3Ryb2tlXCI6XCJub25lXCIsXCJzdHJva2Utd2lkdGhcIjpcIjFcIixcImZpbGxcIjpcIm5vbmVcIixcImZpbGwtcnVsZVwiOlwiZXZlbm9kZFwifX0sW19jKCdwb2x5Z29uJyx7YXR0cnM6e1wiaWRcIjpcIlNoYXBlXCIsXCJmaWxsXCI6XCJjdXJyZW50Y29sb3JcIixcInBvaW50c1wiOlwiMCAxMC41OSA0LjU4IDYgMCAxLjQxIDEuNDEgMCA3LjQxIDYgMS40MSAxMlwifX0pXSldKV0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCIvKiFcbiAqIFF1aWxsIEVkaXRvciB2MS4zLjZcbiAqIGh0dHBzOi8vcXVpbGxqcy5jb20vXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEphc29uIENoZW5cbiAqIENvcHlyaWdodCAoYykgMjAxMywgc2FsZXNmb3JjZS5jb21cbiAqL1xuKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiUXVpbGxcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiUXVpbGxcIl0gPSBmYWN0b3J5KCk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEwOSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY29udGFpbmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcbnZhciBmb3JtYXRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xudmFyIGxlYWZfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xudmFyIHNjcm9sbF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NSk7XG52YXIgaW5saW5lXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2KTtcbnZhciBibG9ja18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nyk7XG52YXIgZW1iZWRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpO1xudmFyIHRleHRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDkpO1xudmFyIGF0dHJpYnV0b3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xudmFyIGNsYXNzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKTtcbnZhciBzdHlsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG52YXIgc3RvcmVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBQYXJjaG1lbnQgPSB7XG4gICAgU2NvcGU6IFJlZ2lzdHJ5LlNjb3BlLFxuICAgIGNyZWF0ZTogUmVnaXN0cnkuY3JlYXRlLFxuICAgIGZpbmQ6IFJlZ2lzdHJ5LmZpbmQsXG4gICAgcXVlcnk6IFJlZ2lzdHJ5LnF1ZXJ5LFxuICAgIHJlZ2lzdGVyOiBSZWdpc3RyeS5yZWdpc3RlcixcbiAgICBDb250YWluZXI6IGNvbnRhaW5lcl8xLmRlZmF1bHQsXG4gICAgRm9ybWF0OiBmb3JtYXRfMS5kZWZhdWx0LFxuICAgIExlYWY6IGxlYWZfMS5kZWZhdWx0LFxuICAgIEVtYmVkOiBlbWJlZF8xLmRlZmF1bHQsXG4gICAgU2Nyb2xsOiBzY3JvbGxfMS5kZWZhdWx0LFxuICAgIEJsb2NrOiBibG9ja18xLmRlZmF1bHQsXG4gICAgSW5saW5lOiBpbmxpbmVfMS5kZWZhdWx0LFxuICAgIFRleHQ6IHRleHRfMS5kZWZhdWx0LFxuICAgIEF0dHJpYnV0b3I6IHtcbiAgICAgICAgQXR0cmlidXRlOiBhdHRyaWJ1dG9yXzEuZGVmYXVsdCxcbiAgICAgICAgQ2xhc3M6IGNsYXNzXzEuZGVmYXVsdCxcbiAgICAgICAgU3R5bGU6IHN0eWxlXzEuZGVmYXVsdCxcbiAgICAgICAgU3RvcmU6IHN0b3JlXzEuZGVmYXVsdCxcbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IFBhcmNobWVudDtcblxuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFBhcmNobWVudEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQYXJjaG1lbnRFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQYXJjaG1lbnRFcnJvcihtZXNzYWdlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIG1lc3NhZ2UgPSAnW1BhcmNobWVudF0gJyArIG1lc3NhZ2U7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIF90aGlzLm5hbWUgPSBfdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBQYXJjaG1lbnRFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydHMuUGFyY2htZW50RXJyb3IgPSBQYXJjaG1lbnRFcnJvcjtcbnZhciBhdHRyaWJ1dGVzID0ge307XG52YXIgY2xhc3NlcyA9IHt9O1xudmFyIHRhZ3MgPSB7fTtcbnZhciB0eXBlcyA9IHt9O1xuZXhwb3J0cy5EQVRBX0tFWSA9ICdfX2Jsb3QnO1xudmFyIFNjb3BlO1xuKGZ1bmN0aW9uIChTY29wZSkge1xuICAgIFNjb3BlW1Njb3BlW1wiVFlQRVwiXSA9IDNdID0gXCJUWVBFXCI7XG4gICAgU2NvcGVbU2NvcGVbXCJMRVZFTFwiXSA9IDEyXSA9IFwiTEVWRUxcIjtcbiAgICBTY29wZVtTY29wZVtcIkFUVFJJQlVURVwiXSA9IDEzXSA9IFwiQVRUUklCVVRFXCI7XG4gICAgU2NvcGVbU2NvcGVbXCJCTE9UXCJdID0gMTRdID0gXCJCTE9UXCI7XG4gICAgU2NvcGVbU2NvcGVbXCJJTkxJTkVcIl0gPSA3XSA9IFwiSU5MSU5FXCI7XG4gICAgU2NvcGVbU2NvcGVbXCJCTE9DS1wiXSA9IDExXSA9IFwiQkxPQ0tcIjtcbiAgICBTY29wZVtTY29wZVtcIkJMT0NLX0JMT1RcIl0gPSAxMF0gPSBcIkJMT0NLX0JMT1RcIjtcbiAgICBTY29wZVtTY29wZVtcIklOTElORV9CTE9UXCJdID0gNl0gPSBcIklOTElORV9CTE9UXCI7XG4gICAgU2NvcGVbU2NvcGVbXCJCTE9DS19BVFRSSUJVVEVcIl0gPSA5XSA9IFwiQkxPQ0tfQVRUUklCVVRFXCI7XG4gICAgU2NvcGVbU2NvcGVbXCJJTkxJTkVfQVRUUklCVVRFXCJdID0gNV0gPSBcIklOTElORV9BVFRSSUJVVEVcIjtcbiAgICBTY29wZVtTY29wZVtcIkFOWVwiXSA9IDE1XSA9IFwiQU5ZXCI7XG59KShTY29wZSA9IGV4cG9ydHMuU2NvcGUgfHwgKGV4cG9ydHMuU2NvcGUgPSB7fSkpO1xuZnVuY3Rpb24gY3JlYXRlKGlucHV0LCB2YWx1ZSkge1xuICAgIHZhciBtYXRjaCA9IHF1ZXJ5KGlucHV0KTtcbiAgICBpZiAobWF0Y2ggPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgUGFyY2htZW50RXJyb3IoXCJVbmFibGUgdG8gY3JlYXRlIFwiICsgaW5wdXQgKyBcIiBibG90XCIpO1xuICAgIH1cbiAgICB2YXIgQmxvdENsYXNzID0gbWF0Y2g7XG4gICAgdmFyIG5vZGUgPSBcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaW5wdXQgaW5zdGFuY2VvZiBOb2RlIHx8IGlucHV0Wydub2RlVHlwZSddID09PSBOb2RlLlRFWFRfTk9ERSA/IGlucHV0IDogQmxvdENsYXNzLmNyZWF0ZSh2YWx1ZSk7XG4gICAgcmV0dXJuIG5ldyBCbG90Q2xhc3Mobm9kZSwgdmFsdWUpO1xufVxuZXhwb3J0cy5jcmVhdGUgPSBjcmVhdGU7XG5mdW5jdGlvbiBmaW5kKG5vZGUsIGJ1YmJsZSkge1xuICAgIGlmIChidWJibGUgPT09IHZvaWQgMCkgeyBidWJibGUgPSBmYWxzZTsgfVxuICAgIGlmIChub2RlID09IG51bGwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAobm9kZVtleHBvcnRzLkRBVEFfS0VZXSAhPSBudWxsKVxuICAgICAgICByZXR1cm4gbm9kZVtleHBvcnRzLkRBVEFfS0VZXS5ibG90O1xuICAgIGlmIChidWJibGUpXG4gICAgICAgIHJldHVybiBmaW5kKG5vZGUucGFyZW50Tm9kZSwgYnViYmxlKTtcbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydHMuZmluZCA9IGZpbmQ7XG5mdW5jdGlvbiBxdWVyeShxdWVyeSwgc2NvcGUpIHtcbiAgICBpZiAoc2NvcGUgPT09IHZvaWQgMCkgeyBzY29wZSA9IFNjb3BlLkFOWTsgfVxuICAgIHZhciBtYXRjaDtcbiAgICBpZiAodHlwZW9mIHF1ZXJ5ID09PSAnc3RyaW5nJykge1xuICAgICAgICBtYXRjaCA9IHR5cGVzW3F1ZXJ5XSB8fCBhdHRyaWJ1dGVzW3F1ZXJ5XTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgIH1cbiAgICBlbHNlIGlmIChxdWVyeSBpbnN0YW5jZW9mIFRleHQgfHwgcXVlcnlbJ25vZGVUeXBlJ10gPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgIG1hdGNoID0gdHlwZXNbJ3RleHQnXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHF1ZXJ5ID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAocXVlcnkgJiBTY29wZS5MRVZFTCAmIFNjb3BlLkJMT0NLKSB7XG4gICAgICAgICAgICBtYXRjaCA9IHR5cGVzWydibG9jayddO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHF1ZXJ5ICYgU2NvcGUuTEVWRUwgJiBTY29wZS5JTkxJTkUpIHtcbiAgICAgICAgICAgIG1hdGNoID0gdHlwZXNbJ2lubGluZSddO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHF1ZXJ5IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIG5hbWVzID0gKHF1ZXJ5LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykuc3BsaXQoL1xccysvKTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBuYW1lcykge1xuICAgICAgICAgICAgbWF0Y2ggPSBjbGFzc2VzW25hbWVzW2ldXTtcbiAgICAgICAgICAgIGlmIChtYXRjaClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBtYXRjaCA9IG1hdGNoIHx8IHRhZ3NbcXVlcnkudGFnTmFtZV07XG4gICAgfVxuICAgIGlmIChtYXRjaCA9PSBudWxsKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKHNjb3BlICYgU2NvcGUuTEVWRUwgJiBtYXRjaC5zY29wZSAmJiBzY29wZSAmIFNjb3BlLlRZUEUgJiBtYXRjaC5zY29wZSlcbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0cy5xdWVyeSA9IHF1ZXJ5O1xuZnVuY3Rpb24gcmVnaXN0ZXIoKSB7XG4gICAgdmFyIERlZmluaXRpb25zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgRGVmaW5pdGlvbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgaWYgKERlZmluaXRpb25zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcmV0dXJuIERlZmluaXRpb25zLm1hcChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdGVyKGQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgdmFyIERlZmluaXRpb24gPSBEZWZpbml0aW9uc1swXTtcbiAgICBpZiAodHlwZW9mIERlZmluaXRpb24uYmxvdE5hbWUgIT09ICdzdHJpbmcnICYmIHR5cGVvZiBEZWZpbml0aW9uLmF0dHJOYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgUGFyY2htZW50RXJyb3IoJ0ludmFsaWQgZGVmaW5pdGlvbicpO1xuICAgIH1cbiAgICBlbHNlIGlmIChEZWZpbml0aW9uLmJsb3ROYW1lID09PSAnYWJzdHJhY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJjaG1lbnRFcnJvcignQ2Fubm90IHJlZ2lzdGVyIGFic3RyYWN0IGNsYXNzJyk7XG4gICAgfVxuICAgIHR5cGVzW0RlZmluaXRpb24uYmxvdE5hbWUgfHwgRGVmaW5pdGlvbi5hdHRyTmFtZV0gPSBEZWZpbml0aW9uO1xuICAgIGlmICh0eXBlb2YgRGVmaW5pdGlvbi5rZXlOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICBhdHRyaWJ1dGVzW0RlZmluaXRpb24ua2V5TmFtZV0gPSBEZWZpbml0aW9uO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKERlZmluaXRpb24uY2xhc3NOYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNsYXNzZXNbRGVmaW5pdGlvbi5jbGFzc05hbWVdID0gRGVmaW5pdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoRGVmaW5pdGlvbi50YWdOYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KERlZmluaXRpb24udGFnTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBEZWZpbml0aW9uLnRhZ05hbWUgPSBEZWZpbml0aW9uLnRhZ05hbWUubWFwKGZ1bmN0aW9uICh0YWdOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YWdOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBEZWZpbml0aW9uLnRhZ05hbWUgPSBEZWZpbml0aW9uLnRhZ05hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0YWdOYW1lcyA9IEFycmF5LmlzQXJyYXkoRGVmaW5pdGlvbi50YWdOYW1lKSA/IERlZmluaXRpb24udGFnTmFtZSA6IFtEZWZpbml0aW9uLnRhZ05hbWVdO1xuICAgICAgICAgICAgdGFnTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhZ3NbdGFnXSA9PSBudWxsIHx8IERlZmluaXRpb24uY2xhc3NOYW1lID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFnc1t0YWddID0gRGVmaW5pdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gRGVmaW5pdGlvbjtcbn1cbmV4cG9ydHMucmVnaXN0ZXIgPSByZWdpc3RlcjtcblxuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGRpZmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxKTtcbnZhciBlcXVhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xudmFyIGV4dGVuZCA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG52YXIgb3AgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblxuXG52YXIgTlVMTF9DSEFSQUNURVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDApOyAgLy8gUGxhY2Vob2xkZXIgY2hhciBmb3IgZW1iZWQgaW4gZGlmZigpXG5cblxudmFyIERlbHRhID0gZnVuY3Rpb24gKG9wcykge1xuICAvLyBBc3N1bWUgd2UgYXJlIGdpdmVuIGEgd2VsbCBmb3JtZWQgb3BzXG4gIGlmIChBcnJheS5pc0FycmF5KG9wcykpIHtcbiAgICB0aGlzLm9wcyA9IG9wcztcbiAgfSBlbHNlIGlmIChvcHMgIT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KG9wcy5vcHMpKSB7XG4gICAgdGhpcy5vcHMgPSBvcHMub3BzO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3BzID0gW107XG4gIH1cbn07XG5cblxuRGVsdGEucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uICh0ZXh0LCBhdHRyaWJ1dGVzKSB7XG4gIHZhciBuZXdPcCA9IHt9O1xuICBpZiAodGV4dC5sZW5ndGggPT09IDApIHJldHVybiB0aGlzO1xuICBuZXdPcC5pbnNlcnQgPSB0ZXh0O1xuICBpZiAoYXR0cmlidXRlcyAhPSBudWxsICYmIHR5cGVvZiBhdHRyaWJ1dGVzID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwKSB7XG4gICAgbmV3T3AuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gIH1cbiAgcmV0dXJuIHRoaXMucHVzaChuZXdPcCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICBpZiAobGVuZ3RoIDw9IDApIHJldHVybiB0aGlzO1xuICByZXR1cm4gdGhpcy5wdXNoKHsgJ2RlbGV0ZSc6IGxlbmd0aCB9KTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5yZXRhaW4gPSBmdW5jdGlvbiAobGVuZ3RoLCBhdHRyaWJ1dGVzKSB7XG4gIGlmIChsZW5ndGggPD0gMCkgcmV0dXJuIHRoaXM7XG4gIHZhciBuZXdPcCA9IHsgcmV0YWluOiBsZW5ndGggfTtcbiAgaWYgKGF0dHJpYnV0ZXMgIT0gbnVsbCAmJiB0eXBlb2YgYXR0cmlidXRlcyA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoID4gMCkge1xuICAgIG5ld09wLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICB9XG4gIHJldHVybiB0aGlzLnB1c2gobmV3T3ApO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAobmV3T3ApIHtcbiAgdmFyIGluZGV4ID0gdGhpcy5vcHMubGVuZ3RoO1xuICB2YXIgbGFzdE9wID0gdGhpcy5vcHNbaW5kZXggLSAxXTtcbiAgbmV3T3AgPSBleHRlbmQodHJ1ZSwge30sIG5ld09wKTtcbiAgaWYgKHR5cGVvZiBsYXN0T3AgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHR5cGVvZiBuZXdPcFsnZGVsZXRlJ10gPT09ICdudW1iZXInICYmIHR5cGVvZiBsYXN0T3BbJ2RlbGV0ZSddID09PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5vcHNbaW5kZXggLSAxXSA9IHsgJ2RlbGV0ZSc6IGxhc3RPcFsnZGVsZXRlJ10gKyBuZXdPcFsnZGVsZXRlJ10gfTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBTaW5jZSBpdCBkb2VzIG5vdCBtYXR0ZXIgaWYgd2UgaW5zZXJ0IGJlZm9yZSBvciBhZnRlciBkZWxldGluZyBhdCB0aGUgc2FtZSBpbmRleCxcbiAgICAvLyBhbHdheXMgcHJlZmVyIHRvIGluc2VydCBmaXJzdFxuICAgIGlmICh0eXBlb2YgbGFzdE9wWydkZWxldGUnXSA9PT0gJ251bWJlcicgJiYgbmV3T3AuaW5zZXJ0ICE9IG51bGwpIHtcbiAgICAgIGluZGV4IC09IDE7XG4gICAgICBsYXN0T3AgPSB0aGlzLm9wc1tpbmRleCAtIDFdO1xuICAgICAgaWYgKHR5cGVvZiBsYXN0T3AgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRoaXMub3BzLnVuc2hpZnQobmV3T3ApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVxdWFsKG5ld09wLmF0dHJpYnV0ZXMsIGxhc3RPcC5hdHRyaWJ1dGVzKSkge1xuICAgICAgaWYgKHR5cGVvZiBuZXdPcC5pbnNlcnQgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBsYXN0T3AuaW5zZXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLm9wc1tpbmRleCAtIDFdID0geyBpbnNlcnQ6IGxhc3RPcC5pbnNlcnQgKyBuZXdPcC5pbnNlcnQgfTtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdPcC5hdHRyaWJ1dGVzID09PSAnb2JqZWN0JykgdGhpcy5vcHNbaW5kZXggLSAxXS5hdHRyaWJ1dGVzID0gbmV3T3AuYXR0cmlidXRlc1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5ld09wLnJldGFpbiA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGxhc3RPcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHRoaXMub3BzW2luZGV4IC0gMV0gPSB7IHJldGFpbjogbGFzdE9wLnJldGFpbiArIG5ld09wLnJldGFpbiB9O1xuICAgICAgICBpZiAodHlwZW9mIG5ld09wLmF0dHJpYnV0ZXMgPT09ICdvYmplY3QnKSB0aGlzLm9wc1tpbmRleCAtIDFdLmF0dHJpYnV0ZXMgPSBuZXdPcC5hdHRyaWJ1dGVzXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaW5kZXggPT09IHRoaXMub3BzLmxlbmd0aCkge1xuICAgIHRoaXMub3BzLnB1c2gobmV3T3ApO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3BzLnNwbGljZShpbmRleCwgMCwgbmV3T3ApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmNob3AgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsYXN0T3AgPSB0aGlzLm9wc1t0aGlzLm9wcy5sZW5ndGggLSAxXTtcbiAgaWYgKGxhc3RPcCAmJiBsYXN0T3AucmV0YWluICYmICFsYXN0T3AuYXR0cmlidXRlcykge1xuICAgIHRoaXMub3BzLnBvcCgpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcbiAgcmV0dXJuIHRoaXMub3BzLmZpbHRlcihwcmVkaWNhdGUpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gIHRoaXMub3BzLmZvckVhY2gocHJlZGljYXRlKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gIHJldHVybiB0aGlzLm9wcy5tYXAocHJlZGljYXRlKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5wYXJ0aXRpb24gPSBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gIHZhciBwYXNzZWQgPSBbXSwgZmFpbGVkID0gW107XG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbihvcCkge1xuICAgIHZhciB0YXJnZXQgPSBwcmVkaWNhdGUob3ApID8gcGFzc2VkIDogZmFpbGVkO1xuICAgIHRhcmdldC5wdXNoKG9wKTtcbiAgfSk7XG4gIHJldHVybiBbcGFzc2VkLCBmYWlsZWRdO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChwcmVkaWNhdGUsIGluaXRpYWwpIHtcbiAgcmV0dXJuIHRoaXMub3BzLnJlZHVjZShwcmVkaWNhdGUsIGluaXRpYWwpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmNoYW5nZUxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucmVkdWNlKGZ1bmN0aW9uIChsZW5ndGgsIGVsZW0pIHtcbiAgICBpZiAoZWxlbS5pbnNlcnQpIHtcbiAgICAgIHJldHVybiBsZW5ndGggKyBvcC5sZW5ndGgoZWxlbSk7XG4gICAgfSBlbHNlIGlmIChlbGVtLmRlbGV0ZSkge1xuICAgICAgcmV0dXJuIGxlbmd0aCAtIGVsZW0uZGVsZXRlO1xuICAgIH1cbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9LCAwKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnJlZHVjZShmdW5jdGlvbiAobGVuZ3RoLCBlbGVtKSB7XG4gICAgcmV0dXJuIGxlbmd0aCArIG9wLmxlbmd0aChlbGVtKTtcbiAgfSwgMCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJykgZW5kID0gSW5maW5pdHk7XG4gIHZhciBvcHMgPSBbXTtcbiAgdmFyIGl0ZXIgPSBvcC5pdGVyYXRvcih0aGlzLm9wcyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHdoaWxlIChpbmRleCA8IGVuZCAmJiBpdGVyLmhhc05leHQoKSkge1xuICAgIHZhciBuZXh0T3A7XG4gICAgaWYgKGluZGV4IDwgc3RhcnQpIHtcbiAgICAgIG5leHRPcCA9IGl0ZXIubmV4dChzdGFydCAtIGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dE9wID0gaXRlci5uZXh0KGVuZCAtIGluZGV4KTtcbiAgICAgIG9wcy5wdXNoKG5leHRPcCk7XG4gICAgfVxuICAgIGluZGV4ICs9IG9wLmxlbmd0aChuZXh0T3ApO1xuICB9XG4gIHJldHVybiBuZXcgRGVsdGEob3BzKTtcbn07XG5cblxuRGVsdGEucHJvdG90eXBlLmNvbXBvc2UgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgdmFyIHRoaXNJdGVyID0gb3AuaXRlcmF0b3IodGhpcy5vcHMpO1xuICB2YXIgb3RoZXJJdGVyID0gb3AuaXRlcmF0b3Iob3RoZXIub3BzKTtcbiAgdmFyIGRlbHRhID0gbmV3IERlbHRhKCk7XG4gIHdoaWxlICh0aGlzSXRlci5oYXNOZXh0KCkgfHwgb3RoZXJJdGVyLmhhc05leHQoKSkge1xuICAgIGlmIChvdGhlckl0ZXIucGVla1R5cGUoKSA9PT0gJ2luc2VydCcpIHtcbiAgICAgIGRlbHRhLnB1c2gob3RoZXJJdGVyLm5leHQoKSk7XG4gICAgfSBlbHNlIGlmICh0aGlzSXRlci5wZWVrVHlwZSgpID09PSAnZGVsZXRlJykge1xuICAgICAgZGVsdGEucHVzaCh0aGlzSXRlci5uZXh0KCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGVuZ3RoID0gTWF0aC5taW4odGhpc0l0ZXIucGVla0xlbmd0aCgpLCBvdGhlckl0ZXIucGVla0xlbmd0aCgpKTtcbiAgICAgIHZhciB0aGlzT3AgPSB0aGlzSXRlci5uZXh0KGxlbmd0aCk7XG4gICAgICB2YXIgb3RoZXJPcCA9IG90aGVySXRlci5uZXh0KGxlbmd0aCk7XG4gICAgICBpZiAodHlwZW9mIG90aGVyT3AucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgICB2YXIgbmV3T3AgPSB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzT3AucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIG5ld09wLnJldGFpbiA9IGxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdPcC5pbnNlcnQgPSB0aGlzT3AuaW5zZXJ0O1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXNlcnZlIG51bGwgd2hlbiBjb21wb3Npbmcgd2l0aCBhIHJldGFpbiwgb3RoZXJ3aXNlIHJlbW92ZSBpdCBmb3IgaW5zZXJ0c1xuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IG9wLmF0dHJpYnV0ZXMuY29tcG9zZSh0aGlzT3AuYXR0cmlidXRlcywgb3RoZXJPcC5hdHRyaWJ1dGVzLCB0eXBlb2YgdGhpc09wLnJldGFpbiA9PT0gJ251bWJlcicpO1xuICAgICAgICBpZiAoYXR0cmlidXRlcykgbmV3T3AuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIGRlbHRhLnB1c2gobmV3T3ApO1xuICAgICAgLy8gT3RoZXIgb3Agc2hvdWxkIGJlIGRlbGV0ZSwgd2UgY291bGQgYmUgYW4gaW5zZXJ0IG9yIHJldGFpblxuICAgICAgLy8gSW5zZXJ0ICsgZGVsZXRlIGNhbmNlbHMgb3V0XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvdGhlck9wWydkZWxldGUnXSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHRoaXNPcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgIGRlbHRhLnB1c2gob3RoZXJPcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWx0YS5jaG9wKCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIHZhciBkZWx0YSA9IG5ldyBEZWx0YSh0aGlzLm9wcy5zbGljZSgpKTtcbiAgaWYgKG90aGVyLm9wcy5sZW5ndGggPiAwKSB7XG4gICAgZGVsdGEucHVzaChvdGhlci5vcHNbMF0pO1xuICAgIGRlbHRhLm9wcyA9IGRlbHRhLm9wcy5jb25jYXQob3RoZXIub3BzLnNsaWNlKDEpKTtcbiAgfVxuICByZXR1cm4gZGVsdGE7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuZGlmZiA9IGZ1bmN0aW9uIChvdGhlciwgaW5kZXgpIHtcbiAgaWYgKHRoaXMub3BzID09PSBvdGhlci5vcHMpIHtcbiAgICByZXR1cm4gbmV3IERlbHRhKCk7XG4gIH1cbiAgdmFyIHN0cmluZ3MgPSBbdGhpcywgb3RoZXJdLm1hcChmdW5jdGlvbiAoZGVsdGEpIHtcbiAgICByZXR1cm4gZGVsdGEubWFwKGZ1bmN0aW9uIChvcCkge1xuICAgICAgaWYgKG9wLmluc2VydCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb3AuaW5zZXJ0ID09PSAnc3RyaW5nJyA/IG9wLmluc2VydCA6IE5VTExfQ0hBUkFDVEVSO1xuICAgICAgfVxuICAgICAgdmFyIHByZXAgPSAoZGVsdGEgPT09IG90aGVyKSA/ICdvbicgOiAnd2l0aCc7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpZmYoKSBjYWxsZWQgJyArIHByZXAgKyAnIG5vbi1kb2N1bWVudCcpO1xuICAgIH0pLmpvaW4oJycpO1xuICB9KTtcbiAgdmFyIGRlbHRhID0gbmV3IERlbHRhKCk7XG4gIHZhciBkaWZmUmVzdWx0ID0gZGlmZihzdHJpbmdzWzBdLCBzdHJpbmdzWzFdLCBpbmRleCk7XG4gIHZhciB0aGlzSXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIG90aGVySXRlciA9IG9wLml0ZXJhdG9yKG90aGVyLm9wcyk7XG4gIGRpZmZSZXN1bHQuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgdmFyIGxlbmd0aCA9IGNvbXBvbmVudFsxXS5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBvcExlbmd0aCA9IDA7XG4gICAgICBzd2l0Y2ggKGNvbXBvbmVudFswXSkge1xuICAgICAgICBjYXNlIGRpZmYuSU5TRVJUOlxuICAgICAgICAgIG9wTGVuZ3RoID0gTWF0aC5taW4ob3RoZXJJdGVyLnBlZWtMZW5ndGgoKSwgbGVuZ3RoKTtcbiAgICAgICAgICBkZWx0YS5wdXNoKG90aGVySXRlci5uZXh0KG9wTGVuZ3RoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZGlmZi5ERUxFVEU6XG4gICAgICAgICAgb3BMZW5ndGggPSBNYXRoLm1pbihsZW5ndGgsIHRoaXNJdGVyLnBlZWtMZW5ndGgoKSk7XG4gICAgICAgICAgdGhpc0l0ZXIubmV4dChvcExlbmd0aCk7XG4gICAgICAgICAgZGVsdGFbJ2RlbGV0ZSddKG9wTGVuZ3RoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBkaWZmLkVRVUFMOlxuICAgICAgICAgIG9wTGVuZ3RoID0gTWF0aC5taW4odGhpc0l0ZXIucGVla0xlbmd0aCgpLCBvdGhlckl0ZXIucGVla0xlbmd0aCgpLCBsZW5ndGgpO1xuICAgICAgICAgIHZhciB0aGlzT3AgPSB0aGlzSXRlci5uZXh0KG9wTGVuZ3RoKTtcbiAgICAgICAgICB2YXIgb3RoZXJPcCA9IG90aGVySXRlci5uZXh0KG9wTGVuZ3RoKTtcbiAgICAgICAgICBpZiAoZXF1YWwodGhpc09wLmluc2VydCwgb3RoZXJPcC5pbnNlcnQpKSB7XG4gICAgICAgICAgICBkZWx0YS5yZXRhaW4ob3BMZW5ndGgsIG9wLmF0dHJpYnV0ZXMuZGlmZih0aGlzT3AuYXR0cmlidXRlcywgb3RoZXJPcC5hdHRyaWJ1dGVzKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbHRhLnB1c2gob3RoZXJPcClbJ2RlbGV0ZSddKG9wTGVuZ3RoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBsZW5ndGggLT0gb3BMZW5ndGg7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRlbHRhLmNob3AoKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5lYWNoTGluZSA9IGZ1bmN0aW9uIChwcmVkaWNhdGUsIG5ld2xpbmUpIHtcbiAgbmV3bGluZSA9IG5ld2xpbmUgfHwgJ1xcbic7XG4gIHZhciBpdGVyID0gb3AuaXRlcmF0b3IodGhpcy5vcHMpO1xuICB2YXIgbGluZSA9IG5ldyBEZWx0YSgpO1xuICB2YXIgaSA9IDA7XG4gIHdoaWxlIChpdGVyLmhhc05leHQoKSkge1xuICAgIGlmIChpdGVyLnBlZWtUeXBlKCkgIT09ICdpbnNlcnQnKSByZXR1cm47XG4gICAgdmFyIHRoaXNPcCA9IGl0ZXIucGVlaygpO1xuICAgIHZhciBzdGFydCA9IG9wLmxlbmd0aCh0aGlzT3ApIC0gaXRlci5wZWVrTGVuZ3RoKCk7XG4gICAgdmFyIGluZGV4ID0gdHlwZW9mIHRoaXNPcC5pbnNlcnQgPT09ICdzdHJpbmcnID9cbiAgICAgIHRoaXNPcC5pbnNlcnQuaW5kZXhPZihuZXdsaW5lLCBzdGFydCkgLSBzdGFydCA6IC0xO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIGxpbmUucHVzaChpdGVyLm5leHQoKSk7XG4gICAgfSBlbHNlIGlmIChpbmRleCA+IDApIHtcbiAgICAgIGxpbmUucHVzaChpdGVyLm5leHQoaW5kZXgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByZWRpY2F0ZShsaW5lLCBpdGVyLm5leHQoMSkuYXR0cmlidXRlcyB8fCB7fSwgaSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGkgKz0gMTtcbiAgICAgIGxpbmUgPSBuZXcgRGVsdGEoKTtcbiAgICB9XG4gIH1cbiAgaWYgKGxpbmUubGVuZ3RoKCkgPiAwKSB7XG4gICAgcHJlZGljYXRlKGxpbmUsIHt9LCBpKTtcbiAgfVxufTtcblxuRGVsdGEucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIChvdGhlciwgcHJpb3JpdHkpIHtcbiAgcHJpb3JpdHkgPSAhIXByaW9yaXR5O1xuICBpZiAodHlwZW9mIG90aGVyID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybVBvc2l0aW9uKG90aGVyLCBwcmlvcml0eSk7XG4gIH1cbiAgdmFyIHRoaXNJdGVyID0gb3AuaXRlcmF0b3IodGhpcy5vcHMpO1xuICB2YXIgb3RoZXJJdGVyID0gb3AuaXRlcmF0b3Iob3RoZXIub3BzKTtcbiAgdmFyIGRlbHRhID0gbmV3IERlbHRhKCk7XG4gIHdoaWxlICh0aGlzSXRlci5oYXNOZXh0KCkgfHwgb3RoZXJJdGVyLmhhc05leHQoKSkge1xuICAgIGlmICh0aGlzSXRlci5wZWVrVHlwZSgpID09PSAnaW5zZXJ0JyAmJiAocHJpb3JpdHkgfHwgb3RoZXJJdGVyLnBlZWtUeXBlKCkgIT09ICdpbnNlcnQnKSkge1xuICAgICAgZGVsdGEucmV0YWluKG9wLmxlbmd0aCh0aGlzSXRlci5uZXh0KCkpKTtcbiAgICB9IGVsc2UgaWYgKG90aGVySXRlci5wZWVrVHlwZSgpID09PSAnaW5zZXJ0Jykge1xuICAgICAgZGVsdGEucHVzaChvdGhlckl0ZXIubmV4dCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWluKHRoaXNJdGVyLnBlZWtMZW5ndGgoKSwgb3RoZXJJdGVyLnBlZWtMZW5ndGgoKSk7XG4gICAgICB2YXIgdGhpc09wID0gdGhpc0l0ZXIubmV4dChsZW5ndGgpO1xuICAgICAgdmFyIG90aGVyT3AgPSBvdGhlckl0ZXIubmV4dChsZW5ndGgpO1xuICAgICAgaWYgKHRoaXNPcFsnZGVsZXRlJ10pIHtcbiAgICAgICAgLy8gT3VyIGRlbGV0ZSBlaXRoZXIgbWFrZXMgdGhlaXIgZGVsZXRlIHJlZHVuZGFudCBvciByZW1vdmVzIHRoZWlyIHJldGFpblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAob3RoZXJPcFsnZGVsZXRlJ10pIHtcbiAgICAgICAgZGVsdGEucHVzaChvdGhlck9wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdlIHJldGFpbiBlaXRoZXIgdGhlaXIgcmV0YWluIG9yIGluc2VydFxuICAgICAgICBkZWx0YS5yZXRhaW4obGVuZ3RoLCBvcC5hdHRyaWJ1dGVzLnRyYW5zZm9ybSh0aGlzT3AuYXR0cmlidXRlcywgb3RoZXJPcC5hdHRyaWJ1dGVzLCBwcmlvcml0eSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGVsdGEuY2hvcCgpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnRyYW5zZm9ybVBvc2l0aW9uID0gZnVuY3Rpb24gKGluZGV4LCBwcmlvcml0eSkge1xuICBwcmlvcml0eSA9ICEhcHJpb3JpdHk7XG4gIHZhciB0aGlzSXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIG9mZnNldCA9IDA7XG4gIHdoaWxlICh0aGlzSXRlci5oYXNOZXh0KCkgJiYgb2Zmc2V0IDw9IGluZGV4KSB7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXNJdGVyLnBlZWtMZW5ndGgoKTtcbiAgICB2YXIgbmV4dFR5cGUgPSB0aGlzSXRlci5wZWVrVHlwZSgpO1xuICAgIHRoaXNJdGVyLm5leHQoKTtcbiAgICBpZiAobmV4dFR5cGUgPT09ICdkZWxldGUnKSB7XG4gICAgICBpbmRleCAtPSBNYXRoLm1pbihsZW5ndGgsIGluZGV4IC0gb2Zmc2V0KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAobmV4dFR5cGUgPT09ICdpbnNlcnQnICYmIChvZmZzZXQgPCBpbmRleCB8fCAhcHJpb3JpdHkpKSB7XG4gICAgICBpbmRleCArPSBsZW5ndGg7XG4gICAgfVxuICAgIG9mZnNldCArPSBsZW5ndGg7XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IERlbHRhO1xuXG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxudmFyIGlzQXJyYXkgPSBmdW5jdGlvbiBpc0FycmF5KGFycikge1xuXHRpZiAodHlwZW9mIEFycmF5LmlzQXJyYXkgPT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gQXJyYXkuaXNBcnJheShhcnIpO1xuXHR9XG5cblx0cmV0dXJuIHRvU3RyLmNhbGwoYXJyKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbnZhciBpc1BsYWluT2JqZWN0ID0gZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcblx0aWYgKCFvYmogfHwgdG9TdHIuY2FsbChvYmopICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHZhciBoYXNPd25Db25zdHJ1Y3RvciA9IGhhc093bi5jYWxsKG9iaiwgJ2NvbnN0cnVjdG9yJyk7XG5cdHZhciBoYXNJc1Byb3RvdHlwZU9mID0gb2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgJiYgaGFzT3duLmNhbGwob2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgJ2lzUHJvdG90eXBlT2YnKTtcblx0Ly8gTm90IG93biBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBtdXN0IGJlIE9iamVjdFxuXHRpZiAob2JqLmNvbnN0cnVjdG9yICYmICFoYXNPd25Db25zdHJ1Y3RvciAmJiAhaGFzSXNQcm90b3R5cGVPZikge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIE93biBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhdGVkIGZpcnN0bHksIHNvIHRvIHNwZWVkIHVwLFxuXHQvLyBpZiBsYXN0IG9uZSBpcyBvd24sIHRoZW4gYWxsIHByb3BlcnRpZXMgYXJlIG93bi5cblx0dmFyIGtleTtcblx0Zm9yIChrZXkgaW4gb2JqKSB7IC8qKi8gfVxuXG5cdHJldHVybiB0eXBlb2Yga2V5ID09PSAndW5kZWZpbmVkJyB8fCBoYXNPd24uY2FsbChvYmosIGtleSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV4dGVuZCgpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lO1xuXHR2YXIgdGFyZ2V0ID0gYXJndW1lbnRzWzBdO1xuXHR2YXIgaSA9IDE7XG5cdHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXHR2YXIgZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKHR5cGVvZiB0YXJnZXQgPT09ICdib29sZWFuJykge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuXHRcdC8vIHNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHRpID0gMjtcblx0fVxuXHRpZiAodGFyZ2V0ID09IG51bGwgfHwgKHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnICYmIHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHRmb3IgKDsgaSA8IGxlbmd0aDsgKytpKSB7XG5cdFx0b3B0aW9ucyA9IGFyZ3VtZW50c1tpXTtcblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKG9wdGlvbnMgIT0gbnVsbCkge1xuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yIChuYW1lIGluIG9wdGlvbnMpIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0W25hbWVdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1tuYW1lXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICh0YXJnZXQgIT09IGNvcHkpIHtcblx0XHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0XHRpZiAoZGVlcCAmJiBjb3B5ICYmIChpc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9IGlzQXJyYXkoY29weSkpKSkge1xuXHRcdFx0XHRcdFx0aWYgKGNvcHlJc0FycmF5KSB7XG5cdFx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdFx0dGFyZ2V0W25hbWVdID0gZXh0ZW5kKGRlZXAsIGNsb25lLCBjb3B5KTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiBjb3B5ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0dGFyZ2V0W25hbWVdID0gY29weTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuQmxvY2tFbWJlZCA9IGV4cG9ydHMuYnViYmxlRm9ybWF0cyA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX2V4dGVuZCA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfZXh0ZW5kMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZCk7XG5cbnZhciBfcXVpbGxEZWx0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfcXVpbGxEZWx0YTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWlsbERlbHRhKTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX2JyZWFrID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbnZhciBfYnJlYWsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYnJlYWspO1xuXG52YXIgX2lubGluZSA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5saW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lubGluZSk7XG5cbnZhciBfdGV4dCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfdGV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90ZXh0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgTkVXTElORV9MRU5HVEggPSAxO1xuXG52YXIgQmxvY2tFbWJlZCA9IGZ1bmN0aW9uIChfUGFyY2htZW50JEVtYmVkKSB7XG4gIF9pbmhlcml0cyhCbG9ja0VtYmVkLCBfUGFyY2htZW50JEVtYmVkKTtcblxuICBmdW5jdGlvbiBCbG9ja0VtYmVkKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCbG9ja0VtYmVkKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQmxvY2tFbWJlZC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrRW1iZWQpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCbG9ja0VtYmVkLCBbe1xuICAgIGtleTogJ2F0dGFjaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGF0dGFjaCgpIHtcbiAgICAgIF9nZXQoQmxvY2tFbWJlZC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCbG9ja0VtYmVkLnByb3RvdHlwZSksICdhdHRhY2gnLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gbmV3IF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5TdG9yZSh0aGlzLmRvbU5vZGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RlbHRhJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsdGEoKSB7XG4gICAgICByZXR1cm4gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkuaW5zZXJ0KHRoaXMudmFsdWUoKSwgKDAsIF9leHRlbmQyLmRlZmF1bHQpKHRoaXMuZm9ybWF0cygpLCB0aGlzLmF0dHJpYnV0ZXMudmFsdWVzKCkpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXQobmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBhdHRyaWJ1dGUgPSBfcGFyY2htZW50Mi5kZWZhdWx0LnF1ZXJ5KG5hbWUsIF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuQkxPQ0tfQVRUUklCVVRFKTtcbiAgICAgIGlmIChhdHRyaWJ1dGUgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuYXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdEF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0QXQoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIHRoaXMuZm9ybWF0KG5hbWUsIHZhbHVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRBdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydEF0KGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aCgnXFxuJykpIHtcbiAgICAgICAgdmFyIGJsb2NrID0gX3BhcmNobWVudDIuZGVmYXVsdC5jcmVhdGUoQmxvY2suYmxvdE5hbWUpO1xuICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUoYmxvY2ssIGluZGV4ID09PSAwID8gdGhpcyA6IHRoaXMubmV4dCk7XG4gICAgICAgIGJsb2NrLmluc2VydEF0KDAsIHZhbHVlLnNsaWNlKDAsIC0xKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfZ2V0KEJsb2NrRW1iZWQucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvY2tFbWJlZC5wcm90b3R5cGUpLCAnaW5zZXJ0QXQnLCB0aGlzKS5jYWxsKHRoaXMsIGluZGV4LCB2YWx1ZSwgZGVmKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQmxvY2tFbWJlZDtcbn0oX3BhcmNobWVudDIuZGVmYXVsdC5FbWJlZCk7XG5cbkJsb2NrRW1iZWQuc2NvcGUgPSBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLkJMT0NLX0JMT1Q7XG4vLyBJdCBpcyBpbXBvcnRhbnQgZm9yIGN1cnNvciBiZWhhdmlvciBCbG9ja0VtYmVkcyB1c2UgdGFncyB0aGF0IGFyZSBibG9jayBsZXZlbCBlbGVtZW50c1xuXG5cbnZhciBCbG9jayA9IGZ1bmN0aW9uIChfUGFyY2htZW50JEJsb2NrKSB7XG4gIF9pbmhlcml0cyhCbG9jaywgX1BhcmNobWVudCRCbG9jayk7XG5cbiAgZnVuY3Rpb24gQmxvY2soZG9tTm9kZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCbG9jayk7XG5cbiAgICB2YXIgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJsb2NrLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvY2spKS5jYWxsKHRoaXMsIGRvbU5vZGUpKTtcblxuICAgIF90aGlzMi5jYWNoZSA9IHt9O1xuICAgIHJldHVybiBfdGhpczI7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQmxvY2ssIFt7XG4gICAga2V5OiAnZGVsdGEnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWx0YSgpIHtcbiAgICAgIGlmICh0aGlzLmNhY2hlLmRlbHRhID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5jYWNoZS5kZWx0YSA9IHRoaXMuZGVzY2VuZGFudHMoX3BhcmNobWVudDIuZGVmYXVsdC5MZWFmKS5yZWR1Y2UoZnVuY3Rpb24gKGRlbHRhLCBsZWFmKSB7XG4gICAgICAgICAgaWYgKGxlYWYubGVuZ3RoKCkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBkZWx0YTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRlbHRhLmluc2VydChsZWFmLnZhbHVlKCksIGJ1YmJsZUZvcm1hdHMobGVhZikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkpLmluc2VydCgnXFxuJywgYnViYmxlRm9ybWF0cyh0aGlzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZS5kZWx0YTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZWxldGVBdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUF0KGluZGV4LCBsZW5ndGgpIHtcbiAgICAgIF9nZXQoQmxvY2sucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvY2sucHJvdG90eXBlKSwgJ2RlbGV0ZUF0JywgdGhpcykuY2FsbCh0aGlzLCBpbmRleCwgbGVuZ3RoKTtcbiAgICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRBdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdEF0KGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAobGVuZ3RoIDw9IDApIHJldHVybjtcbiAgICAgIGlmIChfcGFyY2htZW50Mi5kZWZhdWx0LnF1ZXJ5KG5hbWUsIF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuQkxPQ0spKSB7XG4gICAgICAgIGlmIChpbmRleCArIGxlbmd0aCA9PT0gdGhpcy5sZW5ndGgoKSkge1xuICAgICAgICAgIHRoaXMuZm9ybWF0KG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2dldChCbG9jay5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCbG9jay5wcm90b3R5cGUpLCAnZm9ybWF0QXQnLCB0aGlzKS5jYWxsKHRoaXMsIGluZGV4LCBNYXRoLm1pbihsZW5ndGgsIHRoaXMubGVuZ3RoKCkgLSBpbmRleCAtIDEpLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLmNhY2hlID0ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5zZXJ0QXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRBdChpbmRleCwgdmFsdWUsIGRlZikge1xuICAgICAgaWYgKGRlZiAhPSBudWxsKSByZXR1cm4gX2dldChCbG9jay5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCbG9jay5wcm90b3R5cGUpLCAnaW5zZXJ0QXQnLCB0aGlzKS5jYWxsKHRoaXMsIGluZGV4LCB2YWx1ZSwgZGVmKTtcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIHZhciBsaW5lcyA9IHZhbHVlLnNwbGl0KCdcXG4nKTtcbiAgICAgIHZhciB0ZXh0ID0gbGluZXMuc2hpZnQoKTtcbiAgICAgIGlmICh0ZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKGluZGV4IDwgdGhpcy5sZW5ndGgoKSAtIDEgfHwgdGhpcy5jaGlsZHJlbi50YWlsID09IG51bGwpIHtcbiAgICAgICAgICBfZ2V0KEJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrLnByb3RvdHlwZSksICdpbnNlcnRBdCcsIHRoaXMpLmNhbGwodGhpcywgTWF0aC5taW4oaW5kZXgsIHRoaXMubGVuZ3RoKCkgLSAxKSwgdGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jaGlsZHJlbi50YWlsLmluc2VydEF0KHRoaXMuY2hpbGRyZW4udGFpbC5sZW5ndGgoKSwgdGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYWNoZSA9IHt9O1xuICAgICAgfVxuICAgICAgdmFyIGJsb2NrID0gdGhpcztcbiAgICAgIGxpbmVzLnJlZHVjZShmdW5jdGlvbiAoaW5kZXgsIGxpbmUpIHtcbiAgICAgICAgYmxvY2sgPSBibG9jay5zcGxpdChpbmRleCwgdHJ1ZSk7XG4gICAgICAgIGJsb2NrLmluc2VydEF0KDAsIGxpbmUpO1xuICAgICAgICByZXR1cm4gbGluZS5sZW5ndGg7XG4gICAgICB9LCBpbmRleCArIHRleHQubGVuZ3RoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRCZWZvcmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRCZWZvcmUoYmxvdCwgcmVmKSB7XG4gICAgICB2YXIgaGVhZCA9IHRoaXMuY2hpbGRyZW4uaGVhZDtcbiAgICAgIF9nZXQoQmxvY2sucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvY2sucHJvdG90eXBlKSwgJ2luc2VydEJlZm9yZScsIHRoaXMpLmNhbGwodGhpcywgYmxvdCwgcmVmKTtcbiAgICAgIGlmIChoZWFkIGluc3RhbmNlb2YgX2JyZWFrMi5kZWZhdWx0KSB7XG4gICAgICAgIGhlYWQucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmNhY2hlID0ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbGVuZ3RoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGVuZ3RoKCkge1xuICAgICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5jYWNoZS5sZW5ndGggPSBfZ2V0KEJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrLnByb3RvdHlwZSksICdsZW5ndGgnLCB0aGlzKS5jYWxsKHRoaXMpICsgTkVXTElORV9MRU5HVEg7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZS5sZW5ndGg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbW92ZUNoaWxkcmVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZUNoaWxkcmVuKHRhcmdldCwgcmVmKSB7XG4gICAgICBfZ2V0KEJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrLnByb3RvdHlwZSksICdtb3ZlQ2hpbGRyZW4nLCB0aGlzKS5jYWxsKHRoaXMsIHRhcmdldCwgcmVmKTtcbiAgICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvcHRpbWl6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9wdGltaXplKGNvbnRleHQpIHtcbiAgICAgIF9nZXQoQmxvY2sucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvY2sucHJvdG90eXBlKSwgJ29wdGltaXplJywgdGhpcykuY2FsbCh0aGlzLCBjb250ZXh0KTtcbiAgICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwYXRoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF0aChpbmRleCkge1xuICAgICAgcmV0dXJuIF9nZXQoQmxvY2sucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvY2sucHJvdG90eXBlKSwgJ3BhdGgnLCB0aGlzKS5jYWxsKHRoaXMsIGluZGV4LCB0cnVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVDaGlsZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUNoaWxkKGNoaWxkKSB7XG4gICAgICBfZ2V0KEJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrLnByb3RvdHlwZSksICdyZW1vdmVDaGlsZCcsIHRoaXMpLmNhbGwodGhpcywgY2hpbGQpO1xuICAgICAgdGhpcy5jYWNoZSA9IHt9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NwbGl0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3BsaXQoaW5kZXgpIHtcbiAgICAgIHZhciBmb3JjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgICAgIGlmIChmb3JjZSAmJiAoaW5kZXggPT09IDAgfHwgaW5kZXggPj0gdGhpcy5sZW5ndGgoKSAtIE5FV0xJTkVfTEVOR1RIKSkge1xuICAgICAgICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShjbG9uZSwgdGhpcyk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHQpO1xuICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG5leHQgPSBfZ2V0KEJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrLnByb3RvdHlwZSksICdzcGxpdCcsIHRoaXMpLmNhbGwodGhpcywgaW5kZXgsIGZvcmNlKTtcbiAgICAgICAgdGhpcy5jYWNoZSA9IHt9O1xuICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQmxvY2s7XG59KF9wYXJjaG1lbnQyLmRlZmF1bHQuQmxvY2spO1xuXG5CbG9jay5ibG90TmFtZSA9ICdibG9jayc7XG5CbG9jay50YWdOYW1lID0gJ1AnO1xuQmxvY2suZGVmYXVsdENoaWxkID0gJ2JyZWFrJztcbkJsb2NrLmFsbG93ZWRDaGlsZHJlbiA9IFtfaW5saW5lMi5kZWZhdWx0LCBfcGFyY2htZW50Mi5kZWZhdWx0LkVtYmVkLCBfdGV4dDIuZGVmYXVsdF07XG5cbmZ1bmN0aW9uIGJ1YmJsZUZvcm1hdHMoYmxvdCkge1xuICB2YXIgZm9ybWF0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKGJsb3QgPT0gbnVsbCkgcmV0dXJuIGZvcm1hdHM7XG4gIGlmICh0eXBlb2YgYmxvdC5mb3JtYXRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm9ybWF0cyA9ICgwLCBfZXh0ZW5kMi5kZWZhdWx0KShmb3JtYXRzLCBibG90LmZvcm1hdHMoKSk7XG4gIH1cbiAgaWYgKGJsb3QucGFyZW50ID09IG51bGwgfHwgYmxvdC5wYXJlbnQuYmxvdE5hbWUgPT0gJ3Njcm9sbCcgfHwgYmxvdC5wYXJlbnQuc3RhdGljcy5zY29wZSAhPT0gYmxvdC5zdGF0aWNzLnNjb3BlKSB7XG4gICAgcmV0dXJuIGZvcm1hdHM7XG4gIH1cbiAgcmV0dXJuIGJ1YmJsZUZvcm1hdHMoYmxvdC5wYXJlbnQsIGZvcm1hdHMpO1xufVxuXG5leHBvcnRzLmJ1YmJsZUZvcm1hdHMgPSBidWJibGVGb3JtYXRzO1xuZXhwb3J0cy5CbG9ja0VtYmVkID0gQmxvY2tFbWJlZDtcbmV4cG9ydHMuZGVmYXVsdCA9IEJsb2NrO1xuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMub3ZlcmxvYWQgPSBleHBvcnRzLmV4cGFuZENvbmZpZyA9IHVuZGVmaW5lZDtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oNTApO1xuXG52YXIgX3F1aWxsRGVsdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3F1aWxsRGVsdGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGxEZWx0YSk7XG5cbnZhciBfZWRpdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cbnZhciBfZWRpdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VkaXRvcik7XG5cbnZhciBfZW1pdHRlcjMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX2VtaXR0ZXI0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZW1pdHRlcjMpO1xuXG52YXIgX21vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfbW9kdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vZHVsZSk7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9zZWxlY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblxudmFyIF9zZWxlY3Rpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0aW9uKTtcblxudmFyIF9leHRlbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX2V4dGVuZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmQpO1xuXG52YXIgX2xvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG52YXIgX2xvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dnZXIpO1xuXG52YXIgX3RoZW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7XG5cbnZhciBfdGhlbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGhlbWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgZGVidWcgPSAoMCwgX2xvZ2dlcjIuZGVmYXVsdCkoJ3F1aWxsJyk7XG5cbnZhciBRdWlsbCA9IGZ1bmN0aW9uICgpIHtcbiAgX2NyZWF0ZUNsYXNzKFF1aWxsLCBudWxsLCBbe1xuICAgIGtleTogJ2RlYnVnJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVidWcobGltaXQpIHtcbiAgICAgIGlmIChsaW1pdCA9PT0gdHJ1ZSkge1xuICAgICAgICBsaW1pdCA9ICdsb2cnO1xuICAgICAgfVxuICAgICAgX2xvZ2dlcjIuZGVmYXVsdC5sZXZlbChsaW1pdCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZmluZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmQobm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGUuX19xdWlsbCB8fCBfcGFyY2htZW50Mi5kZWZhdWx0LmZpbmQobm9kZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW1wb3J0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2ltcG9ydChuYW1lKSB7XG4gICAgICBpZiAodGhpcy5pbXBvcnRzW25hbWVdID09IG51bGwpIHtcbiAgICAgICAgZGVidWcuZXJyb3IoJ0Nhbm5vdCBpbXBvcnQgJyArIG5hbWUgKyAnLiBBcmUgeW91IHN1cmUgaXQgd2FzIHJlZ2lzdGVyZWQ/Jyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5pbXBvcnRzW25hbWVdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlZ2lzdGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXIocGF0aCwgdGFyZ2V0KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgb3ZlcndyaXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICAgICAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgbmFtZSA9IHBhdGguYXR0ck5hbWUgfHwgcGF0aC5ibG90TmFtZTtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIC8vIHJlZ2lzdGVyKEJsb3QgfCBBdHRyaWJ1dG9yLCBvdmVyd3JpdGUpXG4gICAgICAgICAgdGhpcy5yZWdpc3RlcignZm9ybWF0cy8nICsgbmFtZSwgcGF0aCwgdGFyZ2V0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyhwYXRoKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIF90aGlzLnJlZ2lzdGVyKGtleSwgcGF0aFtrZXldLCB0YXJnZXQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5pbXBvcnRzW3BhdGhdICE9IG51bGwgJiYgIW92ZXJ3cml0ZSkge1xuICAgICAgICAgIGRlYnVnLndhcm4oJ092ZXJ3cml0aW5nICcgKyBwYXRoICsgJyB3aXRoJywgdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmltcG9ydHNbcGF0aF0gPSB0YXJnZXQ7XG4gICAgICAgIGlmICgocGF0aC5zdGFydHNXaXRoKCdibG90cy8nKSB8fCBwYXRoLnN0YXJ0c1dpdGgoJ2Zvcm1hdHMvJykpICYmIHRhcmdldC5ibG90TmFtZSAhPT0gJ2Fic3RyYWN0Jykge1xuICAgICAgICAgIF9wYXJjaG1lbnQyLmRlZmF1bHQucmVnaXN0ZXIodGFyZ2V0KTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXRoLnN0YXJ0c1dpdGgoJ21vZHVsZXMnKSAmJiB0eXBlb2YgdGFyZ2V0LnJlZ2lzdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlZ2lzdGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICBmdW5jdGlvbiBRdWlsbChjb250YWluZXIpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBRdWlsbCk7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBleHBhbmRDb25maWcoY29udGFpbmVyLCBvcHRpb25zKTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMub3B0aW9ucy5jb250YWluZXI7XG4gICAgaWYgKHRoaXMuY29udGFpbmVyID09IG51bGwpIHtcbiAgICAgIHJldHVybiBkZWJ1Zy5lcnJvcignSW52YWxpZCBRdWlsbCBjb250YWluZXInLCBjb250YWluZXIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmRlYnVnKSB7XG4gICAgICBRdWlsbC5kZWJ1Zyh0aGlzLm9wdGlvbnMuZGVidWcpO1xuICAgIH1cbiAgICB2YXIgaHRtbCA9IHRoaXMuY29udGFpbmVyLmlubmVySFRNTC50cmltKCk7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncWwtY29udGFpbmVyJyk7XG4gICAgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgdGhpcy5jb250YWluZXIuX19xdWlsbCA9IHRoaXM7XG4gICAgdGhpcy5yb290ID0gdGhpcy5hZGRDb250YWluZXIoJ3FsLWVkaXRvcicpO1xuICAgIHRoaXMucm9vdC5jbGFzc0xpc3QuYWRkKCdxbC1ibGFuaycpO1xuICAgIHRoaXMucm9vdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZ3JhbW0nLCBmYWxzZSk7XG4gICAgdGhpcy5zY3JvbGxpbmdDb250YWluZXIgPSB0aGlzLm9wdGlvbnMuc2Nyb2xsaW5nQ29udGFpbmVyIHx8IHRoaXMucm9vdDtcbiAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgX2VtaXR0ZXI0LmRlZmF1bHQoKTtcbiAgICB0aGlzLnNjcm9sbCA9IF9wYXJjaG1lbnQyLmRlZmF1bHQuY3JlYXRlKHRoaXMucm9vdCwge1xuICAgICAgZW1pdHRlcjogdGhpcy5lbWl0dGVyLFxuICAgICAgd2hpdGVsaXN0OiB0aGlzLm9wdGlvbnMuZm9ybWF0c1xuICAgIH0pO1xuICAgIHRoaXMuZWRpdG9yID0gbmV3IF9lZGl0b3IyLmRlZmF1bHQodGhpcy5zY3JvbGwpO1xuICAgIHRoaXMuc2VsZWN0aW9uID0gbmV3IF9zZWxlY3Rpb24yLmRlZmF1bHQodGhpcy5zY3JvbGwsIHRoaXMuZW1pdHRlcik7XG4gICAgdGhpcy50aGVtZSA9IG5ldyB0aGlzLm9wdGlvbnMudGhlbWUodGhpcywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLmtleWJvYXJkID0gdGhpcy50aGVtZS5hZGRNb2R1bGUoJ2tleWJvYXJkJyk7XG4gICAgdGhpcy5jbGlwYm9hcmQgPSB0aGlzLnRoZW1lLmFkZE1vZHVsZSgnY2xpcGJvYXJkJyk7XG4gICAgdGhpcy5oaXN0b3J5ID0gdGhpcy50aGVtZS5hZGRNb2R1bGUoJ2hpc3RvcnknKTtcbiAgICB0aGlzLnRoZW1lLmluaXQoKTtcbiAgICB0aGlzLmVtaXR0ZXIub24oX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzLkVESVRPUl9DSEFOR0UsIGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBpZiAodHlwZSA9PT0gX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzLlRFWFRfQ0hBTkdFKSB7XG4gICAgICAgIF90aGlzMi5yb290LmNsYXNzTGlzdC50b2dnbGUoJ3FsLWJsYW5rJywgX3RoaXMyLmVkaXRvci5pc0JsYW5rKCkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuZW1pdHRlci5vbihfZW1pdHRlcjQuZGVmYXVsdC5ldmVudHMuU0NST0xMX1VQREFURSwgZnVuY3Rpb24gKHNvdXJjZSwgbXV0YXRpb25zKSB7XG4gICAgICB2YXIgcmFuZ2UgPSBfdGhpczIuc2VsZWN0aW9uLmxhc3RSYW5nZTtcbiAgICAgIHZhciBpbmRleCA9IHJhbmdlICYmIHJhbmdlLmxlbmd0aCA9PT0gMCA/IHJhbmdlLmluZGV4IDogdW5kZWZpbmVkO1xuICAgICAgbW9kaWZ5LmNhbGwoX3RoaXMyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuZWRpdG9yLnVwZGF0ZShudWxsLCBtdXRhdGlvbnMsIGluZGV4KTtcbiAgICAgIH0sIHNvdXJjZSk7XG4gICAgfSk7XG4gICAgdmFyIGNvbnRlbnRzID0gdGhpcy5jbGlwYm9hcmQuY29udmVydCgnPGRpdiBjbGFzcz1cXCdxbC1lZGl0b3JcXCcgc3R5bGU9XCJ3aGl0ZS1zcGFjZTogbm9ybWFsO1wiPicgKyBodG1sICsgJzxwPjxicj48L3A+PC9kaXY+Jyk7XG4gICAgdGhpcy5zZXRDb250ZW50cyhjb250ZW50cyk7XG4gICAgdGhpcy5oaXN0b3J5LmNsZWFyKCk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5wbGFjZWhvbGRlcikge1xuICAgICAgdGhpcy5yb290LnNldEF0dHJpYnV0ZSgnZGF0YS1wbGFjZWhvbGRlcicsIHRoaXMub3B0aW9ucy5wbGFjZWhvbGRlcik7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMucmVhZE9ubHkpIHtcbiAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgIH1cbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhRdWlsbCwgW3tcbiAgICBrZXk6ICdhZGRDb250YWluZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRDb250YWluZXIoY29udGFpbmVyKSB7XG4gICAgICB2YXIgcmVmTm9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDtcblxuICAgICAgaWYgKHR5cGVvZiBjb250YWluZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBjb250YWluZXI7XG4gICAgICAgIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgfVxuICAgICAgdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgcmVmTm9kZSk7XG4gICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2JsdXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBibHVyKCkge1xuICAgICAgdGhpcy5zZWxlY3Rpb24uc2V0UmFuZ2UobnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlVGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVRleHQoaW5kZXgsIGxlbmd0aCwgc291cmNlKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIF9vdmVybG9hZCA9IG92ZXJsb2FkKGluZGV4LCBsZW5ndGgsIHNvdXJjZSk7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQyID0gX3NsaWNlZFRvQXJyYXkoX292ZXJsb2FkLCA0KTtcblxuICAgICAgaW5kZXggPSBfb3ZlcmxvYWQyWzBdO1xuICAgICAgbGVuZ3RoID0gX292ZXJsb2FkMlsxXTtcbiAgICAgIHNvdXJjZSA9IF9vdmVybG9hZDJbM107XG5cbiAgICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczMuZWRpdG9yLmRlbGV0ZVRleHQoaW5kZXgsIGxlbmd0aCk7XG4gICAgICB9LCBzb3VyY2UsIGluZGV4LCAtMSAqIGxlbmd0aCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICB0aGlzLmVuYWJsZShmYWxzZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgdmFyIGVuYWJsZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRydWU7XG5cbiAgICAgIHRoaXMuc2Nyb2xsLmVuYWJsZShlbmFibGVkKTtcbiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ3FsLWRpc2FibGVkJywgIWVuYWJsZWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2ZvY3VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy5zY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsVG9wO1xuICAgICAgdGhpcy5zZWxlY3Rpb24uZm9jdXMoKTtcbiAgICAgIHRoaXMuc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgIHRoaXMuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXQobmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLkFQSTtcblxuICAgICAgcmV0dXJuIG1vZGlmeS5jYWxsKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJhbmdlID0gX3RoaXM0LmdldFNlbGVjdGlvbih0cnVlKTtcbiAgICAgICAgdmFyIGNoYW5nZSA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpO1xuICAgICAgICBpZiAocmFuZ2UgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgICAgIH0gZWxzZSBpZiAoX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeShuYW1lLCBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLkJMT0NLKSkge1xuICAgICAgICAgIGNoYW5nZSA9IF90aGlzNC5lZGl0b3IuZm9ybWF0TGluZShyYW5nZS5pbmRleCwgcmFuZ2UubGVuZ3RoLCBfZGVmaW5lUHJvcGVydHkoe30sIG5hbWUsIHZhbHVlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAocmFuZ2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgX3RoaXM0LnNlbGVjdGlvbi5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlID0gX3RoaXM0LmVkaXRvci5mb3JtYXRUZXh0KHJhbmdlLmluZGV4LCByYW5nZS5sZW5ndGgsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgbmFtZSwgdmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczQuc2V0U2VsZWN0aW9uKHJhbmdlLCBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgICB9LCBzb3VyY2UpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdExpbmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRMaW5lKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlLCBzb3VyY2UpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICB2YXIgZm9ybWF0cyA9IHZvaWQgMDtcblxuICAgICAgdmFyIF9vdmVybG9hZDMgPSBvdmVybG9hZChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSwgc291cmNlKTtcblxuICAgICAgdmFyIF9vdmVybG9hZDQgPSBfc2xpY2VkVG9BcnJheShfb3ZlcmxvYWQzLCA0KTtcblxuICAgICAgaW5kZXggPSBfb3ZlcmxvYWQ0WzBdO1xuICAgICAgbGVuZ3RoID0gX292ZXJsb2FkNFsxXTtcbiAgICAgIGZvcm1hdHMgPSBfb3ZlcmxvYWQ0WzJdO1xuICAgICAgc291cmNlID0gX292ZXJsb2FkNFszXTtcblxuICAgICAgcmV0dXJuIG1vZGlmeS5jYWxsKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNS5lZGl0b3IuZm9ybWF0TGluZShpbmRleCwgbGVuZ3RoLCBmb3JtYXRzKTtcbiAgICAgIH0sIHNvdXJjZSwgaW5kZXgsIDApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdFRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRUZXh0KGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlLCBzb3VyY2UpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICB2YXIgZm9ybWF0cyA9IHZvaWQgMDtcblxuICAgICAgdmFyIF9vdmVybG9hZDUgPSBvdmVybG9hZChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSwgc291cmNlKTtcblxuICAgICAgdmFyIF9vdmVybG9hZDYgPSBfc2xpY2VkVG9BcnJheShfb3ZlcmxvYWQ1LCA0KTtcblxuICAgICAgaW5kZXggPSBfb3ZlcmxvYWQ2WzBdO1xuICAgICAgbGVuZ3RoID0gX292ZXJsb2FkNlsxXTtcbiAgICAgIGZvcm1hdHMgPSBfb3ZlcmxvYWQ2WzJdO1xuICAgICAgc291cmNlID0gX292ZXJsb2FkNlszXTtcblxuICAgICAgcmV0dXJuIG1vZGlmeS5jYWxsKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNi5lZGl0b3IuZm9ybWF0VGV4dChpbmRleCwgbGVuZ3RoLCBmb3JtYXRzKTtcbiAgICAgIH0sIHNvdXJjZSwgaW5kZXgsIDApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEJvdW5kcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJvdW5kcyhpbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuICAgICAgdmFyIGJvdW5kcyA9IHZvaWQgMDtcbiAgICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgIGJvdW5kcyA9IHRoaXMuc2VsZWN0aW9uLmdldEJvdW5kcyhpbmRleCwgbGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJvdW5kcyA9IHRoaXMuc2VsZWN0aW9uLmdldEJvdW5kcyhpbmRleC5pbmRleCwgaW5kZXgubGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHZhciBjb250YWluZXJCb3VuZHMgPSB0aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJvdHRvbTogYm91bmRzLmJvdHRvbSAtIGNvbnRhaW5lckJvdW5kcy50b3AsXG4gICAgICAgIGhlaWdodDogYm91bmRzLmhlaWdodCxcbiAgICAgICAgbGVmdDogYm91bmRzLmxlZnQgLSBjb250YWluZXJCb3VuZHMubGVmdCxcbiAgICAgICAgcmlnaHQ6IGJvdW5kcy5yaWdodCAtIGNvbnRhaW5lckJvdW5kcy5sZWZ0LFxuICAgICAgICB0b3A6IGJvdW5kcy50b3AgLSBjb250YWluZXJCb3VuZHMudG9wLFxuICAgICAgICB3aWR0aDogYm91bmRzLndpZHRoXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldENvbnRlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29udGVudHMoKSB7XG4gICAgICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLmdldExlbmd0aCgpIC0gaW5kZXg7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQ3ID0gb3ZlcmxvYWQoaW5kZXgsIGxlbmd0aCk7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQ4ID0gX3NsaWNlZFRvQXJyYXkoX292ZXJsb2FkNywgMik7XG5cbiAgICAgIGluZGV4ID0gX292ZXJsb2FkOFswXTtcbiAgICAgIGxlbmd0aCA9IF9vdmVybG9hZDhbMV07XG5cbiAgICAgIHJldHVybiB0aGlzLmVkaXRvci5nZXRDb250ZW50cyhpbmRleCwgbGVuZ3RoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRGb3JtYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGb3JtYXQoKSB7XG4gICAgICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRoaXMuZ2V0U2VsZWN0aW9uKHRydWUpO1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuICAgICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmdldEZvcm1hdChpbmRleCwgbGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRvci5nZXRGb3JtYXQoaW5kZXguaW5kZXgsIGluZGV4Lmxlbmd0aCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0SW5kZXgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJbmRleChibG90KSB7XG4gICAgICByZXR1cm4gYmxvdC5vZmZzZXQodGhpcy5zY3JvbGwpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldExlbmd0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldExlbmd0aCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNjcm9sbC5sZW5ndGgoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRMZWFmJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGVhZihpbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsLmxlYWYoaW5kZXgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldExpbmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMaW5lKGluZGV4KSB7XG4gICAgICByZXR1cm4gdGhpcy5zY3JvbGwubGluZShpbmRleCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0TGluZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMaW5lcygpIHtcbiAgICAgIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IE51bWJlci5NQVhfVkFMVUU7XG5cbiAgICAgIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjcm9sbC5saW5lcyhpbmRleC5pbmRleCwgaW5kZXgubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjcm9sbC5saW5lcyhpbmRleCwgbGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRNb2R1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNb2R1bGUobmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbWUubW9kdWxlc1tuYW1lXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRTZWxlY3Rpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWxlY3Rpb24oKSB7XG4gICAgICB2YXIgZm9jdXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgICBpZiAoZm9jdXMpIHRoaXMuZm9jdXMoKTtcbiAgICAgIHRoaXMudXBkYXRlKCk7IC8vIE1ha2Ugc3VyZSB3ZSBhY2Nlc3MgZ2V0UmFuZ2Ugd2l0aCBlZGl0b3IgaW4gY29uc2lzdGVudCBzdGF0ZVxuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKClbMF07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0VGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRleHQoKSB7XG4gICAgICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLmdldExlbmd0aCgpIC0gaW5kZXg7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQ5ID0gb3ZlcmxvYWQoaW5kZXgsIGxlbmd0aCk7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQxMCA9IF9zbGljZWRUb0FycmF5KF9vdmVybG9hZDksIDIpO1xuXG4gICAgICBpbmRleCA9IF9vdmVybG9hZDEwWzBdO1xuICAgICAgbGVuZ3RoID0gX292ZXJsb2FkMTBbMV07XG5cbiAgICAgIHJldHVybiB0aGlzLmVkaXRvci5nZXRUZXh0KGluZGV4LCBsZW5ndGgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhc0ZvY3VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzRm9jdXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb24uaGFzRm9jdXMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRFbWJlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydEVtYmVkKGluZGV4LCBlbWJlZCwgdmFsdWUpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBRdWlsbC5zb3VyY2VzLkFQSTtcblxuICAgICAgcmV0dXJuIG1vZGlmeS5jYWxsKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNy5lZGl0b3IuaW5zZXJ0RW1iZWQoaW5kZXgsIGVtYmVkLCB2YWx1ZSk7XG4gICAgICB9LCBzb3VyY2UsIGluZGV4KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRUZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0VGV4dChpbmRleCwgdGV4dCwgbmFtZSwgdmFsdWUsIHNvdXJjZSkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIHZhciBmb3JtYXRzID0gdm9pZCAwO1xuXG4gICAgICB2YXIgX292ZXJsb2FkMTEgPSBvdmVybG9hZChpbmRleCwgMCwgbmFtZSwgdmFsdWUsIHNvdXJjZSk7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQxMiA9IF9zbGljZWRUb0FycmF5KF9vdmVybG9hZDExLCA0KTtcblxuICAgICAgaW5kZXggPSBfb3ZlcmxvYWQxMlswXTtcbiAgICAgIGZvcm1hdHMgPSBfb3ZlcmxvYWQxMlsyXTtcbiAgICAgIHNvdXJjZSA9IF9vdmVybG9hZDEyWzNdO1xuXG4gICAgICByZXR1cm4gbW9kaWZ5LmNhbGwodGhpcywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM4LmVkaXRvci5pbnNlcnRUZXh0KGluZGV4LCB0ZXh0LCBmb3JtYXRzKTtcbiAgICAgIH0sIHNvdXJjZSwgaW5kZXgsIHRleHQubGVuZ3RoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpc0VuYWJsZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0VuYWJsZWQoKSB7XG4gICAgICByZXR1cm4gIXRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5jb250YWlucygncWwtZGlzYWJsZWQnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvZmYnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvZmYoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9mZi5hcHBseSh0aGlzLmVtaXR0ZXIsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24uYXBwbHkodGhpcy5lbWl0dGVyLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29uY2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbmNlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbmNlLmFwcGx5KHRoaXMuZW1pdHRlciwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwYXN0ZUhUTUwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXN0ZUhUTUwoaW5kZXgsIGh0bWwsIHNvdXJjZSkge1xuICAgICAgdGhpcy5jbGlwYm9hcmQuZGFuZ2Vyb3VzbHlQYXN0ZUhUTUwoaW5kZXgsIGh0bWwsIHNvdXJjZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlRm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlRm9ybWF0KGluZGV4LCBsZW5ndGgsIHNvdXJjZSkge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQxMyA9IG92ZXJsb2FkKGluZGV4LCBsZW5ndGgsIHNvdXJjZSk7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQxNCA9IF9zbGljZWRUb0FycmF5KF9vdmVybG9hZDEzLCA0KTtcblxuICAgICAgaW5kZXggPSBfb3ZlcmxvYWQxNFswXTtcbiAgICAgIGxlbmd0aCA9IF9vdmVybG9hZDE0WzFdO1xuICAgICAgc291cmNlID0gX292ZXJsb2FkMTRbM107XG5cbiAgICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczkuZWRpdG9yLnJlbW92ZUZvcm1hdChpbmRleCwgbGVuZ3RoKTtcbiAgICAgIH0sIHNvdXJjZSwgaW5kZXgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Njcm9sbEludG9WaWV3JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Nyb2xsSW50b1ZpZXcoKSB7XG4gICAgICB0aGlzLnNlbGVjdGlvbi5zY3JvbGxJbnRvVmlldyh0aGlzLnNjcm9sbGluZ0NvbnRhaW5lcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0Q29udGVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDb250ZW50cyhkZWx0YSkge1xuICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLkFQSTtcblxuICAgICAgcmV0dXJuIG1vZGlmeS5jYWxsKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVsdGEgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoZGVsdGEpO1xuICAgICAgICB2YXIgbGVuZ3RoID0gX3RoaXMxMC5nZXRMZW5ndGgoKTtcbiAgICAgICAgdmFyIGRlbGV0ZWQgPSBfdGhpczEwLmVkaXRvci5kZWxldGVUZXh0KDAsIGxlbmd0aCk7XG4gICAgICAgIHZhciBhcHBsaWVkID0gX3RoaXMxMC5lZGl0b3IuYXBwbHlEZWx0YShkZWx0YSk7XG4gICAgICAgIHZhciBsYXN0T3AgPSBhcHBsaWVkLm9wc1thcHBsaWVkLm9wcy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGxhc3RPcCAhPSBudWxsICYmIHR5cGVvZiBsYXN0T3AuaW5zZXJ0ID09PSAnc3RyaW5nJyAmJiBsYXN0T3AuaW5zZXJ0W2xhc3RPcC5pbnNlcnQubGVuZ3RoIC0gMV0gPT09ICdcXG4nKSB7XG4gICAgICAgICAgX3RoaXMxMC5lZGl0b3IuZGVsZXRlVGV4dChfdGhpczEwLmdldExlbmd0aCgpIC0gMSwgMSk7XG4gICAgICAgICAgYXBwbGllZC5kZWxldGUoMSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJldCA9IGRlbGV0ZWQuY29tcG9zZShhcHBsaWVkKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH0sIHNvdXJjZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0U2VsZWN0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2VsZWN0aW9uKGluZGV4LCBsZW5ndGgsIHNvdXJjZSkge1xuICAgICAgaWYgKGluZGV4ID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb24uc2V0UmFuZ2UobnVsbCwgbGVuZ3RoIHx8IFF1aWxsLnNvdXJjZXMuQVBJKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBfb3ZlcmxvYWQxNSA9IG92ZXJsb2FkKGluZGV4LCBsZW5ndGgsIHNvdXJjZSk7XG5cbiAgICAgICAgdmFyIF9vdmVybG9hZDE2ID0gX3NsaWNlZFRvQXJyYXkoX292ZXJsb2FkMTUsIDQpO1xuXG4gICAgICAgIGluZGV4ID0gX292ZXJsb2FkMTZbMF07XG4gICAgICAgIGxlbmd0aCA9IF9vdmVybG9hZDE2WzFdO1xuICAgICAgICBzb3VyY2UgPSBfb3ZlcmxvYWQxNlszXTtcblxuICAgICAgICB0aGlzLnNlbGVjdGlvbi5zZXRSYW5nZShuZXcgX3NlbGVjdGlvbi5SYW5nZShpbmRleCwgbGVuZ3RoKSwgc291cmNlKTtcbiAgICAgICAgaWYgKHNvdXJjZSAhPT0gX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5TSUxFTlQpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdGlvbi5zY3JvbGxJbnRvVmlldyh0aGlzLnNjcm9sbGluZ0NvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRUZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VGV4dCh0ZXh0KSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLkFQSTtcblxuICAgICAgdmFyIGRlbHRhID0gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkuaW5zZXJ0KHRleHQpO1xuICAgICAgcmV0dXJuIHRoaXMuc2V0Q29udGVudHMoZGVsdGEsIHNvdXJjZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5VU0VSO1xuXG4gICAgICB2YXIgY2hhbmdlID0gdGhpcy5zY3JvbGwudXBkYXRlKHNvdXJjZSk7IC8vIFdpbGwgdXBkYXRlIHNlbGVjdGlvbiBiZWZvcmUgc2VsZWN0aW9uLnVwZGF0ZSgpIGRvZXMgaWYgdGV4dCBjaGFuZ2VzXG4gICAgICB0aGlzLnNlbGVjdGlvbi51cGRhdGUoc291cmNlKTtcbiAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlQ29udGVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVDb250ZW50cyhkZWx0YSkge1xuICAgICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuXG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLkFQSTtcblxuICAgICAgcmV0dXJuIG1vZGlmeS5jYWxsKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVsdGEgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoZGVsdGEpO1xuICAgICAgICByZXR1cm4gX3RoaXMxMS5lZGl0b3IuYXBwbHlEZWx0YShkZWx0YSwgc291cmNlKTtcbiAgICAgIH0sIHNvdXJjZSwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFF1aWxsO1xufSgpO1xuXG5RdWlsbC5ERUZBVUxUUyA9IHtcbiAgYm91bmRzOiBudWxsLFxuICBmb3JtYXRzOiBudWxsLFxuICBtb2R1bGVzOiB7fSxcbiAgcGxhY2Vob2xkZXI6ICcnLFxuICByZWFkT25seTogZmFsc2UsXG4gIHNjcm9sbGluZ0NvbnRhaW5lcjogbnVsbCxcbiAgc3RyaWN0OiB0cnVlLFxuICB0aGVtZTogJ2RlZmF1bHQnXG59O1xuUXVpbGwuZXZlbnRzID0gX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzO1xuUXVpbGwuc291cmNlcyA9IF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXM7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblF1aWxsLnZlcnNpb24gPSAgZmFsc2UgPyAnZGV2JyA6IFwiMS4zLjZcIjtcblxuUXVpbGwuaW1wb3J0cyA9IHtcbiAgJ2RlbHRhJzogX3F1aWxsRGVsdGEyLmRlZmF1bHQsXG4gICdwYXJjaG1lbnQnOiBfcGFyY2htZW50Mi5kZWZhdWx0LFxuICAnY29yZS9tb2R1bGUnOiBfbW9kdWxlMi5kZWZhdWx0LFxuICAnY29yZS90aGVtZSc6IF90aGVtZTIuZGVmYXVsdFxufTtcblxuZnVuY3Rpb24gZXhwYW5kQ29uZmlnKGNvbnRhaW5lciwgdXNlckNvbmZpZykge1xuICB1c2VyQ29uZmlnID0gKDAsIF9leHRlbmQyLmRlZmF1bHQpKHRydWUsIHtcbiAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICBtb2R1bGVzOiB7XG4gICAgICBjbGlwYm9hcmQ6IHRydWUsXG4gICAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICAgIGhpc3Rvcnk6IHRydWVcbiAgICB9XG4gIH0sIHVzZXJDb25maWcpO1xuICBpZiAoIXVzZXJDb25maWcudGhlbWUgfHwgdXNlckNvbmZpZy50aGVtZSA9PT0gUXVpbGwuREVGQVVMVFMudGhlbWUpIHtcbiAgICB1c2VyQ29uZmlnLnRoZW1lID0gX3RoZW1lMi5kZWZhdWx0O1xuICB9IGVsc2Uge1xuICAgIHVzZXJDb25maWcudGhlbWUgPSBRdWlsbC5pbXBvcnQoJ3RoZW1lcy8nICsgdXNlckNvbmZpZy50aGVtZSk7XG4gICAgaWYgKHVzZXJDb25maWcudGhlbWUgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHRoZW1lICcgKyB1c2VyQ29uZmlnLnRoZW1lICsgJy4gRGlkIHlvdSByZWdpc3RlciBpdD8nKTtcbiAgICB9XG4gIH1cbiAgdmFyIHRoZW1lQ29uZmlnID0gKDAsIF9leHRlbmQyLmRlZmF1bHQpKHRydWUsIHt9LCB1c2VyQ29uZmlnLnRoZW1lLkRFRkFVTFRTKTtcbiAgW3RoZW1lQ29uZmlnLCB1c2VyQ29uZmlnXS5mb3JFYWNoKGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICBjb25maWcubW9kdWxlcyA9IGNvbmZpZy5tb2R1bGVzIHx8IHt9O1xuICAgIE9iamVjdC5rZXlzKGNvbmZpZy5tb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGUpIHtcbiAgICAgIGlmIChjb25maWcubW9kdWxlc1ttb2R1bGVdID09PSB0cnVlKSB7XG4gICAgICAgIGNvbmZpZy5tb2R1bGVzW21vZHVsZV0gPSB7fTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHZhciBtb2R1bGVOYW1lcyA9IE9iamVjdC5rZXlzKHRoZW1lQ29uZmlnLm1vZHVsZXMpLmNvbmNhdChPYmplY3Qua2V5cyh1c2VyQ29uZmlnLm1vZHVsZXMpKTtcbiAgdmFyIG1vZHVsZUNvbmZpZyA9IG1vZHVsZU5hbWVzLnJlZHVjZShmdW5jdGlvbiAoY29uZmlnLCBuYW1lKSB7XG4gICAgdmFyIG1vZHVsZUNsYXNzID0gUXVpbGwuaW1wb3J0KCdtb2R1bGVzLycgKyBuYW1lKTtcbiAgICBpZiAobW9kdWxlQ2xhc3MgPT0gbnVsbCkge1xuICAgICAgZGVidWcuZXJyb3IoJ0Nhbm5vdCBsb2FkICcgKyBuYW1lICsgJyBtb2R1bGUuIEFyZSB5b3Ugc3VyZSB5b3UgcmVnaXN0ZXJlZCBpdD8nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnW25hbWVdID0gbW9kdWxlQ2xhc3MuREVGQVVMVFMgfHwge307XG4gICAgfVxuICAgIHJldHVybiBjb25maWc7XG4gIH0sIHt9KTtcbiAgLy8gU3BlY2lhbCBjYXNlIHRvb2xiYXIgc2hvcnRoYW5kXG4gIGlmICh1c2VyQ29uZmlnLm1vZHVsZXMgIT0gbnVsbCAmJiB1c2VyQ29uZmlnLm1vZHVsZXMudG9vbGJhciAmJiB1c2VyQ29uZmlnLm1vZHVsZXMudG9vbGJhci5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0KSB7XG4gICAgdXNlckNvbmZpZy5tb2R1bGVzLnRvb2xiYXIgPSB7XG4gICAgICBjb250YWluZXI6IHVzZXJDb25maWcubW9kdWxlcy50b29sYmFyXG4gICAgfTtcbiAgfVxuICB1c2VyQ29uZmlnID0gKDAsIF9leHRlbmQyLmRlZmF1bHQpKHRydWUsIHt9LCBRdWlsbC5ERUZBVUxUUywgeyBtb2R1bGVzOiBtb2R1bGVDb25maWcgfSwgdGhlbWVDb25maWcsIHVzZXJDb25maWcpO1xuICBbJ2JvdW5kcycsICdjb250YWluZXInLCAnc2Nyb2xsaW5nQ29udGFpbmVyJ10uZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKHR5cGVvZiB1c2VyQ29uZmlnW2tleV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB1c2VyQ29uZmlnW2tleV0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHVzZXJDb25maWdba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgdXNlckNvbmZpZy5tb2R1bGVzID0gT2JqZWN0LmtleXModXNlckNvbmZpZy5tb2R1bGVzKS5yZWR1Y2UoZnVuY3Rpb24gKGNvbmZpZywgbmFtZSkge1xuICAgIGlmICh1c2VyQ29uZmlnLm1vZHVsZXNbbmFtZV0pIHtcbiAgICAgIGNvbmZpZ1tuYW1lXSA9IHVzZXJDb25maWcubW9kdWxlc1tuYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfSwge30pO1xuICByZXR1cm4gdXNlckNvbmZpZztcbn1cblxuLy8gSGFuZGxlIHNlbGVjdGlvbiBwcmVzZXJ2YXRpb24gYW5kIFRFWFRfQ0hBTkdFIGVtaXNzaW9uXG4vLyBjb21tb24gdG8gbW9kaWZpY2F0aW9uIEFQSXNcbmZ1bmN0aW9uIG1vZGlmeShtb2RpZmllciwgc291cmNlLCBpbmRleCwgc2hpZnQpIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5zdHJpY3QgJiYgIXRoaXMuaXNFbmFibGVkKCkgJiYgc291cmNlID09PSBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLlVTRVIpIHtcbiAgICByZXR1cm4gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCk7XG4gIH1cbiAgdmFyIHJhbmdlID0gaW5kZXggPT0gbnVsbCA/IG51bGwgOiB0aGlzLmdldFNlbGVjdGlvbigpO1xuICB2YXIgb2xkRGVsdGEgPSB0aGlzLmVkaXRvci5kZWx0YTtcbiAgdmFyIGNoYW5nZSA9IG1vZGlmaWVyKCk7XG4gIGlmIChyYW5nZSAhPSBudWxsKSB7XG4gICAgaWYgKGluZGV4ID09PSB0cnVlKSBpbmRleCA9IHJhbmdlLmluZGV4O1xuICAgIGlmIChzaGlmdCA9PSBudWxsKSB7XG4gICAgICByYW5nZSA9IHNoaWZ0UmFuZ2UocmFuZ2UsIGNoYW5nZSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICByYW5nZSA9IHNoaWZ0UmFuZ2UocmFuZ2UsIGluZGV4LCBzaGlmdCwgc291cmNlKTtcbiAgICB9XG4gICAgdGhpcy5zZXRTZWxlY3Rpb24ocmFuZ2UsIF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgfVxuICBpZiAoY2hhbmdlLmxlbmd0aCgpID4gMCkge1xuICAgIHZhciBfZW1pdHRlcjtcblxuICAgIHZhciBhcmdzID0gW19lbWl0dGVyNC5kZWZhdWx0LmV2ZW50cy5URVhUX0NIQU5HRSwgY2hhbmdlLCBvbGREZWx0YSwgc291cmNlXTtcbiAgICAoX2VtaXR0ZXIgPSB0aGlzLmVtaXR0ZXIpLmVtaXQuYXBwbHkoX2VtaXR0ZXIsIFtfZW1pdHRlcjQuZGVmYXVsdC5ldmVudHMuRURJVE9SX0NIQU5HRV0uY29uY2F0KGFyZ3MpKTtcbiAgICBpZiAoc291cmNlICE9PSBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCkge1xuICAgICAgdmFyIF9lbWl0dGVyMjtcblxuICAgICAgKF9lbWl0dGVyMiA9IHRoaXMuZW1pdHRlcikuZW1pdC5hcHBseShfZW1pdHRlcjIsIGFyZ3MpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2hhbmdlO1xufVxuXG5mdW5jdGlvbiBvdmVybG9hZChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSwgc291cmNlKSB7XG4gIHZhciBmb3JtYXRzID0ge307XG4gIGlmICh0eXBlb2YgaW5kZXguaW5kZXggPT09ICdudW1iZXInICYmIHR5cGVvZiBpbmRleC5sZW5ndGggPT09ICdudW1iZXInKSB7XG4gICAgLy8gQWxsb3cgZm9yIHRocm93YXdheSBlbmQgKHVzZWQgYnkgaW5zZXJ0VGV4dC9pbnNlcnRFbWJlZClcbiAgICBpZiAodHlwZW9mIGxlbmd0aCAhPT0gJ251bWJlcicpIHtcbiAgICAgIHNvdXJjZSA9IHZhbHVlLCB2YWx1ZSA9IG5hbWUsIG5hbWUgPSBsZW5ndGgsIGxlbmd0aCA9IGluZGV4Lmxlbmd0aCwgaW5kZXggPSBpbmRleC5pbmRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gaW5kZXgubGVuZ3RoLCBpbmRleCA9IGluZGV4LmluZGV4O1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgbGVuZ3RoICE9PSAnbnVtYmVyJykge1xuICAgIHNvdXJjZSA9IHZhbHVlLCB2YWx1ZSA9IG5hbWUsIG5hbWUgPSBsZW5ndGgsIGxlbmd0aCA9IDA7XG4gIH1cbiAgLy8gSGFuZGxlIGZvcm1hdCBiZWluZyBvYmplY3QsIHR3byBmb3JtYXQgbmFtZS92YWx1ZSBzdHJpbmdzIG9yIGV4Y2x1ZGVkXG4gIGlmICgodHlwZW9mIG5hbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG5hbWUpKSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3JtYXRzID0gbmFtZTtcbiAgICBzb3VyY2UgPSB2YWx1ZTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgZm9ybWF0c1tuYW1lXSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzb3VyY2UgPSBuYW1lO1xuICAgIH1cbiAgfVxuICAvLyBIYW5kbGUgb3B0aW9uYWwgc291cmNlXG4gIHNvdXJjZSA9IHNvdXJjZSB8fCBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLkFQSTtcbiAgcmV0dXJuIFtpbmRleCwgbGVuZ3RoLCBmb3JtYXRzLCBzb3VyY2VdO1xufVxuXG5mdW5jdGlvbiBzaGlmdFJhbmdlKHJhbmdlLCBpbmRleCwgbGVuZ3RoLCBzb3VyY2UpIHtcbiAgaWYgKHJhbmdlID09IG51bGwpIHJldHVybiBudWxsO1xuICB2YXIgc3RhcnQgPSB2b2lkIDAsXG4gICAgICBlbmQgPSB2b2lkIDA7XG4gIGlmIChpbmRleCBpbnN0YW5jZW9mIF9xdWlsbERlbHRhMi5kZWZhdWx0KSB7XG4gICAgdmFyIF9tYXAgPSBbcmFuZ2UuaW5kZXgsIHJhbmdlLmluZGV4ICsgcmFuZ2UubGVuZ3RoXS5tYXAoZnVuY3Rpb24gKHBvcykge1xuICAgICAgcmV0dXJuIGluZGV4LnRyYW5zZm9ybVBvc2l0aW9uKHBvcywgc291cmNlICE9PSBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgIH0pO1xuXG4gICAgdmFyIF9tYXAyID0gX3NsaWNlZFRvQXJyYXkoX21hcCwgMik7XG5cbiAgICBzdGFydCA9IF9tYXAyWzBdO1xuICAgIGVuZCA9IF9tYXAyWzFdO1xuICB9IGVsc2Uge1xuICAgIHZhciBfbWFwMyA9IFtyYW5nZS5pbmRleCwgcmFuZ2UuaW5kZXggKyByYW5nZS5sZW5ndGhdLm1hcChmdW5jdGlvbiAocG9zKSB7XG4gICAgICBpZiAocG9zIDwgaW5kZXggfHwgcG9zID09PSBpbmRleCAmJiBzb3VyY2UgPT09IF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXMuVVNFUikgcmV0dXJuIHBvcztcbiAgICAgIGlmIChsZW5ndGggPj0gMCkge1xuICAgICAgICByZXR1cm4gcG9zICsgbGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KGluZGV4LCBwb3MgKyBsZW5ndGgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIF9tYXA0ID0gX3NsaWNlZFRvQXJyYXkoX21hcDMsIDIpO1xuXG4gICAgc3RhcnQgPSBfbWFwNFswXTtcbiAgICBlbmQgPSBfbWFwNFsxXTtcbiAgfVxuICByZXR1cm4gbmV3IF9zZWxlY3Rpb24uUmFuZ2Uoc3RhcnQsIGVuZCAtIHN0YXJ0KTtcbn1cblxuZXhwb3J0cy5leHBhbmRDb25maWcgPSBleHBhbmRDb25maWc7XG5leHBvcnRzLm92ZXJsb2FkID0gb3ZlcmxvYWQ7XG5leHBvcnRzLmRlZmF1bHQgPSBRdWlsbDtcblxuLyoqKi8gfSksXG4vKiA2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF90ZXh0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxudmFyIF90ZXh0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RleHQpO1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIElubGluZSA9IGZ1bmN0aW9uIChfUGFyY2htZW50JElubGluZSkge1xuICBfaW5oZXJpdHMoSW5saW5lLCBfUGFyY2htZW50JElubGluZSk7XG5cbiAgZnVuY3Rpb24gSW5saW5lKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbmxpbmUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChJbmxpbmUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJbmxpbmUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhJbmxpbmUsIFt7XG4gICAga2V5OiAnZm9ybWF0QXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRBdChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKElubGluZS5jb21wYXJlKHRoaXMuc3RhdGljcy5ibG90TmFtZSwgbmFtZSkgPCAwICYmIF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkobmFtZSwgX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5CTE9UKSkge1xuICAgICAgICB2YXIgYmxvdCA9IHRoaXMuaXNvbGF0ZShpbmRleCwgbGVuZ3RoKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgYmxvdC53cmFwKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2dldChJbmxpbmUucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSW5saW5lLnByb3RvdHlwZSksICdmb3JtYXRBdCcsIHRoaXMpLmNhbGwodGhpcywgaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29wdGltaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3B0aW1pemUoY29udGV4dCkge1xuICAgICAgX2dldChJbmxpbmUucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSW5saW5lLnByb3RvdHlwZSksICdvcHRpbWl6ZScsIHRoaXMpLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICBpZiAodGhpcy5wYXJlbnQgaW5zdGFuY2VvZiBJbmxpbmUgJiYgSW5saW5lLmNvbXBhcmUodGhpcy5zdGF0aWNzLmJsb3ROYW1lLCB0aGlzLnBhcmVudC5zdGF0aWNzLmJsb3ROYW1lKSA+IDApIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Lmlzb2xhdGUodGhpcy5vZmZzZXQoKSwgdGhpcy5sZW5ndGgoKSk7XG4gICAgICAgIHRoaXMubW92ZUNoaWxkcmVuKHBhcmVudCk7XG4gICAgICAgIHBhcmVudC53cmFwKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAnY29tcGFyZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBhcmUoc2VsZiwgb3RoZXIpIHtcbiAgICAgIHZhciBzZWxmSW5kZXggPSBJbmxpbmUub3JkZXIuaW5kZXhPZihzZWxmKTtcbiAgICAgIHZhciBvdGhlckluZGV4ID0gSW5saW5lLm9yZGVyLmluZGV4T2Yob3RoZXIpO1xuICAgICAgaWYgKHNlbGZJbmRleCA+PSAwIHx8IG90aGVySW5kZXggPj0gMCkge1xuICAgICAgICByZXR1cm4gc2VsZkluZGV4IC0gb3RoZXJJbmRleDtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZiA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9IGVsc2UgaWYgKHNlbGYgPCBvdGhlcikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSW5saW5lO1xufShfcGFyY2htZW50Mi5kZWZhdWx0LklubGluZSk7XG5cbklubGluZS5hbGxvd2VkQ2hpbGRyZW4gPSBbSW5saW5lLCBfcGFyY2htZW50Mi5kZWZhdWx0LkVtYmVkLCBfdGV4dDIuZGVmYXVsdF07XG4vLyBMb3dlciBpbmRleCBtZWFucyBkZWVwZXIgaW4gdGhlIERPTSB0cmVlLCBzaW5jZSBub3QgZm91bmQgKC0xKSBpcyBmb3IgZW1iZWRzXG5JbmxpbmUub3JkZXIgPSBbJ2N1cnNvcicsICdpbmxpbmUnLCAvLyBNdXN0IGJlIGxvd2VyXG4ndW5kZXJsaW5lJywgJ3N0cmlrZScsICdpdGFsaWMnLCAnYm9sZCcsICdzY3JpcHQnLCAnbGluaycsICdjb2RlJyAvLyBNdXN0IGJlIGhpZ2hlclxuXTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gSW5saW5lO1xuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBUZXh0QmxvdCA9IGZ1bmN0aW9uIChfUGFyY2htZW50JFRleHQpIHtcbiAgX2luaGVyaXRzKFRleHRCbG90LCBfUGFyY2htZW50JFRleHQpO1xuXG4gIGZ1bmN0aW9uIFRleHRCbG90KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXh0QmxvdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRleHRCbG90Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGV4dEJsb3QpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBUZXh0QmxvdDtcbn0oX3BhcmNobWVudDIuZGVmYXVsdC5UZXh0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gVGV4dEJsb3Q7XG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfZXZlbnRlbWl0dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NCk7XG5cbnZhciBfZXZlbnRlbWl0dGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V2ZW50ZW1pdHRlcik7XG5cbnZhciBfbG9nZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cbnZhciBfbG9nZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvZ2dlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGRlYnVnID0gKDAsIF9sb2dnZXIyLmRlZmF1bHQpKCdxdWlsbDpldmVudHMnKTtcblxudmFyIEVWRU5UUyA9IFsnc2VsZWN0aW9uY2hhbmdlJywgJ21vdXNlZG93bicsICdtb3VzZXVwJywgJ2NsaWNrJ107XG5cbkVWRU5UUy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5xbC1jb250YWluZXInKSkuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgLy8gVE9ETyB1c2UgV2Vha01hcFxuICAgICAgaWYgKG5vZGUuX19xdWlsbCAmJiBub2RlLl9fcXVpbGwuZW1pdHRlcikge1xuICAgICAgICB2YXIgX25vZGUkX19xdWlsbCRlbWl0dGVyO1xuXG4gICAgICAgIChfbm9kZSRfX3F1aWxsJGVtaXR0ZXIgPSBub2RlLl9fcXVpbGwuZW1pdHRlcikuaGFuZGxlRE9NLmFwcGx5KF9ub2RlJF9fcXVpbGwkZW1pdHRlciwgYXJncyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbnZhciBFbWl0dGVyID0gZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKEVtaXR0ZXIsIF9FdmVudEVtaXR0ZXIpO1xuXG4gIGZ1bmN0aW9uIEVtaXR0ZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVtaXR0ZXIpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEVtaXR0ZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihFbWl0dGVyKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5saXN0ZW5lcnMgPSB7fTtcbiAgICBfdGhpcy5vbignZXJyb3InLCBkZWJ1Zy5lcnJvcik7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEVtaXR0ZXIsIFt7XG4gICAga2V5OiAnZW1pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVtaXQoKSB7XG4gICAgICBkZWJ1Zy5sb2cuYXBwbHkoZGVidWcsIGFyZ3VtZW50cyk7XG4gICAgICBfZ2V0KEVtaXR0ZXIucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRW1pdHRlci5wcm90b3R5cGUpLCAnZW1pdCcsIHRoaXMpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFuZGxlRE9NJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRE9NKGV2ZW50KSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgICh0aGlzLmxpc3RlbmVyc1tldmVudC50eXBlXSB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgbm9kZSA9IF9yZWYubm9kZSxcbiAgICAgICAgICAgIGhhbmRsZXIgPSBfcmVmLmhhbmRsZXI7XG5cbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gbm9kZSB8fCBub2RlLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICBoYW5kbGVyLmFwcGx5KHVuZGVmaW5lZCwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdsaXN0ZW5ET00nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW5ET00oZXZlbnROYW1lLCBub2RlLCBoYW5kbGVyKSB7XG4gICAgICBpZiAoIXRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXSA9IFtdO1xuICAgICAgfVxuICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXS5wdXNoKHsgbm9kZTogbm9kZSwgaGFuZGxlcjogaGFuZGxlciB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRW1pdHRlcjtcbn0oX2V2ZW50ZW1pdHRlcjIuZGVmYXVsdCk7XG5cbkVtaXR0ZXIuZXZlbnRzID0ge1xuICBFRElUT1JfQ0hBTkdFOiAnZWRpdG9yLWNoYW5nZScsXG4gIFNDUk9MTF9CRUZPUkVfVVBEQVRFOiAnc2Nyb2xsLWJlZm9yZS11cGRhdGUnLFxuICBTQ1JPTExfT1BUSU1JWkU6ICdzY3JvbGwtb3B0aW1pemUnLFxuICBTQ1JPTExfVVBEQVRFOiAnc2Nyb2xsLXVwZGF0ZScsXG4gIFNFTEVDVElPTl9DSEFOR0U6ICdzZWxlY3Rpb24tY2hhbmdlJyxcbiAgVEVYVF9DSEFOR0U6ICd0ZXh0LWNoYW5nZSdcbn07XG5FbWl0dGVyLnNvdXJjZXMgPSB7XG4gIEFQSTogJ2FwaScsXG4gIFNJTEVOVDogJ3NpbGVudCcsXG4gIFVTRVI6ICd1c2VyJ1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRW1pdHRlcjtcblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBNb2R1bGUgPSBmdW5jdGlvbiBNb2R1bGUocXVpbGwpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb2R1bGUpO1xuXG4gIHRoaXMucXVpbGwgPSBxdWlsbDtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbn07XG5cbk1vZHVsZS5ERUZBVUxUUyA9IHt9O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBNb2R1bGU7XG5cbi8qKiovIH0pLFxuLyogMTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBsZXZlbHMgPSBbJ2Vycm9yJywgJ3dhcm4nLCAnbG9nJywgJ2luZm8nXTtcbnZhciBsZXZlbCA9ICd3YXJuJztcblxuZnVuY3Rpb24gZGVidWcobWV0aG9kKSB7XG4gIGlmIChsZXZlbHMuaW5kZXhPZihtZXRob2QpIDw9IGxldmVscy5pbmRleE9mKGxldmVsKSkge1xuICAgIHZhciBfY29uc29sZTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgKF9jb25zb2xlID0gY29uc29sZSlbbWV0aG9kXS5hcHBseShfY29uc29sZSwgYXJncyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICB9XG59XG5cbmZ1bmN0aW9uIG5hbWVzcGFjZShucykge1xuICByZXR1cm4gbGV2ZWxzLnJlZHVjZShmdW5jdGlvbiAobG9nZ2VyLCBtZXRob2QpIHtcbiAgICBsb2dnZXJbbWV0aG9kXSA9IGRlYnVnLmJpbmQoY29uc29sZSwgbWV0aG9kLCBucyk7XG4gICAgcmV0dXJuIGxvZ2dlcjtcbiAgfSwge30pO1xufVxuXG5kZWJ1Zy5sZXZlbCA9IG5hbWVzcGFjZS5sZXZlbCA9IGZ1bmN0aW9uIChuZXdMZXZlbCkge1xuICBsZXZlbCA9IG5ld0xldmVsO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbmFtZXNwYWNlO1xuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBwU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgb2JqZWN0S2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNTIpO1xudmFyIGlzQXJndW1lbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Myk7XG5cbnZhciBkZWVwRXF1YWwgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhY3R1YWwsIGV4cGVjdGVkLCBvcHRzKSB7XG4gIGlmICghb3B0cykgb3B0cyA9IHt9O1xuICAvLyA3LjEuIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB9IGVsc2UgaWYgKGFjdHVhbCBpbnN0YW5jZW9mIERhdGUgJiYgZXhwZWN0ZWQgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcblxuICAvLyA3LjMuIE90aGVyIHBhaXJzIHRoYXQgZG8gbm90IGJvdGggcGFzcyB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcsXG4gIC8vIGVxdWl2YWxlbmNlIGlzIGRldGVybWluZWQgYnkgPT0uXG4gIH0gZWxzZSBpZiAoIWFjdHVhbCB8fCAhZXhwZWN0ZWQgfHwgdHlwZW9mIGFjdHVhbCAhPSAnb2JqZWN0JyAmJiB0eXBlb2YgZXhwZWN0ZWQgIT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb3B0cy5zdHJpY3QgPyBhY3R1YWwgPT09IGV4cGVjdGVkIDogYWN0dWFsID09IGV4cGVjdGVkO1xuXG4gIC8vIDcuNC4gRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpc1xuICAvLyBkZXRlcm1pbmVkIGJ5IGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoYXMgdmVyaWZpZWRcbiAgLy8gd2l0aCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwpLCB0aGUgc2FtZSBzZXQgb2Yga2V5c1xuICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5XG4gIC8vIGNvcnJlc3BvbmRpbmcga2V5LCBhbmQgYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LiBOb3RlOiB0aGlzXG4gIC8vIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBvYmpFcXVpdihhY3R1YWwsIGV4cGVjdGVkLCBvcHRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZE9yTnVsbCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKHgpIHtcbiAgaWYgKCF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgeC5sZW5ndGggIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgeC5jb3B5ICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4LnNsaWNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh4Lmxlbmd0aCA+IDAgJiYgdHlwZW9mIHhbMF0gIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBvYmpFcXVpdihhLCBiLCBvcHRzKSB7XG4gIHZhciBpLCBrZXk7XG4gIGlmIChpc1VuZGVmaW5lZE9yTnVsbChhKSB8fCBpc1VuZGVmaW5lZE9yTnVsbChiKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS5cbiAgaWYgKGEucHJvdG90eXBlICE9PSBiLnByb3RvdHlwZSkgcmV0dXJuIGZhbHNlO1xuICAvL35+fkkndmUgbWFuYWdlZCB0byBicmVhayBPYmplY3Qua2V5cyB0aHJvdWdoIHNjcmV3eSBhcmd1bWVudHMgcGFzc2luZy5cbiAgLy8gICBDb252ZXJ0aW5nIHRvIGFycmF5IHNvbHZlcyB0aGUgcHJvYmxlbS5cbiAgaWYgKGlzQXJndW1lbnRzKGEpKSB7XG4gICAgaWYgKCFpc0FyZ3VtZW50cyhiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG4gICAgYiA9IHBTbGljZS5jYWxsKGIpO1xuICAgIHJldHVybiBkZWVwRXF1YWwoYSwgYiwgb3B0cyk7XG4gIH1cbiAgaWYgKGlzQnVmZmVyKGEpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHRyeSB7XG4gICAgdmFyIGthID0gb2JqZWN0S2V5cyhhKSxcbiAgICAgICAga2IgPSBvYmplY3RLZXlzKGIpO1xuICB9IGNhdGNoIChlKSB7Ly9oYXBwZW5zIHdoZW4gb25lIGlzIGEgc3RyaW5nIGxpdGVyYWwgYW5kIHRoZSBvdGhlciBpc24ndFxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGtleXMgaW5jb3Jwb3JhdGVzXG4gIC8vIGhhc093blByb3BlcnR5KVxuICBpZiAoa2EubGVuZ3RoICE9IGtiLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vdGhlIHNhbWUgc2V0IG9mIGtleXMgKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksXG4gIGthLnNvcnQoKTtcbiAga2Iuc29ydCgpO1xuICAvL35+fmNoZWFwIGtleSB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGthW2ldICE9IGtiW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmRcbiAgLy9+fn5wb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAga2V5ID0ga2FbaV07XG4gICAgaWYgKCFkZWVwRXF1YWwoYVtrZXldLCBiW2tleV0sIG9wdHMpKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHR5cGVvZiBhID09PSB0eXBlb2YgYjtcbn1cblxuXG4vKioqLyB9KSxcbi8qIDEyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIEF0dHJpYnV0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXR0cmlidXRvcihhdHRyTmFtZSwga2V5TmFtZSwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB0aGlzLmF0dHJOYW1lID0gYXR0ck5hbWU7XG4gICAgICAgIHRoaXMua2V5TmFtZSA9IGtleU5hbWU7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVCaXQgPSBSZWdpc3RyeS5TY29wZS5UWVBFICYgUmVnaXN0cnkuU2NvcGUuQVRUUklCVVRFO1xuICAgICAgICBpZiAob3B0aW9ucy5zY29wZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgdHlwZSBiaXRzLCBmb3JjZSBhdHRyaWJ1dGUgYml0XG4gICAgICAgICAgICB0aGlzLnNjb3BlID0gKG9wdGlvbnMuc2NvcGUgJiBSZWdpc3RyeS5TY29wZS5MRVZFTCkgfCBhdHRyaWJ1dGVCaXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNjb3BlID0gUmVnaXN0cnkuU2NvcGUuQVRUUklCVVRFO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLndoaXRlbGlzdCAhPSBudWxsKVxuICAgICAgICAgICAgdGhpcy53aGl0ZWxpc3QgPSBvcHRpb25zLndoaXRlbGlzdDtcbiAgICB9XG4gICAgQXR0cmlidXRvci5rZXlzID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIFtdLm1hcC5jYWxsKG5vZGUuYXR0cmlidXRlcywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtLm5hbWU7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQXR0cmlidXRvci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG5vZGUsIHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5jYW5BZGQobm9kZSwgdmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSh0aGlzLmtleU5hbWUsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBBdHRyaWJ1dG9yLnByb3RvdHlwZS5jYW5BZGQgPSBmdW5jdGlvbiAobm9kZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gUmVnaXN0cnkucXVlcnkobm9kZSwgUmVnaXN0cnkuU2NvcGUuQkxPVCAmICh0aGlzLnNjb3BlIHwgUmVnaXN0cnkuU2NvcGUuVFlQRSkpO1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMud2hpdGVsaXN0ID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndoaXRlbGlzdC5pbmRleE9mKHZhbHVlLnJlcGxhY2UoL1tcIiddL2csICcnKSkgPiAtMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndoaXRlbGlzdC5pbmRleE9mKHZhbHVlKSA+IC0xO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBdHRyaWJ1dG9yLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmtleU5hbWUpO1xuICAgIH07XG4gICAgQXR0cmlidXRvci5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZSh0aGlzLmtleU5hbWUpO1xuICAgICAgICBpZiAodGhpcy5jYW5BZGQobm9kZSwgdmFsdWUpICYmIHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH07XG4gICAgcmV0dXJuIEF0dHJpYnV0b3I7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQXR0cmlidXRvcjtcblxuXG4vKioqLyB9KSxcbi8qIDEzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLkNvZGUgPSB1bmRlZmluZWQ7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX3F1aWxsRGVsdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3F1aWxsRGVsdGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGxEZWx0YSk7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9ibG9jayA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfYmxvY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmxvY2spO1xuXG52YXIgX2lubGluZSA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5saW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lubGluZSk7XG5cbnZhciBfdGV4dCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfdGV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90ZXh0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQ29kZSA9IGZ1bmN0aW9uIChfSW5saW5lKSB7XG4gIF9pbmhlcml0cyhDb2RlLCBfSW5saW5lKTtcblxuICBmdW5jdGlvbiBDb2RlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2RlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ29kZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvZGUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBDb2RlO1xufShfaW5saW5lMi5kZWZhdWx0KTtcblxuQ29kZS5ibG90TmFtZSA9ICdjb2RlJztcbkNvZGUudGFnTmFtZSA9ICdDT0RFJztcblxudmFyIENvZGVCbG9jayA9IGZ1bmN0aW9uIChfQmxvY2spIHtcbiAgX2luaGVyaXRzKENvZGVCbG9jaywgX0Jsb2NrKTtcblxuICBmdW5jdGlvbiBDb2RlQmxvY2soKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvZGVCbG9jayk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENvZGVCbG9jay5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvZGVCbG9jaykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvZGVCbG9jaywgW3tcbiAgICBrZXk6ICdkZWx0YScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbHRhKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciB0ZXh0ID0gdGhpcy5kb21Ob2RlLnRleHRDb250ZW50O1xuICAgICAgaWYgKHRleHQuZW5kc1dpdGgoJ1xcbicpKSB7XG4gICAgICAgIC8vIFNob3VsZCBhbHdheXMgYmUgdHJ1ZVxuICAgICAgICB0ZXh0ID0gdGV4dC5zbGljZSgwLCAtMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGV4dC5zcGxpdCgnXFxuJykucmVkdWNlKGZ1bmN0aW9uIChkZWx0YSwgZnJhZykge1xuICAgICAgICByZXR1cm4gZGVsdGEuaW5zZXJ0KGZyYWcpLmluc2VydCgnXFxuJywgX3RoaXMzLmZvcm1hdHMoKSk7XG4gICAgICB9LCBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0KG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAobmFtZSA9PT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lICYmIHZhbHVlKSByZXR1cm47XG5cbiAgICAgIHZhciBfZGVzY2VuZGFudCA9IHRoaXMuZGVzY2VuZGFudChfdGV4dDIuZGVmYXVsdCwgdGhpcy5sZW5ndGgoKSAtIDEpLFxuICAgICAgICAgIF9kZXNjZW5kYW50MiA9IF9zbGljZWRUb0FycmF5KF9kZXNjZW5kYW50LCAxKSxcbiAgICAgICAgICB0ZXh0ID0gX2Rlc2NlbmRhbnQyWzBdO1xuXG4gICAgICBpZiAodGV4dCAhPSBudWxsKSB7XG4gICAgICAgIHRleHQuZGVsZXRlQXQodGV4dC5sZW5ndGgoKSAtIDEsIDEpO1xuICAgICAgfVxuICAgICAgX2dldChDb2RlQmxvY2sucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29kZUJsb2NrLnByb3RvdHlwZSksICdmb3JtYXQnLCB0aGlzKS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRBdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdEF0KGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICBpZiAoX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeShuYW1lLCBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLkJMT0NLKSA9PSBudWxsIHx8IG5hbWUgPT09IHRoaXMuc3RhdGljcy5ibG90TmFtZSAmJiB2YWx1ZSA9PT0gdGhpcy5zdGF0aWNzLmZvcm1hdHModGhpcy5kb21Ob2RlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV4dE5ld2xpbmUgPSB0aGlzLm5ld2xpbmVJbmRleChpbmRleCk7XG4gICAgICBpZiAobmV4dE5ld2xpbmUgPCAwIHx8IG5leHROZXdsaW5lID49IGluZGV4ICsgbGVuZ3RoKSByZXR1cm47XG4gICAgICB2YXIgcHJldk5ld2xpbmUgPSB0aGlzLm5ld2xpbmVJbmRleChpbmRleCwgdHJ1ZSkgKyAxO1xuICAgICAgdmFyIGlzb2xhdGVMZW5ndGggPSBuZXh0TmV3bGluZSAtIHByZXZOZXdsaW5lICsgMTtcbiAgICAgIHZhciBibG90ID0gdGhpcy5pc29sYXRlKHByZXZOZXdsaW5lLCBpc29sYXRlTGVuZ3RoKTtcbiAgICAgIHZhciBuZXh0ID0gYmxvdC5uZXh0O1xuICAgICAgYmxvdC5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgaWYgKG5leHQgaW5zdGFuY2VvZiBDb2RlQmxvY2spIHtcbiAgICAgICAgbmV4dC5mb3JtYXRBdCgwLCBpbmRleCAtIHByZXZOZXdsaW5lICsgbGVuZ3RoIC0gaXNvbGF0ZUxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2luc2VydEF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0QXQoaW5kZXgsIHZhbHVlLCBkZWYpIHtcbiAgICAgIGlmIChkZWYgIT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgICB2YXIgX2Rlc2NlbmRhbnQzID0gdGhpcy5kZXNjZW5kYW50KF90ZXh0Mi5kZWZhdWx0LCBpbmRleCksXG4gICAgICAgICAgX2Rlc2NlbmRhbnQ0ID0gX3NsaWNlZFRvQXJyYXkoX2Rlc2NlbmRhbnQzLCAyKSxcbiAgICAgICAgICB0ZXh0ID0gX2Rlc2NlbmRhbnQ0WzBdLFxuICAgICAgICAgIG9mZnNldCA9IF9kZXNjZW5kYW50NFsxXTtcblxuICAgICAgdGV4dC5pbnNlcnRBdChvZmZzZXQsIHZhbHVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdsZW5ndGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsZW5ndGgoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gdGhpcy5kb21Ob2RlLnRleHRDb250ZW50Lmxlbmd0aDtcbiAgICAgIGlmICghdGhpcy5kb21Ob2RlLnRleHRDb250ZW50LmVuZHNXaXRoKCdcXG4nKSkge1xuICAgICAgICByZXR1cm4gbGVuZ3RoICsgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbmV3bGluZUluZGV4JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmV3bGluZUluZGV4KHNlYXJjaEluZGV4KSB7XG4gICAgICB2YXIgcmV2ZXJzZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgICAgIGlmICghcmV2ZXJzZSkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5kb21Ob2RlLnRleHRDb250ZW50LnNsaWNlKHNlYXJjaEluZGV4KS5pbmRleE9mKCdcXG4nKTtcbiAgICAgICAgcmV0dXJuIG9mZnNldCA+IC0xID8gc2VhcmNoSW5kZXggKyBvZmZzZXQgOiAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvbU5vZGUudGV4dENvbnRlbnQuc2xpY2UoMCwgc2VhcmNoSW5kZXgpLmxhc3RJbmRleE9mKCdcXG4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvcHRpbWl6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9wdGltaXplKGNvbnRleHQpIHtcbiAgICAgIGlmICghdGhpcy5kb21Ob2RlLnRleHRDb250ZW50LmVuZHNXaXRoKCdcXG4nKSkge1xuICAgICAgICB0aGlzLmFwcGVuZENoaWxkKF9wYXJjaG1lbnQyLmRlZmF1bHQuY3JlYXRlKCd0ZXh0JywgJ1xcbicpKTtcbiAgICAgIH1cbiAgICAgIF9nZXQoQ29kZUJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvZGVCbG9jay5wcm90b3R5cGUpLCAnb3B0aW1pemUnLCB0aGlzKS5jYWxsKHRoaXMsIGNvbnRleHQpO1xuICAgICAgdmFyIG5leHQgPSB0aGlzLm5leHQ7XG4gICAgICBpZiAobmV4dCAhPSBudWxsICYmIG5leHQucHJldiA9PT0gdGhpcyAmJiBuZXh0LnN0YXRpY3MuYmxvdE5hbWUgPT09IHRoaXMuc3RhdGljcy5ibG90TmFtZSAmJiB0aGlzLnN0YXRpY3MuZm9ybWF0cyh0aGlzLmRvbU5vZGUpID09PSBuZXh0LnN0YXRpY3MuZm9ybWF0cyhuZXh0LmRvbU5vZGUpKSB7XG4gICAgICAgIG5leHQub3B0aW1pemUoY29udGV4dCk7XG4gICAgICAgIG5leHQubW92ZUNoaWxkcmVuKHRoaXMpO1xuICAgICAgICBuZXh0LnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlcGxhY2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXBsYWNlKHRhcmdldCkge1xuICAgICAgX2dldChDb2RlQmxvY2sucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29kZUJsb2NrLnByb3RvdHlwZSksICdyZXBsYWNlJywgdGhpcykuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgICAgW10uc2xpY2UuY2FsbCh0aGlzLmRvbU5vZGUucXVlcnlTZWxlY3RvckFsbCgnKicpKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciBibG90ID0gX3BhcmNobWVudDIuZGVmYXVsdC5maW5kKG5vZGUpO1xuICAgICAgICBpZiAoYmxvdCA9PSBudWxsKSB7XG4gICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgICB9IGVsc2UgaWYgKGJsb3QgaW5zdGFuY2VvZiBfcGFyY2htZW50Mi5kZWZhdWx0LkVtYmVkKSB7XG4gICAgICAgICAgYmxvdC5yZW1vdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBibG90LnVud3JhcCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ2NyZWF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgdmFyIGRvbU5vZGUgPSBfZ2V0KENvZGVCbG9jay5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvZGVCbG9jayksICdjcmVhdGUnLCB0aGlzKS5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgIGRvbU5vZGUuc2V0QXR0cmlidXRlKCdzcGVsbGNoZWNrJywgZmFsc2UpO1xuICAgICAgcmV0dXJuIGRvbU5vZGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdHMoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29kZUJsb2NrO1xufShfYmxvY2syLmRlZmF1bHQpO1xuXG5Db2RlQmxvY2suYmxvdE5hbWUgPSAnY29kZS1ibG9jayc7XG5Db2RlQmxvY2sudGFnTmFtZSA9ICdQUkUnO1xuQ29kZUJsb2NrLlRBQiA9ICcgICc7XG5cbmV4cG9ydHMuQ29kZSA9IENvZGU7XG5leHBvcnRzLmRlZmF1bHQgPSBDb2RlQmxvY2s7XG5cbi8qKiovIH0pLFxuLyogMTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcXVpbGxEZWx0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfcXVpbGxEZWx0YTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWlsbERlbHRhKTtcblxudmFyIF9vcCA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXG52YXIgX29wMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29wKTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX2NvZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblxudmFyIF9jb2RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvZGUpO1xuXG52YXIgX2N1cnNvciA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xuXG52YXIgX2N1cnNvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jdXJzb3IpO1xuXG52YXIgX2Jsb2NrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIF9ibG9jazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ibG9jayk7XG5cbnZhciBfYnJlYWsgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblxudmFyIF9icmVhazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9icmVhayk7XG5cbnZhciBfY2xvbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblxudmFyIF9jbG9uZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbG9uZSk7XG5cbnZhciBfZGVlcEVxdWFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cbnZhciBfZGVlcEVxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZXBFcXVhbCk7XG5cbnZhciBfZXh0ZW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9leHRlbmQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEFTQ0lJID0gL15bIC1+XSokLztcblxudmFyIEVkaXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRWRpdG9yKHNjcm9sbCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFZGl0b3IpO1xuXG4gICAgdGhpcy5zY3JvbGwgPSBzY3JvbGw7XG4gICAgdGhpcy5kZWx0YSA9IHRoaXMuZ2V0RGVsdGEoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhFZGl0b3IsIFt7XG4gICAga2V5OiAnYXBwbHlEZWx0YScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5RGVsdGEoZGVsdGEpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBjb25zdW1lTmV4dE5ld2xpbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2Nyb2xsLnVwZGF0ZSgpO1xuICAgICAgdmFyIHNjcm9sbExlbmd0aCA9IHRoaXMuc2Nyb2xsLmxlbmd0aCgpO1xuICAgICAgdGhpcy5zY3JvbGwuYmF0Y2hTdGFydCgpO1xuICAgICAgZGVsdGEgPSBub3JtYWxpemVEZWx0YShkZWx0YSk7XG4gICAgICBkZWx0YS5yZWR1Y2UoZnVuY3Rpb24gKGluZGV4LCBvcCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gb3AucmV0YWluIHx8IG9wLmRlbGV0ZSB8fCBvcC5pbnNlcnQubGVuZ3RoIHx8IDE7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gb3AuYXR0cmlidXRlcyB8fCB7fTtcbiAgICAgICAgaWYgKG9wLmluc2VydCAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvcC5pbnNlcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IG9wLmluc2VydDtcbiAgICAgICAgICAgIGlmICh0ZXh0LmVuZHNXaXRoKCdcXG4nKSAmJiBjb25zdW1lTmV4dE5ld2xpbmUpIHtcbiAgICAgICAgICAgICAgY29uc3VtZU5leHROZXdsaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDAsIC0xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbmRleCA+PSBzY3JvbGxMZW5ndGggJiYgIXRleHQuZW5kc1dpdGgoJ1xcbicpKSB7XG4gICAgICAgICAgICAgIGNvbnN1bWVOZXh0TmV3bGluZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5zY3JvbGwuaW5zZXJ0QXQoaW5kZXgsIHRleHQpO1xuXG4gICAgICAgICAgICB2YXIgX3Njcm9sbCRsaW5lID0gX3RoaXMuc2Nyb2xsLmxpbmUoaW5kZXgpLFxuICAgICAgICAgICAgICAgIF9zY3JvbGwkbGluZTIgPSBfc2xpY2VkVG9BcnJheShfc2Nyb2xsJGxpbmUsIDIpLFxuICAgICAgICAgICAgICAgIGxpbmUgPSBfc2Nyb2xsJGxpbmUyWzBdLFxuICAgICAgICAgICAgICAgIG9mZnNldCA9IF9zY3JvbGwkbGluZTJbMV07XG5cbiAgICAgICAgICAgIHZhciBmb3JtYXRzID0gKDAsIF9leHRlbmQyLmRlZmF1bHQpKHt9LCAoMCwgX2Jsb2NrLmJ1YmJsZUZvcm1hdHMpKGxpbmUpKTtcbiAgICAgICAgICAgIGlmIChsaW5lIGluc3RhbmNlb2YgX2Jsb2NrMi5kZWZhdWx0KSB7XG4gICAgICAgICAgICAgIHZhciBfbGluZSRkZXNjZW5kYW50ID0gbGluZS5kZXNjZW5kYW50KF9wYXJjaG1lbnQyLmRlZmF1bHQuTGVhZiwgb2Zmc2V0KSxcbiAgICAgICAgICAgICAgICAgIF9saW5lJGRlc2NlbmRhbnQyID0gX3NsaWNlZFRvQXJyYXkoX2xpbmUkZGVzY2VuZGFudCwgMSksXG4gICAgICAgICAgICAgICAgICBsZWFmID0gX2xpbmUkZGVzY2VuZGFudDJbMF07XG5cbiAgICAgICAgICAgICAgZm9ybWF0cyA9ICgwLCBfZXh0ZW5kMi5kZWZhdWx0KShmb3JtYXRzLCAoMCwgX2Jsb2NrLmJ1YmJsZUZvcm1hdHMpKGxlYWYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF0dHJpYnV0ZXMgPSBfb3AyLmRlZmF1bHQuYXR0cmlidXRlcy5kaWZmKGZvcm1hdHMsIGF0dHJpYnV0ZXMpIHx8IHt9O1xuICAgICAgICAgIH0gZWxzZSBpZiAoX3R5cGVvZihvcC5pbnNlcnQpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdmFyIGtleSA9IE9iamVjdC5rZXlzKG9wLmluc2VydClbMF07IC8vIFRoZXJlIHNob3VsZCBvbmx5IGJlIG9uZSBrZXlcbiAgICAgICAgICAgIGlmIChrZXkgPT0gbnVsbCkgcmV0dXJuIGluZGV4O1xuICAgICAgICAgICAgX3RoaXMuc2Nyb2xsLmluc2VydEF0KGluZGV4LCBrZXksIG9wLmluc2VydFtrZXldKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2Nyb2xsTGVuZ3RoICs9IGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgX3RoaXMuc2Nyb2xsLmZvcm1hdEF0KGluZGV4LCBsZW5ndGgsIG5hbWUsIGF0dHJpYnV0ZXNbbmFtZV0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ICsgbGVuZ3RoO1xuICAgICAgfSwgMCk7XG4gICAgICBkZWx0YS5yZWR1Y2UoZnVuY3Rpb24gKGluZGV4LCBvcCkge1xuICAgICAgICBpZiAodHlwZW9mIG9wLmRlbGV0ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBfdGhpcy5zY3JvbGwuZGVsZXRlQXQoaW5kZXgsIG9wLmRlbGV0ZSk7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmRleCArIChvcC5yZXRhaW4gfHwgb3AuaW5zZXJ0Lmxlbmd0aCB8fCAxKTtcbiAgICAgIH0sIDApO1xuICAgICAgdGhpcy5zY3JvbGwuYmF0Y2hFbmQoKTtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZShkZWx0YSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlVGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVRleHQoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgdGhpcy5zY3JvbGwuZGVsZXRlQXQoaW5kZXgsIGxlbmd0aCk7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGUobmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkucmV0YWluKGluZGV4KS5kZWxldGUobGVuZ3RoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0TGluZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdExpbmUoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBmb3JtYXRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICAgICAgdGhpcy5zY3JvbGwudXBkYXRlKCk7XG4gICAgICBPYmplY3Qua2V5cyhmb3JtYXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgaWYgKF90aGlzMi5zY3JvbGwud2hpdGVsaXN0ICE9IG51bGwgJiYgIV90aGlzMi5zY3JvbGwud2hpdGVsaXN0W2Zvcm1hdF0pIHJldHVybjtcbiAgICAgICAgdmFyIGxpbmVzID0gX3RoaXMyLnNjcm9sbC5saW5lcyhpbmRleCwgTWF0aC5tYXgobGVuZ3RoLCAxKSk7XG4gICAgICAgIHZhciBsZW5ndGhSZW1haW5pbmcgPSBsZW5ndGg7XG4gICAgICAgIGxpbmVzLmZvckVhY2goZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgICB2YXIgbGluZUxlbmd0aCA9IGxpbmUubGVuZ3RoKCk7XG4gICAgICAgICAgaWYgKCEobGluZSBpbnN0YW5jZW9mIF9jb2RlMi5kZWZhdWx0KSkge1xuICAgICAgICAgICAgbGluZS5mb3JtYXQoZm9ybWF0LCBmb3JtYXRzW2Zvcm1hdF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgY29kZUluZGV4ID0gaW5kZXggLSBsaW5lLm9mZnNldChfdGhpczIuc2Nyb2xsKTtcbiAgICAgICAgICAgIHZhciBjb2RlTGVuZ3RoID0gbGluZS5uZXdsaW5lSW5kZXgoY29kZUluZGV4ICsgbGVuZ3RoUmVtYWluaW5nKSAtIGNvZGVJbmRleCArIDE7XG4gICAgICAgICAgICBsaW5lLmZvcm1hdEF0KGNvZGVJbmRleCwgY29kZUxlbmd0aCwgZm9ybWF0LCBmb3JtYXRzW2Zvcm1hdF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGhSZW1haW5pbmcgLT0gbGluZUxlbmd0aDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc2Nyb2xsLm9wdGltaXplKCk7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGUobmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkucmV0YWluKGluZGV4KS5yZXRhaW4obGVuZ3RoLCAoMCwgX2Nsb25lMi5kZWZhdWx0KShmb3JtYXRzKSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdFRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRUZXh0KGluZGV4LCBsZW5ndGgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgZm9ybWF0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgICAgIE9iamVjdC5rZXlzKGZvcm1hdHMpLmZvckVhY2goZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICBfdGhpczMuc2Nyb2xsLmZvcm1hdEF0KGluZGV4LCBsZW5ndGgsIGZvcm1hdCwgZm9ybWF0c1tmb3JtYXRdKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihpbmRleCkucmV0YWluKGxlbmd0aCwgKDAsIF9jbG9uZTIuZGVmYXVsdCkoZm9ybWF0cykpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRDb250ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbnRlbnRzKGluZGV4LCBsZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbHRhLnNsaWNlKGluZGV4LCBpbmRleCArIGxlbmd0aCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RGVsdGEnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZWx0YSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNjcm9sbC5saW5lcygpLnJlZHVjZShmdW5jdGlvbiAoZGVsdGEsIGxpbmUpIHtcbiAgICAgICAgcmV0dXJuIGRlbHRhLmNvbmNhdChsaW5lLmRlbHRhKCkpO1xuICAgICAgfSwgbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEZvcm1hdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZvcm1hdChpbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuICAgICAgdmFyIGxpbmVzID0gW10sXG4gICAgICAgICAgbGVhdmVzID0gW107XG4gICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsLnBhdGgoaW5kZXgpLmZvckVhY2goZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgICB2YXIgX3BhdGggPSBfc2xpY2VkVG9BcnJheShwYXRoLCAxKSxcbiAgICAgICAgICAgICAgYmxvdCA9IF9wYXRoWzBdO1xuXG4gICAgICAgICAgaWYgKGJsb3QgaW5zdGFuY2VvZiBfYmxvY2syLmRlZmF1bHQpIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goYmxvdCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChibG90IGluc3RhbmNlb2YgX3BhcmNobWVudDIuZGVmYXVsdC5MZWFmKSB7XG4gICAgICAgICAgICBsZWF2ZXMucHVzaChibG90KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGluZXMgPSB0aGlzLnNjcm9sbC5saW5lcyhpbmRleCwgbGVuZ3RoKTtcbiAgICAgICAgbGVhdmVzID0gdGhpcy5zY3JvbGwuZGVzY2VuZGFudHMoX3BhcmNobWVudDIuZGVmYXVsdC5MZWFmLCBpbmRleCwgbGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHZhciBmb3JtYXRzQXJyID0gW2xpbmVzLCBsZWF2ZXNdLm1hcChmdW5jdGlvbiAoYmxvdHMpIHtcbiAgICAgICAgaWYgKGJsb3RzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHt9O1xuICAgICAgICB2YXIgZm9ybWF0cyA9ICgwLCBfYmxvY2suYnViYmxlRm9ybWF0cykoYmxvdHMuc2hpZnQoKSk7XG4gICAgICAgIHdoaWxlIChPYmplY3Qua2V5cyhmb3JtYXRzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIGJsb3QgPSBibG90cy5zaGlmdCgpO1xuICAgICAgICAgIGlmIChibG90ID09IG51bGwpIHJldHVybiBmb3JtYXRzO1xuICAgICAgICAgIGZvcm1hdHMgPSBjb21iaW5lRm9ybWF0cygoMCwgX2Jsb2NrLmJ1YmJsZUZvcm1hdHMpKGJsb3QpLCBmb3JtYXRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0cztcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIF9leHRlbmQyLmRlZmF1bHQuYXBwbHkoX2V4dGVuZDIuZGVmYXVsdCwgZm9ybWF0c0Fycik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0VGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRleHQoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29udGVudHMoaW5kZXgsIGxlbmd0aCkuZmlsdGVyKGZ1bmN0aW9uIChvcCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9wLmluc2VydCA9PT0gJ3N0cmluZyc7XG4gICAgICB9KS5tYXAoZnVuY3Rpb24gKG9wKSB7XG4gICAgICAgIHJldHVybiBvcC5pbnNlcnQ7XG4gICAgICB9KS5qb2luKCcnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRFbWJlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydEVtYmVkKGluZGV4LCBlbWJlZCwgdmFsdWUpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLmluc2VydEF0KGluZGV4LCBlbWJlZCwgdmFsdWUpO1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihpbmRleCkuaW5zZXJ0KF9kZWZpbmVQcm9wZXJ0eSh7fSwgZW1iZWQsIHZhbHVlKSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2luc2VydFRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRUZXh0KGluZGV4LCB0ZXh0KSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIGZvcm1hdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHJcXG4vZywgJ1xcbicpLnJlcGxhY2UoL1xcci9nLCAnXFxuJyk7XG4gICAgICB0aGlzLnNjcm9sbC5pbnNlcnRBdChpbmRleCwgdGV4dCk7XG4gICAgICBPYmplY3Qua2V5cyhmb3JtYXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgX3RoaXM0LnNjcm9sbC5mb3JtYXRBdChpbmRleCwgdGV4dC5sZW5ndGgsIGZvcm1hdCwgZm9ybWF0c1tmb3JtYXRdKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihpbmRleCkuaW5zZXJ0KHRleHQsICgwLCBfY2xvbmUyLmRlZmF1bHQpKGZvcm1hdHMpKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaXNCbGFuaycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzQmxhbmsoKSB7XG4gICAgICBpZiAodGhpcy5zY3JvbGwuY2hpbGRyZW4ubGVuZ3RoID09IDApIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHRoaXMuc2Nyb2xsLmNoaWxkcmVuLmxlbmd0aCA+IDEpIHJldHVybiBmYWxzZTtcbiAgICAgIHZhciBibG9jayA9IHRoaXMuc2Nyb2xsLmNoaWxkcmVuLmhlYWQ7XG4gICAgICBpZiAoYmxvY2suc3RhdGljcy5ibG90TmFtZSAhPT0gX2Jsb2NrMi5kZWZhdWx0LmJsb3ROYW1lKSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoYmxvY2suY2hpbGRyZW4ubGVuZ3RoID4gMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIGJsb2NrLmNoaWxkcmVuLmhlYWQgaW5zdGFuY2VvZiBfYnJlYWsyLmRlZmF1bHQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlRm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlRm9ybWF0KGluZGV4LCBsZW5ndGgpIHtcbiAgICAgIHZhciB0ZXh0ID0gdGhpcy5nZXRUZXh0KGluZGV4LCBsZW5ndGgpO1xuXG4gICAgICB2YXIgX3Njcm9sbCRsaW5lMyA9IHRoaXMuc2Nyb2xsLmxpbmUoaW5kZXggKyBsZW5ndGgpLFxuICAgICAgICAgIF9zY3JvbGwkbGluZTQgPSBfc2xpY2VkVG9BcnJheShfc2Nyb2xsJGxpbmUzLCAyKSxcbiAgICAgICAgICBsaW5lID0gX3Njcm9sbCRsaW5lNFswXSxcbiAgICAgICAgICBvZmZzZXQgPSBfc2Nyb2xsJGxpbmU0WzFdO1xuXG4gICAgICB2YXIgc3VmZml4TGVuZ3RoID0gMCxcbiAgICAgICAgICBzdWZmaXggPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKTtcbiAgICAgIGlmIChsaW5lICE9IG51bGwpIHtcbiAgICAgICAgaWYgKCEobGluZSBpbnN0YW5jZW9mIF9jb2RlMi5kZWZhdWx0KSkge1xuICAgICAgICAgIHN1ZmZpeExlbmd0aCA9IGxpbmUubGVuZ3RoKCkgLSBvZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3VmZml4TGVuZ3RoID0gbGluZS5uZXdsaW5lSW5kZXgob2Zmc2V0KSAtIG9mZnNldCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgc3VmZml4ID0gbGluZS5kZWx0YSgpLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgc3VmZml4TGVuZ3RoIC0gMSkuaW5zZXJ0KCdcXG4nKTtcbiAgICAgIH1cbiAgICAgIHZhciBjb250ZW50cyA9IHRoaXMuZ2V0Q29udGVudHMoaW5kZXgsIGxlbmd0aCArIHN1ZmZpeExlbmd0aCk7XG4gICAgICB2YXIgZGlmZiA9IGNvbnRlbnRzLmRpZmYobmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkuaW5zZXJ0KHRleHQpLmNvbmNhdChzdWZmaXgpKTtcbiAgICAgIHZhciBkZWx0YSA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihpbmRleCkuY29uY2F0KGRpZmYpO1xuICAgICAgcmV0dXJuIHRoaXMuYXBwbHlEZWx0YShkZWx0YSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKGNoYW5nZSkge1xuICAgICAgdmFyIG11dGF0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XG4gICAgICB2YXIgY3Vyc29ySW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIG9sZERlbHRhID0gdGhpcy5kZWx0YTtcbiAgICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoID09PSAxICYmIG11dGF0aW9uc1swXS50eXBlID09PSAnY2hhcmFjdGVyRGF0YScgJiYgbXV0YXRpb25zWzBdLnRhcmdldC5kYXRhLm1hdGNoKEFTQ0lJKSAmJiBfcGFyY2htZW50Mi5kZWZhdWx0LmZpbmQobXV0YXRpb25zWzBdLnRhcmdldCkpIHtcbiAgICAgICAgLy8gT3B0aW1pemF0aW9uIGZvciBjaGFyYWN0ZXIgY2hhbmdlc1xuICAgICAgICB2YXIgdGV4dEJsb3QgPSBfcGFyY2htZW50Mi5kZWZhdWx0LmZpbmQobXV0YXRpb25zWzBdLnRhcmdldCk7XG4gICAgICAgIHZhciBmb3JtYXRzID0gKDAsIF9ibG9jay5idWJibGVGb3JtYXRzKSh0ZXh0QmxvdCk7XG4gICAgICAgIHZhciBpbmRleCA9IHRleHRCbG90Lm9mZnNldCh0aGlzLnNjcm9sbCk7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IG11dGF0aW9uc1swXS5vbGRWYWx1ZS5yZXBsYWNlKF9jdXJzb3IyLmRlZmF1bHQuQ09OVEVOVFMsICcnKTtcbiAgICAgICAgdmFyIG9sZFRleHQgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5pbnNlcnQob2xkVmFsdWUpO1xuICAgICAgICB2YXIgbmV3VGV4dCA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLmluc2VydCh0ZXh0QmxvdC52YWx1ZSgpKTtcbiAgICAgICAgdmFyIGRpZmZEZWx0YSA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihpbmRleCkuY29uY2F0KG9sZFRleHQuZGlmZihuZXdUZXh0LCBjdXJzb3JJbmRleCkpO1xuICAgICAgICBjaGFuZ2UgPSBkaWZmRGVsdGEucmVkdWNlKGZ1bmN0aW9uIChkZWx0YSwgb3ApIHtcbiAgICAgICAgICBpZiAob3AuaW5zZXJ0KSB7XG4gICAgICAgICAgICByZXR1cm4gZGVsdGEuaW5zZXJ0KG9wLmluc2VydCwgZm9ybWF0cyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkZWx0YS5wdXNoKG9wKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpKTtcbiAgICAgICAgdGhpcy5kZWx0YSA9IG9sZERlbHRhLmNvbXBvc2UoY2hhbmdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGVsdGEgPSB0aGlzLmdldERlbHRhKCk7XG4gICAgICAgIGlmICghY2hhbmdlIHx8ICEoMCwgX2RlZXBFcXVhbDIuZGVmYXVsdCkob2xkRGVsdGEuY29tcG9zZShjaGFuZ2UpLCB0aGlzLmRlbHRhKSkge1xuICAgICAgICAgIGNoYW5nZSA9IG9sZERlbHRhLmRpZmYodGhpcy5kZWx0YSwgY3Vyc29ySW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gY2hhbmdlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFZGl0b3I7XG59KCk7XG5cbmZ1bmN0aW9uIGNvbWJpbmVGb3JtYXRzKGZvcm1hdHMsIGNvbWJpbmVkKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhjb21iaW5lZCkucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQsIG5hbWUpIHtcbiAgICBpZiAoZm9ybWF0c1tuYW1lXSA9PSBudWxsKSByZXR1cm4gbWVyZ2VkO1xuICAgIGlmIChjb21iaW5lZFtuYW1lXSA9PT0gZm9ybWF0c1tuYW1lXSkge1xuICAgICAgbWVyZ2VkW25hbWVdID0gY29tYmluZWRbbmFtZV07XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNvbWJpbmVkW25hbWVdKSkge1xuICAgICAgaWYgKGNvbWJpbmVkW25hbWVdLmluZGV4T2YoZm9ybWF0c1tuYW1lXSkgPCAwKSB7XG4gICAgICAgIG1lcmdlZFtuYW1lXSA9IGNvbWJpbmVkW25hbWVdLmNvbmNhdChbZm9ybWF0c1tuYW1lXV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtZXJnZWRbbmFtZV0gPSBbY29tYmluZWRbbmFtZV0sIGZvcm1hdHNbbmFtZV1dO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZURlbHRhKGRlbHRhKSB7XG4gIHJldHVybiBkZWx0YS5yZWR1Y2UoZnVuY3Rpb24gKGRlbHRhLCBvcCkge1xuICAgIGlmIChvcC5pbnNlcnQgPT09IDEpIHtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gKDAsIF9jbG9uZTIuZGVmYXVsdCkob3AuYXR0cmlidXRlcyk7XG4gICAgICBkZWxldGUgYXR0cmlidXRlc1snaW1hZ2UnXTtcbiAgICAgIHJldHVybiBkZWx0YS5pbnNlcnQoeyBpbWFnZTogb3AuYXR0cmlidXRlcy5pbWFnZSB9LCBhdHRyaWJ1dGVzKTtcbiAgICB9XG4gICAgaWYgKG9wLmF0dHJpYnV0ZXMgIT0gbnVsbCAmJiAob3AuYXR0cmlidXRlcy5saXN0ID09PSB0cnVlIHx8IG9wLmF0dHJpYnV0ZXMuYnVsbGV0ID09PSB0cnVlKSkge1xuICAgICAgb3AgPSAoMCwgX2Nsb25lMi5kZWZhdWx0KShvcCk7XG4gICAgICBpZiAob3AuYXR0cmlidXRlcy5saXN0KSB7XG4gICAgICAgIG9wLmF0dHJpYnV0ZXMubGlzdCA9ICdvcmRlcmVkJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wLmF0dHJpYnV0ZXMubGlzdCA9ICdidWxsZXQnO1xuICAgICAgICBkZWxldGUgb3AuYXR0cmlidXRlcy5idWxsZXQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3AuaW5zZXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHRleHQgPSBvcC5pbnNlcnQucmVwbGFjZSgvXFxyXFxuL2csICdcXG4nKS5yZXBsYWNlKC9cXHIvZywgJ1xcbicpO1xuICAgICAgcmV0dXJuIGRlbHRhLmluc2VydCh0ZXh0LCBvcC5hdHRyaWJ1dGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlbHRhLnB1c2gob3ApO1xuICB9LCBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKSk7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEVkaXRvcjtcblxuLyoqKi8gfSksXG4vKiAxNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5SYW5nZSA9IHVuZGVmaW5lZDtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbnZhciBfY2xvbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblxudmFyIF9jbG9uZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbG9uZSk7XG5cbnZhciBfZGVlcEVxdWFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cbnZhciBfZGVlcEVxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZXBFcXVhbCk7XG5cbnZhciBfZW1pdHRlcjMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX2VtaXR0ZXI0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZW1pdHRlcjMpO1xuXG52YXIgX2xvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG52YXIgX2xvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dnZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIGRlYnVnID0gKDAsIF9sb2dnZXIyLmRlZmF1bHQpKCdxdWlsbDpzZWxlY3Rpb24nKTtcblxudmFyIFJhbmdlID0gZnVuY3Rpb24gUmFuZ2UoaW5kZXgpIHtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmFuZ2UpO1xuXG4gIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG59O1xuXG52YXIgU2VsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTZWxlY3Rpb24oc2Nyb2xsLCBlbWl0dGVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWxlY3Rpb24pO1xuXG4gICAgdGhpcy5lbWl0dGVyID0gZW1pdHRlcjtcbiAgICB0aGlzLnNjcm9sbCA9IHNjcm9sbDtcbiAgICB0aGlzLmNvbXBvc2luZyA9IGZhbHNlO1xuICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XG4gICAgdGhpcy5yb290ID0gdGhpcy5zY3JvbGwuZG9tTm9kZTtcbiAgICB0aGlzLmN1cnNvciA9IF9wYXJjaG1lbnQyLmRlZmF1bHQuY3JlYXRlKCdjdXJzb3InLCB0aGlzKTtcbiAgICAvLyBzYXZlZFJhbmdlIGlzIGxhc3Qgbm9uLW51bGwgcmFuZ2VcbiAgICB0aGlzLmxhc3RSYW5nZSA9IHRoaXMuc2F2ZWRSYW5nZSA9IG5ldyBSYW5nZSgwLCAwKTtcbiAgICB0aGlzLmhhbmRsZUNvbXBvc2l0aW9uKCk7XG4gICAgdGhpcy5oYW5kbGVEcmFnZ2luZygpO1xuICAgIHRoaXMuZW1pdHRlci5saXN0ZW5ET00oJ3NlbGVjdGlvbmNoYW5nZScsIGRvY3VtZW50LCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLm1vdXNlRG93bikge1xuICAgICAgICBzZXRUaW1lb3V0KF90aGlzLnVwZGF0ZS5iaW5kKF90aGlzLCBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLlVTRVIpLCAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmVtaXR0ZXIub24oX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzLkVESVRPUl9DSEFOR0UsIGZ1bmN0aW9uICh0eXBlLCBkZWx0YSkge1xuICAgICAgaWYgKHR5cGUgPT09IF9lbWl0dGVyNC5kZWZhdWx0LmV2ZW50cy5URVhUX0NIQU5HRSAmJiBkZWx0YS5sZW5ndGgoKSA+IDApIHtcbiAgICAgICAgX3RoaXMudXBkYXRlKF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmVtaXR0ZXIub24oX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9CRUZPUkVfVVBEQVRFLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLmhhc0ZvY3VzKCkpIHJldHVybjtcbiAgICAgIHZhciBuYXRpdmUgPSBfdGhpcy5nZXROYXRpdmVSYW5nZSgpO1xuICAgICAgaWYgKG5hdGl2ZSA9PSBudWxsKSByZXR1cm47XG4gICAgICBpZiAobmF0aXZlLnN0YXJ0Lm5vZGUgPT09IF90aGlzLmN1cnNvci50ZXh0Tm9kZSkgcmV0dXJuOyAvLyBjdXJzb3IucmVzdG9yZSgpIHdpbGwgaGFuZGxlXG4gICAgICAvLyBUT0RPIHVuY2xlYXIgaWYgdGhpcyBoYXMgbmVnYXRpdmUgc2lkZSBlZmZlY3RzXG4gICAgICBfdGhpcy5lbWl0dGVyLm9uY2UoX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9VUERBVEUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBfdGhpcy5zZXROYXRpdmVSYW5nZShuYXRpdmUuc3RhcnQubm9kZSwgbmF0aXZlLnN0YXJ0Lm9mZnNldCwgbmF0aXZlLmVuZC5ub2RlLCBuYXRpdmUuZW5kLm9mZnNldCk7XG4gICAgICAgIH0gY2F0Y2ggKGlnbm9yZWQpIHt9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLmVtaXR0ZXIub24oX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9PUFRJTUlaRSwgZnVuY3Rpb24gKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgaWYgKGNvbnRleHQucmFuZ2UpIHtcbiAgICAgICAgdmFyIF9jb250ZXh0JHJhbmdlID0gY29udGV4dC5yYW5nZSxcbiAgICAgICAgICAgIHN0YXJ0Tm9kZSA9IF9jb250ZXh0JHJhbmdlLnN0YXJ0Tm9kZSxcbiAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ID0gX2NvbnRleHQkcmFuZ2Uuc3RhcnRPZmZzZXQsXG4gICAgICAgICAgICBlbmROb2RlID0gX2NvbnRleHQkcmFuZ2UuZW5kTm9kZSxcbiAgICAgICAgICAgIGVuZE9mZnNldCA9IF9jb250ZXh0JHJhbmdlLmVuZE9mZnNldDtcblxuICAgICAgICBfdGhpcy5zZXROYXRpdmVSYW5nZShzdGFydE5vZGUsIHN0YXJ0T2Zmc2V0LCBlbmROb2RlLCBlbmRPZmZzZXQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMudXBkYXRlKF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTZWxlY3Rpb24sIFt7XG4gICAga2V5OiAnaGFuZGxlQ29tcG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDb21wb3NpdGlvbigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLmNvbXBvc2luZyA9IHRydWU7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucm9vdC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLmNvbXBvc2luZyA9IGZhbHNlO1xuICAgICAgICBpZiAoX3RoaXMyLmN1cnNvci5wYXJlbnQpIHtcbiAgICAgICAgICB2YXIgcmFuZ2UgPSBfdGhpczIuY3Vyc29yLnJlc3RvcmUoKTtcbiAgICAgICAgICBpZiAoIXJhbmdlKSByZXR1cm47XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczIuc2V0TmF0aXZlUmFuZ2UocmFuZ2Uuc3RhcnROb2RlLCByYW5nZS5zdGFydE9mZnNldCwgcmFuZ2UuZW5kTm9kZSwgcmFuZ2UuZW5kT2Zmc2V0KTtcbiAgICAgICAgICB9LCAxKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFuZGxlRHJhZ2dpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVEcmFnZ2luZygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB0aGlzLmVtaXR0ZXIubGlzdGVuRE9NKCdtb3VzZWRvd24nLCBkb2N1bWVudC5ib2R5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5tb3VzZURvd24gPSB0cnVlO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmVtaXR0ZXIubGlzdGVuRE9NKCdtb3VzZXVwJywgZG9jdW1lbnQuYm9keSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMubW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgIF90aGlzMy51cGRhdGUoX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2ZvY3VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICBpZiAodGhpcy5oYXNGb2N1cygpKSByZXR1cm47XG4gICAgICB0aGlzLnJvb3QuZm9jdXMoKTtcbiAgICAgIHRoaXMuc2V0UmFuZ2UodGhpcy5zYXZlZFJhbmdlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXQoX2Zvcm1hdCwgdmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLnNjcm9sbC53aGl0ZWxpc3QgIT0gbnVsbCAmJiAhdGhpcy5zY3JvbGwud2hpdGVsaXN0W19mb3JtYXRdKSByZXR1cm47XG4gICAgICB0aGlzLnNjcm9sbC51cGRhdGUoKTtcbiAgICAgIHZhciBuYXRpdmVSYW5nZSA9IHRoaXMuZ2V0TmF0aXZlUmFuZ2UoKTtcbiAgICAgIGlmIChuYXRpdmVSYW5nZSA9PSBudWxsIHx8ICFuYXRpdmVSYW5nZS5uYXRpdmUuY29sbGFwc2VkIHx8IF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkoX2Zvcm1hdCwgX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5CTE9DSykpIHJldHVybjtcbiAgICAgIGlmIChuYXRpdmVSYW5nZS5zdGFydC5ub2RlICE9PSB0aGlzLmN1cnNvci50ZXh0Tm9kZSkge1xuICAgICAgICB2YXIgYmxvdCA9IF9wYXJjaG1lbnQyLmRlZmF1bHQuZmluZChuYXRpdmVSYW5nZS5zdGFydC5ub2RlLCBmYWxzZSk7XG4gICAgICAgIGlmIChibG90ID09IG51bGwpIHJldHVybjtcbiAgICAgICAgLy8gVE9ETyBHaXZlIGJsb3QgYWJpbGl0eSB0byBub3Qgc3BsaXRcbiAgICAgICAgaWYgKGJsb3QgaW5zdGFuY2VvZiBfcGFyY2htZW50Mi5kZWZhdWx0LkxlYWYpIHtcbiAgICAgICAgICB2YXIgYWZ0ZXIgPSBibG90LnNwbGl0KG5hdGl2ZVJhbmdlLnN0YXJ0Lm9mZnNldCk7XG4gICAgICAgICAgYmxvdC5wYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMuY3Vyc29yLCBhZnRlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmxvdC5pbnNlcnRCZWZvcmUodGhpcy5jdXJzb3IsIG5hdGl2ZVJhbmdlLnN0YXJ0Lm5vZGUpOyAvLyBTaG91bGQgbmV2ZXIgaGFwcGVuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJzb3IuYXR0YWNoKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmN1cnNvci5mb3JtYXQoX2Zvcm1hdCwgdmFsdWUpO1xuICAgICAgdGhpcy5zY3JvbGwub3B0aW1pemUoKTtcbiAgICAgIHRoaXMuc2V0TmF0aXZlUmFuZ2UodGhpcy5jdXJzb3IudGV4dE5vZGUsIHRoaXMuY3Vyc29yLnRleHROb2RlLmRhdGEubGVuZ3RoKTtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0Qm91bmRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Qm91bmRzKGluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXG4gICAgICB2YXIgc2Nyb2xsTGVuZ3RoID0gdGhpcy5zY3JvbGwubGVuZ3RoKCk7XG4gICAgICBpbmRleCA9IE1hdGgubWluKGluZGV4LCBzY3JvbGxMZW5ndGggLSAxKTtcbiAgICAgIGxlbmd0aCA9IE1hdGgubWluKGluZGV4ICsgbGVuZ3RoLCBzY3JvbGxMZW5ndGggLSAxKSAtIGluZGV4O1xuICAgICAgdmFyIG5vZGUgPSB2b2lkIDAsXG4gICAgICAgICAgX3Njcm9sbCRsZWFmID0gdGhpcy5zY3JvbGwubGVhZihpbmRleCksXG4gICAgICAgICAgX3Njcm9sbCRsZWFmMiA9IF9zbGljZWRUb0FycmF5KF9zY3JvbGwkbGVhZiwgMiksXG4gICAgICAgICAgbGVhZiA9IF9zY3JvbGwkbGVhZjJbMF0sXG4gICAgICAgICAgb2Zmc2V0ID0gX3Njcm9sbCRsZWFmMlsxXTtcbiAgICAgIGlmIChsZWFmID09IG51bGwpIHJldHVybiBudWxsO1xuXG4gICAgICB2YXIgX2xlYWYkcG9zaXRpb24gPSBsZWFmLnBvc2l0aW9uKG9mZnNldCwgdHJ1ZSk7XG5cbiAgICAgIHZhciBfbGVhZiRwb3NpdGlvbjIgPSBfc2xpY2VkVG9BcnJheShfbGVhZiRwb3NpdGlvbiwgMik7XG5cbiAgICAgIG5vZGUgPSBfbGVhZiRwb3NpdGlvbjJbMF07XG4gICAgICBvZmZzZXQgPSBfbGVhZiRwb3NpdGlvbjJbMV07XG5cbiAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICBpZiAobGVuZ3RoID4gMCkge1xuICAgICAgICByYW5nZS5zZXRTdGFydChub2RlLCBvZmZzZXQpO1xuXG4gICAgICAgIHZhciBfc2Nyb2xsJGxlYWYzID0gdGhpcy5zY3JvbGwubGVhZihpbmRleCArIGxlbmd0aCk7XG5cbiAgICAgICAgdmFyIF9zY3JvbGwkbGVhZjQgPSBfc2xpY2VkVG9BcnJheShfc2Nyb2xsJGxlYWYzLCAyKTtcblxuICAgICAgICBsZWFmID0gX3Njcm9sbCRsZWFmNFswXTtcbiAgICAgICAgb2Zmc2V0ID0gX3Njcm9sbCRsZWFmNFsxXTtcblxuICAgICAgICBpZiAobGVhZiA9PSBudWxsKSByZXR1cm4gbnVsbDtcblxuICAgICAgICB2YXIgX2xlYWYkcG9zaXRpb24zID0gbGVhZi5wb3NpdGlvbihvZmZzZXQsIHRydWUpO1xuXG4gICAgICAgIHZhciBfbGVhZiRwb3NpdGlvbjQgPSBfc2xpY2VkVG9BcnJheShfbGVhZiRwb3NpdGlvbjMsIDIpO1xuXG4gICAgICAgIG5vZGUgPSBfbGVhZiRwb3NpdGlvbjRbMF07XG4gICAgICAgIG9mZnNldCA9IF9sZWFmJHBvc2l0aW9uNFsxXTtcblxuICAgICAgICByYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIHJhbmdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNpZGUgPSAnbGVmdCc7XG4gICAgICAgIHZhciByZWN0ID0gdm9pZCAwO1xuICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIFRleHQpIHtcbiAgICAgICAgICBpZiAob2Zmc2V0IDwgbm9kZS5kYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgIHJhbmdlLnNldEVuZChub2RlLCBvZmZzZXQgKyAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0IC0gMSk7XG4gICAgICAgICAgICByYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgIHNpZGUgPSAncmlnaHQnO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZWN0ID0gcmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVjdCA9IGxlYWYuZG9tTm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICBpZiAob2Zmc2V0ID4gMCkgc2lkZSA9ICdyaWdodCc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBib3R0b206IHJlY3QudG9wICsgcmVjdC5oZWlnaHQsXG4gICAgICAgICAgaGVpZ2h0OiByZWN0LmhlaWdodCxcbiAgICAgICAgICBsZWZ0OiByZWN0W3NpZGVdLFxuICAgICAgICAgIHJpZ2h0OiByZWN0W3NpZGVdLFxuICAgICAgICAgIHRvcDogcmVjdC50b3AsXG4gICAgICAgICAgd2lkdGg6IDBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXROYXRpdmVSYW5nZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE5hdGl2ZVJhbmdlKCkge1xuICAgICAgdmFyIHNlbGVjdGlvbiA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuICAgICAgaWYgKHNlbGVjdGlvbiA9PSBudWxsIHx8IHNlbGVjdGlvbi5yYW5nZUNvdW50IDw9IDApIHJldHVybiBudWxsO1xuICAgICAgdmFyIG5hdGl2ZVJhbmdlID0gc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG4gICAgICBpZiAobmF0aXZlUmFuZ2UgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgcmFuZ2UgPSB0aGlzLm5vcm1hbGl6ZU5hdGl2ZShuYXRpdmVSYW5nZSk7XG4gICAgICBkZWJ1Zy5pbmZvKCdnZXROYXRpdmVSYW5nZScsIHJhbmdlKTtcbiAgICAgIHJldHVybiByYW5nZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRSYW5nZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJhbmdlKCkge1xuICAgICAgdmFyIG5vcm1hbGl6ZWQgPSB0aGlzLmdldE5hdGl2ZVJhbmdlKCk7XG4gICAgICBpZiAobm9ybWFsaXplZCA9PSBudWxsKSByZXR1cm4gW251bGwsIG51bGxdO1xuICAgICAgdmFyIHJhbmdlID0gdGhpcy5ub3JtYWxpemVkVG9SYW5nZShub3JtYWxpemVkKTtcbiAgICAgIHJldHVybiBbcmFuZ2UsIG5vcm1hbGl6ZWRdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhc0ZvY3VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzRm9jdXMoKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gdGhpcy5yb290O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ25vcm1hbGl6ZWRUb1JhbmdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplZFRvUmFuZ2UocmFuZ2UpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgcG9zaXRpb25zID0gW1tyYW5nZS5zdGFydC5ub2RlLCByYW5nZS5zdGFydC5vZmZzZXRdXTtcbiAgICAgIGlmICghcmFuZ2UubmF0aXZlLmNvbGxhcHNlZCkge1xuICAgICAgICBwb3NpdGlvbnMucHVzaChbcmFuZ2UuZW5kLm5vZGUsIHJhbmdlLmVuZC5vZmZzZXRdKTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleGVzID0gcG9zaXRpb25zLm1hcChmdW5jdGlvbiAocG9zaXRpb24pIHtcbiAgICAgICAgdmFyIF9wb3NpdGlvbiA9IF9zbGljZWRUb0FycmF5KHBvc2l0aW9uLCAyKSxcbiAgICAgICAgICAgIG5vZGUgPSBfcG9zaXRpb25bMF0sXG4gICAgICAgICAgICBvZmZzZXQgPSBfcG9zaXRpb25bMV07XG5cbiAgICAgICAgdmFyIGJsb3QgPSBfcGFyY2htZW50Mi5kZWZhdWx0LmZpbmQobm9kZSwgdHJ1ZSk7XG4gICAgICAgIHZhciBpbmRleCA9IGJsb3Qub2Zmc2V0KF90aGlzNC5zY3JvbGwpO1xuICAgICAgICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9IGVsc2UgaWYgKGJsb3QgaW5zdGFuY2VvZiBfcGFyY2htZW50Mi5kZWZhdWx0LkNvbnRhaW5lcikge1xuICAgICAgICAgIHJldHVybiBpbmRleCArIGJsb3QubGVuZ3RoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4ICsgYmxvdC5pbmRleChub2RlLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZhciBlbmQgPSBNYXRoLm1pbihNYXRoLm1heC5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkoaW5kZXhlcykpLCB0aGlzLnNjcm9sbC5sZW5ndGgoKSAtIDEpO1xuICAgICAgdmFyIHN0YXJ0ID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgW2VuZF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShpbmRleGVzKSkpO1xuICAgICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydCwgZW5kIC0gc3RhcnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ25vcm1hbGl6ZU5hdGl2ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5vcm1hbGl6ZU5hdGl2ZShuYXRpdmVSYW5nZSkge1xuICAgICAgaWYgKCFjb250YWlucyh0aGlzLnJvb3QsIG5hdGl2ZVJhbmdlLnN0YXJ0Q29udGFpbmVyKSB8fCAhbmF0aXZlUmFuZ2UuY29sbGFwc2VkICYmICFjb250YWlucyh0aGlzLnJvb3QsIG5hdGl2ZVJhbmdlLmVuZENvbnRhaW5lcikpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgcmFuZ2UgPSB7XG4gICAgICAgIHN0YXJ0OiB7IG5vZGU6IG5hdGl2ZVJhbmdlLnN0YXJ0Q29udGFpbmVyLCBvZmZzZXQ6IG5hdGl2ZVJhbmdlLnN0YXJ0T2Zmc2V0IH0sXG4gICAgICAgIGVuZDogeyBub2RlOiBuYXRpdmVSYW5nZS5lbmRDb250YWluZXIsIG9mZnNldDogbmF0aXZlUmFuZ2UuZW5kT2Zmc2V0IH0sXG4gICAgICAgIG5hdGl2ZTogbmF0aXZlUmFuZ2VcbiAgICAgIH07XG4gICAgICBbcmFuZ2Uuc3RhcnQsIHJhbmdlLmVuZF0uZm9yRWFjaChmdW5jdGlvbiAocG9zaXRpb24pIHtcbiAgICAgICAgdmFyIG5vZGUgPSBwb3NpdGlvbi5ub2RlLFxuICAgICAgICAgICAgb2Zmc2V0ID0gcG9zaXRpb24ub2Zmc2V0O1xuICAgICAgICB3aGlsZSAoIShub2RlIGluc3RhbmNlb2YgVGV4dCkgJiYgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAobm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA+IG9mZnNldCkge1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXRdO1xuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPT09IG9mZnNldCkge1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUubGFzdENoaWxkO1xuICAgICAgICAgICAgb2Zmc2V0ID0gbm9kZSBpbnN0YW5jZW9mIFRleHQgPyBub2RlLmRhdGEubGVuZ3RoIDogbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwb3NpdGlvbi5ub2RlID0gbm9kZSwgcG9zaXRpb24ub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmFuZ2VUb05hdGl2ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJhbmdlVG9OYXRpdmUocmFuZ2UpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICB2YXIgaW5kZXhlcyA9IHJhbmdlLmNvbGxhcHNlZCA/IFtyYW5nZS5pbmRleF0gOiBbcmFuZ2UuaW5kZXgsIHJhbmdlLmluZGV4ICsgcmFuZ2UubGVuZ3RoXTtcbiAgICAgIHZhciBhcmdzID0gW107XG4gICAgICB2YXIgc2Nyb2xsTGVuZ3RoID0gdGhpcy5zY3JvbGwubGVuZ3RoKCk7XG4gICAgICBpbmRleGVzLmZvckVhY2goZnVuY3Rpb24gKGluZGV4LCBpKSB7XG4gICAgICAgIGluZGV4ID0gTWF0aC5taW4oc2Nyb2xsTGVuZ3RoIC0gMSwgaW5kZXgpO1xuICAgICAgICB2YXIgbm9kZSA9IHZvaWQgMCxcbiAgICAgICAgICAgIF9zY3JvbGwkbGVhZjUgPSBfdGhpczUuc2Nyb2xsLmxlYWYoaW5kZXgpLFxuICAgICAgICAgICAgX3Njcm9sbCRsZWFmNiA9IF9zbGljZWRUb0FycmF5KF9zY3JvbGwkbGVhZjUsIDIpLFxuICAgICAgICAgICAgbGVhZiA9IF9zY3JvbGwkbGVhZjZbMF0sXG4gICAgICAgICAgICBvZmZzZXQgPSBfc2Nyb2xsJGxlYWY2WzFdO1xuICAgICAgICB2YXIgX2xlYWYkcG9zaXRpb241ID0gbGVhZi5wb3NpdGlvbihvZmZzZXQsIGkgIT09IDApO1xuXG4gICAgICAgIHZhciBfbGVhZiRwb3NpdGlvbjYgPSBfc2xpY2VkVG9BcnJheShfbGVhZiRwb3NpdGlvbjUsIDIpO1xuXG4gICAgICAgIG5vZGUgPSBfbGVhZiRwb3NpdGlvbjZbMF07XG4gICAgICAgIG9mZnNldCA9IF9sZWFmJHBvc2l0aW9uNlsxXTtcblxuICAgICAgICBhcmdzLnB1c2gobm9kZSwgb2Zmc2V0KTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgMikge1xuICAgICAgICBhcmdzID0gYXJncy5jb25jYXQoYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJncztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzY3JvbGxJbnRvVmlldycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNjcm9sbEludG9WaWV3KHNjcm9sbGluZ0NvbnRhaW5lcikge1xuICAgICAgdmFyIHJhbmdlID0gdGhpcy5sYXN0UmFuZ2U7XG4gICAgICBpZiAocmFuZ2UgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgdmFyIGJvdW5kcyA9IHRoaXMuZ2V0Qm91bmRzKHJhbmdlLmluZGV4LCByYW5nZS5sZW5ndGgpO1xuICAgICAgaWYgKGJvdW5kcyA9PSBudWxsKSByZXR1cm47XG4gICAgICB2YXIgbGltaXQgPSB0aGlzLnNjcm9sbC5sZW5ndGgoKSAtIDE7XG5cbiAgICAgIHZhciBfc2Nyb2xsJGxpbmUgPSB0aGlzLnNjcm9sbC5saW5lKE1hdGgubWluKHJhbmdlLmluZGV4LCBsaW1pdCkpLFxuICAgICAgICAgIF9zY3JvbGwkbGluZTIgPSBfc2xpY2VkVG9BcnJheShfc2Nyb2xsJGxpbmUsIDEpLFxuICAgICAgICAgIGZpcnN0ID0gX3Njcm9sbCRsaW5lMlswXTtcblxuICAgICAgdmFyIGxhc3QgPSBmaXJzdDtcbiAgICAgIGlmIChyYW5nZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBfc2Nyb2xsJGxpbmUzID0gdGhpcy5zY3JvbGwubGluZShNYXRoLm1pbihyYW5nZS5pbmRleCArIHJhbmdlLmxlbmd0aCwgbGltaXQpKTtcblxuICAgICAgICB2YXIgX3Njcm9sbCRsaW5lNCA9IF9zbGljZWRUb0FycmF5KF9zY3JvbGwkbGluZTMsIDEpO1xuXG4gICAgICAgIGxhc3QgPSBfc2Nyb2xsJGxpbmU0WzBdO1xuICAgICAgfVxuICAgICAgaWYgKGZpcnN0ID09IG51bGwgfHwgbGFzdCA9PSBudWxsKSByZXR1cm47XG4gICAgICB2YXIgc2Nyb2xsQm91bmRzID0gc2Nyb2xsaW5nQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgaWYgKGJvdW5kcy50b3AgPCBzY3JvbGxCb3VuZHMudG9wKSB7XG4gICAgICAgIHNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3AgLT0gc2Nyb2xsQm91bmRzLnRvcCAtIGJvdW5kcy50b3A7XG4gICAgICB9IGVsc2UgaWYgKGJvdW5kcy5ib3R0b20gPiBzY3JvbGxCb3VuZHMuYm90dG9tKSB7XG4gICAgICAgIHNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3AgKz0gYm91bmRzLmJvdHRvbSAtIHNjcm9sbEJvdW5kcy5ib3R0b207XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0TmF0aXZlUmFuZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXROYXRpdmVSYW5nZShzdGFydE5vZGUsIHN0YXJ0T2Zmc2V0KSB7XG4gICAgICB2YXIgZW5kTm9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogc3RhcnROb2RlO1xuICAgICAgdmFyIGVuZE9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogc3RhcnRPZmZzZXQ7XG4gICAgICB2YXIgZm9yY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuXG4gICAgICBkZWJ1Zy5pbmZvKCdzZXROYXRpdmVSYW5nZScsIHN0YXJ0Tm9kZSwgc3RhcnRPZmZzZXQsIGVuZE5vZGUsIGVuZE9mZnNldCk7XG4gICAgICBpZiAoc3RhcnROb2RlICE9IG51bGwgJiYgKHRoaXMucm9vdC5wYXJlbnROb2RlID09IG51bGwgfHwgc3RhcnROb2RlLnBhcmVudE5vZGUgPT0gbnVsbCB8fCBlbmROb2RlLnBhcmVudE5vZGUgPT0gbnVsbCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHNlbGVjdGlvbiA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuICAgICAgaWYgKHNlbGVjdGlvbiA9PSBudWxsKSByZXR1cm47XG4gICAgICBpZiAoc3RhcnROb2RlICE9IG51bGwpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc0ZvY3VzKCkpIHRoaXMucm9vdC5mb2N1cygpO1xuICAgICAgICB2YXIgbmF0aXZlID0gKHRoaXMuZ2V0TmF0aXZlUmFuZ2UoKSB8fCB7fSkubmF0aXZlO1xuICAgICAgICBpZiAobmF0aXZlID09IG51bGwgfHwgZm9yY2UgfHwgc3RhcnROb2RlICE9PSBuYXRpdmUuc3RhcnRDb250YWluZXIgfHwgc3RhcnRPZmZzZXQgIT09IG5hdGl2ZS5zdGFydE9mZnNldCB8fCBlbmROb2RlICE9PSBuYXRpdmUuZW5kQ29udGFpbmVyIHx8IGVuZE9mZnNldCAhPT0gbmF0aXZlLmVuZE9mZnNldCkge1xuXG4gICAgICAgICAgaWYgKHN0YXJ0Tm9kZS50YWdOYW1lID09IFwiQlJcIikge1xuICAgICAgICAgICAgc3RhcnRPZmZzZXQgPSBbXS5pbmRleE9mLmNhbGwoc3RhcnROb2RlLnBhcmVudE5vZGUuY2hpbGROb2Rlcywgc3RhcnROb2RlKTtcbiAgICAgICAgICAgIHN0YXJ0Tm9kZSA9IHN0YXJ0Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZW5kTm9kZS50YWdOYW1lID09IFwiQlJcIikge1xuICAgICAgICAgICAgZW5kT2Zmc2V0ID0gW10uaW5kZXhPZi5jYWxsKGVuZE5vZGUucGFyZW50Tm9kZS5jaGlsZE5vZGVzLCBlbmROb2RlKTtcbiAgICAgICAgICAgIGVuZE5vZGUgPSBlbmROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnROb2RlLCBzdGFydE9mZnNldCk7XG4gICAgICAgICAgcmFuZ2Uuc2V0RW5kKGVuZE5vZGUsIGVuZE9mZnNldCk7XG4gICAgICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgdGhpcy5yb290LmJsdXIoKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5mb2N1cygpOyAvLyByb290LmJsdXIoKSBub3QgZW5vdWdoIG9uIElFMTErVHJhdmlzK1NhdWNlTGFicyAoYnV0IG5vdCBsb2NhbCBWTXMpXG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0UmFuZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRSYW5nZShyYW5nZSkge1xuICAgICAgdmFyIGZvcmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXMuQVBJO1xuXG4gICAgICBpZiAodHlwZW9mIGZvcmNlID09PSAnc3RyaW5nJykge1xuICAgICAgICBzb3VyY2UgPSBmb3JjZTtcbiAgICAgICAgZm9yY2UgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGRlYnVnLmluZm8oJ3NldFJhbmdlJywgcmFuZ2UpO1xuICAgICAgaWYgKHJhbmdlICE9IG51bGwpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSB0aGlzLnJhbmdlVG9OYXRpdmUocmFuZ2UpO1xuICAgICAgICB0aGlzLnNldE5hdGl2ZVJhbmdlLmFwcGx5KHRoaXMsIF90b0NvbnN1bWFibGVBcnJheShhcmdzKS5jb25jYXQoW2ZvcmNlXSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXROYXRpdmVSYW5nZShudWxsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlKHNvdXJjZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5VU0VSO1xuXG4gICAgICB2YXIgb2xkUmFuZ2UgPSB0aGlzLmxhc3RSYW5nZTtcblxuICAgICAgdmFyIF9nZXRSYW5nZSA9IHRoaXMuZ2V0UmFuZ2UoKSxcbiAgICAgICAgICBfZ2V0UmFuZ2UyID0gX3NsaWNlZFRvQXJyYXkoX2dldFJhbmdlLCAyKSxcbiAgICAgICAgICBsYXN0UmFuZ2UgPSBfZ2V0UmFuZ2UyWzBdLFxuICAgICAgICAgIG5hdGl2ZVJhbmdlID0gX2dldFJhbmdlMlsxXTtcblxuICAgICAgdGhpcy5sYXN0UmFuZ2UgPSBsYXN0UmFuZ2U7XG4gICAgICBpZiAodGhpcy5sYXN0UmFuZ2UgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNhdmVkUmFuZ2UgPSB0aGlzLmxhc3RSYW5nZTtcbiAgICAgIH1cbiAgICAgIGlmICghKDAsIF9kZWVwRXF1YWwyLmRlZmF1bHQpKG9sZFJhbmdlLCB0aGlzLmxhc3RSYW5nZSkpIHtcbiAgICAgICAgdmFyIF9lbWl0dGVyO1xuXG4gICAgICAgIGlmICghdGhpcy5jb21wb3NpbmcgJiYgbmF0aXZlUmFuZ2UgIT0gbnVsbCAmJiBuYXRpdmVSYW5nZS5uYXRpdmUuY29sbGFwc2VkICYmIG5hdGl2ZVJhbmdlLnN0YXJ0Lm5vZGUgIT09IHRoaXMuY3Vyc29yLnRleHROb2RlKSB7XG4gICAgICAgICAgdGhpcy5jdXJzb3IucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhcmdzID0gW19lbWl0dGVyNC5kZWZhdWx0LmV2ZW50cy5TRUxFQ1RJT05fQ0hBTkdFLCAoMCwgX2Nsb25lMi5kZWZhdWx0KSh0aGlzLmxhc3RSYW5nZSksICgwLCBfY2xvbmUyLmRlZmF1bHQpKG9sZFJhbmdlKSwgc291cmNlXTtcbiAgICAgICAgKF9lbWl0dGVyID0gdGhpcy5lbWl0dGVyKS5lbWl0LmFwcGx5KF9lbWl0dGVyLCBbX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzLkVESVRPUl9DSEFOR0VdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIGlmIChzb3VyY2UgIT09IF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKSB7XG4gICAgICAgICAgdmFyIF9lbWl0dGVyMjtcblxuICAgICAgICAgIChfZW1pdHRlcjIgPSB0aGlzLmVtaXR0ZXIpLmVtaXQuYXBwbHkoX2VtaXR0ZXIyLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZWxlY3Rpb247XG59KCk7XG5cbmZ1bmN0aW9uIGNvbnRhaW5zKHBhcmVudCwgZGVzY2VuZGFudCkge1xuICB0cnkge1xuICAgIC8vIEZpcmVmb3ggaW5zZXJ0cyBpbmFjY2Vzc2libGUgbm9kZXMgYXJvdW5kIHZpZGVvIGVsZW1lbnRzXG4gICAgZGVzY2VuZGFudC5wYXJlbnROb2RlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIElFMTEgaGFzIGJ1ZyB3aXRoIFRleHQgbm9kZXNcbiAgLy8gaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy83ODA4NzQvbm9kZS1jb250YWlucy1pcy1pbmNvcnJlY3RcbiAgaWYgKGRlc2NlbmRhbnQgaW5zdGFuY2VvZiBUZXh0KSB7XG4gICAgZGVzY2VuZGFudCA9IGRlc2NlbmRhbnQucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gcGFyZW50LmNvbnRhaW5zKGRlc2NlbmRhbnQpO1xufVxuXG5leHBvcnRzLlJhbmdlID0gUmFuZ2U7XG5leHBvcnRzLmRlZmF1bHQgPSBTZWxlY3Rpb247XG5cbi8qKiovIH0pLFxuLyogMTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEJyZWFrID0gZnVuY3Rpb24gKF9QYXJjaG1lbnQkRW1iZWQpIHtcbiAgX2luaGVyaXRzKEJyZWFrLCBfUGFyY2htZW50JEVtYmVkKTtcblxuICBmdW5jdGlvbiBCcmVhaygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnJlYWspO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCcmVhay5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJyZWFrKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQnJlYWssIFt7XG4gICAga2V5OiAnaW5zZXJ0SW50bycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydEludG8ocGFyZW50LCByZWYpIHtcbiAgICAgIGlmIChwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIF9nZXQoQnJlYWsucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnJlYWsucHJvdG90eXBlKSwgJ2luc2VydEludG8nLCB0aGlzKS5jYWxsKHRoaXMsIHBhcmVudCwgcmVmKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbGVuZ3RoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGVuZ3RoKCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ3ZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCcmVhaztcbn0oX3BhcmNobWVudDIuZGVmYXVsdC5FbWJlZCk7XG5cbkJyZWFrLmJsb3ROYW1lID0gJ2JyZWFrJztcbkJyZWFrLnRhZ05hbWUgPSAnQlInO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBCcmVhaztcblxuLyoqKi8gfSksXG4vKiAxNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbGlua2VkX2xpc3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDQpO1xudmFyIHNoYWRvd18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIENvbnRhaW5lckJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbnRhaW5lckJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29udGFpbmVyQmxvdChkb21Ob2RlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRvbU5vZGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmJ1aWxkKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuYXBwZW5kQ2hpbGQgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgdGhpcy5pbnNlcnRCZWZvcmUob3RoZXIpO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuYXR0YWNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmF0dGFjaC5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICBjaGlsZC5hdHRhY2goKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG5ldyBsaW5rZWRfbGlzdF8xLmRlZmF1bHQoKTtcbiAgICAgICAgLy8gTmVlZCB0byBiZSByZXZlcnNlZCBmb3IgaWYgRE9NIG5vZGVzIGFscmVhZHkgaW4gb3JkZXJcbiAgICAgICAgW10uc2xpY2VcbiAgICAgICAgICAgIC5jYWxsKHRoaXMuZG9tTm9kZS5jaGlsZE5vZGVzKVxuICAgICAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gbWFrZUJsb3Qobm9kZSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5zZXJ0QmVmb3JlKGNoaWxkLCBfdGhpcy5jaGlsZHJlbi5oZWFkIHx8IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFJlZ2lzdHJ5LlBhcmNobWVudEVycm9yKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuZGVsZXRlQXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgbGVuZ3RoID09PSB0aGlzLmxlbmd0aCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2hBdChpbmRleCwgbGVuZ3RoLCBmdW5jdGlvbiAoY2hpbGQsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjaGlsZC5kZWxldGVBdChvZmZzZXQsIGxlbmd0aCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuZGVzY2VuZGFudCA9IGZ1bmN0aW9uIChjcml0ZXJpYSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5jaGlsZHJlbi5maW5kKGluZGV4KSwgY2hpbGQgPSBfYVswXSwgb2Zmc2V0ID0gX2FbMV07XG4gICAgICAgIGlmICgoY3JpdGVyaWEuYmxvdE5hbWUgPT0gbnVsbCAmJiBjcml0ZXJpYShjaGlsZCkpIHx8XG4gICAgICAgICAgICAoY3JpdGVyaWEuYmxvdE5hbWUgIT0gbnVsbCAmJiBjaGlsZCBpbnN0YW5jZW9mIGNyaXRlcmlhKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtjaGlsZCwgb2Zmc2V0XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaGlsZCBpbnN0YW5jZW9mIENvbnRhaW5lckJsb3QpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZC5kZXNjZW5kYW50KGNyaXRlcmlhLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtudWxsLCAtMV07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmRlc2NlbmRhbnRzID0gZnVuY3Rpb24gKGNyaXRlcmlhLCBpbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7IGluZGV4ID0gMDsgfVxuICAgICAgICBpZiAobGVuZ3RoID09PSB2b2lkIDApIHsgbGVuZ3RoID0gTnVtYmVyLk1BWF9WQUxVRTsgfVxuICAgICAgICB2YXIgZGVzY2VuZGFudHMgPSBbXTtcbiAgICAgICAgdmFyIGxlbmd0aExlZnQgPSBsZW5ndGg7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaEF0KGluZGV4LCBsZW5ndGgsIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKChjcml0ZXJpYS5ibG90TmFtZSA9PSBudWxsICYmIGNyaXRlcmlhKGNoaWxkKSkgfHxcbiAgICAgICAgICAgICAgICAoY3JpdGVyaWEuYmxvdE5hbWUgIT0gbnVsbCAmJiBjaGlsZCBpbnN0YW5jZW9mIGNyaXRlcmlhKSkge1xuICAgICAgICAgICAgICAgIGRlc2NlbmRhbnRzLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgQ29udGFpbmVyQmxvdCkge1xuICAgICAgICAgICAgICAgIGRlc2NlbmRhbnRzID0gZGVzY2VuZGFudHMuY29uY2F0KGNoaWxkLmRlc2NlbmRhbnRzKGNyaXRlcmlhLCBpbmRleCwgbGVuZ3RoTGVmdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGVuZ3RoTGVmdCAtPSBsZW5ndGg7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGVzY2VuZGFudHM7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5kZXRhY2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGNoaWxkLmRldGFjaCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXRhY2guY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmZvcm1hdEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaEF0KGluZGV4LCBsZW5ndGgsIGZ1bmN0aW9uIChjaGlsZCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGNoaWxkLmZvcm1hdEF0KG9mZnNldCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuaW5zZXJ0QXQgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlLCBkZWYpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5jaGlsZHJlbi5maW5kKGluZGV4KSwgY2hpbGQgPSBfYVswXSwgb2Zmc2V0ID0gX2FbMV07XG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgICAgY2hpbGQuaW5zZXJ0QXQob2Zmc2V0LCB2YWx1ZSwgZGVmKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBibG90ID0gZGVmID09IG51bGwgPyBSZWdpc3RyeS5jcmVhdGUoJ3RleHQnLCB2YWx1ZSkgOiBSZWdpc3RyeS5jcmVhdGUodmFsdWUsIGRlZik7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGJsb3QpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5pbnNlcnRCZWZvcmUgPSBmdW5jdGlvbiAoY2hpbGRCbG90LCByZWZCbG90KSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRpY3MuYWxsb3dlZENoaWxkcmVuICE9IG51bGwgJiZcbiAgICAgICAgICAgICF0aGlzLnN0YXRpY3MuYWxsb3dlZENoaWxkcmVuLnNvbWUoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkQmxvdCBpbnN0YW5jZW9mIGNoaWxkO1xuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZWdpc3RyeS5QYXJjaG1lbnRFcnJvcihcIkNhbm5vdCBpbnNlcnQgXCIgKyBjaGlsZEJsb3Quc3RhdGljcy5ibG90TmFtZSArIFwiIGludG8gXCIgKyB0aGlzLnN0YXRpY3MuYmxvdE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkQmxvdC5pbnNlcnRJbnRvKHRoaXMsIHJlZkJsb3QpO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGNoaWxkKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVtbyArIGNoaWxkLmxlbmd0aCgpO1xuICAgICAgICB9LCAwKTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLm1vdmVDaGlsZHJlbiA9IGZ1bmN0aW9uICh0YXJnZXRQYXJlbnQsIHJlZk5vZGUpIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgdGFyZ2V0UGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgcmVmTm9kZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUub3B0aW1pemUgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm9wdGltaXplLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGljcy5kZWZhdWx0Q2hpbGQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IFJlZ2lzdHJ5LmNyZWF0ZSh0aGlzLnN0YXRpY3MuZGVmYXVsdENoaWxkKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgICAgICBjaGlsZC5vcHRpbWl6ZShjb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLnBhdGggPSBmdW5jdGlvbiAoaW5kZXgsIGluY2x1c2l2ZSkge1xuICAgICAgICBpZiAoaW5jbHVzaXZlID09PSB2b2lkIDApIHsgaW5jbHVzaXZlID0gZmFsc2U7IH1cbiAgICAgICAgdmFyIF9hID0gdGhpcy5jaGlsZHJlbi5maW5kKGluZGV4LCBpbmNsdXNpdmUpLCBjaGlsZCA9IF9hWzBdLCBvZmZzZXQgPSBfYVsxXTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gW1t0aGlzLCBpbmRleF1dO1xuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBDb250YWluZXJCbG90KSB7XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb24uY29uY2F0KGNoaWxkLnBhdGgob2Zmc2V0LCBpbmNsdXNpdmUpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaGlsZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBwb3NpdGlvbi5wdXNoKFtjaGlsZCwgb2Zmc2V0XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5yZW1vdmUoY2hpbGQpO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIENvbnRhaW5lckJsb3QpIHtcbiAgICAgICAgICAgIHRhcmdldC5tb3ZlQ2hpbGRyZW4odGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5yZXBsYWNlLmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gKGluZGV4LCBmb3JjZSkge1xuICAgICAgICBpZiAoZm9yY2UgPT09IHZvaWQgMCkgeyBmb3JjZSA9IGZhbHNlOyB9XG4gICAgICAgIGlmICghZm9yY2UpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdGhpcy5sZW5ndGgoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBhZnRlciA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKGFmdGVyLCB0aGlzLm5leHQpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2hBdChpbmRleCwgdGhpcy5sZW5ndGgoKSwgZnVuY3Rpb24gKGNoaWxkLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5zcGxpdChvZmZzZXQsIGZvcmNlKTtcbiAgICAgICAgICAgIGFmdGVyLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhZnRlcjtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLnVud3JhcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5tb3ZlQ2hpbGRyZW4odGhpcy5wYXJlbnQsIHRoaXMubmV4dCk7XG4gICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBhZGRlZE5vZGVzID0gW107XG4gICAgICAgIHZhciByZW1vdmVkTm9kZXMgPSBbXTtcbiAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgICAgICBpZiAobXV0YXRpb24udGFyZ2V0ID09PSBfdGhpcy5kb21Ob2RlICYmIG11dGF0aW9uLnR5cGUgPT09ICdjaGlsZExpc3QnKSB7XG4gICAgICAgICAgICAgICAgYWRkZWROb2Rlcy5wdXNoLmFwcGx5KGFkZGVkTm9kZXMsIG11dGF0aW9uLmFkZGVkTm9kZXMpO1xuICAgICAgICAgICAgICAgIHJlbW92ZWROb2Rlcy5wdXNoLmFwcGx5KHJlbW92ZWROb2RlcywgbXV0YXRpb24ucmVtb3ZlZE5vZGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlbW92ZWROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBub2RlIGhhcyBhY3R1YWxseSBiZWVuIHJlbW92ZWRcbiAgICAgICAgICAgIC8vIE9uZSBleGNlcHRpb24gaXMgQ2hyb21lIGRvZXMgbm90IGltbWVkaWF0ZWx5IHJlbW92ZSBJRlJBTUVzXG4gICAgICAgICAgICAvLyBmcm9tIERPTSBidXQgTXV0YXRpb25SZWNvcmQgaXMgY29ycmVjdCBpbiBpdHMgcmVwb3J0ZWQgcmVtb3ZhbFxuICAgICAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIG5vZGUudGFnTmFtZSAhPT0gJ0lGUkFNRScgJiZcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5vZGUpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYmxvdCA9IFJlZ2lzdHJ5LmZpbmQobm9kZSk7XG4gICAgICAgICAgICBpZiAoYmxvdCA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGlmIChibG90LmRvbU5vZGUucGFyZW50Tm9kZSA9PSBudWxsIHx8IGJsb3QuZG9tTm9kZS5wYXJlbnROb2RlID09PSBfdGhpcy5kb21Ob2RlKSB7XG4gICAgICAgICAgICAgICAgYmxvdC5kZXRhY2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGFkZGVkTm9kZXNcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLnBhcmVudE5vZGUgPT0gX3RoaXMuZG9tTm9kZTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICBpZiAoYSA9PT0gYilcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIGlmIChhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICB2YXIgcmVmQmxvdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAobm9kZS5uZXh0U2libGluZyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVmQmxvdCA9IFJlZ2lzdHJ5LmZpbmQobm9kZS5uZXh0U2libGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYmxvdCA9IG1ha2VCbG90KG5vZGUpO1xuICAgICAgICAgICAgaWYgKGJsb3QubmV4dCAhPSByZWZCbG90IHx8IGJsb3QubmV4dCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJsb3QucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYmxvdC5wYXJlbnQucmVtb3ZlQ2hpbGQoX3RoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5pbnNlcnRCZWZvcmUoYmxvdCwgcmVmQmxvdCB8fCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBDb250YWluZXJCbG90O1xufShzaGFkb3dfMS5kZWZhdWx0KSk7XG5mdW5jdGlvbiBtYWtlQmxvdChub2RlKSB7XG4gICAgdmFyIGJsb3QgPSBSZWdpc3RyeS5maW5kKG5vZGUpO1xuICAgIGlmIChibG90ID09IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGJsb3QgPSBSZWdpc3RyeS5jcmVhdGUobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGJsb3QgPSBSZWdpc3RyeS5jcmVhdGUoUmVnaXN0cnkuU2NvcGUuSU5MSU5FKTtcbiAgICAgICAgICAgIFtdLnNsaWNlLmNhbGwobm9kZS5jaGlsZE5vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBibG90LmRvbU5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChibG90LmRvbU5vZGUsIG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvdC5hdHRhY2goKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmxvdDtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IENvbnRhaW5lckJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiAxOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYXR0cmlidXRvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG52YXIgc3RvcmVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpO1xudmFyIGNvbnRhaW5lcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIEZvcm1hdEJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZvcm1hdEJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRm9ybWF0QmxvdChkb21Ob2RlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRvbU5vZGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmF0dHJpYnV0ZXMgPSBuZXcgc3RvcmVfMS5kZWZhdWx0KF90aGlzLmRvbU5vZGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZvcm1hdEJsb3QuZm9ybWF0cyA9IGZ1bmN0aW9uIChkb21Ob2RlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy50YWdOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnRhZ05hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9tTm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEZvcm1hdEJsb3QucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gUmVnaXN0cnkucXVlcnkobmFtZSk7XG4gICAgICAgIGlmIChmb3JtYXQgaW5zdGFuY2VvZiBhdHRyaWJ1dG9yXzEuZGVmYXVsdCkge1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmF0dHJpYnV0ZShmb3JtYXQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCAhPSBudWxsICYmIChuYW1lICE9PSB0aGlzLnN0YXRpY3MuYmxvdE5hbWUgfHwgdGhpcy5mb3JtYXRzKClbbmFtZV0gIT09IHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVdpdGgobmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGb3JtYXRCbG90LnByb3RvdHlwZS5mb3JtYXRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZm9ybWF0cyA9IHRoaXMuYXR0cmlidXRlcy52YWx1ZXMoKTtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuc3RhdGljcy5mb3JtYXRzKHRoaXMuZG9tTm9kZSk7XG4gICAgICAgIGlmIChmb3JtYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgZm9ybWF0c1t0aGlzLnN0YXRpY3MuYmxvdE5hbWVdID0gZm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXRzO1xuICAgIH07XG4gICAgRm9ybWF0QmxvdC5wcm90b3R5cGUucmVwbGFjZVdpdGggPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gX3N1cGVyLnByb3RvdHlwZS5yZXBsYWNlV2l0aC5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmNvcHkocmVwbGFjZW1lbnQpO1xuICAgICAgICByZXR1cm4gcmVwbGFjZW1lbnQ7XG4gICAgfTtcbiAgICBGb3JtYXRCbG90LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcywgbXV0YXRpb25zLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKG11dGF0aW9ucy5zb21lKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIG11dGF0aW9uLnRhcmdldCA9PT0gX3RoaXMuZG9tTm9kZSAmJiBtdXRhdGlvbi50eXBlID09PSAnYXR0cmlidXRlcyc7XG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuYnVpbGQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRm9ybWF0QmxvdC5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IF9zdXBlci5wcm90b3R5cGUud3JhcC5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBGb3JtYXRCbG90ICYmIHdyYXBwZXIuc3RhdGljcy5zY29wZSA9PT0gdGhpcy5zdGF0aWNzLnNjb3BlKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMubW92ZSh3cmFwcGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9O1xuICAgIHJldHVybiBGb3JtYXRCbG90O1xufShjb250YWluZXJfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBGb3JtYXRCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogMTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHNoYWRvd18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIExlYWZCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhMZWFmQmxvdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBMZWFmQmxvdCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBMZWFmQmxvdC52YWx1ZSA9IGZ1bmN0aW9uIChkb21Ob2RlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgTGVhZkJsb3QucHJvdG90eXBlLmluZGV4ID0gZnVuY3Rpb24gKG5vZGUsIG9mZnNldCkge1xuICAgICAgICBpZiAodGhpcy5kb21Ob2RlID09PSBub2RlIHx8XG4gICAgICAgICAgICB0aGlzLmRvbU5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24obm9kZSkgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5FRF9CWSkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKG9mZnNldCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gICAgTGVhZkJsb3QucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKGluZGV4LCBpbmNsdXNpdmUpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IFtdLmluZGV4T2YuY2FsbCh0aGlzLnBhcmVudC5kb21Ob2RlLmNoaWxkTm9kZXMsIHRoaXMuZG9tTm9kZSk7XG4gICAgICAgIGlmIChpbmRleCA+IDApXG4gICAgICAgICAgICBvZmZzZXQgKz0gMTtcbiAgICAgICAgcmV0dXJuIFt0aGlzLnBhcmVudC5kb21Ob2RlLCBvZmZzZXRdO1xuICAgIH07XG4gICAgTGVhZkJsb3QucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX2EgPSB7fSwgX2FbdGhpcy5zdGF0aWNzLmJsb3ROYW1lXSA9IHRoaXMuc3RhdGljcy52YWx1ZSh0aGlzLmRvbU5vZGUpIHx8IHRydWUsIF9hO1xuICAgICAgICB2YXIgX2E7XG4gICAgfTtcbiAgICBMZWFmQmxvdC5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLklOTElORV9CTE9UO1xuICAgIHJldHVybiBMZWFmQmxvdDtcbn0oc2hhZG93XzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTGVhZkJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiAyMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZXF1YWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcbnZhciBleHRlbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5cbnZhciBsaWIgPSB7XG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBjb21wb3NlOiBmdW5jdGlvbiAoYSwgYiwga2VlcE51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgYSAhPT0gJ29iamVjdCcpIGEgPSB7fTtcbiAgICAgIGlmICh0eXBlb2YgYiAhPT0gJ29iamVjdCcpIGIgPSB7fTtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gZXh0ZW5kKHRydWUsIHt9LCBiKTtcbiAgICAgIGlmICgha2VlcE51bGwpIHtcbiAgICAgICAgYXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLnJlZHVjZShmdW5jdGlvbiAoY29weSwga2V5KSB7XG4gICAgICAgICAgaWYgKGF0dHJpYnV0ZXNba2V5XSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb3B5W2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjb3B5O1xuICAgICAgICB9LCB7fSk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gYSkge1xuICAgICAgICBpZiAoYVtrZXldICE9PSB1bmRlZmluZWQgJiYgYltrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSBhW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwID8gYXR0cmlidXRlcyA6IHVuZGVmaW5lZDtcbiAgICB9LFxuXG4gICAgZGlmZjogZnVuY3Rpb24oYSwgYikge1xuICAgICAgaWYgKHR5cGVvZiBhICE9PSAnb2JqZWN0JykgYSA9IHt9O1xuICAgICAgaWYgKHR5cGVvZiBiICE9PSAnb2JqZWN0JykgYiA9IHt9O1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyhhKS5jb25jYXQoT2JqZWN0LmtleXMoYikpLnJlZHVjZShmdW5jdGlvbiAoYXR0cmlidXRlcywga2V5KSB7XG4gICAgICAgIGlmICghZXF1YWwoYVtrZXldLCBiW2tleV0pKSB7XG4gICAgICAgICAgYXR0cmlidXRlc1trZXldID0gYltrZXldID09PSB1bmRlZmluZWQgPyBudWxsIDogYltrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVzO1xuICAgICAgfSwge30pO1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCA+IDAgPyBhdHRyaWJ1dGVzIDogdW5kZWZpbmVkO1xuICAgIH0sXG5cbiAgICB0cmFuc2Zvcm06IGZ1bmN0aW9uIChhLCBiLCBwcmlvcml0eSkge1xuICAgICAgaWYgKHR5cGVvZiBhICE9PSAnb2JqZWN0JykgcmV0dXJuIGI7XG4gICAgICBpZiAodHlwZW9mIGIgIT09ICdvYmplY3QnKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgaWYgKCFwcmlvcml0eSkgcmV0dXJuIGI7ICAvLyBiIHNpbXBseSBvdmVyd3JpdGVzIHVzIHdpdGhvdXQgcHJpb3JpdHlcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gT2JqZWN0LmtleXMoYikucmVkdWNlKGZ1bmN0aW9uIChhdHRyaWJ1dGVzLCBrZXkpIHtcbiAgICAgICAgaWYgKGFba2V5XSA9PT0gdW5kZWZpbmVkKSBhdHRyaWJ1dGVzW2tleV0gPSBiW2tleV07ICAvLyBudWxsIGlzIGEgdmFsaWQgdmFsdWVcbiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZXM7XG4gICAgICB9LCB7fSk7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoID4gMCA/IGF0dHJpYnV0ZXMgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuXG4gIGl0ZXJhdG9yOiBmdW5jdGlvbiAob3BzKSB7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihvcHMpO1xuICB9LFxuXG4gIGxlbmd0aDogZnVuY3Rpb24gKG9wKSB7XG4gICAgaWYgKHR5cGVvZiBvcFsnZGVsZXRlJ10gPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gb3BbJ2RlbGV0ZSddO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wLnJldGFpbiA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBvcC5yZXRhaW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb3AuaW5zZXJ0ID09PSAnc3RyaW5nJyA/IG9wLmluc2VydC5sZW5ndGggOiAxO1xuICAgIH1cbiAgfVxufTtcblxuXG5mdW5jdGlvbiBJdGVyYXRvcihvcHMpIHtcbiAgdGhpcy5vcHMgPSBvcHM7XG4gIHRoaXMuaW5kZXggPSAwO1xuICB0aGlzLm9mZnNldCA9IDA7XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUuaGFzTmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucGVla0xlbmd0aCgpIDwgSW5maW5pdHk7XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgaWYgKCFsZW5ndGgpIGxlbmd0aCA9IEluZmluaXR5O1xuICB2YXIgbmV4dE9wID0gdGhpcy5vcHNbdGhpcy5pbmRleF07XG4gIGlmIChuZXh0T3ApIHtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgdmFyIG9wTGVuZ3RoID0gbGliLmxlbmd0aChuZXh0T3ApXG4gICAgaWYgKGxlbmd0aCA+PSBvcExlbmd0aCAtIG9mZnNldCkge1xuICAgICAgbGVuZ3RoID0gb3BMZW5ndGggLSBvZmZzZXQ7XG4gICAgICB0aGlzLmluZGV4ICs9IDE7XG4gICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuZXh0T3BbJ2RlbGV0ZSddID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHsgJ2RlbGV0ZSc6IGxlbmd0aCB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmV0T3AgPSB7fTtcbiAgICAgIGlmIChuZXh0T3AuYXR0cmlidXRlcykge1xuICAgICAgICByZXRPcC5hdHRyaWJ1dGVzID0gbmV4dE9wLmF0dHJpYnV0ZXM7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG5leHRPcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldE9wLnJldGFpbiA9IGxlbmd0aDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5leHRPcC5pbnNlcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldE9wLmluc2VydCA9IG5leHRPcC5pbnNlcnQuc3Vic3RyKG9mZnNldCwgbGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG9mZnNldCBzaG91bGQgPT09IDAsIGxlbmd0aCBzaG91bGQgPT09IDFcbiAgICAgICAgcmV0T3AuaW5zZXJ0ID0gbmV4dE9wLmluc2VydDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXRPcDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHsgcmV0YWluOiBJbmZpbml0eSB9O1xuICB9XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMub3BzW3RoaXMuaW5kZXhdO1xufTtcblxuSXRlcmF0b3IucHJvdG90eXBlLnBlZWtMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLm9wc1t0aGlzLmluZGV4XSkge1xuICAgIC8vIFNob3VsZCBuZXZlciByZXR1cm4gMCBpZiBvdXIgaW5kZXggaXMgYmVpbmcgbWFuYWdlZCBjb3JyZWN0bHlcbiAgICByZXR1cm4gbGliLmxlbmd0aCh0aGlzLm9wc1t0aGlzLmluZGV4XSkgLSB0aGlzLm9mZnNldDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gSW5maW5pdHk7XG4gIH1cbn07XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5wZWVrVHlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMub3BzW3RoaXMuaW5kZXhdKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wc1t0aGlzLmluZGV4XVsnZGVsZXRlJ10gPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gJ2RlbGV0ZSc7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5vcHNbdGhpcy5pbmRleF0ucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuICdyZXRhaW4nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ2luc2VydCc7XG4gICAgfVxuICB9XG4gIHJldHVybiAncmV0YWluJztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBsaWI7XG5cblxuLyoqKi8gfSksXG4vKiAyMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgY2xvbmUgPSAoZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9pbnN0YW5jZW9mKG9iaiwgdHlwZSkge1xuICByZXR1cm4gdHlwZSAhPSBudWxsICYmIG9iaiBpbnN0YW5jZW9mIHR5cGU7XG59XG5cbnZhciBuYXRpdmVNYXA7XG50cnkge1xuICBuYXRpdmVNYXAgPSBNYXA7XG59IGNhdGNoKF8pIHtcbiAgLy8gbWF5YmUgYSByZWZlcmVuY2UgZXJyb3IgYmVjYXVzZSBubyBgTWFwYC4gR2l2ZSBpdCBhIGR1bW15IHZhbHVlIHRoYXQgbm9cbiAgLy8gdmFsdWUgd2lsbCBldmVyIGJlIGFuIGluc3RhbmNlb2YuXG4gIG5hdGl2ZU1hcCA9IGZ1bmN0aW9uKCkge307XG59XG5cbnZhciBuYXRpdmVTZXQ7XG50cnkge1xuICBuYXRpdmVTZXQgPSBTZXQ7XG59IGNhdGNoKF8pIHtcbiAgbmF0aXZlU2V0ID0gZnVuY3Rpb24oKSB7fTtcbn1cblxudmFyIG5hdGl2ZVByb21pc2U7XG50cnkge1xuICBuYXRpdmVQcm9taXNlID0gUHJvbWlzZTtcbn0gY2F0Y2goXykge1xuICBuYXRpdmVQcm9taXNlID0gZnVuY3Rpb24oKSB7fTtcbn1cblxuLyoqXG4gKiBDbG9uZXMgKGNvcGllcykgYW4gT2JqZWN0IHVzaW5nIGRlZXAgY29weWluZy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHN1cHBvcnRzIGNpcmN1bGFyIHJlZmVyZW5jZXMgYnkgZGVmYXVsdCwgYnV0IGlmIHlvdSBhcmUgY2VydGFpblxuICogdGhlcmUgYXJlIG5vIGNpcmN1bGFyIHJlZmVyZW5jZXMgaW4geW91ciBvYmplY3QsIHlvdSBjYW4gc2F2ZSBzb21lIENQVSB0aW1lXG4gKiBieSBjYWxsaW5nIGNsb25lKG9iaiwgZmFsc2UpLlxuICpcbiAqIENhdXRpb246IGlmIGBjaXJjdWxhcmAgaXMgZmFsc2UgYW5kIGBwYXJlbnRgIGNvbnRhaW5zIGNpcmN1bGFyIHJlZmVyZW5jZXMsXG4gKiB5b3VyIHByb2dyYW0gbWF5IGVudGVyIGFuIGluZmluaXRlIGxvb3AgYW5kIGNyYXNoLlxuICpcbiAqIEBwYXJhbSBgcGFyZW50YCAtIHRoZSBvYmplY3QgdG8gYmUgY2xvbmVkXG4gKiBAcGFyYW0gYGNpcmN1bGFyYCAtIHNldCB0byB0cnVlIGlmIHRoZSBvYmplY3QgdG8gYmUgY2xvbmVkIG1heSBjb250YWluXG4gKiAgICBjaXJjdWxhciByZWZlcmVuY2VzLiAob3B0aW9uYWwgLSB0cnVlIGJ5IGRlZmF1bHQpXG4gKiBAcGFyYW0gYGRlcHRoYCAtIHNldCB0byBhIG51bWJlciBpZiB0aGUgb2JqZWN0IGlzIG9ubHkgdG8gYmUgY2xvbmVkIHRvXG4gKiAgICBhIHBhcnRpY3VsYXIgZGVwdGguIChvcHRpb25hbCAtIGRlZmF1bHRzIHRvIEluZmluaXR5KVxuICogQHBhcmFtIGBwcm90b3R5cGVgIC0gc2V0cyB0aGUgcHJvdG90eXBlIHRvIGJlIHVzZWQgd2hlbiBjbG9uaW5nIGFuIG9iamVjdC5cbiAqICAgIChvcHRpb25hbCAtIGRlZmF1bHRzIHRvIHBhcmVudCBwcm90b3R5cGUpLlxuICogQHBhcmFtIGBpbmNsdWRlTm9uRW51bWVyYWJsZWAgLSBzZXQgdG8gdHJ1ZSBpZiB0aGUgbm9uLWVudW1lcmFibGUgcHJvcGVydGllc1xuICogICAgc2hvdWxkIGJlIGNsb25lZCBhcyB3ZWxsLiBOb24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9uIHRoZSBwcm90b3R5cGVcbiAqICAgIGNoYWluIHdpbGwgYmUgaWdub3JlZC4gKG9wdGlvbmFsIC0gZmFsc2UgYnkgZGVmYXVsdClcbiovXG5mdW5jdGlvbiBjbG9uZShwYXJlbnQsIGNpcmN1bGFyLCBkZXB0aCwgcHJvdG90eXBlLCBpbmNsdWRlTm9uRW51bWVyYWJsZSkge1xuICBpZiAodHlwZW9mIGNpcmN1bGFyID09PSAnb2JqZWN0Jykge1xuICAgIGRlcHRoID0gY2lyY3VsYXIuZGVwdGg7XG4gICAgcHJvdG90eXBlID0gY2lyY3VsYXIucHJvdG90eXBlO1xuICAgIGluY2x1ZGVOb25FbnVtZXJhYmxlID0gY2lyY3VsYXIuaW5jbHVkZU5vbkVudW1lcmFibGU7XG4gICAgY2lyY3VsYXIgPSBjaXJjdWxhci5jaXJjdWxhcjtcbiAgfVxuICAvLyBtYWludGFpbiB0d28gYXJyYXlzIGZvciBjaXJjdWxhciByZWZlcmVuY2VzLCB3aGVyZSBjb3JyZXNwb25kaW5nIHBhcmVudHNcbiAgLy8gYW5kIGNoaWxkcmVuIGhhdmUgdGhlIHNhbWUgaW5kZXhcbiAgdmFyIGFsbFBhcmVudHMgPSBbXTtcbiAgdmFyIGFsbENoaWxkcmVuID0gW107XG5cbiAgdmFyIHVzZUJ1ZmZlciA9IHR5cGVvZiBCdWZmZXIgIT0gJ3VuZGVmaW5lZCc7XG5cbiAgaWYgKHR5cGVvZiBjaXJjdWxhciA9PSAndW5kZWZpbmVkJylcbiAgICBjaXJjdWxhciA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBkZXB0aCA9PSAndW5kZWZpbmVkJylcbiAgICBkZXB0aCA9IEluZmluaXR5O1xuXG4gIC8vIHJlY3Vyc2UgdGhpcyBmdW5jdGlvbiBzbyB3ZSBkb24ndCByZXNldCBhbGxQYXJlbnRzIGFuZCBhbGxDaGlsZHJlblxuICBmdW5jdGlvbiBfY2xvbmUocGFyZW50LCBkZXB0aCkge1xuICAgIC8vIGNsb25pbmcgbnVsbCBhbHdheXMgcmV0dXJucyBudWxsXG4gICAgaWYgKHBhcmVudCA9PT0gbnVsbClcbiAgICAgIHJldHVybiBudWxsO1xuXG4gICAgaWYgKGRlcHRoID09PSAwKVxuICAgICAgcmV0dXJuIHBhcmVudDtcblxuICAgIHZhciBjaGlsZDtcbiAgICB2YXIgcHJvdG87XG4gICAgaWYgKHR5cGVvZiBwYXJlbnQgIT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuXG4gICAgaWYgKF9pbnN0YW5jZW9mKHBhcmVudCwgbmF0aXZlTWFwKSkge1xuICAgICAgY2hpbGQgPSBuZXcgbmF0aXZlTWFwKCk7XG4gICAgfSBlbHNlIGlmIChfaW5zdGFuY2VvZihwYXJlbnQsIG5hdGl2ZVNldCkpIHtcbiAgICAgIGNoaWxkID0gbmV3IG5hdGl2ZVNldCgpO1xuICAgIH0gZWxzZSBpZiAoX2luc3RhbmNlb2YocGFyZW50LCBuYXRpdmVQcm9taXNlKSkge1xuICAgICAgY2hpbGQgPSBuZXcgbmF0aXZlUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHBhcmVudC50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmVzb2x2ZShfY2xvbmUodmFsdWUsIGRlcHRoIC0gMSkpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICByZWplY3QoX2Nsb25lKGVyciwgZGVwdGggLSAxKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChjbG9uZS5fX2lzQXJyYXkocGFyZW50KSkge1xuICAgICAgY2hpbGQgPSBbXTtcbiAgICB9IGVsc2UgaWYgKGNsb25lLl9faXNSZWdFeHAocGFyZW50KSkge1xuICAgICAgY2hpbGQgPSBuZXcgUmVnRXhwKHBhcmVudC5zb3VyY2UsIF9fZ2V0UmVnRXhwRmxhZ3MocGFyZW50KSk7XG4gICAgICBpZiAocGFyZW50Lmxhc3RJbmRleCkgY2hpbGQubGFzdEluZGV4ID0gcGFyZW50Lmxhc3RJbmRleDtcbiAgICB9IGVsc2UgaWYgKGNsb25lLl9faXNEYXRlKHBhcmVudCkpIHtcbiAgICAgIGNoaWxkID0gbmV3IERhdGUocGFyZW50LmdldFRpbWUoKSk7XG4gICAgfSBlbHNlIGlmICh1c2VCdWZmZXIgJiYgQnVmZmVyLmlzQnVmZmVyKHBhcmVudCkpIHtcbiAgICAgIGNoaWxkID0gbmV3IEJ1ZmZlcihwYXJlbnQubGVuZ3RoKTtcbiAgICAgIHBhcmVudC5jb3B5KGNoaWxkKTtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9IGVsc2UgaWYgKF9pbnN0YW5jZW9mKHBhcmVudCwgRXJyb3IpKSB7XG4gICAgICBjaGlsZCA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiBwcm90b3R5cGUgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocGFyZW50KTtcbiAgICAgICAgY2hpbGQgPSBPYmplY3QuY3JlYXRlKHByb3RvKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjaGlsZCA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcbiAgICAgICAgcHJvdG8gPSBwcm90b3R5cGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNpcmN1bGFyKSB7XG4gICAgICB2YXIgaW5kZXggPSBhbGxQYXJlbnRzLmluZGV4T2YocGFyZW50KTtcblxuICAgICAgaWYgKGluZGV4ICE9IC0xKSB7XG4gICAgICAgIHJldHVybiBhbGxDaGlsZHJlbltpbmRleF07XG4gICAgICB9XG4gICAgICBhbGxQYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICAgIGFsbENoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgIH1cblxuICAgIGlmIChfaW5zdGFuY2VvZihwYXJlbnQsIG5hdGl2ZU1hcCkpIHtcbiAgICAgIHBhcmVudC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgdmFyIGtleUNoaWxkID0gX2Nsb25lKGtleSwgZGVwdGggLSAxKTtcbiAgICAgICAgdmFyIHZhbHVlQ2hpbGQgPSBfY2xvbmUodmFsdWUsIGRlcHRoIC0gMSk7XG4gICAgICAgIGNoaWxkLnNldChrZXlDaGlsZCwgdmFsdWVDaGlsZCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKF9pbnN0YW5jZW9mKHBhcmVudCwgbmF0aXZlU2V0KSkge1xuICAgICAgcGFyZW50LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGVudHJ5Q2hpbGQgPSBfY2xvbmUodmFsdWUsIGRlcHRoIC0gMSk7XG4gICAgICAgIGNoaWxkLmFkZChlbnRyeUNoaWxkKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgaW4gcGFyZW50KSB7XG4gICAgICB2YXIgYXR0cnM7XG4gICAgICBpZiAocHJvdG8pIHtcbiAgICAgICAgYXR0cnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvLCBpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGF0dHJzICYmIGF0dHJzLnNldCA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY2hpbGRbaV0gPSBfY2xvbmUocGFyZW50W2ldLCBkZXB0aCAtIDEpO1xuICAgIH1cblxuICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocGFyZW50KTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBEb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IGNsb25pbmcgYSBzeW1ib2wgYmVjYXVzZSBpdCBpcyBhIHByaW1pdGl2ZSxcbiAgICAgICAgLy8gbGlrZSBhIG51bWJlciBvciBzdHJpbmcuXG4gICAgICAgIHZhciBzeW1ib2wgPSBzeW1ib2xzW2ldO1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGFyZW50LCBzeW1ib2wpO1xuICAgICAgICBpZiAoZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci5lbnVtZXJhYmxlICYmICFpbmNsdWRlTm9uRW51bWVyYWJsZSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkW3N5bWJvbF0gPSBfY2xvbmUocGFyZW50W3N5bWJvbF0sIGRlcHRoIC0gMSk7XG4gICAgICAgIGlmICghZGVzY3JpcHRvci5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNoaWxkLCBzeW1ib2wsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW5jbHVkZU5vbkVudW1lcmFibGUpIHtcbiAgICAgIHZhciBhbGxQcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocGFyZW50KTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsUHJvcGVydHlOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcHJvcGVydHlOYW1lID0gYWxsUHJvcGVydHlOYW1lc1tpXTtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHBhcmVudCwgcHJvcGVydHlOYW1lKTtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRbcHJvcGVydHlOYW1lXSA9IF9jbG9uZShwYXJlbnRbcHJvcGVydHlOYW1lXSwgZGVwdGggLSAxKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNoaWxkLCBwcm9wZXJ0eU5hbWUsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cblxuICByZXR1cm4gX2Nsb25lKHBhcmVudCwgZGVwdGgpO1xufVxuXG4vKipcbiAqIFNpbXBsZSBmbGF0IGNsb25lIHVzaW5nIHByb3RvdHlwZSwgYWNjZXB0cyBvbmx5IG9iamVjdHMsIHVzZWZ1bGwgZm9yIHByb3BlcnR5XG4gKiBvdmVycmlkZSBvbiBGTEFUIGNvbmZpZ3VyYXRpb24gb2JqZWN0IChubyBuZXN0ZWQgcHJvcHMpLlxuICpcbiAqIFVTRSBXSVRIIENBVVRJT04hIFRoaXMgbWF5IG5vdCBiZWhhdmUgYXMgeW91IHdpc2ggaWYgeW91IGRvIG5vdCBrbm93IGhvdyB0aGlzXG4gKiB3b3Jrcy5cbiAqL1xuY2xvbmUuY2xvbmVQcm90b3R5cGUgPSBmdW5jdGlvbiBjbG9uZVByb3RvdHlwZShwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcblxuICB2YXIgYyA9IGZ1bmN0aW9uICgpIHt9O1xuICBjLnByb3RvdHlwZSA9IHBhcmVudDtcbiAgcmV0dXJuIG5ldyBjKCk7XG59O1xuXG4vLyBwcml2YXRlIHV0aWxpdHkgZnVuY3Rpb25zXG5cbmZ1bmN0aW9uIF9fb2JqVG9TdHIobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuY2xvbmUuX19vYmpUb1N0ciA9IF9fb2JqVG9TdHI7XG5cbmZ1bmN0aW9uIF9faXNEYXRlKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBfX29ialRvU3RyKG8pID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5jbG9uZS5fX2lzRGF0ZSA9IF9faXNEYXRlO1xuXG5mdW5jdGlvbiBfX2lzQXJyYXkobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIF9fb2JqVG9TdHIobykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5jbG9uZS5fX2lzQXJyYXkgPSBfX2lzQXJyYXk7XG5cbmZ1bmN0aW9uIF9faXNSZWdFeHAobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIF9fb2JqVG9TdHIobykgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuY2xvbmUuX19pc1JlZ0V4cCA9IF9faXNSZWdFeHA7XG5cbmZ1bmN0aW9uIF9fZ2V0UmVnRXhwRmxhZ3MocmUpIHtcbiAgdmFyIGZsYWdzID0gJyc7XG4gIGlmIChyZS5nbG9iYWwpIGZsYWdzICs9ICdnJztcbiAgaWYgKHJlLmlnbm9yZUNhc2UpIGZsYWdzICs9ICdpJztcbiAgaWYgKHJlLm11bHRpbGluZSkgZmxhZ3MgKz0gJ20nO1xuICByZXR1cm4gZmxhZ3M7XG59XG5jbG9uZS5fX2dldFJlZ0V4cEZsYWdzID0gX19nZXRSZWdFeHBGbGFncztcblxucmV0dXJuIGNsb25lO1xufSkoKTtcblxuaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY2xvbmU7XG59XG5cblxuLyoqKi8gfSksXG4vKiAyMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX2VtaXR0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX2VtaXR0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZW1pdHRlcik7XG5cbnZhciBfYmxvY2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2Jsb2NrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jsb2NrKTtcblxudmFyIF9icmVhayA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG52YXIgX2JyZWFrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2JyZWFrKTtcblxudmFyIF9jb2RlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cbnZhciBfY29kZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb2RlKTtcblxudmFyIF9jb250YWluZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KTtcblxudmFyIF9jb250YWluZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29udGFpbmVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5mdW5jdGlvbiBpc0xpbmUoYmxvdCkge1xuICByZXR1cm4gYmxvdCBpbnN0YW5jZW9mIF9ibG9jazIuZGVmYXVsdCB8fCBibG90IGluc3RhbmNlb2YgX2Jsb2NrLkJsb2NrRW1iZWQ7XG59XG5cbnZhciBTY3JvbGwgPSBmdW5jdGlvbiAoX1BhcmNobWVudCRTY3JvbGwpIHtcbiAgX2luaGVyaXRzKFNjcm9sbCwgX1BhcmNobWVudCRTY3JvbGwpO1xuXG4gIGZ1bmN0aW9uIFNjcm9sbChkb21Ob2RlLCBjb25maWcpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2Nyb2xsKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTY3JvbGwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTY3JvbGwpKS5jYWxsKHRoaXMsIGRvbU5vZGUpKTtcblxuICAgIF90aGlzLmVtaXR0ZXIgPSBjb25maWcuZW1pdHRlcjtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb25maWcud2hpdGVsaXN0KSkge1xuICAgICAgX3RoaXMud2hpdGVsaXN0ID0gY29uZmlnLndoaXRlbGlzdC5yZWR1Y2UoZnVuY3Rpb24gKHdoaXRlbGlzdCwgZm9ybWF0KSB7XG4gICAgICAgIHdoaXRlbGlzdFtmb3JtYXRdID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHdoaXRlbGlzdDtcbiAgICAgIH0sIHt9KTtcbiAgICB9XG4gICAgLy8gU29tZSByZWFzb24gZml4ZXMgY29tcG9zaXRpb24gaXNzdWVzIHdpdGggY2hhcmFjdGVyIGxhbmd1YWdlcyBpbiBXaW5kb3dzL0Nocm9tZSwgU2FmYXJpXG4gICAgX3RoaXMuZG9tTm9kZS5hZGRFdmVudExpc3RlbmVyKCdET01Ob2RlSW5zZXJ0ZWQnLCBmdW5jdGlvbiAoKSB7fSk7XG4gICAgX3RoaXMub3B0aW1pemUoKTtcbiAgICBfdGhpcy5lbmFibGUoKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2Nyb2xsLCBbe1xuICAgIGtleTogJ2JhdGNoU3RhcnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBiYXRjaFN0YXJ0KCkge1xuICAgICAgdGhpcy5iYXRjaCA9IHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYmF0Y2hFbmQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBiYXRjaEVuZCgpIHtcbiAgICAgIHRoaXMuYmF0Y2ggPSBmYWxzZTtcbiAgICAgIHRoaXMub3B0aW1pemUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZWxldGVBdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUF0KGluZGV4LCBsZW5ndGgpIHtcbiAgICAgIHZhciBfbGluZSA9IHRoaXMubGluZShpbmRleCksXG4gICAgICAgICAgX2xpbmUyID0gX3NsaWNlZFRvQXJyYXkoX2xpbmUsIDIpLFxuICAgICAgICAgIGZpcnN0ID0gX2xpbmUyWzBdLFxuICAgICAgICAgIG9mZnNldCA9IF9saW5lMlsxXTtcblxuICAgICAgdmFyIF9saW5lMyA9IHRoaXMubGluZShpbmRleCArIGxlbmd0aCksXG4gICAgICAgICAgX2xpbmU0ID0gX3NsaWNlZFRvQXJyYXkoX2xpbmUzLCAxKSxcbiAgICAgICAgICBsYXN0ID0gX2xpbmU0WzBdO1xuXG4gICAgICBfZ2V0KFNjcm9sbC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTY3JvbGwucHJvdG90eXBlKSwgJ2RlbGV0ZUF0JywgdGhpcykuY2FsbCh0aGlzLCBpbmRleCwgbGVuZ3RoKTtcbiAgICAgIGlmIChsYXN0ICE9IG51bGwgJiYgZmlyc3QgIT09IGxhc3QgJiYgb2Zmc2V0ID4gMCkge1xuICAgICAgICBpZiAoZmlyc3QgaW5zdGFuY2VvZiBfYmxvY2suQmxvY2tFbWJlZCB8fCBsYXN0IGluc3RhbmNlb2YgX2Jsb2NrLkJsb2NrRW1iZWQpIHtcbiAgICAgICAgICB0aGlzLm9wdGltaXplKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaXJzdCBpbnN0YW5jZW9mIF9jb2RlMi5kZWZhdWx0KSB7XG4gICAgICAgICAgdmFyIG5ld2xpbmVJbmRleCA9IGZpcnN0Lm5ld2xpbmVJbmRleChmaXJzdC5sZW5ndGgoKSwgdHJ1ZSk7XG4gICAgICAgICAgaWYgKG5ld2xpbmVJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICBmaXJzdCA9IGZpcnN0LnNwbGl0KG5ld2xpbmVJbmRleCArIDEpO1xuICAgICAgICAgICAgaWYgKGZpcnN0ID09PSBsYXN0KSB7XG4gICAgICAgICAgICAgIHRoaXMub3B0aW1pemUoKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChsYXN0IGluc3RhbmNlb2YgX2NvZGUyLmRlZmF1bHQpIHtcbiAgICAgICAgICB2YXIgX25ld2xpbmVJbmRleCA9IGxhc3QubmV3bGluZUluZGV4KDApO1xuICAgICAgICAgIGlmIChfbmV3bGluZUluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIGxhc3Quc3BsaXQoX25ld2xpbmVJbmRleCArIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVmID0gbGFzdC5jaGlsZHJlbi5oZWFkIGluc3RhbmNlb2YgX2JyZWFrMi5kZWZhdWx0ID8gbnVsbCA6IGxhc3QuY2hpbGRyZW4uaGVhZDtcbiAgICAgICAgZmlyc3QubW92ZUNoaWxkcmVuKGxhc3QsIHJlZik7XG4gICAgICAgIGZpcnN0LnJlbW92ZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5vcHRpbWl6ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VuYWJsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIHZhciBlbmFibGVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0cnVlO1xuXG4gICAgICB0aGlzLmRvbU5vZGUuc2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnLCBlbmFibGVkKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRBdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdEF0KGluZGV4LCBsZW5ndGgsIGZvcm1hdCwgdmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLndoaXRlbGlzdCAhPSBudWxsICYmICF0aGlzLndoaXRlbGlzdFtmb3JtYXRdKSByZXR1cm47XG4gICAgICBfZ2V0KFNjcm9sbC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTY3JvbGwucHJvdG90eXBlKSwgJ2Zvcm1hdEF0JywgdGhpcykuY2FsbCh0aGlzLCBpbmRleCwgbGVuZ3RoLCBmb3JtYXQsIHZhbHVlKTtcbiAgICAgIHRoaXMub3B0aW1pemUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRBdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydEF0KGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICBpZiAoZGVmICE9IG51bGwgJiYgdGhpcy53aGl0ZWxpc3QgIT0gbnVsbCAmJiAhdGhpcy53aGl0ZWxpc3RbdmFsdWVdKSByZXR1cm47XG4gICAgICBpZiAoaW5kZXggPj0gdGhpcy5sZW5ndGgoKSkge1xuICAgICAgICBpZiAoZGVmID09IG51bGwgfHwgX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeSh2YWx1ZSwgX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5CTE9DSykgPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBibG90ID0gX3BhcmNobWVudDIuZGVmYXVsdC5jcmVhdGUodGhpcy5zdGF0aWNzLmRlZmF1bHRDaGlsZCk7XG4gICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChibG90KTtcbiAgICAgICAgICBpZiAoZGVmID09IG51bGwgJiYgdmFsdWUuZW5kc1dpdGgoJ1xcbicpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYmxvdC5pbnNlcnRBdCgwLCB2YWx1ZSwgZGVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgZW1iZWQgPSBfcGFyY2htZW50Mi5kZWZhdWx0LmNyZWF0ZSh2YWx1ZSwgZGVmKTtcbiAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGVtYmVkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2dldChTY3JvbGwucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2Nyb2xsLnByb3RvdHlwZSksICdpbnNlcnRBdCcsIHRoaXMpLmNhbGwodGhpcywgaW5kZXgsIHZhbHVlLCBkZWYpO1xuICAgICAgfVxuICAgICAgdGhpcy5vcHRpbWl6ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2luc2VydEJlZm9yZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydEJlZm9yZShibG90LCByZWYpIHtcbiAgICAgIGlmIChibG90LnN0YXRpY3Muc2NvcGUgPT09IF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuSU5MSU5FX0JMT1QpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBfcGFyY2htZW50Mi5kZWZhdWx0LmNyZWF0ZSh0aGlzLnN0YXRpY3MuZGVmYXVsdENoaWxkKTtcbiAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChibG90KTtcbiAgICAgICAgYmxvdCA9IHdyYXBwZXI7XG4gICAgICB9XG4gICAgICBfZ2V0KFNjcm9sbC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTY3JvbGwucHJvdG90eXBlKSwgJ2luc2VydEJlZm9yZScsIHRoaXMpLmNhbGwodGhpcywgYmxvdCwgcmVmKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdsZWFmJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGVhZihpbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMucGF0aChpbmRleCkucG9wKCkgfHwgW251bGwsIC0xXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdsaW5lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGluZShpbmRleCkge1xuICAgICAgaWYgKGluZGV4ID09PSB0aGlzLmxlbmd0aCgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpbmUoaW5kZXggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmRlc2NlbmRhbnQoaXNMaW5lLCBpbmRleCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbGluZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaW5lcygpIHtcbiAgICAgIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IE51bWJlci5NQVhfVkFMVUU7XG5cbiAgICAgIHZhciBnZXRMaW5lcyA9IGZ1bmN0aW9uIGdldExpbmVzKGJsb3QsIGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGxpbmVzID0gW10sXG4gICAgICAgICAgICBsZW5ndGhMZWZ0ID0gbGVuZ3RoO1xuICAgICAgICBibG90LmNoaWxkcmVuLmZvckVhY2hBdChpbmRleCwgbGVuZ3RoLCBmdW5jdGlvbiAoY2hpbGQsIGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAoaXNMaW5lKGNoaWxkKSkge1xuICAgICAgICAgICAgbGluZXMucHVzaChjaGlsZCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGlsZCBpbnN0YW5jZW9mIF9wYXJjaG1lbnQyLmRlZmF1bHQuQ29udGFpbmVyKSB7XG4gICAgICAgICAgICBsaW5lcyA9IGxpbmVzLmNvbmNhdChnZXRMaW5lcyhjaGlsZCwgaW5kZXgsIGxlbmd0aExlZnQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoTGVmdCAtPSBsZW5ndGg7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbGluZXM7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGdldExpbmVzKHRoaXMsIGluZGV4LCBsZW5ndGgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29wdGltaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3B0aW1pemUoKSB7XG4gICAgICB2YXIgbXV0YXRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgICAgIHZhciBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgICAgaWYgKHRoaXMuYmF0Y2ggPT09IHRydWUpIHJldHVybjtcbiAgICAgIF9nZXQoU2Nyb2xsLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNjcm9sbC5wcm90b3R5cGUpLCAnb3B0aW1pemUnLCB0aGlzKS5jYWxsKHRoaXMsIG11dGF0aW9ucywgY29udGV4dCk7XG4gICAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoX2VtaXR0ZXIyLmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9PUFRJTUlaRSwgbXV0YXRpb25zLCBjb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwYXRoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF0aChpbmRleCkge1xuICAgICAgcmV0dXJuIF9nZXQoU2Nyb2xsLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNjcm9sbC5wcm90b3R5cGUpLCAncGF0aCcsIHRoaXMpLmNhbGwodGhpcywgaW5kZXgpLnNsaWNlKDEpOyAvLyBFeGNsdWRlIHNlbGZcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUobXV0YXRpb25zKSB7XG4gICAgICBpZiAodGhpcy5iYXRjaCA9PT0gdHJ1ZSkgcmV0dXJuO1xuICAgICAgdmFyIHNvdXJjZSA9IF9lbWl0dGVyMi5kZWZhdWx0LnNvdXJjZXMuVVNFUjtcbiAgICAgIGlmICh0eXBlb2YgbXV0YXRpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgICBzb3VyY2UgPSBtdXRhdGlvbnM7XG4gICAgICB9XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkobXV0YXRpb25zKSkge1xuICAgICAgICBtdXRhdGlvbnMgPSB0aGlzLm9ic2VydmVyLnRha2VSZWNvcmRzKCk7XG4gICAgICB9XG4gICAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoX2VtaXR0ZXIyLmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9CRUZPUkVfVVBEQVRFLCBzb3VyY2UsIG11dGF0aW9ucyk7XG4gICAgICB9XG4gICAgICBfZ2V0KFNjcm9sbC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTY3JvbGwucHJvdG90eXBlKSwgJ3VwZGF0ZScsIHRoaXMpLmNhbGwodGhpcywgbXV0YXRpb25zLmNvbmNhdChbXSkpOyAvLyBwYXNzIGNvcHlcbiAgICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdChfZW1pdHRlcjIuZGVmYXVsdC5ldmVudHMuU0NST0xMX1VQREFURSwgc291cmNlLCBtdXRhdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTY3JvbGw7XG59KF9wYXJjaG1lbnQyLmRlZmF1bHQuU2Nyb2xsKTtcblxuU2Nyb2xsLmJsb3ROYW1lID0gJ3Njcm9sbCc7XG5TY3JvbGwuY2xhc3NOYW1lID0gJ3FsLWVkaXRvcic7XG5TY3JvbGwudGFnTmFtZSA9ICdESVYnO1xuU2Nyb2xsLmRlZmF1bHRDaGlsZCA9ICdibG9jayc7XG5TY3JvbGwuYWxsb3dlZENoaWxkcmVuID0gW19ibG9jazIuZGVmYXVsdCwgX2Jsb2NrLkJsb2NrRW1iZWQsIF9jb250YWluZXIyLmRlZmF1bHRdO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTY3JvbGw7XG5cbi8qKiovIH0pLFxuLyogMjMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU0hPUlRLRVkgPSBleHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2Nsb25lID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cbnZhciBfY2xvbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xvbmUpO1xuXG52YXIgX2RlZXBFcXVhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG52YXIgX2RlZXBFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWVwRXF1YWwpO1xuXG52YXIgX2V4dGVuZCA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfZXh0ZW5kMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZCk7XG5cbnZhciBfcXVpbGxEZWx0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfcXVpbGxEZWx0YTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWlsbERlbHRhKTtcblxudmFyIF9vcCA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXG52YXIgX29wMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29wKTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX3F1aWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF9xdWlsbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWlsbCk7XG5cbnZhciBfbG9nZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cbnZhciBfbG9nZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvZ2dlcik7XG5cbnZhciBfbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblxudmFyIF9tb2R1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9kdWxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgZGVidWcgPSAoMCwgX2xvZ2dlcjIuZGVmYXVsdCkoJ3F1aWxsOmtleWJvYXJkJyk7XG5cbnZhciBTSE9SVEtFWSA9IC9NYWMvaS50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSkgPyAnbWV0YUtleScgOiAnY3RybEtleSc7XG5cbnZhciBLZXlib2FyZCA9IGZ1bmN0aW9uIChfTW9kdWxlKSB7XG4gIF9pbmhlcml0cyhLZXlib2FyZCwgX01vZHVsZSk7XG5cbiAgX2NyZWF0ZUNsYXNzKEtleWJvYXJkLCBudWxsLCBbe1xuICAgIGtleTogJ21hdGNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWF0Y2goZXZ0LCBiaW5kaW5nKSB7XG4gICAgICBiaW5kaW5nID0gbm9ybWFsaXplKGJpbmRpbmcpO1xuICAgICAgaWYgKFsnYWx0S2V5JywgJ2N0cmxLZXknLCAnbWV0YUtleScsICdzaGlmdEtleSddLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gISFiaW5kaW5nW2tleV0gIT09IGV2dFtrZXldICYmIGJpbmRpbmdba2V5XSAhPT0gbnVsbDtcbiAgICAgIH0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiaW5kaW5nLmtleSA9PT0gKGV2dC53aGljaCB8fCBldnQua2V5Q29kZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgZnVuY3Rpb24gS2V5Ym9hcmQocXVpbGwsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgS2V5Ym9hcmQpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEtleWJvYXJkLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoS2V5Ym9hcmQpKS5jYWxsKHRoaXMsIHF1aWxsLCBvcHRpb25zKSk7XG5cbiAgICBfdGhpcy5iaW5kaW5ncyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKF90aGlzLm9wdGlvbnMuYmluZGluZ3MpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIGlmIChuYW1lID09PSAnbGlzdCBhdXRvZmlsbCcgJiYgcXVpbGwuc2Nyb2xsLndoaXRlbGlzdCAhPSBudWxsICYmICFxdWlsbC5zY3JvbGwud2hpdGVsaXN0WydsaXN0J10pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLm9wdGlvbnMuYmluZGluZ3NbbmFtZV0pIHtcbiAgICAgICAgX3RoaXMuYWRkQmluZGluZyhfdGhpcy5vcHRpb25zLmJpbmRpbmdzW25hbWVdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfdGhpcy5hZGRCaW5kaW5nKHsga2V5OiBLZXlib2FyZC5rZXlzLkVOVEVSLCBzaGlmdEtleTogbnVsbCB9LCBoYW5kbGVFbnRlcik7XG4gICAgX3RoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5FTlRFUiwgbWV0YUtleTogbnVsbCwgY3RybEtleTogbnVsbCwgYWx0S2V5OiBudWxsIH0sIGZ1bmN0aW9uICgpIHt9KTtcbiAgICBpZiAoL0ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAvLyBOZWVkIHRvIGhhbmRsZSBkZWxldGUgYW5kIGJhY2tzcGFjZSBmb3IgRmlyZWZveCBpbiB0aGUgZ2VuZXJhbCBjYXNlICMxMTcxXG4gICAgICBfdGhpcy5hZGRCaW5kaW5nKHsga2V5OiBLZXlib2FyZC5rZXlzLkJBQ0tTUEFDRSB9LCB7IGNvbGxhcHNlZDogdHJ1ZSB9LCBoYW5kbGVCYWNrc3BhY2UpO1xuICAgICAgX3RoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5ERUxFVEUgfSwgeyBjb2xsYXBzZWQ6IHRydWUgfSwgaGFuZGxlRGVsZXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5CQUNLU1BBQ0UgfSwgeyBjb2xsYXBzZWQ6IHRydWUsIHByZWZpeDogL14uPyQvIH0sIGhhbmRsZUJhY2tzcGFjZSk7XG4gICAgICBfdGhpcy5hZGRCaW5kaW5nKHsga2V5OiBLZXlib2FyZC5rZXlzLkRFTEVURSB9LCB7IGNvbGxhcHNlZDogdHJ1ZSwgc3VmZml4OiAvXi4/JC8gfSwgaGFuZGxlRGVsZXRlKTtcbiAgICB9XG4gICAgX3RoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5CQUNLU1BBQ0UgfSwgeyBjb2xsYXBzZWQ6IGZhbHNlIH0sIGhhbmRsZURlbGV0ZVJhbmdlKTtcbiAgICBfdGhpcy5hZGRCaW5kaW5nKHsga2V5OiBLZXlib2FyZC5rZXlzLkRFTEVURSB9LCB7IGNvbGxhcHNlZDogZmFsc2UgfSwgaGFuZGxlRGVsZXRlUmFuZ2UpO1xuICAgIF90aGlzLmFkZEJpbmRpbmcoeyBrZXk6IEtleWJvYXJkLmtleXMuQkFDS1NQQUNFLCBhbHRLZXk6IG51bGwsIGN0cmxLZXk6IG51bGwsIG1ldGFLZXk6IG51bGwsIHNoaWZ0S2V5OiBudWxsIH0sIHsgY29sbGFwc2VkOiB0cnVlLCBvZmZzZXQ6IDAgfSwgaGFuZGxlQmFja3NwYWNlKTtcbiAgICBfdGhpcy5saXN0ZW4oKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoS2V5Ym9hcmQsIFt7XG4gICAga2V5OiAnYWRkQmluZGluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEJpbmRpbmcoa2V5KSB7XG4gICAgICB2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgaGFuZGxlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgICAgIHZhciBiaW5kaW5nID0gbm9ybWFsaXplKGtleSk7XG4gICAgICBpZiAoYmluZGluZyA9PSBudWxsIHx8IGJpbmRpbmcua2V5ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGRlYnVnLndhcm4oJ0F0dGVtcHRlZCB0byBhZGQgaW52YWxpZCBrZXlib2FyZCBiaW5kaW5nJywgYmluZGluZyk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGNvbnRleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29udGV4dCA9IHsgaGFuZGxlcjogY29udGV4dCB9O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGhhbmRsZXIgPSB7IGhhbmRsZXI6IGhhbmRsZXIgfTtcbiAgICAgIH1cbiAgICAgIGJpbmRpbmcgPSAoMCwgX2V4dGVuZDIuZGVmYXVsdCkoYmluZGluZywgY29udGV4dCwgaGFuZGxlcik7XG4gICAgICB0aGlzLmJpbmRpbmdzW2JpbmRpbmcua2V5XSA9IHRoaXMuYmluZGluZ3NbYmluZGluZy5rZXldIHx8IFtdO1xuICAgICAgdGhpcy5iaW5kaW5nc1tiaW5kaW5nLmtleV0ucHVzaChiaW5kaW5nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdsaXN0ZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW4oKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5xdWlsbC5yb290LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIGlmIChldnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuICAgICAgICB2YXIgd2hpY2ggPSBldnQud2hpY2ggfHwgZXZ0LmtleUNvZGU7XG4gICAgICAgIHZhciBiaW5kaW5ncyA9IChfdGhpczIuYmluZGluZ3Nbd2hpY2hdIHx8IFtdKS5maWx0ZXIoZnVuY3Rpb24gKGJpbmRpbmcpIHtcbiAgICAgICAgICByZXR1cm4gS2V5Ym9hcmQubWF0Y2goZXZ0LCBiaW5kaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChiaW5kaW5ncy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgICAgdmFyIHJhbmdlID0gX3RoaXMyLnF1aWxsLmdldFNlbGVjdGlvbigpO1xuICAgICAgICBpZiAocmFuZ2UgPT0gbnVsbCB8fCAhX3RoaXMyLnF1aWxsLmhhc0ZvY3VzKCkpIHJldHVybjtcblxuICAgICAgICB2YXIgX3F1aWxsJGdldExpbmUgPSBfdGhpczIucXVpbGwuZ2V0TGluZShyYW5nZS5pbmRleCksXG4gICAgICAgICAgICBfcXVpbGwkZ2V0TGluZTIgPSBfc2xpY2VkVG9BcnJheShfcXVpbGwkZ2V0TGluZSwgMiksXG4gICAgICAgICAgICBsaW5lID0gX3F1aWxsJGdldExpbmUyWzBdLFxuICAgICAgICAgICAgb2Zmc2V0ID0gX3F1aWxsJGdldExpbmUyWzFdO1xuXG4gICAgICAgIHZhciBfcXVpbGwkZ2V0TGVhZiA9IF90aGlzMi5xdWlsbC5nZXRMZWFmKHJhbmdlLmluZGV4KSxcbiAgICAgICAgICAgIF9xdWlsbCRnZXRMZWFmMiA9IF9zbGljZWRUb0FycmF5KF9xdWlsbCRnZXRMZWFmLCAyKSxcbiAgICAgICAgICAgIGxlYWZTdGFydCA9IF9xdWlsbCRnZXRMZWFmMlswXSxcbiAgICAgICAgICAgIG9mZnNldFN0YXJ0ID0gX3F1aWxsJGdldExlYWYyWzFdO1xuXG4gICAgICAgIHZhciBfcmVmID0gcmFuZ2UubGVuZ3RoID09PSAwID8gW2xlYWZTdGFydCwgb2Zmc2V0U3RhcnRdIDogX3RoaXMyLnF1aWxsLmdldExlYWYocmFuZ2UuaW5kZXggKyByYW5nZS5sZW5ndGgpLFxuICAgICAgICAgICAgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgICAgIGxlYWZFbmQgPSBfcmVmMlswXSxcbiAgICAgICAgICAgIG9mZnNldEVuZCA9IF9yZWYyWzFdO1xuXG4gICAgICAgIHZhciBwcmVmaXhUZXh0ID0gbGVhZlN0YXJ0IGluc3RhbmNlb2YgX3BhcmNobWVudDIuZGVmYXVsdC5UZXh0ID8gbGVhZlN0YXJ0LnZhbHVlKCkuc2xpY2UoMCwgb2Zmc2V0U3RhcnQpIDogJyc7XG4gICAgICAgIHZhciBzdWZmaXhUZXh0ID0gbGVhZkVuZCBpbnN0YW5jZW9mIF9wYXJjaG1lbnQyLmRlZmF1bHQuVGV4dCA/IGxlYWZFbmQudmFsdWUoKS5zbGljZShvZmZzZXRFbmQpIDogJyc7XG4gICAgICAgIHZhciBjdXJDb250ZXh0ID0ge1xuICAgICAgICAgIGNvbGxhcHNlZDogcmFuZ2UubGVuZ3RoID09PSAwLFxuICAgICAgICAgIGVtcHR5OiByYW5nZS5sZW5ndGggPT09IDAgJiYgbGluZS5sZW5ndGgoKSA8PSAxLFxuICAgICAgICAgIGZvcm1hdDogX3RoaXMyLnF1aWxsLmdldEZvcm1hdChyYW5nZSksXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgcHJlZml4OiBwcmVmaXhUZXh0LFxuICAgICAgICAgIHN1ZmZpeDogc3VmZml4VGV4dFxuICAgICAgICB9O1xuICAgICAgICB2YXIgcHJldmVudGVkID0gYmluZGluZ3Muc29tZShmdW5jdGlvbiAoYmluZGluZykge1xuICAgICAgICAgIGlmIChiaW5kaW5nLmNvbGxhcHNlZCAhPSBudWxsICYmIGJpbmRpbmcuY29sbGFwc2VkICE9PSBjdXJDb250ZXh0LmNvbGxhcHNlZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGlmIChiaW5kaW5nLmVtcHR5ICE9IG51bGwgJiYgYmluZGluZy5lbXB0eSAhPT0gY3VyQ29udGV4dC5lbXB0eSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGlmIChiaW5kaW5nLm9mZnNldCAhPSBudWxsICYmIGJpbmRpbmcub2Zmc2V0ICE9PSBjdXJDb250ZXh0Lm9mZnNldCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmcuZm9ybWF0KSkge1xuICAgICAgICAgICAgLy8gYW55IGZvcm1hdCBpcyBwcmVzZW50XG4gICAgICAgICAgICBpZiAoYmluZGluZy5mb3JtYXQuZXZlcnkoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGN1ckNvbnRleHQuZm9ybWF0W25hbWVdID09IG51bGw7XG4gICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChfdHlwZW9mKGJpbmRpbmcuZm9ybWF0KSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIC8vIGFsbCBmb3JtYXRzIG11c3QgbWF0Y2hcbiAgICAgICAgICAgIGlmICghT2JqZWN0LmtleXMoYmluZGluZy5mb3JtYXQpLmV2ZXJ5KGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgIGlmIChiaW5kaW5nLmZvcm1hdFtuYW1lXSA9PT0gdHJ1ZSkgcmV0dXJuIGN1ckNvbnRleHQuZm9ybWF0W25hbWVdICE9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChiaW5kaW5nLmZvcm1hdFtuYW1lXSA9PT0gZmFsc2UpIHJldHVybiBjdXJDb250ZXh0LmZvcm1hdFtuYW1lXSA9PSBudWxsO1xuICAgICAgICAgICAgICByZXR1cm4gKDAsIF9kZWVwRXF1YWwyLmRlZmF1bHQpKGJpbmRpbmcuZm9ybWF0W25hbWVdLCBjdXJDb250ZXh0LmZvcm1hdFtuYW1lXSk7XG4gICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChiaW5kaW5nLnByZWZpeCAhPSBudWxsICYmICFiaW5kaW5nLnByZWZpeC50ZXN0KGN1ckNvbnRleHQucHJlZml4KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGlmIChiaW5kaW5nLnN1ZmZpeCAhPSBudWxsICYmICFiaW5kaW5nLnN1ZmZpeC50ZXN0KGN1ckNvbnRleHQuc3VmZml4KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIHJldHVybiBiaW5kaW5nLmhhbmRsZXIuY2FsbChfdGhpczIsIHJhbmdlLCBjdXJDb250ZXh0KSAhPT0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcmV2ZW50ZWQpIHtcbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEtleWJvYXJkO1xufShfbW9kdWxlMi5kZWZhdWx0KTtcblxuS2V5Ym9hcmQua2V5cyA9IHtcbiAgQkFDS1NQQUNFOiA4LFxuICBUQUI6IDksXG4gIEVOVEVSOiAxMyxcbiAgRVNDQVBFOiAyNyxcbiAgTEVGVDogMzcsXG4gIFVQOiAzOCxcbiAgUklHSFQ6IDM5LFxuICBET1dOOiA0MCxcbiAgREVMRVRFOiA0NlxufTtcblxuS2V5Ym9hcmQuREVGQVVMVFMgPSB7XG4gIGJpbmRpbmdzOiB7XG4gICAgJ2JvbGQnOiBtYWtlRm9ybWF0SGFuZGxlcignYm9sZCcpLFxuICAgICdpdGFsaWMnOiBtYWtlRm9ybWF0SGFuZGxlcignaXRhbGljJyksXG4gICAgJ3VuZGVybGluZSc6IG1ha2VGb3JtYXRIYW5kbGVyKCd1bmRlcmxpbmUnKSxcbiAgICAnaW5kZW50Jzoge1xuICAgICAgLy8gaGlnaGxpZ2h0IHRhYiBvciB0YWIgYXQgYmVnaW5uaW5nIG9mIGxpc3QsIGluZGVudCBvciBibG9ja3F1b3RlXG4gICAgICBrZXk6IEtleWJvYXJkLmtleXMuVEFCLFxuICAgICAgZm9ybWF0OiBbJ2Jsb2NrcXVvdGUnLCAnaW5kZW50JywgJ2xpc3QnXSxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIocmFuZ2UsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQuY29sbGFwc2VkICYmIGNvbnRleHQub2Zmc2V0ICE9PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2luZGVudCcsICcrMScsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ291dGRlbnQnOiB7XG4gICAgICBrZXk6IEtleWJvYXJkLmtleXMuVEFCLFxuICAgICAgc2hpZnRLZXk6IHRydWUsXG4gICAgICBmb3JtYXQ6IFsnYmxvY2txdW90ZScsICdpbmRlbnQnLCAnbGlzdCddLFxuICAgICAgLy8gaGlnaGxpZ2h0IHRhYiBvciB0YWIgYXQgYmVnaW5uaW5nIG9mIGxpc3QsIGluZGVudCBvciBibG9ja3F1b3RlXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0LmNvbGxhcHNlZCAmJiBjb250ZXh0Lm9mZnNldCAhPT0gMCkgcmV0dXJuIHRydWU7XG4gICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdpbmRlbnQnLCAnLTEnLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdvdXRkZW50IGJhY2tzcGFjZSc6IHtcbiAgICAgIGtleTogS2V5Ym9hcmQua2V5cy5CQUNLU1BBQ0UsXG4gICAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgICBzaGlmdEtleTogbnVsbCxcbiAgICAgIG1ldGFLZXk6IG51bGwsXG4gICAgICBjdHJsS2V5OiBudWxsLFxuICAgICAgYWx0S2V5OiBudWxsLFxuICAgICAgZm9ybWF0OiBbJ2luZGVudCcsICdsaXN0J10sXG4gICAgICBvZmZzZXQ6IDAsXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0LmZvcm1hdC5pbmRlbnQgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdpbmRlbnQnLCAnLTEnLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0LmZvcm1hdC5saXN0ICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnbGlzdCcsIGZhbHNlLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgJ2luZGVudCBjb2RlLWJsb2NrJzogbWFrZUNvZGVCbG9ja0hhbmRsZXIodHJ1ZSksXG4gICAgJ291dGRlbnQgY29kZS1ibG9jayc6IG1ha2VDb2RlQmxvY2tIYW5kbGVyKGZhbHNlKSxcbiAgICAncmVtb3ZlIHRhYic6IHtcbiAgICAgIGtleTogS2V5Ym9hcmQua2V5cy5UQUIsXG4gICAgICBzaGlmdEtleTogdHJ1ZSxcbiAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgIHByZWZpeDogL1xcdCQvLFxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihyYW5nZSkge1xuICAgICAgICB0aGlzLnF1aWxsLmRlbGV0ZVRleHQocmFuZ2UuaW5kZXggLSAxLCAxLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICd0YWInOiB7XG4gICAgICBrZXk6IEtleWJvYXJkLmtleXMuVEFCLFxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihyYW5nZSkge1xuICAgICAgICB0aGlzLnF1aWxsLmhpc3RvcnkuY3V0b2ZmKCk7XG4gICAgICAgIHZhciBkZWx0YSA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihyYW5nZS5pbmRleCkuZGVsZXRlKHJhbmdlLmxlbmd0aCkuaW5zZXJ0KCdcXHQnKTtcbiAgICAgICAgdGhpcy5xdWlsbC51cGRhdGVDb250ZW50cyhkZWx0YSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgIHRoaXMucXVpbGwuaGlzdG9yeS5jdXRvZmYoKTtcbiAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXggKyAxLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2xpc3QgZW1wdHkgZW50ZXInOiB7XG4gICAgICBrZXk6IEtleWJvYXJkLmtleXMuRU5URVIsXG4gICAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgICBmb3JtYXQ6IFsnbGlzdCddLFxuICAgICAgZW1wdHk6IHRydWUsXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdsaXN0JywgZmFsc2UsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICBpZiAoY29udGV4dC5mb3JtYXQuaW5kZW50KSB7XG4gICAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2luZGVudCcsIGZhbHNlLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgJ2NoZWNrbGlzdCBlbnRlcic6IHtcbiAgICAgIGtleTogS2V5Ym9hcmQua2V5cy5FTlRFUixcbiAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgIGZvcm1hdDogeyBsaXN0OiAnY2hlY2tlZCcgfSxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIocmFuZ2UpIHtcbiAgICAgICAgdmFyIF9xdWlsbCRnZXRMaW5lMyA9IHRoaXMucXVpbGwuZ2V0TGluZShyYW5nZS5pbmRleCksXG4gICAgICAgICAgICBfcXVpbGwkZ2V0TGluZTQgPSBfc2xpY2VkVG9BcnJheShfcXVpbGwkZ2V0TGluZTMsIDIpLFxuICAgICAgICAgICAgbGluZSA9IF9xdWlsbCRnZXRMaW5lNFswXSxcbiAgICAgICAgICAgIG9mZnNldCA9IF9xdWlsbCRnZXRMaW5lNFsxXTtcblxuICAgICAgICB2YXIgZm9ybWF0cyA9ICgwLCBfZXh0ZW5kMi5kZWZhdWx0KSh7fSwgbGluZS5mb3JtYXRzKCksIHsgbGlzdDogJ2NoZWNrZWQnIH0pO1xuICAgICAgICB2YXIgZGVsdGEgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5yZXRhaW4ocmFuZ2UuaW5kZXgpLmluc2VydCgnXFxuJywgZm9ybWF0cykucmV0YWluKGxpbmUubGVuZ3RoKCkgLSBvZmZzZXQgLSAxKS5yZXRhaW4oMSwgeyBsaXN0OiAndW5jaGVja2VkJyB9KTtcbiAgICAgICAgdGhpcy5xdWlsbC51cGRhdGVDb250ZW50cyhkZWx0YSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4ICsgMSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgICAgdGhpcy5xdWlsbC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2hlYWRlciBlbnRlcic6IHtcbiAgICAgIGtleTogS2V5Ym9hcmQua2V5cy5FTlRFUixcbiAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgIGZvcm1hdDogWydoZWFkZXInXSxcbiAgICAgIHN1ZmZpeDogL14kLyxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIocmFuZ2UsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF9xdWlsbCRnZXRMaW5lNSA9IHRoaXMucXVpbGwuZ2V0TGluZShyYW5nZS5pbmRleCksXG4gICAgICAgICAgICBfcXVpbGwkZ2V0TGluZTYgPSBfc2xpY2VkVG9BcnJheShfcXVpbGwkZ2V0TGluZTUsIDIpLFxuICAgICAgICAgICAgbGluZSA9IF9xdWlsbCRnZXRMaW5lNlswXSxcbiAgICAgICAgICAgIG9mZnNldCA9IF9xdWlsbCRnZXRMaW5lNlsxXTtcblxuICAgICAgICB2YXIgZGVsdGEgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5yZXRhaW4ocmFuZ2UuaW5kZXgpLmluc2VydCgnXFxuJywgY29udGV4dC5mb3JtYXQpLnJldGFpbihsaW5lLmxlbmd0aCgpIC0gb2Zmc2V0IC0gMSkucmV0YWluKDEsIHsgaGVhZGVyOiBudWxsIH0pO1xuICAgICAgICB0aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKGRlbHRhLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXggKyAxLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpO1xuICAgICAgICB0aGlzLnF1aWxsLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICAnbGlzdCBhdXRvZmlsbCc6IHtcbiAgICAgIGtleTogJyAnLFxuICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgZm9ybWF0OiB7IGxpc3Q6IGZhbHNlIH0sXG4gICAgICBwcmVmaXg6IC9eXFxzKj8oXFxkK1xcLnwtfFxcKnxcXFsgP1xcXXxcXFt4XFxdKSQvLFxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihyYW5nZSwgY29udGV4dCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gY29udGV4dC5wcmVmaXgubGVuZ3RoO1xuXG4gICAgICAgIHZhciBfcXVpbGwkZ2V0TGluZTcgPSB0aGlzLnF1aWxsLmdldExpbmUocmFuZ2UuaW5kZXgpLFxuICAgICAgICAgICAgX3F1aWxsJGdldExpbmU4ID0gX3NsaWNlZFRvQXJyYXkoX3F1aWxsJGdldExpbmU3LCAyKSxcbiAgICAgICAgICAgIGxpbmUgPSBfcXVpbGwkZ2V0TGluZThbMF0sXG4gICAgICAgICAgICBvZmZzZXQgPSBfcXVpbGwkZ2V0TGluZThbMV07XG5cbiAgICAgICAgaWYgKG9mZnNldCA+IGxlbmd0aCkgcmV0dXJuIHRydWU7XG4gICAgICAgIHZhciB2YWx1ZSA9IHZvaWQgMDtcbiAgICAgICAgc3dpdGNoIChjb250ZXh0LnByZWZpeC50cmltKCkpIHtcbiAgICAgICAgICBjYXNlICdbXSc6Y2FzZSAnWyBdJzpcbiAgICAgICAgICAgIHZhbHVlID0gJ3VuY2hlY2tlZCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdbeF0nOlxuICAgICAgICAgICAgdmFsdWUgPSAnY2hlY2tlZCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICctJzpjYXNlICcqJzpcbiAgICAgICAgICAgIHZhbHVlID0gJ2J1bGxldCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdmFsdWUgPSAnb3JkZXJlZCc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5xdWlsbC5pbnNlcnRUZXh0KHJhbmdlLmluZGV4LCAnICcsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB0aGlzLnF1aWxsLmhpc3RvcnkuY3V0b2ZmKCk7XG4gICAgICAgIHZhciBkZWx0YSA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihyYW5nZS5pbmRleCAtIG9mZnNldCkuZGVsZXRlKGxlbmd0aCArIDEpLnJldGFpbihsaW5lLmxlbmd0aCgpIC0gMiAtIG9mZnNldCkucmV0YWluKDEsIHsgbGlzdDogdmFsdWUgfSk7XG4gICAgICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMoZGVsdGEsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB0aGlzLnF1aWxsLmhpc3RvcnkuY3V0b2ZmKCk7XG4gICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4IC0gbGVuZ3RoLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2NvZGUgZXhpdCc6IHtcbiAgICAgIGtleTogS2V5Ym9hcmQua2V5cy5FTlRFUixcbiAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgIGZvcm1hdDogWydjb2RlLWJsb2NrJ10sXG4gICAgICBwcmVmaXg6IC9cXG5cXG4kLyxcbiAgICAgIHN1ZmZpeDogL15cXHMrJC8sXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKHJhbmdlKSB7XG4gICAgICAgIHZhciBfcXVpbGwkZ2V0TGluZTkgPSB0aGlzLnF1aWxsLmdldExpbmUocmFuZ2UuaW5kZXgpLFxuICAgICAgICAgICAgX3F1aWxsJGdldExpbmUxMCA9IF9zbGljZWRUb0FycmF5KF9xdWlsbCRnZXRMaW5lOSwgMiksXG4gICAgICAgICAgICBsaW5lID0gX3F1aWxsJGdldExpbmUxMFswXSxcbiAgICAgICAgICAgIG9mZnNldCA9IF9xdWlsbCRnZXRMaW5lMTBbMV07XG5cbiAgICAgICAgdmFyIGRlbHRhID0gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkucmV0YWluKHJhbmdlLmluZGV4ICsgbGluZS5sZW5ndGgoKSAtIG9mZnNldCAtIDIpLnJldGFpbigxLCB7ICdjb2RlLWJsb2NrJzogbnVsbCB9KS5kZWxldGUoMSk7XG4gICAgICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMoZGVsdGEsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2VtYmVkIGxlZnQnOiBtYWtlRW1iZWRBcnJvd0hhbmRsZXIoS2V5Ym9hcmQua2V5cy5MRUZULCBmYWxzZSksXG4gICAgJ2VtYmVkIGxlZnQgc2hpZnQnOiBtYWtlRW1iZWRBcnJvd0hhbmRsZXIoS2V5Ym9hcmQua2V5cy5MRUZULCB0cnVlKSxcbiAgICAnZW1iZWQgcmlnaHQnOiBtYWtlRW1iZWRBcnJvd0hhbmRsZXIoS2V5Ym9hcmQua2V5cy5SSUdIVCwgZmFsc2UpLFxuICAgICdlbWJlZCByaWdodCBzaGlmdCc6IG1ha2VFbWJlZEFycm93SGFuZGxlcihLZXlib2FyZC5rZXlzLlJJR0hULCB0cnVlKVxuICB9XG59O1xuXG5mdW5jdGlvbiBtYWtlRW1iZWRBcnJvd0hhbmRsZXIoa2V5LCBzaGlmdEtleSkge1xuICB2YXIgX3JlZjM7XG5cbiAgdmFyIHdoZXJlID0ga2V5ID09PSBLZXlib2FyZC5rZXlzLkxFRlQgPyAncHJlZml4JyA6ICdzdWZmaXgnO1xuICByZXR1cm4gX3JlZjMgPSB7XG4gICAga2V5OiBrZXksXG4gICAgc2hpZnRLZXk6IHNoaWZ0S2V5LFxuICAgIGFsdEtleTogbnVsbFxuICB9LCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIHdoZXJlLCAvXiQvKSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCAnaGFuZGxlcicsIGZ1bmN0aW9uIGhhbmRsZXIocmFuZ2UpIHtcbiAgICB2YXIgaW5kZXggPSByYW5nZS5pbmRleDtcbiAgICBpZiAoa2V5ID09PSBLZXlib2FyZC5rZXlzLlJJR0hUKSB7XG4gICAgICBpbmRleCArPSByYW5nZS5sZW5ndGggKyAxO1xuICAgIH1cblxuICAgIHZhciBfcXVpbGwkZ2V0TGVhZjMgPSB0aGlzLnF1aWxsLmdldExlYWYoaW5kZXgpLFxuICAgICAgICBfcXVpbGwkZ2V0TGVhZjQgPSBfc2xpY2VkVG9BcnJheShfcXVpbGwkZ2V0TGVhZjMsIDEpLFxuICAgICAgICBsZWFmID0gX3F1aWxsJGdldExlYWY0WzBdO1xuXG4gICAgaWYgKCEobGVhZiBpbnN0YW5jZW9mIF9wYXJjaG1lbnQyLmRlZmF1bHQuRW1iZWQpKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoa2V5ID09PSBLZXlib2FyZC5rZXlzLkxFRlQpIHtcbiAgICAgIGlmIChzaGlmdEtleSkge1xuICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCAtIDEsIHJhbmdlLmxlbmd0aCArIDEsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXggLSAxLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNoaWZ0S2V5KSB7XG4gICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4LCByYW5nZS5sZW5ndGggKyAxLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4ICsgcmFuZ2UubGVuZ3RoICsgMSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSksIF9yZWYzO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVCYWNrc3BhY2UocmFuZ2UsIGNvbnRleHQpIHtcbiAgaWYgKHJhbmdlLmluZGV4ID09PSAwIHx8IHRoaXMucXVpbGwuZ2V0TGVuZ3RoKCkgPD0gMSkgcmV0dXJuO1xuXG4gIHZhciBfcXVpbGwkZ2V0TGluZTExID0gdGhpcy5xdWlsbC5nZXRMaW5lKHJhbmdlLmluZGV4KSxcbiAgICAgIF9xdWlsbCRnZXRMaW5lMTIgPSBfc2xpY2VkVG9BcnJheShfcXVpbGwkZ2V0TGluZTExLCAxKSxcbiAgICAgIGxpbmUgPSBfcXVpbGwkZ2V0TGluZTEyWzBdO1xuXG4gIHZhciBmb3JtYXRzID0ge307XG4gIGlmIChjb250ZXh0Lm9mZnNldCA9PT0gMCkge1xuICAgIHZhciBfcXVpbGwkZ2V0TGluZTEzID0gdGhpcy5xdWlsbC5nZXRMaW5lKHJhbmdlLmluZGV4IC0gMSksXG4gICAgICAgIF9xdWlsbCRnZXRMaW5lMTQgPSBfc2xpY2VkVG9BcnJheShfcXVpbGwkZ2V0TGluZTEzLCAxKSxcbiAgICAgICAgcHJldiA9IF9xdWlsbCRnZXRMaW5lMTRbMF07XG5cbiAgICBpZiAocHJldiAhPSBudWxsICYmIHByZXYubGVuZ3RoKCkgPiAxKSB7XG4gICAgICB2YXIgY3VyRm9ybWF0cyA9IGxpbmUuZm9ybWF0cygpO1xuICAgICAgdmFyIHByZXZGb3JtYXRzID0gdGhpcy5xdWlsbC5nZXRGb3JtYXQocmFuZ2UuaW5kZXggLSAxLCAxKTtcbiAgICAgIGZvcm1hdHMgPSBfb3AyLmRlZmF1bHQuYXR0cmlidXRlcy5kaWZmKGN1ckZvcm1hdHMsIHByZXZGb3JtYXRzKSB8fCB7fTtcbiAgICB9XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGFzdHJhbCBzeW1ib2xzXG4gIHZhciBsZW5ndGggPSAvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXSQvLnRlc3QoY29udGV4dC5wcmVmaXgpID8gMiA6IDE7XG4gIHRoaXMucXVpbGwuZGVsZXRlVGV4dChyYW5nZS5pbmRleCAtIGxlbmd0aCwgbGVuZ3RoLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgaWYgKE9iamVjdC5rZXlzKGZvcm1hdHMpLmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLnF1aWxsLmZvcm1hdExpbmUocmFuZ2UuaW5kZXggLSBsZW5ndGgsIGxlbmd0aCwgZm9ybWF0cywgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gIH1cbiAgdGhpcy5xdWlsbC5mb2N1cygpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVEZWxldGUocmFuZ2UsIGNvbnRleHQpIHtcbiAgLy8gQ2hlY2sgZm9yIGFzdHJhbCBzeW1ib2xzXG4gIHZhciBsZW5ndGggPSAvXltcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0vLnRlc3QoY29udGV4dC5zdWZmaXgpID8gMiA6IDE7XG4gIGlmIChyYW5nZS5pbmRleCA+PSB0aGlzLnF1aWxsLmdldExlbmd0aCgpIC0gbGVuZ3RoKSByZXR1cm47XG4gIHZhciBmb3JtYXRzID0ge30sXG4gICAgICBuZXh0TGVuZ3RoID0gMDtcblxuICB2YXIgX3F1aWxsJGdldExpbmUxNSA9IHRoaXMucXVpbGwuZ2V0TGluZShyYW5nZS5pbmRleCksXG4gICAgICBfcXVpbGwkZ2V0TGluZTE2ID0gX3NsaWNlZFRvQXJyYXkoX3F1aWxsJGdldExpbmUxNSwgMSksXG4gICAgICBsaW5lID0gX3F1aWxsJGdldExpbmUxNlswXTtcblxuICBpZiAoY29udGV4dC5vZmZzZXQgPj0gbGluZS5sZW5ndGgoKSAtIDEpIHtcbiAgICB2YXIgX3F1aWxsJGdldExpbmUxNyA9IHRoaXMucXVpbGwuZ2V0TGluZShyYW5nZS5pbmRleCArIDEpLFxuICAgICAgICBfcXVpbGwkZ2V0TGluZTE4ID0gX3NsaWNlZFRvQXJyYXkoX3F1aWxsJGdldExpbmUxNywgMSksXG4gICAgICAgIG5leHQgPSBfcXVpbGwkZ2V0TGluZTE4WzBdO1xuXG4gICAgaWYgKG5leHQpIHtcbiAgICAgIHZhciBjdXJGb3JtYXRzID0gbGluZS5mb3JtYXRzKCk7XG4gICAgICB2YXIgbmV4dEZvcm1hdHMgPSB0aGlzLnF1aWxsLmdldEZvcm1hdChyYW5nZS5pbmRleCwgMSk7XG4gICAgICBmb3JtYXRzID0gX29wMi5kZWZhdWx0LmF0dHJpYnV0ZXMuZGlmZihjdXJGb3JtYXRzLCBuZXh0Rm9ybWF0cykgfHwge307XG4gICAgICBuZXh0TGVuZ3RoID0gbmV4dC5sZW5ndGgoKTtcbiAgICB9XG4gIH1cbiAgdGhpcy5xdWlsbC5kZWxldGVUZXh0KHJhbmdlLmluZGV4LCBsZW5ndGgsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICBpZiAoT2JqZWN0LmtleXMoZm9ybWF0cykubGVuZ3RoID4gMCkge1xuICAgIHRoaXMucXVpbGwuZm9ybWF0TGluZShyYW5nZS5pbmRleCArIG5leHRMZW5ndGggLSAxLCBsZW5ndGgsIGZvcm1hdHMsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZVJhbmdlKHJhbmdlKSB7XG4gIHZhciBsaW5lcyA9IHRoaXMucXVpbGwuZ2V0TGluZXMocmFuZ2UpO1xuICB2YXIgZm9ybWF0cyA9IHt9O1xuICBpZiAobGluZXMubGVuZ3RoID4gMSkge1xuICAgIHZhciBmaXJzdEZvcm1hdHMgPSBsaW5lc1swXS5mb3JtYXRzKCk7XG4gICAgdmFyIGxhc3RGb3JtYXRzID0gbGluZXNbbGluZXMubGVuZ3RoIC0gMV0uZm9ybWF0cygpO1xuICAgIGZvcm1hdHMgPSBfb3AyLmRlZmF1bHQuYXR0cmlidXRlcy5kaWZmKGxhc3RGb3JtYXRzLCBmaXJzdEZvcm1hdHMpIHx8IHt9O1xuICB9XG4gIHRoaXMucXVpbGwuZGVsZXRlVGV4dChyYW5nZSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gIGlmIChPYmplY3Qua2V5cyhmb3JtYXRzKS5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5xdWlsbC5mb3JtYXRMaW5lKHJhbmdlLmluZGV4LCAxLCBmb3JtYXRzLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgfVxuICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgdGhpcy5xdWlsbC5mb2N1cygpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVFbnRlcihyYW5nZSwgY29udGV4dCkge1xuICB2YXIgX3RoaXMzID0gdGhpcztcblxuICBpZiAocmFuZ2UubGVuZ3RoID4gMCkge1xuICAgIHRoaXMucXVpbGwuc2Nyb2xsLmRlbGV0ZUF0KHJhbmdlLmluZGV4LCByYW5nZS5sZW5ndGgpOyAvLyBTbyB3ZSBkbyBub3QgdHJpZ2dlciB0ZXh0LWNoYW5nZVxuICB9XG4gIHZhciBsaW5lRm9ybWF0cyA9IE9iamVjdC5rZXlzKGNvbnRleHQuZm9ybWF0KS5yZWR1Y2UoZnVuY3Rpb24gKGxpbmVGb3JtYXRzLCBmb3JtYXQpIHtcbiAgICBpZiAoX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeShmb3JtYXQsIF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuQkxPQ0spICYmICFBcnJheS5pc0FycmF5KGNvbnRleHQuZm9ybWF0W2Zvcm1hdF0pKSB7XG4gICAgICBsaW5lRm9ybWF0c1tmb3JtYXRdID0gY29udGV4dC5mb3JtYXRbZm9ybWF0XTtcbiAgICB9XG4gICAgcmV0dXJuIGxpbmVGb3JtYXRzO1xuICB9LCB7fSk7XG4gIHRoaXMucXVpbGwuaW5zZXJ0VGV4dChyYW5nZS5pbmRleCwgJ1xcbicsIGxpbmVGb3JtYXRzLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgLy8gRWFybGllciBzY3JvbGwuZGVsZXRlQXQgbWlnaHQgaGF2ZSBtZXNzZWQgdXAgb3VyIHNlbGVjdGlvbixcbiAgLy8gc28gaW5zZXJ0VGV4dCdzIGJ1aWx0IGluIHNlbGVjdGlvbiBwcmVzZXJ2YXRpb24gaXMgbm90IHJlbGlhYmxlXG4gIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4ICsgMSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgdGhpcy5xdWlsbC5mb2N1cygpO1xuICBPYmplY3Qua2V5cyhjb250ZXh0LmZvcm1hdCkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmIChsaW5lRm9ybWF0c1tuYW1lXSAhPSBudWxsKSByZXR1cm47XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29udGV4dC5mb3JtYXRbbmFtZV0pKSByZXR1cm47XG4gICAgaWYgKG5hbWUgPT09ICdsaW5rJykgcmV0dXJuO1xuICAgIF90aGlzMy5xdWlsbC5mb3JtYXQobmFtZSwgY29udGV4dC5mb3JtYXRbbmFtZV0sIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbWFrZUNvZGVCbG9ja0hhbmRsZXIoaW5kZW50KSB7XG4gIHJldHVybiB7XG4gICAga2V5OiBLZXlib2FyZC5rZXlzLlRBQixcbiAgICBzaGlmdEtleTogIWluZGVudCxcbiAgICBmb3JtYXQ6IHsgJ2NvZGUtYmxvY2snOiB0cnVlIH0sXG4gICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihyYW5nZSkge1xuICAgICAgdmFyIENvZGVCbG9jayA9IF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkoJ2NvZGUtYmxvY2snKTtcbiAgICAgIHZhciBpbmRleCA9IHJhbmdlLmluZGV4LFxuICAgICAgICAgIGxlbmd0aCA9IHJhbmdlLmxlbmd0aDtcblxuICAgICAgdmFyIF9xdWlsbCRzY3JvbGwkZGVzY2VuZCA9IHRoaXMucXVpbGwuc2Nyb2xsLmRlc2NlbmRhbnQoQ29kZUJsb2NrLCBpbmRleCksXG4gICAgICAgICAgX3F1aWxsJHNjcm9sbCRkZXNjZW5kMiA9IF9zbGljZWRUb0FycmF5KF9xdWlsbCRzY3JvbGwkZGVzY2VuZCwgMiksXG4gICAgICAgICAgYmxvY2sgPSBfcXVpbGwkc2Nyb2xsJGRlc2NlbmQyWzBdLFxuICAgICAgICAgIG9mZnNldCA9IF9xdWlsbCRzY3JvbGwkZGVzY2VuZDJbMV07XG5cbiAgICAgIGlmIChibG9jayA9PSBudWxsKSByZXR1cm47XG4gICAgICB2YXIgc2Nyb2xsSW5kZXggPSB0aGlzLnF1aWxsLmdldEluZGV4KGJsb2NrKTtcbiAgICAgIHZhciBzdGFydCA9IGJsb2NrLm5ld2xpbmVJbmRleChvZmZzZXQsIHRydWUpICsgMTtcbiAgICAgIHZhciBlbmQgPSBibG9jay5uZXdsaW5lSW5kZXgoc2Nyb2xsSW5kZXggKyBvZmZzZXQgKyBsZW5ndGgpO1xuICAgICAgdmFyIGxpbmVzID0gYmxvY2suZG9tTm9kZS50ZXh0Q29udGVudC5zbGljZShzdGFydCwgZW5kKS5zcGxpdCgnXFxuJyk7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgICAgbGluZXMuZm9yRWFjaChmdW5jdGlvbiAobGluZSwgaSkge1xuICAgICAgICBpZiAoaW5kZW50KSB7XG4gICAgICAgICAgYmxvY2suaW5zZXJ0QXQoc3RhcnQgKyBvZmZzZXQsIENvZGVCbG9jay5UQUIpO1xuICAgICAgICAgIG9mZnNldCArPSBDb2RlQmxvY2suVEFCLmxlbmd0aDtcbiAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgaW5kZXggKz0gQ29kZUJsb2NrLlRBQi5sZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxlbmd0aCArPSBDb2RlQmxvY2suVEFCLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKENvZGVCbG9jay5UQUIpKSB7XG4gICAgICAgICAgYmxvY2suZGVsZXRlQXQoc3RhcnQgKyBvZmZzZXQsIENvZGVCbG9jay5UQUIubGVuZ3RoKTtcbiAgICAgICAgICBvZmZzZXQgLT0gQ29kZUJsb2NrLlRBQi5sZW5ndGg7XG4gICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgIGluZGV4IC09IENvZGVCbG9jay5UQUIubGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZW5ndGggLT0gQ29kZUJsb2NrLlRBQi5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9mZnNldCArPSBsaW5lLmxlbmd0aCArIDE7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucXVpbGwudXBkYXRlKF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24oaW5kZXgsIGxlbmd0aCwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1ha2VGb3JtYXRIYW5kbGVyKGZvcm1hdCkge1xuICByZXR1cm4ge1xuICAgIGtleTogZm9ybWF0WzBdLnRvVXBwZXJDYXNlKCksXG4gICAgc2hvcnRLZXk6IHRydWUsXG4gICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihyYW5nZSwgY29udGV4dCkge1xuICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoZm9ybWF0LCAhY29udGV4dC5mb3JtYXRbZm9ybWF0XSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoYmluZGluZykge1xuICBpZiAodHlwZW9mIGJpbmRpbmcgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBiaW5kaW5nID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBub3JtYWxpemUoeyBrZXk6IGJpbmRpbmcgfSk7XG4gIH1cbiAgaWYgKCh0eXBlb2YgYmluZGluZyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYmluZGluZykpID09PSAnb2JqZWN0Jykge1xuICAgIGJpbmRpbmcgPSAoMCwgX2Nsb25lMi5kZWZhdWx0KShiaW5kaW5nLCBmYWxzZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nLmtleSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoS2V5Ym9hcmQua2V5c1tiaW5kaW5nLmtleS50b1VwcGVyQ2FzZSgpXSAhPSBudWxsKSB7XG4gICAgICBiaW5kaW5nLmtleSA9IEtleWJvYXJkLmtleXNbYmluZGluZy5rZXkudG9VcHBlckNhc2UoKV07XG4gICAgfSBlbHNlIGlmIChiaW5kaW5nLmtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGJpbmRpbmcua2V5ID0gYmluZGluZy5rZXkudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgaWYgKGJpbmRpbmcuc2hvcnRLZXkpIHtcbiAgICBiaW5kaW5nW1NIT1JUS0VZXSA9IGJpbmRpbmcuc2hvcnRLZXk7XG4gICAgZGVsZXRlIGJpbmRpbmcuc2hvcnRLZXk7XG4gIH1cbiAgcmV0dXJuIGJpbmRpbmc7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEtleWJvYXJkO1xuZXhwb3J0cy5TSE9SVEtFWSA9IFNIT1JUS0VZO1xuXG4vKioqLyB9KSxcbi8qIDI0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbnZhciBfdGV4dCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfdGV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90ZXh0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQ3Vyc29yID0gZnVuY3Rpb24gKF9QYXJjaG1lbnQkRW1iZWQpIHtcbiAgX2luaGVyaXRzKEN1cnNvciwgX1BhcmNobWVudCRFbWJlZCk7XG5cbiAgX2NyZWF0ZUNsYXNzKEN1cnNvciwgbnVsbCwgW3tcbiAgICBrZXk6ICd2YWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1dKTtcblxuICBmdW5jdGlvbiBDdXJzb3IoZG9tTm9kZSwgc2VsZWN0aW9uKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEN1cnNvcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ3Vyc29yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ3Vyc29yKSkuY2FsbCh0aGlzLCBkb21Ob2RlKSk7XG5cbiAgICBfdGhpcy5zZWxlY3Rpb24gPSBzZWxlY3Rpb247XG4gICAgX3RoaXMudGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShDdXJzb3IuQ09OVEVOVFMpO1xuICAgIF90aGlzLmRvbU5vZGUuYXBwZW5kQ2hpbGQoX3RoaXMudGV4dE5vZGUpO1xuICAgIF90aGlzLl9sZW5ndGggPSAwO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDdXJzb3IsIFt7XG4gICAga2V5OiAnZGV0YWNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgICAgLy8gc3VwZXIuZGV0YWNoKCkgd2lsbCBhbHNvIGNsZWFyIGRvbU5vZGUuX19ibG90XG4gICAgICBpZiAodGhpcy5wYXJlbnQgIT0gbnVsbCkgdGhpcy5wYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0KG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5fbGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBfZ2V0KEN1cnNvci5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDdXJzb3IucHJvdG90eXBlKSwgJ2Zvcm1hdCcsIHRoaXMpLmNhbGwodGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIHRhcmdldCA9IHRoaXMsXG4gICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgd2hpbGUgKHRhcmdldCAhPSBudWxsICYmIHRhcmdldC5zdGF0aWNzLnNjb3BlICE9PSBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLkJMT0NLX0JMT1QpIHtcbiAgICAgICAgaW5kZXggKz0gdGFyZ2V0Lm9mZnNldCh0YXJnZXQucGFyZW50KTtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICh0YXJnZXQgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9sZW5ndGggPSBDdXJzb3IuQ09OVEVOVFMubGVuZ3RoO1xuICAgICAgICB0YXJnZXQub3B0aW1pemUoKTtcbiAgICAgICAgdGFyZ2V0LmZvcm1hdEF0KGluZGV4LCBDdXJzb3IuQ09OVEVOVFMubGVuZ3RoLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIHRoaXMuX2xlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5kZXgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbmRleChub2RlLCBvZmZzZXQpIHtcbiAgICAgIGlmIChub2RlID09PSB0aGlzLnRleHROb2RlKSByZXR1cm4gMDtcbiAgICAgIHJldHVybiBfZ2V0KEN1cnNvci5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDdXJzb3IucHJvdG90eXBlKSwgJ2luZGV4JywgdGhpcykuY2FsbCh0aGlzLCBub2RlLCBvZmZzZXQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2xlbmd0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxlbmd0aCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9sZW5ndGg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwb3NpdGlvbigpIHtcbiAgICAgIHJldHVybiBbdGhpcy50ZXh0Tm9kZSwgdGhpcy50ZXh0Tm9kZS5kYXRhLmxlbmd0aF07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgX2dldChDdXJzb3IucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ3Vyc29yLnByb3RvdHlwZSksICdyZW1vdmUnLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Jlc3RvcmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN0b3JlKCkge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uLmNvbXBvc2luZyB8fCB0aGlzLnBhcmVudCA9PSBudWxsKSByZXR1cm47XG4gICAgICB2YXIgdGV4dE5vZGUgPSB0aGlzLnRleHROb2RlO1xuICAgICAgdmFyIHJhbmdlID0gdGhpcy5zZWxlY3Rpb24uZ2V0TmF0aXZlUmFuZ2UoKTtcbiAgICAgIHZhciByZXN0b3JlVGV4dCA9IHZvaWQgMCxcbiAgICAgICAgICBzdGFydCA9IHZvaWQgMCxcbiAgICAgICAgICBlbmQgPSB2b2lkIDA7XG4gICAgICBpZiAocmFuZ2UgIT0gbnVsbCAmJiByYW5nZS5zdGFydC5ub2RlID09PSB0ZXh0Tm9kZSAmJiByYW5nZS5lbmQubm9kZSA9PT0gdGV4dE5vZGUpIHtcbiAgICAgICAgdmFyIF9yZWYgPSBbdGV4dE5vZGUsIHJhbmdlLnN0YXJ0Lm9mZnNldCwgcmFuZ2UuZW5kLm9mZnNldF07XG4gICAgICAgIHJlc3RvcmVUZXh0ID0gX3JlZlswXTtcbiAgICAgICAgc3RhcnQgPSBfcmVmWzFdO1xuICAgICAgICBlbmQgPSBfcmVmWzJdO1xuICAgICAgfVxuICAgICAgLy8gTGluayBmb3JtYXQgd2lsbCBpbnNlcnQgdGV4dCBvdXRzaWRlIG9mIGFuY2hvciB0YWdcbiAgICAgIHdoaWxlICh0aGlzLmRvbU5vZGUubGFzdENoaWxkICE9IG51bGwgJiYgdGhpcy5kb21Ob2RlLmxhc3RDaGlsZCAhPT0gdGhpcy50ZXh0Tm9kZSkge1xuICAgICAgICB0aGlzLmRvbU5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5kb21Ob2RlLmxhc3RDaGlsZCwgdGhpcy5kb21Ob2RlKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnRleHROb2RlLmRhdGEgIT09IEN1cnNvci5DT05URU5UUykge1xuICAgICAgICB2YXIgdGV4dCA9IHRoaXMudGV4dE5vZGUuZGF0YS5zcGxpdChDdXJzb3IuQ09OVEVOVFMpLmpvaW4oJycpO1xuICAgICAgICBpZiAodGhpcy5uZXh0IGluc3RhbmNlb2YgX3RleHQyLmRlZmF1bHQpIHtcbiAgICAgICAgICByZXN0b3JlVGV4dCA9IHRoaXMubmV4dC5kb21Ob2RlO1xuICAgICAgICAgIHRoaXMubmV4dC5pbnNlcnRBdCgwLCB0ZXh0KTtcbiAgICAgICAgICB0aGlzLnRleHROb2RlLmRhdGEgPSBDdXJzb3IuQ09OVEVOVFM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50ZXh0Tm9kZS5kYXRhID0gdGV4dDtcbiAgICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUoX3BhcmNobWVudDIuZGVmYXVsdC5jcmVhdGUodGhpcy50ZXh0Tm9kZSksIHRoaXMpO1xuICAgICAgICAgIHRoaXMudGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShDdXJzb3IuQ09OVEVOVFMpO1xuICAgICAgICAgIHRoaXMuZG9tTm9kZS5hcHBlbmRDaGlsZCh0aGlzLnRleHROb2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICAgIGlmIChzdGFydCAhPSBudWxsKSB7XG4gICAgICAgIHZhciBfbWFwID0gW3N0YXJ0LCBlbmRdLm1hcChmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKHJlc3RvcmVUZXh0LmRhdGEubGVuZ3RoLCBvZmZzZXQgLSAxKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBfbWFwMiA9IF9zbGljZWRUb0FycmF5KF9tYXAsIDIpO1xuXG4gICAgICAgIHN0YXJ0ID0gX21hcDJbMF07XG4gICAgICAgIGVuZCA9IF9tYXAyWzFdO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhcnROb2RlOiByZXN0b3JlVGV4dCxcbiAgICAgICAgICBzdGFydE9mZnNldDogc3RhcnQsXG4gICAgICAgICAgZW5kTm9kZTogcmVzdG9yZVRleHQsXG4gICAgICAgICAgZW5kT2Zmc2V0OiBlbmRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKG11dGF0aW9ucy5zb21lKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICByZXR1cm4gbXV0YXRpb24udHlwZSA9PT0gJ2NoYXJhY3RlckRhdGEnICYmIG11dGF0aW9uLnRhcmdldCA9PT0gX3RoaXMyLnRleHROb2RlO1xuICAgICAgfSkpIHtcbiAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5yZXN0b3JlKCk7XG4gICAgICAgIGlmIChyYW5nZSkgY29udGV4dC5yYW5nZSA9IHJhbmdlO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3ZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEN1cnNvcjtcbn0oX3BhcmNobWVudDIuZGVmYXVsdC5FbWJlZCk7XG5cbkN1cnNvci5ibG90TmFtZSA9ICdjdXJzb3InO1xuQ3Vyc29yLmNsYXNzTmFtZSA9ICdxbC1jdXJzb3InO1xuQ3Vyc29yLnRhZ05hbWUgPSAnc3Bhbic7XG5DdXJzb3IuQ09OVEVOVFMgPSAnXFx1RkVGRic7IC8vIFplcm8gd2lkdGggbm8gYnJlYWsgc3BhY2VcblxuXG5leHBvcnRzLmRlZmF1bHQgPSBDdXJzb3I7XG5cbi8qKiovIH0pLFxuLyogMjUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX2Jsb2NrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIF9ibG9jazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ibG9jayk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIENvbnRhaW5lciA9IGZ1bmN0aW9uIChfUGFyY2htZW50JENvbnRhaW5lcikge1xuICBfaW5oZXJpdHMoQ29udGFpbmVyLCBfUGFyY2htZW50JENvbnRhaW5lcik7XG5cbiAgZnVuY3Rpb24gQ29udGFpbmVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb250YWluZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDb250YWluZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb250YWluZXIpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBDb250YWluZXI7XG59KF9wYXJjaG1lbnQyLmRlZmF1bHQuQ29udGFpbmVyKTtcblxuQ29udGFpbmVyLmFsbG93ZWRDaGlsZHJlbiA9IFtfYmxvY2syLmRlZmF1bHQsIF9ibG9jay5CbG9ja0VtYmVkLCBDb250YWluZXJdO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDb250YWluZXI7XG5cbi8qKiovIH0pLFxuLyogMjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQ29sb3JTdHlsZSA9IGV4cG9ydHMuQ29sb3JDbGFzcyA9IGV4cG9ydHMuQ29sb3JBdHRyaWJ1dG9yID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQ29sb3JBdHRyaWJ1dG9yID0gZnVuY3Rpb24gKF9QYXJjaG1lbnQkQXR0cmlidXRvcikge1xuICBfaW5oZXJpdHMoQ29sb3JBdHRyaWJ1dG9yLCBfUGFyY2htZW50JEF0dHJpYnV0b3IpO1xuXG4gIGZ1bmN0aW9uIENvbG9yQXR0cmlidXRvcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29sb3JBdHRyaWJ1dG9yKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ29sb3JBdHRyaWJ1dG9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29sb3JBdHRyaWJ1dG9yKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ29sb3JBdHRyaWJ1dG9yLCBbe1xuICAgIGtleTogJ3ZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoZG9tTm9kZSkge1xuICAgICAgdmFyIHZhbHVlID0gX2dldChDb2xvckF0dHJpYnV0b3IucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29sb3JBdHRyaWJ1dG9yLnByb3RvdHlwZSksICd2YWx1ZScsIHRoaXMpLmNhbGwodGhpcywgZG9tTm9kZSk7XG4gICAgICBpZiAoIXZhbHVlLnN0YXJ0c1dpdGgoJ3JnYignKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eW15cXGRdKy8sICcnKS5yZXBsYWNlKC9bXlxcZF0rJC8sICcnKTtcbiAgICAgIHJldHVybiAnIycgKyB2YWx1ZS5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiAoJzAwJyArIHBhcnNlSW50KGNvbXBvbmVudCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMik7XG4gICAgICB9KS5qb2luKCcnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29sb3JBdHRyaWJ1dG9yO1xufShfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuU3R5bGUpO1xuXG52YXIgQ29sb3JDbGFzcyA9IG5ldyBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuQ2xhc3MoJ2NvbG9yJywgJ3FsLWNvbG9yJywge1xuICBzY29wZTogX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5JTkxJTkVcbn0pO1xudmFyIENvbG9yU3R5bGUgPSBuZXcgQ29sb3JBdHRyaWJ1dG9yKCdjb2xvcicsICdjb2xvcicsIHtcbiAgc2NvcGU6IF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuSU5MSU5FXG59KTtcblxuZXhwb3J0cy5Db2xvckF0dHJpYnV0b3IgPSBDb2xvckF0dHJpYnV0b3I7XG5leHBvcnRzLkNvbG9yQ2xhc3MgPSBDb2xvckNsYXNzO1xuZXhwb3J0cy5Db2xvclN0eWxlID0gQ29sb3JTdHlsZTtcblxuLyoqKi8gfSksXG4vKiAyNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5zYW5pdGl6ZSA9IGV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX2lubGluZSA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5saW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lubGluZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIExpbmsgPSBmdW5jdGlvbiAoX0lubGluZSkge1xuICBfaW5oZXJpdHMoTGluaywgX0lubGluZSk7XG5cbiAgZnVuY3Rpb24gTGluaygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGluayk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKExpbmsuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMaW5rKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTGluaywgW3tcbiAgICBrZXk6ICdmb3JtYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXQobmFtZSwgdmFsdWUpIHtcbiAgICAgIGlmIChuYW1lICE9PSB0aGlzLnN0YXRpY3MuYmxvdE5hbWUgfHwgIXZhbHVlKSByZXR1cm4gX2dldChMaW5rLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExpbmsucHJvdG90eXBlKSwgJ2Zvcm1hdCcsIHRoaXMpLmNhbGwodGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgdmFsdWUgPSB0aGlzLmNvbnN0cnVjdG9yLnNhbml0aXplKHZhbHVlKTtcbiAgICAgIHRoaXMuZG9tTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCB2YWx1ZSk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6ICdjcmVhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUodmFsdWUpIHtcbiAgICAgIHZhciBub2RlID0gX2dldChMaW5rLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGluayksICdjcmVhdGUnLCB0aGlzKS5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgIHZhbHVlID0gdGhpcy5zYW5pdGl6ZSh2YWx1ZSk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIHZhbHVlKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCd0YXJnZXQnLCAnX2JsYW5rJyk7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0cyhkb21Ob2RlKSB7XG4gICAgICByZXR1cm4gZG9tTm9kZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzYW5pdGl6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNhbml0aXplKHVybCkge1xuICAgICAgcmV0dXJuIF9zYW5pdGl6ZSh1cmwsIHRoaXMuUFJPVE9DT0xfV0hJVEVMSVNUKSA/IHVybCA6IHRoaXMuU0FOSVRJWkVEX1VSTDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTGluaztcbn0oX2lubGluZTIuZGVmYXVsdCk7XG5cbkxpbmsuYmxvdE5hbWUgPSAnbGluayc7XG5MaW5rLnRhZ05hbWUgPSAnQSc7XG5MaW5rLlNBTklUSVpFRF9VUkwgPSAnYWJvdXQ6YmxhbmsnO1xuTGluay5QUk9UT0NPTF9XSElURUxJU1QgPSBbJ2h0dHAnLCAnaHR0cHMnLCAnbWFpbHRvJywgJ3RlbCddO1xuXG5mdW5jdGlvbiBfc2FuaXRpemUodXJsLCBwcm90b2NvbHMpIHtcbiAgdmFyIGFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgYW5jaG9yLmhyZWYgPSB1cmw7XG4gIHZhciBwcm90b2NvbCA9IGFuY2hvci5ocmVmLnNsaWNlKDAsIGFuY2hvci5ocmVmLmluZGV4T2YoJzonKSk7XG4gIHJldHVybiBwcm90b2NvbHMuaW5kZXhPZihwcm90b2NvbCkgPiAtMTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gTGluaztcbmV4cG9ydHMuc2FuaXRpemUgPSBfc2FuaXRpemU7XG5cbi8qKiovIH0pLFxuLyogMjggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2tleWJvYXJkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cbnZhciBfa2V5Ym9hcmQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5Ym9hcmQpO1xuXG52YXIgX2Ryb3Bkb3duID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDcpO1xuXG52YXIgX2Ryb3Bkb3duMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Ryb3Bkb3duKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIG9wdGlvbnNDb3VudGVyID0gMDtcblxuZnVuY3Rpb24gdG9nZ2xlQXJpYUF0dHJpYnV0ZShlbGVtZW50LCBhdHRyaWJ1dGUpIHtcbiAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCAhKGVsZW1lbnQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSkgPT09ICd0cnVlJykpO1xufVxuXG52YXIgUGlja2VyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQaWNrZXIoc2VsZWN0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQaWNrZXIpO1xuXG4gICAgdGhpcy5zZWxlY3QgPSBzZWxlY3Q7XG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgdGhpcy5idWlsZFBpY2tlcigpO1xuICAgIHRoaXMuc2VsZWN0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgdGhpcy5zZWxlY3QucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jb250YWluZXIsIHRoaXMuc2VsZWN0KTtcblxuICAgIHRoaXMubGFiZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMudG9nZ2xlUGlja2VyKCk7XG4gICAgfSk7XG4gICAgdGhpcy5sYWJlbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgLy8gQWxsb3dzIHRoZSBcIkVudGVyXCIga2V5IHRvIG9wZW4gdGhlIHBpY2tlclxuICAgICAgICBjYXNlIF9rZXlib2FyZDIuZGVmYXVsdC5rZXlzLkVOVEVSOlxuICAgICAgICAgIF90aGlzLnRvZ2dsZVBpY2tlcigpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIC8vIEFsbG93cyB0aGUgXCJFc2NhcGVcIiBrZXkgdG8gY2xvc2UgdGhlIHBpY2tlclxuICAgICAgICBjYXNlIF9rZXlib2FyZDIuZGVmYXVsdC5rZXlzLkVTQ0FQRTpcbiAgICAgICAgICBfdGhpcy5lc2NhcGUoKTtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBpY2tlciwgW3tcbiAgICBrZXk6ICd0b2dnbGVQaWNrZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGVQaWNrZXIoKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKCdxbC1leHBhbmRlZCcpO1xuICAgICAgLy8gVG9nZ2xlIGFyaWEtZXhwYW5kZWQgYW5kIGFyaWEtaGlkZGVuIHRvIG1ha2UgdGhlIHBpY2tlciBhY2Nlc3NpYmxlXG4gICAgICB0b2dnbGVBcmlhQXR0cmlidXRlKHRoaXMubGFiZWwsICdhcmlhLWV4cGFuZGVkJyk7XG4gICAgICB0b2dnbGVBcmlhQXR0cmlidXRlKHRoaXMub3B0aW9ucywgJ2FyaWEtaGlkZGVuJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYnVpbGRJdGVtJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYnVpbGRJdGVtKG9wdGlvbikge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBpdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgaXRlbS50YWJJbmRleCA9ICcwJztcbiAgICAgIGl0ZW0uc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpO1xuXG4gICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoJ3FsLXBpY2tlci1pdGVtJyk7XG4gICAgICBpZiAob3B0aW9uLmhhc0F0dHJpYnV0ZSgndmFsdWUnKSkge1xuICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScsIG9wdGlvbi5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbi50ZXh0Q29udGVudCkge1xuICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1sYWJlbCcsIG9wdGlvbi50ZXh0Q29udGVudCk7XG4gICAgICB9XG4gICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuc2VsZWN0SXRlbShpdGVtLCB0cnVlKTtcbiAgICAgIH0pO1xuICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICAgIC8vIEFsbG93cyB0aGUgXCJFbnRlclwiIGtleSB0byBzZWxlY3QgYW4gaXRlbVxuICAgICAgICAgIGNhc2UgX2tleWJvYXJkMi5kZWZhdWx0LmtleXMuRU5URVI6XG4gICAgICAgICAgICBfdGhpczIuc2VsZWN0SXRlbShpdGVtLCB0cnVlKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIC8vIEFsbG93cyB0aGUgXCJFc2NhcGVcIiBrZXkgdG8gY2xvc2UgdGhlIHBpY2tlclxuICAgICAgICAgIGNhc2UgX2tleWJvYXJkMi5kZWZhdWx0LmtleXMuRVNDQVBFOlxuICAgICAgICAgICAgX3RoaXMyLmVzY2FwZSgpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdidWlsZExhYmVsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYnVpbGRMYWJlbCgpIHtcbiAgICAgIHZhciBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ3FsLXBpY2tlci1sYWJlbCcpO1xuICAgICAgbGFiZWwuaW5uZXJIVE1MID0gX2Ryb3Bkb3duMi5kZWZhdWx0O1xuICAgICAgbGFiZWwudGFiSW5kZXggPSAnMCc7XG4gICAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnYnV0dG9uJyk7XG4gICAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdidWlsZE9wdGlvbnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZE9wdGlvbnMoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICBvcHRpb25zLmNsYXNzTGlzdC5hZGQoJ3FsLXBpY2tlci1vcHRpb25zJyk7XG5cbiAgICAgIC8vIERvbid0IHdhbnQgc2NyZWVuIHJlYWRlcnMgdG8gcmVhZCB0aGlzIHVudGlsIG9wdGlvbnMgYXJlIHZpc2libGVcbiAgICAgIG9wdGlvbnMuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICBvcHRpb25zLnRhYkluZGV4ID0gJy0xJztcblxuICAgICAgLy8gTmVlZCBhIHVuaXF1ZSBpZCBmb3IgYXJpYS1jb250cm9sc1xuICAgICAgb3B0aW9ucy5pZCA9ICdxbC1waWNrZXItb3B0aW9ucy0nICsgb3B0aW9uc0NvdW50ZXI7XG4gICAgICBvcHRpb25zQ291bnRlciArPSAxO1xuICAgICAgdGhpcy5sYWJlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtY29udHJvbHMnLCBvcHRpb25zLmlkKTtcblxuICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgICAgW10uc2xpY2UuY2FsbCh0aGlzLnNlbGVjdC5vcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBfdGhpczMuYnVpbGRJdGVtKG9wdGlvbik7XG4gICAgICAgIG9wdGlvbnMuYXBwZW5kQ2hpbGQoaXRlbSk7XG4gICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICBfdGhpczMuc2VsZWN0SXRlbShpdGVtKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChvcHRpb25zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdidWlsZFBpY2tlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJ1aWxkUGlja2VyKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIFtdLnNsaWNlLmNhbGwodGhpcy5zZWxlY3QuYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBfdGhpczQuY29udGFpbmVyLnNldEF0dHJpYnV0ZShpdGVtLm5hbWUsIGl0ZW0udmFsdWUpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdxbC1waWNrZXInKTtcbiAgICAgIHRoaXMubGFiZWwgPSB0aGlzLmJ1aWxkTGFiZWwoKTtcbiAgICAgIHRoaXMuYnVpbGRPcHRpb25zKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZXNjYXBlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXNjYXBlKCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIC8vIENsb3NlIG1lbnUgYW5kIHJldHVybiBmb2N1cyB0byB0cmlnZ2VyIGxhYmVsXG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAvLyBOZWVkIHNldFRpbWVvdXQgZm9yIGFjY2Vzc2liaWxpdHkgdG8gZW5zdXJlIHRoYXQgdGhlIGJyb3dzZXIgZXhlY3V0ZXNcbiAgICAgIC8vIGZvY3VzIG9uIHRoZSBuZXh0IHByb2Nlc3MgdGhyZWFkIGFuZCBhZnRlciBhbnkgRE9NIGNvbnRlbnQgY2hhbmdlc1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczUubGFiZWwuZm9jdXMoKTtcbiAgICAgIH0sIDEpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Nsb3NlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdxbC1leHBhbmRlZCcpO1xuICAgICAgdGhpcy5sYWJlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgIHRoaXMub3B0aW9ucy5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZWxlY3RJdGVtJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0SXRlbShpdGVtKSB7XG4gICAgICB2YXIgdHJpZ2dlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgICAgIHZhciBzZWxlY3RlZCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5xbC1zZWxlY3RlZCcpO1xuICAgICAgaWYgKGl0ZW0gPT09IHNlbGVjdGVkKSByZXR1cm47XG4gICAgICBpZiAoc2VsZWN0ZWQgIT0gbnVsbCkge1xuICAgICAgICBzZWxlY3RlZC5jbGFzc0xpc3QucmVtb3ZlKCdxbC1zZWxlY3RlZCcpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW0gPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKCdxbC1zZWxlY3RlZCcpO1xuICAgICAgdGhpcy5zZWxlY3Quc2VsZWN0ZWRJbmRleCA9IFtdLmluZGV4T2YuY2FsbChpdGVtLnBhcmVudE5vZGUuY2hpbGRyZW4sIGl0ZW0pO1xuICAgICAgaWYgKGl0ZW0uaGFzQXR0cmlidXRlKCdkYXRhLXZhbHVlJykpIHtcbiAgICAgICAgdGhpcy5sYWJlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnLCBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGFiZWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXZhbHVlJyk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbS5oYXNBdHRyaWJ1dGUoJ2RhdGEtbGFiZWwnKSkge1xuICAgICAgICB0aGlzLmxhYmVsLnNldEF0dHJpYnV0ZSgnZGF0YS1sYWJlbCcsIGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWxhYmVsJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sYWJlbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtbGFiZWwnKTtcbiAgICAgIH1cbiAgICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJykpO1xuICAgICAgICB9IGVsc2UgaWYgKCh0eXBlb2YgRXZlbnQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKEV2ZW50KSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgLy8gSUUxMVxuICAgICAgICAgIHZhciBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgICAgICAgIGV2ZW50LmluaXRFdmVudCgnY2hhbmdlJywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgdGhpcy5zZWxlY3QuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHZhciBvcHRpb24gPSB2b2lkIDA7XG4gICAgICBpZiAodGhpcy5zZWxlY3Quc2VsZWN0ZWRJbmRleCA+IC0xKSB7XG4gICAgICAgIHZhciBpdGVtID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnFsLXBpY2tlci1vcHRpb25zJykuY2hpbGRyZW5bdGhpcy5zZWxlY3Quc2VsZWN0ZWRJbmRleF07XG4gICAgICAgIG9wdGlvbiA9IHRoaXMuc2VsZWN0Lm9wdGlvbnNbdGhpcy5zZWxlY3Quc2VsZWN0ZWRJbmRleF07XG4gICAgICAgIHRoaXMuc2VsZWN0SXRlbShpdGVtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2VsZWN0SXRlbShudWxsKTtcbiAgICAgIH1cbiAgICAgIHZhciBpc0FjdGl2ZSA9IG9wdGlvbiAhPSBudWxsICYmIG9wdGlvbiAhPT0gdGhpcy5zZWxlY3QucXVlcnlTZWxlY3Rvcignb3B0aW9uW3NlbGVjdGVkXScpO1xuICAgICAgdGhpcy5sYWJlbC5jbGFzc0xpc3QudG9nZ2xlKCdxbC1hY3RpdmUnLCBpc0FjdGl2ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBpY2tlcjtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUGlja2VyO1xuXG4vKioqLyB9KSxcbi8qIDI5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9xdWlsbCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfcXVpbGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGwpO1xuXG52YXIgX2Jsb2NrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIF9ibG9jazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ibG9jayk7XG5cbnZhciBfYnJlYWsgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblxudmFyIF9icmVhazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9icmVhayk7XG5cbnZhciBfY29udGFpbmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cbnZhciBfY29udGFpbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbnRhaW5lcik7XG5cbnZhciBfY3Vyc29yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cbnZhciBfY3Vyc29yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2N1cnNvcik7XG5cbnZhciBfZW1iZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcblxudmFyIF9lbWJlZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbWJlZCk7XG5cbnZhciBfaW5saW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxudmFyIF9pbmxpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5saW5lKTtcblxudmFyIF9zY3JvbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKTtcblxudmFyIF9zY3JvbGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2Nyb2xsKTtcblxudmFyIF90ZXh0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxudmFyIF90ZXh0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RleHQpO1xuXG52YXIgX2NsaXBib2FyZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTUpO1xuXG52YXIgX2NsaXBib2FyZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGlwYm9hcmQpO1xuXG52YXIgX2hpc3RvcnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQyKTtcblxudmFyIF9oaXN0b3J5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hpc3RvcnkpO1xuXG52YXIgX2tleWJvYXJkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cbnZhciBfa2V5Ym9hcmQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5Ym9hcmQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5fcXVpbGwyLmRlZmF1bHQucmVnaXN0ZXIoe1xuICAnYmxvdHMvYmxvY2snOiBfYmxvY2syLmRlZmF1bHQsXG4gICdibG90cy9ibG9jay9lbWJlZCc6IF9ibG9jay5CbG9ja0VtYmVkLFxuICAnYmxvdHMvYnJlYWsnOiBfYnJlYWsyLmRlZmF1bHQsXG4gICdibG90cy9jb250YWluZXInOiBfY29udGFpbmVyMi5kZWZhdWx0LFxuICAnYmxvdHMvY3Vyc29yJzogX2N1cnNvcjIuZGVmYXVsdCxcbiAgJ2Jsb3RzL2VtYmVkJzogX2VtYmVkMi5kZWZhdWx0LFxuICAnYmxvdHMvaW5saW5lJzogX2lubGluZTIuZGVmYXVsdCxcbiAgJ2Jsb3RzL3Njcm9sbCc6IF9zY3JvbGwyLmRlZmF1bHQsXG4gICdibG90cy90ZXh0JzogX3RleHQyLmRlZmF1bHQsXG5cbiAgJ21vZHVsZXMvY2xpcGJvYXJkJzogX2NsaXBib2FyZDIuZGVmYXVsdCxcbiAgJ21vZHVsZXMvaGlzdG9yeSc6IF9oaXN0b3J5Mi5kZWZhdWx0LFxuICAnbW9kdWxlcy9rZXlib2FyZCc6IF9rZXlib2FyZDIuZGVmYXVsdFxufSk7XG5cbl9wYXJjaG1lbnQyLmRlZmF1bHQucmVnaXN0ZXIoX2Jsb2NrMi5kZWZhdWx0LCBfYnJlYWsyLmRlZmF1bHQsIF9jdXJzb3IyLmRlZmF1bHQsIF9pbmxpbmUyLmRlZmF1bHQsIF9zY3JvbGwyLmRlZmF1bHQsIF90ZXh0Mi5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX3F1aWxsMi5kZWZhdWx0O1xuXG4vKioqLyB9KSxcbi8qIDMwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIFNoYWRvd0Jsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2hhZG93QmxvdChkb21Ob2RlKSB7XG4gICAgICAgIHRoaXMuZG9tTm9kZSA9IGRvbU5vZGU7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXSA9IHsgYmxvdDogdGhpcyB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2hhZG93QmxvdC5wcm90b3R5cGUsIFwic3RhdGljc1wiLCB7XG4gICAgICAgIC8vIEhhY2sgZm9yIGFjY2Vzc2luZyBpbmhlcml0ZWQgc3RhdGljIG1ldGhvZHNcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU2hhZG93QmxvdC5jcmVhdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMudGFnTmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVnaXN0cnkuUGFyY2htZW50RXJyb3IoJ0Jsb3QgZGVmaW5pdGlvbiBtaXNzaW5nIHRhZ05hbWUnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbm9kZTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy50YWdOYW1lKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KHZhbHVlKS50b1N0cmluZygpID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMudGFnTmFtZVt2YWx1ZSAtIDFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudGFnTmFtZS5pbmRleE9mKHZhbHVlKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy50YWdOYW1lWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMudGFnTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBub2RlLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuYXR0YWNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGwgPSB0aGlzLnBhcmVudC5zY3JvbGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZG9tTm9kZSA9IHRoaXMuZG9tTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICByZXR1cm4gUmVnaXN0cnkuY3JlYXRlKGRvbU5vZGUpO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuZGV0YWNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQgIT0gbnVsbClcbiAgICAgICAgICAgIHRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGRlbGV0ZSB0aGlzLmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuZGVsZXRlQXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICB2YXIgYmxvdCA9IHRoaXMuaXNvbGF0ZShpbmRleCwgbGVuZ3RoKTtcbiAgICAgICAgYmxvdC5yZW1vdmUoKTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmZvcm1hdEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHZhciBibG90ID0gdGhpcy5pc29sYXRlKGluZGV4LCBsZW5ndGgpO1xuICAgICAgICBpZiAoUmVnaXN0cnkucXVlcnkobmFtZSwgUmVnaXN0cnkuU2NvcGUuQkxPVCkgIT0gbnVsbCAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgYmxvdC53cmFwKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChSZWdpc3RyeS5xdWVyeShuYW1lLCBSZWdpc3RyeS5TY29wZS5BVFRSSUJVVEUpICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBSZWdpc3RyeS5jcmVhdGUodGhpcy5zdGF0aWNzLnNjb3BlKTtcbiAgICAgICAgICAgIGJsb3Qud3JhcChwYXJlbnQpO1xuICAgICAgICAgICAgcGFyZW50LmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmluc2VydEF0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICAgIHZhciBibG90ID0gZGVmID09IG51bGwgPyBSZWdpc3RyeS5jcmVhdGUoJ3RleHQnLCB2YWx1ZSkgOiBSZWdpc3RyeS5jcmVhdGUodmFsdWUsIGRlZik7XG4gICAgICAgIHZhciByZWYgPSB0aGlzLnNwbGl0KGluZGV4KTtcbiAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKGJsb3QsIHJlZik7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5pbnNlcnRJbnRvID0gZnVuY3Rpb24gKHBhcmVudEJsb3QsIHJlZkJsb3QpIHtcbiAgICAgICAgaWYgKHJlZkJsb3QgPT09IHZvaWQgMCkgeyByZWZCbG90ID0gbnVsbDsgfVxuICAgICAgICBpZiAodGhpcy5wYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuY2hpbGRyZW4ucmVtb3ZlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZWZEb21Ob2RlID0gbnVsbDtcbiAgICAgICAgcGFyZW50QmxvdC5jaGlsZHJlbi5pbnNlcnRCZWZvcmUodGhpcywgcmVmQmxvdCk7XG4gICAgICAgIGlmIChyZWZCbG90ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlZkRvbU5vZGUgPSByZWZCbG90LmRvbU5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZG9tTm9kZS5wYXJlbnROb2RlICE9IHBhcmVudEJsb3QuZG9tTm9kZSB8fFxuICAgICAgICAgICAgdGhpcy5kb21Ob2RlLm5leHRTaWJsaW5nICE9IHJlZkRvbU5vZGUpIHtcbiAgICAgICAgICAgIHBhcmVudEJsb3QuZG9tTm9kZS5pbnNlcnRCZWZvcmUodGhpcy5kb21Ob2RlLCByZWZEb21Ob2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudEJsb3Q7XG4gICAgICAgIHRoaXMuYXR0YWNoKCk7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5pc29sYXRlID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMuc3BsaXQoaW5kZXgpO1xuICAgICAgICB0YXJnZXQuc3BsaXQobGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5vZmZzZXQgPSBmdW5jdGlvbiAocm9vdCkge1xuICAgICAgICBpZiAocm9vdCA9PT0gdm9pZCAwKSB7IHJvb3QgPSB0aGlzLnBhcmVudDsgfVxuICAgICAgICBpZiAodGhpcy5wYXJlbnQgPT0gbnVsbCB8fCB0aGlzID09IHJvb3QpXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmNoaWxkcmVuLm9mZnNldCh0aGlzKSArIHRoaXMucGFyZW50Lm9mZnNldChyb290KTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLm9wdGltaXplID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgLy8gVE9ETyBjbGVhbiB1cCBvbmNlIHdlIHVzZSBXZWFrTWFwXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKHRoaXMuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmRvbU5vZGUucGFyZW50Tm9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmRvbU5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmRvbU5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGV0YWNoKCk7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBpZiAodGFyZ2V0LnBhcmVudCA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0YXJnZXQucGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLCB0YXJnZXQubmV4dCk7XG4gICAgICAgIHRhcmdldC5yZW1vdmUoKTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLnJlcGxhY2VXaXRoID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHZhciByZXBsYWNlbWVudCA9IHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyA/IFJlZ2lzdHJ5LmNyZWF0ZShuYW1lLCB2YWx1ZSkgOiBuYW1lO1xuICAgICAgICByZXBsYWNlbWVudC5yZXBsYWNlKHRoaXMpO1xuICAgICAgICByZXR1cm4gcmVwbGFjZW1lbnQ7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIChpbmRleCwgZm9yY2UpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4ID09PSAwID8gdGhpcyA6IHRoaXMubmV4dDtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgICAgLy8gTm90aGluZyB0byBkbyBieSBkZWZhdWx0XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0gdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnID8gUmVnaXN0cnkuY3JlYXRlKG5hbWUsIHZhbHVlKSA6IG5hbWU7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUod3JhcHBlciwgdGhpcy5uZXh0KTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMpO1xuICAgICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QuYmxvdE5hbWUgPSAnYWJzdHJhY3QnO1xuICAgIHJldHVybiBTaGFkb3dCbG90O1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFNoYWRvd0Jsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiAzMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGF0dHJpYnV0b3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xudmFyIGNsYXNzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKTtcbnZhciBzdHlsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIEF0dHJpYnV0b3JTdG9yZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBdHRyaWJ1dG9yU3RvcmUoZG9tTm9kZSkge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgdGhpcy5kb21Ob2RlID0gZG9tTm9kZTtcbiAgICAgICAgdGhpcy5idWlsZCgpO1xuICAgIH1cbiAgICBBdHRyaWJ1dG9yU3RvcmUucHJvdG90eXBlLmF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgICAgIC8vIHZlcmJcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlLmFkZCh0aGlzLmRvbU5vZGUsIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUudmFsdWUodGhpcy5kb21Ob2RlKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGUuYXR0ck5hbWVdID0gYXR0cmlidXRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGUuYXR0ck5hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZS5yZW1vdmUodGhpcy5kb21Ob2RlKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlLmF0dHJOYW1lXTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXR0cmlidXRvclN0b3JlLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gYXR0cmlidXRvcl8xLmRlZmF1bHQua2V5cyh0aGlzLmRvbU5vZGUpO1xuICAgICAgICB2YXIgY2xhc3NlcyA9IGNsYXNzXzEuZGVmYXVsdC5rZXlzKHRoaXMuZG9tTm9kZSk7XG4gICAgICAgIHZhciBzdHlsZXMgPSBzdHlsZV8xLmRlZmF1bHQua2V5cyh0aGlzLmRvbU5vZGUpO1xuICAgICAgICBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAuY29uY2F0KGNsYXNzZXMpXG4gICAgICAgICAgICAuY29uY2F0KHN0eWxlcylcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICB2YXIgYXR0ciA9IFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkFUVFJJQlVURSk7XG4gICAgICAgICAgICBpZiAoYXR0ciBpbnN0YW5jZW9mIGF0dHJpYnV0b3JfMS5kZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYXR0cmlidXRlc1thdHRyLmF0dHJOYW1lXSA9IGF0dHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQXR0cmlidXRvclN0b3JlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gX3RoaXMuYXR0cmlidXRlc1trZXldLnZhbHVlKF90aGlzLmRvbU5vZGUpO1xuICAgICAgICAgICAgdGFyZ2V0LmZvcm1hdChrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBBdHRyaWJ1dG9yU3RvcmUucHJvdG90eXBlLm1vdmUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY29weSh0YXJnZXQpO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgX3RoaXMuYXR0cmlidXRlc1trZXldLnJlbW92ZShfdGhpcy5kb21Ob2RlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuICAgIH07XG4gICAgQXR0cmlidXRvclN0b3JlLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmF0dHJpYnV0ZXMpLnJlZHVjZShmdW5jdGlvbiAoYXR0cmlidXRlcywgbmFtZSkge1xuICAgICAgICAgICAgYXR0cmlidXRlc1tuYW1lXSA9IF90aGlzLmF0dHJpYnV0ZXNbbmFtZV0udmFsdWUoX3RoaXMuZG9tTm9kZSk7XG4gICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgICAgICAgfSwge30pO1xuICAgIH07XG4gICAgcmV0dXJuIEF0dHJpYnV0b3JTdG9yZTtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBBdHRyaWJ1dG9yU3RvcmU7XG5cblxuLyoqKi8gfSksXG4vKiAzMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYXR0cmlidXRvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5mdW5jdGlvbiBtYXRjaChub2RlLCBwcmVmaXgpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJyc7XG4gICAgcmV0dXJuIGNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pLmZpbHRlcihmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gbmFtZS5pbmRleE9mKHByZWZpeCArIFwiLVwiKSA9PT0gMDtcbiAgICB9KTtcbn1cbnZhciBDbGFzc0F0dHJpYnV0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENsYXNzQXR0cmlidXRvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDbGFzc0F0dHJpYnV0b3IoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgQ2xhc3NBdHRyaWJ1dG9yLmtleXMgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gKG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKS5zcGxpdCgvXFxzKy8pLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5hbWVcbiAgICAgICAgICAgICAgICAuc3BsaXQoJy0nKVxuICAgICAgICAgICAgICAgIC5zbGljZSgwLCAtMSlcbiAgICAgICAgICAgICAgICAuam9pbignLScpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENsYXNzQXR0cmlidXRvci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG5vZGUsIHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5jYW5BZGQobm9kZSwgdmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0aGlzLnJlbW92ZShub2RlKTtcbiAgICAgICAgbm9kZS5jbGFzc0xpc3QuYWRkKHRoaXMua2V5TmFtZSArIFwiLVwiICsgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIENsYXNzQXR0cmlidXRvci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBtYXRjaChub2RlLCB0aGlzLmtleU5hbWUpO1xuICAgICAgICBtYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIG5vZGUuY2xhc3NMaXN0LnJlbW92ZShuYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChub2RlLmNsYXNzTGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDbGFzc0F0dHJpYnV0b3IucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG1hdGNoKG5vZGUsIHRoaXMua2V5TmFtZSlbMF0gfHwgJyc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC5zbGljZSh0aGlzLmtleU5hbWUubGVuZ3RoICsgMSk7IC8vICsxIGZvciBoeXBoZW5cbiAgICAgICAgcmV0dXJuIHRoaXMuY2FuQWRkKG5vZGUsIHZhbHVlKSA/IHZhbHVlIDogJyc7XG4gICAgfTtcbiAgICByZXR1cm4gQ2xhc3NBdHRyaWJ1dG9yO1xufShhdHRyaWJ1dG9yXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQ2xhc3NBdHRyaWJ1dG9yO1xuXG5cbi8qKiovIH0pLFxuLyogMzMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGF0dHJpYnV0b3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuZnVuY3Rpb24gY2FtZWxpemUobmFtZSkge1xuICAgIHZhciBwYXJ0cyA9IG5hbWUuc3BsaXQoJy0nKTtcbiAgICB2YXIgcmVzdCA9IHBhcnRzXG4gICAgICAgIC5zbGljZSgxKVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgICAgIHJldHVybiBwYXJ0WzBdLnRvVXBwZXJDYXNlKCkgKyBwYXJ0LnNsaWNlKDEpO1xuICAgIH0pXG4gICAgICAgIC5qb2luKCcnKTtcbiAgICByZXR1cm4gcGFydHNbMF0gKyByZXN0O1xufVxudmFyIFN0eWxlQXR0cmlidXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3R5bGVBdHRyaWJ1dG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN0eWxlQXR0cmlidXRvcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBTdHlsZUF0dHJpYnV0b3Iua2V5cyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiAobm9kZS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykgfHwgJycpLnNwbGl0KCc7JykubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGFyciA9IHZhbHVlLnNwbGl0KCc6Jyk7XG4gICAgICAgICAgICByZXR1cm4gYXJyWzBdLnRyaW0oKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdHlsZUF0dHJpYnV0b3IucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChub2RlLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuY2FuQWRkKG5vZGUsIHZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBub2RlLnN0eWxlW2NhbWVsaXplKHRoaXMua2V5TmFtZSldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgU3R5bGVBdHRyaWJ1dG9yLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIG5vZGUuc3R5bGVbY2FtZWxpemUodGhpcy5rZXlOYW1lKV0gPSAnJztcbiAgICAgICAgaWYgKCFub2RlLmdldEF0dHJpYnV0ZSgnc3R5bGUnKSkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN0eWxlQXR0cmlidXRvci5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHZhciB2YWx1ZSA9IG5vZGUuc3R5bGVbY2FtZWxpemUodGhpcy5rZXlOYW1lKV07XG4gICAgICAgIHJldHVybiB0aGlzLmNhbkFkZChub2RlLCB2YWx1ZSkgPyB2YWx1ZSA6ICcnO1xuICAgIH07XG4gICAgcmV0dXJuIFN0eWxlQXR0cmlidXRvcjtcbn0oYXR0cmlidXRvcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFN0eWxlQXR0cmlidXRvcjtcblxuXG4vKioqLyB9KSxcbi8qIDM0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBUaGVtZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVGhlbWUocXVpbGwsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGhlbWUpO1xuXG4gICAgdGhpcy5xdWlsbCA9IHF1aWxsO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5tb2R1bGVzID0ge307XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGhlbWUsIFt7XG4gICAga2V5OiAnaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMubW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBpZiAoX3RoaXMubW9kdWxlc1tuYW1lXSA9PSBudWxsKSB7XG4gICAgICAgICAgX3RoaXMuYWRkTW9kdWxlKG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhZGRNb2R1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRNb2R1bGUobmFtZSkge1xuICAgICAgdmFyIG1vZHVsZUNsYXNzID0gdGhpcy5xdWlsbC5jb25zdHJ1Y3Rvci5pbXBvcnQoJ21vZHVsZXMvJyArIG5hbWUpO1xuICAgICAgdGhpcy5tb2R1bGVzW25hbWVdID0gbmV3IG1vZHVsZUNsYXNzKHRoaXMucXVpbGwsIHRoaXMub3B0aW9ucy5tb2R1bGVzW25hbWVdIHx8IHt9KTtcbiAgICAgIHJldHVybiB0aGlzLm1vZHVsZXNbbmFtZV07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRoZW1lO1xufSgpO1xuXG5UaGVtZS5ERUZBVUxUUyA9IHtcbiAgbW9kdWxlczoge31cbn07XG5UaGVtZS50aGVtZXMgPSB7XG4gICdkZWZhdWx0JzogVGhlbWVcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFRoZW1lO1xuXG4vKioqLyB9KSxcbi8qIDM1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX3RleHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX3RleHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGV4dCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEdVQVJEX1RFWFQgPSAnXFx1RkVGRic7XG5cbnZhciBFbWJlZCA9IGZ1bmN0aW9uIChfUGFyY2htZW50JEVtYmVkKSB7XG4gIF9pbmhlcml0cyhFbWJlZCwgX1BhcmNobWVudCRFbWJlZCk7XG5cbiAgZnVuY3Rpb24gRW1iZWQobm9kZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFbWJlZCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRW1iZWQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihFbWJlZCkpLmNhbGwodGhpcywgbm9kZSkpO1xuXG4gICAgX3RoaXMuY29udGVudE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgX3RoaXMuY29udGVudE5vZGUuc2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnLCBmYWxzZSk7XG4gICAgW10uc2xpY2UuY2FsbChfdGhpcy5kb21Ob2RlLmNoaWxkTm9kZXMpLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkTm9kZSkge1xuICAgICAgX3RoaXMuY29udGVudE5vZGUuYXBwZW5kQ2hpbGQoY2hpbGROb2RlKTtcbiAgICB9KTtcbiAgICBfdGhpcy5sZWZ0R3VhcmQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShHVUFSRF9URVhUKTtcbiAgICBfdGhpcy5yaWdodEd1YXJkID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoR1VBUkRfVEVYVCk7XG4gICAgX3RoaXMuZG9tTm9kZS5hcHBlbmRDaGlsZChfdGhpcy5sZWZ0R3VhcmQpO1xuICAgIF90aGlzLmRvbU5vZGUuYXBwZW5kQ2hpbGQoX3RoaXMuY29udGVudE5vZGUpO1xuICAgIF90aGlzLmRvbU5vZGUuYXBwZW5kQ2hpbGQoX3RoaXMucmlnaHRHdWFyZCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEVtYmVkLCBbe1xuICAgIGtleTogJ2luZGV4JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5kZXgobm9kZSwgb2Zmc2V0KSB7XG4gICAgICBpZiAobm9kZSA9PT0gdGhpcy5sZWZ0R3VhcmQpIHJldHVybiAwO1xuICAgICAgaWYgKG5vZGUgPT09IHRoaXMucmlnaHRHdWFyZCkgcmV0dXJuIDE7XG4gICAgICByZXR1cm4gX2dldChFbWJlZC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihFbWJlZC5wcm90b3R5cGUpLCAnaW5kZXgnLCB0aGlzKS5jYWxsKHRoaXMsIG5vZGUsIG9mZnNldCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVzdG9yZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3RvcmUobm9kZSkge1xuICAgICAgdmFyIHJhbmdlID0gdm9pZCAwLFxuICAgICAgICAgIHRleHROb2RlID0gdm9pZCAwO1xuICAgICAgdmFyIHRleHQgPSBub2RlLmRhdGEuc3BsaXQoR1VBUkRfVEVYVCkuam9pbignJyk7XG4gICAgICBpZiAobm9kZSA9PT0gdGhpcy5sZWZ0R3VhcmQpIHtcbiAgICAgICAgaWYgKHRoaXMucHJldiBpbnN0YW5jZW9mIF90ZXh0Mi5kZWZhdWx0KSB7XG4gICAgICAgICAgdmFyIHByZXZMZW5ndGggPSB0aGlzLnByZXYubGVuZ3RoKCk7XG4gICAgICAgICAgdGhpcy5wcmV2Lmluc2VydEF0KHByZXZMZW5ndGgsIHRleHQpO1xuICAgICAgICAgIHJhbmdlID0ge1xuICAgICAgICAgICAgc3RhcnROb2RlOiB0aGlzLnByZXYuZG9tTm9kZSxcbiAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiBwcmV2TGVuZ3RoICsgdGV4dC5sZW5ndGhcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCk7XG4gICAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKF9wYXJjaG1lbnQyLmRlZmF1bHQuY3JlYXRlKHRleHROb2RlKSwgdGhpcyk7XG4gICAgICAgICAgcmFuZ2UgPSB7XG4gICAgICAgICAgICBzdGFydE5vZGU6IHRleHROb2RlLFxuICAgICAgICAgICAgc3RhcnRPZmZzZXQ6IHRleHQubGVuZ3RoXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub2RlID09PSB0aGlzLnJpZ2h0R3VhcmQpIHtcbiAgICAgICAgaWYgKHRoaXMubmV4dCBpbnN0YW5jZW9mIF90ZXh0Mi5kZWZhdWx0KSB7XG4gICAgICAgICAgdGhpcy5uZXh0Lmluc2VydEF0KDAsIHRleHQpO1xuICAgICAgICAgIHJhbmdlID0ge1xuICAgICAgICAgICAgc3RhcnROb2RlOiB0aGlzLm5leHQuZG9tTm9kZSxcbiAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiB0ZXh0Lmxlbmd0aFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KTtcbiAgICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUoX3BhcmNobWVudDIuZGVmYXVsdC5jcmVhdGUodGV4dE5vZGUpLCB0aGlzLm5leHQpO1xuICAgICAgICAgIHJhbmdlID0ge1xuICAgICAgICAgICAgc3RhcnROb2RlOiB0ZXh0Tm9kZSxcbiAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiB0ZXh0Lmxlbmd0aFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5vZGUuZGF0YSA9IEdVQVJEX1RFWFQ7XG4gICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoYXJhY3RlckRhdGEnICYmIChtdXRhdGlvbi50YXJnZXQgPT09IF90aGlzMi5sZWZ0R3VhcmQgfHwgbXV0YXRpb24udGFyZ2V0ID09PSBfdGhpczIucmlnaHRHdWFyZCkpIHtcbiAgICAgICAgICB2YXIgcmFuZ2UgPSBfdGhpczIucmVzdG9yZShtdXRhdGlvbi50YXJnZXQpO1xuICAgICAgICAgIGlmIChyYW5nZSkgY29udGV4dC5yYW5nZSA9IHJhbmdlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRW1iZWQ7XG59KF9wYXJjaG1lbnQyLmRlZmF1bHQuRW1iZWQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBFbWJlZDtcblxuLyoqKi8gfSksXG4vKiAzNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5BbGlnblN0eWxlID0gZXhwb3J0cy5BbGlnbkNsYXNzID0gZXhwb3J0cy5BbGlnbkF0dHJpYnV0ZSA9IHVuZGVmaW5lZDtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY29uZmlnID0ge1xuICBzY29wZTogX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5CTE9DSyxcbiAgd2hpdGVsaXN0OiBbJ3JpZ2h0JywgJ2NlbnRlcicsICdqdXN0aWZ5J11cbn07XG5cbnZhciBBbGlnbkF0dHJpYnV0ZSA9IG5ldyBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuQXR0cmlidXRlKCdhbGlnbicsICdhbGlnbicsIGNvbmZpZyk7XG52YXIgQWxpZ25DbGFzcyA9IG5ldyBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuQ2xhc3MoJ2FsaWduJywgJ3FsLWFsaWduJywgY29uZmlnKTtcbnZhciBBbGlnblN0eWxlID0gbmV3IF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5TdHlsZSgnYWxpZ24nLCAndGV4dC1hbGlnbicsIGNvbmZpZyk7XG5cbmV4cG9ydHMuQWxpZ25BdHRyaWJ1dGUgPSBBbGlnbkF0dHJpYnV0ZTtcbmV4cG9ydHMuQWxpZ25DbGFzcyA9IEFsaWduQ2xhc3M7XG5leHBvcnRzLkFsaWduU3R5bGUgPSBBbGlnblN0eWxlO1xuXG4vKioqLyB9KSxcbi8qIDM3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkJhY2tncm91bmRTdHlsZSA9IGV4cG9ydHMuQmFja2dyb3VuZENsYXNzID0gdW5kZWZpbmVkO1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbnZhciBfY29sb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEJhY2tncm91bmRDbGFzcyA9IG5ldyBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuQ2xhc3MoJ2JhY2tncm91bmQnLCAncWwtYmcnLCB7XG4gIHNjb3BlOiBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLklOTElORVxufSk7XG52YXIgQmFja2dyb3VuZFN0eWxlID0gbmV3IF9jb2xvci5Db2xvckF0dHJpYnV0b3IoJ2JhY2tncm91bmQnLCAnYmFja2dyb3VuZC1jb2xvcicsIHtcbiAgc2NvcGU6IF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuSU5MSU5FXG59KTtcblxuZXhwb3J0cy5CYWNrZ3JvdW5kQ2xhc3MgPSBCYWNrZ3JvdW5kQ2xhc3M7XG5leHBvcnRzLkJhY2tncm91bmRTdHlsZSA9IEJhY2tncm91bmRTdHlsZTtcblxuLyoqKi8gfSksXG4vKiAzOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5EaXJlY3Rpb25TdHlsZSA9IGV4cG9ydHMuRGlyZWN0aW9uQ2xhc3MgPSBleHBvcnRzLkRpcmVjdGlvbkF0dHJpYnV0ZSA9IHVuZGVmaW5lZDtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY29uZmlnID0ge1xuICBzY29wZTogX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5CTE9DSyxcbiAgd2hpdGVsaXN0OiBbJ3J0bCddXG59O1xuXG52YXIgRGlyZWN0aW9uQXR0cmlidXRlID0gbmV3IF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5BdHRyaWJ1dGUoJ2RpcmVjdGlvbicsICdkaXInLCBjb25maWcpO1xudmFyIERpcmVjdGlvbkNsYXNzID0gbmV3IF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5DbGFzcygnZGlyZWN0aW9uJywgJ3FsLWRpcmVjdGlvbicsIGNvbmZpZyk7XG52YXIgRGlyZWN0aW9uU3R5bGUgPSBuZXcgX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLlN0eWxlKCdkaXJlY3Rpb24nLCAnZGlyZWN0aW9uJywgY29uZmlnKTtcblxuZXhwb3J0cy5EaXJlY3Rpb25BdHRyaWJ1dGUgPSBEaXJlY3Rpb25BdHRyaWJ1dGU7XG5leHBvcnRzLkRpcmVjdGlvbkNsYXNzID0gRGlyZWN0aW9uQ2xhc3M7XG5leHBvcnRzLkRpcmVjdGlvblN0eWxlID0gRGlyZWN0aW9uU3R5bGU7XG5cbi8qKiovIH0pLFxuLyogMzkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRm9udENsYXNzID0gZXhwb3J0cy5Gb250U3R5bGUgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBjb25maWcgPSB7XG4gIHNjb3BlOiBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLklOTElORSxcbiAgd2hpdGVsaXN0OiBbJ3NlcmlmJywgJ21vbm9zcGFjZSddXG59O1xuXG52YXIgRm9udENsYXNzID0gbmV3IF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5DbGFzcygnZm9udCcsICdxbC1mb250JywgY29uZmlnKTtcblxudmFyIEZvbnRTdHlsZUF0dHJpYnV0b3IgPSBmdW5jdGlvbiAoX1BhcmNobWVudCRBdHRyaWJ1dG9yKSB7XG4gIF9pbmhlcml0cyhGb250U3R5bGVBdHRyaWJ1dG9yLCBfUGFyY2htZW50JEF0dHJpYnV0b3IpO1xuXG4gIGZ1bmN0aW9uIEZvbnRTdHlsZUF0dHJpYnV0b3IoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvbnRTdHlsZUF0dHJpYnV0b3IpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChGb250U3R5bGVBdHRyaWJ1dG9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRm9udFN0eWxlQXR0cmlidXRvcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEZvbnRTdHlsZUF0dHJpYnV0b3IsIFt7XG4gICAga2V5OiAndmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShub2RlKSB7XG4gICAgICByZXR1cm4gX2dldChGb250U3R5bGVBdHRyaWJ1dG9yLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZvbnRTdHlsZUF0dHJpYnV0b3IucHJvdG90eXBlKSwgJ3ZhbHVlJywgdGhpcykuY2FsbCh0aGlzLCBub2RlKS5yZXBsYWNlKC9bXCInXS9nLCAnJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZvbnRTdHlsZUF0dHJpYnV0b3I7XG59KF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5TdHlsZSk7XG5cbnZhciBGb250U3R5bGUgPSBuZXcgRm9udFN0eWxlQXR0cmlidXRvcignZm9udCcsICdmb250LWZhbWlseScsIGNvbmZpZyk7XG5cbmV4cG9ydHMuRm9udFN0eWxlID0gRm9udFN0eWxlO1xuZXhwb3J0cy5Gb250Q2xhc3MgPSBGb250Q2xhc3M7XG5cbi8qKiovIH0pLFxuLyogNDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU2l6ZVN0eWxlID0gZXhwb3J0cy5TaXplQ2xhc3MgPSB1bmRlZmluZWQ7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFNpemVDbGFzcyA9IG5ldyBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuQ2xhc3MoJ3NpemUnLCAncWwtc2l6ZScsIHtcbiAgc2NvcGU6IF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuSU5MSU5FLFxuICB3aGl0ZWxpc3Q6IFsnc21hbGwnLCAnbGFyZ2UnLCAnaHVnZSddXG59KTtcbnZhciBTaXplU3R5bGUgPSBuZXcgX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLlN0eWxlKCdzaXplJywgJ2ZvbnQtc2l6ZScsIHtcbiAgc2NvcGU6IF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuSU5MSU5FLFxuICB3aGl0ZWxpc3Q6IFsnMTBweCcsICcxOHB4JywgJzMycHgnXVxufSk7XG5cbmV4cG9ydHMuU2l6ZUNsYXNzID0gU2l6ZUNsYXNzO1xuZXhwb3J0cy5TaXplU3R5bGUgPSBTaXplU3R5bGU7XG5cbi8qKiovIH0pLFxuLyogNDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICdhbGlnbic6IHtcbiAgICAnJzogX193ZWJwYWNrX3JlcXVpcmVfXyg3NiksXG4gICAgJ2NlbnRlcic6IF9fd2VicGFja19yZXF1aXJlX18oNzcpLFxuICAgICdyaWdodCc6IF9fd2VicGFja19yZXF1aXJlX18oNzgpLFxuICAgICdqdXN0aWZ5JzogX193ZWJwYWNrX3JlcXVpcmVfXyg3OSlcbiAgfSxcbiAgJ2JhY2tncm91bmQnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDgwKSxcbiAgJ2Jsb2NrcXVvdGUnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDgxKSxcbiAgJ2JvbGQnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyKSxcbiAgJ2NsZWFuJzogX193ZWJwYWNrX3JlcXVpcmVfXyg4MyksXG4gICdjb2RlJzogX193ZWJwYWNrX3JlcXVpcmVfXyg1OCksXG4gICdjb2RlLWJsb2NrJzogX193ZWJwYWNrX3JlcXVpcmVfXyg1OCksXG4gICdjb2xvcic6IF9fd2VicGFja19yZXF1aXJlX18oODQpLFxuICAnZGlyZWN0aW9uJzoge1xuICAgICcnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1KSxcbiAgICAncnRsJzogX193ZWJwYWNrX3JlcXVpcmVfXyg4NilcbiAgfSxcbiAgJ2Zsb2F0Jzoge1xuICAgICdjZW50ZXInOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDg3KSxcbiAgICAnZnVsbCc6IF9fd2VicGFja19yZXF1aXJlX18oODgpLFxuICAgICdsZWZ0JzogX193ZWJwYWNrX3JlcXVpcmVfXyg4OSksXG4gICAgJ3JpZ2h0JzogX193ZWJwYWNrX3JlcXVpcmVfXyg5MClcbiAgfSxcbiAgJ2Zvcm11bGEnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxKSxcbiAgJ2hlYWRlcic6IHtcbiAgICAnMSc6IF9fd2VicGFja19yZXF1aXJlX18oOTIpLFxuICAgICcyJzogX193ZWJwYWNrX3JlcXVpcmVfXyg5MylcbiAgfSxcbiAgJ2l0YWxpYyc6IF9fd2VicGFja19yZXF1aXJlX18oOTQpLFxuICAnaW1hZ2UnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1KSxcbiAgJ2luZGVudCc6IHtcbiAgICAnKzEnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDk2KSxcbiAgICAnLTEnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDk3KVxuICB9LFxuICAnbGluayc6IF9fd2VicGFja19yZXF1aXJlX18oOTgpLFxuICAnbGlzdCc6IHtcbiAgICAnb3JkZXJlZCc6IF9fd2VicGFja19yZXF1aXJlX18oOTkpLFxuICAgICdidWxsZXQnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMCksXG4gICAgJ2NoZWNrJzogX193ZWJwYWNrX3JlcXVpcmVfXygxMDEpXG4gIH0sXG4gICdzY3JpcHQnOiB7XG4gICAgJ3N1Yic6IF9fd2VicGFja19yZXF1aXJlX18oMTAyKSxcbiAgICAnc3VwZXInOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMylcbiAgfSxcbiAgJ3N0cmlrZSc6IF9fd2VicGFja19yZXF1aXJlX18oMTA0KSxcbiAgJ3VuZGVybGluZSc6IF9fd2VicGFja19yZXF1aXJlX18oMTA1KSxcbiAgJ3ZpZGVvJzogX193ZWJwYWNrX3JlcXVpcmVfXygxMDYpXG59O1xuXG4vKioqLyB9KSxcbi8qIDQyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldExhc3RDaGFuZ2VJbmRleCA9IGV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX3F1aWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF9xdWlsbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWlsbCk7XG5cbnZhciBfbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblxudmFyIF9tb2R1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9kdWxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgSGlzdG9yeSA9IGZ1bmN0aW9uIChfTW9kdWxlKSB7XG4gIF9pbmhlcml0cyhIaXN0b3J5LCBfTW9kdWxlKTtcblxuICBmdW5jdGlvbiBIaXN0b3J5KHF1aWxsLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhpc3RvcnkpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEhpc3RvcnkuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihIaXN0b3J5KSkuY2FsbCh0aGlzLCBxdWlsbCwgb3B0aW9ucykpO1xuXG4gICAgX3RoaXMubGFzdFJlY29yZGVkID0gMDtcbiAgICBfdGhpcy5pZ25vcmVDaGFuZ2UgPSBmYWxzZTtcbiAgICBfdGhpcy5jbGVhcigpO1xuICAgIF90aGlzLnF1aWxsLm9uKF9xdWlsbDIuZGVmYXVsdC5ldmVudHMuRURJVE9SX0NIQU5HRSwgZnVuY3Rpb24gKGV2ZW50TmFtZSwgZGVsdGEsIG9sZERlbHRhLCBzb3VyY2UpIHtcbiAgICAgIGlmIChldmVudE5hbWUgIT09IF9xdWlsbDIuZGVmYXVsdC5ldmVudHMuVEVYVF9DSEFOR0UgfHwgX3RoaXMuaWdub3JlQ2hhbmdlKSByZXR1cm47XG4gICAgICBpZiAoIV90aGlzLm9wdGlvbnMudXNlck9ubHkgfHwgc291cmNlID09PSBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKSB7XG4gICAgICAgIF90aGlzLnJlY29yZChkZWx0YSwgb2xkRGVsdGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMudHJhbnNmb3JtKGRlbHRhKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfdGhpcy5xdWlsbC5rZXlib2FyZC5hZGRCaW5kaW5nKHsga2V5OiAnWicsIHNob3J0S2V5OiB0cnVlIH0sIF90aGlzLnVuZG8uYmluZChfdGhpcykpO1xuICAgIF90aGlzLnF1aWxsLmtleWJvYXJkLmFkZEJpbmRpbmcoeyBrZXk6ICdaJywgc2hvcnRLZXk6IHRydWUsIHNoaWZ0S2V5OiB0cnVlIH0sIF90aGlzLnJlZG8uYmluZChfdGhpcykpO1xuICAgIGlmICgvV2luL2kudGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pKSB7XG4gICAgICBfdGhpcy5xdWlsbC5rZXlib2FyZC5hZGRCaW5kaW5nKHsga2V5OiAnWScsIHNob3J0S2V5OiB0cnVlIH0sIF90aGlzLnJlZG8uYmluZChfdGhpcykpO1xuICAgIH1cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSGlzdG9yeSwgW3tcbiAgICBrZXk6ICdjaGFuZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2Uoc291cmNlLCBkZXN0KSB7XG4gICAgICBpZiAodGhpcy5zdGFja1tzb3VyY2VdLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgdmFyIGRlbHRhID0gdGhpcy5zdGFja1tzb3VyY2VdLnBvcCgpO1xuICAgICAgdGhpcy5zdGFja1tkZXN0XS5wdXNoKGRlbHRhKTtcbiAgICAgIHRoaXMubGFzdFJlY29yZGVkID0gMDtcbiAgICAgIHRoaXMuaWdub3JlQ2hhbmdlID0gdHJ1ZTtcbiAgICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMoZGVsdGFbc291cmNlXSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICB0aGlzLmlnbm9yZUNoYW5nZSA9IGZhbHNlO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0TGFzdENoYW5nZUluZGV4KGRlbHRhW3NvdXJjZV0pO1xuICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24oaW5kZXgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NsZWFyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICB0aGlzLnN0YWNrID0geyB1bmRvOiBbXSwgcmVkbzogW10gfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjdXRvZmYnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjdXRvZmYoKSB7XG4gICAgICB0aGlzLmxhc3RSZWNvcmRlZCA9IDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVjb3JkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjb3JkKGNoYW5nZURlbHRhLCBvbGREZWx0YSkge1xuICAgICAgaWYgKGNoYW5nZURlbHRhLm9wcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIHRoaXMuc3RhY2sucmVkbyA9IFtdO1xuICAgICAgdmFyIHVuZG9EZWx0YSA9IHRoaXMucXVpbGwuZ2V0Q29udGVudHMoKS5kaWZmKG9sZERlbHRhKTtcbiAgICAgIHZhciB0aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgICAgaWYgKHRoaXMubGFzdFJlY29yZGVkICsgdGhpcy5vcHRpb25zLmRlbGF5ID4gdGltZXN0YW1wICYmIHRoaXMuc3RhY2sudW5kby5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBkZWx0YSA9IHRoaXMuc3RhY2sudW5kby5wb3AoKTtcbiAgICAgICAgdW5kb0RlbHRhID0gdW5kb0RlbHRhLmNvbXBvc2UoZGVsdGEudW5kbyk7XG4gICAgICAgIGNoYW5nZURlbHRhID0gZGVsdGEucmVkby5jb21wb3NlKGNoYW5nZURlbHRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGFzdFJlY29yZGVkID0gdGltZXN0YW1wO1xuICAgICAgfVxuICAgICAgdGhpcy5zdGFjay51bmRvLnB1c2goe1xuICAgICAgICByZWRvOiBjaGFuZ2VEZWx0YSxcbiAgICAgICAgdW5kbzogdW5kb0RlbHRhXG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLnN0YWNrLnVuZG8ubGVuZ3RoID4gdGhpcy5vcHRpb25zLm1heFN0YWNrKSB7XG4gICAgICAgIHRoaXMuc3RhY2sudW5kby5zaGlmdCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlZG8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWRvKCkge1xuICAgICAgdGhpcy5jaGFuZ2UoJ3JlZG8nLCAndW5kbycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3RyYW5zZm9ybScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zZm9ybShkZWx0YSkge1xuICAgICAgdGhpcy5zdGFjay51bmRvLmZvckVhY2goZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgICAgICBjaGFuZ2UudW5kbyA9IGRlbHRhLnRyYW5zZm9ybShjaGFuZ2UudW5kbywgdHJ1ZSk7XG4gICAgICAgIGNoYW5nZS5yZWRvID0gZGVsdGEudHJhbnNmb3JtKGNoYW5nZS5yZWRvLCB0cnVlKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zdGFjay5yZWRvLmZvckVhY2goZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgICAgICBjaGFuZ2UudW5kbyA9IGRlbHRhLnRyYW5zZm9ybShjaGFuZ2UudW5kbywgdHJ1ZSk7XG4gICAgICAgIGNoYW5nZS5yZWRvID0gZGVsdGEudHJhbnNmb3JtKGNoYW5nZS5yZWRvLCB0cnVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VuZG8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bmRvKCkge1xuICAgICAgdGhpcy5jaGFuZ2UoJ3VuZG8nLCAncmVkbycpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBIaXN0b3J5O1xufShfbW9kdWxlMi5kZWZhdWx0KTtcblxuSGlzdG9yeS5ERUZBVUxUUyA9IHtcbiAgZGVsYXk6IDEwMDAsXG4gIG1heFN0YWNrOiAxMDAsXG4gIHVzZXJPbmx5OiBmYWxzZVxufTtcblxuZnVuY3Rpb24gZW5kc1dpdGhOZXdsaW5lQ2hhbmdlKGRlbHRhKSB7XG4gIHZhciBsYXN0T3AgPSBkZWx0YS5vcHNbZGVsdGEub3BzLmxlbmd0aCAtIDFdO1xuICBpZiAobGFzdE9wID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgaWYgKGxhc3RPcC5pbnNlcnQgIT0gbnVsbCkge1xuICAgIHJldHVybiB0eXBlb2YgbGFzdE9wLmluc2VydCA9PT0gJ3N0cmluZycgJiYgbGFzdE9wLmluc2VydC5lbmRzV2l0aCgnXFxuJyk7XG4gIH1cbiAgaWYgKGxhc3RPcC5hdHRyaWJ1dGVzICE9IG51bGwpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobGFzdE9wLmF0dHJpYnV0ZXMpLnNvbWUoZnVuY3Rpb24gKGF0dHIpIHtcbiAgICAgIHJldHVybiBfcGFyY2htZW50Mi5kZWZhdWx0LnF1ZXJ5KGF0dHIsIF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuQkxPQ0spICE9IG51bGw7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRMYXN0Q2hhbmdlSW5kZXgoZGVsdGEpIHtcbiAgdmFyIGRlbGV0ZUxlbmd0aCA9IGRlbHRhLnJlZHVjZShmdW5jdGlvbiAobGVuZ3RoLCBvcCkge1xuICAgIGxlbmd0aCArPSBvcC5kZWxldGUgfHwgMDtcbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9LCAwKTtcbiAgdmFyIGNoYW5nZUluZGV4ID0gZGVsdGEubGVuZ3RoKCkgLSBkZWxldGVMZW5ndGg7XG4gIGlmIChlbmRzV2l0aE5ld2xpbmVDaGFuZ2UoZGVsdGEpKSB7XG4gICAgY2hhbmdlSW5kZXggLT0gMTtcbiAgfVxuICByZXR1cm4gY2hhbmdlSW5kZXg7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEhpc3Rvcnk7XG5leHBvcnRzLmdldExhc3RDaGFuZ2VJbmRleCA9IGdldExhc3RDaGFuZ2VJbmRleDtcblxuLyoqKi8gfSksXG4vKiA0MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5CYXNlVG9vbHRpcCA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX2V4dGVuZCA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfZXh0ZW5kMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZCk7XG5cbnZhciBfcXVpbGxEZWx0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfcXVpbGxEZWx0YTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWlsbERlbHRhKTtcblxudmFyIF9lbWl0dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxudmFyIF9lbWl0dGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VtaXR0ZXIpO1xuXG52YXIgX2tleWJvYXJkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cbnZhciBfa2V5Ym9hcmQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5Ym9hcmQpO1xuXG52YXIgX3RoZW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7XG5cbnZhciBfdGhlbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGhlbWUpO1xuXG52YXIgX2NvbG9yUGlja2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OSk7XG5cbnZhciBfY29sb3JQaWNrZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29sb3JQaWNrZXIpO1xuXG52YXIgX2ljb25QaWNrZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwKTtcblxudmFyIF9pY29uUGlja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ljb25QaWNrZXIpO1xuXG52YXIgX3BpY2tlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpO1xuXG52YXIgX3BpY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9waWNrZXIpO1xuXG52YXIgX3Rvb2x0aXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxKTtcblxudmFyIF90b29sdGlwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Rvb2x0aXApO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBBTElHTlMgPSBbZmFsc2UsICdjZW50ZXInLCAncmlnaHQnLCAnanVzdGlmeSddO1xuXG52YXIgQ09MT1JTID0gW1wiIzAwMDAwMFwiLCBcIiNlNjAwMDBcIiwgXCIjZmY5OTAwXCIsIFwiI2ZmZmYwMFwiLCBcIiMwMDhhMDBcIiwgXCIjMDA2NmNjXCIsIFwiIzk5MzNmZlwiLCBcIiNmZmZmZmZcIiwgXCIjZmFjY2NjXCIsIFwiI2ZmZWJjY1wiLCBcIiNmZmZmY2NcIiwgXCIjY2NlOGNjXCIsIFwiI2NjZTBmNVwiLCBcIiNlYmQ2ZmZcIiwgXCIjYmJiYmJiXCIsIFwiI2YwNjY2NlwiLCBcIiNmZmMyNjZcIiwgXCIjZmZmZjY2XCIsIFwiIzY2Yjk2NlwiLCBcIiM2NmEzZTBcIiwgXCIjYzI4NWZmXCIsIFwiIzg4ODg4OFwiLCBcIiNhMTAwMDBcIiwgXCIjYjI2YjAwXCIsIFwiI2IyYjIwMFwiLCBcIiMwMDYxMDBcIiwgXCIjMDA0N2IyXCIsIFwiIzZiMjRiMlwiLCBcIiM0NDQ0NDRcIiwgXCIjNWMwMDAwXCIsIFwiIzY2M2QwMFwiLCBcIiM2NjY2MDBcIiwgXCIjMDAzNzAwXCIsIFwiIzAwMjk2NlwiLCBcIiMzZDE0NjZcIl07XG5cbnZhciBGT05UUyA9IFtmYWxzZSwgJ3NlcmlmJywgJ21vbm9zcGFjZSddO1xuXG52YXIgSEVBREVSUyA9IFsnMScsICcyJywgJzMnLCBmYWxzZV07XG5cbnZhciBTSVpFUyA9IFsnc21hbGwnLCBmYWxzZSwgJ2xhcmdlJywgJ2h1Z2UnXTtcblxudmFyIEJhc2VUaGVtZSA9IGZ1bmN0aW9uIChfVGhlbWUpIHtcbiAgX2luaGVyaXRzKEJhc2VUaGVtZSwgX1RoZW1lKTtcblxuICBmdW5jdGlvbiBCYXNlVGhlbWUocXVpbGwsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzZVRoZW1lKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCYXNlVGhlbWUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCYXNlVGhlbWUpKS5jYWxsKHRoaXMsIHF1aWxsLCBvcHRpb25zKSk7XG5cbiAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcihlKSB7XG4gICAgICBpZiAoIWRvY3VtZW50LmJvZHkuY29udGFpbnMocXVpbGwucm9vdCkpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMudG9vbHRpcCAhPSBudWxsICYmICFfdGhpcy50b29sdGlwLnJvb3QuY29udGFpbnMoZS50YXJnZXQpICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IF90aGlzLnRvb2x0aXAudGV4dGJveCAmJiAhX3RoaXMucXVpbGwuaGFzRm9jdXMoKSkge1xuICAgICAgICBfdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChfdGhpcy5waWNrZXJzICE9IG51bGwpIHtcbiAgICAgICAgX3RoaXMucGlja2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChwaWNrZXIpIHtcbiAgICAgICAgICBpZiAoIXBpY2tlci5jb250YWluZXIuY29udGFpbnMoZS50YXJnZXQpKSB7XG4gICAgICAgICAgICBwaWNrZXIuY2xvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgcXVpbGwuZW1pdHRlci5saXN0ZW5ET00oJ2NsaWNrJywgZG9jdW1lbnQuYm9keSwgbGlzdGVuZXIpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCYXNlVGhlbWUsIFt7XG4gICAga2V5OiAnYWRkTW9kdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTW9kdWxlKG5hbWUpIHtcbiAgICAgIHZhciBtb2R1bGUgPSBfZ2V0KEJhc2VUaGVtZS5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCYXNlVGhlbWUucHJvdG90eXBlKSwgJ2FkZE1vZHVsZScsIHRoaXMpLmNhbGwodGhpcywgbmFtZSk7XG4gICAgICBpZiAobmFtZSA9PT0gJ3Rvb2xiYXInKSB7XG4gICAgICAgIHRoaXMuZXh0ZW5kVG9vbGJhcihtb2R1bGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1vZHVsZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdidWlsZEJ1dHRvbnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZEJ1dHRvbnMoYnV0dG9ucywgaWNvbnMpIHtcbiAgICAgIGJ1dHRvbnMuZm9yRWFjaChmdW5jdGlvbiAoYnV0dG9uKSB7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBidXR0b24uZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnO1xuICAgICAgICBjbGFzc05hbWUuc3BsaXQoL1xccysvKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgaWYgKCFuYW1lLnN0YXJ0c1dpdGgoJ3FsLScpKSByZXR1cm47XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoJ3FsLScubGVuZ3RoKTtcbiAgICAgICAgICBpZiAoaWNvbnNbbmFtZV0gPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChuYW1lID09PSAnZGlyZWN0aW9uJykge1xuICAgICAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGljb25zW25hbWVdWycnXSArIGljb25zW25hbWVdWydydGwnXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpY29uc1tuYW1lXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBpY29uc1tuYW1lXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gYnV0dG9uLnZhbHVlIHx8ICcnO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgaWNvbnNbbmFtZV1bdmFsdWVdKSB7XG4gICAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBpY29uc1tuYW1lXVt2YWx1ZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2J1aWxkUGlja2VycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJ1aWxkUGlja2VycyhzZWxlY3RzLCBpY29ucykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMucGlja2VycyA9IHNlbGVjdHMubWFwKGZ1bmN0aW9uIChzZWxlY3QpIHtcbiAgICAgICAgaWYgKHNlbGVjdC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWFsaWduJykpIHtcbiAgICAgICAgICBpZiAoc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJ29wdGlvbicpID09IG51bGwpIHtcbiAgICAgICAgICAgIGZpbGxTZWxlY3Qoc2VsZWN0LCBBTElHTlMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IF9pY29uUGlja2VyMi5kZWZhdWx0KHNlbGVjdCwgaWNvbnMuYWxpZ24pO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWJhY2tncm91bmQnKSB8fCBzZWxlY3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1jb2xvcicpKSB7XG4gICAgICAgICAgdmFyIGZvcm1hdCA9IHNlbGVjdC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWJhY2tncm91bmQnKSA/ICdiYWNrZ3JvdW5kJyA6ICdjb2xvcic7XG4gICAgICAgICAgaWYgKHNlbGVjdC5xdWVyeVNlbGVjdG9yKCdvcHRpb24nKSA9PSBudWxsKSB7XG4gICAgICAgICAgICBmaWxsU2VsZWN0KHNlbGVjdCwgQ09MT1JTLCBmb3JtYXQgPT09ICdiYWNrZ3JvdW5kJyA/ICcjZmZmZmZmJyA6ICcjMDAwMDAwJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXcgX2NvbG9yUGlja2VyMi5kZWZhdWx0KHNlbGVjdCwgaWNvbnNbZm9ybWF0XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHNlbGVjdC5xdWVyeVNlbGVjdG9yKCdvcHRpb24nKSA9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0LmNsYXNzTGlzdC5jb250YWlucygncWwtZm9udCcpKSB7XG4gICAgICAgICAgICAgIGZpbGxTZWxlY3Qoc2VsZWN0LCBGT05UUyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWhlYWRlcicpKSB7XG4gICAgICAgICAgICAgIGZpbGxTZWxlY3Qoc2VsZWN0LCBIRUFERVJTKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0LmNsYXNzTGlzdC5jb250YWlucygncWwtc2l6ZScpKSB7XG4gICAgICAgICAgICAgIGZpbGxTZWxlY3Qoc2VsZWN0LCBTSVpFUyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXcgX3BpY2tlcjIuZGVmYXVsdChzZWxlY3QpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZhciB1cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgIF90aGlzMi5waWNrZXJzLmZvckVhY2goZnVuY3Rpb24gKHBpY2tlcikge1xuICAgICAgICAgIHBpY2tlci51cGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgdGhpcy5xdWlsbC5vbihfZW1pdHRlcjIuZGVmYXVsdC5ldmVudHMuRURJVE9SX0NIQU5HRSwgdXBkYXRlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQmFzZVRoZW1lO1xufShfdGhlbWUyLmRlZmF1bHQpO1xuXG5CYXNlVGhlbWUuREVGQVVMVFMgPSAoMCwgX2V4dGVuZDIuZGVmYXVsdCkodHJ1ZSwge30sIF90aGVtZTIuZGVmYXVsdC5ERUZBVUxUUywge1xuICBtb2R1bGVzOiB7XG4gICAgdG9vbGJhcjoge1xuICAgICAgaGFuZGxlcnM6IHtcbiAgICAgICAgZm9ybXVsYTogZnVuY3Rpb24gZm9ybXVsYSgpIHtcbiAgICAgICAgICB0aGlzLnF1aWxsLnRoZW1lLnRvb2x0aXAuZWRpdCgnZm9ybXVsYScpO1xuICAgICAgICB9LFxuICAgICAgICBpbWFnZTogZnVuY3Rpb24gaW1hZ2UoKSB7XG4gICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgICB2YXIgZmlsZUlucHV0ID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignaW5wdXQucWwtaW1hZ2VbdHlwZT1maWxlXScpO1xuICAgICAgICAgIGlmIChmaWxlSW5wdXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgZmlsZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIGZpbGVJbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnZmlsZScpO1xuICAgICAgICAgICAgZmlsZUlucHV0LnNldEF0dHJpYnV0ZSgnYWNjZXB0JywgJ2ltYWdlL3BuZywgaW1hZ2UvZ2lmLCBpbWFnZS9qcGVnLCBpbWFnZS9ibXAsIGltYWdlL3gtaWNvbicpO1xuICAgICAgICAgICAgZmlsZUlucHV0LmNsYXNzTGlzdC5hZGQoJ3FsLWltYWdlJyk7XG4gICAgICAgICAgICBmaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoZmlsZUlucHV0LmZpbGVzICE9IG51bGwgJiYgZmlsZUlucHV0LmZpbGVzWzBdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IF90aGlzMy5xdWlsbC5nZXRTZWxlY3Rpb24odHJ1ZSk7XG4gICAgICAgICAgICAgICAgICBfdGhpczMucXVpbGwudXBkYXRlQ29udGVudHMobmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkucmV0YWluKHJhbmdlLmluZGV4KS5kZWxldGUocmFuZ2UubGVuZ3RoKS5pbnNlcnQoeyBpbWFnZTogZS50YXJnZXQucmVzdWx0IH0pLCBfZW1pdHRlcjIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICAgICAgICAgICAgX3RoaXMzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCArIDEsIF9lbWl0dGVyMi5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgICAgICAgICAgICAgIGZpbGVJbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlSW5wdXQuZmlsZXNbMF0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGZpbGVJbnB1dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZpbGVJbnB1dC5jbGljaygpO1xuICAgICAgICB9LFxuICAgICAgICB2aWRlbzogZnVuY3Rpb24gdmlkZW8oKSB7XG4gICAgICAgICAgdGhpcy5xdWlsbC50aGVtZS50b29sdGlwLmVkaXQoJ3ZpZGVvJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgQmFzZVRvb2x0aXAgPSBmdW5jdGlvbiAoX1Rvb2x0aXApIHtcbiAgX2luaGVyaXRzKEJhc2VUb29sdGlwLCBfVG9vbHRpcCk7XG5cbiAgZnVuY3Rpb24gQmFzZVRvb2x0aXAocXVpbGwsIGJvdW5kc0NvbnRhaW5lcikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYXNlVG9vbHRpcCk7XG5cbiAgICB2YXIgX3RoaXM0ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJhc2VUb29sdGlwLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmFzZVRvb2x0aXApKS5jYWxsKHRoaXMsIHF1aWxsLCBib3VuZHNDb250YWluZXIpKTtcblxuICAgIF90aGlzNC50ZXh0Ym94ID0gX3RoaXM0LnJvb3QucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1cInRleHRcIl0nKTtcbiAgICBfdGhpczQubGlzdGVuKCk7XG4gICAgcmV0dXJuIF90aGlzNDtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCYXNlVG9vbHRpcCwgW3tcbiAgICBrZXk6ICdsaXN0ZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW4oKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdGhpcy50ZXh0Ym94LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKF9rZXlib2FyZDIuZGVmYXVsdC5tYXRjaChldmVudCwgJ2VudGVyJykpIHtcbiAgICAgICAgICBfdGhpczUuc2F2ZSgpO1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoX2tleWJvYXJkMi5kZWZhdWx0Lm1hdGNoKGV2ZW50LCAnZXNjYXBlJykpIHtcbiAgICAgICAgICBfdGhpczUuY2FuY2VsKCk7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2FuY2VsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZWRpdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVkaXQoKSB7XG4gICAgICB2YXIgbW9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ2xpbmsnO1xuICAgICAgdmFyIHByZXZpZXcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG5cbiAgICAgIHRoaXMucm9vdC5jbGFzc0xpc3QucmVtb3ZlKCdxbC1oaWRkZW4nKTtcbiAgICAgIHRoaXMucm9vdC5jbGFzc0xpc3QuYWRkKCdxbC1lZGl0aW5nJyk7XG4gICAgICBpZiAocHJldmlldyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMudGV4dGJveC52YWx1ZSA9IHByZXZpZXc7XG4gICAgICB9IGVsc2UgaWYgKG1vZGUgIT09IHRoaXMucm9vdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbW9kZScpKSB7XG4gICAgICAgIHRoaXMudGV4dGJveC52YWx1ZSA9ICcnO1xuICAgICAgfVxuICAgICAgdGhpcy5wb3NpdGlvbih0aGlzLnF1aWxsLmdldEJvdW5kcyh0aGlzLnF1aWxsLnNlbGVjdGlvbi5zYXZlZFJhbmdlKSk7XG4gICAgICB0aGlzLnRleHRib3guc2VsZWN0KCk7XG4gICAgICB0aGlzLnRleHRib3guc2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicsIHRoaXMudGV4dGJveC5nZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIG1vZGUpIHx8ICcnKTtcbiAgICAgIHRoaXMucm9vdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbW9kZScsIG1vZGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Jlc3RvcmVGb2N1cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3RvcmVGb2N1cygpIHtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLnF1aWxsLnNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3A7XG4gICAgICB0aGlzLnF1aWxsLmZvY3VzKCk7XG4gICAgICB0aGlzLnF1aWxsLnNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2F2ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmUoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLnRleHRib3gudmFsdWU7XG4gICAgICBzd2l0Y2ggKHRoaXMucm9vdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbW9kZScpKSB7XG4gICAgICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLnF1aWxsLnJvb3Quc2Nyb2xsVG9wO1xuICAgICAgICAgICAgaWYgKHRoaXMubGlua1JhbmdlKSB7XG4gICAgICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0VGV4dCh0aGlzLmxpbmtSYW5nZSwgJ2xpbmsnLCB2YWx1ZSwgX2VtaXR0ZXIyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgICAgICAgZGVsZXRlIHRoaXMubGlua1JhbmdlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5yZXN0b3JlRm9jdXMoKTtcbiAgICAgICAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2xpbmsnLCB2YWx1ZSwgX2VtaXR0ZXIyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucXVpbGwucm9vdC5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YWx1ZSA9IGV4dHJhY3RWaWRlb1VybCh2YWx1ZSk7XG4gICAgICAgICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZmFsbHRocm91Z2hcbiAgICAgICAgY2FzZSAnZm9ybXVsYSc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKCF2YWx1ZSkgYnJlYWs7XG4gICAgICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLnF1aWxsLmdldFNlbGVjdGlvbih0cnVlKTtcbiAgICAgICAgICAgIGlmIChyYW5nZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHZhciBpbmRleCA9IHJhbmdlLmluZGV4ICsgcmFuZ2UubGVuZ3RoO1xuICAgICAgICAgICAgICB0aGlzLnF1aWxsLmluc2VydEVtYmVkKGluZGV4LCB0aGlzLnJvb3QuZ2V0QXR0cmlidXRlKCdkYXRhLW1vZGUnKSwgdmFsdWUsIF9lbWl0dGVyMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgICAgICAgIGlmICh0aGlzLnJvb3QuZ2V0QXR0cmlidXRlKCdkYXRhLW1vZGUnKSA9PT0gJ2Zvcm11bGEnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5xdWlsbC5pbnNlcnRUZXh0KGluZGV4ICsgMSwgJyAnLCBfZW1pdHRlcjIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKGluZGV4ICsgMiwgX2VtaXR0ZXIyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgIH1cbiAgICAgIHRoaXMudGV4dGJveC52YWx1ZSA9ICcnO1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJhc2VUb29sdGlwO1xufShfdG9vbHRpcDIuZGVmYXVsdCk7XG5cbmZ1bmN0aW9uIGV4dHJhY3RWaWRlb1VybCh1cmwpIHtcbiAgdmFyIG1hdGNoID0gdXJsLm1hdGNoKC9eKD86KGh0dHBzPyk6XFwvXFwvKT8oPzooPzp3d3d8bSlcXC4pP3lvdXR1YmVcXC5jb21cXC93YXRjaC4qdj0oW2EtekEtWjAtOV8tXSspLykgfHwgdXJsLm1hdGNoKC9eKD86KGh0dHBzPyk6XFwvXFwvKT8oPzooPzp3d3d8bSlcXC4pP3lvdXR1XFwuYmVcXC8oW2EtekEtWjAtOV8tXSspLyk7XG4gIGlmIChtYXRjaCkge1xuICAgIHJldHVybiAobWF0Y2hbMV0gfHwgJ2h0dHBzJykgKyAnOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLycgKyBtYXRjaFsyXSArICc/c2hvd2luZm89MCc7XG4gIH1cbiAgaWYgKG1hdGNoID0gdXJsLm1hdGNoKC9eKD86KGh0dHBzPyk6XFwvXFwvKT8oPzp3d3dcXC4pP3ZpbWVvXFwuY29tXFwvKFxcZCspLykpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbmQtYXNzaWduXG4gICAgcmV0dXJuIChtYXRjaFsxXSB8fCAnaHR0cHMnKSArICc6Ly9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLycgKyBtYXRjaFsyXSArICcvJztcbiAgfVxuICByZXR1cm4gdXJsO1xufVxuXG5mdW5jdGlvbiBmaWxsU2VsZWN0KHNlbGVjdCwgdmFsdWVzKSB7XG4gIHZhciBkZWZhdWx0VmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICBpZiAodmFsdWUgPT09IGRlZmF1bHRWYWx1ZSkge1xuICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZSgndmFsdWUnLCB2YWx1ZSk7XG4gICAgfVxuICAgIHNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICB9KTtcbn1cblxuZXhwb3J0cy5CYXNlVG9vbHRpcCA9IEJhc2VUb29sdGlwO1xuZXhwb3J0cy5kZWZhdWx0ID0gQmFzZVRoZW1lO1xuXG4vKioqLyB9KSxcbi8qIDQ0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgTGlua2VkTGlzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMaW5rZWRMaXN0KCkge1xuICAgICAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgfVxuICAgIExpbmtlZExpc3QucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5vZGVzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBub2Rlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5zZXJ0QmVmb3JlKG5vZGVzWzBdLCBudWxsKTtcbiAgICAgICAgaWYgKG5vZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kLmFwcGx5KHRoaXMsIG5vZGVzLnNsaWNlKDEpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGlua2VkTGlzdC5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB2YXIgY3VyLCBuZXh0ID0gdGhpcy5pdGVyYXRvcigpO1xuICAgICAgICB3aGlsZSAoKGN1ciA9IG5leHQoKSkpIHtcbiAgICAgICAgICAgIGlmIChjdXIgPT09IG5vZGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgTGlua2VkTGlzdC5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlID0gZnVuY3Rpb24gKG5vZGUsIHJlZk5vZGUpIHtcbiAgICAgICAgaWYgKCFub2RlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBub2RlLm5leHQgPSByZWZOb2RlO1xuICAgICAgICBpZiAocmVmTm9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBub2RlLnByZXYgPSByZWZOb2RlLnByZXY7XG4gICAgICAgICAgICBpZiAocmVmTm9kZS5wcmV2ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZWZOb2RlLnByZXYubmV4dCA9IG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWZOb2RlLnByZXYgPSBub2RlO1xuICAgICAgICAgICAgaWYgKHJlZk5vZGUgPT09IHRoaXMuaGVhZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGVhZCA9IG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy50YWlsICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudGFpbC5uZXh0ID0gbm9kZTtcbiAgICAgICAgICAgIG5vZGUucHJldiA9IHRoaXMudGFpbDtcbiAgICAgICAgICAgIHRoaXMudGFpbCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub2RlLnByZXYgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlbmd0aCArPSAxO1xuICAgIH07XG4gICAgTGlua2VkTGlzdC5wcm90b3R5cGUub2Zmc2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICB2YXIgaW5kZXggPSAwLCBjdXIgPSB0aGlzLmhlYWQ7XG4gICAgICAgIHdoaWxlIChjdXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGN1ciA9PT0gdGFyZ2V0KVxuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ICs9IGN1ci5sZW5ndGgoKTtcbiAgICAgICAgICAgIGN1ciA9IGN1ci5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250YWlucyhub2RlKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKG5vZGUucHJldiAhPSBudWxsKVxuICAgICAgICAgICAgbm9kZS5wcmV2Lm5leHQgPSBub2RlLm5leHQ7XG4gICAgICAgIGlmIChub2RlLm5leHQgIT0gbnVsbClcbiAgICAgICAgICAgIG5vZGUubmV4dC5wcmV2ID0gbm9kZS5wcmV2O1xuICAgICAgICBpZiAobm9kZSA9PT0gdGhpcy5oZWFkKVxuICAgICAgICAgICAgdGhpcy5oZWFkID0gbm9kZS5uZXh0O1xuICAgICAgICBpZiAobm9kZSA9PT0gdGhpcy50YWlsKVxuICAgICAgICAgICAgdGhpcy50YWlsID0gbm9kZS5wcmV2O1xuICAgICAgICB0aGlzLmxlbmd0aCAtPSAxO1xuICAgIH07XG4gICAgTGlua2VkTGlzdC5wcm90b3R5cGUuaXRlcmF0b3IgPSBmdW5jdGlvbiAoY3VyTm9kZSkge1xuICAgICAgICBpZiAoY3VyTm9kZSA9PT0gdm9pZCAwKSB7IGN1ck5vZGUgPSB0aGlzLmhlYWQ7IH1cbiAgICAgICAgLy8gVE9ETyB1c2UgeWllbGQgd2hlbiB3ZSBjYW5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXQgPSBjdXJOb2RlO1xuICAgICAgICAgICAgaWYgKGN1ck5vZGUgIT0gbnVsbClcbiAgICAgICAgICAgICAgICBjdXJOb2RlID0gY3VyTm9kZS5uZXh0O1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbiAoaW5kZXgsIGluY2x1c2l2ZSkge1xuICAgICAgICBpZiAoaW5jbHVzaXZlID09PSB2b2lkIDApIHsgaW5jbHVzaXZlID0gZmFsc2U7IH1cbiAgICAgICAgdmFyIGN1ciwgbmV4dCA9IHRoaXMuaXRlcmF0b3IoKTtcbiAgICAgICAgd2hpbGUgKChjdXIgPSBuZXh0KCkpKSB7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gY3VyLmxlbmd0aCgpO1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoIHx8XG4gICAgICAgICAgICAgICAgKGluY2x1c2l2ZSAmJiBpbmRleCA9PT0gbGVuZ3RoICYmIChjdXIubmV4dCA9PSBudWxsIHx8IGN1ci5uZXh0Lmxlbmd0aCgpICE9PSAwKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW2N1ciwgaW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXggLT0gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbnVsbCwgMF07XG4gICAgfTtcbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBjdXIsIG5leHQgPSB0aGlzLml0ZXJhdG9yKCk7XG4gICAgICAgIHdoaWxlICgoY3VyID0gbmV4dCgpKSkge1xuICAgICAgICAgICAgY2FsbGJhY2soY3VyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGlua2VkTGlzdC5wcm90b3R5cGUuZm9yRWFjaEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChsZW5ndGggPD0gMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5maW5kKGluZGV4KSwgc3RhcnROb2RlID0gX2FbMF0sIG9mZnNldCA9IF9hWzFdO1xuICAgICAgICB2YXIgY3VyLCBjdXJJbmRleCA9IGluZGV4IC0gb2Zmc2V0LCBuZXh0ID0gdGhpcy5pdGVyYXRvcihzdGFydE5vZGUpO1xuICAgICAgICB3aGlsZSAoKGN1ciA9IG5leHQoKSkgJiYgY3VySW5kZXggPCBpbmRleCArIGxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGN1ckxlbmd0aCA9IGN1ci5sZW5ndGgoKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA+IGN1ckluZGV4KSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soY3VyLCBpbmRleCAtIGN1ckluZGV4LCBNYXRoLm1pbihsZW5ndGgsIGN1ckluZGV4ICsgY3VyTGVuZ3RoIC0gaW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGN1ciwgMCwgTWF0aC5taW4oY3VyTGVuZ3RoLCBpbmRleCArIGxlbmd0aCAtIGN1ckluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJJbmRleCArPSBjdXJMZW5ndGg7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGN1cikge1xuICAgICAgICAgICAgbWVtby5wdXNoKGNhbGxiYWNrKGN1cikpO1xuICAgICAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICAgIH0sIFtdKTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgbWVtbykge1xuICAgICAgICB2YXIgY3VyLCBuZXh0ID0gdGhpcy5pdGVyYXRvcigpO1xuICAgICAgICB3aGlsZSAoKGN1ciA9IG5leHQoKSkpIHtcbiAgICAgICAgICAgIG1lbW8gPSBjYWxsYmFjayhtZW1vLCBjdXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgIH07XG4gICAgcmV0dXJuIExpbmtlZExpc3Q7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTGlua2VkTGlzdDtcblxuXG4vKioqLyB9KSxcbi8qIDQ1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb250YWluZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBPQlNFUlZFUl9DT05GSUcgPSB7XG4gICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgIGNoYXJhY3RlckRhdGFPbGRWYWx1ZTogdHJ1ZSxcbiAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgc3VidHJlZTogdHJ1ZSxcbn07XG52YXIgTUFYX09QVElNSVpFX0lURVJBVElPTlMgPSAxMDA7XG52YXIgU2Nyb2xsQmxvdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2Nyb2xsQmxvdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTY3JvbGxCbG90KG5vZGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbm9kZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2Nyb2xsID0gX3RoaXM7XG4gICAgICAgIF90aGlzLm9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKG11dGF0aW9ucykge1xuICAgICAgICAgICAgX3RoaXMudXBkYXRlKG11dGF0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5vYnNlcnZlci5vYnNlcnZlKF90aGlzLmRvbU5vZGUsIE9CU0VSVkVSX0NPTkZJRyk7XG4gICAgICAgIF90aGlzLmF0dGFjaCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNjcm9sbEJsb3QucHJvdG90eXBlLmRldGFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXRhY2guY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfTtcbiAgICBTY3JvbGxCbG90LnByb3RvdHlwZS5kZWxldGVBdCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBsZW5ndGggPT09IHRoaXMubGVuZ3RoKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZWxldGVBdC5jYWxsKHRoaXMsIGluZGV4LCBsZW5ndGgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTY3JvbGxCbG90LnByb3RvdHlwZS5mb3JtYXRBdCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmZvcm1hdEF0LmNhbGwodGhpcywgaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgIH07XG4gICAgU2Nyb2xsQmxvdC5wcm90b3R5cGUuaW5zZXJ0QXQgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlLCBkZWYpIHtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5pbnNlcnRBdC5jYWxsKHRoaXMsIGluZGV4LCB2YWx1ZSwgZGVmKTtcbiAgICB9O1xuICAgIFNjcm9sbEJsb3QucHJvdG90eXBlLm9wdGltaXplID0gZnVuY3Rpb24gKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAobXV0YXRpb25zID09PSB2b2lkIDApIHsgbXV0YXRpb25zID0gW107IH1cbiAgICAgICAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkgeyBjb250ZXh0ID0ge307IH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5vcHRpbWl6ZS5jYWxsKHRoaXMsIGNvbnRleHQpO1xuICAgICAgICAvLyBXZSBtdXN0IG1vZGlmeSBtdXRhdGlvbnMgZGlyZWN0bHksIGNhbm5vdCBtYWtlIGNvcHkgYW5kIHRoZW4gbW9kaWZ5XG4gICAgICAgIHZhciByZWNvcmRzID0gW10uc2xpY2UuY2FsbCh0aGlzLm9ic2VydmVyLnRha2VSZWNvcmRzKCkpO1xuICAgICAgICAvLyBBcnJheS5wdXNoIGN1cnJlbnRseSBzZWVtcyB0byBiZSBpbXBsZW1lbnRlZCBieSBhIG5vbi10YWlsIHJlY3Vyc2l2ZSBmdW5jdGlvblxuICAgICAgICAvLyBzbyB3ZSBjYW5ub3QganVzdCBtdXRhdGlvbnMucHVzaC5hcHBseShtdXRhdGlvbnMsIHRoaXMub2JzZXJ2ZXIudGFrZVJlY29yZHMoKSk7XG4gICAgICAgIHdoaWxlIChyZWNvcmRzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICBtdXRhdGlvbnMucHVzaChyZWNvcmRzLnBvcCgpKTtcbiAgICAgICAgLy8gVE9ETyB1c2UgV2Vha01hcFxuICAgICAgICB2YXIgbWFyayA9IGZ1bmN0aW9uIChibG90LCBtYXJrUGFyZW50KSB7XG4gICAgICAgICAgICBpZiAobWFya1BhcmVudCA9PT0gdm9pZCAwKSB7IG1hcmtQYXJlbnQgPSB0cnVlOyB9XG4gICAgICAgICAgICBpZiAoYmxvdCA9PSBudWxsIHx8IGJsb3QgPT09IF90aGlzKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGlmIChibG90LmRvbU5vZGUucGFyZW50Tm9kZSA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGlmIChibG90LmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWFya1BhcmVudClcbiAgICAgICAgICAgICAgICBtYXJrKGJsb3QucGFyZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG9wdGltaXplID0gZnVuY3Rpb24gKGJsb3QpIHtcbiAgICAgICAgICAgIC8vIFBvc3Qtb3JkZXIgdHJhdmVyc2FsXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBibG90LmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldID09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChibG90IGluc3RhbmNlb2YgY29udGFpbmVyXzEuZGVmYXVsdCkge1xuICAgICAgICAgICAgICAgIGJsb3QuY2hpbGRyZW4uZm9yRWFjaChvcHRpbWl6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBibG90Lm9wdGltaXplKGNvbnRleHQpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgcmVtYWluaW5nID0gbXV0YXRpb25zO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgcmVtYWluaW5nLmxlbmd0aCA+IDA7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGkgPj0gTUFYX09QVElNSVpFX0lURVJBVElPTlMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tQYXJjaG1lbnRdIE1heGltdW0gb3B0aW1pemUgaXRlcmF0aW9ucyByZWFjaGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1haW5pbmcuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgYmxvdCA9IFJlZ2lzdHJ5LmZpbmQobXV0YXRpb24udGFyZ2V0LCB0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAoYmxvdCA9PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKGJsb3QuZG9tTm9kZSA9PT0gbXV0YXRpb24udGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtdXRhdGlvbi50eXBlID09PSAnY2hpbGRMaXN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyayhSZWdpc3RyeS5maW5kKG11dGF0aW9uLnByZXZpb3VzU2libGluZywgZmFsc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChtdXRhdGlvbi5hZGRlZE5vZGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IFJlZ2lzdHJ5LmZpbmQobm9kZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmsoY2hpbGQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBjb250YWluZXJfMS5kZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGdyYW5kQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmsoZ3JhbmRDaGlsZCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChtdXRhdGlvbi50eXBlID09PSAnYXR0cmlidXRlcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmsoYmxvdC5wcmV2KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtYXJrKGJsb3QpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2gob3B0aW1pemUpO1xuICAgICAgICAgICAgcmVtYWluaW5nID0gW10uc2xpY2UuY2FsbCh0aGlzLm9ic2VydmVyLnRha2VSZWNvcmRzKCkpO1xuICAgICAgICAgICAgcmVjb3JkcyA9IHJlbWFpbmluZy5zbGljZSgpO1xuICAgICAgICAgICAgd2hpbGUgKHJlY29yZHMubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICBtdXRhdGlvbnMucHVzaChyZWNvcmRzLnBvcCgpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2Nyb2xsQmxvdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7IGNvbnRleHQgPSB7fTsgfVxuICAgICAgICBtdXRhdGlvbnMgPSBtdXRhdGlvbnMgfHwgdGhpcy5vYnNlcnZlci50YWtlUmVjb3JkcygpO1xuICAgICAgICAvLyBUT0RPIHVzZSBXZWFrTWFwXG4gICAgICAgIG11dGF0aW9uc1xuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgICAgICAgIHZhciBibG90ID0gUmVnaXN0cnkuZmluZChtdXRhdGlvbi50YXJnZXQsIHRydWUpO1xuICAgICAgICAgICAgaWYgKGJsb3QgPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGlmIChibG90LmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zID0gW211dGF0aW9uXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYmxvdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBibG90LmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucy5wdXNoKG11dGF0aW9uKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChibG90KSB7XG4gICAgICAgICAgICBpZiAoYmxvdCA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgYmxvdCA9PT0gX3RoaXMgfHxcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBibG90LmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldID09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgYmxvdC51cGRhdGUoYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMgfHwgW10sIGNvbnRleHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAodGhpcy5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51cGRhdGUuY2FsbCh0aGlzLCB0aGlzLmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucywgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpbWl6ZShtdXRhdGlvbnMsIGNvbnRleHQpO1xuICAgIH07XG4gICAgU2Nyb2xsQmxvdC5ibG90TmFtZSA9ICdzY3JvbGwnO1xuICAgIFNjcm9sbEJsb3QuZGVmYXVsdENoaWxkID0gJ2Jsb2NrJztcbiAgICBTY3JvbGxCbG90LnNjb3BlID0gUmVnaXN0cnkuU2NvcGUuQkxPQ0tfQkxPVDtcbiAgICBTY3JvbGxCbG90LnRhZ05hbWUgPSAnRElWJztcbiAgICByZXR1cm4gU2Nyb2xsQmxvdDtcbn0oY29udGFpbmVyXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gU2Nyb2xsQmxvdDtcblxuXG4vKioqLyB9KSxcbi8qIDQ2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBmb3JtYXRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8vIFNoYWxsb3cgb2JqZWN0IGNvbXBhcmlzb25cbmZ1bmN0aW9uIGlzRXF1YWwob2JqMSwgb2JqMikge1xuICAgIGlmIChPYmplY3Qua2V5cyhvYmoxKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKG9iajIpLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBmb3IgKHZhciBwcm9wIGluIG9iajEpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAob2JqMVtwcm9wXSAhPT0gb2JqMltwcm9wXSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG52YXIgSW5saW5lQmxvdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW5saW5lQmxvdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbmxpbmVCbG90KCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIElubGluZUJsb3QuZm9ybWF0cyA9IGZ1bmN0aW9uIChkb21Ob2RlKSB7XG4gICAgICAgIGlmIChkb21Ob2RlLnRhZ05hbWUgPT09IElubGluZUJsb3QudGFnTmFtZSlcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBfc3VwZXIuZm9ybWF0cy5jYWxsKHRoaXMsIGRvbU5vZGUpO1xuICAgIH07XG4gICAgSW5saW5lQmxvdC5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChuYW1lID09PSB0aGlzLnN0YXRpY3MuYmxvdE5hbWUgJiYgIXZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBmb3JtYXRfMS5kZWZhdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IGNoaWxkLndyYXAoSW5saW5lQmxvdC5ibG90TmFtZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLmF0dHJpYnV0ZXMuY29weShjaGlsZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudW53cmFwKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmZvcm1hdC5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5saW5lQmxvdC5wcm90b3R5cGUuZm9ybWF0QXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuZm9ybWF0cygpW25hbWVdICE9IG51bGwgfHwgUmVnaXN0cnkucXVlcnkobmFtZSwgUmVnaXN0cnkuU2NvcGUuQVRUUklCVVRFKSkge1xuICAgICAgICAgICAgdmFyIGJsb3QgPSB0aGlzLmlzb2xhdGUoaW5kZXgsIGxlbmd0aCk7XG4gICAgICAgICAgICBibG90LmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmZvcm1hdEF0LmNhbGwodGhpcywgaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbmxpbmVCbG90LnByb3RvdHlwZS5vcHRpbWl6ZSA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUub3B0aW1pemUuY2FsbCh0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgdmFyIGZvcm1hdHMgPSB0aGlzLmZvcm1hdHMoKTtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKGZvcm1hdHMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudW53cmFwKCk7IC8vIHVuZm9ybWF0dGVkIHNwYW5cbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV4dCA9IHRoaXMubmV4dDtcbiAgICAgICAgaWYgKG5leHQgaW5zdGFuY2VvZiBJbmxpbmVCbG90ICYmIG5leHQucHJldiA9PT0gdGhpcyAmJiBpc0VxdWFsKGZvcm1hdHMsIG5leHQuZm9ybWF0cygpKSkge1xuICAgICAgICAgICAgbmV4dC5tb3ZlQ2hpbGRyZW4odGhpcyk7XG4gICAgICAgICAgICBuZXh0LnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbmxpbmVCbG90LmJsb3ROYW1lID0gJ2lubGluZSc7XG4gICAgSW5saW5lQmxvdC5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLklOTElORV9CTE9UO1xuICAgIElubGluZUJsb3QudGFnTmFtZSA9ICdTUEFOJztcbiAgICByZXR1cm4gSW5saW5lQmxvdDtcbn0oZm9ybWF0XzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gSW5saW5lQmxvdDtcblxuXG4vKioqLyB9KSxcbi8qIDQ3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBmb3JtYXRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBCbG9ja0Jsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJsb2NrQmxvdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCbG9ja0Jsb3QoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgQmxvY2tCbG90LmZvcm1hdHMgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICB2YXIgdGFnTmFtZSA9IFJlZ2lzdHJ5LnF1ZXJ5KEJsb2NrQmxvdC5ibG90TmFtZSkudGFnTmFtZTtcbiAgICAgICAgaWYgKGRvbU5vZGUudGFnTmFtZSA9PT0gdGFnTmFtZSlcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBfc3VwZXIuZm9ybWF0cy5jYWxsKHRoaXMsIGRvbU5vZGUpO1xuICAgIH07XG4gICAgQmxvY2tCbG90LnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkJMT0NLKSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lICYmICF2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlV2l0aChCbG9ja0Jsb3QuYmxvdE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXQuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJsb2NrQmxvdC5wcm90b3R5cGUuZm9ybWF0QXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkJMT0NLKSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmZvcm1hdEF0LmNhbGwodGhpcywgaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCbG9ja0Jsb3QucHJvdG90eXBlLmluc2VydEF0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICAgIGlmIChkZWYgPT0gbnVsbCB8fCBSZWdpc3RyeS5xdWVyeSh2YWx1ZSwgUmVnaXN0cnkuU2NvcGUuSU5MSU5FKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBJbnNlcnQgdGV4dCBvciBpbmxpbmVcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5zZXJ0QXQuY2FsbCh0aGlzLCBpbmRleCwgdmFsdWUsIGRlZik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYWZ0ZXIgPSB0aGlzLnNwbGl0KGluZGV4KTtcbiAgICAgICAgICAgIHZhciBibG90ID0gUmVnaXN0cnkuY3JlYXRlKHZhbHVlLCBkZWYpO1xuICAgICAgICAgICAgYWZ0ZXIucGFyZW50Lmluc2VydEJlZm9yZShibG90LCBhZnRlcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJsb2NrQmxvdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVHJpZGVudC8pKSB7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMsIG11dGF0aW9ucywgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJsb2NrQmxvdC5ibG90TmFtZSA9ICdibG9jayc7XG4gICAgQmxvY2tCbG90LnNjb3BlID0gUmVnaXN0cnkuU2NvcGUuQkxPQ0tfQkxPVDtcbiAgICBCbG9ja0Jsb3QudGFnTmFtZSA9ICdQJztcbiAgICByZXR1cm4gQmxvY2tCbG90O1xufShmb3JtYXRfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBCbG9ja0Jsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiA0OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbGVhZl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG52YXIgRW1iZWRCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFbWJlZEJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRW1iZWRCbG90KCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEVtYmVkQmxvdC5mb3JtYXRzID0gZnVuY3Rpb24gKGRvbU5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEVtYmVkQmxvdC5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIC8vIHN1cGVyLmZvcm1hdEF0IHdyYXBzLCB3aGljaCBpcyB3aGF0IHdlIHdhbnQgaW4gZ2VuZXJhbCxcbiAgICAgICAgLy8gYnV0IHRoaXMgYWxsb3dzIHN1YmNsYXNzZXMgdG8gb3ZlcndyaXRlIGZvciBmb3JtYXRzXG4gICAgICAgIC8vIHRoYXQganVzdCBhcHBseSB0byBwYXJ0aWN1bGFyIGVtYmVkc1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmZvcm1hdEF0LmNhbGwodGhpcywgMCwgdGhpcy5sZW5ndGgoKSwgbmFtZSwgdmFsdWUpO1xuICAgIH07XG4gICAgRW1iZWRCbG90LnByb3RvdHlwZS5mb3JtYXRBdCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgbGVuZ3RoID09PSB0aGlzLmxlbmd0aCgpKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmZvcm1hdEF0LmNhbGwodGhpcywgaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFbWJlZEJsb3QucHJvdG90eXBlLmZvcm1hdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRpY3MuZm9ybWF0cyh0aGlzLmRvbU5vZGUpO1xuICAgIH07XG4gICAgcmV0dXJuIEVtYmVkQmxvdDtcbn0obGVhZl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEVtYmVkQmxvdDtcblxuXG4vKioqLyB9KSxcbi8qIDQ5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBsZWFmXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcbnZhciBSZWdpc3RyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgVGV4dEJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRleHRCbG90LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRleHRCbG90KG5vZGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbm9kZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudGV4dCA9IF90aGlzLnN0YXRpY3MudmFsdWUoX3RoaXMuZG9tTm9kZSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGV4dEJsb3QuY3JlYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2YWx1ZSk7XG4gICAgfTtcbiAgICBUZXh0QmxvdC52YWx1ZSA9IGZ1bmN0aW9uIChkb21Ob2RlKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gZG9tTm9kZS5kYXRhO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICh0ZXh0Wydub3JtYWxpemUnXSlcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0Wydub3JtYWxpemUnXSgpO1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS5kZWxldGVBdCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuZG9tTm9kZS5kYXRhID0gdGhpcy50ZXh0ID0gdGhpcy50ZXh0LnNsaWNlKDAsIGluZGV4KSArIHRoaXMudGV4dC5zbGljZShpbmRleCArIGxlbmd0aCk7XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUuaW5kZXggPSBmdW5jdGlvbiAobm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgIGlmICh0aGlzLmRvbU5vZGUgPT09IG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gICAgVGV4dEJsb3QucHJvdG90eXBlLmluc2VydEF0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICAgIGlmIChkZWYgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gdGhpcy50ZXh0LnNsaWNlKDAsIGluZGV4KSArIHZhbHVlICsgdGhpcy50ZXh0LnNsaWNlKGluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuZG9tTm9kZS5kYXRhID0gdGhpcy50ZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5pbnNlcnRBdC5jYWxsKHRoaXMsIGluZGV4LCB2YWx1ZSwgZGVmKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGV4dEJsb3QucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dC5sZW5ndGg7XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUub3B0aW1pemUgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm9wdGltaXplLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMuc3RhdGljcy52YWx1ZSh0aGlzLmRvbU5vZGUpO1xuICAgICAgICBpZiAodGhpcy50ZXh0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLm5leHQgaW5zdGFuY2VvZiBUZXh0QmxvdCAmJiB0aGlzLm5leHQucHJldiA9PT0gdGhpcykge1xuICAgICAgICAgICAgdGhpcy5pbnNlcnRBdCh0aGlzLmxlbmd0aCgpLCB0aGlzLm5leHQudmFsdWUoKSk7XG4gICAgICAgICAgICB0aGlzLm5leHQucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS5wb3NpdGlvbiA9IGZ1bmN0aW9uIChpbmRleCwgaW5jbHVzaXZlKSB7XG4gICAgICAgIGlmIChpbmNsdXNpdmUgPT09IHZvaWQgMCkgeyBpbmNsdXNpdmUgPSBmYWxzZTsgfVxuICAgICAgICByZXR1cm4gW3RoaXMuZG9tTm9kZSwgaW5kZXhdO1xuICAgIH07XG4gICAgVGV4dEJsb3QucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gKGluZGV4LCBmb3JjZSkge1xuICAgICAgICBpZiAoZm9yY2UgPT09IHZvaWQgMCkgeyBmb3JjZSA9IGZhbHNlOyB9XG4gICAgICAgIGlmICghZm9yY2UpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdGhpcy5sZW5ndGgoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBhZnRlciA9IFJlZ2lzdHJ5LmNyZWF0ZSh0aGlzLmRvbU5vZGUuc3BsaXRUZXh0KGluZGV4KSk7XG4gICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShhZnRlciwgdGhpcy5uZXh0KTtcbiAgICAgICAgdGhpcy50ZXh0ID0gdGhpcy5zdGF0aWNzLnZhbHVlKHRoaXMuZG9tTm9kZSk7XG4gICAgICAgIHJldHVybiBhZnRlcjtcbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChtdXRhdGlvbnMuc29tZShmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBtdXRhdGlvbi50eXBlID09PSAnY2hhcmFjdGVyRGF0YScgJiYgbXV0YXRpb24udGFyZ2V0ID09PSBfdGhpcy5kb21Ob2RlO1xuICAgICAgICB9KSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gdGhpcy5zdGF0aWNzLnZhbHVlKHRoaXMuZG9tTm9kZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dDtcbiAgICB9O1xuICAgIFRleHRCbG90LmJsb3ROYW1lID0gJ3RleHQnO1xuICAgIFRleHRCbG90LnNjb3BlID0gUmVnaXN0cnkuU2NvcGUuSU5MSU5FX0JMT1Q7XG4gICAgcmV0dXJuIFRleHRCbG90O1xufShsZWFmXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gVGV4dEJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiA1MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuZWxlbS5jbGFzc0xpc3QudG9nZ2xlKCd0ZXN0LWNsYXNzJywgZmFsc2UpO1xuaWYgKGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCd0ZXN0LWNsYXNzJykpIHtcbiAgdmFyIF90b2dnbGUgPSBET01Ub2tlbkxpc3QucHJvdG90eXBlLnRvZ2dsZTtcbiAgRE9NVG9rZW5MaXN0LnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAodG9rZW4sIGZvcmNlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmICF0aGlzLmNvbnRhaW5zKHRva2VuKSA9PT0gIWZvcmNlKSB7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBfdG9nZ2xlLmNhbGwodGhpcywgdG9rZW4pO1xuICAgIH1cbiAgfTtcbn1cblxuaWYgKCFTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgpIHtcbiAgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoID0gZnVuY3Rpb24gKHNlYXJjaFN0cmluZywgcG9zaXRpb24pIHtcbiAgICBwb3NpdGlvbiA9IHBvc2l0aW9uIHx8IDA7XG4gICAgcmV0dXJuIHRoaXMuc3Vic3RyKHBvc2l0aW9uLCBzZWFyY2hTdHJpbmcubGVuZ3RoKSA9PT0gc2VhcmNoU3RyaW5nO1xuICB9O1xufVxuXG5pZiAoIVN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgpIHtcbiAgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aCA9IGZ1bmN0aW9uIChzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSB7XG4gICAgdmFyIHN1YmplY3RTdHJpbmcgPSB0aGlzLnRvU3RyaW5nKCk7XG4gICAgaWYgKHR5cGVvZiBwb3NpdGlvbiAhPT0gJ251bWJlcicgfHwgIWlzRmluaXRlKHBvc2l0aW9uKSB8fCBNYXRoLmZsb29yKHBvc2l0aW9uKSAhPT0gcG9zaXRpb24gfHwgcG9zaXRpb24gPiBzdWJqZWN0U3RyaW5nLmxlbmd0aCkge1xuICAgICAgcG9zaXRpb24gPSBzdWJqZWN0U3RyaW5nLmxlbmd0aDtcbiAgICB9XG4gICAgcG9zaXRpb24gLT0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgICB2YXIgbGFzdEluZGV4ID0gc3ViamVjdFN0cmluZy5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pO1xuICAgIHJldHVybiBsYXN0SW5kZXggIT09IC0xICYmIGxhc3RJbmRleCA9PT0gcG9zaXRpb247XG4gIH07XG59XG5cbmlmICghQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJmaW5kXCIsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZmluZCBjYWxsZWQgb24gbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICAgIHZhciBsaXN0ID0gT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoID4+PiAwO1xuICAgICAgdmFyIHRoaXNBcmcgPSBhcmd1bWVudHNbMV07XG4gICAgICB2YXIgdmFsdWU7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBsaXN0W2ldO1xuICAgICAgICBpZiAocHJlZGljYXRlLmNhbGwodGhpc0FyZywgdmFsdWUsIGksIGxpc3QpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSk7XG59XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcbiAgLy8gRGlzYWJsZSByZXNpemluZyBpbiBGaXJlZm94XG4gIGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiZW5hYmxlT2JqZWN0UmVzaXppbmdcIiwgZmFsc2UsIGZhbHNlKTtcbiAgLy8gRGlzYWJsZSBhdXRvbWF0aWMgbGlua2lmeWluZyBpbiBJRTExXG4gIGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiYXV0b1VybERldGVjdFwiLCBmYWxzZSwgZmFsc2UpO1xufSk7XG5cbi8qKiovIH0pLFxuLyogNTEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLyoqXG4gKiBUaGlzIGxpYnJhcnkgbW9kaWZpZXMgdGhlIGRpZmYtcGF0Y2gtbWF0Y2ggbGlicmFyeSBieSBOZWlsIEZyYXNlclxuICogYnkgcmVtb3ZpbmcgdGhlIHBhdGNoIGFuZCBtYXRjaCBmdW5jdGlvbmFsaXR5IGFuZCBjZXJ0YWluIGFkdmFuY2VkXG4gKiBvcHRpb25zIGluIHRoZSBkaWZmIGZ1bmN0aW9uLiBUaGUgb3JpZ2luYWwgbGljZW5zZSBpcyBhcyBmb2xsb3dzOlxuICpcbiAqID09PVxuICpcbiAqIERpZmYgTWF0Y2ggYW5kIFBhdGNoXG4gKlxuICogQ29weXJpZ2h0IDIwMDYgR29vZ2xlIEluYy5cbiAqIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9nb29nbGUtZGlmZi1tYXRjaC1wYXRjaC9cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuLyoqXG4gKiBUaGUgZGF0YSBzdHJ1Y3R1cmUgcmVwcmVzZW50aW5nIGEgZGlmZiBpcyBhbiBhcnJheSBvZiB0dXBsZXM6XG4gKiBbW0RJRkZfREVMRVRFLCAnSGVsbG8nXSwgW0RJRkZfSU5TRVJULCAnR29vZGJ5ZSddLCBbRElGRl9FUVVBTCwgJyB3b3JsZC4nXV1cbiAqIHdoaWNoIG1lYW5zOiBkZWxldGUgJ0hlbGxvJywgYWRkICdHb29kYnllJyBhbmQga2VlcCAnIHdvcmxkLidcbiAqL1xudmFyIERJRkZfREVMRVRFID0gLTE7XG52YXIgRElGRl9JTlNFUlQgPSAxO1xudmFyIERJRkZfRVFVQUwgPSAwO1xuXG5cbi8qKlxuICogRmluZCB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiB0d28gdGV4dHMuICBTaW1wbGlmaWVzIHRoZSBwcm9ibGVtIGJ5IHN0cmlwcGluZ1xuICogYW55IGNvbW1vbiBwcmVmaXggb3Igc3VmZml4IG9mZiB0aGUgdGV4dHMgYmVmb3JlIGRpZmZpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgT2xkIHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgTmV3IHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge0ludH0gY3Vyc29yX3BvcyBFeHBlY3RlZCBlZGl0IHBvc2l0aW9uIGluIHRleHQxIChvcHRpb25hbClcbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBkaWZmIHR1cGxlcy5cbiAqL1xuZnVuY3Rpb24gZGlmZl9tYWluKHRleHQxLCB0ZXh0MiwgY3Vyc29yX3Bvcykge1xuICAvLyBDaGVjayBmb3IgZXF1YWxpdHkgKHNwZWVkdXApLlxuICBpZiAodGV4dDEgPT0gdGV4dDIpIHtcbiAgICBpZiAodGV4dDEpIHtcbiAgICAgIHJldHVybiBbW0RJRkZfRVFVQUwsIHRleHQxXV07XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIC8vIENoZWNrIGN1cnNvcl9wb3Mgd2l0aGluIGJvdW5kc1xuICBpZiAoY3Vyc29yX3BvcyA8IDAgfHwgdGV4dDEubGVuZ3RoIDwgY3Vyc29yX3Bvcykge1xuICAgIGN1cnNvcl9wb3MgPSBudWxsO1xuICB9XG5cbiAgLy8gVHJpbSBvZmYgY29tbW9uIHByZWZpeCAoc3BlZWR1cCkuXG4gIHZhciBjb21tb25sZW5ndGggPSBkaWZmX2NvbW1vblByZWZpeCh0ZXh0MSwgdGV4dDIpO1xuICB2YXIgY29tbW9ucHJlZml4ID0gdGV4dDEuc3Vic3RyaW5nKDAsIGNvbW1vbmxlbmd0aCk7XG4gIHRleHQxID0gdGV4dDEuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCk7XG4gIHRleHQyID0gdGV4dDIuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCk7XG5cbiAgLy8gVHJpbSBvZmYgY29tbW9uIHN1ZmZpeCAoc3BlZWR1cCkuXG4gIGNvbW1vbmxlbmd0aCA9IGRpZmZfY29tbW9uU3VmZml4KHRleHQxLCB0ZXh0Mik7XG4gIHZhciBjb21tb25zdWZmaXggPSB0ZXh0MS5zdWJzdHJpbmcodGV4dDEubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKTtcbiAgdGV4dDEgPSB0ZXh0MS5zdWJzdHJpbmcoMCwgdGV4dDEubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKTtcbiAgdGV4dDIgPSB0ZXh0Mi5zdWJzdHJpbmcoMCwgdGV4dDIubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKTtcblxuICAvLyBDb21wdXRlIHRoZSBkaWZmIG9uIHRoZSBtaWRkbGUgYmxvY2suXG4gIHZhciBkaWZmcyA9IGRpZmZfY29tcHV0ZV8odGV4dDEsIHRleHQyKTtcblxuICAvLyBSZXN0b3JlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgaWYgKGNvbW1vbnByZWZpeCkge1xuICAgIGRpZmZzLnVuc2hpZnQoW0RJRkZfRVFVQUwsIGNvbW1vbnByZWZpeF0pO1xuICB9XG4gIGlmIChjb21tb25zdWZmaXgpIHtcbiAgICBkaWZmcy5wdXNoKFtESUZGX0VRVUFMLCBjb21tb25zdWZmaXhdKTtcbiAgfVxuICBkaWZmX2NsZWFudXBNZXJnZShkaWZmcyk7XG4gIGlmIChjdXJzb3JfcG9zICE9IG51bGwpIHtcbiAgICBkaWZmcyA9IGZpeF9jdXJzb3IoZGlmZnMsIGN1cnNvcl9wb3MpO1xuICB9XG4gIGRpZmZzID0gZml4X2Vtb2ppKGRpZmZzKTtcbiAgcmV0dXJuIGRpZmZzO1xufTtcblxuXG4vKipcbiAqIEZpbmQgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gdHdvIHRleHRzLiAgQXNzdW1lcyB0aGF0IHRoZSB0ZXh0cyBkbyBub3RcbiAqIGhhdmUgYW55IGNvbW1vbiBwcmVmaXggb3Igc3VmZml4LlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIE9sZCBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIE5ldyBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICovXG5mdW5jdGlvbiBkaWZmX2NvbXB1dGVfKHRleHQxLCB0ZXh0Mikge1xuICB2YXIgZGlmZnM7XG5cbiAgaWYgKCF0ZXh0MSkge1xuICAgIC8vIEp1c3QgYWRkIHNvbWUgdGV4dCAoc3BlZWR1cCkuXG4gICAgcmV0dXJuIFtbRElGRl9JTlNFUlQsIHRleHQyXV07XG4gIH1cblxuICBpZiAoIXRleHQyKSB7XG4gICAgLy8gSnVzdCBkZWxldGUgc29tZSB0ZXh0IChzcGVlZHVwKS5cbiAgICByZXR1cm4gW1tESUZGX0RFTEVURSwgdGV4dDFdXTtcbiAgfVxuXG4gIHZhciBsb25ndGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQxIDogdGV4dDI7XG4gIHZhciBzaG9ydHRleHQgPSB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyB0ZXh0MiA6IHRleHQxO1xuICB2YXIgaSA9IGxvbmd0ZXh0LmluZGV4T2Yoc2hvcnR0ZXh0KTtcbiAgaWYgKGkgIT0gLTEpIHtcbiAgICAvLyBTaG9ydGVyIHRleHQgaXMgaW5zaWRlIHRoZSBsb25nZXIgdGV4dCAoc3BlZWR1cCkuXG4gICAgZGlmZnMgPSBbW0RJRkZfSU5TRVJULCBsb25ndGV4dC5zdWJzdHJpbmcoMCwgaSldLFxuICAgICAgICAgICAgIFtESUZGX0VRVUFMLCBzaG9ydHRleHRdLFxuICAgICAgICAgICAgIFtESUZGX0lOU0VSVCwgbG9uZ3RleHQuc3Vic3RyaW5nKGkgKyBzaG9ydHRleHQubGVuZ3RoKV1dO1xuICAgIC8vIFN3YXAgaW5zZXJ0aW9ucyBmb3IgZGVsZXRpb25zIGlmIGRpZmYgaXMgcmV2ZXJzZWQuXG4gICAgaWYgKHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCkge1xuICAgICAgZGlmZnNbMF1bMF0gPSBkaWZmc1syXVswXSA9IERJRkZfREVMRVRFO1xuICAgIH1cbiAgICByZXR1cm4gZGlmZnM7XG4gIH1cblxuICBpZiAoc2hvcnR0ZXh0Lmxlbmd0aCA9PSAxKSB7XG4gICAgLy8gU2luZ2xlIGNoYXJhY3RlciBzdHJpbmcuXG4gICAgLy8gQWZ0ZXIgdGhlIHByZXZpb3VzIHNwZWVkdXAsIHRoZSBjaGFyYWN0ZXIgY2FuJ3QgYmUgYW4gZXF1YWxpdHkuXG4gICAgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXSwgW0RJRkZfSU5TRVJULCB0ZXh0Ml1dO1xuICB9XG5cbiAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBwcm9ibGVtIGNhbiBiZSBzcGxpdCBpbiB0d28uXG4gIHZhciBobSA9IGRpZmZfaGFsZk1hdGNoXyh0ZXh0MSwgdGV4dDIpO1xuICBpZiAoaG0pIHtcbiAgICAvLyBBIGhhbGYtbWF0Y2ggd2FzIGZvdW5kLCBzb3J0IG91dCB0aGUgcmV0dXJuIGRhdGEuXG4gICAgdmFyIHRleHQxX2EgPSBobVswXTtcbiAgICB2YXIgdGV4dDFfYiA9IGhtWzFdO1xuICAgIHZhciB0ZXh0Ml9hID0gaG1bMl07XG4gICAgdmFyIHRleHQyX2IgPSBobVszXTtcbiAgICB2YXIgbWlkX2NvbW1vbiA9IGhtWzRdO1xuICAgIC8vIFNlbmQgYm90aCBwYWlycyBvZmYgZm9yIHNlcGFyYXRlIHByb2Nlc3NpbmcuXG4gICAgdmFyIGRpZmZzX2EgPSBkaWZmX21haW4odGV4dDFfYSwgdGV4dDJfYSk7XG4gICAgdmFyIGRpZmZzX2IgPSBkaWZmX21haW4odGV4dDFfYiwgdGV4dDJfYik7XG4gICAgLy8gTWVyZ2UgdGhlIHJlc3VsdHMuXG4gICAgcmV0dXJuIGRpZmZzX2EuY29uY2F0KFtbRElGRl9FUVVBTCwgbWlkX2NvbW1vbl1dLCBkaWZmc19iKTtcbiAgfVxuXG4gIHJldHVybiBkaWZmX2Jpc2VjdF8odGV4dDEsIHRleHQyKTtcbn07XG5cblxuLyoqXG4gKiBGaW5kIHRoZSAnbWlkZGxlIHNuYWtlJyBvZiBhIGRpZmYsIHNwbGl0IHRoZSBwcm9ibGVtIGluIHR3b1xuICogYW5kIHJldHVybiB0aGUgcmVjdXJzaXZlbHkgY29uc3RydWN0ZWQgZGlmZi5cbiAqIFNlZSBNeWVycyAxOTg2IHBhcGVyOiBBbiBPKE5EKSBEaWZmZXJlbmNlIEFsZ29yaXRobSBhbmQgSXRzIFZhcmlhdGlvbnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgT2xkIHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgTmV3IHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgZGlmZiB0dXBsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBkaWZmX2Jpc2VjdF8odGV4dDEsIHRleHQyKSB7XG4gIC8vIENhY2hlIHRoZSB0ZXh0IGxlbmd0aHMgdG8gcHJldmVudCBtdWx0aXBsZSBjYWxscy5cbiAgdmFyIHRleHQxX2xlbmd0aCA9IHRleHQxLmxlbmd0aDtcbiAgdmFyIHRleHQyX2xlbmd0aCA9IHRleHQyLmxlbmd0aDtcbiAgdmFyIG1heF9kID0gTWF0aC5jZWlsKCh0ZXh0MV9sZW5ndGggKyB0ZXh0Ml9sZW5ndGgpIC8gMik7XG4gIHZhciB2X29mZnNldCA9IG1heF9kO1xuICB2YXIgdl9sZW5ndGggPSAyICogbWF4X2Q7XG4gIHZhciB2MSA9IG5ldyBBcnJheSh2X2xlbmd0aCk7XG4gIHZhciB2MiA9IG5ldyBBcnJheSh2X2xlbmd0aCk7XG4gIC8vIFNldHRpbmcgYWxsIGVsZW1lbnRzIHRvIC0xIGlzIGZhc3RlciBpbiBDaHJvbWUgJiBGaXJlZm94IHRoYW4gbWl4aW5nXG4gIC8vIGludGVnZXJzIGFuZCB1bmRlZmluZWQuXG4gIGZvciAodmFyIHggPSAwOyB4IDwgdl9sZW5ndGg7IHgrKykge1xuICAgIHYxW3hdID0gLTE7XG4gICAgdjJbeF0gPSAtMTtcbiAgfVxuICB2MVt2X29mZnNldCArIDFdID0gMDtcbiAgdjJbdl9vZmZzZXQgKyAxXSA9IDA7XG4gIHZhciBkZWx0YSA9IHRleHQxX2xlbmd0aCAtIHRleHQyX2xlbmd0aDtcbiAgLy8gSWYgdGhlIHRvdGFsIG51bWJlciBvZiBjaGFyYWN0ZXJzIGlzIG9kZCwgdGhlbiB0aGUgZnJvbnQgcGF0aCB3aWxsIGNvbGxpZGVcbiAgLy8gd2l0aCB0aGUgcmV2ZXJzZSBwYXRoLlxuICB2YXIgZnJvbnQgPSAoZGVsdGEgJSAyICE9IDApO1xuICAvLyBPZmZzZXRzIGZvciBzdGFydCBhbmQgZW5kIG9mIGsgbG9vcC5cbiAgLy8gUHJldmVudHMgbWFwcGluZyBvZiBzcGFjZSBiZXlvbmQgdGhlIGdyaWQuXG4gIHZhciBrMXN0YXJ0ID0gMDtcbiAgdmFyIGsxZW5kID0gMDtcbiAgdmFyIGsyc3RhcnQgPSAwO1xuICB2YXIgazJlbmQgPSAwO1xuICBmb3IgKHZhciBkID0gMDsgZCA8IG1heF9kOyBkKyspIHtcbiAgICAvLyBXYWxrIHRoZSBmcm9udCBwYXRoIG9uZSBzdGVwLlxuICAgIGZvciAodmFyIGsxID0gLWQgKyBrMXN0YXJ0OyBrMSA8PSBkIC0gazFlbmQ7IGsxICs9IDIpIHtcbiAgICAgIHZhciBrMV9vZmZzZXQgPSB2X29mZnNldCArIGsxO1xuICAgICAgdmFyIHgxO1xuICAgICAgaWYgKGsxID09IC1kIHx8IChrMSAhPSBkICYmIHYxW2sxX29mZnNldCAtIDFdIDwgdjFbazFfb2Zmc2V0ICsgMV0pKSB7XG4gICAgICAgIHgxID0gdjFbazFfb2Zmc2V0ICsgMV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MSA9IHYxW2sxX29mZnNldCAtIDFdICsgMTtcbiAgICAgIH1cbiAgICAgIHZhciB5MSA9IHgxIC0gazE7XG4gICAgICB3aGlsZSAoeDEgPCB0ZXh0MV9sZW5ndGggJiYgeTEgPCB0ZXh0Ml9sZW5ndGggJiZcbiAgICAgICAgICAgICB0ZXh0MS5jaGFyQXQoeDEpID09IHRleHQyLmNoYXJBdCh5MSkpIHtcbiAgICAgICAgeDErKztcbiAgICAgICAgeTErKztcbiAgICAgIH1cbiAgICAgIHYxW2sxX29mZnNldF0gPSB4MTtcbiAgICAgIGlmICh4MSA+IHRleHQxX2xlbmd0aCkge1xuICAgICAgICAvLyBSYW4gb2ZmIHRoZSByaWdodCBvZiB0aGUgZ3JhcGguXG4gICAgICAgIGsxZW5kICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKHkxID4gdGV4dDJfbGVuZ3RoKSB7XG4gICAgICAgIC8vIFJhbiBvZmYgdGhlIGJvdHRvbSBvZiB0aGUgZ3JhcGguXG4gICAgICAgIGsxc3RhcnQgKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoZnJvbnQpIHtcbiAgICAgICAgdmFyIGsyX29mZnNldCA9IHZfb2Zmc2V0ICsgZGVsdGEgLSBrMTtcbiAgICAgICAgaWYgKGsyX29mZnNldCA+PSAwICYmIGsyX29mZnNldCA8IHZfbGVuZ3RoICYmIHYyW2syX29mZnNldF0gIT0gLTEpIHtcbiAgICAgICAgICAvLyBNaXJyb3IgeDIgb250byB0b3AtbGVmdCBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgICAgICB2YXIgeDIgPSB0ZXh0MV9sZW5ndGggLSB2MltrMl9vZmZzZXRdO1xuICAgICAgICAgIGlmICh4MSA+PSB4Mikge1xuICAgICAgICAgICAgLy8gT3ZlcmxhcCBkZXRlY3RlZC5cbiAgICAgICAgICAgIHJldHVybiBkaWZmX2Jpc2VjdFNwbGl0Xyh0ZXh0MSwgdGV4dDIsIHgxLCB5MSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gV2FsayB0aGUgcmV2ZXJzZSBwYXRoIG9uZSBzdGVwLlxuICAgIGZvciAodmFyIGsyID0gLWQgKyBrMnN0YXJ0OyBrMiA8PSBkIC0gazJlbmQ7IGsyICs9IDIpIHtcbiAgICAgIHZhciBrMl9vZmZzZXQgPSB2X29mZnNldCArIGsyO1xuICAgICAgdmFyIHgyO1xuICAgICAgaWYgKGsyID09IC1kIHx8IChrMiAhPSBkICYmIHYyW2syX29mZnNldCAtIDFdIDwgdjJbazJfb2Zmc2V0ICsgMV0pKSB7XG4gICAgICAgIHgyID0gdjJbazJfb2Zmc2V0ICsgMV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MiA9IHYyW2syX29mZnNldCAtIDFdICsgMTtcbiAgICAgIH1cbiAgICAgIHZhciB5MiA9IHgyIC0gazI7XG4gICAgICB3aGlsZSAoeDIgPCB0ZXh0MV9sZW5ndGggJiYgeTIgPCB0ZXh0Ml9sZW5ndGggJiZcbiAgICAgICAgICAgICB0ZXh0MS5jaGFyQXQodGV4dDFfbGVuZ3RoIC0geDIgLSAxKSA9PVxuICAgICAgICAgICAgIHRleHQyLmNoYXJBdCh0ZXh0Ml9sZW5ndGggLSB5MiAtIDEpKSB7XG4gICAgICAgIHgyKys7XG4gICAgICAgIHkyKys7XG4gICAgICB9XG4gICAgICB2MltrMl9vZmZzZXRdID0geDI7XG4gICAgICBpZiAoeDIgPiB0ZXh0MV9sZW5ndGgpIHtcbiAgICAgICAgLy8gUmFuIG9mZiB0aGUgbGVmdCBvZiB0aGUgZ3JhcGguXG4gICAgICAgIGsyZW5kICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKHkyID4gdGV4dDJfbGVuZ3RoKSB7XG4gICAgICAgIC8vIFJhbiBvZmYgdGhlIHRvcCBvZiB0aGUgZ3JhcGguXG4gICAgICAgIGsyc3RhcnQgKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoIWZyb250KSB7XG4gICAgICAgIHZhciBrMV9vZmZzZXQgPSB2X29mZnNldCArIGRlbHRhIC0gazI7XG4gICAgICAgIGlmIChrMV9vZmZzZXQgPj0gMCAmJiBrMV9vZmZzZXQgPCB2X2xlbmd0aCAmJiB2MVtrMV9vZmZzZXRdICE9IC0xKSB7XG4gICAgICAgICAgdmFyIHgxID0gdjFbazFfb2Zmc2V0XTtcbiAgICAgICAgICB2YXIgeTEgPSB2X29mZnNldCArIHgxIC0gazFfb2Zmc2V0O1xuICAgICAgICAgIC8vIE1pcnJvciB4MiBvbnRvIHRvcC1sZWZ0IGNvb3JkaW5hdGUgc3lzdGVtLlxuICAgICAgICAgIHgyID0gdGV4dDFfbGVuZ3RoIC0geDI7XG4gICAgICAgICAgaWYgKHgxID49IHgyKSB7XG4gICAgICAgICAgICAvLyBPdmVybGFwIGRldGVjdGVkLlxuICAgICAgICAgICAgcmV0dXJuIGRpZmZfYmlzZWN0U3BsaXRfKHRleHQxLCB0ZXh0MiwgeDEsIHkxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gRGlmZiB0b29rIHRvbyBsb25nIGFuZCBoaXQgdGhlIGRlYWRsaW5lIG9yXG4gIC8vIG51bWJlciBvZiBkaWZmcyBlcXVhbHMgbnVtYmVyIG9mIGNoYXJhY3RlcnMsIG5vIGNvbW1vbmFsaXR5IGF0IGFsbC5cbiAgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXSwgW0RJRkZfSU5TRVJULCB0ZXh0Ml1dO1xufTtcblxuXG4vKipcbiAqIEdpdmVuIHRoZSBsb2NhdGlvbiBvZiB0aGUgJ21pZGRsZSBzbmFrZScsIHNwbGl0IHRoZSBkaWZmIGluIHR3byBwYXJ0c1xuICogYW5kIHJlY3Vyc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgT2xkIHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgTmV3IHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge251bWJlcn0geCBJbmRleCBvZiBzcGxpdCBwb2ludCBpbiB0ZXh0MS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB5IEluZGV4IG9mIHNwbGl0IHBvaW50IGluIHRleHQyLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICovXG5mdW5jdGlvbiBkaWZmX2Jpc2VjdFNwbGl0Xyh0ZXh0MSwgdGV4dDIsIHgsIHkpIHtcbiAgdmFyIHRleHQxYSA9IHRleHQxLnN1YnN0cmluZygwLCB4KTtcbiAgdmFyIHRleHQyYSA9IHRleHQyLnN1YnN0cmluZygwLCB5KTtcbiAgdmFyIHRleHQxYiA9IHRleHQxLnN1YnN0cmluZyh4KTtcbiAgdmFyIHRleHQyYiA9IHRleHQyLnN1YnN0cmluZyh5KTtcblxuICAvLyBDb21wdXRlIGJvdGggZGlmZnMgc2VyaWFsbHkuXG4gIHZhciBkaWZmcyA9IGRpZmZfbWFpbih0ZXh0MWEsIHRleHQyYSk7XG4gIHZhciBkaWZmc2IgPSBkaWZmX21haW4odGV4dDFiLCB0ZXh0MmIpO1xuXG4gIHJldHVybiBkaWZmcy5jb25jYXQoZGlmZnNiKTtcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgdGhlIGNvbW1vbiBwcmVmaXggb2YgdHdvIHN0cmluZ3MuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgRmlyc3Qgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIFNlY29uZCBzdHJpbmcuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBjb21tb24gdG8gdGhlIHN0YXJ0IG9mIGVhY2hcbiAqICAgICBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGRpZmZfY29tbW9uUHJlZml4KHRleHQxLCB0ZXh0Mikge1xuICAvLyBRdWljayBjaGVjayBmb3IgY29tbW9uIG51bGwgY2FzZXMuXG4gIGlmICghdGV4dDEgfHwgIXRleHQyIHx8IHRleHQxLmNoYXJBdCgwKSAhPSB0ZXh0Mi5jaGFyQXQoMCkpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICAvLyBCaW5hcnkgc2VhcmNoLlxuICAvLyBQZXJmb3JtYW5jZSBhbmFseXNpczogaHR0cDovL25laWwuZnJhc2VyLm5hbWUvbmV3cy8yMDA3LzEwLzA5L1xuICB2YXIgcG9pbnRlcm1pbiA9IDA7XG4gIHZhciBwb2ludGVybWF4ID0gTWF0aC5taW4odGV4dDEubGVuZ3RoLCB0ZXh0Mi5sZW5ndGgpO1xuICB2YXIgcG9pbnRlcm1pZCA9IHBvaW50ZXJtYXg7XG4gIHZhciBwb2ludGVyc3RhcnQgPSAwO1xuICB3aGlsZSAocG9pbnRlcm1pbiA8IHBvaW50ZXJtaWQpIHtcbiAgICBpZiAodGV4dDEuc3Vic3RyaW5nKHBvaW50ZXJzdGFydCwgcG9pbnRlcm1pZCkgPT1cbiAgICAgICAgdGV4dDIuc3Vic3RyaW5nKHBvaW50ZXJzdGFydCwgcG9pbnRlcm1pZCkpIHtcbiAgICAgIHBvaW50ZXJtaW4gPSBwb2ludGVybWlkO1xuICAgICAgcG9pbnRlcnN0YXJ0ID0gcG9pbnRlcm1pbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnRlcm1heCA9IHBvaW50ZXJtaWQ7XG4gICAgfVxuICAgIHBvaW50ZXJtaWQgPSBNYXRoLmZsb29yKChwb2ludGVybWF4IC0gcG9pbnRlcm1pbikgLyAyICsgcG9pbnRlcm1pbik7XG4gIH1cbiAgcmV0dXJuIHBvaW50ZXJtaWQ7XG59O1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIHRoZSBjb21tb24gc3VmZml4IG9mIHR3byBzdHJpbmdzLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIEZpcnN0IHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBTZWNvbmQgc3RyaW5nLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgY29tbW9uIHRvIHRoZSBlbmQgb2YgZWFjaCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGRpZmZfY29tbW9uU3VmZml4KHRleHQxLCB0ZXh0Mikge1xuICAvLyBRdWljayBjaGVjayBmb3IgY29tbW9uIG51bGwgY2FzZXMuXG4gIGlmICghdGV4dDEgfHwgIXRleHQyIHx8XG4gICAgICB0ZXh0MS5jaGFyQXQodGV4dDEubGVuZ3RoIC0gMSkgIT0gdGV4dDIuY2hhckF0KHRleHQyLmxlbmd0aCAtIDEpKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgLy8gQmluYXJ5IHNlYXJjaC5cbiAgLy8gUGVyZm9ybWFuY2UgYW5hbHlzaXM6IGh0dHA6Ly9uZWlsLmZyYXNlci5uYW1lL25ld3MvMjAwNy8xMC8wOS9cbiAgdmFyIHBvaW50ZXJtaW4gPSAwO1xuICB2YXIgcG9pbnRlcm1heCA9IE1hdGgubWluKHRleHQxLmxlbmd0aCwgdGV4dDIubGVuZ3RoKTtcbiAgdmFyIHBvaW50ZXJtaWQgPSBwb2ludGVybWF4O1xuICB2YXIgcG9pbnRlcmVuZCA9IDA7XG4gIHdoaWxlIChwb2ludGVybWluIDwgcG9pbnRlcm1pZCkge1xuICAgIGlmICh0ZXh0MS5zdWJzdHJpbmcodGV4dDEubGVuZ3RoIC0gcG9pbnRlcm1pZCwgdGV4dDEubGVuZ3RoIC0gcG9pbnRlcmVuZCkgPT1cbiAgICAgICAgdGV4dDIuc3Vic3RyaW5nKHRleHQyLmxlbmd0aCAtIHBvaW50ZXJtaWQsIHRleHQyLmxlbmd0aCAtIHBvaW50ZXJlbmQpKSB7XG4gICAgICBwb2ludGVybWluID0gcG9pbnRlcm1pZDtcbiAgICAgIHBvaW50ZXJlbmQgPSBwb2ludGVybWluO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb2ludGVybWF4ID0gcG9pbnRlcm1pZDtcbiAgICB9XG4gICAgcG9pbnRlcm1pZCA9IE1hdGguZmxvb3IoKHBvaW50ZXJtYXggLSBwb2ludGVybWluKSAvIDIgKyBwb2ludGVybWluKTtcbiAgfVxuICByZXR1cm4gcG9pbnRlcm1pZDtcbn07XG5cblxuLyoqXG4gKiBEbyB0aGUgdHdvIHRleHRzIHNoYXJlIGEgc3Vic3RyaW5nIHdoaWNoIGlzIGF0IGxlYXN0IGhhbGYgdGhlIGxlbmd0aCBvZiB0aGVcbiAqIGxvbmdlciB0ZXh0P1xuICogVGhpcyBzcGVlZHVwIGNhbiBwcm9kdWNlIG5vbi1taW5pbWFsIGRpZmZzLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIEZpcnN0IHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBTZWNvbmQgc3RyaW5nLlxuICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59IEZpdmUgZWxlbWVudCBBcnJheSwgY29udGFpbmluZyB0aGUgcHJlZml4IG9mXG4gKiAgICAgdGV4dDEsIHRoZSBzdWZmaXggb2YgdGV4dDEsIHRoZSBwcmVmaXggb2YgdGV4dDIsIHRoZSBzdWZmaXggb2ZcbiAqICAgICB0ZXh0MiBhbmQgdGhlIGNvbW1vbiBtaWRkbGUuICBPciBudWxsIGlmIHRoZXJlIHdhcyBubyBtYXRjaC5cbiAqL1xuZnVuY3Rpb24gZGlmZl9oYWxmTWF0Y2hfKHRleHQxLCB0ZXh0Mikge1xuICB2YXIgbG9uZ3RleHQgPSB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyB0ZXh0MSA6IHRleHQyO1xuICB2YXIgc2hvcnR0ZXh0ID0gdGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoID8gdGV4dDIgOiB0ZXh0MTtcbiAgaWYgKGxvbmd0ZXh0Lmxlbmd0aCA8IDQgfHwgc2hvcnR0ZXh0Lmxlbmd0aCAqIDIgPCBsb25ndGV4dC5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDsgIC8vIFBvaW50bGVzcy5cbiAgfVxuXG4gIC8qKlxuICAgKiBEb2VzIGEgc3Vic3RyaW5nIG9mIHNob3J0dGV4dCBleGlzdCB3aXRoaW4gbG9uZ3RleHQgc3VjaCB0aGF0IHRoZSBzdWJzdHJpbmdcbiAgICogaXMgYXQgbGVhc3QgaGFsZiB0aGUgbGVuZ3RoIG9mIGxvbmd0ZXh0P1xuICAgKiBDbG9zdXJlLCBidXQgZG9lcyBub3QgcmVmZXJlbmNlIGFueSBleHRlcm5hbCB2YXJpYWJsZXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb25ndGV4dCBMb25nZXIgc3RyaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2hvcnR0ZXh0IFNob3J0ZXIgc3RyaW5nLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaSBTdGFydCBpbmRleCBvZiBxdWFydGVyIGxlbmd0aCBzdWJzdHJpbmcgd2l0aGluIGxvbmd0ZXh0LlxuICAgKiBAcmV0dXJuIHtBcnJheS48c3RyaW5nPn0gRml2ZSBlbGVtZW50IEFycmF5LCBjb250YWluaW5nIHRoZSBwcmVmaXggb2ZcbiAgICogICAgIGxvbmd0ZXh0LCB0aGUgc3VmZml4IG9mIGxvbmd0ZXh0LCB0aGUgcHJlZml4IG9mIHNob3J0dGV4dCwgdGhlIHN1ZmZpeFxuICAgKiAgICAgb2Ygc2hvcnR0ZXh0IGFuZCB0aGUgY29tbW9uIG1pZGRsZS4gIE9yIG51bGwgaWYgdGhlcmUgd2FzIG5vIG1hdGNoLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZGlmZl9oYWxmTWF0Y2hJXyhsb25ndGV4dCwgc2hvcnR0ZXh0LCBpKSB7XG4gICAgLy8gU3RhcnQgd2l0aCBhIDEvNCBsZW5ndGggc3Vic3RyaW5nIGF0IHBvc2l0aW9uIGkgYXMgYSBzZWVkLlxuICAgIHZhciBzZWVkID0gbG9uZ3RleHQuc3Vic3RyaW5nKGksIGkgKyBNYXRoLmZsb29yKGxvbmd0ZXh0Lmxlbmd0aCAvIDQpKTtcbiAgICB2YXIgaiA9IC0xO1xuICAgIHZhciBiZXN0X2NvbW1vbiA9ICcnO1xuICAgIHZhciBiZXN0X2xvbmd0ZXh0X2EsIGJlc3RfbG9uZ3RleHRfYiwgYmVzdF9zaG9ydHRleHRfYSwgYmVzdF9zaG9ydHRleHRfYjtcbiAgICB3aGlsZSAoKGogPSBzaG9ydHRleHQuaW5kZXhPZihzZWVkLCBqICsgMSkpICE9IC0xKSB7XG4gICAgICB2YXIgcHJlZml4TGVuZ3RoID0gZGlmZl9jb21tb25QcmVmaXgobG9uZ3RleHQuc3Vic3RyaW5nKGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0dGV4dC5zdWJzdHJpbmcoaikpO1xuICAgICAgdmFyIHN1ZmZpeExlbmd0aCA9IGRpZmZfY29tbW9uU3VmZml4KGxvbmd0ZXh0LnN1YnN0cmluZygwLCBpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9ydHRleHQuc3Vic3RyaW5nKDAsIGopKTtcbiAgICAgIGlmIChiZXN0X2NvbW1vbi5sZW5ndGggPCBzdWZmaXhMZW5ndGggKyBwcmVmaXhMZW5ndGgpIHtcbiAgICAgICAgYmVzdF9jb21tb24gPSBzaG9ydHRleHQuc3Vic3RyaW5nKGogLSBzdWZmaXhMZW5ndGgsIGopICtcbiAgICAgICAgICAgIHNob3J0dGV4dC5zdWJzdHJpbmcoaiwgaiArIHByZWZpeExlbmd0aCk7XG4gICAgICAgIGJlc3RfbG9uZ3RleHRfYSA9IGxvbmd0ZXh0LnN1YnN0cmluZygwLCBpIC0gc3VmZml4TGVuZ3RoKTtcbiAgICAgICAgYmVzdF9sb25ndGV4dF9iID0gbG9uZ3RleHQuc3Vic3RyaW5nKGkgKyBwcmVmaXhMZW5ndGgpO1xuICAgICAgICBiZXN0X3Nob3J0dGV4dF9hID0gc2hvcnR0ZXh0LnN1YnN0cmluZygwLCBqIC0gc3VmZml4TGVuZ3RoKTtcbiAgICAgICAgYmVzdF9zaG9ydHRleHRfYiA9IHNob3J0dGV4dC5zdWJzdHJpbmcoaiArIHByZWZpeExlbmd0aCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChiZXN0X2NvbW1vbi5sZW5ndGggKiAyID49IGxvbmd0ZXh0Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFtiZXN0X2xvbmd0ZXh0X2EsIGJlc3RfbG9uZ3RleHRfYixcbiAgICAgICAgICAgICAgYmVzdF9zaG9ydHRleHRfYSwgYmVzdF9zaG9ydHRleHRfYiwgYmVzdF9jb21tb25dO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBGaXJzdCBjaGVjayBpZiB0aGUgc2Vjb25kIHF1YXJ0ZXIgaXMgdGhlIHNlZWQgZm9yIGEgaGFsZi1tYXRjaC5cbiAgdmFyIGhtMSA9IGRpZmZfaGFsZk1hdGNoSV8obG9uZ3RleHQsIHNob3J0dGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5jZWlsKGxvbmd0ZXh0Lmxlbmd0aCAvIDQpKTtcbiAgLy8gQ2hlY2sgYWdhaW4gYmFzZWQgb24gdGhlIHRoaXJkIHF1YXJ0ZXIuXG4gIHZhciBobTIgPSBkaWZmX2hhbGZNYXRjaElfKGxvbmd0ZXh0LCBzaG9ydHRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguY2VpbChsb25ndGV4dC5sZW5ndGggLyAyKSk7XG4gIHZhciBobTtcbiAgaWYgKCFobTEgJiYgIWhtMikge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2UgaWYgKCFobTIpIHtcbiAgICBobSA9IGhtMTtcbiAgfSBlbHNlIGlmICghaG0xKSB7XG4gICAgaG0gPSBobTI7XG4gIH0gZWxzZSB7XG4gICAgLy8gQm90aCBtYXRjaGVkLiAgU2VsZWN0IHRoZSBsb25nZXN0LlxuICAgIGhtID0gaG0xWzRdLmxlbmd0aCA+IGhtMls0XS5sZW5ndGggPyBobTEgOiBobTI7XG4gIH1cblxuICAvLyBBIGhhbGYtbWF0Y2ggd2FzIGZvdW5kLCBzb3J0IG91dCB0aGUgcmV0dXJuIGRhdGEuXG4gIHZhciB0ZXh0MV9hLCB0ZXh0MV9iLCB0ZXh0Ml9hLCB0ZXh0Ml9iO1xuICBpZiAodGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoKSB7XG4gICAgdGV4dDFfYSA9IGhtWzBdO1xuICAgIHRleHQxX2IgPSBobVsxXTtcbiAgICB0ZXh0Ml9hID0gaG1bMl07XG4gICAgdGV4dDJfYiA9IGhtWzNdO1xuICB9IGVsc2Uge1xuICAgIHRleHQyX2EgPSBobVswXTtcbiAgICB0ZXh0Ml9iID0gaG1bMV07XG4gICAgdGV4dDFfYSA9IGhtWzJdO1xuICAgIHRleHQxX2IgPSBobVszXTtcbiAgfVxuICB2YXIgbWlkX2NvbW1vbiA9IGhtWzRdO1xuICByZXR1cm4gW3RleHQxX2EsIHRleHQxX2IsIHRleHQyX2EsIHRleHQyX2IsIG1pZF9jb21tb25dO1xufTtcblxuXG4vKipcbiAqIFJlb3JkZXIgYW5kIG1lcmdlIGxpa2UgZWRpdCBzZWN0aW9ucy4gIE1lcmdlIGVxdWFsaXRpZXMuXG4gKiBBbnkgZWRpdCBzZWN0aW9uIGNhbiBtb3ZlIGFzIGxvbmcgYXMgaXQgZG9lc24ndCBjcm9zcyBhbiBlcXVhbGl0eS5cbiAqIEBwYXJhbSB7QXJyYXl9IGRpZmZzIEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICovXG5mdW5jdGlvbiBkaWZmX2NsZWFudXBNZXJnZShkaWZmcykge1xuICBkaWZmcy5wdXNoKFtESUZGX0VRVUFMLCAnJ10pOyAgLy8gQWRkIGEgZHVtbXkgZW50cnkgYXQgdGhlIGVuZC5cbiAgdmFyIHBvaW50ZXIgPSAwO1xuICB2YXIgY291bnRfZGVsZXRlID0gMDtcbiAgdmFyIGNvdW50X2luc2VydCA9IDA7XG4gIHZhciB0ZXh0X2RlbGV0ZSA9ICcnO1xuICB2YXIgdGV4dF9pbnNlcnQgPSAnJztcbiAgdmFyIGNvbW1vbmxlbmd0aDtcbiAgd2hpbGUgKHBvaW50ZXIgPCBkaWZmcy5sZW5ndGgpIHtcbiAgICBzd2l0Y2ggKGRpZmZzW3BvaW50ZXJdWzBdKSB7XG4gICAgICBjYXNlIERJRkZfSU5TRVJUOlxuICAgICAgICBjb3VudF9pbnNlcnQrKztcbiAgICAgICAgdGV4dF9pbnNlcnQgKz0gZGlmZnNbcG9pbnRlcl1bMV07XG4gICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERJRkZfREVMRVRFOlxuICAgICAgICBjb3VudF9kZWxldGUrKztcbiAgICAgICAgdGV4dF9kZWxldGUgKz0gZGlmZnNbcG9pbnRlcl1bMV07XG4gICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERJRkZfRVFVQUw6XG4gICAgICAgIC8vIFVwb24gcmVhY2hpbmcgYW4gZXF1YWxpdHksIGNoZWNrIGZvciBwcmlvciByZWR1bmRhbmNpZXMuXG4gICAgICAgIGlmIChjb3VudF9kZWxldGUgKyBjb3VudF9pbnNlcnQgPiAxKSB7XG4gICAgICAgICAgaWYgKGNvdW50X2RlbGV0ZSAhPT0gMCAmJiBjb3VudF9pbnNlcnQgIT09IDApIHtcbiAgICAgICAgICAgIC8vIEZhY3RvciBvdXQgYW55IGNvbW1vbiBwcmVmaXhpZXMuXG4gICAgICAgICAgICBjb21tb25sZW5ndGggPSBkaWZmX2NvbW1vblByZWZpeCh0ZXh0X2luc2VydCwgdGV4dF9kZWxldGUpO1xuICAgICAgICAgICAgaWYgKGNvbW1vbmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICBpZiAoKHBvaW50ZXIgLSBjb3VudF9kZWxldGUgLSBjb3VudF9pbnNlcnQpID4gMCAmJlxuICAgICAgICAgICAgICAgICAgZGlmZnNbcG9pbnRlciAtIGNvdW50X2RlbGV0ZSAtIGNvdW50X2luc2VydCAtIDFdWzBdID09XG4gICAgICAgICAgICAgICAgICBESUZGX0VRVUFMKSB7XG4gICAgICAgICAgICAgICAgZGlmZnNbcG9pbnRlciAtIGNvdW50X2RlbGV0ZSAtIGNvdW50X2luc2VydCAtIDFdWzFdICs9XG4gICAgICAgICAgICAgICAgICAgIHRleHRfaW5zZXJ0LnN1YnN0cmluZygwLCBjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpZmZzLnNwbGljZSgwLCAwLCBbRElGRl9FUVVBTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfaW5zZXJ0LnN1YnN0cmluZygwLCBjb21tb25sZW5ndGgpXSk7XG4gICAgICAgICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRleHRfaW5zZXJ0ID0gdGV4dF9pbnNlcnQuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCk7XG4gICAgICAgICAgICAgIHRleHRfZGVsZXRlID0gdGV4dF9kZWxldGUuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGYWN0b3Igb3V0IGFueSBjb21tb24gc3VmZml4aWVzLlxuICAgICAgICAgICAgY29tbW9ubGVuZ3RoID0gZGlmZl9jb21tb25TdWZmaXgodGV4dF9pbnNlcnQsIHRleHRfZGVsZXRlKTtcbiAgICAgICAgICAgIGlmIChjb21tb25sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgZGlmZnNbcG9pbnRlcl1bMV0gPSB0ZXh0X2luc2VydC5zdWJzdHJpbmcodGV4dF9pbnNlcnQubGVuZ3RoIC1cbiAgICAgICAgICAgICAgICAgIGNvbW1vbmxlbmd0aCkgKyBkaWZmc1twb2ludGVyXVsxXTtcbiAgICAgICAgICAgICAgdGV4dF9pbnNlcnQgPSB0ZXh0X2luc2VydC5zdWJzdHJpbmcoMCwgdGV4dF9pbnNlcnQubGVuZ3RoIC1cbiAgICAgICAgICAgICAgICAgIGNvbW1vbmxlbmd0aCk7XG4gICAgICAgICAgICAgIHRleHRfZGVsZXRlID0gdGV4dF9kZWxldGUuc3Vic3RyaW5nKDAsIHRleHRfZGVsZXRlLmxlbmd0aCAtXG4gICAgICAgICAgICAgICAgICBjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBEZWxldGUgdGhlIG9mZmVuZGluZyByZWNvcmRzIGFuZCBhZGQgdGhlIG1lcmdlZCBvbmVzLlxuICAgICAgICAgIGlmIChjb3VudF9kZWxldGUgPT09IDApIHtcbiAgICAgICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyIC0gY291bnRfaW5zZXJ0LFxuICAgICAgICAgICAgICAgIGNvdW50X2RlbGV0ZSArIGNvdW50X2luc2VydCwgW0RJRkZfSU5TRVJULCB0ZXh0X2luc2VydF0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY291bnRfaW5zZXJ0ID09PSAwKSB7XG4gICAgICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciAtIGNvdW50X2RlbGV0ZSxcbiAgICAgICAgICAgICAgICBjb3VudF9kZWxldGUgKyBjb3VudF9pbnNlcnQsIFtESUZGX0RFTEVURSwgdGV4dF9kZWxldGVdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIgLSBjb3VudF9kZWxldGUgLSBjb3VudF9pbnNlcnQsXG4gICAgICAgICAgICAgICAgY291bnRfZGVsZXRlICsgY291bnRfaW5zZXJ0LCBbRElGRl9ERUxFVEUsIHRleHRfZGVsZXRlXSxcbiAgICAgICAgICAgICAgICBbRElGRl9JTlNFUlQsIHRleHRfaW5zZXJ0XSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvaW50ZXIgPSBwb2ludGVyIC0gY291bnRfZGVsZXRlIC0gY291bnRfaW5zZXJ0ICtcbiAgICAgICAgICAgICAgICAgICAgKGNvdW50X2RlbGV0ZSA/IDEgOiAwKSArIChjb3VudF9pbnNlcnQgPyAxIDogMCkgKyAxO1xuICAgICAgICB9IGVsc2UgaWYgKHBvaW50ZXIgIT09IDAgJiYgZGlmZnNbcG9pbnRlciAtIDFdWzBdID09IERJRkZfRVFVQUwpIHtcbiAgICAgICAgICAvLyBNZXJnZSB0aGlzIGVxdWFsaXR5IHdpdGggdGhlIHByZXZpb3VzIG9uZS5cbiAgICAgICAgICBkaWZmc1twb2ludGVyIC0gMV1bMV0gKz0gZGlmZnNbcG9pbnRlcl1bMV07XG4gICAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIsIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgfVxuICAgICAgICBjb3VudF9pbnNlcnQgPSAwO1xuICAgICAgICBjb3VudF9kZWxldGUgPSAwO1xuICAgICAgICB0ZXh0X2RlbGV0ZSA9ICcnO1xuICAgICAgICB0ZXh0X2luc2VydCA9ICcnO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGRpZmZzW2RpZmZzLmxlbmd0aCAtIDFdWzFdID09PSAnJykge1xuICAgIGRpZmZzLnBvcCgpOyAgLy8gUmVtb3ZlIHRoZSBkdW1teSBlbnRyeSBhdCB0aGUgZW5kLlxuICB9XG5cbiAgLy8gU2Vjb25kIHBhc3M6IGxvb2sgZm9yIHNpbmdsZSBlZGl0cyBzdXJyb3VuZGVkIG9uIGJvdGggc2lkZXMgYnkgZXF1YWxpdGllc1xuICAvLyB3aGljaCBjYW4gYmUgc2hpZnRlZCBzaWRld2F5cyB0byBlbGltaW5hdGUgYW4gZXF1YWxpdHkuXG4gIC8vIGUuZzogQTxpbnM+QkE8L2lucz5DIC0+IDxpbnM+QUI8L2lucz5BQ1xuICB2YXIgY2hhbmdlcyA9IGZhbHNlO1xuICBwb2ludGVyID0gMTtcbiAgLy8gSW50ZW50aW9uYWxseSBpZ25vcmUgdGhlIGZpcnN0IGFuZCBsYXN0IGVsZW1lbnQgKGRvbid0IG5lZWQgY2hlY2tpbmcpLlxuICB3aGlsZSAocG9pbnRlciA8IGRpZmZzLmxlbmd0aCAtIDEpIHtcbiAgICBpZiAoZGlmZnNbcG9pbnRlciAtIDFdWzBdID09IERJRkZfRVFVQUwgJiZcbiAgICAgICAgZGlmZnNbcG9pbnRlciArIDFdWzBdID09IERJRkZfRVFVQUwpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBzaW5nbGUgZWRpdCBzdXJyb3VuZGVkIGJ5IGVxdWFsaXRpZXMuXG4gICAgICBpZiAoZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCAtXG4gICAgICAgICAgZGlmZnNbcG9pbnRlciAtIDFdWzFdLmxlbmd0aCkgPT0gZGlmZnNbcG9pbnRlciAtIDFdWzFdKSB7XG4gICAgICAgIC8vIFNoaWZ0IHRoZSBlZGl0IG92ZXIgdGhlIHByZXZpb3VzIGVxdWFsaXR5LlxuICAgICAgICBkaWZmc1twb2ludGVyXVsxXSA9IGRpZmZzW3BvaW50ZXIgLSAxXVsxXSArXG4gICAgICAgICAgICBkaWZmc1twb2ludGVyXVsxXS5zdWJzdHJpbmcoMCwgZGlmZnNbcG9pbnRlcl1bMV0ubGVuZ3RoIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmc1twb2ludGVyIC0gMV1bMV0ubGVuZ3RoKTtcbiAgICAgICAgZGlmZnNbcG9pbnRlciArIDFdWzFdID0gZGlmZnNbcG9pbnRlciAtIDFdWzFdICsgZGlmZnNbcG9pbnRlciArIDFdWzFdO1xuICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciAtIDEsIDEpO1xuICAgICAgICBjaGFuZ2VzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKDAsIGRpZmZzW3BvaW50ZXIgKyAxXVsxXS5sZW5ndGgpID09XG4gICAgICAgICAgZGlmZnNbcG9pbnRlciArIDFdWzFdKSB7XG4gICAgICAgIC8vIFNoaWZ0IHRoZSBlZGl0IG92ZXIgdGhlIG5leHQgZXF1YWxpdHkuXG4gICAgICAgIGRpZmZzW3BvaW50ZXIgLSAxXVsxXSArPSBkaWZmc1twb2ludGVyICsgMV1bMV07XG4gICAgICAgIGRpZmZzW3BvaW50ZXJdWzFdID1cbiAgICAgICAgICAgIGRpZmZzW3BvaW50ZXJdWzFdLnN1YnN0cmluZyhkaWZmc1twb2ludGVyICsgMV1bMV0ubGVuZ3RoKSArXG4gICAgICAgICAgICBkaWZmc1twb2ludGVyICsgMV1bMV07XG4gICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyICsgMSwgMSk7XG4gICAgICAgIGNoYW5nZXMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBwb2ludGVyKys7XG4gIH1cbiAgLy8gSWYgc2hpZnRzIHdlcmUgbWFkZSwgdGhlIGRpZmYgbmVlZHMgcmVvcmRlcmluZyBhbmQgYW5vdGhlciBzaGlmdCBzd2VlcC5cbiAgaWYgKGNoYW5nZXMpIHtcbiAgICBkaWZmX2NsZWFudXBNZXJnZShkaWZmcyk7XG4gIH1cbn07XG5cblxudmFyIGRpZmYgPSBkaWZmX21haW47XG5kaWZmLklOU0VSVCA9IERJRkZfSU5TRVJUO1xuZGlmZi5ERUxFVEUgPSBESUZGX0RFTEVURTtcbmRpZmYuRVFVQUwgPSBESUZGX0VRVUFMO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRpZmY7XG5cbi8qXG4gKiBNb2RpZnkgYSBkaWZmIHN1Y2ggdGhhdCB0aGUgY3Vyc29yIHBvc2l0aW9uIHBvaW50cyB0byB0aGUgc3RhcnQgb2YgYSBjaGFuZ2U6XG4gKiBFLmcuXG4gKiAgIGN1cnNvcl9ub3JtYWxpemVfZGlmZihbW0RJRkZfRVFVQUwsICdhYmMnXV0sIDEpXG4gKiAgICAgPT4gWzEsIFtbRElGRl9FUVVBTCwgJ2EnXSwgW0RJRkZfRVFVQUwsICdiYyddXV1cbiAqICAgY3Vyc29yX25vcm1hbGl6ZV9kaWZmKFtbRElGRl9JTlNFUlQsICduZXcnXSwgW0RJRkZfREVMRVRFLCAneHl6J11dLCAyKVxuICogICAgID0+IFsyLCBbW0RJRkZfSU5TRVJULCAnbmV3J10sIFtESUZGX0RFTEVURSwgJ3h5J10sIFtESUZGX0RFTEVURSwgJ3onXV1dXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGlmZnMgQXJyYXkgb2YgZGlmZiB0dXBsZXNcbiAqIEBwYXJhbSB7SW50fSBjdXJzb3JfcG9zIFN1Z2dlc3RlZCBlZGl0IHBvc2l0aW9uLiBNdXN0IG5vdCBiZSBvdXQgb2YgYm91bmRzIVxuICogQHJldHVybiB7QXJyYXl9IEEgdHVwbGUgW2N1cnNvciBsb2NhdGlvbiBpbiB0aGUgbW9kaWZpZWQgZGlmZiwgbW9kaWZpZWQgZGlmZl1cbiAqL1xuZnVuY3Rpb24gY3Vyc29yX25vcm1hbGl6ZV9kaWZmIChkaWZmcywgY3Vyc29yX3Bvcykge1xuICBpZiAoY3Vyc29yX3BvcyA9PT0gMCkge1xuICAgIHJldHVybiBbRElGRl9FUVVBTCwgZGlmZnNdO1xuICB9XG4gIGZvciAodmFyIGN1cnJlbnRfcG9zID0gMCwgaSA9IDA7IGkgPCBkaWZmcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkID0gZGlmZnNbaV07XG4gICAgaWYgKGRbMF0gPT09IERJRkZfREVMRVRFIHx8IGRbMF0gPT09IERJRkZfRVFVQUwpIHtcbiAgICAgIHZhciBuZXh0X3BvcyA9IGN1cnJlbnRfcG9zICsgZFsxXS5sZW5ndGg7XG4gICAgICBpZiAoY3Vyc29yX3BvcyA9PT0gbmV4dF9wb3MpIHtcbiAgICAgICAgcmV0dXJuIFtpICsgMSwgZGlmZnNdO1xuICAgICAgfSBlbHNlIGlmIChjdXJzb3JfcG9zIDwgbmV4dF9wb3MpIHtcbiAgICAgICAgLy8gY29weSB0byBwcmV2ZW50IHNpZGUgZWZmZWN0c1xuICAgICAgICBkaWZmcyA9IGRpZmZzLnNsaWNlKCk7XG4gICAgICAgIC8vIHNwbGl0IGQgaW50byB0d28gZGlmZiBjaGFuZ2VzXG4gICAgICAgIHZhciBzcGxpdF9wb3MgPSBjdXJzb3JfcG9zIC0gY3VycmVudF9wb3M7XG4gICAgICAgIHZhciBkX2xlZnQgPSBbZFswXSwgZFsxXS5zbGljZSgwLCBzcGxpdF9wb3MpXTtcbiAgICAgICAgdmFyIGRfcmlnaHQgPSBbZFswXSwgZFsxXS5zbGljZShzcGxpdF9wb3MpXTtcbiAgICAgICAgZGlmZnMuc3BsaWNlKGksIDEsIGRfbGVmdCwgZF9yaWdodCk7XG4gICAgICAgIHJldHVybiBbaSArIDEsIGRpZmZzXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRfcG9zID0gbmV4dF9wb3M7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBFcnJvcignY3Vyc29yX3BvcyBpcyBvdXQgb2YgYm91bmRzIScpXG59XG5cbi8qXG4gKiBNb2RpZnkgYSBkaWZmIHN1Y2ggdGhhdCB0aGUgZWRpdCBwb3NpdGlvbiBpcyBcInNoaWZ0ZWRcIiB0byB0aGUgcHJvcG9zZWQgZWRpdCBsb2NhdGlvbiAoY3Vyc29yX3Bvc2l0aW9uKS5cbiAqXG4gKiBDYXNlIDEpXG4gKiAgIENoZWNrIGlmIGEgbmFpdmUgc2hpZnQgaXMgcG9zc2libGU6XG4gKiAgICAgWzAsIFhdLCBbIDEsIFldIC0+IFsgMSwgWV0sIFswLCBYXSAgICAoaWYgWCArIFkgPT09IFkgKyBYKVxuICogICAgIFswLCBYXSwgWy0xLCBZXSAtPiBbLTEsIFldLCBbMCwgWF0gICAgKGlmIFggKyBZID09PSBZICsgWCkgLSBob2xkcyBzYW1lIHJlc3VsdFxuICogQ2FzZSAyKVxuICogICBDaGVjayBpZiB0aGUgZm9sbG93aW5nIHNoaWZ0cyBhcmUgcG9zc2libGU6XG4gKiAgICAgWzAsICdwcmUnXSwgWyAxLCAncHJlZml4J10gLT4gWyAxLCAncHJlJ10sIFswLCAncHJlJ10sIFsgMSwgJ2ZpeCddXG4gKiAgICAgWzAsICdwcmUnXSwgWy0xLCAncHJlZml4J10gLT4gWy0xLCAncHJlJ10sIFswLCAncHJlJ10sIFstMSwgJ2ZpeCddXG4gKiAgICAgICAgIF4gICAgICAgICAgICBeXG4gKiAgICAgICAgIGQgICAgICAgICAgZF9uZXh0XG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGlmZnMgQXJyYXkgb2YgZGlmZiB0dXBsZXNcbiAqIEBwYXJhbSB7SW50fSBjdXJzb3JfcG9zIFN1Z2dlc3RlZCBlZGl0IHBvc2l0aW9uLiBNdXN0IG5vdCBiZSBvdXQgb2YgYm91bmRzIVxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzXG4gKi9cbmZ1bmN0aW9uIGZpeF9jdXJzb3IgKGRpZmZzLCBjdXJzb3JfcG9zKSB7XG4gIHZhciBub3JtID0gY3Vyc29yX25vcm1hbGl6ZV9kaWZmKGRpZmZzLCBjdXJzb3JfcG9zKTtcbiAgdmFyIG5kaWZmcyA9IG5vcm1bMV07XG4gIHZhciBjdXJzb3JfcG9pbnRlciA9IG5vcm1bMF07XG4gIHZhciBkID0gbmRpZmZzW2N1cnNvcl9wb2ludGVyXTtcbiAgdmFyIGRfbmV4dCA9IG5kaWZmc1tjdXJzb3JfcG9pbnRlciArIDFdO1xuXG4gIGlmIChkID09IG51bGwpIHtcbiAgICAvLyBUZXh0IHdhcyBkZWxldGVkIGZyb20gZW5kIG9mIG9yaWdpbmFsIHN0cmluZyxcbiAgICAvLyBjdXJzb3IgaXMgbm93IG91dCBvZiBib3VuZHMgaW4gbmV3IHN0cmluZ1xuICAgIHJldHVybiBkaWZmcztcbiAgfSBlbHNlIGlmIChkWzBdICE9PSBESUZGX0VRVUFMKSB7XG4gICAgLy8gQSBtb2RpZmljYXRpb24gaGFwcGVuZWQgYXQgdGhlIGN1cnNvciBsb2NhdGlvbi5cbiAgICAvLyBUaGlzIGlzIHRoZSBleHBlY3RlZCBvdXRjb21lLCBzbyB3ZSBjYW4gcmV0dXJuIHRoZSBvcmlnaW5hbCBkaWZmLlxuICAgIHJldHVybiBkaWZmcztcbiAgfSBlbHNlIHtcbiAgICBpZiAoZF9uZXh0ICE9IG51bGwgJiYgZFsxXSArIGRfbmV4dFsxXSA9PT0gZF9uZXh0WzFdICsgZFsxXSkge1xuICAgICAgLy8gQ2FzZSAxKVxuICAgICAgLy8gSXQgaXMgcG9zc2libGUgdG8gcGVyZm9ybSBhIG5haXZlIHNoaWZ0XG4gICAgICBuZGlmZnMuc3BsaWNlKGN1cnNvcl9wb2ludGVyLCAyLCBkX25leHQsIGQpXG4gICAgICByZXR1cm4gbWVyZ2VfdHVwbGVzKG5kaWZmcywgY3Vyc29yX3BvaW50ZXIsIDIpXG4gICAgfSBlbHNlIGlmIChkX25leHQgIT0gbnVsbCAmJiBkX25leHRbMV0uaW5kZXhPZihkWzFdKSA9PT0gMCkge1xuICAgICAgLy8gQ2FzZSAyKVxuICAgICAgLy8gZFsxXSBpcyBhIHByZWZpeCBvZiBkX25leHRbMV1cbiAgICAgIC8vIFdlIGNhbiBhc3N1bWUgdGhhdCBkX25leHRbMF0gIT09IDAsIHNpbmNlIGRbMF0gPT09IDBcbiAgICAgIC8vIFNoaWZ0IGVkaXQgbG9jYXRpb25zLi5cbiAgICAgIG5kaWZmcy5zcGxpY2UoY3Vyc29yX3BvaW50ZXIsIDIsIFtkX25leHRbMF0sIGRbMV1dLCBbMCwgZFsxXV0pO1xuICAgICAgdmFyIHN1ZmZpeCA9IGRfbmV4dFsxXS5zbGljZShkWzFdLmxlbmd0aCk7XG4gICAgICBpZiAoc3VmZml4Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgbmRpZmZzLnNwbGljZShjdXJzb3JfcG9pbnRlciArIDIsIDAsIFtkX25leHRbMF0sIHN1ZmZpeF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lcmdlX3R1cGxlcyhuZGlmZnMsIGN1cnNvcl9wb2ludGVyLCAzKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOb3QgcG9zc2libGUgdG8gcGVyZm9ybSBhbnkgbW9kaWZpY2F0aW9uXG4gICAgICByZXR1cm4gZGlmZnM7XG4gICAgfVxuICB9XG59XG5cbi8qXG4gKiBDaGVjayBkaWZmIGRpZCBub3Qgc3BsaXQgc3Vycm9nYXRlIHBhaXJzLlxuICogRXguIFswLCAnXFx1RDgzRCddLCBbLTEsICdcXHVEQzM2J10sIFsxLCAnXFx1REMyRiddIC0+IFstMSwgJ1xcdUQ4M0RcXHVEQzM2J10sIFsxLCAnXFx1RDgzRFxcdURDMkYnXVxuICogICAgICdcXHVEODNEXFx1REMzNicgPT09ICfwn5C2JywgJ1xcdUQ4M0RcXHVEQzJGJyA9PT0gJ/CfkK8nXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGlmZnMgQXJyYXkgb2YgZGlmZiB0dXBsZXNcbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBkaWZmIHR1cGxlc1xuICovXG5mdW5jdGlvbiBmaXhfZW1vamkgKGRpZmZzKSB7XG4gIHZhciBjb21wYWN0ID0gZmFsc2U7XG4gIHZhciBzdGFydHNfd2l0aF9wYWlyX2VuZCA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckNvZGVBdCgwKSA+PSAweERDMDAgJiYgc3RyLmNoYXJDb2RlQXQoMCkgPD0gMHhERkZGO1xuICB9XG4gIHZhciBlbmRzX3dpdGhfcGFpcl9zdGFydCA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckNvZGVBdChzdHIubGVuZ3RoLTEpID49IDB4RDgwMCAmJiBzdHIuY2hhckNvZGVBdChzdHIubGVuZ3RoLTEpIDw9IDB4REJGRjtcbiAgfVxuICBmb3IgKHZhciBpID0gMjsgaSA8IGRpZmZzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGRpZmZzW2ktMl1bMF0gPT09IERJRkZfRVFVQUwgJiYgZW5kc193aXRoX3BhaXJfc3RhcnQoZGlmZnNbaS0yXVsxXSkgJiZcbiAgICAgICAgZGlmZnNbaS0xXVswXSA9PT0gRElGRl9ERUxFVEUgJiYgc3RhcnRzX3dpdGhfcGFpcl9lbmQoZGlmZnNbaS0xXVsxXSkgJiZcbiAgICAgICAgZGlmZnNbaV1bMF0gPT09IERJRkZfSU5TRVJUICYmIHN0YXJ0c193aXRoX3BhaXJfZW5kKGRpZmZzW2ldWzFdKSkge1xuICAgICAgY29tcGFjdCA9IHRydWU7XG5cbiAgICAgIGRpZmZzW2ktMV1bMV0gPSBkaWZmc1tpLTJdWzFdLnNsaWNlKC0xKSArIGRpZmZzW2ktMV1bMV07XG4gICAgICBkaWZmc1tpXVsxXSA9IGRpZmZzW2ktMl1bMV0uc2xpY2UoLTEpICsgZGlmZnNbaV1bMV07XG5cbiAgICAgIGRpZmZzW2ktMl1bMV0gPSBkaWZmc1tpLTJdWzFdLnNsaWNlKDAsIC0xKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFjb21wYWN0KSB7XG4gICAgcmV0dXJuIGRpZmZzO1xuICB9XG4gIHZhciBmaXhlZF9kaWZmcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpZmZzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGRpZmZzW2ldWzFdLmxlbmd0aCA+IDApIHtcbiAgICAgIGZpeGVkX2RpZmZzLnB1c2goZGlmZnNbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZml4ZWRfZGlmZnM7XG59XG5cbi8qXG4gKiBUcnkgdG8gbWVyZ2UgdHVwbGVzIHdpdGggdGhlaXIgbmVpZ2JvcnMgaW4gYSBnaXZlbiByYW5nZS5cbiAqIEUuZy4gWzAsICdhJ10sIFswLCAnYiddIC0+IFswLCAnYWInXVxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRpZmZzIEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICogQHBhcmFtIHtJbnR9IHN0YXJ0IFBvc2l0aW9uIG9mIHRoZSBmaXJzdCBlbGVtZW50IHRvIG1lcmdlIChkaWZmc1tzdGFydF0gaXMgYWxzbyBtZXJnZWQgd2l0aCBkaWZmc1tzdGFydCAtIDFdKS5cbiAqIEBwYXJhbSB7SW50fSBsZW5ndGggTnVtYmVyIG9mIGNvbnNlY3V0aXZlIGVsZW1lbnRzIHRvIGNoZWNrLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIG1lcmdlZCBkaWZmIHR1cGxlcy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VfdHVwbGVzIChkaWZmcywgc3RhcnQsIGxlbmd0aCkge1xuICAvLyBDaGVjayBmcm9tIChzdGFydC0xKSB0byAoc3RhcnQrbGVuZ3RoKS5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0ICsgbGVuZ3RoIC0gMTsgaSA+PSAwICYmIGkgPj0gc3RhcnQgLSAxOyBpLS0pIHtcbiAgICBpZiAoaSArIDEgPCBkaWZmcy5sZW5ndGgpIHtcbiAgICAgIHZhciBsZWZ0X2QgPSBkaWZmc1tpXTtcbiAgICAgIHZhciByaWdodF9kID0gZGlmZnNbaSsxXTtcbiAgICAgIGlmIChsZWZ0X2RbMF0gPT09IHJpZ2h0X2RbMV0pIHtcbiAgICAgICAgZGlmZnMuc3BsaWNlKGksIDIsIFtsZWZ0X2RbMF0sIGxlZnRfZFsxXSArIHJpZ2h0X2RbMV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRpZmZzO1xufVxuXG5cbi8qKiovIH0pLFxuLyogNTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nXG4gID8gT2JqZWN0LmtleXMgOiBzaGltO1xuXG5leHBvcnRzLnNoaW0gPSBzaGltO1xuZnVuY3Rpb24gc2hpbSAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIGtleXMucHVzaChrZXkpO1xuICByZXR1cm4ga2V5cztcbn1cblxuXG4vKioqLyB9KSxcbi8qIDUzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbnZhciBzdXBwb3J0c0FyZ3VtZW50c0NsYXNzID0gKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnRzKVxufSkoKSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gc3VwcG9ydHNBcmd1bWVudHNDbGFzcyA/IHN1cHBvcnRlZCA6IHVuc3VwcG9ydGVkO1xuXG5leHBvcnRzLnN1cHBvcnRlZCA9IHN1cHBvcnRlZDtcbmZ1bmN0aW9uIHN1cHBvcnRlZChvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufTtcblxuZXhwb3J0cy51bnN1cHBvcnRlZCA9IHVuc3VwcG9ydGVkO1xuZnVuY3Rpb24gdW5zdXBwb3J0ZWQob2JqZWN0KXtcbiAgcmV0dXJuIG9iamVjdCAmJlxuICAgIHR5cGVvZiBvYmplY3QgPT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2Ygb2JqZWN0Lmxlbmd0aCA9PSAnbnVtYmVyJyAmJlxuICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdjYWxsZWUnKSAmJlxuICAgICFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCAnY2FsbGVlJykgfHxcbiAgICBmYWxzZTtcbn07XG5cblxuLyoqKi8gfSksXG4vKiA1NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICwgcHJlZml4ID0gJ34nO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhIHN0b3JhZ2UgZm9yIG91ciBgRUVgIG9iamVjdHMuXG4gKiBBbiBgRXZlbnRzYCBpbnN0YW5jZSBpcyBhIHBsYWluIG9iamVjdCB3aG9zZSBwcm9wZXJ0aWVzIGFyZSBldmVudCBuYW1lcy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFdmVudHMoKSB7fVxuXG4vL1xuLy8gV2UgdHJ5IHRvIG5vdCBpbmhlcml0IGZyb20gYE9iamVjdC5wcm90b3R5cGVgLiBJbiBzb21lIGVuZ2luZXMgY3JlYXRpbmcgYW5cbi8vIGluc3RhbmNlIGluIHRoaXMgd2F5IGlzIGZhc3RlciB0aGFuIGNhbGxpbmcgYE9iamVjdC5jcmVhdGUobnVsbClgIGRpcmVjdGx5LlxuLy8gSWYgYE9iamVjdC5jcmVhdGUobnVsbClgIGlzIG5vdCBzdXBwb3J0ZWQgd2UgcHJlZml4IHRoZSBldmVudCBuYW1lcyB3aXRoIGFcbi8vIGNoYXJhY3RlciB0byBtYWtlIHN1cmUgdGhhdCB0aGUgYnVpbHQtaW4gb2JqZWN0IHByb3BlcnRpZXMgYXJlIG5vdFxuLy8gb3ZlcnJpZGRlbiBvciB1c2VkIGFzIGFuIGF0dGFjayB2ZWN0b3IuXG4vL1xuaWYgKE9iamVjdC5jcmVhdGUpIHtcbiAgRXZlbnRzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy9cbiAgLy8gVGhpcyBoYWNrIGlzIG5lZWRlZCBiZWNhdXNlIHRoZSBgX19wcm90b19fYCBwcm9wZXJ0eSBpcyBzdGlsbCBpbmhlcml0ZWQgaW5cbiAgLy8gc29tZSBvbGQgYnJvd3NlcnMgbGlrZSBBbmRyb2lkIDQsIGlQaG9uZSA1LjEsIE9wZXJhIDExIGFuZCBTYWZhcmkgNS5cbiAgLy9cbiAgaWYgKCFuZXcgRXZlbnRzKCkuX19wcm90b19fKSBwcmVmaXggPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSBldmVudCBsaXN0ZW5lci5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge01peGVkfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29uY2U9ZmFsc2VdIFNwZWNpZnkgaWYgdGhlIGxpc3RlbmVyIGlzIGEgb25lLXRpbWUgbGlzdGVuZXIuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFRShmbiwgY29udGV4dCwgb25jZSkge1xuICB0aGlzLmZuID0gZm47XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMub25jZSA9IG9uY2UgfHwgZmFsc2U7XG59XG5cbi8qKlxuICogTWluaW1hbCBgRXZlbnRFbWl0dGVyYCBpbnRlcmZhY2UgdGhhdCBpcyBtb2xkZWQgYWdhaW5zdCB0aGUgTm9kZS5qc1xuICogYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYW4gYXJyYXkgbGlzdGluZyB0aGUgZXZlbnRzIGZvciB3aGljaCB0aGUgZW1pdHRlciBoYXMgcmVnaXN0ZXJlZFxuICogbGlzdGVuZXJzLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHZhciBuYW1lcyA9IFtdXG4gICAgLCBldmVudHNcbiAgICAsIG5hbWU7XG5cbiAgaWYgKHRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSByZXR1cm4gbmFtZXM7XG5cbiAgZm9yIChuYW1lIGluIChldmVudHMgPSB0aGlzLl9ldmVudHMpKSB7XG4gICAgaWYgKGhhcy5jYWxsKGV2ZW50cywgbmFtZSkpIG5hbWVzLnB1c2gocHJlZml4ID8gbmFtZS5zbGljZSgxKSA6IG5hbWUpO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICByZXR1cm4gbmFtZXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZXZlbnRzKSk7XG4gIH1cblxuICByZXR1cm4gbmFtZXM7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8U3ltYm9sfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZXhpc3RzIE9ubHkgY2hlY2sgaWYgdGhlcmUgYXJlIGxpc3RlbmVycy5cbiAqIEByZXR1cm5zIHtBcnJheXxCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnMoZXZlbnQsIGV4aXN0cykge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgYXZhaWxhYmxlID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKGV4aXN0cykgcmV0dXJuICEhYXZhaWxhYmxlO1xuICBpZiAoIWF2YWlsYWJsZSkgcmV0dXJuIFtdO1xuICBpZiAoYXZhaWxhYmxlLmZuKSByZXR1cm4gW2F2YWlsYWJsZS5mbl07XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdmFpbGFibGUubGVuZ3RoLCBlZSA9IG5ldyBBcnJheShsKTsgaSA8IGw7IGkrKykge1xuICAgIGVlW2ldID0gYXZhaWxhYmxlW2ldLmZuO1xuICB9XG5cbiAgcmV0dXJuIGVlO1xufTtcblxuLyoqXG4gKiBDYWxscyBlYWNoIG9mIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xTeW1ib2x9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgZXZlbnQgaGFkIGxpc3RlbmVycywgZWxzZSBgZmFsc2VgLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdChldmVudCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiBmYWxzZTtcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF1cbiAgICAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGFyZ3NcbiAgICAsIGk7XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChsaXN0ZW5lcnMub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgc3dpdGNoIChsZW4pIHtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSksIHRydWU7XG4gICAgICBjYXNlIDM6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCksIHRydWU7XG4gICAgICBjYXNlIDY6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQsIGE1KSwgdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZuLmFwcGx5KGxpc3RlbmVycy5jb250ZXh0LCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aFxuICAgICAgLCBqO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGlzdGVuZXJzW2ldLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyc1tpXS5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgICAgc3dpdGNoIChsZW4pIHtcbiAgICAgICAgY2FzZSAxOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIpOyBicmVhaztcbiAgICAgICAgY2FzZSA0OiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyLCBhMyk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmICghYXJncykgZm9yIChqID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaiAtIDFdID0gYXJndW1lbnRzW2pdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbi5hcHBseShsaXN0ZW5lcnNbaV0uY29udGV4dCwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfFN5bWJvbH0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge01peGVkfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCB0aGlzKVxuICAgICwgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSB0aGlzLl9ldmVudHNbZXZ0XSA9IGxpc3RlbmVyLCB0aGlzLl9ldmVudHNDb3VudCsrO1xuICBlbHNlIGlmICghdGhpcy5fZXZlbnRzW2V2dF0uZm4pIHRoaXMuX2V2ZW50c1tldnRdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlIHRoaXMuX2V2ZW50c1tldnRdID0gW3RoaXMuX2V2ZW50c1tldnRdLCBsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFkZCBhIG9uZS10aW1lIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfFN5bWJvbH0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge01peGVkfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgdGhpcywgdHJ1ZSlcbiAgICAsIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgdGhpcy5fZXZlbnRzW2V2dF0gPSBsaXN0ZW5lciwgdGhpcy5fZXZlbnRzQ291bnQrKztcbiAgZWxzZSBpZiAoIXRoaXMuX2V2ZW50c1tldnRdLmZuKSB0aGlzLl9ldmVudHNbZXZ0XS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZSB0aGlzLl9ldmVudHNbZXZ0XSA9IFt0aGlzLl9ldmVudHNbZXZ0XSwgbGlzdGVuZXJdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGxpc3RlbmVycyBvZiBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfFN5bWJvbH0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgbWF0Y2ggdGhpcyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7TWl4ZWR9IGNvbnRleHQgT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IGhhdmUgdGhpcyBjb250ZXh0LlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIE9ubHkgcmVtb3ZlIG9uZS10aW1lIGxpc3RlbmVycy5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIHRoaXM7XG4gIGlmICghZm4pIHtcbiAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgIGVsc2UgZGVsZXRlIHRoaXMuX2V2ZW50c1tldnRdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAoXG4gICAgICAgICBsaXN0ZW5lcnMuZm4gPT09IGZuXG4gICAgICAmJiAoIW9uY2UgfHwgbGlzdGVuZXJzLm9uY2UpXG4gICAgICAmJiAoIWNvbnRleHQgfHwgbGlzdGVuZXJzLmNvbnRleHQgPT09IGNvbnRleHQpXG4gICAgKSB7XG4gICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgICAgZWxzZSBkZWxldGUgdGhpcy5fZXZlbnRzW2V2dF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwLCBldmVudHMgPSBbXSwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoXG4gICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbiAhPT0gZm5cbiAgICAgICAgfHwgKG9uY2UgJiYgIWxpc3RlbmVyc1tpXS5vbmNlKVxuICAgICAgICB8fCAoY29udGV4dCAmJiBsaXN0ZW5lcnNbaV0uY29udGV4dCAhPT0gY29udGV4dClcbiAgICAgICkge1xuICAgICAgICBldmVudHMucHVzaChsaXN0ZW5lcnNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vXG4gICAgLy8gUmVzZXQgdGhlIGFycmF5LCBvciByZW1vdmUgaXQgY29tcGxldGVseSBpZiB3ZSBoYXZlIG5vIG1vcmUgbGlzdGVuZXJzLlxuICAgIC8vXG4gICAgaWYgKGV2ZW50cy5sZW5ndGgpIHRoaXMuX2V2ZW50c1tldnRdID0gZXZlbnRzLmxlbmd0aCA9PT0gMSA/IGV2ZW50c1swXSA6IGV2ZW50cztcbiAgICBlbHNlIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fZXZlbnRzW2V2dF07XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFsbCBsaXN0ZW5lcnMsIG9yIHRob3NlIG9mIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8U3ltYm9sfSBbZXZlbnRdIFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dDtcblxuICBpZiAoZXZlbnQpIHtcbiAgICBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuICAgIGlmICh0aGlzLl9ldmVudHNbZXZ0XSkge1xuICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICAgIGVsc2UgZGVsZXRlIHRoaXMuX2V2ZW50c1tldnRdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gQWxpYXMgbWV0aG9kcyBuYW1lcyBiZWNhdXNlIHBlb3BsZSByb2xsIGxpa2UgdGhhdC5cbi8vXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbjtcblxuLy9cbi8vIFRoaXMgZnVuY3Rpb24gZG9lc24ndCBhcHBseSBhbnltb3JlLlxuLy9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBFeHBvc2UgdGhlIHByZWZpeC5cbi8vXG5FdmVudEVtaXR0ZXIucHJlZml4ZWQgPSBwcmVmaXg7XG5cbi8vXG4vLyBBbGxvdyBgRXZlbnRFbWl0dGVyYCB0byBiZSBpbXBvcnRlZCBhcyBtb2R1bGUgbmFtZXNwYWNlLlxuLy9cbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5pZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBtb2R1bGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG59XG5cblxuLyoqKi8gfSksXG4vKiA1NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5tYXRjaFRleHQgPSBleHBvcnRzLm1hdGNoU3BhY2luZyA9IGV4cG9ydHMubWF0Y2hOZXdsaW5lID0gZXhwb3J0cy5tYXRjaEJsb3QgPSBleHBvcnRzLm1hdGNoQXR0cmlidXRvciA9IGV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZXh0ZW5kMiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfZXh0ZW5kMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZDIpO1xuXG52YXIgX3F1aWxsRGVsdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3F1aWxsRGVsdGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGxEZWx0YSk7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9xdWlsbCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfcXVpbGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGwpO1xuXG52YXIgX2xvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG52YXIgX2xvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dnZXIpO1xuXG52YXIgX21vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfbW9kdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vZHVsZSk7XG5cbnZhciBfYWxpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcblxudmFyIF9iYWNrZ3JvdW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNyk7XG5cbnZhciBfY29kZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXG52YXIgX2NvZGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29kZSk7XG5cbnZhciBfY29sb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KTtcblxudmFyIF9kaXJlY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KTtcblxudmFyIF9mb250ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XG5cbnZhciBfc2l6ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBkZWJ1ZyA9ICgwLCBfbG9nZ2VyMi5kZWZhdWx0KSgncXVpbGw6Y2xpcGJvYXJkJyk7XG5cbnZhciBET01fS0VZID0gJ19fcWwtbWF0Y2hlcic7XG5cbnZhciBDTElQQk9BUkRfQ09ORklHID0gW1tOb2RlLlRFWFRfTk9ERSwgbWF0Y2hUZXh0XSwgW05vZGUuVEVYVF9OT0RFLCBtYXRjaE5ld2xpbmVdLCBbJ2JyJywgbWF0Y2hCcmVha10sIFtOb2RlLkVMRU1FTlRfTk9ERSwgbWF0Y2hOZXdsaW5lXSwgW05vZGUuRUxFTUVOVF9OT0RFLCBtYXRjaEJsb3RdLCBbTm9kZS5FTEVNRU5UX05PREUsIG1hdGNoU3BhY2luZ10sIFtOb2RlLkVMRU1FTlRfTk9ERSwgbWF0Y2hBdHRyaWJ1dG9yXSwgW05vZGUuRUxFTUVOVF9OT0RFLCBtYXRjaFN0eWxlc10sIFsnbGknLCBtYXRjaEluZGVudF0sIFsnYicsIG1hdGNoQWxpYXMuYmluZChtYXRjaEFsaWFzLCAnYm9sZCcpXSwgWydpJywgbWF0Y2hBbGlhcy5iaW5kKG1hdGNoQWxpYXMsICdpdGFsaWMnKV0sIFsnc3R5bGUnLCBtYXRjaElnbm9yZV1dO1xuXG52YXIgQVRUUklCVVRFX0FUVFJJQlVUT1JTID0gW19hbGlnbi5BbGlnbkF0dHJpYnV0ZSwgX2RpcmVjdGlvbi5EaXJlY3Rpb25BdHRyaWJ1dGVdLnJlZHVjZShmdW5jdGlvbiAobWVtbywgYXR0cikge1xuICBtZW1vW2F0dHIua2V5TmFtZV0gPSBhdHRyO1xuICByZXR1cm4gbWVtbztcbn0sIHt9KTtcblxudmFyIFNUWUxFX0FUVFJJQlVUT1JTID0gW19hbGlnbi5BbGlnblN0eWxlLCBfYmFja2dyb3VuZC5CYWNrZ3JvdW5kU3R5bGUsIF9jb2xvci5Db2xvclN0eWxlLCBfZGlyZWN0aW9uLkRpcmVjdGlvblN0eWxlLCBfZm9udC5Gb250U3R5bGUsIF9zaXplLlNpemVTdHlsZV0ucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBhdHRyKSB7XG4gIG1lbW9bYXR0ci5rZXlOYW1lXSA9IGF0dHI7XG4gIHJldHVybiBtZW1vO1xufSwge30pO1xuXG52YXIgQ2xpcGJvYXJkID0gZnVuY3Rpb24gKF9Nb2R1bGUpIHtcbiAgX2luaGVyaXRzKENsaXBib2FyZCwgX01vZHVsZSk7XG5cbiAgZnVuY3Rpb24gQ2xpcGJvYXJkKHF1aWxsLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsaXBib2FyZCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ2xpcGJvYXJkLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ2xpcGJvYXJkKSkuY2FsbCh0aGlzLCBxdWlsbCwgb3B0aW9ucykpO1xuXG4gICAgX3RoaXMucXVpbGwucm9vdC5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIF90aGlzLm9uUGFzdGUuYmluZChfdGhpcykpO1xuICAgIF90aGlzLmNvbnRhaW5lciA9IF90aGlzLnF1aWxsLmFkZENvbnRhaW5lcigncWwtY2xpcGJvYXJkJyk7XG4gICAgX3RoaXMuY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgdHJ1ZSk7XG4gICAgX3RoaXMuY29udGFpbmVyLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAtMSk7XG4gICAgX3RoaXMubWF0Y2hlcnMgPSBbXTtcbiAgICBDTElQQk9BUkRfQ09ORklHLmNvbmNhdChfdGhpcy5vcHRpb25zLm1hdGNoZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgICBzZWxlY3RvciA9IF9yZWYyWzBdLFxuICAgICAgICAgIG1hdGNoZXIgPSBfcmVmMlsxXTtcblxuICAgICAgaWYgKCFvcHRpb25zLm1hdGNoVmlzdWFsICYmIG1hdGNoZXIgPT09IG1hdGNoU3BhY2luZykgcmV0dXJuO1xuICAgICAgX3RoaXMuYWRkTWF0Y2hlcihzZWxlY3RvciwgbWF0Y2hlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENsaXBib2FyZCwgW3tcbiAgICBrZXk6ICdhZGRNYXRjaGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTWF0Y2hlcihzZWxlY3RvciwgbWF0Y2hlcikge1xuICAgICAgdGhpcy5tYXRjaGVycy5wdXNoKFtzZWxlY3RvciwgbWF0Y2hlcl0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbnZlcnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb252ZXJ0KGh0bWwpIHtcbiAgICAgIGlmICh0eXBlb2YgaHRtbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MID0gaHRtbC5yZXBsYWNlKC9cXD5cXHI/XFxuICtcXDwvZywgJz48Jyk7IC8vIFJlbW92ZSBzcGFjZXMgYmV0d2VlbiB0YWdzXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnQoKTtcbiAgICAgIH1cbiAgICAgIHZhciBmb3JtYXRzID0gdGhpcy5xdWlsbC5nZXRGb3JtYXQodGhpcy5xdWlsbC5zZWxlY3Rpb24uc2F2ZWRSYW5nZS5pbmRleCk7XG4gICAgICBpZiAoZm9ybWF0c1tfY29kZTIuZGVmYXVsdC5ibG90TmFtZV0pIHtcbiAgICAgICAgdmFyIHRleHQgPSB0aGlzLmNvbnRhaW5lci5pbm5lclRleHQ7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgICAgICByZXR1cm4gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkuaW5zZXJ0KHRleHQsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgX2NvZGUyLmRlZmF1bHQuYmxvdE5hbWUsIGZvcm1hdHNbX2NvZGUyLmRlZmF1bHQuYmxvdE5hbWVdKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJlcGFyZU1hdGNoaW5nID0gdGhpcy5wcmVwYXJlTWF0Y2hpbmcoKSxcbiAgICAgICAgICBfcHJlcGFyZU1hdGNoaW5nMiA9IF9zbGljZWRUb0FycmF5KF9wcmVwYXJlTWF0Y2hpbmcsIDIpLFxuICAgICAgICAgIGVsZW1lbnRNYXRjaGVycyA9IF9wcmVwYXJlTWF0Y2hpbmcyWzBdLFxuICAgICAgICAgIHRleHRNYXRjaGVycyA9IF9wcmVwYXJlTWF0Y2hpbmcyWzFdO1xuXG4gICAgICB2YXIgZGVsdGEgPSB0cmF2ZXJzZSh0aGlzLmNvbnRhaW5lciwgZWxlbWVudE1hdGNoZXJzLCB0ZXh0TWF0Y2hlcnMpO1xuICAgICAgLy8gUmVtb3ZlIHRyYWlsaW5nIG5ld2xpbmVcbiAgICAgIGlmIChkZWx0YUVuZHNXaXRoKGRlbHRhLCAnXFxuJykgJiYgZGVsdGEub3BzW2RlbHRhLm9wcy5sZW5ndGggLSAxXS5hdHRyaWJ1dGVzID09IG51bGwpIHtcbiAgICAgICAgZGVsdGEgPSBkZWx0YS5jb21wb3NlKG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihkZWx0YS5sZW5ndGgoKSAtIDEpLmRlbGV0ZSgxKSk7XG4gICAgICB9XG4gICAgICBkZWJ1Zy5sb2coJ2NvbnZlcnQnLCB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwsIGRlbHRhKTtcbiAgICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgICAgcmV0dXJuIGRlbHRhO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rhbmdlcm91c2x5UGFzdGVIVE1MJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGFuZ2Vyb3VzbHlQYXN0ZUhUTUwoaW5kZXgsIGh0bWwpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLkFQSTtcblxuICAgICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5xdWlsbC5zZXRDb250ZW50cyh0aGlzLmNvbnZlcnQoaW5kZXgpLCBodG1sKTtcbiAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24oMCwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwYXN0ZSA9IHRoaXMuY29udmVydChodG1sKTtcbiAgICAgICAgdGhpcy5xdWlsbC51cGRhdGVDb250ZW50cyhuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5yZXRhaW4oaW5kZXgpLmNvbmNhdChwYXN0ZSksIHNvdXJjZSk7XG4gICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKGluZGV4ICsgcGFzdGUubGVuZ3RoKCksIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb25QYXN0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uUGFzdGUoZSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQgfHwgIXRoaXMucXVpbGwuaXNFbmFibGVkKCkpIHJldHVybjtcbiAgICAgIHZhciByYW5nZSA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICB2YXIgZGVsdGEgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5yZXRhaW4ocmFuZ2UuaW5kZXgpO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMucXVpbGwuc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcDtcbiAgICAgIHRoaXMuY29udGFpbmVyLmZvY3VzKCk7XG4gICAgICB0aGlzLnF1aWxsLnNlbGVjdGlvbi51cGRhdGUoX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWx0YSA9IGRlbHRhLmNvbmNhdChfdGhpczIuY29udmVydCgpKS5kZWxldGUocmFuZ2UubGVuZ3RoKTtcbiAgICAgICAgX3RoaXMyLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKGRlbHRhLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgLy8gcmFuZ2UubGVuZ3RoIGNvbnRyaWJ1dGVzIHRvIGRlbHRhLmxlbmd0aCgpXG4gICAgICAgIF90aGlzMi5xdWlsbC5zZXRTZWxlY3Rpb24oZGVsdGEubGVuZ3RoKCkgLSByYW5nZS5sZW5ndGgsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICAgIF90aGlzMi5xdWlsbC5zY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgICBfdGhpczIucXVpbGwuZm9jdXMoKTtcbiAgICAgIH0sIDEpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3ByZXBhcmVNYXRjaGluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmVNYXRjaGluZygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgZWxlbWVudE1hdGNoZXJzID0gW10sXG4gICAgICAgICAgdGV4dE1hdGNoZXJzID0gW107XG4gICAgICB0aGlzLm1hdGNoZXJzLmZvckVhY2goZnVuY3Rpb24gKHBhaXIpIHtcbiAgICAgICAgdmFyIF9wYWlyID0gX3NsaWNlZFRvQXJyYXkocGFpciwgMiksXG4gICAgICAgICAgICBzZWxlY3RvciA9IF9wYWlyWzBdLFxuICAgICAgICAgICAgbWF0Y2hlciA9IF9wYWlyWzFdO1xuXG4gICAgICAgIHN3aXRjaCAoc2VsZWN0b3IpIHtcbiAgICAgICAgICBjYXNlIE5vZGUuVEVYVF9OT0RFOlxuICAgICAgICAgICAgdGV4dE1hdGNoZXJzLnB1c2gobWF0Y2hlcik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIE5vZGUuRUxFTUVOVF9OT0RFOlxuICAgICAgICAgICAgZWxlbWVudE1hdGNoZXJzLnB1c2gobWF0Y2hlcik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKF90aGlzMy5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvciksIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgIC8vIFRPRE8gdXNlIHdlYWttYXBcbiAgICAgICAgICAgICAgbm9kZVtET01fS0VZXSA9IG5vZGVbRE9NX0tFWV0gfHwgW107XG4gICAgICAgICAgICAgIG5vZGVbRE9NX0tFWV0ucHVzaChtYXRjaGVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFtlbGVtZW50TWF0Y2hlcnMsIHRleHRNYXRjaGVyc107XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENsaXBib2FyZDtcbn0oX21vZHVsZTIuZGVmYXVsdCk7XG5cbkNsaXBib2FyZC5ERUZBVUxUUyA9IHtcbiAgbWF0Y2hlcnM6IFtdLFxuICBtYXRjaFZpc3VhbDogdHJ1ZVxufTtcblxuZnVuY3Rpb24gYXBwbHlGb3JtYXQoZGVsdGEsIGZvcm1hdCwgdmFsdWUpIHtcbiAgaWYgKCh0eXBlb2YgZm9ybWF0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihmb3JtYXQpKSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZm9ybWF0KS5yZWR1Y2UoZnVuY3Rpb24gKGRlbHRhLCBrZXkpIHtcbiAgICAgIHJldHVybiBhcHBseUZvcm1hdChkZWx0YSwga2V5LCBmb3JtYXRba2V5XSk7XG4gICAgfSwgZGVsdGEpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBkZWx0YS5yZWR1Y2UoZnVuY3Rpb24gKGRlbHRhLCBvcCkge1xuICAgICAgaWYgKG9wLmF0dHJpYnV0ZXMgJiYgb3AuYXR0cmlidXRlc1tmb3JtYXRdKSB7XG4gICAgICAgIHJldHVybiBkZWx0YS5wdXNoKG9wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWx0YS5pbnNlcnQob3AuaW5zZXJ0LCAoMCwgX2V4dGVuZDMuZGVmYXVsdCkoe30sIF9kZWZpbmVQcm9wZXJ0eSh7fSwgZm9ybWF0LCB2YWx1ZSksIG9wLmF0dHJpYnV0ZXMpKTtcbiAgICAgIH1cbiAgICB9LCBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcHV0ZVN0eWxlKG5vZGUpIHtcbiAgaWYgKG5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSByZXR1cm4ge307XG4gIHZhciBET01fS0VZID0gJ19fcWwtY29tcHV0ZWQtc3R5bGUnO1xuICByZXR1cm4gbm9kZVtET01fS0VZXSB8fCAobm9kZVtET01fS0VZXSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpKTtcbn1cblxuZnVuY3Rpb24gZGVsdGFFbmRzV2l0aChkZWx0YSwgdGV4dCkge1xuICB2YXIgZW5kVGV4dCA9IFwiXCI7XG4gIGZvciAodmFyIGkgPSBkZWx0YS5vcHMubGVuZ3RoIC0gMTsgaSA+PSAwICYmIGVuZFRleHQubGVuZ3RoIDwgdGV4dC5sZW5ndGg7IC0taSkge1xuICAgIHZhciBvcCA9IGRlbHRhLm9wc1tpXTtcbiAgICBpZiAodHlwZW9mIG9wLmluc2VydCAhPT0gJ3N0cmluZycpIGJyZWFrO1xuICAgIGVuZFRleHQgPSBvcC5pbnNlcnQgKyBlbmRUZXh0O1xuICB9XG4gIHJldHVybiBlbmRUZXh0LnNsaWNlKC0xICogdGV4dC5sZW5ndGgpID09PSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBpc0xpbmUobm9kZSkge1xuICBpZiAobm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZhbHNlOyAvLyBFeGNsdWRlIGVtYmVkIGJsb2Nrc1xuICB2YXIgc3R5bGUgPSBjb21wdXRlU3R5bGUobm9kZSk7XG4gIHJldHVybiBbJ2Jsb2NrJywgJ2xpc3QtaXRlbSddLmluZGV4T2Yoc3R5bGUuZGlzcGxheSkgPiAtMTtcbn1cblxuZnVuY3Rpb24gdHJhdmVyc2Uobm9kZSwgZWxlbWVudE1hdGNoZXJzLCB0ZXh0TWF0Y2hlcnMpIHtcbiAgLy8gUG9zdC1vcmRlclxuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gbm9kZS5URVhUX05PREUpIHtcbiAgICByZXR1cm4gdGV4dE1hdGNoZXJzLnJlZHVjZShmdW5jdGlvbiAoZGVsdGEsIG1hdGNoZXIpIHtcbiAgICAgIHJldHVybiBtYXRjaGVyKG5vZGUsIGRlbHRhKTtcbiAgICB9LCBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKSk7XG4gIH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gbm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICByZXR1cm4gW10ucmVkdWNlLmNhbGwobm9kZS5jaGlsZE5vZGVzIHx8IFtdLCBmdW5jdGlvbiAoZGVsdGEsIGNoaWxkTm9kZSkge1xuICAgICAgdmFyIGNoaWxkcmVuRGVsdGEgPSB0cmF2ZXJzZShjaGlsZE5vZGUsIGVsZW1lbnRNYXRjaGVycywgdGV4dE1hdGNoZXJzKTtcbiAgICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT09IG5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIGNoaWxkcmVuRGVsdGEgPSBlbGVtZW50TWF0Y2hlcnMucmVkdWNlKGZ1bmN0aW9uIChjaGlsZHJlbkRlbHRhLCBtYXRjaGVyKSB7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoZXIoY2hpbGROb2RlLCBjaGlsZHJlbkRlbHRhKTtcbiAgICAgICAgfSwgY2hpbGRyZW5EZWx0YSk7XG4gICAgICAgIGNoaWxkcmVuRGVsdGEgPSAoY2hpbGROb2RlW0RPTV9LRVldIHx8IFtdKS5yZWR1Y2UoZnVuY3Rpb24gKGNoaWxkcmVuRGVsdGEsIG1hdGNoZXIpIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2hlcihjaGlsZE5vZGUsIGNoaWxkcmVuRGVsdGEpO1xuICAgICAgICB9LCBjaGlsZHJlbkRlbHRhKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWx0YS5jb25jYXQoY2hpbGRyZW5EZWx0YSk7XG4gICAgfSwgbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXRjaEFsaWFzKGZvcm1hdCwgbm9kZSwgZGVsdGEpIHtcbiAgcmV0dXJuIGFwcGx5Rm9ybWF0KGRlbHRhLCBmb3JtYXQsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBtYXRjaEF0dHJpYnV0b3Iobm9kZSwgZGVsdGEpIHtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuQXR0cmlidXRlLmtleXMobm9kZSk7XG4gIHZhciBjbGFzc2VzID0gX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLkNsYXNzLmtleXMobm9kZSk7XG4gIHZhciBzdHlsZXMgPSBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuU3R5bGUua2V5cyhub2RlKTtcbiAgdmFyIGZvcm1hdHMgPSB7fTtcbiAgYXR0cmlidXRlcy5jb25jYXQoY2xhc3NlcykuY29uY2F0KHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBhdHRyID0gX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeShuYW1lLCBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLkFUVFJJQlVURSk7XG4gICAgaWYgKGF0dHIgIT0gbnVsbCkge1xuICAgICAgZm9ybWF0c1thdHRyLmF0dHJOYW1lXSA9IGF0dHIudmFsdWUobm9kZSk7XG4gICAgICBpZiAoZm9ybWF0c1thdHRyLmF0dHJOYW1lXSkgcmV0dXJuO1xuICAgIH1cbiAgICBhdHRyID0gQVRUUklCVVRFX0FUVFJJQlVUT1JTW25hbWVdO1xuICAgIGlmIChhdHRyICE9IG51bGwgJiYgKGF0dHIuYXR0ck5hbWUgPT09IG5hbWUgfHwgYXR0ci5rZXlOYW1lID09PSBuYW1lKSkge1xuICAgICAgZm9ybWF0c1thdHRyLmF0dHJOYW1lXSA9IGF0dHIudmFsdWUobm9kZSkgfHwgdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhdHRyID0gU1RZTEVfQVRUUklCVVRPUlNbbmFtZV07XG4gICAgaWYgKGF0dHIgIT0gbnVsbCAmJiAoYXR0ci5hdHRyTmFtZSA9PT0gbmFtZSB8fCBhdHRyLmtleU5hbWUgPT09IG5hbWUpKSB7XG4gICAgICBhdHRyID0gU1RZTEVfQVRUUklCVVRPUlNbbmFtZV07XG4gICAgICBmb3JtYXRzW2F0dHIuYXR0ck5hbWVdID0gYXR0ci52YWx1ZShub2RlKSB8fCB1bmRlZmluZWQ7XG4gICAgfVxuICB9KTtcbiAgaWYgKE9iamVjdC5rZXlzKGZvcm1hdHMpLmxlbmd0aCA+IDApIHtcbiAgICBkZWx0YSA9IGFwcGx5Rm9ybWF0KGRlbHRhLCBmb3JtYXRzKTtcbiAgfVxuICByZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIG1hdGNoQmxvdChub2RlLCBkZWx0YSkge1xuICB2YXIgbWF0Y2ggPSBfcGFyY2htZW50Mi5kZWZhdWx0LnF1ZXJ5KG5vZGUpO1xuICBpZiAobWF0Y2ggPT0gbnVsbCkgcmV0dXJuIGRlbHRhO1xuICBpZiAobWF0Y2gucHJvdG90eXBlIGluc3RhbmNlb2YgX3BhcmNobWVudDIuZGVmYXVsdC5FbWJlZCkge1xuICAgIHZhciBlbWJlZCA9IHt9O1xuICAgIHZhciB2YWx1ZSA9IG1hdGNoLnZhbHVlKG5vZGUpO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICBlbWJlZFttYXRjaC5ibG90TmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbHRhID0gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkuaW5zZXJ0KGVtYmVkLCBtYXRjaC5mb3JtYXRzKG5vZGUpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIG1hdGNoLmZvcm1hdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBkZWx0YSA9IGFwcGx5Rm9ybWF0KGRlbHRhLCBtYXRjaC5ibG90TmFtZSwgbWF0Y2guZm9ybWF0cyhub2RlKSk7XG4gIH1cbiAgcmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBtYXRjaEJyZWFrKG5vZGUsIGRlbHRhKSB7XG4gIGlmICghZGVsdGFFbmRzV2l0aChkZWx0YSwgJ1xcbicpKSB7XG4gICAgZGVsdGEuaW5zZXJ0KCdcXG4nKTtcbiAgfVxuICByZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIG1hdGNoSWdub3JlKCkge1xuICByZXR1cm4gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoSW5kZW50KG5vZGUsIGRlbHRhKSB7XG4gIHZhciBtYXRjaCA9IF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkobm9kZSk7XG4gIGlmIChtYXRjaCA9PSBudWxsIHx8IG1hdGNoLmJsb3ROYW1lICE9PSAnbGlzdC1pdGVtJyB8fCAhZGVsdGFFbmRzV2l0aChkZWx0YSwgJ1xcbicpKSB7XG4gICAgcmV0dXJuIGRlbHRhO1xuICB9XG4gIHZhciBpbmRlbnQgPSAtMSxcbiAgICAgIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgd2hpbGUgKCFwYXJlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1jbGlwYm9hcmQnKSkge1xuICAgIGlmICgoX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeShwYXJlbnQpIHx8IHt9KS5ibG90TmFtZSA9PT0gJ2xpc3QnKSB7XG4gICAgICBpbmRlbnQgKz0gMTtcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG4gIH1cbiAgaWYgKGluZGVudCA8PSAwKSByZXR1cm4gZGVsdGE7XG4gIHJldHVybiBkZWx0YS5jb21wb3NlKG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihkZWx0YS5sZW5ndGgoKSAtIDEpLnJldGFpbigxLCB7IGluZGVudDogaW5kZW50IH0pKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hOZXdsaW5lKG5vZGUsIGRlbHRhKSB7XG4gIGlmICghZGVsdGFFbmRzV2l0aChkZWx0YSwgJ1xcbicpKSB7XG4gICAgaWYgKGlzTGluZShub2RlKSB8fCBkZWx0YS5sZW5ndGgoKSA+IDAgJiYgbm9kZS5uZXh0U2libGluZyAmJiBpc0xpbmUobm9kZS5uZXh0U2libGluZykpIHtcbiAgICAgIGRlbHRhLmluc2VydCgnXFxuJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hTcGFjaW5nKG5vZGUsIGRlbHRhKSB7XG4gIGlmIChpc0xpbmUobm9kZSkgJiYgbm9kZS5uZXh0RWxlbWVudFNpYmxpbmcgIT0gbnVsbCAmJiAhZGVsdGFFbmRzV2l0aChkZWx0YSwgJ1xcblxcbicpKSB7XG4gICAgdmFyIG5vZGVIZWlnaHQgPSBub2RlLm9mZnNldEhlaWdodCArIHBhcnNlRmxvYXQoY29tcHV0ZVN0eWxlKG5vZGUpLm1hcmdpblRvcCkgKyBwYXJzZUZsb2F0KGNvbXB1dGVTdHlsZShub2RlKS5tYXJnaW5Cb3R0b20pO1xuICAgIGlmIChub2RlLm5leHRFbGVtZW50U2libGluZy5vZmZzZXRUb3AgPiBub2RlLm9mZnNldFRvcCArIG5vZGVIZWlnaHQgKiAxLjUpIHtcbiAgICAgIGRlbHRhLmluc2VydCgnXFxuJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hTdHlsZXMobm9kZSwgZGVsdGEpIHtcbiAgdmFyIGZvcm1hdHMgPSB7fTtcbiAgdmFyIHN0eWxlID0gbm9kZS5zdHlsZSB8fCB7fTtcbiAgaWYgKHN0eWxlLmZvbnRTdHlsZSAmJiBjb21wdXRlU3R5bGUobm9kZSkuZm9udFN0eWxlID09PSAnaXRhbGljJykge1xuICAgIGZvcm1hdHMuaXRhbGljID0gdHJ1ZTtcbiAgfVxuICBpZiAoc3R5bGUuZm9udFdlaWdodCAmJiAoY29tcHV0ZVN0eWxlKG5vZGUpLmZvbnRXZWlnaHQuc3RhcnRzV2l0aCgnYm9sZCcpIHx8IHBhcnNlSW50KGNvbXB1dGVTdHlsZShub2RlKS5mb250V2VpZ2h0KSA+PSA3MDApKSB7XG4gICAgZm9ybWF0cy5ib2xkID0gdHJ1ZTtcbiAgfVxuICBpZiAoT2JqZWN0LmtleXMoZm9ybWF0cykubGVuZ3RoID4gMCkge1xuICAgIGRlbHRhID0gYXBwbHlGb3JtYXQoZGVsdGEsIGZvcm1hdHMpO1xuICB9XG4gIGlmIChwYXJzZUZsb2F0KHN0eWxlLnRleHRJbmRlbnQgfHwgMCkgPiAwKSB7XG4gICAgLy8gQ291bGQgYmUgMC41aW5cbiAgICBkZWx0YSA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLmluc2VydCgnXFx0JykuY29uY2F0KGRlbHRhKTtcbiAgfVxuICByZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIG1hdGNoVGV4dChub2RlLCBkZWx0YSkge1xuICB2YXIgdGV4dCA9IG5vZGUuZGF0YTtcbiAgLy8gV29yZCByZXByZXNlbnRzIGVtcHR5IGxpbmUgd2l0aCA8bzpwPiZuYnNwOzwvbzpwPlxuICBpZiAobm9kZS5wYXJlbnROb2RlLnRhZ05hbWUgPT09ICdPOlAnKSB7XG4gICAgcmV0dXJuIGRlbHRhLmluc2VydCh0ZXh0LnRyaW0oKSk7XG4gIH1cbiAgaWYgKHRleHQudHJpbSgpLmxlbmd0aCA9PT0gMCAmJiBub2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1jbGlwYm9hcmQnKSkge1xuICAgIHJldHVybiBkZWx0YTtcbiAgfVxuICBpZiAoIWNvbXB1dGVTdHlsZShub2RlLnBhcmVudE5vZGUpLndoaXRlU3BhY2Uuc3RhcnRzV2l0aCgncHJlJykpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1zdHlsZVxuICAgIHZhciByZXBsYWNlciA9IGZ1bmN0aW9uIHJlcGxhY2VyKGNvbGxhcHNlLCBtYXRjaCkge1xuICAgICAgbWF0Y2ggPSBtYXRjaC5yZXBsYWNlKC9bXlxcdTAwYTBdL2csICcnKTsgLy8gXFx1MDBhMCBpcyBuYnNwO1xuICAgICAgcmV0dXJuIG1hdGNoLmxlbmd0aCA8IDEgJiYgY29sbGFwc2UgPyAnICcgOiBtYXRjaDtcbiAgICB9O1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcclxcbi9nLCAnICcpLnJlcGxhY2UoL1xcbi9nLCAnICcpO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcc1xccysvZywgcmVwbGFjZXIuYmluZChyZXBsYWNlciwgdHJ1ZSkpOyAvLyBjb2xsYXBzZSB3aGl0ZXNwYWNlXG4gICAgaWYgKG5vZGUucHJldmlvdXNTaWJsaW5nID09IG51bGwgJiYgaXNMaW5lKG5vZGUucGFyZW50Tm9kZSkgfHwgbm9kZS5wcmV2aW91c1NpYmxpbmcgIT0gbnVsbCAmJiBpc0xpbmUobm9kZS5wcmV2aW91c1NpYmxpbmcpKSB7XG4gICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eXFxzKy8sIHJlcGxhY2VyLmJpbmQocmVwbGFjZXIsIGZhbHNlKSk7XG4gICAgfVxuICAgIGlmIChub2RlLm5leHRTaWJsaW5nID09IG51bGwgJiYgaXNMaW5lKG5vZGUucGFyZW50Tm9kZSkgfHwgbm9kZS5uZXh0U2libGluZyAhPSBudWxsICYmIGlzTGluZShub2RlLm5leHRTaWJsaW5nKSkge1xuICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxzKyQvLCByZXBsYWNlci5iaW5kKHJlcGxhY2VyLCBmYWxzZSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVsdGEuaW5zZXJ0KHRleHQpO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBDbGlwYm9hcmQ7XG5leHBvcnRzLm1hdGNoQXR0cmlidXRvciA9IG1hdGNoQXR0cmlidXRvcjtcbmV4cG9ydHMubWF0Y2hCbG90ID0gbWF0Y2hCbG90O1xuZXhwb3J0cy5tYXRjaE5ld2xpbmUgPSBtYXRjaE5ld2xpbmU7XG5leHBvcnRzLm1hdGNoU3BhY2luZyA9IG1hdGNoU3BhY2luZztcbmV4cG9ydHMubWF0Y2hUZXh0ID0gbWF0Y2hUZXh0O1xuXG4vKioqLyB9KSxcbi8qIDU2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9pbmxpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX2lubGluZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmxpbmUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBCb2xkID0gZnVuY3Rpb24gKF9JbmxpbmUpIHtcbiAgX2luaGVyaXRzKEJvbGQsIF9JbmxpbmUpO1xuXG4gIGZ1bmN0aW9uIEJvbGQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJvbGQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCb2xkLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQm9sZCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJvbGQsIFt7XG4gICAga2V5OiAnb3B0aW1pemUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcHRpbWl6ZShjb250ZXh0KSB7XG4gICAgICBfZ2V0KEJvbGQucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQm9sZC5wcm90b3R5cGUpLCAnb3B0aW1pemUnLCB0aGlzKS5jYWxsKHRoaXMsIGNvbnRleHQpO1xuICAgICAgaWYgKHRoaXMuZG9tTm9kZS50YWdOYW1lICE9PSB0aGlzLnN0YXRpY3MudGFnTmFtZVswXSkge1xuICAgICAgICB0aGlzLnJlcGxhY2VXaXRoKHRoaXMuc3RhdGljcy5ibG90TmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6ICdjcmVhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICByZXR1cm4gX2dldChCb2xkLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQm9sZCksICdjcmVhdGUnLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRzKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJvbGQ7XG59KF9pbmxpbmUyLmRlZmF1bHQpO1xuXG5Cb2xkLmJsb3ROYW1lID0gJ2JvbGQnO1xuQm9sZC50YWdOYW1lID0gWydTVFJPTkcnLCAnQiddO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBCb2xkO1xuXG4vKioqLyB9KSxcbi8qIDU3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFkZENvbnRyb2xzID0gZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcXVpbGxEZWx0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfcXVpbGxEZWx0YTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWlsbERlbHRhKTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX3F1aWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF9xdWlsbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWlsbCk7XG5cbnZhciBfbG9nZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cbnZhciBfbG9nZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvZ2dlcik7XG5cbnZhciBfbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblxudmFyIF9tb2R1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9kdWxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgZGVidWcgPSAoMCwgX2xvZ2dlcjIuZGVmYXVsdCkoJ3F1aWxsOnRvb2xiYXInKTtcblxudmFyIFRvb2xiYXIgPSBmdW5jdGlvbiAoX01vZHVsZSkge1xuICBfaW5oZXJpdHMoVG9vbGJhciwgX01vZHVsZSk7XG5cbiAgZnVuY3Rpb24gVG9vbGJhcihxdWlsbCwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb29sYmFyKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUb29sYmFyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVG9vbGJhcikpLmNhbGwodGhpcywgcXVpbGwsIG9wdGlvbnMpKTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KF90aGlzLm9wdGlvbnMuY29udGFpbmVyKSkge1xuICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgYWRkQ29udHJvbHMoY29udGFpbmVyLCBfdGhpcy5vcHRpb25zLmNvbnRhaW5lcik7XG4gICAgICBxdWlsbC5jb250YWluZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY29udGFpbmVyLCBxdWlsbC5jb250YWluZXIpO1xuICAgICAgX3RoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIF90aGlzLm9wdGlvbnMuY29udGFpbmVyID09PSAnc3RyaW5nJykge1xuICAgICAgX3RoaXMuY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihfdGhpcy5vcHRpb25zLmNvbnRhaW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLmNvbnRhaW5lciA9IF90aGlzLm9wdGlvbnMuY29udGFpbmVyO1xuICAgIH1cbiAgICBpZiAoIShfdGhpcy5jb250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcbiAgICAgIHZhciBfcmV0O1xuXG4gICAgICByZXR1cm4gX3JldCA9IGRlYnVnLmVycm9yKCdDb250YWluZXIgcmVxdWlyZWQgZm9yIHRvb2xiYXInLCBfdGhpcy5vcHRpb25zKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cbiAgICBfdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncWwtdG9vbGJhcicpO1xuICAgIF90aGlzLmNvbnRyb2xzID0gW107XG4gICAgX3RoaXMuaGFuZGxlcnMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhfdGhpcy5vcHRpb25zLmhhbmRsZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgIF90aGlzLmFkZEhhbmRsZXIoZm9ybWF0LCBfdGhpcy5vcHRpb25zLmhhbmRsZXJzW2Zvcm1hdF0pO1xuICAgIH0pO1xuICAgIFtdLmZvckVhY2guY2FsbChfdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uLCBzZWxlY3QnKSwgZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICBfdGhpcy5hdHRhY2goaW5wdXQpO1xuICAgIH0pO1xuICAgIF90aGlzLnF1aWxsLm9uKF9xdWlsbDIuZGVmYXVsdC5ldmVudHMuRURJVE9SX0NIQU5HRSwgZnVuY3Rpb24gKHR5cGUsIHJhbmdlKSB7XG4gICAgICBpZiAodHlwZSA9PT0gX3F1aWxsMi5kZWZhdWx0LmV2ZW50cy5TRUxFQ1RJT05fQ0hBTkdFKSB7XG4gICAgICAgIF90aGlzLnVwZGF0ZShyYW5nZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX3RoaXMucXVpbGwub24oX3F1aWxsMi5kZWZhdWx0LmV2ZW50cy5TQ1JPTExfT1BUSU1JWkUsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRxdWlsbCRzZWxlY3Rpb24gPSBfdGhpcy5xdWlsbC5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcbiAgICAgICAgICBfdGhpcyRxdWlsbCRzZWxlY3Rpb24yID0gX3NsaWNlZFRvQXJyYXkoX3RoaXMkcXVpbGwkc2VsZWN0aW9uLCAxKSxcbiAgICAgICAgICByYW5nZSA9IF90aGlzJHF1aWxsJHNlbGVjdGlvbjJbMF07IC8vIHF1aWxsLmdldFNlbGVjdGlvbiB0cmlnZ2VycyB1cGRhdGVcblxuXG4gICAgICBfdGhpcy51cGRhdGUocmFuZ2UpO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUb29sYmFyLCBbe1xuICAgIGtleTogJ2FkZEhhbmRsZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRIYW5kbGVyKGZvcm1hdCwgaGFuZGxlcikge1xuICAgICAgdGhpcy5oYW5kbGVyc1tmb3JtYXRdID0gaGFuZGxlcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhdHRhY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhdHRhY2goaW5wdXQpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgZm9ybWF0ID0gW10uZmluZC5jYWxsKGlucHV0LmNsYXNzTGlzdCwgZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3FsLScpID09PSAwO1xuICAgICAgfSk7XG4gICAgICBpZiAoIWZvcm1hdCkgcmV0dXJuO1xuICAgICAgZm9ybWF0ID0gZm9ybWF0LnNsaWNlKCdxbC0nLmxlbmd0aCk7XG4gICAgICBpZiAoaW5wdXQudGFnTmFtZSA9PT0gJ0JVVFRPTicpIHtcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaGFuZGxlcnNbZm9ybWF0XSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0aGlzLnF1aWxsLnNjcm9sbC53aGl0ZWxpc3QgIT0gbnVsbCAmJiB0aGlzLnF1aWxsLnNjcm9sbC53aGl0ZWxpc3RbZm9ybWF0XSA9PSBudWxsKSB7XG4gICAgICAgICAgZGVidWcud2FybignaWdub3JpbmcgYXR0YWNoaW5nIHRvIGRpc2FibGVkIGZvcm1hdCcsIGZvcm1hdCwgaW5wdXQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeShmb3JtYXQpID09IG51bGwpIHtcbiAgICAgICAgICBkZWJ1Zy53YXJuKCdpZ25vcmluZyBhdHRhY2hpbmcgdG8gbm9uZXhpc3RlbnQgZm9ybWF0JywgZm9ybWF0LCBpbnB1dCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgZXZlbnROYW1lID0gaW5wdXQudGFnTmFtZSA9PT0gJ1NFTEVDVCcgPyAnY2hhbmdlJyA6ICdjbGljayc7XG4gICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdm9pZCAwO1xuICAgICAgICBpZiAoaW5wdXQudGFnTmFtZSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuc2VsZWN0ZWRJbmRleCA8IDApIHJldHVybjtcbiAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSBpbnB1dC5vcHRpb25zW2lucHV0LnNlbGVjdGVkSW5kZXhdO1xuICAgICAgICAgIGlmIChzZWxlY3RlZC5oYXNBdHRyaWJ1dGUoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gc2VsZWN0ZWQudmFsdWUgfHwgZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpbnB1dC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWFjdGl2ZScpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGlucHV0LnZhbHVlIHx8ICFpbnB1dC5oYXNBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczIucXVpbGwuZm9jdXMoKTtcblxuICAgICAgICB2YXIgX3F1aWxsJHNlbGVjdGlvbiRnZXRSID0gX3RoaXMyLnF1aWxsLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxuICAgICAgICAgICAgX3F1aWxsJHNlbGVjdGlvbiRnZXRSMiA9IF9zbGljZWRUb0FycmF5KF9xdWlsbCRzZWxlY3Rpb24kZ2V0UiwgMSksXG4gICAgICAgICAgICByYW5nZSA9IF9xdWlsbCRzZWxlY3Rpb24kZ2V0UjJbMF07XG5cbiAgICAgICAgaWYgKF90aGlzMi5oYW5kbGVyc1tmb3JtYXRdICE9IG51bGwpIHtcbiAgICAgICAgICBfdGhpczIuaGFuZGxlcnNbZm9ybWF0XS5jYWxsKF90aGlzMiwgdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkoZm9ybWF0KS5wcm90b3R5cGUgaW5zdGFuY2VvZiBfcGFyY2htZW50Mi5kZWZhdWx0LkVtYmVkKSB7XG4gICAgICAgICAgdmFsdWUgPSBwcm9tcHQoJ0VudGVyICcgKyBmb3JtYXQpO1xuICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybjtcbiAgICAgICAgICBfdGhpczIucXVpbGwudXBkYXRlQ29udGVudHMobmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkucmV0YWluKHJhbmdlLmluZGV4KS5kZWxldGUocmFuZ2UubGVuZ3RoKS5pbnNlcnQoX2RlZmluZVByb3BlcnR5KHt9LCBmb3JtYXQsIHZhbHVlKSksIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMi5xdWlsbC5mb3JtYXQoZm9ybWF0LCB2YWx1ZSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMyLnVwZGF0ZShyYW5nZSk7XG4gICAgICB9KTtcbiAgICAgIC8vIFRPRE8gdXNlIHdlYWttYXBcbiAgICAgIHRoaXMuY29udHJvbHMucHVzaChbZm9ybWF0LCBpbnB1dF0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShyYW5nZSkge1xuICAgICAgdmFyIGZvcm1hdHMgPSByYW5nZSA9PSBudWxsID8ge30gOiB0aGlzLnF1aWxsLmdldEZvcm1hdChyYW5nZSk7XG4gICAgICB0aGlzLmNvbnRyb2xzLmZvckVhY2goZnVuY3Rpb24gKHBhaXIpIHtcbiAgICAgICAgdmFyIF9wYWlyID0gX3NsaWNlZFRvQXJyYXkocGFpciwgMiksXG4gICAgICAgICAgICBmb3JtYXQgPSBfcGFpclswXSxcbiAgICAgICAgICAgIGlucHV0ID0gX3BhaXJbMV07XG5cbiAgICAgICAgaWYgKGlucHV0LnRhZ05hbWUgPT09ICdTRUxFQ1QnKSB7XG4gICAgICAgICAgdmFyIG9wdGlvbiA9IHZvaWQgMDtcbiAgICAgICAgICBpZiAocmFuZ2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9uID0gbnVsbDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdHNbZm9ybWF0XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb24gPSBpbnB1dC5xdWVyeVNlbGVjdG9yKCdvcHRpb25bc2VsZWN0ZWRdJyk7XG4gICAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShmb3JtYXRzW2Zvcm1hdF0pKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBmb3JtYXRzW2Zvcm1hdF07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcXCIvZywgJ1xcXFxcIicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9uID0gaW5wdXQucXVlcnlTZWxlY3Rvcignb3B0aW9uW3ZhbHVlPVwiJyArIHZhbHVlICsgJ1wiXScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3B0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIGlucHV0LnZhbHVlID0gJyc7IC8vIFRPRE8gbWFrZSBjb25maWd1cmFibGU/XG4gICAgICAgICAgICBpbnB1dC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChyYW5nZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKCdxbC1hY3RpdmUnKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0Lmhhc0F0dHJpYnV0ZSgndmFsdWUnKSkge1xuICAgICAgICAgICAgLy8gYm90aCBiZWluZyBudWxsIHNob3VsZCBtYXRjaCAoZGVmYXVsdCB2YWx1ZXMpXG4gICAgICAgICAgICAvLyAnMScgc2hvdWxkIG1hdGNoIHdpdGggMSAoaGVhZGVycylcbiAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IGZvcm1hdHNbZm9ybWF0XSA9PT0gaW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpIHx8IGZvcm1hdHNbZm9ybWF0XSAhPSBudWxsICYmIGZvcm1hdHNbZm9ybWF0XS50b1N0cmluZygpID09PSBpbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykgfHwgZm9ybWF0c1tmb3JtYXRdID09IG51bGwgJiYgIWlucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKTtcbiAgICAgICAgICAgIGlucHV0LmNsYXNzTGlzdC50b2dnbGUoJ3FsLWFjdGl2ZScsIGlzQWN0aXZlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXQuY2xhc3NMaXN0LnRvZ2dsZSgncWwtYWN0aXZlJywgZm9ybWF0c1tmb3JtYXRdICE9IG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRvb2xiYXI7XG59KF9tb2R1bGUyLmRlZmF1bHQpO1xuXG5Ub29sYmFyLkRFRkFVTFRTID0ge307XG5cbmZ1bmN0aW9uIGFkZEJ1dHRvbihjb250YWluZXIsIGZvcm1hdCwgdmFsdWUpIHtcbiAgdmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIGlucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICdidXR0b24nKTtcbiAgaW5wdXQuY2xhc3NMaXN0LmFkZCgncWwtJyArIGZvcm1hdCk7XG4gIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgaW5wdXQudmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaW5wdXQpO1xufVxuXG5mdW5jdGlvbiBhZGRDb250cm9scyhjb250YWluZXIsIGdyb3Vwcykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoZ3JvdXBzWzBdKSkge1xuICAgIGdyb3VwcyA9IFtncm91cHNdO1xuICB9XG4gIGdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChjb250cm9scykge1xuICAgIHZhciBncm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBncm91cC5jbGFzc0xpc3QuYWRkKCdxbC1mb3JtYXRzJyk7XG4gICAgY29udHJvbHMuZm9yRWFjaChmdW5jdGlvbiAoY29udHJvbCkge1xuICAgICAgaWYgKHR5cGVvZiBjb250cm9sID09PSAnc3RyaW5nJykge1xuICAgICAgICBhZGRCdXR0b24oZ3JvdXAsIGNvbnRyb2wpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IE9iamVjdC5rZXlzKGNvbnRyb2wpWzBdO1xuICAgICAgICB2YXIgdmFsdWUgPSBjb250cm9sW2Zvcm1hdF07XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIGFkZFNlbGVjdChncm91cCwgZm9ybWF0LCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQnV0dG9uKGdyb3VwLCBmb3JtYXQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChncm91cCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRTZWxlY3QoY29udGFpbmVyLCBmb3JtYXQsIHZhbHVlcykge1xuICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcbiAgaW5wdXQuY2xhc3NMaXN0LmFkZCgncWwtJyArIGZvcm1hdCk7XG4gIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBvcHRpb24uc2V0QXR0cmlidXRlKCd2YWx1ZScsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcbiAgICB9XG4gICAgaW5wdXQuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgfSk7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbnB1dCk7XG59XG5cblRvb2xiYXIuREVGQVVMVFMgPSB7XG4gIGNvbnRhaW5lcjogbnVsbCxcbiAgaGFuZGxlcnM6IHtcbiAgICBjbGVhbjogZnVuY3Rpb24gY2xlYW4oKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIHJhbmdlID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIGlmIChyYW5nZSA9PSBudWxsKSByZXR1cm47XG4gICAgICBpZiAocmFuZ2UubGVuZ3RoID09IDApIHtcbiAgICAgICAgdmFyIGZvcm1hdHMgPSB0aGlzLnF1aWxsLmdldEZvcm1hdCgpO1xuICAgICAgICBPYmplY3Qua2V5cyhmb3JtYXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgLy8gQ2xlYW4gZnVuY3Rpb25hbGl0eSBpbiBleGlzdGluZyBhcHBzIG9ubHkgY2xlYW4gaW5saW5lIGZvcm1hdHNcbiAgICAgICAgICBpZiAoX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeShuYW1lLCBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLklOTElORSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgX3RoaXMzLnF1aWxsLmZvcm1hdChuYW1lLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucXVpbGwucmVtb3ZlRm9ybWF0KHJhbmdlLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRpcmVjdGlvbjogZnVuY3Rpb24gZGlyZWN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgYWxpZ24gPSB0aGlzLnF1aWxsLmdldEZvcm1hdCgpWydhbGlnbiddO1xuICAgICAgaWYgKHZhbHVlID09PSAncnRsJyAmJiBhbGlnbiA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdhbGlnbicsICdyaWdodCcsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfSBlbHNlIGlmICghdmFsdWUgJiYgYWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2FsaWduJywgZmFsc2UsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfVxuICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2RpcmVjdGlvbicsIHZhbHVlLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICB9LFxuICAgIGluZGVudDogZnVuY3Rpb24gaW5kZW50KHZhbHVlKSB7XG4gICAgICB2YXIgcmFuZ2UgPSB0aGlzLnF1aWxsLmdldFNlbGVjdGlvbigpO1xuICAgICAgdmFyIGZvcm1hdHMgPSB0aGlzLnF1aWxsLmdldEZvcm1hdChyYW5nZSk7XG4gICAgICB2YXIgaW5kZW50ID0gcGFyc2VJbnQoZm9ybWF0cy5pbmRlbnQgfHwgMCk7XG4gICAgICBpZiAodmFsdWUgPT09ICcrMScgfHwgdmFsdWUgPT09ICctMScpIHtcbiAgICAgICAgdmFyIG1vZGlmaWVyID0gdmFsdWUgPT09ICcrMScgPyAxIDogLTE7XG4gICAgICAgIGlmIChmb3JtYXRzLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIG1vZGlmaWVyICo9IC0xO1xuICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnaW5kZW50JywgaW5kZW50ICsgbW9kaWZpZXIsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24gbGluayh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIHZhbHVlID0gcHJvbXB0KCdFbnRlciBsaW5rIFVSTDonKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdsaW5rJywgdmFsdWUsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgIH0sXG4gICAgbGlzdDogZnVuY3Rpb24gbGlzdCh2YWx1ZSkge1xuICAgICAgdmFyIHJhbmdlID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIHZhciBmb3JtYXRzID0gdGhpcy5xdWlsbC5nZXRGb3JtYXQocmFuZ2UpO1xuICAgICAgaWYgKHZhbHVlID09PSAnY2hlY2snKSB7XG4gICAgICAgIGlmIChmb3JtYXRzWydsaXN0J10gPT09ICdjaGVja2VkJyB8fCBmb3JtYXRzWydsaXN0J10gPT09ICd1bmNoZWNrZWQnKSB7XG4gICAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2xpc3QnLCBmYWxzZSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2xpc3QnLCAndW5jaGVja2VkJywgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdsaXN0JywgdmFsdWUsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gVG9vbGJhcjtcbmV4cG9ydHMuYWRkQ29udHJvbHMgPSBhZGRDb250cm9scztcblxuLyoqKi8gfSksXG4vKiA1OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cG9seWxpbmUgY2xhc3M9XFxcInFsLWV2ZW4gcWwtc3Ryb2tlXFxcIiBwb2ludHM9XFxcIjUgNyAzIDkgNSAxMVxcXCI+PC9wb2x5bGluZT4gPHBvbHlsaW5lIGNsYXNzPVxcXCJxbC1ldmVuIHFsLXN0cm9rZVxcXCIgcG9pbnRzPVxcXCIxMyA3IDE1IDkgMTMgMTFcXFwiPjwvcG9seWxpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xMCB4Mj04IHkxPTUgeTI9MTM+PC9saW5lPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA1OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfcGlja2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cbnZhciBfcGlja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BpY2tlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIENvbG9yUGlja2VyID0gZnVuY3Rpb24gKF9QaWNrZXIpIHtcbiAgX2luaGVyaXRzKENvbG9yUGlja2VyLCBfUGlja2VyKTtcblxuICBmdW5jdGlvbiBDb2xvclBpY2tlcihzZWxlY3QsIGxhYmVsKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbG9yUGlja2VyKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDb2xvclBpY2tlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbG9yUGlja2VyKSkuY2FsbCh0aGlzLCBzZWxlY3QpKTtcblxuICAgIF90aGlzLmxhYmVsLmlubmVySFRNTCA9IGxhYmVsO1xuICAgIF90aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdxbC1jb2xvci1waWNrZXInKTtcbiAgICBbXS5zbGljZS5jYWxsKF90aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcucWwtcGlja2VyLWl0ZW0nKSwgMCwgNykuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKCdxbC1wcmltYXJ5Jyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvbG9yUGlja2VyLCBbe1xuICAgIGtleTogJ2J1aWxkSXRlbScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJ1aWxkSXRlbShvcHRpb24pIHtcbiAgICAgIHZhciBpdGVtID0gX2dldChDb2xvclBpY2tlci5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb2xvclBpY2tlci5wcm90b3R5cGUpLCAnYnVpbGRJdGVtJywgdGhpcykuY2FsbCh0aGlzLCBvcHRpb24pO1xuICAgICAgaXRlbS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBvcHRpb24uZ2V0QXR0cmlidXRlKCd2YWx1ZScpIHx8ICcnO1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2VsZWN0SXRlbScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdEl0ZW0oaXRlbSwgdHJpZ2dlcikge1xuICAgICAgX2dldChDb2xvclBpY2tlci5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb2xvclBpY2tlci5wcm90b3R5cGUpLCAnc2VsZWN0SXRlbScsIHRoaXMpLmNhbGwodGhpcywgaXRlbSwgdHJpZ2dlcik7XG4gICAgICB2YXIgY29sb3JMYWJlbCA9IHRoaXMubGFiZWwucXVlcnlTZWxlY3RvcignLnFsLWNvbG9yLWxhYmVsJyk7XG4gICAgICB2YXIgdmFsdWUgPSBpdGVtID8gaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSB8fCAnJyA6ICcnO1xuICAgICAgaWYgKGNvbG9yTGFiZWwpIHtcbiAgICAgICAgaWYgKGNvbG9yTGFiZWwudGFnTmFtZSA9PT0gJ2xpbmUnKSB7XG4gICAgICAgICAgY29sb3JMYWJlbC5zdHlsZS5zdHJva2UgPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb2xvckxhYmVsLnN0eWxlLmZpbGwgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb2xvclBpY2tlcjtcbn0oX3BpY2tlcjIuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IENvbG9yUGlja2VyO1xuXG4vKioqLyB9KSxcbi8qIDYwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9waWNrZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTtcblxudmFyIF9waWNrZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGlja2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgSWNvblBpY2tlciA9IGZ1bmN0aW9uIChfUGlja2VyKSB7XG4gIF9pbmhlcml0cyhJY29uUGlja2VyLCBfUGlja2VyKTtcblxuICBmdW5jdGlvbiBJY29uUGlja2VyKHNlbGVjdCwgaWNvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSWNvblBpY2tlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoSWNvblBpY2tlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEljb25QaWNrZXIpKS5jYWxsKHRoaXMsIHNlbGVjdCkpO1xuXG4gICAgX3RoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3FsLWljb24tcGlja2VyJyk7XG4gICAgW10uZm9yRWFjaC5jYWxsKF90aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcucWwtcGlja2VyLWl0ZW0nKSwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIGl0ZW0uaW5uZXJIVE1MID0gaWNvbnNbaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSB8fCAnJ107XG4gICAgfSk7XG4gICAgX3RoaXMuZGVmYXVsdEl0ZW0gPSBfdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnFsLXNlbGVjdGVkJyk7XG4gICAgX3RoaXMuc2VsZWN0SXRlbShfdGhpcy5kZWZhdWx0SXRlbSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEljb25QaWNrZXIsIFt7XG4gICAga2V5OiAnc2VsZWN0SXRlbScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdEl0ZW0oaXRlbSwgdHJpZ2dlcikge1xuICAgICAgX2dldChJY29uUGlja2VyLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEljb25QaWNrZXIucHJvdG90eXBlKSwgJ3NlbGVjdEl0ZW0nLCB0aGlzKS5jYWxsKHRoaXMsIGl0ZW0sIHRyaWdnZXIpO1xuICAgICAgaXRlbSA9IGl0ZW0gfHwgdGhpcy5kZWZhdWx0SXRlbTtcbiAgICAgIHRoaXMubGFiZWwuaW5uZXJIVE1MID0gaXRlbS5pbm5lckhUTUw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEljb25QaWNrZXI7XG59KF9waWNrZXIyLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBJY29uUGlja2VyO1xuXG4vKioqLyB9KSxcbi8qIDYxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBUb29sdGlwID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBUb29sdGlwKHF1aWxsLCBib3VuZHNDb250YWluZXIpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRvb2x0aXApO1xuXG4gICAgdGhpcy5xdWlsbCA9IHF1aWxsO1xuICAgIHRoaXMuYm91bmRzQ29udGFpbmVyID0gYm91bmRzQ29udGFpbmVyIHx8IGRvY3VtZW50LmJvZHk7XG4gICAgdGhpcy5yb290ID0gcXVpbGwuYWRkQ29udGFpbmVyKCdxbC10b29sdGlwJyk7XG4gICAgdGhpcy5yb290LmlubmVySFRNTCA9IHRoaXMuY29uc3RydWN0b3IuVEVNUExBVEU7XG4gICAgaWYgKHRoaXMucXVpbGwucm9vdCA9PT0gdGhpcy5xdWlsbC5zY3JvbGxpbmdDb250YWluZXIpIHtcbiAgICAgIHRoaXMucXVpbGwucm9vdC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnJvb3Quc3R5bGUubWFyZ2luVG9wID0gLTEgKiBfdGhpcy5xdWlsbC5yb290LnNjcm9sbFRvcCArICdweCc7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5oaWRlKCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVG9vbHRpcCwgW3tcbiAgICBrZXk6ICdoaWRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgIHRoaXMucm9vdC5jbGFzc0xpc3QuYWRkKCdxbC1oaWRkZW4nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBvc2l0aW9uKHJlZmVyZW5jZSkge1xuICAgICAgdmFyIGxlZnQgPSByZWZlcmVuY2UubGVmdCArIHJlZmVyZW5jZS53aWR0aCAvIDIgLSB0aGlzLnJvb3Qub2Zmc2V0V2lkdGggLyAyO1xuICAgICAgLy8gcm9vdC5zY3JvbGxUb3Agc2hvdWxkIGJlIDAgaWYgc2Nyb2xsQ29udGFpbmVyICE9PSByb290XG4gICAgICB2YXIgdG9wID0gcmVmZXJlbmNlLmJvdHRvbSArIHRoaXMucXVpbGwucm9vdC5zY3JvbGxUb3A7XG4gICAgICB0aGlzLnJvb3Quc3R5bGUubGVmdCA9IGxlZnQgKyAncHgnO1xuICAgICAgdGhpcy5yb290LnN0eWxlLnRvcCA9IHRvcCArICdweCc7XG4gICAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZSgncWwtZmxpcCcpO1xuICAgICAgdmFyIGNvbnRhaW5lckJvdW5kcyA9IHRoaXMuYm91bmRzQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIHJvb3RCb3VuZHMgPSB0aGlzLnJvb3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgc2hpZnQgPSAwO1xuICAgICAgaWYgKHJvb3RCb3VuZHMucmlnaHQgPiBjb250YWluZXJCb3VuZHMucmlnaHQpIHtcbiAgICAgICAgc2hpZnQgPSBjb250YWluZXJCb3VuZHMucmlnaHQgLSByb290Qm91bmRzLnJpZ2h0O1xuICAgICAgICB0aGlzLnJvb3Quc3R5bGUubGVmdCA9IGxlZnQgKyBzaGlmdCArICdweCc7XG4gICAgICB9XG4gICAgICBpZiAocm9vdEJvdW5kcy5sZWZ0IDwgY29udGFpbmVyQm91bmRzLmxlZnQpIHtcbiAgICAgICAgc2hpZnQgPSBjb250YWluZXJCb3VuZHMubGVmdCAtIHJvb3RCb3VuZHMubGVmdDtcbiAgICAgICAgdGhpcy5yb290LnN0eWxlLmxlZnQgPSBsZWZ0ICsgc2hpZnQgKyAncHgnO1xuICAgICAgfVxuICAgICAgaWYgKHJvb3RCb3VuZHMuYm90dG9tID4gY29udGFpbmVyQm91bmRzLmJvdHRvbSkge1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcm9vdEJvdW5kcy5ib3R0b20gLSByb290Qm91bmRzLnRvcDtcbiAgICAgICAgdmFyIHZlcnRpY2FsU2hpZnQgPSByZWZlcmVuY2UuYm90dG9tIC0gcmVmZXJlbmNlLnRvcCArIGhlaWdodDtcbiAgICAgICAgdGhpcy5yb290LnN0eWxlLnRvcCA9IHRvcCAtIHZlcnRpY2FsU2hpZnQgKyAncHgnO1xuICAgICAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LmFkZCgncWwtZmxpcCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNoaWZ0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgdGhpcy5yb290LmNsYXNzTGlzdC5yZW1vdmUoJ3FsLWVkaXRpbmcnKTtcbiAgICAgIHRoaXMucm9vdC5jbGFzc0xpc3QucmVtb3ZlKCdxbC1oaWRkZW4nKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVG9vbHRpcDtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gVG9vbHRpcDtcblxuLyoqKi8gfSksXG4vKiA2MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9leHRlbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX2V4dGVuZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmQpO1xuXG52YXIgX2VtaXR0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX2VtaXR0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZW1pdHRlcik7XG5cbnZhciBfYmFzZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xuXG52YXIgX2Jhc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmFzZSk7XG5cbnZhciBfbGluayA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpO1xuXG52YXIgX2xpbmsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbGluayk7XG5cbnZhciBfc2VsZWN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cbnZhciBfaWNvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblxudmFyIF9pY29uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pY29ucyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFRPT0xCQVJfQ09ORklHID0gW1t7IGhlYWRlcjogWycxJywgJzInLCAnMycsIGZhbHNlXSB9XSwgWydib2xkJywgJ2l0YWxpYycsICd1bmRlcmxpbmUnLCAnbGluayddLCBbeyBsaXN0OiAnb3JkZXJlZCcgfSwgeyBsaXN0OiAnYnVsbGV0JyB9XSwgWydjbGVhbiddXTtcblxudmFyIFNub3dUaGVtZSA9IGZ1bmN0aW9uIChfQmFzZVRoZW1lKSB7XG4gIF9pbmhlcml0cyhTbm93VGhlbWUsIF9CYXNlVGhlbWUpO1xuXG4gIGZ1bmN0aW9uIFNub3dUaGVtZShxdWlsbCwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTbm93VGhlbWUpO1xuXG4gICAgaWYgKG9wdGlvbnMubW9kdWxlcy50b29sYmFyICE9IG51bGwgJiYgb3B0aW9ucy5tb2R1bGVzLnRvb2xiYXIuY29udGFpbmVyID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMubW9kdWxlcy50b29sYmFyLmNvbnRhaW5lciA9IFRPT0xCQVJfQ09ORklHO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTbm93VGhlbWUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTbm93VGhlbWUpKS5jYWxsKHRoaXMsIHF1aWxsLCBvcHRpb25zKSk7XG5cbiAgICBfdGhpcy5xdWlsbC5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncWwtc25vdycpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTbm93VGhlbWUsIFt7XG4gICAga2V5OiAnZXh0ZW5kVG9vbGJhcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4dGVuZFRvb2xiYXIodG9vbGJhcikge1xuICAgICAgdG9vbGJhci5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncWwtc25vdycpO1xuICAgICAgdGhpcy5idWlsZEJ1dHRvbnMoW10uc2xpY2UuY2FsbCh0b29sYmFyLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKSksIF9pY29uczIuZGVmYXVsdCk7XG4gICAgICB0aGlzLmJ1aWxkUGlja2VycyhbXS5zbGljZS5jYWxsKHRvb2xiYXIuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlbGVjdCcpKSwgX2ljb25zMi5kZWZhdWx0KTtcbiAgICAgIHRoaXMudG9vbHRpcCA9IG5ldyBTbm93VG9vbHRpcCh0aGlzLnF1aWxsLCB0aGlzLm9wdGlvbnMuYm91bmRzKTtcbiAgICAgIGlmICh0b29sYmFyLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcucWwtbGluaycpKSB7XG4gICAgICAgIHRoaXMucXVpbGwua2V5Ym9hcmQuYWRkQmluZGluZyh7IGtleTogJ0snLCBzaG9ydEtleTogdHJ1ZSB9LCBmdW5jdGlvbiAocmFuZ2UsIGNvbnRleHQpIHtcbiAgICAgICAgICB0b29sYmFyLmhhbmRsZXJzWydsaW5rJ10uY2FsbCh0b29sYmFyLCAhY29udGV4dC5mb3JtYXQubGluayk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTbm93VGhlbWU7XG59KF9iYXNlMi5kZWZhdWx0KTtcblxuU25vd1RoZW1lLkRFRkFVTFRTID0gKDAsIF9leHRlbmQyLmRlZmF1bHQpKHRydWUsIHt9LCBfYmFzZTIuZGVmYXVsdC5ERUZBVUxUUywge1xuICBtb2R1bGVzOiB7XG4gICAgdG9vbGJhcjoge1xuICAgICAgaGFuZGxlcnM6IHtcbiAgICAgICAgbGluazogZnVuY3Rpb24gbGluayh2YWx1ZSkge1xuICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgIGlmIChyYW5nZSA9PSBudWxsIHx8IHJhbmdlLmxlbmd0aCA9PSAwKSByZXR1cm47XG4gICAgICAgICAgICB2YXIgcHJldmlldyA9IHRoaXMucXVpbGwuZ2V0VGV4dChyYW5nZSk7XG4gICAgICAgICAgICBpZiAoL15cXFMrQFxcUytcXC5cXFMrJC8udGVzdChwcmV2aWV3KSAmJiBwcmV2aWV3LmluZGV4T2YoJ21haWx0bzonKSAhPT0gMCkge1xuICAgICAgICAgICAgICBwcmV2aWV3ID0gJ21haWx0bzonICsgcHJldmlldztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0b29sdGlwID0gdGhpcy5xdWlsbC50aGVtZS50b29sdGlwO1xuICAgICAgICAgICAgdG9vbHRpcC5lZGl0KCdsaW5rJywgcHJldmlldyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdsaW5rJywgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5cbnZhciBTbm93VG9vbHRpcCA9IGZ1bmN0aW9uIChfQmFzZVRvb2x0aXApIHtcbiAgX2luaGVyaXRzKFNub3dUb29sdGlwLCBfQmFzZVRvb2x0aXApO1xuXG4gIGZ1bmN0aW9uIFNub3dUb29sdGlwKHF1aWxsLCBib3VuZHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU25vd1Rvb2x0aXApO1xuXG4gICAgdmFyIF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTbm93VG9vbHRpcC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNub3dUb29sdGlwKSkuY2FsbCh0aGlzLCBxdWlsbCwgYm91bmRzKSk7XG5cbiAgICBfdGhpczIucHJldmlldyA9IF90aGlzMi5yb290LnF1ZXJ5U2VsZWN0b3IoJ2EucWwtcHJldmlldycpO1xuICAgIHJldHVybiBfdGhpczI7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU25vd1Rvb2x0aXAsIFt7XG4gICAga2V5OiAnbGlzdGVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdGVuKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIF9nZXQoU25vd1Rvb2x0aXAucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU25vd1Rvb2x0aXAucHJvdG90eXBlKSwgJ2xpc3RlbicsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcignYS5xbC1hY3Rpb24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoX3RoaXMzLnJvb3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1lZGl0aW5nJykpIHtcbiAgICAgICAgICBfdGhpczMuc2F2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMy5lZGl0KCdsaW5rJywgX3RoaXMzLnByZXZpZXcudGV4dENvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKCdhLnFsLXJlbW92ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChfdGhpczMubGlua1JhbmdlICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgcmFuZ2UgPSBfdGhpczMubGlua1JhbmdlO1xuICAgICAgICAgIF90aGlzMy5yZXN0b3JlRm9jdXMoKTtcbiAgICAgICAgICBfdGhpczMucXVpbGwuZm9ybWF0VGV4dChyYW5nZSwgJ2xpbmsnLCBmYWxzZSwgX2VtaXR0ZXIyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgICBkZWxldGUgX3RoaXMzLmxpbmtSYW5nZTtcbiAgICAgICAgfVxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfdGhpczMuaGlkZSgpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnF1aWxsLm9uKF9lbWl0dGVyMi5kZWZhdWx0LmV2ZW50cy5TRUxFQ1RJT05fQ0hBTkdFLCBmdW5jdGlvbiAocmFuZ2UsIG9sZFJhbmdlLCBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHJhbmdlID09IG51bGwpIHJldHVybjtcbiAgICAgICAgaWYgKHJhbmdlLmxlbmd0aCA9PT0gMCAmJiBzb3VyY2UgPT09IF9lbWl0dGVyMi5kZWZhdWx0LnNvdXJjZXMuVVNFUikge1xuICAgICAgICAgIHZhciBfcXVpbGwkc2Nyb2xsJGRlc2NlbmQgPSBfdGhpczMucXVpbGwuc2Nyb2xsLmRlc2NlbmRhbnQoX2xpbmsyLmRlZmF1bHQsIHJhbmdlLmluZGV4KSxcbiAgICAgICAgICAgICAgX3F1aWxsJHNjcm9sbCRkZXNjZW5kMiA9IF9zbGljZWRUb0FycmF5KF9xdWlsbCRzY3JvbGwkZGVzY2VuZCwgMiksXG4gICAgICAgICAgICAgIGxpbmsgPSBfcXVpbGwkc2Nyb2xsJGRlc2NlbmQyWzBdLFxuICAgICAgICAgICAgICBvZmZzZXQgPSBfcXVpbGwkc2Nyb2xsJGRlc2NlbmQyWzFdO1xuXG4gICAgICAgICAgaWYgKGxpbmsgIT0gbnVsbCkge1xuICAgICAgICAgICAgX3RoaXMzLmxpbmtSYW5nZSA9IG5ldyBfc2VsZWN0aW9uLlJhbmdlKHJhbmdlLmluZGV4IC0gb2Zmc2V0LCBsaW5rLmxlbmd0aCgpKTtcbiAgICAgICAgICAgIHZhciBwcmV2aWV3ID0gX2xpbmsyLmRlZmF1bHQuZm9ybWF0cyhsaW5rLmRvbU5vZGUpO1xuICAgICAgICAgICAgX3RoaXMzLnByZXZpZXcudGV4dENvbnRlbnQgPSBwcmV2aWV3O1xuICAgICAgICAgICAgX3RoaXMzLnByZXZpZXcuc2V0QXR0cmlidXRlKCdocmVmJywgcHJldmlldyk7XG4gICAgICAgICAgICBfdGhpczMuc2hvdygpO1xuICAgICAgICAgICAgX3RoaXMzLnBvc2l0aW9uKF90aGlzMy5xdWlsbC5nZXRCb3VuZHMoX3RoaXMzLmxpbmtSYW5nZSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgX3RoaXMzLmxpbmtSYW5nZTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczMuaGlkZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2hvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICBfZ2V0KFNub3dUb29sdGlwLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNub3dUb29sdGlwLnByb3RvdHlwZSksICdzaG93JywgdGhpcykuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMucm9vdC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtbW9kZScpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTbm93VG9vbHRpcDtcbn0oX2Jhc2UuQmFzZVRvb2x0aXApO1xuXG5Tbm93VG9vbHRpcC5URU1QTEFURSA9IFsnPGEgY2xhc3M9XCJxbC1wcmV2aWV3XCIgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImFib3V0OmJsYW5rXCI+PC9hPicsICc8aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLWZvcm11bGE9XCJlPW1jXjJcIiBkYXRhLWxpbms9XCJodHRwczovL3F1aWxsanMuY29tXCIgZGF0YS12aWRlbz1cIkVtYmVkIFVSTFwiPicsICc8YSBjbGFzcz1cInFsLWFjdGlvblwiPjwvYT4nLCAnPGEgY2xhc3M9XCJxbC1yZW1vdmVcIj48L2E+J10uam9pbignJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNub3dUaGVtZTtcblxuLyoqKi8gfSksXG4vKiA2MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KTtcblxudmFyIF9jb3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvcmUpO1xuXG52YXIgX2FsaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7XG5cbnZhciBfZGlyZWN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cbnZhciBfaW5kZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NCk7XG5cbnZhciBfYmxvY2txdW90ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNjUpO1xuXG52YXIgX2Jsb2NrcXVvdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmxvY2txdW90ZSk7XG5cbnZhciBfaGVhZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Nik7XG5cbnZhciBfaGVhZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlYWRlcik7XG5cbnZhciBfbGlzdCA9IF9fd2VicGFja19yZXF1aXJlX18oNjcpO1xuXG52YXIgX2xpc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbGlzdCk7XG5cbnZhciBfYmFja2dyb3VuZCA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpO1xuXG52YXIgX2NvbG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cbnZhciBfZm9udCA9IF9fd2VicGFja19yZXF1aXJlX18oMzkpO1xuXG52YXIgX3NpemUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblxudmFyIF9ib2xkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Nik7XG5cbnZhciBfYm9sZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ib2xkKTtcblxudmFyIF9pdGFsaWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4KTtcblxudmFyIF9pdGFsaWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXRhbGljKTtcblxudmFyIF9saW5rID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cbnZhciBfbGluazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saW5rKTtcblxudmFyIF9zY3JpcHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5KTtcblxudmFyIF9zY3JpcHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2NyaXB0KTtcblxudmFyIF9zdHJpa2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwKTtcblxudmFyIF9zdHJpa2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaWtlKTtcblxudmFyIF91bmRlcmxpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcxKTtcblxudmFyIF91bmRlcmxpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdW5kZXJsaW5lKTtcblxudmFyIF9pbWFnZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzIpO1xuXG52YXIgX2ltYWdlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ltYWdlKTtcblxudmFyIF92aWRlbyA9IF9fd2VicGFja19yZXF1aXJlX18oNzMpO1xuXG52YXIgX3ZpZGVvMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZpZGVvKTtcblxudmFyIF9jb2RlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cbnZhciBfY29kZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb2RlKTtcblxudmFyIF9mb3JtdWxhID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NCk7XG5cbnZhciBfZm9ybXVsYTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mb3JtdWxhKTtcblxudmFyIF9zeW50YXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc1KTtcblxudmFyIF9zeW50YXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3ludGF4KTtcblxudmFyIF90b29sYmFyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Nyk7XG5cbnZhciBfdG9vbGJhcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b29sYmFyKTtcblxudmFyIF9pY29ucyA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXG52YXIgX2ljb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ljb25zKTtcblxudmFyIF9waWNrZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTtcblxudmFyIF9waWNrZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGlja2VyKTtcblxudmFyIF9jb2xvclBpY2tlciA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpO1xuXG52YXIgX2NvbG9yUGlja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbG9yUGlja2VyKTtcblxudmFyIF9pY29uUGlja2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MCk7XG5cbnZhciBfaWNvblBpY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pY29uUGlja2VyKTtcblxudmFyIF90b29sdGlwID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MSk7XG5cbnZhciBfdG9vbHRpcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b29sdGlwKTtcblxudmFyIF9idWJibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwOCk7XG5cbnZhciBfYnViYmxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2J1YmJsZSk7XG5cbnZhciBfc25vdyA9IF9fd2VicGFja19yZXF1aXJlX18oNjIpO1xuXG52YXIgX3Nub3cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc25vdyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbl9jb3JlMi5kZWZhdWx0LnJlZ2lzdGVyKHtcbiAgJ2F0dHJpYnV0b3JzL2F0dHJpYnV0ZS9kaXJlY3Rpb24nOiBfZGlyZWN0aW9uLkRpcmVjdGlvbkF0dHJpYnV0ZSxcblxuICAnYXR0cmlidXRvcnMvY2xhc3MvYWxpZ24nOiBfYWxpZ24uQWxpZ25DbGFzcyxcbiAgJ2F0dHJpYnV0b3JzL2NsYXNzL2JhY2tncm91bmQnOiBfYmFja2dyb3VuZC5CYWNrZ3JvdW5kQ2xhc3MsXG4gICdhdHRyaWJ1dG9ycy9jbGFzcy9jb2xvcic6IF9jb2xvci5Db2xvckNsYXNzLFxuICAnYXR0cmlidXRvcnMvY2xhc3MvZGlyZWN0aW9uJzogX2RpcmVjdGlvbi5EaXJlY3Rpb25DbGFzcyxcbiAgJ2F0dHJpYnV0b3JzL2NsYXNzL2ZvbnQnOiBfZm9udC5Gb250Q2xhc3MsXG4gICdhdHRyaWJ1dG9ycy9jbGFzcy9zaXplJzogX3NpemUuU2l6ZUNsYXNzLFxuXG4gICdhdHRyaWJ1dG9ycy9zdHlsZS9hbGlnbic6IF9hbGlnbi5BbGlnblN0eWxlLFxuICAnYXR0cmlidXRvcnMvc3R5bGUvYmFja2dyb3VuZCc6IF9iYWNrZ3JvdW5kLkJhY2tncm91bmRTdHlsZSxcbiAgJ2F0dHJpYnV0b3JzL3N0eWxlL2NvbG9yJzogX2NvbG9yLkNvbG9yU3R5bGUsXG4gICdhdHRyaWJ1dG9ycy9zdHlsZS9kaXJlY3Rpb24nOiBfZGlyZWN0aW9uLkRpcmVjdGlvblN0eWxlLFxuICAnYXR0cmlidXRvcnMvc3R5bGUvZm9udCc6IF9mb250LkZvbnRTdHlsZSxcbiAgJ2F0dHJpYnV0b3JzL3N0eWxlL3NpemUnOiBfc2l6ZS5TaXplU3R5bGVcbn0sIHRydWUpO1xuXG5fY29yZTIuZGVmYXVsdC5yZWdpc3Rlcih7XG4gICdmb3JtYXRzL2FsaWduJzogX2FsaWduLkFsaWduQ2xhc3MsXG4gICdmb3JtYXRzL2RpcmVjdGlvbic6IF9kaXJlY3Rpb24uRGlyZWN0aW9uQ2xhc3MsXG4gICdmb3JtYXRzL2luZGVudCc6IF9pbmRlbnQuSW5kZW50Q2xhc3MsXG5cbiAgJ2Zvcm1hdHMvYmFja2dyb3VuZCc6IF9iYWNrZ3JvdW5kLkJhY2tncm91bmRTdHlsZSxcbiAgJ2Zvcm1hdHMvY29sb3InOiBfY29sb3IuQ29sb3JTdHlsZSxcbiAgJ2Zvcm1hdHMvZm9udCc6IF9mb250LkZvbnRDbGFzcyxcbiAgJ2Zvcm1hdHMvc2l6ZSc6IF9zaXplLlNpemVDbGFzcyxcblxuICAnZm9ybWF0cy9ibG9ja3F1b3RlJzogX2Jsb2NrcXVvdGUyLmRlZmF1bHQsXG4gICdmb3JtYXRzL2NvZGUtYmxvY2snOiBfY29kZTIuZGVmYXVsdCxcbiAgJ2Zvcm1hdHMvaGVhZGVyJzogX2hlYWRlcjIuZGVmYXVsdCxcbiAgJ2Zvcm1hdHMvbGlzdCc6IF9saXN0Mi5kZWZhdWx0LFxuXG4gICdmb3JtYXRzL2JvbGQnOiBfYm9sZDIuZGVmYXVsdCxcbiAgJ2Zvcm1hdHMvY29kZSc6IF9jb2RlLkNvZGUsXG4gICdmb3JtYXRzL2l0YWxpYyc6IF9pdGFsaWMyLmRlZmF1bHQsXG4gICdmb3JtYXRzL2xpbmsnOiBfbGluazIuZGVmYXVsdCxcbiAgJ2Zvcm1hdHMvc2NyaXB0JzogX3NjcmlwdDIuZGVmYXVsdCxcbiAgJ2Zvcm1hdHMvc3RyaWtlJzogX3N0cmlrZTIuZGVmYXVsdCxcbiAgJ2Zvcm1hdHMvdW5kZXJsaW5lJzogX3VuZGVybGluZTIuZGVmYXVsdCxcblxuICAnZm9ybWF0cy9pbWFnZSc6IF9pbWFnZTIuZGVmYXVsdCxcbiAgJ2Zvcm1hdHMvdmlkZW8nOiBfdmlkZW8yLmRlZmF1bHQsXG5cbiAgJ2Zvcm1hdHMvbGlzdC9pdGVtJzogX2xpc3QuTGlzdEl0ZW0sXG5cbiAgJ21vZHVsZXMvZm9ybXVsYSc6IF9mb3JtdWxhMi5kZWZhdWx0LFxuICAnbW9kdWxlcy9zeW50YXgnOiBfc3ludGF4Mi5kZWZhdWx0LFxuICAnbW9kdWxlcy90b29sYmFyJzogX3Rvb2xiYXIyLmRlZmF1bHQsXG5cbiAgJ3RoZW1lcy9idWJibGUnOiBfYnViYmxlMi5kZWZhdWx0LFxuICAndGhlbWVzL3Nub3cnOiBfc25vdzIuZGVmYXVsdCxcblxuICAndWkvaWNvbnMnOiBfaWNvbnMyLmRlZmF1bHQsXG4gICd1aS9waWNrZXInOiBfcGlja2VyMi5kZWZhdWx0LFxuICAndWkvaWNvbi1waWNrZXInOiBfaWNvblBpY2tlcjIuZGVmYXVsdCxcbiAgJ3VpL2NvbG9yLXBpY2tlcic6IF9jb2xvclBpY2tlcjIuZGVmYXVsdCxcbiAgJ3VpL3Rvb2x0aXAnOiBfdG9vbHRpcDIuZGVmYXVsdFxufSwgdHJ1ZSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9jb3JlMi5kZWZhdWx0O1xuXG4vKioqLyB9KSxcbi8qIDY0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkluZGVudENsYXNzID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgSWRlbnRBdHRyaWJ1dG9yID0gZnVuY3Rpb24gKF9QYXJjaG1lbnQkQXR0cmlidXRvcikge1xuICBfaW5oZXJpdHMoSWRlbnRBdHRyaWJ1dG9yLCBfUGFyY2htZW50JEF0dHJpYnV0b3IpO1xuXG4gIGZ1bmN0aW9uIElkZW50QXR0cmlidXRvcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSWRlbnRBdHRyaWJ1dG9yKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoSWRlbnRBdHRyaWJ1dG9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSWRlbnRBdHRyaWJ1dG9yKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSWRlbnRBdHRyaWJ1dG9yLCBbe1xuICAgIGtleTogJ2FkZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChub2RlLCB2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09PSAnKzEnIHx8IHZhbHVlID09PSAnLTEnKSB7XG4gICAgICAgIHZhciBpbmRlbnQgPSB0aGlzLnZhbHVlKG5vZGUpIHx8IDA7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgPT09ICcrMScgPyBpbmRlbnQgKyAxIDogaW5kZW50IC0gMTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgICB0aGlzLnJlbW92ZShub2RlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gX2dldChJZGVudEF0dHJpYnV0b3IucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSWRlbnRBdHRyaWJ1dG9yLnByb3RvdHlwZSksICdhZGQnLCB0aGlzKS5jYWxsKHRoaXMsIG5vZGUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjYW5BZGQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5BZGQobm9kZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBfZ2V0KElkZW50QXR0cmlidXRvci5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJZGVudEF0dHJpYnV0b3IucHJvdG90eXBlKSwgJ2NhbkFkZCcsIHRoaXMpLmNhbGwodGhpcywgbm9kZSwgdmFsdWUpIHx8IF9nZXQoSWRlbnRBdHRyaWJ1dG9yLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKElkZW50QXR0cmlidXRvci5wcm90b3R5cGUpLCAnY2FuQWRkJywgdGhpcykuY2FsbCh0aGlzLCBub2RlLCBwYXJzZUludCh2YWx1ZSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3ZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUobm9kZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KF9nZXQoSWRlbnRBdHRyaWJ1dG9yLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKElkZW50QXR0cmlidXRvci5wcm90b3R5cGUpLCAndmFsdWUnLCB0aGlzKS5jYWxsKHRoaXMsIG5vZGUpKSB8fCB1bmRlZmluZWQ7IC8vIERvbid0IHJldHVybiBOYU5cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSWRlbnRBdHRyaWJ1dG9yO1xufShfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuQ2xhc3MpO1xuXG52YXIgSW5kZW50Q2xhc3MgPSBuZXcgSWRlbnRBdHRyaWJ1dG9yKCdpbmRlbnQnLCAncWwtaW5kZW50Jywge1xuICBzY29wZTogX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5CTE9DSyxcbiAgd2hpdGVsaXN0OiBbMSwgMiwgMywgNCwgNSwgNiwgNywgOF1cbn0pO1xuXG5leHBvcnRzLkluZGVudENsYXNzID0gSW5kZW50Q2xhc3M7XG5cbi8qKiovIH0pLFxuLyogNjUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9ibG9jayA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfYmxvY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmxvY2spO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBCbG9ja3F1b3RlID0gZnVuY3Rpb24gKF9CbG9jaykge1xuICBfaW5oZXJpdHMoQmxvY2txdW90ZSwgX0Jsb2NrKTtcblxuICBmdW5jdGlvbiBCbG9ja3F1b3RlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCbG9ja3F1b3RlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQmxvY2txdW90ZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrcXVvdGUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBCbG9ja3F1b3RlO1xufShfYmxvY2syLmRlZmF1bHQpO1xuXG5CbG9ja3F1b3RlLmJsb3ROYW1lID0gJ2Jsb2NrcXVvdGUnO1xuQmxvY2txdW90ZS50YWdOYW1lID0gJ2Jsb2NrcXVvdGUnO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBCbG9ja3F1b3RlO1xuXG4vKioqLyB9KSxcbi8qIDY2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfYmxvY2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2Jsb2NrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jsb2NrKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgSGVhZGVyID0gZnVuY3Rpb24gKF9CbG9jaykge1xuICBfaW5oZXJpdHMoSGVhZGVyLCBfQmxvY2spO1xuXG4gIGZ1bmN0aW9uIEhlYWRlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGVhZGVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoSGVhZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSGVhZGVyKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSGVhZGVyLCBudWxsLCBbe1xuICAgIGtleTogJ2Zvcm1hdHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRzKGRvbU5vZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnRhZ05hbWUuaW5kZXhPZihkb21Ob2RlLnRhZ05hbWUpICsgMTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSGVhZGVyO1xufShfYmxvY2syLmRlZmF1bHQpO1xuXG5IZWFkZXIuYmxvdE5hbWUgPSAnaGVhZGVyJztcbkhlYWRlci50YWdOYW1lID0gWydIMScsICdIMicsICdIMycsICdINCcsICdINScsICdINiddO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBIZWFkZXI7XG5cbi8qKiovIH0pLFxuLyogNjcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuTGlzdEl0ZW0gPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX2Jsb2NrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIF9ibG9jazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ibG9jayk7XG5cbnZhciBfY29udGFpbmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cbnZhciBfY29udGFpbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbnRhaW5lcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIExpc3RJdGVtID0gZnVuY3Rpb24gKF9CbG9jaykge1xuICBfaW5oZXJpdHMoTGlzdEl0ZW0sIF9CbG9jayk7XG5cbiAgZnVuY3Rpb24gTGlzdEl0ZW0oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpc3RJdGVtKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTGlzdEl0ZW0uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMaXN0SXRlbSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKExpc3RJdGVtLCBbe1xuICAgIGtleTogJ2Zvcm1hdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdChuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKG5hbWUgPT09IExpc3QuYmxvdE5hbWUgJiYgIXZhbHVlKSB7XG4gICAgICAgIHRoaXMucmVwbGFjZVdpdGgoX3BhcmNobWVudDIuZGVmYXVsdC5jcmVhdGUodGhpcy5zdGF0aWNzLnNjb3BlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfZ2V0KExpc3RJdGVtLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExpc3RJdGVtLnByb3RvdHlwZSksICdmb3JtYXQnLCB0aGlzKS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICBpZiAodGhpcy5wcmV2ID09IG51bGwgJiYgdGhpcy5uZXh0ID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQucmVtb3ZlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfZ2V0KExpc3RJdGVtLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExpc3RJdGVtLnByb3RvdHlwZSksICdyZW1vdmUnLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlcGxhY2VXaXRoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVwbGFjZVdpdGgobmFtZSwgdmFsdWUpIHtcbiAgICAgIHRoaXMucGFyZW50Lmlzb2xhdGUodGhpcy5vZmZzZXQodGhpcy5wYXJlbnQpLCB0aGlzLmxlbmd0aCgpKTtcbiAgICAgIGlmIChuYW1lID09PSB0aGlzLnBhcmVudC5zdGF0aWNzLmJsb3ROYW1lKSB7XG4gICAgICAgIHRoaXMucGFyZW50LnJlcGxhY2VXaXRoKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBhcmVudC51bndyYXAoKTtcbiAgICAgICAgcmV0dXJuIF9nZXQoTGlzdEl0ZW0ucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGlzdEl0ZW0ucHJvdG90eXBlKSwgJ3JlcGxhY2VXaXRoJywgdGhpcykuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6ICdmb3JtYXRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0cyhkb21Ob2RlKSB7XG4gICAgICByZXR1cm4gZG9tTm9kZS50YWdOYW1lID09PSB0aGlzLnRhZ05hbWUgPyB1bmRlZmluZWQgOiBfZ2V0KExpc3RJdGVtLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGlzdEl0ZW0pLCAnZm9ybWF0cycsIHRoaXMpLmNhbGwodGhpcywgZG9tTm9kZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExpc3RJdGVtO1xufShfYmxvY2syLmRlZmF1bHQpO1xuXG5MaXN0SXRlbS5ibG90TmFtZSA9ICdsaXN0LWl0ZW0nO1xuTGlzdEl0ZW0udGFnTmFtZSA9ICdMSSc7XG5cbnZhciBMaXN0ID0gZnVuY3Rpb24gKF9Db250YWluZXIpIHtcbiAgX2luaGVyaXRzKExpc3QsIF9Db250YWluZXIpO1xuXG4gIF9jcmVhdGVDbGFzcyhMaXN0LCBudWxsLCBbe1xuICAgIGtleTogJ2NyZWF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgdmFyIHRhZ05hbWUgPSB2YWx1ZSA9PT0gJ29yZGVyZWQnID8gJ09MJyA6ICdVTCc7XG4gICAgICB2YXIgbm9kZSA9IF9nZXQoTGlzdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExpc3QpLCAnY3JlYXRlJywgdGhpcykuY2FsbCh0aGlzLCB0YWdOYW1lKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJ2NoZWNrZWQnIHx8IHZhbHVlID09PSAndW5jaGVja2VkJykge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgnZGF0YS1jaGVja2VkJywgdmFsdWUgPT09ICdjaGVja2VkJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0cyhkb21Ob2RlKSB7XG4gICAgICBpZiAoZG9tTm9kZS50YWdOYW1lID09PSAnT0wnKSByZXR1cm4gJ29yZGVyZWQnO1xuICAgICAgaWYgKGRvbU5vZGUudGFnTmFtZSA9PT0gJ1VMJykge1xuICAgICAgICBpZiAoZG9tTm9kZS5oYXNBdHRyaWJ1dGUoJ2RhdGEtY2hlY2tlZCcpKSB7XG4gICAgICAgICAgcmV0dXJuIGRvbU5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWNoZWNrZWQnKSA9PT0gJ3RydWUnID8gJ2NoZWNrZWQnIDogJ3VuY2hlY2tlZCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICdidWxsZXQnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfV0pO1xuXG4gIGZ1bmN0aW9uIExpc3QoZG9tTm9kZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaXN0KTtcblxuICAgIHZhciBfdGhpczIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTGlzdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExpc3QpKS5jYWxsKHRoaXMsIGRvbU5vZGUpKTtcblxuICAgIHZhciBsaXN0RXZlbnRIYW5kbGVyID0gZnVuY3Rpb24gbGlzdEV2ZW50SGFuZGxlcihlKSB7XG4gICAgICBpZiAoZS50YXJnZXQucGFyZW50Tm9kZSAhPT0gZG9tTm9kZSkgcmV0dXJuO1xuICAgICAgdmFyIGZvcm1hdCA9IF90aGlzMi5zdGF0aWNzLmZvcm1hdHMoZG9tTm9kZSk7XG4gICAgICB2YXIgYmxvdCA9IF9wYXJjaG1lbnQyLmRlZmF1bHQuZmluZChlLnRhcmdldCk7XG4gICAgICBpZiAoZm9ybWF0ID09PSAnY2hlY2tlZCcpIHtcbiAgICAgICAgYmxvdC5mb3JtYXQoJ2xpc3QnLCAndW5jaGVja2VkJyk7XG4gICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ3VuY2hlY2tlZCcpIHtcbiAgICAgICAgYmxvdC5mb3JtYXQoJ2xpc3QnLCAnY2hlY2tlZCcpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBkb21Ob2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBsaXN0RXZlbnRIYW5kbGVyKTtcbiAgICBkb21Ob2RlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGxpc3RFdmVudEhhbmRsZXIpO1xuICAgIHJldHVybiBfdGhpczI7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTGlzdCwgW3tcbiAgICBrZXk6ICdmb3JtYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXQobmFtZSwgdmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi50YWlsLmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdHMoKSB7XG4gICAgICAvLyBXZSBkb24ndCBpbmhlcml0IGZyb20gRm9ybWF0QmxvdFxuICAgICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhpcy5zdGF0aWNzLmJsb3ROYW1lLCB0aGlzLnN0YXRpY3MuZm9ybWF0cyh0aGlzLmRvbU5vZGUpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRCZWZvcmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRCZWZvcmUoYmxvdCwgcmVmKSB7XG4gICAgICBpZiAoYmxvdCBpbnN0YW5jZW9mIExpc3RJdGVtKSB7XG4gICAgICAgIF9nZXQoTGlzdC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMaXN0LnByb3RvdHlwZSksICdpbnNlcnRCZWZvcmUnLCB0aGlzKS5jYWxsKHRoaXMsIGJsb3QsIHJlZik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaW5kZXggPSByZWYgPT0gbnVsbCA/IHRoaXMubGVuZ3RoKCkgOiByZWYub2Zmc2V0KHRoaXMpO1xuICAgICAgICB2YXIgYWZ0ZXIgPSB0aGlzLnNwbGl0KGluZGV4KTtcbiAgICAgICAgYWZ0ZXIucGFyZW50Lmluc2VydEJlZm9yZShibG90LCBhZnRlcik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb3B0aW1pemUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcHRpbWl6ZShjb250ZXh0KSB7XG4gICAgICBfZ2V0KExpc3QucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGlzdC5wcm90b3R5cGUpLCAnb3B0aW1pemUnLCB0aGlzKS5jYWxsKHRoaXMsIGNvbnRleHQpO1xuICAgICAgdmFyIG5leHQgPSB0aGlzLm5leHQ7XG4gICAgICBpZiAobmV4dCAhPSBudWxsICYmIG5leHQucHJldiA9PT0gdGhpcyAmJiBuZXh0LnN0YXRpY3MuYmxvdE5hbWUgPT09IHRoaXMuc3RhdGljcy5ibG90TmFtZSAmJiBuZXh0LmRvbU5vZGUudGFnTmFtZSA9PT0gdGhpcy5kb21Ob2RlLnRhZ05hbWUgJiYgbmV4dC5kb21Ob2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1jaGVja2VkJykgPT09IHRoaXMuZG9tTm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2hlY2tlZCcpKSB7XG4gICAgICAgIG5leHQubW92ZUNoaWxkcmVuKHRoaXMpO1xuICAgICAgICBuZXh0LnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlcGxhY2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXBsYWNlKHRhcmdldCkge1xuICAgICAgaWYgKHRhcmdldC5zdGF0aWNzLmJsb3ROYW1lICE9PSB0aGlzLnN0YXRpY3MuYmxvdE5hbWUpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBfcGFyY2htZW50Mi5kZWZhdWx0LmNyZWF0ZSh0aGlzLnN0YXRpY3MuZGVmYXVsdENoaWxkKTtcbiAgICAgICAgdGFyZ2V0Lm1vdmVDaGlsZHJlbihpdGVtKTtcbiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChpdGVtKTtcbiAgICAgIH1cbiAgICAgIF9nZXQoTGlzdC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMaXN0LnByb3RvdHlwZSksICdyZXBsYWNlJywgdGhpcykuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMaXN0O1xufShfY29udGFpbmVyMi5kZWZhdWx0KTtcblxuTGlzdC5ibG90TmFtZSA9ICdsaXN0Jztcbkxpc3Quc2NvcGUgPSBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLkJMT0NLX0JMT1Q7XG5MaXN0LnRhZ05hbWUgPSBbJ09MJywgJ1VMJ107XG5MaXN0LmRlZmF1bHRDaGlsZCA9ICdsaXN0LWl0ZW0nO1xuTGlzdC5hbGxvd2VkQ2hpbGRyZW4gPSBbTGlzdEl0ZW1dO1xuXG5leHBvcnRzLkxpc3RJdGVtID0gTGlzdEl0ZW07XG5leHBvcnRzLmRlZmF1bHQgPSBMaXN0O1xuXG4vKioqLyB9KSxcbi8qIDY4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfYm9sZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTYpO1xuXG52YXIgX2JvbGQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYm9sZCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEl0YWxpYyA9IGZ1bmN0aW9uIChfQm9sZCkge1xuICBfaW5oZXJpdHMoSXRhbGljLCBfQm9sZCk7XG5cbiAgZnVuY3Rpb24gSXRhbGljKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJdGFsaWMpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChJdGFsaWMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJdGFsaWMpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBJdGFsaWM7XG59KF9ib2xkMi5kZWZhdWx0KTtcblxuSXRhbGljLmJsb3ROYW1lID0gJ2l0YWxpYyc7XG5JdGFsaWMudGFnTmFtZSA9IFsnRU0nLCAnSSddO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBJdGFsaWM7XG5cbi8qKiovIH0pLFxuLyogNjkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX2lubGluZSA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5saW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lubGluZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFNjcmlwdCA9IGZ1bmN0aW9uIChfSW5saW5lKSB7XG4gIF9pbmhlcml0cyhTY3JpcHQsIF9JbmxpbmUpO1xuXG4gIGZ1bmN0aW9uIFNjcmlwdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2NyaXB0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU2NyaXB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2NyaXB0KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2NyaXB0LCBudWxsLCBbe1xuICAgIGtleTogJ2NyZWF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09PSAnc3VwZXInKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdXAnKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICdzdWInKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdWInKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBfZ2V0KFNjcmlwdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNjcmlwdCksICdjcmVhdGUnLCB0aGlzKS5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0cyhkb21Ob2RlKSB7XG4gICAgICBpZiAoZG9tTm9kZS50YWdOYW1lID09PSAnU1VCJykgcmV0dXJuICdzdWInO1xuICAgICAgaWYgKGRvbU5vZGUudGFnTmFtZSA9PT0gJ1NVUCcpIHJldHVybiAnc3VwZXInO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2NyaXB0O1xufShfaW5saW5lMi5kZWZhdWx0KTtcblxuU2NyaXB0LmJsb3ROYW1lID0gJ3NjcmlwdCc7XG5TY3JpcHQudGFnTmFtZSA9IFsnU1VCJywgJ1NVUCddO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTY3JpcHQ7XG5cbi8qKiovIH0pLFxuLyogNzAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9pbmxpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX2lubGluZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmxpbmUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTdHJpa2UgPSBmdW5jdGlvbiAoX0lubGluZSkge1xuICBfaW5oZXJpdHMoU3RyaWtlLCBfSW5saW5lKTtcblxuICBmdW5jdGlvbiBTdHJpa2UoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0cmlrZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFN0cmlrZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFN0cmlrZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIFN0cmlrZTtcbn0oX2lubGluZTIuZGVmYXVsdCk7XG5cblN0cmlrZS5ibG90TmFtZSA9ICdzdHJpa2UnO1xuU3RyaWtlLnRhZ05hbWUgPSAnUyc7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFN0cmlrZTtcblxuLyoqKi8gfSksXG4vKiA3MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2lubGluZSA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5saW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lubGluZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFVuZGVybGluZSA9IGZ1bmN0aW9uIChfSW5saW5lKSB7XG4gIF9pbmhlcml0cyhVbmRlcmxpbmUsIF9JbmxpbmUpO1xuXG4gIGZ1bmN0aW9uIFVuZGVybGluZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVW5kZXJsaW5lKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVW5kZXJsaW5lLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVW5kZXJsaW5lKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICByZXR1cm4gVW5kZXJsaW5lO1xufShfaW5saW5lMi5kZWZhdWx0KTtcblxuVW5kZXJsaW5lLmJsb3ROYW1lID0gJ3VuZGVybGluZSc7XG5VbmRlcmxpbmUudGFnTmFtZSA9ICdVJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gVW5kZXJsaW5lO1xuXG4vKioqLyB9KSxcbi8qIDcyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX2xpbmsgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQVRUUklCVVRFUyA9IFsnYWx0JywgJ2hlaWdodCcsICd3aWR0aCddO1xuXG52YXIgSW1hZ2UgPSBmdW5jdGlvbiAoX1BhcmNobWVudCRFbWJlZCkge1xuICBfaW5oZXJpdHMoSW1hZ2UsIF9QYXJjaG1lbnQkRW1iZWQpO1xuXG4gIGZ1bmN0aW9uIEltYWdlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbWFnZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEltYWdlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSW1hZ2UpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhJbWFnZSwgW3tcbiAgICBrZXk6ICdmb3JtYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXQobmFtZSwgdmFsdWUpIHtcbiAgICAgIGlmIChBVFRSSUJVVEVTLmluZGV4T2YobmFtZSkgPiAtMSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICB0aGlzLmRvbU5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmRvbU5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfZ2V0KEltYWdlLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEltYWdlLnByb3RvdHlwZSksICdmb3JtYXQnLCB0aGlzKS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ2NyZWF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgdmFyIG5vZGUgPSBfZ2V0KEltYWdlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSW1hZ2UpLCAnY3JlYXRlJywgdGhpcykuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgnc3JjJywgdGhpcy5zYW5pdGl6ZSh2YWx1ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdHMoZG9tTm9kZSkge1xuICAgICAgcmV0dXJuIEFUVFJJQlVURVMucmVkdWNlKGZ1bmN0aW9uIChmb3JtYXRzLCBhdHRyaWJ1dGUpIHtcbiAgICAgICAgaWYgKGRvbU5vZGUuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICBmb3JtYXRzW2F0dHJpYnV0ZV0gPSBkb21Ob2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXRzO1xuICAgICAgfSwge30pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ21hdGNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWF0Y2godXJsKSB7XG4gICAgICByZXR1cm4gKC9cXC4oanBlP2d8Z2lmfHBuZykkLy50ZXN0KHVybCkgfHwgL15kYXRhOmltYWdlXFwvLis7YmFzZTY0Ly50ZXN0KHVybClcbiAgICAgICk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2FuaXRpemUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzYW5pdGl6ZSh1cmwpIHtcbiAgICAgIHJldHVybiAoMCwgX2xpbmsuc2FuaXRpemUpKHVybCwgWydodHRwJywgJ2h0dHBzJywgJ2RhdGEnXSkgPyB1cmwgOiAnLy86MCc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShkb21Ob2RlKSB7XG4gICAgICByZXR1cm4gZG9tTm9kZS5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJbWFnZTtcbn0oX3BhcmNobWVudDIuZGVmYXVsdC5FbWJlZCk7XG5cbkltYWdlLmJsb3ROYW1lID0gJ2ltYWdlJztcbkltYWdlLnRhZ05hbWUgPSAnSU1HJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gSW1hZ2U7XG5cbi8qKiovIH0pLFxuLyogNzMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX2Jsb2NrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIF9saW5rID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cbnZhciBfbGluazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saW5rKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQVRUUklCVVRFUyA9IFsnaGVpZ2h0JywgJ3dpZHRoJ107XG5cbnZhciBWaWRlbyA9IGZ1bmN0aW9uIChfQmxvY2tFbWJlZCkge1xuICBfaW5oZXJpdHMoVmlkZW8sIF9CbG9ja0VtYmVkKTtcblxuICBmdW5jdGlvbiBWaWRlbygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmlkZW8pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChWaWRlby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFZpZGVvKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVmlkZW8sIFt7XG4gICAga2V5OiAnZm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0KG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAoQVRUUklCVVRFUy5pbmRleE9mKG5hbWUpID4gLTEpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5kb21Ob2RlLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kb21Ob2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2dldChWaWRlby5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihWaWRlby5wcm90b3R5cGUpLCAnZm9ybWF0JywgdGhpcykuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6ICdjcmVhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUodmFsdWUpIHtcbiAgICAgIHZhciBub2RlID0gX2dldChWaWRlby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFZpZGVvKSwgJ2NyZWF0ZScsIHRoaXMpLmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2ZyYW1lYm9yZGVyJywgJzAnKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdhbGxvd2Z1bGxzY3JlZW4nLCB0cnVlKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdzcmMnLCB0aGlzLnNhbml0aXplKHZhbHVlKSk7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0cyhkb21Ob2RlKSB7XG4gICAgICByZXR1cm4gQVRUUklCVVRFUy5yZWR1Y2UoZnVuY3Rpb24gKGZvcm1hdHMsIGF0dHJpYnV0ZSkge1xuICAgICAgICBpZiAoZG9tTm9kZS5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlKSkge1xuICAgICAgICAgIGZvcm1hdHNbYXR0cmlidXRlXSA9IGRvbU5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdHM7XG4gICAgICB9LCB7fSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2FuaXRpemUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzYW5pdGl6ZSh1cmwpIHtcbiAgICAgIHJldHVybiBfbGluazIuZGVmYXVsdC5zYW5pdGl6ZSh1cmwpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3ZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoZG9tTm9kZSkge1xuICAgICAgcmV0dXJuIGRvbU5vZGUuZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVmlkZW87XG59KF9ibG9jay5CbG9ja0VtYmVkKTtcblxuVmlkZW8uYmxvdE5hbWUgPSAndmlkZW8nO1xuVmlkZW8uY2xhc3NOYW1lID0gJ3FsLXZpZGVvJztcblZpZGVvLnRhZ05hbWUgPSAnSUZSQU1FJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gVmlkZW87XG5cbi8qKiovIH0pLFxuLyogNzQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuRm9ybXVsYUJsb3QgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9lbWJlZCA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xuXG52YXIgX2VtYmVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VtYmVkKTtcblxudmFyIF9xdWlsbCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfcXVpbGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGwpO1xuXG52YXIgX21vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfbW9kdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vZHVsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEZvcm11bGFCbG90ID0gZnVuY3Rpb24gKF9FbWJlZCkge1xuICBfaW5oZXJpdHMoRm9ybXVsYUJsb3QsIF9FbWJlZCk7XG5cbiAgZnVuY3Rpb24gRm9ybXVsYUJsb3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvcm11bGFCbG90KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRm9ybXVsYUJsb3QuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihGb3JtdWxhQmxvdCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEZvcm11bGFCbG90LCBudWxsLCBbe1xuICAgIGtleTogJ2NyZWF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgdmFyIG5vZGUgPSBfZ2V0KEZvcm11bGFCbG90Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRm9ybXVsYUJsb3QpLCAnY3JlYXRlJywgdGhpcykuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICB3aW5kb3cua2F0ZXgucmVuZGVyKHZhbHVlLCBub2RlLCB7XG4gICAgICAgICAgdGhyb3dPbkVycm9yOiBmYWxzZSxcbiAgICAgICAgICBlcnJvckNvbG9yOiAnI2YwMCdcbiAgICAgICAgfSk7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJywgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShkb21Ob2RlKSB7XG4gICAgICByZXR1cm4gZG9tTm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRm9ybXVsYUJsb3Q7XG59KF9lbWJlZDIuZGVmYXVsdCk7XG5cbkZvcm11bGFCbG90LmJsb3ROYW1lID0gJ2Zvcm11bGEnO1xuRm9ybXVsYUJsb3QuY2xhc3NOYW1lID0gJ3FsLWZvcm11bGEnO1xuRm9ybXVsYUJsb3QudGFnTmFtZSA9ICdTUEFOJztcblxudmFyIEZvcm11bGEgPSBmdW5jdGlvbiAoX01vZHVsZSkge1xuICBfaW5oZXJpdHMoRm9ybXVsYSwgX01vZHVsZSk7XG5cbiAgX2NyZWF0ZUNsYXNzKEZvcm11bGEsIG51bGwsIFt7XG4gICAga2V5OiAncmVnaXN0ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlcigpIHtcbiAgICAgIF9xdWlsbDIuZGVmYXVsdC5yZWdpc3RlcihGb3JtdWxhQmxvdCwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgZnVuY3Rpb24gRm9ybXVsYSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9ybXVsYSk7XG5cbiAgICB2YXIgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEZvcm11bGEuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihGb3JtdWxhKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBpZiAod2luZG93LmthdGV4ID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRm9ybXVsYSBtb2R1bGUgcmVxdWlyZXMgS2FUZVguJyk7XG4gICAgfVxuICAgIHJldHVybiBfdGhpczI7XG4gIH1cblxuICByZXR1cm4gRm9ybXVsYTtcbn0oX21vZHVsZTIuZGVmYXVsdCk7XG5cbmV4cG9ydHMuRm9ybXVsYUJsb3QgPSBGb3JtdWxhQmxvdDtcbmV4cG9ydHMuZGVmYXVsdCA9IEZvcm11bGE7XG5cbi8qKiovIH0pLFxuLyogNzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuQ29kZVRva2VuID0gZXhwb3J0cy5Db2RlQmxvY2sgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX3F1aWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF9xdWlsbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWlsbCk7XG5cbnZhciBfbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblxudmFyIF9tb2R1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9kdWxlKTtcblxudmFyIF9jb2RlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cbnZhciBfY29kZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb2RlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgU3ludGF4Q29kZUJsb2NrID0gZnVuY3Rpb24gKF9Db2RlQmxvY2spIHtcbiAgX2luaGVyaXRzKFN5bnRheENvZGVCbG9jaywgX0NvZGVCbG9jayk7XG5cbiAgZnVuY3Rpb24gU3ludGF4Q29kZUJsb2NrKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTeW50YXhDb2RlQmxvY2spO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTeW50YXhDb2RlQmxvY2suX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTeW50YXhDb2RlQmxvY2spKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTeW50YXhDb2RlQmxvY2ssIFt7XG4gICAga2V5OiAncmVwbGFjZVdpdGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXBsYWNlV2l0aChibG9jaykge1xuICAgICAgdGhpcy5kb21Ob2RlLnRleHRDb250ZW50ID0gdGhpcy5kb21Ob2RlLnRleHRDb250ZW50O1xuICAgICAgdGhpcy5hdHRhY2goKTtcbiAgICAgIF9nZXQoU3ludGF4Q29kZUJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFN5bnRheENvZGVCbG9jay5wcm90b3R5cGUpLCAncmVwbGFjZVdpdGgnLCB0aGlzKS5jYWxsKHRoaXMsIGJsb2NrKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdoaWdobGlnaHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoaWdobGlnaHQoX2hpZ2hsaWdodCkge1xuICAgICAgdmFyIHRleHQgPSB0aGlzLmRvbU5vZGUudGV4dENvbnRlbnQ7XG4gICAgICBpZiAodGhpcy5jYWNoZWRUZXh0ICE9PSB0ZXh0KSB7XG4gICAgICAgIGlmICh0ZXh0LnRyaW0oKS5sZW5ndGggPiAwIHx8IHRoaXMuY2FjaGVkVGV4dCA9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5kb21Ob2RlLmlubmVySFRNTCA9IF9oaWdobGlnaHQodGV4dCk7XG4gICAgICAgICAgdGhpcy5kb21Ob2RlLm5vcm1hbGl6ZSgpO1xuICAgICAgICAgIHRoaXMuYXR0YWNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYWNoZWRUZXh0ID0gdGV4dDtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3ludGF4Q29kZUJsb2NrO1xufShfY29kZTIuZGVmYXVsdCk7XG5cblN5bnRheENvZGVCbG9jay5jbGFzc05hbWUgPSAncWwtc3ludGF4JztcblxudmFyIENvZGVUb2tlbiA9IG5ldyBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuQ2xhc3MoJ3Rva2VuJywgJ2hsanMnLCB7XG4gIHNjb3BlOiBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLklOTElORVxufSk7XG5cbnZhciBTeW50YXggPSBmdW5jdGlvbiAoX01vZHVsZSkge1xuICBfaW5oZXJpdHMoU3ludGF4LCBfTW9kdWxlKTtcblxuICBfY3JlYXRlQ2xhc3MoU3ludGF4LCBudWxsLCBbe1xuICAgIGtleTogJ3JlZ2lzdGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXIoKSB7XG4gICAgICBfcXVpbGwyLmRlZmF1bHQucmVnaXN0ZXIoQ29kZVRva2VuLCB0cnVlKTtcbiAgICAgIF9xdWlsbDIuZGVmYXVsdC5yZWdpc3RlcihTeW50YXhDb2RlQmxvY2ssIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIGZ1bmN0aW9uIFN5bnRheChxdWlsbCwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTeW50YXgpO1xuXG4gICAgdmFyIF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTeW50YXguX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTeW50YXgpKS5jYWxsKHRoaXMsIHF1aWxsLCBvcHRpb25zKSk7XG5cbiAgICBpZiAodHlwZW9mIF90aGlzMi5vcHRpb25zLmhpZ2hsaWdodCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTeW50YXggbW9kdWxlIHJlcXVpcmVzIGhpZ2hsaWdodC5qcy4gUGxlYXNlIGluY2x1ZGUgdGhlIGxpYnJhcnkgb24gdGhlIHBhZ2UgYmVmb3JlIFF1aWxsLicpO1xuICAgIH1cbiAgICB2YXIgdGltZXIgPSBudWxsO1xuICAgIF90aGlzMi5xdWlsbC5vbihfcXVpbGwyLmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9PUFRJTUlaRSwgZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5oaWdobGlnaHQoKTtcbiAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgfSwgX3RoaXMyLm9wdGlvbnMuaW50ZXJ2YWwpO1xuICAgIH0pO1xuICAgIF90aGlzMi5oaWdobGlnaHQoKTtcbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFN5bnRheCwgW3tcbiAgICBrZXk6ICdoaWdobGlnaHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoaWdobGlnaHQoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMucXVpbGwuc2VsZWN0aW9uLmNvbXBvc2luZykgcmV0dXJuO1xuICAgICAgdGhpcy5xdWlsbC51cGRhdGUoX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICB2YXIgcmFuZ2UgPSB0aGlzLnF1aWxsLmdldFNlbGVjdGlvbigpO1xuICAgICAgdGhpcy5xdWlsbC5zY3JvbGwuZGVzY2VuZGFudHMoU3ludGF4Q29kZUJsb2NrKS5mb3JFYWNoKGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgICAgIGNvZGUuaGlnaGxpZ2h0KF90aGlzMy5vcHRpb25zLmhpZ2hsaWdodCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucXVpbGwudXBkYXRlKF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICBpZiAocmFuZ2UgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3ludGF4O1xufShfbW9kdWxlMi5kZWZhdWx0KTtcblxuU3ludGF4LkRFRkFVTFRTID0ge1xuICBoaWdobGlnaHQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAod2luZG93LmhsanMgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gd2luZG93LmhsanMuaGlnaGxpZ2h0QXV0byh0ZXh0KTtcbiAgICAgIHJldHVybiByZXN1bHQudmFsdWU7XG4gICAgfTtcbiAgfSgpLFxuICBpbnRlcnZhbDogMTAwMFxufTtcblxuZXhwb3J0cy5Db2RlQmxvY2sgPSBTeW50YXhDb2RlQmxvY2s7XG5leHBvcnRzLkNvZGVUb2tlbiA9IENvZGVUb2tlbjtcbmV4cG9ydHMuZGVmYXVsdCA9IFN5bnRheDtcblxuLyoqKi8gfSksXG4vKiA3NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MyB4Mj0xNSB5MT05IHkyPTk+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MyB4Mj0xMyB5MT0xNCB5Mj0xND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0zIHgyPTkgeTE9NCB5Mj00PjwvbGluZT4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogNzcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTE1IHgyPTMgeTE9OSB5Mj05PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTE0IHgyPTQgeTE9MTQgeTI9MTQ+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTIgeDI9NiB5MT00IHkyPTQ+PC9saW5lPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA3OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTUgeDI9MyB5MT05IHkyPTk+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTUgeDI9NSB5MT0xNCB5Mj0xND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xNSB4Mj05IHkxPTQgeTI9ND48L2xpbmU+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDc5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xNSB4Mj0zIHkxPTkgeTI9OT48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xNSB4Mj0zIHkxPTE0IHkyPTE0PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTE1IHgyPTMgeTE9NCB5Mj00PjwvbGluZT4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogODAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGcgY2xhc3M9XFxcInFsLWZpbGwgcWwtY29sb3ItbGFiZWxcXFwiPiA8cG9seWdvbiBwb2ludHM9XFxcIjYgNi44NjggNiA2IDUgNiA1IDcgNS45NDIgNyA2IDYuODY4XFxcIj48L3BvbHlnb24+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD00IHk9ND48L3JlY3Q+IDxwb2x5Z29uIHBvaW50cz1cXFwiNi44MTcgNSA2IDUgNiA2IDYuMzggNiA2LjgxNyA1XFxcIj48L3BvbHlnb24+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0yIHk9Nj48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0zIHk9NT48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD00IHk9Nz48L3JlY3Q+IDxwb2x5Z29uIHBvaW50cz1cXFwiNCAxMS40MzkgNCAxMSAzIDExIDMgMTIgMy43NTUgMTIgNCAxMS40MzlcXFwiPjwvcG9seWdvbj4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTIgeT0xMj48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0yIHk9OT48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0yIHk9MTU+PC9yZWN0PiA8cG9seWdvbiBwb2ludHM9XFxcIjQuNjMgMTAgNCAxMCA0IDExIDQuMTkyIDExIDQuNjMgMTBcXFwiPjwvcG9seWdvbj4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTMgeT04PjwvcmVjdD4gPHBhdGggZD1NMTAuODMyLDQuMkwxMSw0LjU4MlY0SDEwLjcwOEExLjk0OCwxLjk0OCwwLDAsMSwxMC44MzIsNC4yWj48L3BhdGg+IDxwYXRoIGQ9TTcsNC41ODJMNy4xNjgsNC4yQTEuOTI5LDEuOTI5LDAsMCwxLDcuMjkyLDRIN1Y0LjU4Mlo+PC9wYXRoPiA8cGF0aCBkPU04LDEzSDcuNjgzbC0wLjM1MS44YTEuOTMzLDEuOTMzLDAsMCwxLS4xMjQuMkg4VjEzWj48L3BhdGg+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xMiB5PTI+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTEgeT0zPjwvcmVjdD4gPHBhdGggZD1NOSwzSDhWMy4yODJBMS45ODUsMS45ODUsMCwwLDEsOSwzWj48L3BhdGg+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0yIHk9Mz48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD02IHk9Mj48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0zIHk9Mj48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD01IHk9Mz48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD05IHk9Mj48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xNSB5PTE0PjwvcmVjdD4gPHBvbHlnb24gcG9pbnRzPVxcXCIxMy40NDcgMTAuMTc0IDEzLjQ2OSAxMC4yMjUgMTMuNDcyIDEwLjIzMiAxMy44MDggMTEgMTQgMTEgMTQgMTAgMTMuMzcgMTAgMTMuNDQ3IDEwLjE3NFxcXCI+PC9wb2x5Z29uPiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTMgeT03PjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTE1IHk9NT48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xNCB5PTY+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTUgeT04PjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTE0IHk9OT48L3JlY3Q+IDxwYXRoIGQ9TTMuNzc1LDE0SDN2MUg0VjE0LjMxNEExLjk3LDEuOTcsMCwwLDEsMy43NzUsMTRaPjwvcGF0aD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTE0IHk9Mz48L3JlY3Q+IDxwb2x5Z29uIHBvaW50cz1cXFwiMTIgNi44NjggMTIgNiAxMS42MiA2IDEyIDYuODY4XFxcIj48L3BvbHlnb24+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xNSB5PTI+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTIgeT01PjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTEzIHk9ND48L3JlY3Q+IDxwb2x5Z29uIHBvaW50cz1cXFwiMTIuOTMzIDkgMTMgOSAxMyA4IDEyLjQ5NSA4IDEyLjkzMyA5XFxcIj48L3BvbHlnb24+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD05IHk9MTQ+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9OCB5PTE1PjwvcmVjdD4gPHBhdGggZD1NNiwxNC45MjZWMTVIN1YxNC4zMTZBMS45OTMsMS45OTMsMCwwLDEsNiwxNC45MjZaPjwvcGF0aD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTUgeT0xNT48L3JlY3Q+IDxwYXRoIGQ9TTEwLjY2OCwxMy44TDEwLjMxNywxM0gxMHYxaDAuNzkyQTEuOTQ3LDEuOTQ3LDAsMCwxLDEwLjY2OCwxMy44Wj48L3BhdGg+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xMSB5PTE1PjwvcmVjdD4gPHBhdGggZD1NMTQuMzMyLDEyLjJhMS45OSwxLjk5LDAsMCwxLC4xNjYuOEgxNVYxMkgxNC4yNDVaPjwvcGF0aD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTE0IHk9MTU+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTUgeT0xMT48L3JlY3Q+IDwvZz4gPHBvbHlsaW5lIGNsYXNzPXFsLXN0cm9rZSBwb2ludHM9XFxcIjUuNSAxMyA5IDUgMTIuNSAxM1xcXCI+PC9wb2x5bGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTExLjYzIHgyPTYuMzggeTE9MTEgeTI9MTE+PC9saW5lPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA4MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cmVjdCBjbGFzcz1cXFwicWwtZmlsbCBxbC1zdHJva2VcXFwiIGhlaWdodD0zIHdpZHRoPTMgeD00IHk9NT48L3JlY3Q+IDxyZWN0IGNsYXNzPVxcXCJxbC1maWxsIHFsLXN0cm9rZVxcXCIgaGVpZ2h0PTMgd2lkdGg9MyB4PTExIHk9NT48L3JlY3Q+IDxwYXRoIGNsYXNzPVxcXCJxbC1ldmVuIHFsLWZpbGwgcWwtc3Ryb2tlXFxcIiBkPU03LDhjMCw0LjAzMS0zLDUtMyw1PjwvcGF0aD4gPHBhdGggY2xhc3M9XFxcInFsLWV2ZW4gcWwtZmlsbCBxbC1zdHJva2VcXFwiIGQ9TTE0LDhjMCw0LjAzMS0zLDUtMyw1PjwvcGF0aD4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogODIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBhdGggY2xhc3M9cWwtc3Ryb2tlIGQ9TTUsNEg5LjVBMi41LDIuNSwwLDAsMSwxMiw2LjV2MEEyLjUsMi41LDAsMCwxLDkuNSw5SDVBMCwwLDAsMCwxLDUsOVY0QTAsMCwwLDAsMSw1LDRaPjwvcGF0aD4gPHBhdGggY2xhc3M9cWwtc3Ryb2tlIGQ9TTUsOWg1LjVBMi41LDIuNSwwLDAsMSwxMywxMS41djBBMi41LDIuNSwwLDAsMSwxMC41LDE0SDVhMCwwLDAsMCwxLDAsMFY5QTAsMCwwLDAsMSw1LDlaPjwvcGF0aD4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogODMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgY2xhc3M9XFxcIlxcXCIgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTUgeDI9MTMgeTE9MyB5Mj0zPjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTYgeDI9OS4zNSB5MT0xMiB5Mj0zPjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTExIHgyPTE1IHkxPTExIHkyPTE1PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTE1IHgyPTExIHkxPTExIHkyPTE1PjwvbGluZT4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MSByeD0wLjUgcnk9MC41IHdpZHRoPTcgeD0yIHk9MTQ+PC9yZWN0PiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA4NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8bGluZSBjbGFzcz1cXFwicWwtY29sb3ItbGFiZWwgcWwtc3Ryb2tlIHFsLXRyYW5zcGFyZW50XFxcIiB4MT0zIHgyPTE1IHkxPTE1IHkyPTE1PjwvbGluZT4gPHBvbHlsaW5lIGNsYXNzPXFsLXN0cm9rZSBwb2ludHM9XFxcIjUuNSAxMSA5IDMgMTIuNSAxMVxcXCI+PC9wb2x5bGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTExLjYzIHgyPTYuMzggeTE9OSB5Mj05PjwvbGluZT4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogODUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBvbHlnb24gY2xhc3M9XFxcInFsLXN0cm9rZSBxbC1maWxsXFxcIiBwb2ludHM9XFxcIjMgMTEgNSA5IDMgNyAzIDExXFxcIj48L3BvbHlnb24+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtZmlsbFxcXCIgeDE9MTUgeDI9MTEgeTE9NCB5Mj00PjwvbGluZT4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xMSwzYTMsMywwLDAsMCwwLDZoMVYzSDExWj48L3BhdGg+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTExIHdpZHRoPTEgeD0xMSB5PTQ+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xMSB3aWR0aD0xIHg9MTMgeT00PjwvcmVjdD4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogODYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBvbHlnb24gY2xhc3M9XFxcInFsLXN0cm9rZSBxbC1maWxsXFxcIiBwb2ludHM9XFxcIjE1IDEyIDEzIDEwIDE1IDggMTUgMTJcXFwiPjwvcG9seWdvbj4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZSBxbC1maWxsXFxcIiB4MT05IHgyPTUgeTE9NCB5Mj00PjwvbGluZT4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU01LDNBMywzLDAsMCwwLDUsOUg2VjNINVo+PC9wYXRoPiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xMSB3aWR0aD0xIHg9NSB5PTQ+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xMSB3aWR0aD0xIHg9NyB5PTQ+PC9yZWN0PiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA4NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTE0LDE2SDRhMSwxLDAsMCwxLDAtMkgxNEExLDEsMCwwLDEsMTQsMTZaIC8+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTQsNEg0QTEsMSwwLDAsMSw0LDJIMTRBMSwxLDAsMCwxLDE0LDRaIC8+IDxyZWN0IGNsYXNzPXFsLWZpbGwgeD0zIHk9NiB3aWR0aD0xMiBoZWlnaHQ9NiByeD0xIHJ5PTEgLz4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogODggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xMywxNkg1YTEsMSwwLDAsMSwwLTJoOEExLDEsMCwwLDEsMTMsMTZaIC8+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTMsNEg1QTEsMSwwLDAsMSw1LDJoOEExLDEsMCwwLDEsMTMsNFogLz4gPHJlY3QgY2xhc3M9cWwtZmlsbCB4PTIgeT02IHdpZHRoPTE0IGhlaWdodD02IHJ4PTEgcnk9MSAvPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA4OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTE1LDhIMTNhMSwxLDAsMCwxLDAtMmgyQTEsMSwwLDAsMSwxNSw4WiAvPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTE1LDEySDEzYTEsMSwwLDAsMSwwLTJoMkExLDEsMCwwLDEsMTUsMTJaIC8+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTUsMTZINWExLDEsMCwwLDEsMC0ySDE1QTEsMSwwLDAsMSwxNSwxNlogLz4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xNSw0SDVBMSwxLDAsMCwxLDUsMkgxNUExLDEsMCwwLDEsMTUsNFogLz4gPHJlY3QgY2xhc3M9cWwtZmlsbCB4PTIgeT02IHdpZHRoPTggaGVpZ2h0PTYgcng9MSByeT0xIC8+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDkwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NNSw4SDNBMSwxLDAsMCwxLDMsNkg1QTEsMSwwLDAsMSw1LDhaIC8+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NNSwxMkgzYTEsMSwwLDAsMSwwLTJINUExLDEsMCwwLDEsNSwxMlogLz4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xMywxNkgzYTEsMSwwLDAsMSwwLTJIMTNBMSwxLDAsMCwxLDEzLDE2WiAvPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTEzLDRIM0ExLDEsMCwwLDEsMywySDEzQTEsMSwwLDAsMSwxMyw0WiAvPiA8cmVjdCBjbGFzcz1xbC1maWxsIHg9OCB5PTYgd2lkdGg9OCBoZWlnaHQ9NiByeD0xIHJ5PTEgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoMjQgMTgpIHJvdGF0ZSgtMTgwKVxcXCIvPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA5MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTExLjc1OSwyLjQ4MmEyLjU2MSwyLjU2MSwwLDAsMC0zLjUzLjYwN0E3LjY1Niw3LjY1NiwwLDAsMCw2LjgsNi4yQzYuMTA5LDkuMTg4LDUuMjc1LDE0LjY3Nyw0LjE1LDE0LjkyN2ExLjU0NSwxLjU0NSwwLDAsMC0xLjMtLjkzM0EwLjkyMiwwLjkyMiwwLDAsMCwyLDE1LjAzNlMxLjk1NCwxNiw0LjExOSwxNnMzLjA5MS0yLjY5MSwzLjctNS41NTNjMC4xNzctLjgyNi4zNi0xLjcyNiwwLjU1NC0yLjZMOC43NzUsNi4yYzAuMzgxLTEuNDIxLjgwNy0yLjUyMSwxLjMwNi0yLjY3NmExLjAxNCwxLjAxNCwwLDAsMCwxLjAyLjU2QTAuOTY2LDAuOTY2LDAsMCwwLDExLjc1OSwyLjQ4Mlo+PC9wYXRoPiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xLjYgcng9MC44IHJ5PTAuOCB3aWR0aD01IHg9NS4xNSB5PTYuMj48L3JlY3Q+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTMuNjYzLDEyLjAyN2ExLjY2MiwxLjY2MiwwLDAsMSwuMjY2LTAuMjc2cTAuMTkzLDAuMDY5LjQ1NiwwLjEzOGEyLjEsMi4xLDAsMCwwLC41MzUuMDY5LDEuMDc1LDEuMDc1LDAsMCwwLC43NjctMC4zLDEuMDQ0LDEuMDQ0LDAsMCwwLC4zMTQtMC44LDAuODQsMC44NCwwLDAsMC0uMjM4LTAuNjE5LDAuOCwwLjgsMCwwLDAtLjU5NC0wLjIzOSwxLjE1NCwxLjE1NCwwLDAsMC0uNzgxLjMsNC42MDcsNC42MDcsMCwwLDAtLjc4MSwxcS0wLjA5MS4xNS0uMjE4LDAuMzQ2bC0wLjI0Ni4zOGMtMC4wNjgtLjI4OC0wLjEzNy0wLjU4Mi0wLjIxMi0wLjg4NS0wLjQ1OS0xLjg0Ny0yLjQ5NC0uOTg0LTIuOTQxLTAuOC0wLjQ4Mi4yLS4zNTMsMC42NDctMC4wOTQsMC41MjlhMC44NjksMC44NjksMCwwLDEsMS4yODEuNTg1YzAuMjE3LDAuNzUxLjM3NywxLjQzNiwwLjUyNywyLjAzOGE1LjY4OCw1LjY4OCwwLDAsMS0uMzYyLjQ2NywyLjY5LDIuNjksMCwwLDEtLjI2NC4yNzFxLTAuMjIxLS4wOC0wLjQ3MS0wLjE0N2EyLjAyOSwyLjAyOSwwLDAsMC0uNTIyLTAuMDY2LDEuMDc5LDEuMDc5LDAsMCwwLS43NjguM0ExLjA1OCwxLjA1OCwwLDAsMCw5LDE1LjEzMWEwLjgyLDAuODIsMCwwLDAsLjgzMi44NTIsMS4xMzQsMS4xMzQsMCwwLDAsLjc4Ny0wLjMsNS4xMSw1LjExLDAsMCwwLC43NzYtMC45OTNxMC4xNDEtLjIxOS4yMTUtMC4zNGMwLjA0Ni0uMDc2LjEyMi0wLjE5NCwwLjIyMy0wLjM0NmEyLjc4NiwyLjc4NiwwLDAsMCwuOTE4LDEuNzI2LDIuNTgyLDIuNTgyLDAsMCwwLDIuMzc2LS4xODVjMC4zMTctLjE4MS4yMTItMC41NjUsMC0wLjQ5NEEwLjgwNywwLjgwNywwLDAsMSwxNC4xNzYsMTVhNS4xNTksNS4xNTksMCwwLDEtLjkxMy0yLjQ0NmwwLDBRMTMuNDg3LDEyLjI0LDEzLjY2MywxMi4wMjdaPjwvcGF0aD4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogOTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld0JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xMCw0VjE0YTEsMSwwLDAsMS0yLDBWMTBIM3Y0YTEsMSwwLDAsMS0yLDBWNEExLDEsMCwwLDEsMyw0VjhIOFY0YTEsMSwwLDAsMSwyLDBabTYuMDY3ODcsOS4yMDlIMTQuOTg5NzVWNy41OTg2M2EuNTQwODUuNTQwODUsMCwwLDAtLjYwNS0uNjA1NDdoLS42Mjc0NGExLjAxMTE5LDEuMDExMTksMCwwLDAtLjc0OC4yOTY4OEwxMS42NDUsOC41NjY0MWEuNTQzNS41NDM1LDAsMCwwLS4wMjIuODU4NGwuMjg2MTMuMzA3NjJhLjUzODYxLjUzODYxLDAsMCwwLC44NDcxNy4wMzMybC4wOTkxMi0uMDg3ODlhMS4yMTM3LDEuMjEzNywwLDAsMCwuMjQxNy0uMzUyNTRoLjAyMjQ2cy0uMDExMjMuMzA4NTktLjAxMTIzLjYwNTQ3VjEzLjIwOUgxMi4wNDFhLjU0MDg1LjU0MDg1LDAsMCwwLS42MDUuNjA1NDd2LjQzOTQ1YS41NDA4NS41NDA4NSwwLDAsMCwuNjA1LjYwNTQ3aDQuMDI2ODZhLjU0MDg1LjU0MDg1LDAsMCwwLC42MDUtLjYwNTQ3di0uNDM5NDVBLjU0MDg1LjU0MDg1LDAsMCwwLDE2LjA2Nzg3LDEzLjIwOVogLz4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogOTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld0JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xNi43Mzk3NSwxMy44MTQ0NXYuNDM5NDVhLjU0MDg1LjU0MDg1LDAsMCwxLS42MDUuNjA1NDdIMTEuODU1YS41ODM5Mi41ODM5MiwwLDAsMS0uNjQ4OTMtLjYwNTQ3VjE0LjAxMjdjMC0yLjkwNTI3LDMuMzk5NDEtMy40MjE4NywzLjM5OTQxLTQuNTU0NjlhLjc3Njc1Ljc3Njc1LDAsMCwwLS44NDcxNy0uNzgxMjUsMS4xNzY4NCwxLjE3Njg0LDAsMCwwLS44MzU5NC4zODQ3N2MtLjI3NDkuMjYzNjctLjU2MS4zNzQtLjg1NzkxLjEzMTg0bC0uNDI5Mi0uMzQwODJjLS4zMDgxMS0uMjQyMTktLjM4NTI1LS41MTc1OC0uMTU0My0uODE0NDVhMi45NzE1NSwyLjk3MTU1LDAsMCwxLDIuNDUzNjEtMS4xNzY3NiwyLjQ1MzkzLDIuNDUzOTMsMCwwLDEsMi42ODQwOCwyLjQwOTE4YzAsMi40NTMxMi0zLjE3OTIsMi45MjY3Ni0zLjI3ODMyLDMuOTM4NDhoMi43OTQ0M0EuNTQwODUuNTQwODUsMCwwLDEsMTYuNzM5NzUsMTMuODE0NDVaTTksM0EuOTk5NzQuOTk5NzQsMCwwLDAsOCw0VjhIM1Y0QTEsMSwwLDAsMCwxLDRWMTRhMSwxLDAsMCwwLDIsMFYxMEg4djRhMSwxLDAsMCwwLDIsMFY0QS45OTk3NC45OTk3NCwwLDAsMCw5LDNaIC8+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDk0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT03IHgyPTEzIHkxPTQgeTI9ND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT01IHgyPTExIHkxPTE0IHkyPTE0PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTggeDI9MTAgeTE9MTQgeTI9ND48L2xpbmU+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDk1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxyZWN0IGNsYXNzPXFsLXN0cm9rZSBoZWlnaHQ9MTAgd2lkdGg9MTIgeD0zIHk9ND48L3JlY3Q+IDxjaXJjbGUgY2xhc3M9cWwtZmlsbCBjeD02IGN5PTcgcj0xPjwvY2lyY2xlPiA8cG9seWxpbmUgY2xhc3M9XFxcInFsLWV2ZW4gcWwtZmlsbFxcXCIgcG9pbnRzPVxcXCI1IDEyIDUgMTEgNyA5IDggMTAgMTEgNyAxMyA5IDEzIDEyIDUgMTJcXFwiPjwvcG9seWxpbmU+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDk2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0zIHgyPTE1IHkxPTE0IHkyPTE0PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTMgeDI9MTUgeTE9NCB5Mj00PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTkgeDI9MTUgeTE9OSB5Mj05PjwvbGluZT4gPHBvbHlsaW5lIGNsYXNzPVxcXCJxbC1maWxsIHFsLXN0cm9rZVxcXCIgcG9pbnRzPVxcXCIzIDcgMyAxMSA1IDkgMyA3XFxcIj48L3BvbHlsaW5lPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA5NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MyB4Mj0xNSB5MT0xNCB5Mj0xND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0zIHgyPTE1IHkxPTQgeTI9ND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT05IHgyPTE1IHkxPTkgeTI9OT48L2xpbmU+IDxwb2x5bGluZSBjbGFzcz1xbC1zdHJva2UgcG9pbnRzPVxcXCI1IDcgNSAxMSAzIDkgNSA3XFxcIj48L3BvbHlsaW5lPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA5OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9NyB4Mj0xMSB5MT03IHkyPTExPjwvbGluZT4gPHBhdGggY2xhc3M9XFxcInFsLWV2ZW4gcWwtc3Ryb2tlXFxcIiBkPU04LjksNC41NzdhMy40NzYsMy40NzYsMCwwLDEsLjM2LDQuNjc5QTMuNDc2LDMuNDc2LDAsMCwxLDQuNTc3LDguOUMzLjE4NSw3LjUsMi4wMzUsNi40LDQuMjE3LDQuMjE3UzcuNSwzLjE4NSw4LjksNC41NzdaPjwvcGF0aD4gPHBhdGggY2xhc3M9XFxcInFsLWV2ZW4gcWwtc3Ryb2tlXFxcIiBkPU0xMy40MjMsOS4xYTMuNDc2LDMuNDc2LDAsMCwwLTQuNjc5LS4zNiwzLjQ3NiwzLjQ3NiwwLDAsMCwuMzYsNC42NzljMS4zOTIsMS4zOTIsMi41LDIuNTQyLDQuNjc5LjM2UzE0LjgxNSwxMC41LDEzLjQyMyw5LjFaPjwvcGF0aD4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogOTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTcgeDI9MTUgeTE9NCB5Mj00PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTcgeDI9MTUgeTE9OSB5Mj05PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTcgeDI9MTUgeTE9MTQgeTI9MTQ+PC9saW5lPiA8bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlIHFsLXRoaW5cXFwiIHgxPTIuNSB4Mj00LjUgeTE9NS41IHkyPTUuNT48L2xpbmU+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMy41LDZBMC41LDAuNSwwLDAsMSwzLDUuNVYzLjA4NWwtMC4yNzYuMTM4QTAuNSwwLjUsMCwwLDEsMi4wNTMsM2MtMC4xMjQtLjI0Ny0wLjAyMy0wLjMyNC4yMjQtMC40NDdsMS0uNUEwLjUsMC41LDAsMCwxLDQsMi41djNBMC41LDAuNSwwLDAsMSwzLjUsNlo+PC9wYXRoPiA8cGF0aCBjbGFzcz1cXFwicWwtc3Ryb2tlIHFsLXRoaW5cXFwiIGQ9TTQuNSwxMC41aC0yYzAtLjIzNCwxLjg1LTEuMDc2LDEuODUtMi4yMzRBMC45NTksMC45NTksMCwwLDAsMi41LDguMTU2PjwvcGF0aD4gPHBhdGggY2xhc3M9XFxcInFsLXN0cm9rZSBxbC10aGluXFxcIiBkPU0yLjUsMTQuODQ2YTAuOTU5LDAuOTU5LDAsMCwwLDEuODUtLjEwOUEwLjcsMC43LDAsMCwwLDMuNzUsMTRhMC42ODgsMC42ODgsMCwwLDAsLjYtMC43MzYsMC45NTksMC45NTksMCwwLDAtMS44NS0uMTA5PjwvcGF0aD4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogMTAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT02IHgyPTE1IHkxPTQgeTI9ND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT02IHgyPTE1IHkxPTkgeTI9OT48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT02IHgyPTE1IHkxPTE0IHkyPTE0PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTMgeDI9MyB5MT00IHkyPTQ+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MyB4Mj0zIHkxPTkgeTI9OT48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0zIHgyPTMgeTE9MTQgeTI9MTQ+PC9saW5lPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiAxMDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgY2xhc3M9XFxcIlxcXCIgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTkgeDI9MTUgeTE9NCB5Mj00PjwvbGluZT4gPHBvbHlsaW5lIGNsYXNzPXFsLXN0cm9rZSBwb2ludHM9XFxcIjMgNCA0IDUgNiAzXFxcIj48L3BvbHlsaW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9OSB4Mj0xNSB5MT0xNCB5Mj0xND48L2xpbmU+IDxwb2x5bGluZSBjbGFzcz1xbC1zdHJva2UgcG9pbnRzPVxcXCIzIDE0IDQgMTUgNiAxM1xcXCI+PC9wb2x5bGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTkgeDI9MTUgeTE9OSB5Mj05PjwvbGluZT4gPHBvbHlsaW5lIGNsYXNzPXFsLXN0cm9rZSBwb2ludHM9XFxcIjMgOSA0IDEwIDYgOFxcXCI+PC9wb2x5bGluZT4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogMTAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTUuNSwxNUgxMy44NjFhMy44NTgsMy44NTgsMCwwLDAsMS45MTQtMi45NzUsMS44LDEuOCwwLDAsMC0xLjYtMS43NTFBMS45MjEsMS45MjEsMCwwLDAsMTIuMDIxLDExLjdhMC41MDAxMywwLjUwMDEzLDAsMSwwLC45NTcuMjkxaDBhMC45MTQsMC45MTQsMCwwLDEsMS4wNTMtLjcyNSwwLjgxLDAuODEsMCwwLDEsLjc0NC43NjJjMCwxLjA3Ni0xLjE2OTcxLDEuODY5ODItMS45Mzk3MSwyLjQzMDgyQTEuNDU2MzksMS40NTYzOSwwLDAsMCwxMiwxNS41YTAuNSwwLjUsMCwwLDAsLjUuNWgzQTAuNSwwLjUsMCwwLDAsMTUuNSwxNVogLz4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU05LjY1LDUuMjQxYTEsMSwwLDAsMC0xLjQwOS4xMDhMNiw3Ljk2NCwzLjc1OSw1LjM0OUExLDEsMCwwLDAsMi4xOTIsNi41OTE3OFEyLjIxNTQxLDYuNjIxMywyLjI0MSw2LjY0OUw0LjY4NCw5LjUsMi4yNDEsMTIuMzVBMSwxLDAsMCwwLDMuNzEsMTMuNzA3MjJxMC4wMjU1Ny0uMDI3NjguMDQ5LTAuMDU3MjJMNiwxMS4wMzYsOC4yNDEsMTMuNjVhMSwxLDAsMSwwLDEuNTY3LTEuMjQyNzdROS43ODQ1OSwxMi4zNzc3LDkuNzU5LDEyLjM1TDcuMzE2LDkuNSw5Ljc1OSw2LjY1MUExLDEsMCwwLDAsOS42NSw1LjI0MVogLz4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogMTAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTUuNSw3SDEzLjg2MWE0LjAxNSw0LjAxNSwwLDAsMCwxLjkxNC0yLjk3NSwxLjgsMS44LDAsMCwwLTEuNi0xLjc1MUExLjkyMiwxLjkyMiwwLDAsMCwxMi4wMjEsMy43YTAuNSwwLjUsMCwxLDAsLjk1Ny4yOTEsMC45MTcsMC45MTcsMCwwLDEsMS4wNTMtLjcyNSwwLjgxLDAuODEsMCwwLDEsLjc0NC43NjJjMCwxLjA3Ny0xLjE2NCwxLjkyNS0xLjkzNCwyLjQ4NkExLjQyMywxLjQyMywwLDAsMCwxMiw3LjVhMC41LDAuNSwwLDAsMCwuNS41aDNBMC41LDAuNSwwLDAsMCwxNS41LDdaIC8+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NOS42NTEsNS4yNDFhMSwxLDAsMCwwLTEuNDEuMTA4TDYsNy45NjQsMy43NTksNS4zNDlhMSwxLDAsMSwwLTEuNTE5LDEuM0w0LjY4Myw5LjUsMi4yNDEsMTIuMzVhMSwxLDAsMSwwLDEuNTE5LDEuM0w2LDExLjAzNiw4LjI0MSwxMy42NWExLDEsMCwwLDAsMS41MTktMS4zTDcuMzE3LDkuNSw5Ljc1OSw2LjY1MUExLDEsMCwwLDAsOS42NTEsNS4yNDFaIC8+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDEwNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlIHFsLXRoaW5cXFwiIHgxPTE1LjUgeDI9Mi41IHkxPTguNSB5Mj05LjU+PC9saW5lPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTkuMDA3LDhDNi41NDIsNy43OTEsNiw3LjUxOSw2LDYuNSw2LDUuNzkyLDcuMjgzLDUsOSw1YzEuNTcxLDAsMi43NjUuNjc5LDIuOTY5LDEuMzA5YTEsMSwwLDAsMCwxLjktLjYxN0MxMy4zNTYsNC4xMDYsMTEuMzU0LDMsOSwzLDYuMiwzLDQsNC41MzgsNCw2LjVhMy4yLDMuMiwwLDAsMCwuNSwxLjg0M1o+PC9wYXRoPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTguOTg0LDEwQzExLjQ1NywxMC4yMDgsMTIsMTAuNDc5LDEyLDExLjVjMCwwLjcwOC0xLjI4MywxLjUtMywxLjUtMS41NzEsMC0yLjc2NS0uNjc5LTIuOTY5LTEuMzA5YTEsMSwwLDEsMC0xLjkuNjE3QzQuNjQ0LDEzLjg5NCw2LjY0NiwxNSw5LDE1YzIuOCwwLDUtMS41MzgsNS0zLjVhMy4yLDMuMiwwLDAsMC0uNS0xLjg0M1o+PC9wYXRoPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiAxMDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBhdGggY2xhc3M9cWwtc3Ryb2tlIGQ9TTUsM1Y5YTQuMDEyLDQuMDEyLDAsMCwwLDQsNEg5YTQuMDEyLDQuMDEyLDAsMCwwLDQtNFYzPjwvcGF0aD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MSByeD0wLjUgcnk9MC41IHdpZHRoPTEyIHg9MyB5PTE1PjwvcmVjdD4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogMTA2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxyZWN0IGNsYXNzPXFsLXN0cm9rZSBoZWlnaHQ9MTIgd2lkdGg9MTIgeD0zIHk9Mz48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEyIHdpZHRoPTEgeD01IHk9Mz48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEyIHdpZHRoPTEgeD0xMiB5PTM+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0yIHdpZHRoPTggeD01IHk9OD48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEgd2lkdGg9MyB4PTMgeT01PjwvcmVjdD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MSB3aWR0aD0zIHg9MyB5PTc+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xIHdpZHRoPTMgeD0zIHk9MTA+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xIHdpZHRoPTMgeD0zIHk9MTI+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xIHdpZHRoPTMgeD0xMiB5PTU+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xIHdpZHRoPTMgeD0xMiB5PTc+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xIHdpZHRoPTMgeD0xMiB5PTEwPjwvcmVjdD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MSB3aWR0aD0zIHg9MTIgeT0xMj48L3JlY3Q+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDEwNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cG9seWdvbiBjbGFzcz1xbC1zdHJva2UgcG9pbnRzPVxcXCI3IDExIDkgMTMgMTEgMTEgNyAxMVxcXCI+PC9wb2x5Z29uPiA8cG9seWdvbiBjbGFzcz1xbC1zdHJva2UgcG9pbnRzPVxcXCI3IDcgOSA1IDExIDcgNyA3XFxcIj48L3BvbHlnb24+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDEwOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5CdWJibGVUb29sdGlwID0gdW5kZWZpbmVkO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZXh0ZW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9leHRlbmQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kKTtcblxudmFyIF9lbWl0dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxudmFyIF9lbWl0dGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VtaXR0ZXIpO1xuXG52YXIgX2Jhc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKTtcblxudmFyIF9iYXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jhc2UpO1xuXG52YXIgX3NlbGVjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXG52YXIgX2ljb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5cbnZhciBfaWNvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaWNvbnMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBUT09MQkFSX0NPTkZJRyA9IFtbJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnXSwgW3sgaGVhZGVyOiAxIH0sIHsgaGVhZGVyOiAyIH0sICdibG9ja3F1b3RlJ11dO1xuXG52YXIgQnViYmxlVGhlbWUgPSBmdW5jdGlvbiAoX0Jhc2VUaGVtZSkge1xuICBfaW5oZXJpdHMoQnViYmxlVGhlbWUsIF9CYXNlVGhlbWUpO1xuXG4gIGZ1bmN0aW9uIEJ1YmJsZVRoZW1lKHF1aWxsLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1YmJsZVRoZW1lKTtcblxuICAgIGlmIChvcHRpb25zLm1vZHVsZXMudG9vbGJhciAhPSBudWxsICYmIG9wdGlvbnMubW9kdWxlcy50b29sYmFyLmNvbnRhaW5lciA9PSBudWxsKSB7XG4gICAgICBvcHRpb25zLm1vZHVsZXMudG9vbGJhci5jb250YWluZXIgPSBUT09MQkFSX0NPTkZJRztcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQnViYmxlVGhlbWUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCdWJibGVUaGVtZSkpLmNhbGwodGhpcywgcXVpbGwsIG9wdGlvbnMpKTtcblxuICAgIF90aGlzLnF1aWxsLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdxbC1idWJibGUnKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQnViYmxlVGhlbWUsIFt7XG4gICAga2V5OiAnZXh0ZW5kVG9vbGJhcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4dGVuZFRvb2xiYXIodG9vbGJhcikge1xuICAgICAgdGhpcy50b29sdGlwID0gbmV3IEJ1YmJsZVRvb2x0aXAodGhpcy5xdWlsbCwgdGhpcy5vcHRpb25zLmJvdW5kcyk7XG4gICAgICB0aGlzLnRvb2x0aXAucm9vdC5hcHBlbmRDaGlsZCh0b29sYmFyLmNvbnRhaW5lcik7XG4gICAgICB0aGlzLmJ1aWxkQnV0dG9ucyhbXS5zbGljZS5jYWxsKHRvb2xiYXIuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpKSwgX2ljb25zMi5kZWZhdWx0KTtcbiAgICAgIHRoaXMuYnVpbGRQaWNrZXJzKFtdLnNsaWNlLmNhbGwodG9vbGJhci5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnc2VsZWN0JykpLCBfaWNvbnMyLmRlZmF1bHQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCdWJibGVUaGVtZTtcbn0oX2Jhc2UyLmRlZmF1bHQpO1xuXG5CdWJibGVUaGVtZS5ERUZBVUxUUyA9ICgwLCBfZXh0ZW5kMi5kZWZhdWx0KSh0cnVlLCB7fSwgX2Jhc2UyLmRlZmF1bHQuREVGQVVMVFMsIHtcbiAgbW9kdWxlczoge1xuICAgIHRvb2xiYXI6IHtcbiAgICAgIGhhbmRsZXJzOiB7XG4gICAgICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsodmFsdWUpIHtcbiAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnbGluaycsIGZhbHNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5xdWlsbC50aGVtZS50b29sdGlwLmVkaXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgQnViYmxlVG9vbHRpcCA9IGZ1bmN0aW9uIChfQmFzZVRvb2x0aXApIHtcbiAgX2luaGVyaXRzKEJ1YmJsZVRvb2x0aXAsIF9CYXNlVG9vbHRpcCk7XG5cbiAgZnVuY3Rpb24gQnViYmxlVG9vbHRpcChxdWlsbCwgYm91bmRzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1YmJsZVRvb2x0aXApO1xuXG4gICAgdmFyIF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCdWJibGVUb29sdGlwLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnViYmxlVG9vbHRpcCkpLmNhbGwodGhpcywgcXVpbGwsIGJvdW5kcykpO1xuXG4gICAgX3RoaXMyLnF1aWxsLm9uKF9lbWl0dGVyMi5kZWZhdWx0LmV2ZW50cy5FRElUT1JfQ0hBTkdFLCBmdW5jdGlvbiAodHlwZSwgcmFuZ2UsIG9sZFJhbmdlLCBzb3VyY2UpIHtcbiAgICAgIGlmICh0eXBlICE9PSBfZW1pdHRlcjIuZGVmYXVsdC5ldmVudHMuU0VMRUNUSU9OX0NIQU5HRSkgcmV0dXJuO1xuICAgICAgaWYgKHJhbmdlICE9IG51bGwgJiYgcmFuZ2UubGVuZ3RoID4gMCAmJiBzb3VyY2UgPT09IF9lbWl0dGVyMi5kZWZhdWx0LnNvdXJjZXMuVVNFUikge1xuICAgICAgICBfdGhpczIuc2hvdygpO1xuICAgICAgICAvLyBMb2NrIG91ciB3aWR0aCBzbyB3ZSB3aWxsIGV4cGFuZCBiZXlvbmQgb3VyIG9mZnNldFBhcmVudCBib3VuZGFyaWVzXG4gICAgICAgIF90aGlzMi5yb290LnN0eWxlLmxlZnQgPSAnMHB4JztcbiAgICAgICAgX3RoaXMyLnJvb3Quc3R5bGUud2lkdGggPSAnJztcbiAgICAgICAgX3RoaXMyLnJvb3Quc3R5bGUud2lkdGggPSBfdGhpczIucm9vdC5vZmZzZXRXaWR0aCArICdweCc7XG4gICAgICAgIHZhciBsaW5lcyA9IF90aGlzMi5xdWlsbC5nZXRMaW5lcyhyYW5nZS5pbmRleCwgcmFuZ2UubGVuZ3RoKTtcbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIF90aGlzMi5wb3NpdGlvbihfdGhpczIucXVpbGwuZ2V0Qm91bmRzKHJhbmdlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGxhc3RMaW5lID0gbGluZXNbbGluZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgdmFyIGluZGV4ID0gX3RoaXMyLnF1aWxsLmdldEluZGV4KGxhc3RMaW5lKTtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gTWF0aC5taW4obGFzdExpbmUubGVuZ3RoKCkgLSAxLCByYW5nZS5pbmRleCArIHJhbmdlLmxlbmd0aCAtIGluZGV4KTtcbiAgICAgICAgICB2YXIgX2JvdW5kcyA9IF90aGlzMi5xdWlsbC5nZXRCb3VuZHMobmV3IF9zZWxlY3Rpb24uUmFuZ2UoaW5kZXgsIGxlbmd0aCkpO1xuICAgICAgICAgIF90aGlzMi5wb3NpdGlvbihfYm91bmRzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBfdGhpczIudGV4dGJveCAmJiBfdGhpczIucXVpbGwuaGFzRm9jdXMoKSkge1xuICAgICAgICBfdGhpczIuaGlkZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfdGhpczI7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQnViYmxlVG9vbHRpcCwgW3tcbiAgICBrZXk6ICdsaXN0ZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW4oKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgX2dldChCdWJibGVUb29sdGlwLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJ1YmJsZVRvb2x0aXAucHJvdG90eXBlKSwgJ2xpc3RlbicsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcignLnFsLWNsb3NlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5yb290LmNsYXNzTGlzdC5yZW1vdmUoJ3FsLWVkaXRpbmcnKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5xdWlsbC5vbihfZW1pdHRlcjIuZGVmYXVsdC5ldmVudHMuU0NST0xMX09QVElNSVpFLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIExldCBzZWxlY3Rpb24gYmUgcmVzdG9yZWQgYnkgdG9vbGJhciBoYW5kbGVycyBiZWZvcmUgcmVwb3NpdGlvbmluZ1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoX3RoaXMzLnJvb3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1oaWRkZW4nKSkgcmV0dXJuO1xuICAgICAgICAgIHZhciByYW5nZSA9IF90aGlzMy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICBpZiAocmFuZ2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgX3RoaXMzLnBvc2l0aW9uKF90aGlzMy5xdWlsbC5nZXRCb3VuZHMocmFuZ2UpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIDEpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2FuY2VsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwb3NpdGlvbihyZWZlcmVuY2UpIHtcbiAgICAgIHZhciBzaGlmdCA9IF9nZXQoQnViYmxlVG9vbHRpcC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCdWJibGVUb29sdGlwLnByb3RvdHlwZSksICdwb3NpdGlvbicsIHRoaXMpLmNhbGwodGhpcywgcmVmZXJlbmNlKTtcbiAgICAgIHZhciBhcnJvdyA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKCcucWwtdG9vbHRpcC1hcnJvdycpO1xuICAgICAgYXJyb3cuc3R5bGUubWFyZ2luTGVmdCA9ICcnO1xuICAgICAgaWYgKHNoaWZ0ID09PSAwKSByZXR1cm4gc2hpZnQ7XG4gICAgICBhcnJvdy5zdHlsZS5tYXJnaW5MZWZ0ID0gLTEgKiBzaGlmdCAtIGFycm93Lm9mZnNldFdpZHRoIC8gMiArICdweCc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJ1YmJsZVRvb2x0aXA7XG59KF9iYXNlLkJhc2VUb29sdGlwKTtcblxuQnViYmxlVG9vbHRpcC5URU1QTEFURSA9IFsnPHNwYW4gY2xhc3M9XCJxbC10b29sdGlwLWFycm93XCI+PC9zcGFuPicsICc8ZGl2IGNsYXNzPVwicWwtdG9vbHRpcC1lZGl0b3JcIj4nLCAnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgZGF0YS1mb3JtdWxhPVwiZT1tY14yXCIgZGF0YS1saW5rPVwiaHR0cHM6Ly9xdWlsbGpzLmNvbVwiIGRhdGEtdmlkZW89XCJFbWJlZCBVUkxcIj4nLCAnPGEgY2xhc3M9XCJxbC1jbG9zZVwiPjwvYT4nLCAnPC9kaXY+J10uam9pbignJyk7XG5cbmV4cG9ydHMuQnViYmxlVG9vbHRpcCA9IEJ1YmJsZVRvb2x0aXA7XG5leHBvcnRzLmRlZmF1bHQgPSBCdWJibGVUaGVtZTtcblxuLyoqKi8gfSksXG4vKiAxMDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYzKTtcblxuXG4vKioqLyB9KVxuLyoqKioqKi8gXSlbXCJkZWZhdWx0XCJdO1xufSk7IiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgZ2V0UmF3VGFnID0gcmVxdWlyZSgnLi9fZ2V0UmF3VGFnJyksXG4gICAgb2JqZWN0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19vYmplY3RUb1N0cmluZycpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0VGFnO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3ltYm9sO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRvU3RyaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIGJ0b2EgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmJ0b2EgJiYgd2luZG93LmJ0b2EuYmluZCh3aW5kb3cpKSB8fCByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnRvYScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHZhciBsb2FkRXZlbnQgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbiAgICB2YXIgeERvbWFpbiA9IGZhbHNlO1xuXG4gICAgLy8gRm9yIElFIDgvOSBDT1JTIHN1cHBvcnRcbiAgICAvLyBPbmx5IHN1cHBvcnRzIFBPU1QgYW5kIEdFVCBjYWxscyBhbmQgZG9lc24ndCByZXR1cm5zIHRoZSByZXNwb25zZSBoZWFkZXJzLlxuICAgIC8vIERPTidUIGRvIHRoaXMgZm9yIHRlc3RpbmcgYi9jIFhNTEh0dHBSZXF1ZXN0IGlzIG1vY2tlZCwgbm90IFhEb21haW5SZXF1ZXN0LlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHdpbmRvdy5YRG9tYWluUmVxdWVzdCAmJiAhKCd3aXRoQ3JlZGVudGlhbHMnIGluIHJlcXVlc3QpICYmXG4gICAgICAgICFpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpIHtcbiAgICAgIHJlcXVlc3QgPSBuZXcgd2luZG93LlhEb21haW5SZXF1ZXN0KCk7XG4gICAgICBsb2FkRXZlbnQgPSAnb25sb2FkJztcbiAgICAgIHhEb21haW4gPSB0cnVlO1xuICAgICAgcmVxdWVzdC5vbnByb2dyZXNzID0gZnVuY3Rpb24gaGFuZGxlUHJvZ3Jlc3MoKSB7fTtcbiAgICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHt9O1xuICAgIH1cblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3RbbG9hZEV2ZW50XSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCAmJiAheERvbWFpbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgLy8gSUUgc2VuZHMgMTIyMyBpbnN0ZWFkIG9mIDIwNCAoaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2lzc3Vlcy8yMDEpXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAnTm8gQ29udGVudCcgOiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxudmFyIGlzQXJyYXkgPSBmdW5jdGlvbiBpc0FycmF5KGFycikge1xuXHRpZiAodHlwZW9mIEFycmF5LmlzQXJyYXkgPT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gQXJyYXkuaXNBcnJheShhcnIpO1xuXHR9XG5cblx0cmV0dXJuIHRvU3RyLmNhbGwoYXJyKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbnZhciBpc1BsYWluT2JqZWN0ID0gZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcblx0aWYgKCFvYmogfHwgdG9TdHIuY2FsbChvYmopICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHZhciBoYXNPd25Db25zdHJ1Y3RvciA9IGhhc093bi5jYWxsKG9iaiwgJ2NvbnN0cnVjdG9yJyk7XG5cdHZhciBoYXNJc1Byb3RvdHlwZU9mID0gb2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgJiYgaGFzT3duLmNhbGwob2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgJ2lzUHJvdG90eXBlT2YnKTtcblx0Ly8gTm90IG93biBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBtdXN0IGJlIE9iamVjdFxuXHRpZiAob2JqLmNvbnN0cnVjdG9yICYmICFoYXNPd25Db25zdHJ1Y3RvciAmJiAhaGFzSXNQcm90b3R5cGVPZikge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIE93biBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhdGVkIGZpcnN0bHksIHNvIHRvIHNwZWVkIHVwLFxuXHQvLyBpZiBsYXN0IG9uZSBpcyBvd24sIHRoZW4gYWxsIHByb3BlcnRpZXMgYXJlIG93bi5cblx0dmFyIGtleTtcblx0Zm9yIChrZXkgaW4gb2JqKSB7IC8qKi8gfVxuXG5cdHJldHVybiB0eXBlb2Yga2V5ID09PSAndW5kZWZpbmVkJyB8fCBoYXNPd24uY2FsbChvYmosIGtleSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV4dGVuZCgpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lO1xuXHR2YXIgdGFyZ2V0ID0gYXJndW1lbnRzWzBdO1xuXHR2YXIgaSA9IDE7XG5cdHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXHR2YXIgZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKHR5cGVvZiB0YXJnZXQgPT09ICdib29sZWFuJykge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuXHRcdC8vIHNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHRpID0gMjtcblx0fVxuXHRpZiAodGFyZ2V0ID09IG51bGwgfHwgKHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnICYmIHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHRmb3IgKDsgaSA8IGxlbmd0aDsgKytpKSB7XG5cdFx0b3B0aW9ucyA9IGFyZ3VtZW50c1tpXTtcblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKG9wdGlvbnMgIT0gbnVsbCkge1xuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yIChuYW1lIGluIG9wdGlvbnMpIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0W25hbWVdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1tuYW1lXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICh0YXJnZXQgIT09IGNvcHkpIHtcblx0XHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0XHRpZiAoZGVlcCAmJiBjb3B5ICYmIChpc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9IGlzQXJyYXkoY29weSkpKSkge1xuXHRcdFx0XHRcdFx0aWYgKGNvcHlJc0FycmF5KSB7XG5cdFx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdFx0dGFyZ2V0W25hbWVdID0gZXh0ZW5kKGRlZXAsIGNsb25lLCBjb3B5KTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiBjb3B5ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0dGFyZ2V0W25hbWVdID0gY29weTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBwU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4vbGliL2tleXMuanMnKTtcbnZhciBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vbGliL2lzX2FyZ3VtZW50cy5qcycpO1xuXG52YXIgZGVlcEVxdWFsID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYWN0dWFsLCBleHBlY3RlZCwgb3B0cykge1xuICBpZiAoIW9wdHMpIG9wdHMgPSB7fTtcbiAgLy8gNy4xLiBBbGwgaWRlbnRpY2FsIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4gIGlmIChhY3R1YWwgPT09IGV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG5cbiAgfSBlbHNlIGlmIChhY3R1YWwgaW5zdGFuY2VvZiBEYXRlICYmIGV4cGVjdGVkIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgIHJldHVybiBhY3R1YWwuZ2V0VGltZSgpID09PSBleHBlY3RlZC5nZXRUaW1lKCk7XG5cbiAgLy8gNy4zLiBPdGhlciBwYWlycyB0aGF0IGRvIG5vdCBib3RoIHBhc3MgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnLFxuICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LlxuICB9IGVsc2UgaWYgKCFhY3R1YWwgfHwgIWV4cGVjdGVkIHx8IHR5cGVvZiBhY3R1YWwgIT0gJ29iamVjdCcgJiYgdHlwZW9mIGV4cGVjdGVkICE9ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9wdHMuc3RyaWN0ID8gYWN0dWFsID09PSBleHBlY3RlZCA6IGFjdHVhbCA9PSBleHBlY3RlZDtcblxuICAvLyA3LjQuIEZvciBhbGwgb3RoZXIgT2JqZWN0IHBhaXJzLCBpbmNsdWRpbmcgQXJyYXkgb2JqZWN0cywgZXF1aXZhbGVuY2UgaXNcbiAgLy8gZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkXG4gIC8vIHdpdGggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKSwgdGhlIHNhbWUgc2V0IG9mIGtleXNcbiAgLy8gKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeVxuICAvLyBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpc1xuICAvLyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2JqRXF1aXYoYWN0dWFsLCBleHBlY3RlZCwgb3B0cyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWRPck51bGwodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyICh4KSB7XG4gIGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHgubGVuZ3RoICE9PSAnbnVtYmVyJykgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIHguY29weSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgeC5zbGljZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoeC5sZW5ndGggPiAwICYmIHR5cGVvZiB4WzBdICE9PSAnbnVtYmVyJykgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb2JqRXF1aXYoYSwgYiwgb3B0cykge1xuICB2YXIgaSwga2V5O1xuICBpZiAoaXNVbmRlZmluZWRPck51bGwoYSkgfHwgaXNVbmRlZmluZWRPck51bGwoYikpXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvLyBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuXG4gIGlmIChhLnByb3RvdHlwZSAhPT0gYi5wcm90b3R5cGUpIHJldHVybiBmYWxzZTtcbiAgLy9+fn5JJ3ZlIG1hbmFnZWQgdG8gYnJlYWsgT2JqZWN0LmtleXMgdGhyb3VnaCBzY3Jld3kgYXJndW1lbnRzIHBhc3NpbmcuXG4gIC8vICAgQ29udmVydGluZyB0byBhcnJheSBzb2x2ZXMgdGhlIHByb2JsZW0uXG4gIGlmIChpc0FyZ3VtZW50cyhhKSkge1xuICAgIGlmICghaXNBcmd1bWVudHMoYikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgYSA9IHBTbGljZS5jYWxsKGEpO1xuICAgIGIgPSBwU2xpY2UuY2FsbChiKTtcbiAgICByZXR1cm4gZGVlcEVxdWFsKGEsIGIsIG9wdHMpO1xuICB9XG4gIGlmIChpc0J1ZmZlcihhKSkge1xuICAgIGlmICghaXNCdWZmZXIoYikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYVtpXSAhPT0gYltpXSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB0cnkge1xuICAgIHZhciBrYSA9IG9iamVjdEtleXMoYSksXG4gICAgICAgIGtiID0gb2JqZWN0S2V5cyhiKTtcbiAgfSBjYXRjaCAoZSkgey8vaGFwcGVucyB3aGVuIG9uZSBpcyBhIHN0cmluZyBsaXRlcmFsIGFuZCB0aGUgb3RoZXIgaXNuJ3RcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChrZXlzIGluY29ycG9yYXRlc1xuICAvLyBoYXNPd25Qcm9wZXJ0eSlcbiAgaWYgKGthLmxlbmd0aCAhPSBrYi5sZW5ndGgpXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvL3RoZSBzYW1lIHNldCBvZiBrZXlzIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLFxuICBrYS5zb3J0KCk7XG4gIGtiLnNvcnQoKTtcbiAgLy9+fn5jaGVhcCBrZXkgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmIChrYVtpXSAhPSBrYltpXSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvL2VxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleSwgYW5kXG4gIC8vfn5+cG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGtleSA9IGthW2ldO1xuICAgIGlmICghZGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBvcHRzKSkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0eXBlb2YgYSA9PT0gdHlwZW9mIGI7XG59XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2NhbGUgfHwgZnVuY3Rpb24gc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gIGlmIChcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAwXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCB4ICE9IHhcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluTG93ICE9IGluTG93XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBpbkhpZ2ggIT0gaW5IaWdoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBvdXRMb3cgIT0gb3V0TG93XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBvdXRIaWdoICE9IG91dEhpZ2hcbiAgKSByZXR1cm4gTmFOO1xuICBpZiAoeCA9PT0gSW5maW5pdHkgfHwgeCA9PT0gLUluZmluaXR5KSByZXR1cm4geDtcbiAgcmV0dXJuICh4IC0gaW5Mb3cpICogKG91dEhpZ2ggLSBvdXRMb3cpIC8gKGluSGlnaCAtIGluTG93KSArIG91dExvdztcbn07XG4iLCJ2YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlciwgSVRFUkFUT1IpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3JPZihpdGVyLCBmYWxzZSwgcmVzdWx0LnB1c2gsIHJlc3VsdCwgSVRFUkFUT1IpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgaWYgKGNsYXNzb2YodGhpcykgIT0gTkFNRSkgdGhyb3cgVHlwZUVycm9yKE5BTUUgKyBcIiN0b0pTT04gaXNuJ3QgZ2VuZXJpY1wiKTtcbiAgICByZXR1cm4gZnJvbSh0aGlzKTtcbiAgfTtcbn07XG4iLCJ2YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChPLCBrZXkgPSBrZXlzW2krK10pKSB7XG4gICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7XG4gIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gIHZhciBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pO1xuICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXlcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG5cbmZ1bmN0aW9uIGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBjdHgobWFwcGVyLCB0aGlzQXJnLCAzKSA6IGZhbHNlO1xuICB2YXIgZWxlbWVudCwgc3ByZWFkYWJsZTtcblxuICB3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcbiAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7XG4gICAgICBlbGVtZW50ID0gbWFwRm4gPyBtYXBGbihzb3VyY2Vbc291cmNlSW5kZXhdLCBzb3VyY2VJbmRleCwgb3JpZ2luYWwpIDogc291cmNlW3NvdXJjZUluZGV4XTtcblxuICAgICAgc3ByZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKGlzT2JqZWN0KGVsZW1lbnQpKSB7XG4gICAgICAgIHNwcmVhZGFibGUgPSBlbGVtZW50W0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgICAgICAgc3ByZWFkYWJsZSA9IHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcHJlYWRhYmxlICYmIGRlcHRoID4gMCkge1xuICAgICAgICB0YXJnZXRJbmRleCA9IGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgZWxlbWVudCwgdG9MZW5ndGgoZWxlbWVudC5sZW5ndGgpLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxZmZmZmZmZmZmZmZmZikgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuIiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgUmVmbGVjdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnT1BOLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfTUFQID0gJ1dlYWtNYXAnO1xudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlO1xudmFyIHRtcCA9IHt9O1xudmFyIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSkuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCksIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3ICRXZWFrTWFwKCkuc2V0KChPYmplY3QuZnJlZXplIHx8IE9iamVjdCkodG1wKSwgNykuZ2V0KHRtcCkgIT0gNzsgfSkpIHtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwcm90byA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZiAoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNFVCA9ICdTZXQnO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShTRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIFNFVCksIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0laRSA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICB2YXIgZW50cnk7XG4gIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IgKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgIGlmIChlbnRyeS5rID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIGZvciAodmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKSwgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wKSBlbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubjtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYgKHRoYXQuX2YgPT0gZW50cnkpIHRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICB2YXIgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBOQU1FLCBJU19NQVApIHtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICB0aGlzLl90ID0gdmFsaWRhdGUoaXRlcmF0ZWQsIE5BTUUpOyAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGtpbmQgPSB0aGF0Ll9rO1xuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkge1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMDtcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcbiAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcbnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTtcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IE1hdGguYWJzKHgpO1xuICB2YXIgJHNpZ24gPSBzaWduKHgpO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuIiwidmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgdmFyIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDtcbiIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciB3cyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoRiwgbGVuLCBhcmdzKSB7XG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKSBuW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uICgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSBUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9taW5pbWl6ZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOmZhbHNlfSEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1ZpZGVvRW1iZWQudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjU5ZTcxMTQ1XCIsIGNvbnRlbnQsIHRydWUsIHt9KTsiLCJmdW5jdGlvbiBpbmplY3RTdHlsZSAoY29udGV4dCkge1xuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/bWluaW1pemUhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjpmYWxzZX0hc2Fzcy1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9WaWRlb0VtYmVkLnZ1ZVwiKVxufVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9WaWRlb0VtYmVkLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vVmlkZW9FbWJlZC52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCB7cmVuZGVyIGFzIF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnMgYXMgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfX30gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZTgyNDM0ODhcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVmlkZW9FbWJlZC52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbmltcG9ydCBub3JtYWxpemVDb21wb25lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplclwiXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfcmVuZGVyX18sXG4gIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuIiwidmFyIGJhc2VUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VUb1N0cmluZycpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9TdHJpbmc7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b051bWJlcjtcbiIsInZhciB0b051bWJlciA9IHJlcXVpcmUoJy4vdG9OdW1iZXInKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBmaW5pdGUgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMi4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9GaW5pdGUoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDtcbiAgfVxuICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgaWYgKHZhbHVlID09PSBJTkZJTklUWSB8fCB2YWx1ZSA9PT0gLUlORklOSVRZKSB7XG4gICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICB9XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9GaW5pdGU7XG4iLCJ2YXIgdG9GaW5pdGUgPSByZXF1aXJlKCcuL3RvRmluaXRlJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9JbnRlZ2VyKDMuMik7XG4gKiAvLyA9PiAzXG4gKlxuICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiAwXG4gKlxuICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAqXG4gKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gKiAvLyA9PiAzXG4gKi9cbmZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gdG9GaW5pdGUodmFsdWUpLFxuICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9JbnRlZ2VyO1xuIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbnZhciByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbnZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pY29kZVRvQXJyYXk7XG4iLCIvKipcbiAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzY2lpVG9BcnJheTtcbiIsInZhciBhc2NpaVRvQXJyYXkgPSByZXF1aXJlKCcuL19hc2NpaVRvQXJyYXknKSxcbiAgICBoYXNVbmljb2RlID0gcmVxdWlyZSgnLi9faGFzVW5pY29kZScpLFxuICAgIHVuaWNvZGVUb0FycmF5ID0gcmVxdWlyZSgnLi9fdW5pY29kZVRvQXJyYXknKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgID8gdW5pY29kZVRvQXJyYXkoc3RyaW5nKVxuICAgIDogYXNjaWlUb0FycmF5KHN0cmluZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nVG9BcnJheTtcbiIsIi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbnZhciByc0FzdHJhbFJhbmdlID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnLFxuICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLFxuICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZic7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbnZhciByc0FzdHJhbCA9ICdbJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJyxcbiAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknLFxuICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXScsXG4gICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG52YXIgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sXG4gICAgcnNTeW1ib2wgPSAnKD86JyArIFtyc05vbkFzdHJhbCArIHJzQ29tYm8gKyAnPycsIHJzQ29tYm8sIHJzUmVnaW9uYWwsIHJzU3VyclBhaXIsIHJzQXN0cmFsXS5qb2luKCd8JykgKyAnKSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG52YXIgcmVVbmljb2RlID0gUmVnRXhwKHJzRml0eiArICcoPz0nICsgcnNGaXR6ICsgJyl8JyArIHJzU3ltYm9sICsgcnNTZXEsICdnJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgc2l6ZSBvZiBhIFVuaWNvZGUgYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gKi9cbmZ1bmN0aW9uIHVuaWNvZGVTaXplKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gIHdoaWxlIChyZVVuaWNvZGUudGVzdChzdHJpbmcpKSB7XG4gICAgKytyZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1bmljb2RlU2l6ZTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5O1xuIiwidmFyIGJhc2VQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eScpO1xuXG4vKipcbiAqIEdldHMgdGhlIHNpemUgb2YgYW4gQVNDSUkgYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gKi9cbnZhciBhc2NpaVNpemUgPSBiYXNlUHJvcGVydHkoJ2xlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzY2lpU2l6ZTtcbiIsInZhciBhc2NpaVNpemUgPSByZXF1aXJlKCcuL19hc2NpaVNpemUnKSxcbiAgICBoYXNVbmljb2RlID0gcmVxdWlyZSgnLi9faGFzVW5pY29kZScpLFxuICAgIHVuaWNvZGVTaXplID0gcmVxdWlyZSgnLi9fdW5pY29kZVNpemUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgID8gdW5pY29kZVNpemUoc3RyaW5nKVxuICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nU2l6ZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufTtcclxuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5hcnk7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNSZWdFeHBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1JlZ0V4cCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzUmVnRXhwO1xuIiwidmFyIGJhc2VJc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2Jhc2VJc1JlZ0V4cCcpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNSZWdFeHAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1JlZ0V4cDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNSZWdFeHAoL2FiYy8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNSZWdFeHAoJy9hYmMvJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNSZWdFeHAgPSBub2RlSXNSZWdFeHAgPyBiYXNlVW5hcnkobm9kZUlzUmVnRXhwKSA6IGJhc2VJc1JlZ0V4cDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1JlZ0V4cDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgfVxuICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlbmd0aDtcbiAgfVxuICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gIHN0YXJ0ID4+Pj0gMDtcblxuICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU2xpY2U7XG4iLCJ2YXIgYmFzZVNsaWNlID0gcmVxdWlyZSgnLi9fYmFzZVNsaWNlJyk7XG5cbi8qKlxuICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gKi9cbmZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgcmV0dXJuICghc3RhcnQgJiYgZW5kID49IGxlbmd0aCkgPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdFNsaWNlO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheU1hcDtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiIsInZhciBiYXNlVG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlVG9TdHJpbmcnKSxcbiAgICBjYXN0U2xpY2UgPSByZXF1aXJlKCcuL19jYXN0U2xpY2UnKSxcbiAgICBoYXNVbmljb2RlID0gcmVxdWlyZSgnLi9faGFzVW5pY29kZScpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9pc1JlZ0V4cCcpLFxuICAgIHN0cmluZ1NpemUgPSByZXF1aXJlKCcuL19zdHJpbmdTaXplJyksXG4gICAgc3RyaW5nVG9BcnJheSA9IHJlcXVpcmUoJy4vX3N0cmluZ1RvQXJyYXknKSxcbiAgICB0b0ludGVnZXIgPSByZXF1aXJlKCcuL3RvSW50ZWdlcicpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpO1xuXG4vKiogVXNlZCBhcyBkZWZhdWx0IG9wdGlvbnMgZm9yIGBfLnRydW5jYXRlYC4gKi9cbnZhciBERUZBVUxUX1RSVU5DX0xFTkdUSCA9IDMwLFxuICAgIERFRkFVTFRfVFJVTkNfT01JU1NJT04gPSAnLi4uJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbi8qKlxuICogVHJ1bmNhdGVzIGBzdHJpbmdgIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gKiBzdHJpbmcgd2hpY2ggZGVmYXVsdHMgdG8gXCIuLi5cIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cnVuY2F0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5vbWlzc2lvbj0nLi4uJ10gVGhlIHN0cmluZyB0byBpbmRpY2F0ZSB0ZXh0IGlzIG9taXR0ZWQuXG4gKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtvcHRpb25zLnNlcGFyYXRvcl0gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHRydW5jYXRlIHRvLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hiby4uLidcbiAqXG4gKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICogICAnbGVuZ3RoJzogMjQsXG4gKiAgICdzZXBhcmF0b3InOiAnICdcbiAqIH0pO1xuICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwuLi4nXG4gKlxuICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAqICAgJ2xlbmd0aCc6IDI0LFxuICogICAnc2VwYXJhdG9yJzogLyw/ICsvXG4gKiB9KTtcbiAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUuLi4nXG4gKlxuICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAqICAgJ29taXNzaW9uJzogJyBbLi4uXSdcbiAqIH0pO1xuICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAqL1xuZnVuY3Rpb24gdHJ1bmNhdGUoc3RyaW5nLCBvcHRpb25zKSB7XG4gIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgIG9taXNzaW9uID0gREVGQVVMVF9UUlVOQ19PTUlTU0lPTjtcblxuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgIGxlbmd0aCA9ICdsZW5ndGgnIGluIG9wdGlvbnMgPyB0b0ludGVnZXIob3B0aW9ucy5sZW5ndGgpIDogbGVuZ3RoO1xuICAgIG9taXNzaW9uID0gJ29taXNzaW9uJyBpbiBvcHRpb25zID8gYmFzZVRvU3RyaW5nKG9wdGlvbnMub21pc3Npb24pIDogb21pc3Npb247XG4gIH1cbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICB2YXIgc3RyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpO1xuICAgIHN0ckxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuICB9XG4gIGlmIChsZW5ndGggPj0gc3RyTGVuZ3RoKSB7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfVxuICB2YXIgZW5kID0gbGVuZ3RoIC0gc3RyaW5nU2l6ZShvbWlzc2lvbik7XG4gIGlmIChlbmQgPCAxKSB7XG4gICAgcmV0dXJuIG9taXNzaW9uO1xuICB9XG4gIHZhciByZXN1bHQgPSBzdHJTeW1ib2xzXG4gICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgIDogc3RyaW5nLnNsaWNlKDAsIGVuZCk7XG5cbiAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICB9XG4gIGlmIChzdHJTeW1ib2xzKSB7XG4gICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgfVxuICBpZiAoaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgdmFyIG1hdGNoLFxuICAgICAgICAgIHN1YnN0cmluZyA9IHJlc3VsdDtcblxuICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCB0b1N0cmluZyhyZUZsYWdzLmV4ZWMoc2VwYXJhdG9yKSkgKyAnZycpO1xuICAgICAgfVxuICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICB3aGlsZSAoKG1hdGNoID0gc2VwYXJhdG9yLmV4ZWMoc3Vic3RyaW5nKSkpIHtcbiAgICAgICAgdmFyIG5ld0VuZCA9IG1hdGNoLmluZGV4O1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIG5ld0VuZCA9PT0gdW5kZWZpbmVkID8gZW5kIDogbmV3RW5kKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgdmFyIGluZGV4ID0gcmVzdWx0Lmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0cnVuY2F0ZTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnFsLWVtYmVkLXNvdXJjZS1pbWFnZXtoZWlnaHQ6MTAwJTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9LnFsLWVtYmVkLXNvdXJjZS1pbWFnZSBpbWd7bWF4LWhlaWdodDoxMDAlO3dpZHRoOmF1dG87b2JqZWN0LWZpdDpjb250YWluO2p1c3RpZnktc2VsZjpyaWdodH0ucWwtZW1iZWQtc291cmNlLWltYWdlIHNwYW57YmFja2dyb3VuZC1jb2xvcjojZmZmO21pbi1oZWlnaHQ6MTAwcHg7d2lkdGg6MTAwJTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7cGFkZGluZzoxMHB4fS5xbC1lbWJlZC1zb3VyY2UtaW1hZ2Ugc3BhbiBzdmd7d2lkdGg6NjBweDtoZWlnaHQ6YXV0bztjb2xvcjojZWVlfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9taW5pbWl6ZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOmZhbHNlfSEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1NvdXJjZUltYWdlLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIxYmVhNzI4MVwiLCBjb250ZW50LCB0cnVlLCB7fSk7IiwiZnVuY3Rpb24gaW5qZWN0U3R5bGUgKGNvbnRleHQpIHtcbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP21pbmltaXplIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6ZmFsc2V9IXNhc3MtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vU291cmNlSW1hZ2UudnVlXCIpXG59XG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1NvdXJjZUltYWdlLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vU291cmNlSW1hZ2UudnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQge3JlbmRlciBhcyBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zIGFzIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX199IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTAzNmFiNTQ2XFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1NvdXJjZUltYWdlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuaW1wb3J0IG5vcm1hbGl6ZUNvbXBvbmVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudC1ub3JtYWxpemVyXCJcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV9yZW5kZXJfXyxcbiAgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5xbC1lbWJlZC1zb3VyY2UtaWNvbnttYXJnaW4tcmlnaHQ6M3B4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjE2cHg7aGVpZ2h0OjE2cHh9LnFsLWVtYmVkLXNvdXJjZS1pY29uIGltZ3toZWlnaHQ6MTAwJTt3aWR0aDoxMDAlfS5xbC1lbWJlZC1zb3VyY2UtaWNvbiBzcGFue2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7ZGlzcGxheTppbmxpbmUtZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOiM5OTk7Ym9yZGVyLXJhZGl1czo1MCU7Y29sb3I6I2ZmZn0ucWwtZW1iZWQtc291cmNlLWljb24gc3BhbiBzdmd7d2lkdGg6NXB4O2hlaWdodDphdXRvfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9taW5pbWl6ZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOmZhbHNlfSEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1NvdXJjZUljb24udnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjBiNGI5ZjFlXCIsIGNvbnRlbnQsIHRydWUsIHt9KTsiLCJmdW5jdGlvbiBpbmplY3RTdHlsZSAoY29udGV4dCkge1xuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/bWluaW1pemUhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjpmYWxzZX0hc2Fzcy1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9Tb3VyY2VJY29uLnZ1ZVwiKVxufVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Tb3VyY2VJY29uLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vU291cmNlSWNvbi52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCB7cmVuZGVyIGFzIF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnMgYXMgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfX30gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNTgxZTZlMzJcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vU291cmNlSWNvbi52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbmltcG9ydCBub3JtYWxpemVDb21wb25lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplclwiXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfcmVuZGVyX18sXG4gIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucWwtbGluay1lbWJlZCAucWwtZW1iZWQtbGluaywucWwtbGluay1lbWJlZCAucWwtZW1iZWQtbGluazpob3ZlciwucWwtbGluay1lbWJlZCAucWwtZW1iZWQtbGluazpsaW5re2NvbG9yOmdyYXk7dGV4dC1kZWNvcmF0aW9uOm5vbmV9LnFsLWxpbmstZW1iZWQgLnFsLWVtYmVkLWxpbmt7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtY29sb3I6I2ZiZmFmYTtib3JkZXI6MXB4IHNvbGlkICNlZWVkZWQ7Zm9udC1zaXplOi45ZW07bWF4LWhlaWdodDoyMDBweH0ucWwtbGluay1lbWJlZCAucWwtZW1iZWQtY29udGVudHt3aWR0aDo3MCU7ZmxleDowIDAgNzAlO3BhZGRpbmc6MTVweDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5xbC1saW5rLWVtYmVkIC5xbC1lbWJlZC1kZXNjcmlwdGlvbntmbGV4OjEgMSAwfS5xbC1saW5rLWVtYmVkIC5xbC1lbWJlZC1zb3VyY2V7bWFyZ2luLXRvcDoxNXB4O2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXJ9LnFsLWxpbmstZW1iZWQgLnFsLWVtYmVkLWltYWdle3dpZHRoOjMwJTtmbGV4OjAgMCAzMCU7cGFkZGluZzoxNXB4O2JhY2tncm91bmQtY29sb3I6I2NjY31cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/bWluaW1pemUhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9MaW5rRW1iZWQudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjQ0NmU2MGJlXCIsIGNvbnRlbnQsIHRydWUsIHt9KTsiLCJmdW5jdGlvbiBpbmplY3RTdHlsZSAoY29udGV4dCkge1xuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/bWluaW1pemUhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjpmYWxzZX0hc2Fzcy1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9MaW5rRW1iZWQudnVlXCIpXG59XG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0xpbmtFbWJlZC52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0xpbmtFbWJlZC52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCB7cmVuZGVyIGFzIF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnMgYXMgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfX30gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtYzM4NDAwNzRcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vTGlua0VtYmVkLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuaW1wb3J0IG5vcm1hbGl6ZUNvbXBvbmVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudC1ub3JtYWxpemVyXCJcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV9yZW5kZXJfXyxcbiAgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9taW5pbWl6ZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOmZhbHNlfSEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0VtYmVkSXRlbS52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiOTMyMmE2ZmVcIiwgY29udGVudCwgdHJ1ZSwge30pOyIsImZ1bmN0aW9uIGluamVjdFN0eWxlIChjb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9taW5pbWl6ZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOmZhbHNlfSFzYXNzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0VtYmVkSXRlbS52dWVcIilcbn1cbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vRW1iZWRJdGVtLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vRW1iZWRJdGVtLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IHtyZW5kZXIgYXMgX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZucyBhcyBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19ffSBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi1jMTNiOTU3MlxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9FbWJlZEl0ZW0udnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG5pbXBvcnQgbm9ybWFsaXplQ29tcG9uZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXJcIlxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3JlbmRlcl9fLFxuICBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsInZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1laWRhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiIsIi8qIVxuICogVnVlLmpzIHYyLjUuMTZcbiAqIChjKSAyMDE0LTIwMTggRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuLyogICovXG5cbnZhciBlbXB0eU9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG4vLyB0aGVzZSBoZWxwZXJzIHByb2R1Y2VzIGJldHRlciB2bSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4vLyBleHBsaWNpdG5lc3MgYW5kIGZ1bmN0aW9uIGlubGluaW5nXG5mdW5jdGlvbiBpc1VuZGVmICh2KSB7XG4gIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc0RlZiAodikge1xuICByZXR1cm4gdiAhPT0gdW5kZWZpbmVkICYmIHYgIT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNUcnVlICh2KSB7XG4gIHJldHVybiB2ID09PSB0cnVlXG59XG5cbmZ1bmN0aW9uIGlzRmFsc2UgKHYpIHtcbiAgcmV0dXJuIHYgPT09IGZhbHNlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgcHJpbWl0aXZlXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSBlLmcuIFtvYmplY3QgT2JqZWN0XVxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogdHlwZW9mIHZhbCA9PT0gJ29iamVjdCdcbiAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCBudWxsLCAyKVxuICAgICAgOiBTdHJpbmcodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4gKi9cbnZhciBpc1Jlc2VydmVkQXR0cmlidXRlID0gbWFrZU1hcCgna2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMnKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZSAoYXJyLCBpdGVtKSB7XG4gIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpXG4gIH0pXG59XG5cbi8qKlxuICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy5cbiAqL1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSk7XG5cbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG59KTtcblxuLyoqXG4gKiBTaW1wbGUgYmluZCBwb2x5ZmlsbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXQuLi4gZS5nLlxuICogUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHkgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmUgc2luY2UgbmF0aXZlIGJpbmQgaXNcbiAqIG5vdyBtb3JlIHBlcmZvcm1hbnQgaW4gbW9zdCBicm93c2VycywgYnV0IHJlbW92aW5nIGl0IHdvdWxkIGJlIGJyZWFraW5nIGZvclxuICogY29kZSB0aGF0IHdhcyBhYmxlIHRvIHJ1biBpbiBQaGFudG9tSlMgMS54LCBzbyB0aGlzIG11c3QgYmUga2VwdCBmb3JcbiAqIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKVxuICovXG5mdW5jdGlvbiBub29wIChhLCBiLCBjKSB7fVxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gKi9cbnZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyoqXG4gKiBSZXR1cm4gc2FtZSB2YWx1ZVxuICovXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHN0YXRpYyBrZXlzIHN0cmluZyBmcm9tIGNvbXBpbGVyIG1vZHVsZXMuXG4gKi9cblxuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBmdW5jdGlvbiBpcyBjYWxsZWQgb25seSBvbmNlLlxuICovXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgU1NSX0FUVFIgPSAnZGF0YS1zZXJ2ZXItcmVuZGVyZWQnO1xuXG52YXIgQVNTRVRfVFlQRVMgPSBbXG4gICdjb21wb25lbnQnLFxuICAnZGlyZWN0aXZlJyxcbiAgJ2ZpbHRlcidcbl07XG5cbnZhciBMSUZFQ1lDTEVfSE9PS1MgPSBbXG4gICdiZWZvcmVDcmVhdGUnLFxuICAnY3JlYXRlZCcsXG4gICdiZWZvcmVNb3VudCcsXG4gICdtb3VudGVkJyxcbiAgJ2JlZm9yZVVwZGF0ZScsXG4gICd1cGRhdGVkJyxcbiAgJ2JlZm9yZURlc3Ryb3knLFxuICAnZGVzdHJveWVkJyxcbiAgJ2FjdGl2YXRlZCcsXG4gICdkZWFjdGl2YXRlZCcsXG4gICdlcnJvckNhcHR1cmVkJ1xuXTtcblxuLyogICovXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgKi9cbiAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBFcnJvciBoYW5kbGVyIGZvciB3YXRjaGVyIGVycm9yc1xuICAgKi9cbiAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcbiAgICovXG4gIHdhcm5IYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICovXG4gIGlnbm9yZWRFbGVtZW50czogW10sXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB1c2VyIGtleSBhbGlhc2VzIGZvciB2LW9uXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRBdHRyOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LU1xufSlcblxuLyogICovXG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gL1teXFx3LiRdLztcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xuXG4vLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG52YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuXG52YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm0gfHwge307XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG5cbnZhciB1aWQgPSAwO1xuXG4vKipcbiAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cbiAqL1xudmFyIERlcCA9IGZ1bmN0aW9uIERlcCAoKSB7XG4gIHRoaXMuaWQgPSB1aWQrKztcbiAgdGhpcy5zdWJzID0gW107XG59O1xuXG5EZXAucHJvdG90eXBlLmFkZFN1YiA9IGZ1bmN0aW9uIGFkZFN1YiAoc3ViKSB7XG4gIHRoaXMuc3Vicy5wdXNoKHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7XG4gIHJlbW92ZSh0aGlzLnN1YnMsIHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgRGVwLnRhcmdldC5hZGREZXAodGhpcyk7XG4gIH1cbn07XG5cbkRlcC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5ICgpIHtcbiAgLy8gc3RhYmlsaXplIHRoZSBzdWJzY3JpYmVyIGxpc3QgZmlyc3RcbiAgdmFyIHN1YnMgPSB0aGlzLnN1YnMuc2xpY2UoKTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIHRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIHRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb25seSBvbmVcbi8vIHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkIGF0IGFueSB0aW1lLlxuRGVwLnRhcmdldCA9IG51bGw7XG52YXIgdGFyZ2V0U3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gcHVzaFRhcmdldCAoX3RhcmdldCkge1xuICBpZiAoRGVwLnRhcmdldCkgeyB0YXJnZXRTdGFjay5wdXNoKERlcC50YXJnZXQpOyB9XG4gIERlcC50YXJnZXQgPSBfdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0U3RhY2sucG9wKCk7XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9ucyxcbiAgYXN5bmNGYWN0b3J5XG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZm5Db250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgdm5vZGUuY2hpbGRyZW4sXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7XG4gIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtcblxudmFyIG1ldGhvZHNUb1BhdGNoID0gW1xuICAncHVzaCcsXG4gICdwb3AnLFxuICAnc2hpZnQnLFxuICAndW5zaGlmdCcsXG4gICdzcGxpY2UnLFxuICAnc29ydCcsXG4gICdyZXZlcnNlJ1xuXTtcblxuLyoqXG4gKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcbiAqL1xubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gKi9cbnZhciBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICBzaG91bGRPYnNlcnZlID0gdmFsdWU7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBpcyBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdmFyIGF1Z21lbnQgPSBoYXNQcm90b1xuICAgICAgPyBwcm90b0F1Z21lbnRcbiAgICAgIDogY29weUF1Z21lbnQ7XG4gICAgYXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBlYWNoIHByb3BlcnR5IGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWZpbmVSZWFjdGl2ZShvYmosIGtleXNbaV0pO1xuICB9XG59O1xuXG4vKipcbiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9ic2VydmUoaXRlbXNbaV0pO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbi8qKlxuICogQXVnbWVudCBhbiB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhbiB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgaWYgKCFnZXR0ZXIgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmICghb2IpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3QgZGVsZXRlIHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgaWYgKCF2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmcm9tKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiYgaXNQbGFpbk9iamVjdChmcm9tVmFsKSkge1xuICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogRGF0YVxuICovXG5mdW5jdGlvbiBtZXJnZURhdGFPckZuIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbiAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICB9XG4gICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nID8gY2hpbGRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IGNoaWxkVmFsLFxuICAgICAgICB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nID8gcGFyZW50VmFsLmNhbGwodGhpcywgdGhpcykgOiBwYXJlbnRWYWxcbiAgICAgIClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogY2hpbGRWYWw7XG4gICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IHBhcmVudFZhbDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgcmV0dXJuIGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbFxufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghL15bYS16QS1aXVtcXHctXSokLy50ZXN0KG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAnY2FuIG9ubHkgY29udGFpbiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyBhbmQgdGhlIGh5cGhlbiwgJyArXG4gICAgICAnYW5kIG11c3Qgc3RhcnQgd2l0aCBhIGxldHRlci4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYsIHVwZGF0ZTogZGVmIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG4gIHZhciBleHRlbmRzRnJvbSA9IGNoaWxkLmV4dGVuZHM7XG4gIGlmIChleHRlbmRzRnJvbSkge1xuICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGV4dGVuZHNGcm9tLCB2bSk7XG4gIH1cbiAgaWYgKGNoaWxkLm1peGlucykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgfVxuICB9XG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGJvb2xlYW4gY2FzdGluZ1xuICB2YXIgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XG4gIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkge1xuICAgICAgLy8gb25seSBjYXN0IGVtcHR5IHN0cmluZyAvIHNhbWUgbmFtZSB0byBib29sZWFuIGlmXG4gICAgICAvLyBib29sZWFuIGhhcyBoaWdoZXIgcHJpb3JpdHlcbiAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgdmFyIHByZXZTaG91bGRPYnNlcnZlID0gc2hvdWxkT2JzZXJ2ZTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgb2JzZXJ2ZSh2YWx1ZSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHByZXZTaG91bGRPYnNlcnZlKTtcbiAgfVxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIC8vIHNraXAgdmFsaWRhdGlvbiBmb3Igd2VleCByZWN5Y2xlLWxpc3QgY2hpbGQgY29tcG9uZW50IHByb3BzXG4gICAgIShmYWxzZSAmJiBpc09iamVjdCh2YWx1ZSkgJiYgKCdAYmluZGluZycgaW4gdmFsdWUpKVxuICApIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG4gIGlmICghdmFsaWQpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIuXCIgK1xuICAgICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSkgK1xuICAgICAgXCIsIGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBoYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAodm0pIHtcbiAgICB2YXIgY3VyID0gdm07XG4gICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgaWYgKGhvb2tzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGNhcHR1cmUgPSBob29rc1tpXS5jYWxsKGN1ciwgZXJyLCB2bSwgaW5mbykgPT09IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBnbG9iYWxIYW5kbGVFcnJvcihlLCBjdXIsICdlcnJvckNhcHR1cmVkIGhvb2snKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZ2xvYmFsSGFuZGxlRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGdsb2JhbEhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChjb25maWcuZXJyb3JIYW5kbGVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZXJyLCB2bSwgaW5mbylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG4vKiBnbG9iYWxzIE1lc3NhZ2VDaGFubmVsICovXG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIGJvdGggbWljcm90YXNrcyBhbmQgKG1hY3JvKSB0YXNrcy5cbi8vIEluIDwgMi40IHdlIHVzZWQgbWljcm90YXNrcyBldmVyeXdoZXJlLCBidXQgdGhlcmUgYXJlIHNvbWUgc2NlbmFyaW9zIHdoZXJlXG4vLyBtaWNyb3Rhc2tzIGhhdmUgdG9vIGhpZ2ggYSBwcmlvcml0eSBhbmQgZmlyZSBpbiBiZXR3ZWVuIHN1cHBvc2VkbHlcbi8vIHNlcXVlbnRpYWwgZXZlbnRzIChlLmcuICM0NTIxLCAjNjY5MCkgb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lXG4vLyBldmVudCAoIzY1NjYpLiBIb3dldmVyLCB1c2luZyAobWFjcm8pIHRhc2tzIGV2ZXJ5d2hlcmUgYWxzbyBoYXMgc3VidGxlIHByb2JsZW1zXG4vLyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnQgKGUuZy4gIzY4MTMsIG91dC1pbiB0cmFuc2l0aW9ucykuXG4vLyBIZXJlIHdlIHVzZSBtaWNyb3Rhc2sgYnkgZGVmYXVsdCwgYnV0IGV4cG9zZSBhIHdheSB0byBmb3JjZSAobWFjcm8pIHRhc2sgd2hlblxuLy8gbmVlZGVkIChlLmcuIGluIGV2ZW50IGhhbmRsZXJzIGF0dGFjaGVkIGJ5IHYtb24pLlxudmFyIG1pY3JvVGltZXJGdW5jO1xudmFyIG1hY3JvVGltZXJGdW5jO1xudmFyIHVzZU1hY3JvVGFzayA9IGZhbHNlO1xuXG4vLyBEZXRlcm1pbmUgKG1hY3JvKSB0YXNrIGRlZmVyIGltcGxlbWVudGF0aW9uLlxuLy8gVGVjaG5pY2FsbHkgc2V0SW1tZWRpYXRlIHNob3VsZCBiZSB0aGUgaWRlYWwgY2hvaWNlLCBidXQgaXQncyBvbmx5IGF2YWlsYWJsZVxuLy8gaW4gSUUuIFRoZSBvbmx5IHBvbHlmaWxsIHRoYXQgY29uc2lzdGVudGx5IHF1ZXVlcyB0aGUgY2FsbGJhY2sgYWZ0ZXIgYWxsIERPTVxuLy8gZXZlbnRzIHRyaWdnZXJlZCBpbiB0aGUgc2FtZSBsb29wIGlzIGJ5IHVzaW5nIE1lc3NhZ2VDaGFubmVsLlxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSkge1xuICBtYWNyb1RpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRJbW1lZGlhdGUoZmx1c2hDYWxsYmFja3MpO1xuICB9O1xufSBlbHNlIGlmICh0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTWVzc2FnZUNoYW5uZWwpIHx8XG4gIC8vIFBoYW50b21KU1xuICBNZXNzYWdlQ2hhbm5lbC50b1N0cmluZygpID09PSAnW29iamVjdCBNZXNzYWdlQ2hhbm5lbENvbnN0cnVjdG9yXSdcbikpIHtcbiAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgdmFyIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZsdXNoQ2FsbGJhY2tzO1xuICBtYWNyb1RpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwb3J0LnBvc3RNZXNzYWdlKDEpO1xuICB9O1xufSBlbHNlIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgbWFjcm9UaW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dChmbHVzaENhbGxiYWNrcywgMCk7XG4gIH07XG59XG5cbi8vIERldGVybWluZSBtaWNyb3Rhc2sgZGVmZXIgaW1wbGVtZW50YXRpb24uXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCwgJGZsb3ctZGlzYWJsZS1saW5lICovXG5pZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIG1pY3JvVGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gaW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gZmFsbGJhY2sgdG8gbWFjcm9cbiAgbWljcm9UaW1lckZ1bmMgPSBtYWNyb1RpbWVyRnVuYztcbn1cblxuLyoqXG4gKiBXcmFwIGEgZnVuY3Rpb24gc28gdGhhdCBpZiBhbnkgY29kZSBpbnNpZGUgdHJpZ2dlcnMgc3RhdGUgY2hhbmdlLFxuICogdGhlIGNoYW5nZXMgYXJlIHF1ZXVlZCB1c2luZyBhIChtYWNybykgdGFzayBpbnN0ZWFkIG9mIGEgbWljcm90YXNrLlxuICovXG5mdW5jdGlvbiB3aXRoTWFjcm9UYXNrIChmbikge1xuICByZXR1cm4gZm4uX3dpdGhUYXNrIHx8IChmbi5fd2l0aFRhc2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgdXNlTWFjcm9UYXNrID0gdHJ1ZTtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB1c2VNYWNyb1Rhc2sgPSBmYWxzZTtcbiAgICByZXR1cm4gcmVzXG4gIH0pXG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrIChjYiwgY3R4KSB7XG4gIHZhciBfcmVzb2x2ZTtcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbChjdHgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCBjdHgsICduZXh0VGljaycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlKGN0eCk7XG4gICAgfVxuICB9KTtcbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgcGVuZGluZyA9IHRydWU7XG4gICAgaWYgKHVzZU1hY3JvVGFzaykge1xuICAgICAgbWFjcm9UaW1lckZ1bmMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWljcm9UaW1lckZ1bmMoKTtcbiAgICB9XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciBoYXNQcm94eSA9XG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm94eSk7XG5cbiAgaWYgKGhhc1Byb3h5KSB7XG4gICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpO1xuICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcbiAgICAgICAgICB3YXJuKChcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiICsga2V5KSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFzSGFuZGxlciA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0O1xuICAgICAgdmFyIGlzQWxsb3dlZCA9IGFsbG93ZWRHbG9iYWxzKGtleSkgfHwga2V5LmNoYXJBdCgwKSA9PT0gJ18nO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEhhbmRsZXIgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKTtcbiAgICB9O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjbG9uZWRbaV0uYXBwbHkobnVsbCwgYXJndW1lbnRzJDEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGZucy5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50Lm9uY2UsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW5zdXJlQ3RvciAoY29tcCwgYmFzZSkge1xuICBpZiAoXG4gICAgY29tcC5fX2VzTW9kdWxlIHx8XG4gICAgKGhhc1N5bWJvbCAmJiBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxuICApIHtcbiAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBpc09iamVjdChjb21wKVxuICAgID8gYmFzZS5leHRlbmQoY29tcClcbiAgICA6IGNvbXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoXG4gIGZhY3RvcnksXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgbm9kZS5hc3luY0ZhY3RvcnkgPSBmYWN0b3J5O1xuICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9O1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvcixcbiAgY29udGV4dFxuKSB7XG4gIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wXG4gIH1cblxuICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZFxuICB9XG5cbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LmNvbnRleHRzKSkge1xuICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgIGZhY3RvcnkuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29udGV4dHMgPSBmYWN0b3J5LmNvbnRleHRzID0gW2NvbnRleHRdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY29udGV4dHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvbnRleHRzW2ldLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlcykge1xuICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcbiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAodHlwZW9mIHJlcy50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKHJlcy5jb21wb25lbnQpICYmIHR5cGVvZiByZXMuY29tcG9uZW50LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICAgICAgICAgID8gKFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIilcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuLCBvbmNlKSB7XG4gIGlmIChvbmNlKSB7XG4gICAgdGFyZ2V0LiRvbmNlKGV2ZW50LCBmbik7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgdm0pO1xuICB0YXJnZXQgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0aGlzJDEuJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG9uICgpIHtcbiAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBvbi5mbiA9IGZuO1xuICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBhcnJheSBvZiBldmVudHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMkMS4kb2ZmKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKGZuKSB7XG4gICAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgICB2YXIgY2I7XG4gICAgICB2YXIgaSQxID0gY2JzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpJDEtLSkge1xuICAgICAgICBjYiA9IGNic1tpJDFdO1xuICAgICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICAgIGNicy5zcGxpY2UoaSQxLCAxKTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiB2bS5fZXZlbnRzW2xvd2VyQ2FzZUV2ZW50XSkge1xuICAgICAgICB0aXAoXG4gICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICBcIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIChoeXBoZW5hdGUoZXZlbnQpKSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2JzW2ldLmFwcGx5KHZtLCBhcmdzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIHZhciBzbG90cyA9IHt9O1xuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIHNsb3RzXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICB2YXIgZGF0YSA9IGNoaWxkLmRhdGE7XG4gICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZVxuICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7XG4gICAgICBkZWxldGUgZGF0YS5hdHRycy5zbG90O1xuICAgIH1cbiAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAvLyBzYW1lIGNvbnRleHQuXG4gICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgIGRhdGEgJiYgZGF0YS5zbG90ICE9IG51bGxcbiAgICApIHtcbiAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlc1xuKSB7XG4gIHJlcyA9IHJlcyB8fCB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnNbaV0pKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoZm5zW2ldLCByZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNbZm5zW2ldLmtleV0gPSBmbnNbaV0uZm47XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cbiAgLy8gbG9jYXRlIGZpcnN0IG5vbi1hYnN0cmFjdCBwYXJlbnRcbiAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBpZiAocGFyZW50ICYmICFvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgd2hpbGUgKHBhcmVudC4kb3B0aW9ucy5hYnN0cmFjdCAmJiBwYXJlbnQuJHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIHBhcmVudC4kY2hpbGRyZW4ucHVzaCh2bSk7XG4gIH1cblxuICB2bS4kcGFyZW50ID0gcGFyZW50O1xuICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtO1xuXG4gIHZtLiRjaGlsZHJlbiA9IFtdO1xuICB2bS4kcmVmcyA9IHt9O1xuXG4gIHZtLl93YXRjaGVyID0gbnVsbDtcbiAgdm0uX2luYWN0aXZlID0gbnVsbDtcbiAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNNb3VudGVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZVVwZGF0ZScpO1xuICAgIH1cbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICAgIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18oXG4gICAgICAgIHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyxcbiAgICAgICAgdm0uJG9wdGlvbnMuX3BhcmVudEVsbSxcbiAgICAgICAgdm0uJG9wdGlvbnMuX3JlZkVsbVxuICAgICAgKTtcbiAgICAgIC8vIG5vIG5lZWQgZm9yIHRoZSByZWYgbm9kZXMgYWZ0ZXIgaW5pdGlhbCBwYXRjaFxuICAgICAgLy8gdGhpcyBwcmV2ZW50cyBrZWVwaW5nIGEgZGV0YWNoZWQgRE9NIHRyZWUgaW4gbWVtb3J5ICgjNTg1MSlcbiAgICAgIHZtLiRvcHRpb25zLl9wYXJlbnRFbG0gPSB2bS4kb3B0aW9ucy5fcmVmRWxtID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIG51bGwsIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW5cbiAgdmFyIGhhc0NoaWxkcmVuID0gISEoXG4gICAgcmVuZGVyQ2hpbGRyZW4gfHwgICAgICAgICAgICAgICAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xuICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCAgLy8gaGFzIG9sZCBzdGF0aWMgc2xvdHNcbiAgICBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzIHx8IC8vIGhhcyBuZXcgc2NvcGVkIHNsb3RzXG4gICAgdm0uJHNjb3BlZFNsb3RzICE9PSBlbXB0eU9iamVjdCAvLyBoYXMgb2xkIHNjb3BlZCBzbG90c1xuICApO1xuXG4gIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuICB2bS4kdm5vZGUgPSBwYXJlbnRWbm9kZTsgLy8gdXBkYXRlIHZtJ3MgcGxhY2Vob2xkZXIgbm9kZSB3aXRob3V0IHJlLXJlbmRlclxuXG4gIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICB2bS5fdm5vZGUucGFyZW50ID0gcGFyZW50Vm5vZGU7XG4gIH1cbiAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbiAgLy8gdXBkYXRlICRhdHRycyBhbmQgJGxpc3RlbmVycyBoYXNoXG4gIC8vIHRoZXNlIGFyZSBhbHNvIHJlYWN0aXZlIHNvIHRoZXkgbWF5IHRyaWdnZXIgY2hpbGQgdXBkYXRlIGlmIHRoZSBjaGlsZFxuICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICB2bS4kYXR0cnMgPSBwYXJlbnRWbm9kZS5kYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0O1xuICB2bS4kbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuXG4gIC8vIHVwZGF0ZSBwcm9wc1xuICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgIHZhciBwcm9wT3B0aW9ucyA9IHZtLiRvcHRpb25zLnByb3BzOyAvLyB3dGYgZmxvdz9cbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgfVxuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICB9XG5cbiAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZhciBvbGRMaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcblxuICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICBpZiAoaGFzQ2hpbGRyZW4pIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgcHVzaFRhcmdldCgpO1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGhhbmRsZXJzW2ldLmNhbGwodm0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG59XG5cbi8qICAqL1xuXG5cbnZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwO1xuXG52YXIgcXVldWUgPSBbXTtcbnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xudmFyIGhhcyA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgdmFyIHdhdGNoZXIsIGlkO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1tpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xufVxuXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICBoYXNbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcbiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHVpZCQxID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zLFxuICBpc1JlbmRlcldhdGNoZXJcbikge1xuICB0aGlzLnZtID0gdm07XG4gIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gIH1cbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgfVxuICB0aGlzLmNiID0gY2I7XG4gIHRoaXMuaWQgPSArK3VpZCQxOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgdGhpcy5kZXBzID0gW107XG4gIHRoaXMubmV3RGVwcyA9IFtdO1xuICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5leHByZXNzaW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgID8gZXhwT3JGbi50b1N0cmluZygpXG4gICAgOiAnJztcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcyQxLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzJDEubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMkMSk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB0aGlzLnZtLCAoXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgdmFsdWUgb2YgdGhlIHdhdGNoZXIuXG4gKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUgKCkge1xuICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBEZXBlbmQgb24gYWxsIGRlcHMgY29sbGVjdGVkIGJ5IHRoaXMgd2F0Y2hlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzJDEuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSB2bSdzIHdhdGNoZXIgbGlzdFxuICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXRcbiAgICAvLyBpZiB0aGUgdm0gaXMgYmVpbmcgZGVzdHJveWVkLlxuICAgIGlmICghdGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmVtb3ZlKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTtcbiAgICB9XG4gICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMkMS5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzJDEpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2bS4kcGFyZW50ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmaW5lUmVhY3RpdmUocHJvcHMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gXCIgK1xuICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICBwcm94eSh2bSwgXCJfZGF0YVwiLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhLCB2bSkge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcImRhdGEoKVwiKTtcbiAgICByZXR1cm4ge31cbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG52YXIgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsgbGF6eTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHdhdGNoZXJzID0gdm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBqdXN0IGdldHRlcnMgZHVyaW5nIFNTUlxuICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xuXG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAvLyBjcmVhdGUgaW50ZXJuYWwgd2F0Y2hlciBmb3IgdGhlIGNvbXB1dGVkIHByb3BlcnR5LlxuICAgICAgd2F0Y2hlcnNba2V5XSA9IG5ldyBXYXRjaGVyKFxuICAgICAgICB2bSxcbiAgICAgICAgZ2V0dGVyIHx8IG5vb3AsXG4gICAgICAgIG5vb3AsXG4gICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgIC8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXG4gICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIGRlZmluZUNvbXB1dGVkKHZtLCBrZXksIHVzZXJEZWYpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGtleSBpbiB2bS4kZGF0YSkge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIGRhdGEuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcC5cIiksIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lQ29tcHV0ZWQgKFxuICB0YXJnZXQsXG4gIGtleSxcbiAgdXNlckRlZlxuKSB7XG4gIHZhciBzaG91bGRDYWNoZSA9ICFpc1NlcnZlclJlbmRlcmluZygpO1xuICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gc2hvdWxkQ2FjaGVcbiAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgOiB1c2VyRGVmO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBub29wO1xuICB9IGVsc2Uge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgPyBzaG91bGRDYWNoZSAmJiB1c2VyRGVmLmNhY2hlICE9PSBmYWxzZVxuICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgICAgOiB1c2VyRGVmLmdldFxuICAgICAgOiBub29wO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSB1c2VyRGVmLnNldFxuICAgICAgPyB1c2VyRGVmLnNldFxuICAgICAgOiBub29wO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID09PSBub29wKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgYXNzaWduZWQgdG8gYnV0IGl0IGhhcyBubyBzZXR0ZXIuXCIpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZEdldHRlciAoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgdmFyIHdhdGNoZXIgPSB0aGlzLl9jb21wdXRlZFdhdGNoZXJzICYmIHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnNba2V5XTtcbiAgICBpZiAod2F0Y2hlcikge1xuICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcbiAgICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykge1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbiB1bmRlZmluZWQgdmFsdWUgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKChrZXkgaW4gdm0pICYmIGlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiBcIiArXG4gICAgICAgICAgXCJBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZtW2tleV0gPSBtZXRob2RzW2tleV0gPT0gbnVsbCA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgaGFuZGxlcixcbiAgb3B0aW9uc1xuKSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgdmFyIHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGF0YURlZi5zZXQgPSBmdW5jdGlvbiAobmV3RGF0YSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICtcbiAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXCIkcHJvcHMgaXMgcmVhZG9ubHkuXCIsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7XG4gIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblxuICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucylcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFByb3ZpZGUgKHZtKSB7XG4gIHZhciBwcm92aWRlID0gdm0uJG9wdGlvbnMucHJvdmlkZTtcbiAgaWYgKHByb3ZpZGUpIHtcbiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm92aWRlLmNhbGwodm0pXG4gICAgICA6IHByb3ZpZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xuICBpZiAocmVzdWx0KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGluamVjdCwga2V5KS5lbnVtZXJhYmxlXG4gICAgICB9KVxuICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgIHZhciBzb3VyY2UgPSB2bTtcbiAgICAgIHdoaWxlIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgaGFzT3duKHNvdXJjZS5fcHJvdmlkZWQsIHByb3ZpZGVLZXkpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVEZWZhdWx0ID0gaW5qZWN0W2tleV0uZGVmYXVsdDtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHR5cGVvZiBwcm92aWRlRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKVxuICAgICAgICAgICAgOiBwcm92aWRlRGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybigoXCJJbmplY3Rpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIG5vdCBmb3VuZFwiKSwgdm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLlxuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgdmFsLFxuICByZW5kZXJcbikge1xuICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwpO1xuICAgIGZvciAoaSA9IDA7IGkgPCB2YWw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKGkgKyAxLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtrZXldLCBrZXksIGkpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNEZWYocmV0KSkge1xuICAgIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgPHNsb3Q+XG4gKi9cbmZ1bmN0aW9uIHJlbmRlclNsb3QgKFxuICBuYW1lLFxuICBmYWxsYmFjayxcbiAgcHJvcHMsXG4gIGJpbmRPYmplY3Rcbikge1xuICB2YXIgc2NvcGVkU2xvdEZuID0gdGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07XG4gIHZhciBub2RlcztcbiAgaWYgKHNjb3BlZFNsb3RGbikgeyAvLyBzY29wZWQgc2xvdFxuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc09iamVjdChiaW5kT2JqZWN0KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JyxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgfVxuICAgIG5vZGVzID0gc2NvcGVkU2xvdEZuKHByb3BzKSB8fCBmYWxsYmFjaztcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xvdE5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV07XG4gICAgLy8gd2FybiBkdXBsaWNhdGUgc2xvdCB1c2FnZVxuICAgIGlmIChzbG90Tm9kZXMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNsb3ROb2Rlcy5fcmVuZGVyZWQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIkR1cGxpY2F0ZSBwcmVzZW5jZSBvZiBzbG90IFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgZm91bmQgaW4gdGhlIHNhbWUgcmVuZGVyIHRyZWUgXCIgK1xuICAgICAgICAgIFwiLSB0aGlzIHdpbGwgbGlrZWx5IGNhdXNlIHJlbmRlciBlcnJvcnMuXCIsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc2xvdE5vZGVzLl9yZW5kZXJlZCA9IHRydWU7XG4gICAgfVxuICAgIG5vZGVzID0gc2xvdE5vZGVzIHx8IGZhbGxiYWNrO1xuICB9XG5cbiAgdmFyIHRhcmdldCA9IHByb3BzICYmIHByb3BzLnNsb3Q7XG4gIGlmICh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnLCB7IHNsb3Q6IHRhcmdldCB9LCBub2RlcylcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbm9kZXNcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIGZpbHRlcnNcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUZpbHRlciAoaWQpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnZmlsdGVycycsIGlkLCB0cnVlKSB8fCBpZGVudGl0eVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNLZXlOb3RNYXRjaCAoZXhwZWN0LCBhY3R1YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0KSkge1xuICAgIHJldHVybiBleHBlY3QuaW5kZXhPZihhY3R1YWwpID09PSAtMVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBleHBlY3QgIT09IGFjdHVhbFxuICB9XG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIGNoZWNraW5nIGtleUNvZGVzIGZyb20gY29uZmlnLlxuICogZXhwb3NlZCBhcyBWdWUucHJvdG90eXBlLl9rXG4gKiBwYXNzaW5nIGluIGV2ZW50S2V5TmFtZSBhcyBsYXN0IGFyZ3VtZW50IHNlcGFyYXRlbHkgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAqL1xuZnVuY3Rpb24gY2hlY2tLZXlDb2RlcyAoXG4gIGV2ZW50S2V5Q29kZSxcbiAga2V5LFxuICBidWlsdEluS2V5Q29kZSxcbiAgZXZlbnRLZXlOYW1lLFxuICBidWlsdEluS2V5TmFtZVxuKSB7XG4gIHZhciBtYXBwZWRLZXlDb2RlID0gY29uZmlnLmtleUNvZGVzW2tleV0gfHwgYnVpbHRJbktleUNvZGU7XG4gIGlmIChidWlsdEluS2V5TmFtZSAmJiBldmVudEtleU5hbWUgJiYgIWNvbmZpZy5rZXlDb2Rlc1trZXldKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2goYnVpbHRJbktleU5hbWUsIGV2ZW50S2V5TmFtZSlcbiAgfSBlbHNlIGlmIChtYXBwZWRLZXlDb2RlKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2gobWFwcGVkS2V5Q29kZSwgZXZlbnRLZXlDb2RlKVxuICB9IGVsc2UgaWYgKGV2ZW50S2V5TmFtZSkge1xuICAgIHJldHVybiBoeXBoZW5hdGUoZXZlbnRLZXlOYW1lKSAhPT0ga2V5XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgdi1iaW5kPVwib2JqZWN0XCIgaW50byBhIFZOb2RlJ3MgZGF0YS5cbiAqL1xuZnVuY3Rpb24gYmluZE9iamVjdFByb3BzIChcbiAgZGF0YSxcbiAgdGFnLFxuICB2YWx1ZSxcbiAgYXNQcm9wLFxuICBpc1N5bmNcbikge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3Qgb3IgQXJyYXkgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgaGFzaDtcbiAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgPT09ICdjbGFzcycgfHxcbiAgICAgICAgICBrZXkgPT09ICdzdHlsZScgfHxcbiAgICAgICAgICBpc1Jlc2VydmVkQXR0cmlidXRlKGtleSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaGFzaCA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcbiAgICAgICAgICBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcbiAgICAgICAgICAgID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KVxuICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgdmFyIHRyZWUgPSBjYWNoZWRbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuXG4gIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgcmV0dXJuIHRyZWVcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgbnVsbCxcbiAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICk7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICovXG5mdW5jdGlvbiBtYXJrT25jZSAoXG4gIHRyZWUsXG4gIGluZGV4LFxuICBrZXlcbikge1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAoXG4gIHRyZWUsXG4gIGtleSxcbiAgaXNPbmNlXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCAoXG4gIGRhdGEsXG4gIHByb3BzLFxuICBjaGlsZHJlbixcbiAgcGFyZW50LFxuICBDdG9yXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIC8vIGVuc3VyZSB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiBpbiBmdW5jdGlvbmFsIGNvbXBvbmVudHNcbiAgLy8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVja1xuICB2YXIgY29udGV4dFZtO1xuICBpZiAoaGFzT3duKHBhcmVudCwgJ191aWQnKSkge1xuICAgIGNvbnRleHRWbSA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBjb250ZXh0Vm0uX29yaWdpbmFsID0gcGFyZW50O1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjb250ZXh0IHZtIHBhc3NlZCBpbiBpcyBhIGZ1bmN0aW9uYWwgY29udGV4dCBhcyB3ZWxsLlxuICAgIC8vIGluIHRoaXMgY2FzZSB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBhcmUgYWJsZSB0byBnZXQgYSBob2xkIHRvIHRoZVxuICAgIC8vIHJlYWwgY29udGV4dCBpbnN0YW5jZS5cbiAgICBjb250ZXh0Vm0gPSBwYXJlbnQ7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcGFyZW50ID0gcGFyZW50Ll9vcmlnaW5hbDtcbiAgfVxuICB2YXIgaXNDb21waWxlZCA9IGlzVHJ1ZShvcHRpb25zLl9jb21waWxlZCk7XG4gIHZhciBuZWVkTm9ybWFsaXphdGlvbiA9ICFpc0NvbXBpbGVkO1xuXG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5saXN0ZW5lcnMgPSBkYXRhLm9uIHx8IGVtcHR5T2JqZWN0O1xuICB0aGlzLmluamVjdGlvbnMgPSByZXNvbHZlSW5qZWN0KG9wdGlvbnMuaW5qZWN0LCBwYXJlbnQpO1xuICB0aGlzLnNsb3RzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpOyB9O1xuXG4gIC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGlzQ29tcGlsZWQpIHtcbiAgICAvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKClcbiAgICB0aGlzLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICAvLyBwcmUtcmVzb2x2ZSBzbG90cyBmb3IgcmVuZGVyU2xvdCgpXG4gICAgdGhpcy4kc2xvdHMgPSB0aGlzLnNsb3RzKCk7XG4gICAgdGhpcy4kc2NvcGVkU2xvdHMgPSBkYXRhLnNjb3BlZFNsb3RzIHx8IGVtcHR5T2JqZWN0O1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucylcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cblxuXG5cbi8vIFJlZ2lzdGVyIHRoZSBjb21wb25lbnQgaG9vayB0byB3ZWV4IG5hdGl2ZSByZW5kZXIgZW5naW5lLlxuLy8gVGhlIGhvb2sgd2lsbCBiZSB0cmlnZ2VyZWQgYnkgbmF0aXZlLCBub3QgamF2YXNjcmlwdC5cblxuXG4vLyBVcGRhdGVzIHRoZSBzdGF0ZSBvZiB0aGUgY29tcG9uZW50IHRvIHdlZXggbmF0aXZlIHJlbmRlciBlbmdpbmUuXG5cbi8qICAqL1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vSGFua3MxMDEwMC93ZWV4LW5hdGl2ZS1kaXJlY3RpdmUvdHJlZS9tYXN0ZXIvY29tcG9uZW50XG5cbi8vIGxpc3RlbmluZyBvbiBuYXRpdmUgY2FsbGJhY2tcblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxudmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKFxuICAgIHZub2RlLFxuICAgIGh5ZHJhdGluZyxcbiAgICBwYXJlbnRFbG0sXG4gICAgcmVmRWxtXG4gICkge1xuICAgIGlmIChcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAhdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkICYmXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZSxcbiAgICAgICAgcGFyZW50RWxtLFxuICAgICAgICByZWZFbG1cbiAgICAgICk7XG4gICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybigoXCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiBcIiArIChTdHJpbmcoQ3RvcikpKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gYXN5bmMgY29tcG9uZW50XG4gIHZhciBhc3luY0ZhY3Rvcnk7XG4gIGlmIChpc1VuZGVmKEN0b3IuY2lkKSkge1xuICAgIGFzeW5jRmFjdG9yeSA9IEN0b3I7XG4gICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yLCBjb250ZXh0KTtcbiAgICBpZiAoQ3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4gICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgIC8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi5cbiAgICAgIHJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKFxuICAgICAgICBhc3luY0ZhY3RvcnksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICB0YWdcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbiAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7XG4gICAgdHJhbnNmb3JtTW9kZWwoQ3Rvci5vcHRpb25zLCBkYXRhKTtcbiAgfVxuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcbiAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSkge1xuICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzICYgc2xvdFxuXG4gICAgLy8gd29yayBhcm91bmQgZmxvd1xuICAgIHZhciBzbG90ID0gZGF0YS5zbG90O1xuICAgIGRhdGEgPSB7fTtcbiAgICBpZiAoc2xvdCkge1xuICAgICAgZGF0YS5zbG90ID0gc2xvdDtcbiAgICB9XG4gIH1cblxuICAvLyBpbnN0YWxsIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgaW5zdGFsbENvbXBvbmVudEhvb2tzKGRhdGEpO1xuXG4gIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlXG4gIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICB2YXIgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgKFwidnVlLWNvbXBvbmVudC1cIiArIChDdG9yLmNpZCkgKyAobmFtZSA/IChcIi1cIiArIG5hbWUpIDogJycpKSxcbiAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LFxuICAgIHsgQ3RvcjogQ3RvciwgcHJvcHNEYXRhOiBwcm9wc0RhdGEsIGxpc3RlbmVyczogbGlzdGVuZXJzLCB0YWc6IHRhZywgY2hpbGRyZW46IGNoaWxkcmVuIH0sXG4gICAgYXN5bmNGYWN0b3J5XG4gICk7XG5cbiAgLy8gV2VleCBzcGVjaWZpYzogaW52b2tlIHJlY3ljbGUtbGlzdCBvcHRpbWl6ZWQgQHJlbmRlciBmdW5jdGlvbiBmb3JcbiAgLy8gZXh0cmFjdGluZyBjZWxsLXNsb3QgdGVtcGxhdGUuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9IYW5rczEwMTAwL3dlZXgtbmF0aXZlLWRpcmVjdGl2ZS90cmVlL21hc3Rlci9jb21wb25lbnRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQsIC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuICBwYXJlbnRFbG0sXG4gIHJlZkVsbVxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIF9wYXJlbnRFbG06IHBhcmVudEVsbSB8fCBudWxsLFxuICAgIF9yZWZFbG06IHJlZkVsbSB8fCBudWxsXG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICBob29rc1trZXldID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICB9XG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCc7KGRhdGEucHJvcHMgfHwgKGRhdGEucHJvcHMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgaWYgKGlzRGVmKG9uW2V2ZW50XSkpIHtcbiAgICBvbltldmVudF0gPSBbZGF0YS5tb2RlbC5jYWxsYmFja10uY29uY2F0KG9uW2V2ZW50XSk7XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlXG4pIHtcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEua2V5KSAmJiAhaXNQcmltaXRpdmUoZGF0YS5rZXkpXG4gICkge1xuICAgIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAgICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmXG4gICAgdHlwZW9mIGNoaWxkcmVuWzBdID09PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XG4gICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IEFMV0FZU19OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9XG4gIHZhciB2bm9kZSwgbnM7XG4gIGlmICh0eXBlb2YgdGFnID09PSAnc3RyaW5nJykge1xuICAgIHZhciBDdG9yO1xuICAgIG5zID0gKGNvbnRleHQuJHZub2RlICYmIGNvbnRleHQuJHZub2RlLm5zKSB8fCBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7XG4gICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdChkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lUmVhY3RpdmUodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICAvLyByZXNldCBfcmVuZGVyZWQgZmxhZyBvbiBzbG90cyBmb3IgZHVwbGljYXRlIHNsb3QgY2hlY2tcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgZm9yICh2YXIga2V5IGluIHZtLiRzbG90cykge1xuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgdm0uJHNsb3RzW2tleV0uX3JlbmRlcmVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKF9wYXJlbnRWbm9kZSkge1xuICAgICAgdm0uJHNjb3BlZFNsb3RzID0gX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMgfHwgZW1wdHlPYmplY3Q7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJcIik7XG4gICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcbiAgICAgIC8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJFcnJvclwiKTtcbiAgICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudFxuICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICByZXR1cm4gdm5vZGVcbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQkMyA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkJDMrKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArICh2bS5fdWlkKTtcbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgIH1cblxuICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgdm0uX2lzVnVlID0gdHJ1ZTtcbiAgICAvLyBtZXJnZSBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcbiAgICAgIC8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG4gICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlXG4gICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cbiAgICAgIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgICAvLyBleHBvc2UgcmVhbCBzZWxmXG4gICAgdm0uX3NlbGYgPSB2bTtcbiAgICBpbml0TGlmZWN5Y2xlKHZtKTtcbiAgICBpbml0RXZlbnRzKHZtKTtcbiAgICBpbml0UmVuZGVyKHZtKTtcbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZUNyZWF0ZScpO1xuICAgIGluaXRJbmplY3Rpb25zKHZtKTsgLy8gcmVzb2x2ZSBpbmplY3Rpb25zIGJlZm9yZSBkYXRhL3Byb3BzXG4gICAgaW5pdFN0YXRlKHZtKTtcbiAgICBpbml0UHJvdmlkZSh2bSk7IC8vIHJlc29sdmUgcHJvdmlkZSBhZnRlciBkYXRhL3Byb3BzXG4gICAgY2FsbEhvb2sodm0sICdjcmVhdGVkJyk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgdm0uX25hbWUgPSBmb3JtYXRDb21wb25lbnROYW1lKHZtLCBmYWxzZSk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh2bS5fbmFtZSkgKyBcIiBpbml0XCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9XG5cbiAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHtcbiAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQgKHZtLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuICB2YXIgcGFyZW50Vm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgb3B0cy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgb3B0cy5fcGFyZW50RWxtID0gb3B0aW9ucy5fcGFyZW50RWxtO1xuICBvcHRzLl9yZWZFbG0gPSBvcHRpb25zLl9yZWZFbG07XG5cbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHBhcmVudFZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcbiAgb3B0cy5fcGFyZW50TGlzdGVuZXJzID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XG5cbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAvLyBuZWVkIHRvIHJlc29sdmUgbmV3IG9wdGlvbnMuXG4gICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgIHZhciBtb2RpZmllZE9wdGlvbnMgPSByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3IpO1xuICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG1vZGlmaWVkO1xuICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgZXh0ZW5kZWQgPSBDdG9yLmV4dGVuZE9wdGlvbnM7XG4gIHZhciBzZWFsZWQgPSBDdG9yLnNlYWxlZE9wdGlvbnM7XG4gIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHtcbiAgICBpZiAobGF0ZXN0W2tleV0gIT09IHNlYWxlZFtrZXldKSB7XG4gICAgICBpZiAoIW1vZGlmaWVkKSB7IG1vZGlmaWVkID0ge307IH1cbiAgICAgIG1vZGlmaWVkW2tleV0gPSBkZWR1cGUobGF0ZXN0W2tleV0sIGV4dGVuZGVkW2tleV0sIHNlYWxlZFtrZXldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkXG59XG5cbmZ1bmN0aW9uIGRlZHVwZSAobGF0ZXN0LCBleHRlbmRlZCwgc2VhbGVkKSB7XG4gIC8vIGNvbXBhcmUgbGF0ZXN0IGFuZCBzZWFsZWQgdG8gZW5zdXJlIGxpZmVjeWNsZSBob29rcyB3b24ndCBiZSBkdXBsaWNhdGVkXG4gIC8vIGJldHdlZW4gbWVyZ2VzXG4gIGlmIChBcnJheS5pc0FycmF5KGxhdGVzdCkpIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgc2VhbGVkID0gQXJyYXkuaXNBcnJheShzZWFsZWQpID8gc2VhbGVkIDogW3NlYWxlZF07XG4gICAgZXh0ZW5kZWQgPSBBcnJheS5pc0FycmF5KGV4dGVuZGVkKSA/IGV4dGVuZGVkIDogW2V4dGVuZGVkXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhdGVzdC5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gcHVzaCBvcmlnaW5hbCBvcHRpb25zIGFuZCBub3Qgc2VhbGVkIG9wdGlvbnMgdG8gZXhjbHVkZSBkdXBsaWNhdGVkIG9wdGlvbnNcbiAgICAgIGlmIChleHRlbmRlZC5pbmRleE9mKGxhdGVzdFtpXSkgPj0gMCB8fCBzZWFsZWQuaW5kZXhPZihsYXRlc3RbaV0pIDwgMCkge1xuICAgICAgICByZXMucHVzaChsYXRlc3RbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxhdGVzdFxuICB9XG59XG5cbmZ1bmN0aW9uIFZ1ZSAob3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICEodGhpcyBpbnN0YW5jZW9mIFZ1ZSlcbiAgKSB7XG4gICAgd2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpO1xuICB9XG4gIHRoaXMuX2luaXQob3B0aW9ucyk7XG59XG5cbmluaXRNaXhpbihWdWUpO1xuc3RhdGVNaXhpbihWdWUpO1xuZXZlbnRzTWl4aW4oVnVlKTtcbmxpZmVjeWNsZU1peGluKFZ1ZSk7XG5yZW5kZXJNaXhpbihWdWUpO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFVzZSAoVnVlKSB7XG4gIFZ1ZS51c2UgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgdmFyIGluc3RhbGxlZFBsdWdpbnMgPSAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyB8fCAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyA9IFtdKSk7XG4gICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID4gLTEpIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzXG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5pbnN0YWxsLmFwcGx5KHBsdWdpbiwgYXJncyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2luID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICAgIGluc3RhbGxlZFBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0TWl4aW4kMSAoVnVlKSB7XG4gIFZ1ZS5taXhpbiA9IGZ1bmN0aW9uIChtaXhpbikge1xuICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIG1peGluKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV4dGVuZCAoVnVlKSB7XG4gIC8qKlxuICAgKiBFYWNoIGluc3RhbmNlIGNvbnN0cnVjdG9yLCBpbmNsdWRpbmcgVnVlLCBoYXMgYSB1bmlxdWVcbiAgICogY2lkLiBUaGlzIGVuYWJsZXMgdXMgdG8gY3JlYXRlIHdyYXBwZWQgXCJjaGlsZFxuICAgKiBjb25zdHJ1Y3RvcnNcIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS5cbiAgICovXG4gIFZ1ZS5jaWQgPSAwO1xuICB2YXIgY2lkID0gMTtcblxuICAvKipcbiAgICogQ2xhc3MgaW5oZXJpdGFuY2VcbiAgICovXG4gIFZ1ZS5leHRlbmQgPSBmdW5jdGlvbiAoZXh0ZW5kT3B0aW9ucykge1xuICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9O1xuICAgIHZhciBTdXBlciA9IHRoaXM7XG4gICAgdmFyIFN1cGVySWQgPSBTdXBlci5jaWQ7XG4gICAgdmFyIGNhY2hlZEN0b3JzID0gZXh0ZW5kT3B0aW9ucy5fQ3RvciB8fCAoZXh0ZW5kT3B0aW9ucy5fQ3RvciA9IHt9KTtcbiAgICBpZiAoY2FjaGVkQ3RvcnNbU3VwZXJJZF0pIHtcbiAgICAgIHJldHVybiBjYWNoZWRDdG9yc1tTdXBlcklkXVxuICAgIH1cblxuICAgIHZhciBuYW1lID0gZXh0ZW5kT3B0aW9ucy5uYW1lIHx8IFN1cGVyLm9wdGlvbnMubmFtZTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lKSB7XG4gICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICB9O1xuICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICBTdXBlci5vcHRpb25zLFxuICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICk7XG4gICAgU3ViWydzdXBlciddID0gU3VwZXI7XG5cbiAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvblxuICAgIC8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4gICAgLy8gYXZvaWRzIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxscyBmb3IgZWFjaCBpbnN0YW5jZSBjcmVhdGVkLlxuICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykge1xuICAgICAgaW5pdFByb3BzJDEoU3ViKTtcbiAgICB9XG4gICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICBpbml0Q29tcHV0ZWQkMShTdWIpO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgU3ViLm1peGluID0gU3VwZXIubWl4aW47XG4gICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblxuICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cblxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN1cGVyIG9wdGlvbnMgYXQgZXh0ZW5zaW9uIHRpbWUuXG4gICAgLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmVcbiAgICAvLyBiZWVuIHVwZGF0ZWQuXG4gICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7XG4gICAgU3ViLmV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zO1xuICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7XG5cbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzJDEgKENvbXApIHtcbiAgdmFyIHByb3BzID0gQ29tcC5vcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBwcm94eShDb21wLnByb3RvdHlwZSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQkMSAoQ29tcCkge1xuICB2YXIgY29tcHV0ZWQgPSBDb21wLm9wdGlvbnMuY29tcHV0ZWQ7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIGRlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAvKipcbiAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgKi9cbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZSA9PT0gJ2NvbXBvbmVudCcpIHtcbiAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoaWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbi5uYW1lID0gZGVmaW5pdGlvbi5uYW1lIHx8IGlkO1xuICAgICAgICAgIGRlZmluaXRpb24gPSB0aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnZGlyZWN0aXZlJyAmJiB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGRlZmluaXRpb24gPSB7IGJpbmQ6IGRlZmluaXRpb24sIHVwZGF0ZTogZGVmaW5pdGlvbiB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF0gPSBkZWZpbml0aW9uO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIGZvciAodmFyIGtleSBpbiB0aGlzJDEuY2FjaGUpIHtcbiAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzJDEuY2FjaGUsIGtleSwgdGhpcyQxLmtleXMpO1xuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuJHdhdGNoKCdpbmNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIHNsb3QgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoc2xvdCk7XG4gICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBpbmNsdWRlID0gcmVmLmluY2x1ZGU7XG4gICAgICB2YXIgZXhjbHVkZSA9IHJlZi5leGNsdWRlO1xuICAgICAgaWYgKFxuICAgICAgICAvLyBub3QgaW5jbHVkZWRcbiAgICAgICAgKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSkgfHxcbiAgICAgICAgLy8gZXhjbHVkZWRcbiAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVmJDEgPSB0aGlzO1xuICAgICAgdmFyIGNhY2hlID0gcmVmJDEuY2FjaGU7XG4gICAgICB2YXIga2V5cyA9IHJlZiQxLmtleXM7XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcbiAgICAgICAgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbiAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KVxuICAgICAgICA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAoXCI6OlwiICsgKGNvbXBvbmVudE9wdGlvbnMudGFnKSkgOiAnJylcbiAgICAgICAgOiB2bm9kZS5rZXk7XG4gICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNhY2hlW2tleV0uY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3RcbiAgICAgICAgcmVtb3ZlKGtleXMsIGtleSk7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgIGlmICh0aGlzLm1heCAmJiBrZXlzLmxlbmd0aCA+IHBhcnNlSW50KHRoaXMubWF4KSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5c1swXSwga2V5cywgdGhpcy5fdm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn1cblxudmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICBLZWVwQWxpdmU6IEtlZXBBbGl2ZVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi41LjE2JztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcbiAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLHRyYW5zbGF0ZSwnICtcbiAgJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnXG4pO1xuXG52YXIgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcblxudmFyIGlzWGxpbmsgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmFtZS5jaGFyQXQoNSkgPT09ICc6JyAmJiBuYW1lLnNsaWNlKDAsIDUpID09PSAneGxpbmsnXG59O1xuXG52YXIgZ2V0WGxpbmtQcm9wID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGlzWGxpbmsobmFtZSkgPyBuYW1lLnNsaWNlKDYsIG5hbWUubGVuZ3RoKSA6ICcnXG59O1xuXG52YXIgaXNGYWxzeUF0dHJWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gZmFsc2Vcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZW5DbGFzc0ZvclZub2RlICh2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKGlzRGVmKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShjaGlsZE5vZGUuZGF0YSwgZGF0YSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChpc0RlZihwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoZGF0YSwgcGFyZW50Tm9kZS5kYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbmRlckNsYXNzKGRhdGEuc3RhdGljQ2xhc3MsIGRhdGEuY2xhc3MpXG59XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhIChjaGlsZCwgcGFyZW50KSB7XG4gIHJldHVybiB7XG4gICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcbiAgICBjbGFzczogaXNEZWYoY2hpbGQuY2xhc3MpXG4gICAgICA/IFtjaGlsZC5jbGFzcywgcGFyZW50LmNsYXNzXVxuICAgICAgOiBwYXJlbnQuY2xhc3NcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJDbGFzcyAoXG4gIHN0YXRpY0NsYXNzLFxuICBkeW5hbWljQ2xhc3Ncbikge1xuICBpZiAoaXNEZWYoc3RhdGljQ2xhc3MpIHx8IGlzRGVmKGR5bmFtaWNDbGFzcykpIHtcbiAgICByZXR1cm4gY29uY2F0KHN0YXRpY0NsYXNzLCBzdHJpbmdpZnlDbGFzcyhkeW5hbWljQ2xhc3MpKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBjb25jYXQgKGEsIGIpIHtcbiAgcmV0dXJuIGEgPyBiID8gKGEgKyAnICcgKyBiKSA6IGEgOiAoYiB8fCAnJylcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5Q2xhc3MgKHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlBcnJheSh2YWx1ZSlcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSlcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlBcnJheSAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgc3RyaW5naWZpZWQ7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGlzRGVmKHN0cmluZ2lmaWVkID0gc3RyaW5naWZ5Q2xhc3ModmFsdWVbaV0pKSAmJiBzdHJpbmdpZmllZCAhPT0gJycpIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IHN0cmluZ2lmaWVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeU9iamVjdCAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAodmFsdWVba2V5XSkge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgbmFtZXNwYWNlTWFwID0ge1xuICBzdmc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gIG1hdGg6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJ1xufTtcblxudmFyIGlzSFRNTFRhZyA9IG1ha2VNYXAoXG4gICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSwnICtcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcbiAgJ2RpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgK1xuICAnYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LCcgK1xuICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICtcbiAgJ2NhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLCcgK1xuICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksJyArXG4gICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290J1xuKTtcblxuLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5XG4vLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxudmFyIGlzU1ZHID0gbWFrZU1hcChcbiAgJ3N2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLGZvbnQtZmFjZSwnICtcbiAgJ2ZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcgK1xuICAncG9seWdvbixwb2x5bGluZSxyZWN0LHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0cGF0aCx0c3Bhbix1c2UsdmlldycsXG4gIHRydWVcbik7XG5cblxuXG52YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHKHRhZylcbn07XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gIGlmIChpc1NWRyh0YWcpKSB7XG4gICAgcmV0dXJuICdzdmcnXG4gIH1cbiAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4gIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcbiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgcmV0dXJuICdtYXRoJ1xuICB9XG59XG5cbnZhciB1bmtub3duRWxlbWVudENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChpc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ11cbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbnZhciBpc1RleHRJbnB1dFR5cGUgPSBtYWtlTWFwKCd0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCcpO1xuXG4vKiAgKi9cblxuLyoqXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cbiAqL1xuZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnQ2Fubm90IGZpbmQgZWxlbWVudDogJyArIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgLy8gZmFsc2Ugb3IgbnVsbCB3aWxsIHJlbW92ZSB0aGUgYXR0cmlidXRlIGJ1dCB1bmRlZmluZWQgd2lsbCBub3RcbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGVTY29wZSAobm9kZSwgc2NvcGVJZCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG59XG5cblxudmFyIG5vZGVPcHMgPSBPYmplY3QuZnJlZXplKHtcblx0Y3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLFxuXHRjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcblx0Y3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuXHRjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuXHRpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcblx0cmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuXHRhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG5cdHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG5cdG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcblx0dGFnTmFtZTogdGFnTmFtZSxcblx0c2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuXHRzZXRTdHlsZVNjb3BlOiBzZXRTdHlsZVNjb3BlXG59KTtcblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlIChfLCB2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmVcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8sIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgIH1cbiAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxuICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzVHJ1ZShpc1JlYWN0aXZhdGVkKSkge1xuICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKSB7XG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XG4gICAgICB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQgPSBudWxsO1xuICAgIH1cbiAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7XG4gICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpO1xuICAgIC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb25cbiAgICAvLyBkb2VzIG5vdCB0cmlnZ2VyIGJlY2F1c2UgdGhlIGlubmVyIG5vZGUncyBjcmVhdGVkIGhvb2tzIGFyZSBub3QgY2FsbGVkXG4gICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG4gICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC5cbiAgICB2YXIgaW5uZXJOb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgaW5uZXJOb2RlID0gaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChpc0RlZihpID0gaW5uZXJOb2RlLmRhdGEpICYmIGlzRGVmKGkgPSBpLnRyYW5zaXRpb24pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuICAgIC8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmXG4gICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0IChwYXJlbnQsIGVsbSwgcmVmJCQxKSB7XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIGlmIChpc0RlZihyZWYkJDEpKSB7XG4gICAgICAgIGlmIChyZWYkJDEucGFyZW50Tm9kZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50LCBlbG0sIHJlZiQkMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LCBlbG0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuICh2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3JlYXRlRWxtKGNoaWxkcmVuW2ldLCBpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmVsbSwgbnVsbCwgdHJ1ZSwgY2hpbGRyZW4sIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUodm5vZGUudGV4dCkpIHtcbiAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQodm5vZGUuZWxtLCBub2RlT3BzLmNyZWF0ZVRleHROb2RlKFN0cmluZyh2bm9kZS50ZXh0KSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUGF0Y2hhYmxlICh2bm9kZSkge1xuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgfVxuICAgIHJldHVybiBpc0RlZih2bm9kZS50YWcpXG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VDcmVhdGVIb29rcyAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBpID0gdm5vZGUuZGF0YS5ob29rOyAvLyBSZXVzZSB2YXJpYWJsZVxuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgaWYgKGlzRGVmKGkuY3JlYXRlKSkgeyBpLmNyZWF0ZShlbXB0eU5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkuaW5zZXJ0KSkgeyBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICAvLyBzZXQgc2NvcGUgaWQgYXR0cmlidXRlIGZvciBzY29wZWQgQ1NTLlxuICAvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuICAvLyBvZiBnb2luZyB0aHJvdWdoIHRoZSBub3JtYWwgYXR0cmlidXRlIHBhdGNoaW5nIHByb2Nlc3MuXG4gIGZ1bmN0aW9uIHNldFNjb3BlICh2bm9kZSkge1xuICAgIHZhciBpO1xuICAgIGlmIChpc0RlZihpID0gdm5vZGUuZm5TY29wZUlkKSkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlO1xuICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgIGlmIChpc0RlZihpID0gYW5jZXN0b3IuY29udGV4dCkgJiYgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpKSB7XG4gICAgICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGZvciBzbG90IGNvbnRlbnQgdGhleSBzaG91bGQgYWxzbyBnZXQgdGhlIHNjb3BlSWQgZnJvbSB0aGUgaG9zdCBpbnN0YW5jZS5cbiAgICBpZiAoaXNEZWYoaSA9IGFjdGl2ZUluc3RhbmNlKSAmJlxuICAgICAgaSAhPT0gdm5vZGUuY29udGV4dCAmJlxuICAgICAgaSAhPT0gdm5vZGUuZm5Db250ZXh0ICYmXG4gICAgICBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZClcbiAgICApIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFZub2RlcyAocGFyZW50RWxtLCByZWZFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgY3JlYXRlRWxtKHZub2Rlc1tzdGFydElkeF0sIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0sIGZhbHNlLCB2bm9kZXMsIHN0YXJ0SWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayAodm5vZGUpIHtcbiAgICB2YXIgaSwgajtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuZGVzdHJveSkpIHsgaSh2bm9kZSk7IH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkgeyBjYnMuZGVzdHJveVtpXSh2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jaGlsZHJlbikpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7ICsraikge1xuICAgICAgICBpbnZva2VEZXN0cm95SG9vayh2bm9kZS5jaGlsZHJlbltqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlVm5vZGVzIChwYXJlbnRFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XG4gICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICB9IGVsc2UgeyAvLyBUZXh0IG5vZGVcbiAgICAgICAgICByZW1vdmVOb2RlKGNoLmVsbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rICh2bm9kZSwgcm0pIHtcbiAgICBpZiAoaXNEZWYocm0pIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG4gICAgICBpZiAoaXNEZWYocm0pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbGlzdGVuZXJzIGNvdW50XG4gICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgfVxuICAgICAgLy8gcmVjdXJzaXZlbHkgaW52b2tlIGhvb2tzIG9uIGNoaWxkIGNvbXBvbmVudCByb290IG5vZGVcbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGlzRGVmKGkgPSBpLl92bm9kZSkgJiYgaXNEZWYoaS5kYXRhKSkge1xuICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5yZW1vdmUpKSB7XG4gICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU5vZGUodm5vZGUuZWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbiAocGFyZW50RWxtLCBvbGRDaCwgbmV3Q2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDtcbiAgICB2YXIgb2xkRW5kSWR4ID0gb2xkQ2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gICAgdmFyIG5ld0VuZElkeCA9IG5ld0NoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICAgIHZhciBvbGRLZXlUb0lkeCwgaWR4SW5PbGQsIHZub2RlVG9Nb3ZlLCByZWZFbG07XG5cbiAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG4gICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnNcbiAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhuZXdDaCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZEVuZFZub2RlKSkge1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgcmlnaHRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIHZub2RlVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcbiAgICAgIHJlZkVsbSA9IGlzVW5kZWYobmV3Q2hbbmV3RW5kSWR4ICsgMV0pID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLmVsbTtcbiAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIGlmIChuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBlbG0gPSB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07XG5cbiAgICBpZiAoaXNUcnVlKG9sZFZub2RlLmlzQXN5bmNQbGFjZWhvbGRlcikpIHtcbiAgICAgIGlmIChpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgIGh5ZHJhdGUob2xkVm5vZGUuZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyByZXVzZSBlbGVtZW50IGZvciBzdGF0aWMgdHJlZXMuXG4gICAgLy8gbm90ZSB3ZSBvbmx5IGRvIHRoaXMgaWYgdGhlIHZub2RlIGlzIGNsb25lZCAtXG4gICAgLy8gaWYgdGhlIG5ldyBub2RlIGlzIG5vdCBjbG9uZWQgaXQgbWVhbnMgdGhlIHJlbmRlciBmdW5jdGlvbnMgaGF2ZSBiZWVuXG4gICAgLy8gcmVzZXQgYnkgdGhlIGhvdC1yZWxvYWQtYXBpIGFuZCB3ZSBuZWVkIHRvIGRvIGEgcHJvcGVyIHJlLXJlbmRlci5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgaXNUcnVlKG9sZFZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgdm5vZGUua2V5ID09PSBvbGRWbm9kZS5rZXkgJiZcbiAgICAgIChpc1RydWUodm5vZGUuaXNDbG9uZWQpIHx8IGlzVHJ1ZSh2bm9kZS5pc09uY2UpKVxuICAgICkge1xuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucHJlcGF0Y2gpKSB7XG4gICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIG9sZENoID0gb2xkVm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy51cGRhdGUubGVuZ3RoOyArK2kpIHsgY2JzLnVwZGF0ZVtpXShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkudXBkYXRlKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzVW5kZWYodm5vZGUudGV4dCkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRDaCkgJiYgaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChvbGRDaCAhPT0gY2gpIHsgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7IH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKGVsbSwgb2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5LCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIGlmIChpc1VuZGVmKHZub2RlKSkge1xuICAgICAgaWYgKGlzRGVmKG9sZFZub2RlKSkgeyBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7IH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpc0luaXRpYWxQYXRjaCA9IGZhbHNlO1xuICAgIHZhciBpbnNlcnRlZFZub2RlUXVldWUgPSBbXTtcblxuICAgIGlmIChpc1VuZGVmKG9sZFZub2RlKSkge1xuICAgICAgLy8gZW1wdHkgbW91bnQgKGxpa2VseSBhcyBjb21wb25lbnQpLCBjcmVhdGUgbmV3IHJvb3QgZWxlbWVudFxuICAgICAgaXNJbml0aWFsUGF0Y2ggPSB0cnVlO1xuICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XG4gICAgICBpZiAoIWlzUmVhbEVsZW1lbnQgJiYgc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHtcbiAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG4gICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQgYW5kIGlmIHdlIGNhbiBwZXJmb3JtXG4gICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cbiAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKFNTUl9BVFRSKSkge1xuICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKFNTUl9BVFRSKTtcbiAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1RydWUoaHlkcmF0aW5nKSkge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnICtcbiAgICAgICAgICAgICAgICAnc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQuIFRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBpbmNvcnJlY3QgJyArXG4gICAgICAgICAgICAgICAgJ0hUTUwgbWFya3VwLCBmb3IgZXhhbXBsZSBuZXN0aW5nIGJsb2NrLWxldmVsIGVsZW1lbnRzIGluc2lkZSAnICtcbiAgICAgICAgICAgICAgICAnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcgK1xuICAgICAgICAgICAgICAgICdmdWxsIGNsaWVudC1zaWRlIHJlbmRlci4nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGVpdGhlciBub3Qgc2VydmVyLXJlbmRlcmVkLCBvciBoeWRyYXRpb24gZmFpbGVkLlxuICAgICAgICAgIC8vIGNyZWF0ZSBhbiBlbXB0eSBub2RlIGFuZCByZXBsYWNlIGl0XG4gICAgICAgICAgb2xkVm5vZGUgPSBlbXB0eU5vZGVBdChvbGRWbm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXBsYWNpbmcgZXhpc3RpbmcgZWxlbWVudFxuICAgICAgICB2YXIgb2xkRWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICB2YXIgcGFyZW50RWxtJDEgPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IG5vZGVcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSQxLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0kMSkpIHtcbiAgICAgICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtJDEsIFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGl2ZXMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xuICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBvbGREaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcywgb2xkVm5vZGUuY29udGV4dCk7XG4gIHZhciBuZXdEaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcywgdm5vZGUuY29udGV4dCk7XG5cbiAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107XG4gIHZhciBkaXJzV2l0aFBvc3RwYXRjaCA9IFtdO1xuXG4gIHZhciBrZXksIG9sZERpciwgZGlyO1xuICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7XG4gICAgb2xkRGlyID0gb2xkRGlyc1trZXldO1xuICAgIGRpciA9IG5ld0RpcnNba2V5XTtcbiAgICBpZiAoIW9sZERpcikge1xuICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZFxuICAgICAgY2FsbEhvb2skMShkaXIsICdiaW5kJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZVxuICAgICAgZGlyLm9sZFZhbHVlID0gb2xkRGlyLnZhbHVlO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQXR0cnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgb3B0cyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5hdHRycykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmF0dHJzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1ciwgb2xkO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKGF0dHJzLl9fb2JfXykpIHtcbiAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xuICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyKTtcbiAgICB9XG4gIH1cbiAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKChpc0lFIHx8IGlzRWRnZSkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChpc1VuZGVmKGF0dHJzW2tleV0pKSB7XG4gICAgICBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoZWwudGFnTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChpc0Jvb2xlYW5BdHRyKGtleSkpIHtcbiAgICAvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGVjaG5pY2FsbHkgYWxsb3dmdWxsc2NyZWVuIGlzIGEgYm9vbGVhbiBhdHRyaWJ1dGUgZm9yIDxpZnJhbWU+LFxuICAgICAgLy8gYnV0IEZsYXNoIGV4cGVjdHMgYSB2YWx1ZSBvZiBcInRydWVcIiB3aGVuIHVzZWQgb24gPGVtYmVkPiB0YWdcbiAgICAgIHZhbHVlID0ga2V5ID09PSAnYWxsb3dmdWxsc2NyZWVuJyAmJiBlbC50YWdOYW1lID09PSAnRU1CRUQnXG4gICAgICAgID8gJ3RydWUnXG4gICAgICAgIDoga2V5O1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJyA/ICdmYWxzZScgOiAndHJ1ZScpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2VTZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyAjNzEzODogSUUxMCAmIDExIGZpcmVzIGlucHV0IGV2ZW50IHdoZW4gc2V0dGluZyBwbGFjZWhvbGRlciBvblxuICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAvLyBpbW1lZGlhdGVseS5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoXG4gICAgICBpc0lFICYmICFpc0lFOSAmJlxuICAgICAgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJlxuICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcbiAgaWYgKFxuICAgIGlzVW5kZWYoZGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICBpc1VuZGVmKGRhdGEuY2xhc3MpICYmIChcbiAgICAgIGlzVW5kZWYob2xkRGF0YSkgfHwgKFxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5jbGFzcylcbiAgICAgIClcbiAgICApXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNscyA9IGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpO1xuXG4gIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcbiAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgaWYgKGlzRGVmKHRyYW5zaXRpb25DbGFzcykpIHtcbiAgICBjbHMgPSBjb25jYXQoY2xzLCBzdHJpbmdpZnlDbGFzcyh0cmFuc2l0aW9uQ2xhc3MpKTtcbiAgfVxuXG4gIC8vIHNldCB0aGUgY2xhc3NcbiAgaWYgKGNscyAhPT0gZWwuX3ByZXZDbGFzcykge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuICAgIGVsLl9wcmV2Q2xhc3MgPSBjbHM7XG4gIH1cbn1cblxudmFyIGtsYXNzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUNsYXNzLFxuICB1cGRhdGU6IHVwZGF0ZUNsYXNzXG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuXG5cblxuXG5cblxuXG5cbi8vIGFkZCBhIHJhdyBhdHRyICh1c2UgdGhpcyBpbiBwcmVUcmFuc2Zvcm1zKVxuXG5cblxuXG5cblxuXG5cbi8vIG5vdGU6IHRoaXMgb25seSByZW1vdmVzIHRoZSBhdHRyIGZyb20gdGhlIEFycmF5IChhdHRyc0xpc3QpIHNvIHRoYXQgaXRcbi8vIGRvZXNuJ3QgZ2V0IHByb2Nlc3NlZCBieSBwcm9jZXNzQXR0cnMuXG4vLyBCeSBkZWZhdWx0IGl0IGRvZXMgTk9UIHJlbW92ZSBpdCBmcm9tIHRoZSBtYXAgKGF0dHJzTWFwKSBiZWNhdXNlIHRoZSBtYXAgaXNcbi8vIG5lZWRlZCBkdXJpbmcgY29kZWdlbi5cblxuLyogICovXG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZSBnZW5lcmF0aW9uIGZvciBjb21wb25lbnQgdi1tb2RlbFxuICovXG5cblxuLyoqXG4gKiBDcm9zcy1wbGF0Zm9ybSBjb2RlZ2VuIGhlbHBlciBmb3IgZ2VuZXJhdGluZyB2LW1vZGVsIHZhbHVlIGFzc2lnbm1lbnQgY29kZS5cbiAqL1xuXG4vKiAgKi9cblxuLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZVxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cbnZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xudmFyIENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7XG5cbi8qICAqL1xuXG4vLyBub3JtYWxpemUgdi1tb2RlbCBldmVudCB0b2tlbnMgdGhhdCBjYW4gb25seSBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWUuXG4vLyBpdCdzIGltcG9ydGFudCB0byBwbGFjZSB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGluIHRoZSBhcnJheSBiZWNhdXNlXG4vLyB0aGUgd2hvbGUgcG9pbnQgaXMgZW5zdXJpbmcgdGhlIHYtbW9kZWwgY2FsbGJhY2sgZ2V0cyBjYWxsZWQgYmVmb3JlXG4vLyB1c2VyLWF0dGFjaGVkIGhhbmRsZXJzLlxuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnRzIChvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW1JBTkdFX1RPS0VOXSkpIHtcbiAgICAvLyBJRSBpbnB1dFt0eXBlPXJhbmdlXSBvbmx5IHN1cHBvcnRzIGBjaGFuZ2VgIGV2ZW50XG4gICAgdmFyIGV2ZW50ID0gaXNJRSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgICBvbltldmVudF0gPSBbXS5jb25jYXQob25bUkFOR0VfVE9LRU5dLCBvbltldmVudF0gfHwgW10pO1xuICAgIGRlbGV0ZSBvbltSQU5HRV9UT0tFTl07XG4gIH1cbiAgLy8gVGhpcyB3YXMgb3JpZ2luYWxseSBpbnRlbmRlZCB0byBmaXggIzQ1MjEgYnV0IG5vIGxvbmdlciBuZWNlc3NhcnlcbiAgLy8gYWZ0ZXIgMi41LiBLZWVwaW5nIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggZ2VuZXJhdGVkIGNvZGUgZnJvbSA8IDIuNFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSkpIHtcbiAgICBvbi5jaGFuZ2UgPSBbXS5jb25jYXQob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dLCBvbi5jaGFuZ2UgfHwgW10pO1xuICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07XG4gIH1cbn1cblxudmFyIHRhcmdldCQxO1xuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciAoaGFuZGxlciwgZXZlbnQsIGNhcHR1cmUpIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZCQxIChcbiAgZXZlbnQsXG4gIGhhbmRsZXIsXG4gIG9uY2UkJDEsXG4gIGNhcHR1cmUsXG4gIHBhc3NpdmVcbikge1xuICBoYW5kbGVyID0gd2l0aE1hY3JvVGFzayhoYW5kbGVyKTtcbiAgaWYgKG9uY2UkJDEpIHsgaGFuZGxlciA9IGNyZWF0ZU9uY2VIYW5kbGVyKGhhbmRsZXIsIGV2ZW50LCBjYXB0dXJlKTsgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKFxuICAgIGV2ZW50LFxuICAgIGhhbmRsZXIsXG4gICAgc3VwcG9ydHNQYXNzaXZlXG4gICAgICA/IHsgY2FwdHVyZTogY2FwdHVyZSwgcGFzc2l2ZTogcGFzc2l2ZSB9XG4gICAgICA6IGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDIgKFxuICBldmVudCxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIGV2ZW50LFxuICAgIGhhbmRsZXIuX3dpdGhUYXNrIHx8IGhhbmRsZXIsXG4gICAgY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLm9uKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEub24pKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9uID0gdm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdGFyZ2V0JDEgPSB2bm9kZS5lbG07XG4gIG5vcm1hbGl6ZUV2ZW50cyhvbik7XG4gIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCQxLCByZW1vdmUkMiwgdm5vZGUuY29udGV4dCk7XG4gIHRhcmdldCQxID0gdW5kZWZpbmVkO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcbiAgdXBkYXRlOiB1cGRhdGVET01MaXN0ZW5lcnNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZURPTVByb3BzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5kb21Qcm9wcykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmRvbVByb3BzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1cjtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihwcm9wcy5fX29iX18pKSB7XG4gICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgIGlmIChpc1VuZGVmKHByb3BzW2tleV0pKSB7XG4gICAgICBlbG1ba2V5XSA9ICcnO1xuICAgIH1cbiAgfVxuICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgIGN1ciA9IHByb3BzW2tleV07XG4gICAgLy8gaWdub3JlIGNoaWxkcmVuIGlmIHRoZSBub2RlIGhhcyB0ZXh0Q29udGVudCBvciBpbm5lckhUTUwsXG4gICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuICAgIGlmIChrZXkgPT09ICd0ZXh0Q29udGVudCcgfHwga2V5ID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfVxuICAgICAgLy8gIzY2MDEgd29yayBhcm91bmQgQ2hyb21lIHZlcnNpb24gPD0gNTUgYnVnIHdoZXJlIHNpbmdsZSB0ZXh0Tm9kZVxuICAgICAgLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbiAgICAgIGlmIChlbG0uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnKSB7XG4gICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuICAgICAgZWxtLl92YWx1ZSA9IGN1cjtcbiAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgdmFyIHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBzdHJDdXIpKSB7XG4gICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWxtW2tleV0gPSBjdXI7XG4gICAgfVxuICB9XG59XG5cbi8vIGNoZWNrIHBsYXRmb3Jtcy93ZWIvdXRpbC9hdHRycy5qcyBhY2NlcHRWYWx1ZVxuXG5cbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVZhbHVlIChlbG0sIGNoZWNrVmFsKSB7XG4gIHJldHVybiAoIWVsbS5jb21wb3NpbmcgJiYgKFxuICAgIGVsbS50YWdOYW1lID09PSAnT1BUSU9OJyB8fFxuICAgIGlzTm90SW5Gb2N1c0FuZERpcnR5KGVsbSwgY2hlY2tWYWwpIHx8XG4gICAgaXNEaXJ0eVdpdGhNb2RpZmllcnMoZWxtLCBjaGVja1ZhbClcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNOb3RJbkZvY3VzQW5kRGlydHkgKGVsbSwgY2hlY2tWYWwpIHtcbiAgLy8gcmV0dXJuIHRydWUgd2hlbiB0ZXh0Ym94ICgubnVtYmVyIGFuZCAudHJpbSkgbG9zZXMgZm9jdXMgYW5kIGl0cyB2YWx1ZSBpc1xuICAvLyBub3QgZXF1YWwgdG8gdGhlIHVwZGF0ZWQgdmFsdWVcbiAgdmFyIG5vdEluRm9jdXMgPSB0cnVlO1xuICAvLyAjNjE1N1xuICAvLyB3b3JrIGFyb3VuZCBJRSBidWcgd2hlbiBhY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbiBhbiBpZnJhbWVcbiAgdHJ5IHsgbm90SW5Gb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsbTsgfSBjYXRjaCAoZSkge31cbiAgcmV0dXJuIG5vdEluRm9jdXMgJiYgZWxtLnZhbHVlICE9PSBjaGVja1ZhbFxufVxuXG5mdW5jdGlvbiBpc0RpcnR5V2l0aE1vZGlmaWVycyAoZWxtLCBuZXdWYWwpIHtcbiAgdmFyIHZhbHVlID0gZWxtLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZWxtLl92TW9kaWZpZXJzOyAvLyBpbmplY3RlZCBieSB2LW1vZGVsIHJ1bnRpbWVcbiAgaWYgKGlzRGVmKG1vZGlmaWVycykpIHtcbiAgICBpZiAobW9kaWZpZXJzLmxhenkpIHtcbiAgICAgIC8vIGlucHV0cyB3aXRoIGxhenkgc2hvdWxkIG9ubHkgYmUgdXBkYXRlZCB3aGVuIG5vdCBpbiBmb2N1c1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxufVxuXG52YXIgZG9tUHJvcHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NUHJvcHNcbn1cblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cbiAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgIC8vIFNldCB0aGVtIG9uZSBieSBvbmUsIGFuZCB0aGUgYnJvd3NlciB3aWxsIG9ubHkgc2V0IHRob3NlIGl0IGNhbiByZWNvZ25pemVcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIGVtcHR5U3R5bGU7XG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gIGVtcHR5U3R5bGUgPSBlbXB0eVN0eWxlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgIHJldHVybiBwcm9wXG4gIH1cbiAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuYW1lID0gdmVuZG9yTmFtZXNbaV0gKyBjYXBOYW1lO1xuICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoaXNVbmRlZihkYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKGRhdGEuc3R5bGUpICYmXG4gICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTtcblxuICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YVxuICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKHZub2RlLmRhdGEuc3R5bGUpIHx8IHt9O1xuXG4gIC8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmZcbiAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAvLyB0byBtdXRhdGUgaXQuXG4gIHZub2RlLmRhdGEubm9ybWFsaXplZFN0eWxlID0gaXNEZWYoc3R5bGUuX19vYl9fKVxuICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICA6IHN0eWxlO1xuXG4gIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAoaXNVbmRlZihuZXdTdHlsZVtuYW1lXSkpIHtcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7XG4gICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgaWYgKGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgIC8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYpIHtcbiAgaWYgKCFkZWYpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZi5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXJcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICAgIDogc2V0VGltZW91dFxuICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10uc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG5cbiAgdmFyIHR5cGU7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgdmFyIHByb3BDb3VudCA9IDA7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XG4gICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IFRSQU5TSVRJT047XG4gICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgdHlwZSA9IHRpbWVvdXQgPiAwXG4gICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxuICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgOiBBTklNQVRJT05cbiAgICAgIDogbnVsbDtcbiAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cbiAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuICB2YXIgaGFzVHJhbnNmb3JtID1cbiAgICB0eXBlID09PSBUUkFOU0lUSU9OICYmXG4gICAgdHJhbnNmb3JtUkUudGVzdChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnUHJvcGVydHknXSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuICAgIGhhc1RyYW5zZm9ybTogaGFzVHJhbnNmb3JtXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZW91dCAoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKVxuICB9KSlcbn1cblxuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgPyBhcHBlYXJDbGFzc1xuICAgIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA/IGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpXG4gICAgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKVxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZClcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24uZW50ZXJcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpO1xuXG4gIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24ubGVhdmVcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24sICdsZWF2ZScsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlICgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpWyh2bm9kZS5rZXkpXSA9IHZub2RlO1xuICAgIH1cbiAgICBiZWZvcmVMZWF2ZSAmJiBiZWZvcmVMZWF2ZShlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRMZWF2ZUR1cmF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7XG4gICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBvbmx5IHVzZWQgaW4gZGV2IG1vZGVcbmZ1bmN0aW9uIGNoZWNrRHVyYXRpb24gKHZhbCwgbmFtZSwgdm5vZGUpIHtcbiAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIFwiICtcbiAgICAgIFwiZ290IFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbCkpICsgXCIuXCIsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIE5hTiAtIFwiICtcbiAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyxcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOlxuICogLSBhIG1lcmdlZCBob29rIChpbnZva2VyKSB3aXRoIHRoZSBvcmlnaW5hbCBpbiAuZm5zXG4gKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aClcbiAqL1xuZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCAoZm4pIHtcbiAgaWYgKGlzVW5kZWYoZm4pKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIGludm9rZXJGbnMgPSBmbi5mbnM7XG4gIGlmIChpc0RlZihpbnZva2VyRm5zKSkge1xuICAgIC8vIGludm9rZXJcbiAgICByZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChcbiAgICAgIEFycmF5LmlzQXJyYXkoaW52b2tlckZucylcbiAgICAgICAgPyBpbnZva2VyRm5zWzBdXG4gICAgICAgIDogaW52b2tlckZuc1xuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDFcbiAgfVxufVxuXG5mdW5jdGlvbiBfZW50ZXIgKF8sIHZub2RlKSB7XG4gIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICBlbnRlcih2bm9kZSk7XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG4gIGNyZWF0ZTogX2VudGVyLFxuICBhY3RpdmF0ZTogX2VudGVyLFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSQkMSAodm5vZGUsIHJtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufSA6IHt9XG5cbnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbXG4gIGF0dHJzLFxuICBrbGFzcyxcbiAgZXZlbnRzLFxuICBkb21Qcm9wcyxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb25cbl1cblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xuICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRpcmVjdGl2ZSA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vICM2OTAzXG4gICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRpcmVjdGl2ZS5jb21wb25lbnRVcGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmXG4gICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXG4gICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgID8gYmluZGluZy52YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiBoYXNOb01hdGNoaW5nT3B0aW9uKHYsIGN1ck9wdGlvbnMpOyB9KVxuICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpO1xuICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgdHJpZ2dlcihlbCwgJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFIHx8IGlzRWRnZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICB2YXIgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIjxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD1cXFwiXCIgKyAoYmluZGluZy5leHByZXNzaW9uKSArIFwiXFxcIj4gXCIgK1xuICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlbGVjdGVkLCBvcHRpb247XG4gIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc011bHRpcGxlKSB7XG4gICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHtcbiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgID8gb3B0aW9uLl92YWx1ZVxuICAgIDogb3B0aW9uLnZhbHVlXG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG4gIC8vIHByZXZlbnQgdHJpZ2dlcmluZyBhbiBpbnB1dCBldmVudCBmb3Igbm8gcmVhc29uXG4gIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSB7IHJldHVybiB9XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyKGUudGFyZ2V0LCAnaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlciAoZWwsIHR5cGUpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbn1cblxuLyogICovXG5cbi8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3RcbmZ1bmN0aW9uIGxvY2F0ZU5vZGUgKHZub2RlKSB7XG4gIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICA/IGxvY2F0ZU5vZGUodm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKVxuICAgIDogdm5vZGVcbn1cblxudmFyIHNob3cgPSB7XG4gIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuICAgIGlmICh2YWx1ZSAmJiB0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBvcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufVxuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBtb2RlbDogZGlyZWN0aXZlLFxuICBzaG93OiBzaG93XG59XG5cbi8qICAqL1xuXG4vLyBQcm92aWRlcyB0cmFuc2l0aW9uIHN1cHBvcnQgZm9yIGEgc2luZ2xlIGVsZW1lbnQvY29tcG9uZW50LlxuLy8gc3VwcG9ydHMgdHJhbnNpdGlvbiBtb2RlIChvdXQtaW4gLyBpbi1vdXQpXG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBjc3M6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBlbnRlckNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBkdXJhdGlvbjogW051bWJlciwgU3RyaW5nLCBPYmplY3RdXG59O1xuXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG4gIC8vIHByb3BzXG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyIChoLCByYXdDaGlsZCkge1xuICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgcmV0dXJuIGgoJ2tlZXAtYWxpdmUnLCB7XG4gICAgICBwcm9wczogcmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGFcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gIHdoaWxlICgodm5vZGUgPSB2bm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lQ2hpbGQgKGNoaWxkLCBvbGRDaGlsZCkge1xuICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcbn1cblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIG5hbWU6ICd0cmFuc2l0aW9uJyxcbiAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpOyB9KTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZSA9IHRoaXMubW9kZTtcblxuICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1vZGUgJiYgbW9kZSAhPT0gJ2luLW91dCcgJiYgbW9kZSAhPT0gJ291dC1pbidcbiAgICApIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnICsgbW9kZSxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciByYXdDaGlsZCA9IGNoaWxkcmVuWzBdO1xuXG4gICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xuICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLlxuICAgIGlmIChoYXNQYXJlbnRUcmFuc2l0aW9uKHRoaXMuJHZub2RlKSkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgLy8gYXBwbHkgdHJhbnNpdGlvbiBkYXRhIHRvIGNoaWxkXG4gICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuICAgIHZhciBjaGlsZCA9IGdldFJlYWxDaGlsZChyYXdDaGlsZCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICB9XG5cbiAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxuICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcbiAgICAvLyBkdXJpbmcgZW50ZXJpbmcuXG4gICAgdmFyIGlkID0gXCJfX3RyYW5zaXRpb24tXCIgKyAodGhpcy5fdWlkKSArIFwiLVwiO1xuICAgIGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsXG4gICAgICA/IGNoaWxkLmlzQ29tbWVudFxuICAgICAgICA/IGlkICsgJ2NvbW1lbnQnXG4gICAgICAgIDogaWQgKyBjaGlsZC50YWdcbiAgICAgIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KVxuICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICA6IGNoaWxkLmtleTtcblxuICAgIHZhciBkYXRhID0gKGNoaWxkLmRhdGEgfHwgKGNoaWxkLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG4gICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG4gICAgdmFyIG9sZENoaWxkID0gZ2V0UmVhbENoaWxkKG9sZFJhd0NoaWxkKTtcblxuICAgIC8vIG1hcmsgdi1zaG93XG4gICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgaWYgKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyAmJiBjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH0pKSB7XG4gICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG9sZENoaWxkICYmXG4gICAgICBvbGRDaGlsZC5kYXRhICYmXG4gICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgIWlzQXN5bmNQbGFjZWhvbGRlcihvbGRDaGlsZCkgJiZcbiAgICAgIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlXG4gICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgKSB7XG4gICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbiAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn1cblxuLyogICovXG5cbi8vIFByb3ZpZGVzIHRyYW5zaXRpb24gc3VwcG9ydCBmb3IgbGlzdCBpdGVtcy5cbi8vIHN1cHBvcnRzIG1vdmUgdHJhbnNpdGlvbnMgdXNpbmcgdGhlIEZMSVAgdGVjaG5pcXVlLlxuXG4vLyBCZWNhdXNlIHRoZSB2ZG9tJ3MgY2hpbGRyZW4gdXBkYXRlIGFsZ29yaXRobSBpcyBcInVuc3RhYmxlXCIgLSBpLmUuXG4vLyBpdCBkb2Vzbid0IGd1YXJhbnRlZSB0aGUgcmVsYXRpdmUgcG9zaXRpb25pbmcgb2YgcmVtb3ZlZCBlbGVtZW50cyxcbi8vIHdlIGZvcmNlIHRyYW5zaXRpb24tZ3JvdXAgdG8gdXBkYXRlIGl0cyBjaGlsZHJlbiBpbnRvIHR3byBwYXNzZXM6XG4vLyBpbiB0aGUgZmlyc3QgcGFzcywgd2UgcmVtb3ZlIGFsbCBub2RlcyB0aGF0IG5lZWQgdG8gYmUgcmVtb3ZlZCxcbi8vIHRyaWdnZXJpbmcgdGhlaXIgbGVhdmluZyB0cmFuc2l0aW9uOyBpbiB0aGUgc2Vjb25kIHBhc3MsIHdlIGluc2VydC9tb3ZlXG4vLyBpbnRvIHRoZSBmaW5hbCBkZXNpcmVkIHN0YXRlLiBUaGlzIHdheSBpbiB0aGUgc2Vjb25kIHBhc3MgcmVtb3ZlZFxuLy8gbm9kZXMgd2lsbCByZW1haW4gd2hlcmUgdGhleSBzaG91bGQgYmUuXG5cbnZhciBwcm9wcyA9IGV4dGVuZCh7XG4gIHRhZzogU3RyaW5nLFxuICBtb3ZlQ2xhc3M6IFN0cmluZ1xufSwgdHJhbnNpdGlvblByb3BzKTtcblxuZGVsZXRlIHByb3BzLm1vZGU7XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gIHByb3BzOiBwcm9wcyxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgdHJhbnNpdGlvbkRhdGEgPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgaWYgKGMudGFnKSB7XG4gICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICBtYXBbYy5rZXldID0gY1xuICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICBiZWZvcmVVcGRhdGU6IGZ1bmN0aW9uIGJlZm9yZVVwZGF0ZSAoKSB7XG4gICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgIHRoaXMuX19wYXRjaF9fKFxuICAgICAgdGhpcy5fdm5vZGUsXG4gICAgICB0aGlzLmtlcHQsXG4gICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICApO1xuICAgIHRoaXMuX3Zub2RlID0gdGhpcy5rZXB0O1xuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAvLyBhc3NpZ24gdG8gdGhpcyB0byBhdm9pZCBiZWluZyByZW1vdmVkIGluIHRyZWUtc2hha2luZ1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTsgfSk7XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyAoYykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHtcbiAgICBjLmVsbS5fbW92ZUNiKCk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fZW50ZXJDYikge1xuICAgIGMuZWxtLl9lbnRlckNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcbiAgYy5kYXRhLm5ld1BvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7XG4gIHZhciBvbGRQb3MgPSBjLmRhdGEucG9zO1xuICB2YXIgbmV3UG9zID0gYy5kYXRhLm5ld1BvcztcbiAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgdmFyIGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gIGlmIChkeCB8fCBkeSkge1xuICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XG4gICAgdmFyIHMgPSBjLmVsbS5zdHlsZTtcbiAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyBkeCArIFwicHgsXCIgKyBkeSArIFwicHgpXCI7XG4gICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICB9XG59XG5cbnZhciBwbGF0Zm9ybUNvbXBvbmVudHMgPSB7XG4gIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG4gIFRyYW5zaXRpb25Hcm91cDogVHJhbnNpdGlvbkdyb3VwXG59XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xuXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGluQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgICAgaXNDaHJvbWVcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICBjb25maWcucHJvZHVjdGlvblRpcCAhPT0gZmFsc2UgJiZcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgIFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiICtcbiAgICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgICAgICk7XG4gICAgfVxuICB9LCAwKTtcbn1cblxuLyogICovXG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIFN1cHBvcnQgYmFzZVVSTCBjb25maWdcbiAgaWYgKGNvbmZpZy5iYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKGNvbmZpZy51cmwpKSB7XG4gICAgY29uZmlnLnVybCA9IGNvbWJpbmVVUkxzKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgfVxuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnMgfHwge31cbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgfSxcblxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGJ0b2EgcG9seWZpbGwgZm9yIElFPDEwIGNvdXJ0ZXN5IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXZpZGNoYW1iZXJzL0Jhc2U2NC5qc1xuXG52YXIgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuXG5mdW5jdGlvbiBFKCkge1xuICB0aGlzLm1lc3NhZ2UgPSAnU3RyaW5nIGNvbnRhaW5zIGFuIGludmFsaWQgY2hhcmFjdGVyJztcbn1cbkUucHJvdG90eXBlID0gbmV3IEVycm9yO1xuRS5wcm90b3R5cGUuY29kZSA9IDU7XG5FLnByb3RvdHlwZS5uYW1lID0gJ0ludmFsaWRDaGFyYWN0ZXJFcnJvcic7XG5cbmZ1bmN0aW9uIGJ0b2EoaW5wdXQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhpbnB1dCk7XG4gIHZhciBvdXRwdXQgPSAnJztcbiAgZm9yIChcbiAgICAvLyBpbml0aWFsaXplIHJlc3VsdCBhbmQgY291bnRlclxuICAgIHZhciBibG9jaywgY2hhckNvZGUsIGlkeCA9IDAsIG1hcCA9IGNoYXJzO1xuICAgIC8vIGlmIHRoZSBuZXh0IHN0ciBpbmRleCBkb2VzIG5vdCBleGlzdDpcbiAgICAvLyAgIGNoYW5nZSB0aGUgbWFwcGluZyB0YWJsZSB0byBcIj1cIlxuICAgIC8vICAgY2hlY2sgaWYgZCBoYXMgbm8gZnJhY3Rpb25hbCBkaWdpdHNcbiAgICBzdHIuY2hhckF0KGlkeCB8IDApIHx8IChtYXAgPSAnPScsIGlkeCAlIDEpO1xuICAgIC8vIFwiOCAtIGlkeCAlIDEgKiA4XCIgZ2VuZXJhdGVzIHRoZSBzZXF1ZW5jZSAyLCA0LCA2LCA4XG4gICAgb3V0cHV0ICs9IG1hcC5jaGFyQXQoNjMgJiBibG9jayA+PiA4IC0gaWR4ICUgMSAqIDgpXG4gICkge1xuICAgIGNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoaWR4ICs9IDMgLyA0KTtcbiAgICBpZiAoY2hhckNvZGUgPiAweEZGKSB7XG4gICAgICB0aHJvdyBuZXcgRSgpO1xuICAgIH1cbiAgICBibG9jayA9IGJsb2NrIDw8IDggfCBjaGFyQ29kZTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ0b2E7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICAvLyBOb3RlOiBzdGF0dXMgaXMgbm90IGV4cG9zZWQgYnkgWERvbWFpblJlcXVlc3RcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gdXRpbHMubWVyZ2Uoe1xuICAgICAgdXJsOiBhcmd1bWVudHNbMF1cbiAgICB9LCBhcmd1bWVudHNbMV0pO1xuICB9XG5cbiAgY29uZmlnID0gdXRpbHMubWVyZ2UoZGVmYXVsdHMsIHttZXRob2Q6ICdnZXQnfSwgdGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UodXRpbHMubWVyZ2UoZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCJ2YXIgZXF1YWwgPSByZXF1aXJlKCdkZWVwLWVxdWFsJyk7XG52YXIgZXh0ZW5kID0gcmVxdWlyZSgnZXh0ZW5kJyk7XG5cblxudmFyIGxpYiA9IHtcbiAgYXR0cmlidXRlczoge1xuICAgIGNvbXBvc2U6IGZ1bmN0aW9uIChhLCBiLCBrZWVwTnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBhICE9PSAnb2JqZWN0JykgYSA9IHt9O1xuICAgICAgaWYgKHR5cGVvZiBiICE9PSAnb2JqZWN0JykgYiA9IHt9O1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBleHRlbmQodHJ1ZSwge30sIGIpO1xuICAgICAgaWYgKCFrZWVwTnVsbCkge1xuICAgICAgICBhdHRyaWJ1dGVzID0gT2JqZWN0LmtleXMoYXR0cmlidXRlcykucmVkdWNlKGZ1bmN0aW9uIChjb3B5LCBrZXkpIHtcbiAgICAgICAgICBpZiAoYXR0cmlidXRlc1trZXldICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvcHlba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgICAgIH0sIHt9KTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBhKSB7XG4gICAgICAgIGlmIChhW2tleV0gIT09IHVuZGVmaW5lZCAmJiBiW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGF0dHJpYnV0ZXNba2V5XSA9IGFba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCA+IDAgPyBhdHRyaWJ1dGVzIDogdW5kZWZpbmVkO1xuICAgIH0sXG5cbiAgICBkaWZmOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICBpZiAodHlwZW9mIGEgIT09ICdvYmplY3QnKSBhID0ge307XG4gICAgICBpZiAodHlwZW9mIGIgIT09ICdvYmplY3QnKSBiID0ge307XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKGEpLmNvbmNhdChPYmplY3Qua2V5cyhiKSkucmVkdWNlKGZ1bmN0aW9uIChhdHRyaWJ1dGVzLCBrZXkpIHtcbiAgICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSBiW2tleV0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBiW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZXM7XG4gICAgICB9LCB7fSk7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoID4gMCA/IGF0dHJpYnV0ZXMgOiB1bmRlZmluZWQ7XG4gICAgfSxcblxuICAgIHRyYW5zZm9ybTogZnVuY3Rpb24gKGEsIGIsIHByaW9yaXR5KSB7XG4gICAgICBpZiAodHlwZW9mIGEgIT09ICdvYmplY3QnKSByZXR1cm4gYjtcbiAgICAgIGlmICh0eXBlb2YgYiAhPT0gJ29iamVjdCcpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICBpZiAoIXByaW9yaXR5KSByZXR1cm4gYjsgIC8vIGIgc2ltcGx5IG92ZXJ3cml0ZXMgdXMgd2l0aG91dCBwcmlvcml0eVxuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyhiKS5yZWR1Y2UoZnVuY3Rpb24gKGF0dHJpYnV0ZXMsIGtleSkge1xuICAgICAgICBpZiAoYVtrZXldID09PSB1bmRlZmluZWQpIGF0dHJpYnV0ZXNba2V5XSA9IGJba2V5XTsgIC8vIG51bGwgaXMgYSB2YWxpZCB2YWx1ZVxuICAgICAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgICAgIH0sIHt9KTtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwID8gYXR0cmlidXRlcyA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG5cbiAgaXRlcmF0b3I6IGZ1bmN0aW9uIChvcHMpIHtcbiAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKG9wcyk7XG4gIH0sXG5cbiAgbGVuZ3RoOiBmdW5jdGlvbiAob3ApIHtcbiAgICBpZiAodHlwZW9mIG9wWydkZWxldGUnXSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBvcFsnZGVsZXRlJ107XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb3AucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIG9wLnJldGFpbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvcC5pbnNlcnQgPT09ICdzdHJpbmcnID8gb3AuaW5zZXJ0Lmxlbmd0aCA6IDE7XG4gICAgfVxuICB9XG59O1xuXG5cbmZ1bmN0aW9uIEl0ZXJhdG9yKG9wcykge1xuICB0aGlzLm9wcyA9IG9wcztcbiAgdGhpcy5pbmRleCA9IDA7XG4gIHRoaXMub2Zmc2V0ID0gMDtcbn07XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5oYXNOZXh0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5wZWVrTGVuZ3RoKCkgPCBJbmZpbml0eTtcbn07XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICBpZiAoIWxlbmd0aCkgbGVuZ3RoID0gSW5maW5pdHk7XG4gIHZhciBuZXh0T3AgPSB0aGlzLm9wc1t0aGlzLmluZGV4XTtcbiAgaWYgKG5leHRPcCkge1xuICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICB2YXIgb3BMZW5ndGggPSBsaWIubGVuZ3RoKG5leHRPcClcbiAgICBpZiAobGVuZ3RoID49IG9wTGVuZ3RoIC0gb2Zmc2V0KSB7XG4gICAgICBsZW5ndGggPSBvcExlbmd0aCAtIG9mZnNldDtcbiAgICAgIHRoaXMuaW5kZXggKz0gMTtcbiAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vZmZzZXQgKz0gbGVuZ3RoO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5leHRPcFsnZGVsZXRlJ10gPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4geyAnZGVsZXRlJzogbGVuZ3RoIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciByZXRPcCA9IHt9O1xuICAgICAgaWYgKG5leHRPcC5hdHRyaWJ1dGVzKSB7XG4gICAgICAgIHJldE9wLmF0dHJpYnV0ZXMgPSBuZXh0T3AuYXR0cmlidXRlcztcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbmV4dE9wLnJldGFpbiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0T3AucmV0YWluID0gbGVuZ3RoO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmV4dE9wLmluc2VydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0T3AuaW5zZXJ0ID0gbmV4dE9wLmluc2VydC5zdWJzdHIob2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gb2Zmc2V0IHNob3VsZCA9PT0gMCwgbGVuZ3RoIHNob3VsZCA9PT0gMVxuICAgICAgICByZXRPcC5pbnNlcnQgPSBuZXh0T3AuaW5zZXJ0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldE9wO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geyByZXRhaW46IEluZmluaXR5IH07XG4gIH1cbn07XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5vcHNbdGhpcy5pbmRleF07XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUucGVla0xlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMub3BzW3RoaXMuaW5kZXhdKSB7XG4gICAgLy8gU2hvdWxkIG5ldmVyIHJldHVybiAwIGlmIG91ciBpbmRleCBpcyBiZWluZyBtYW5hZ2VkIGNvcnJlY3RseVxuICAgIHJldHVybiBsaWIubGVuZ3RoKHRoaXMub3BzW3RoaXMuaW5kZXhdKSAtIHRoaXMub2Zmc2V0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBJbmZpbml0eTtcbiAgfVxufTtcblxuSXRlcmF0b3IucHJvdG90eXBlLnBlZWtUeXBlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5vcHNbdGhpcy5pbmRleF0pIHtcbiAgICBpZiAodHlwZW9mIHRoaXMub3BzW3RoaXMuaW5kZXhdWydkZWxldGUnXSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiAnZGVsZXRlJztcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLm9wc1t0aGlzLmluZGV4XS5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gJ3JldGFpbic7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnaW5zZXJ0JztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICdyZXRhaW4nO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpYjtcbiIsInZhciBzdXBwb3J0c0FyZ3VtZW50c0NsYXNzID0gKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnRzKVxufSkoKSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gc3VwcG9ydHNBcmd1bWVudHNDbGFzcyA/IHN1cHBvcnRlZCA6IHVuc3VwcG9ydGVkO1xuXG5leHBvcnRzLnN1cHBvcnRlZCA9IHN1cHBvcnRlZDtcbmZ1bmN0aW9uIHN1cHBvcnRlZChvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufTtcblxuZXhwb3J0cy51bnN1cHBvcnRlZCA9IHVuc3VwcG9ydGVkO1xuZnVuY3Rpb24gdW5zdXBwb3J0ZWQob2JqZWN0KXtcbiAgcmV0dXJuIG9iamVjdCAmJlxuICAgIHR5cGVvZiBvYmplY3QgPT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2Ygb2JqZWN0Lmxlbmd0aCA9PSAnbnVtYmVyJyAmJlxuICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdjYWxsZWUnKSAmJlxuICAgICFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCAnY2FsbGVlJykgfHxcbiAgICBmYWxzZTtcbn07XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbidcbiAgPyBPYmplY3Qua2V5cyA6IHNoaW07XG5cbmV4cG9ydHMuc2hpbSA9IHNoaW07XG5mdW5jdGlvbiBzaGltIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XG4gIHJldHVybiBrZXlzO1xufVxuIiwiLyoqXG4gKiBUaGlzIGxpYnJhcnkgbW9kaWZpZXMgdGhlIGRpZmYtcGF0Y2gtbWF0Y2ggbGlicmFyeSBieSBOZWlsIEZyYXNlclxuICogYnkgcmVtb3ZpbmcgdGhlIHBhdGNoIGFuZCBtYXRjaCBmdW5jdGlvbmFsaXR5IGFuZCBjZXJ0YWluIGFkdmFuY2VkXG4gKiBvcHRpb25zIGluIHRoZSBkaWZmIGZ1bmN0aW9uLiBUaGUgb3JpZ2luYWwgbGljZW5zZSBpcyBhcyBmb2xsb3dzOlxuICpcbiAqID09PVxuICpcbiAqIERpZmYgTWF0Y2ggYW5kIFBhdGNoXG4gKlxuICogQ29weXJpZ2h0IDIwMDYgR29vZ2xlIEluYy5cbiAqIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9nb29nbGUtZGlmZi1tYXRjaC1wYXRjaC9cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuLyoqXG4gKiBUaGUgZGF0YSBzdHJ1Y3R1cmUgcmVwcmVzZW50aW5nIGEgZGlmZiBpcyBhbiBhcnJheSBvZiB0dXBsZXM6XG4gKiBbW0RJRkZfREVMRVRFLCAnSGVsbG8nXSwgW0RJRkZfSU5TRVJULCAnR29vZGJ5ZSddLCBbRElGRl9FUVVBTCwgJyB3b3JsZC4nXV1cbiAqIHdoaWNoIG1lYW5zOiBkZWxldGUgJ0hlbGxvJywgYWRkICdHb29kYnllJyBhbmQga2VlcCAnIHdvcmxkLidcbiAqL1xudmFyIERJRkZfREVMRVRFID0gLTE7XG52YXIgRElGRl9JTlNFUlQgPSAxO1xudmFyIERJRkZfRVFVQUwgPSAwO1xuXG5cbi8qKlxuICogRmluZCB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiB0d28gdGV4dHMuICBTaW1wbGlmaWVzIHRoZSBwcm9ibGVtIGJ5IHN0cmlwcGluZ1xuICogYW55IGNvbW1vbiBwcmVmaXggb3Igc3VmZml4IG9mZiB0aGUgdGV4dHMgYmVmb3JlIGRpZmZpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgT2xkIHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgTmV3IHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge0ludH0gY3Vyc29yX3BvcyBFeHBlY3RlZCBlZGl0IHBvc2l0aW9uIGluIHRleHQxIChvcHRpb25hbClcbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBkaWZmIHR1cGxlcy5cbiAqL1xuZnVuY3Rpb24gZGlmZl9tYWluKHRleHQxLCB0ZXh0MiwgY3Vyc29yX3Bvcykge1xuICAvLyBDaGVjayBmb3IgZXF1YWxpdHkgKHNwZWVkdXApLlxuICBpZiAodGV4dDEgPT0gdGV4dDIpIHtcbiAgICBpZiAodGV4dDEpIHtcbiAgICAgIHJldHVybiBbW0RJRkZfRVFVQUwsIHRleHQxXV07XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIC8vIENoZWNrIGN1cnNvcl9wb3Mgd2l0aGluIGJvdW5kc1xuICBpZiAoY3Vyc29yX3BvcyA8IDAgfHwgdGV4dDEubGVuZ3RoIDwgY3Vyc29yX3Bvcykge1xuICAgIGN1cnNvcl9wb3MgPSBudWxsO1xuICB9XG5cbiAgLy8gVHJpbSBvZmYgY29tbW9uIHByZWZpeCAoc3BlZWR1cCkuXG4gIHZhciBjb21tb25sZW5ndGggPSBkaWZmX2NvbW1vblByZWZpeCh0ZXh0MSwgdGV4dDIpO1xuICB2YXIgY29tbW9ucHJlZml4ID0gdGV4dDEuc3Vic3RyaW5nKDAsIGNvbW1vbmxlbmd0aCk7XG4gIHRleHQxID0gdGV4dDEuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCk7XG4gIHRleHQyID0gdGV4dDIuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCk7XG5cbiAgLy8gVHJpbSBvZmYgY29tbW9uIHN1ZmZpeCAoc3BlZWR1cCkuXG4gIGNvbW1vbmxlbmd0aCA9IGRpZmZfY29tbW9uU3VmZml4KHRleHQxLCB0ZXh0Mik7XG4gIHZhciBjb21tb25zdWZmaXggPSB0ZXh0MS5zdWJzdHJpbmcodGV4dDEubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKTtcbiAgdGV4dDEgPSB0ZXh0MS5zdWJzdHJpbmcoMCwgdGV4dDEubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKTtcbiAgdGV4dDIgPSB0ZXh0Mi5zdWJzdHJpbmcoMCwgdGV4dDIubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKTtcblxuICAvLyBDb21wdXRlIHRoZSBkaWZmIG9uIHRoZSBtaWRkbGUgYmxvY2suXG4gIHZhciBkaWZmcyA9IGRpZmZfY29tcHV0ZV8odGV4dDEsIHRleHQyKTtcblxuICAvLyBSZXN0b3JlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgaWYgKGNvbW1vbnByZWZpeCkge1xuICAgIGRpZmZzLnVuc2hpZnQoW0RJRkZfRVFVQUwsIGNvbW1vbnByZWZpeF0pO1xuICB9XG4gIGlmIChjb21tb25zdWZmaXgpIHtcbiAgICBkaWZmcy5wdXNoKFtESUZGX0VRVUFMLCBjb21tb25zdWZmaXhdKTtcbiAgfVxuICBkaWZmX2NsZWFudXBNZXJnZShkaWZmcyk7XG4gIGlmIChjdXJzb3JfcG9zICE9IG51bGwpIHtcbiAgICBkaWZmcyA9IGZpeF9jdXJzb3IoZGlmZnMsIGN1cnNvcl9wb3MpO1xuICB9XG4gIGRpZmZzID0gZml4X2Vtb2ppKGRpZmZzKTtcbiAgcmV0dXJuIGRpZmZzO1xufTtcblxuXG4vKipcbiAqIEZpbmQgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gdHdvIHRleHRzLiAgQXNzdW1lcyB0aGF0IHRoZSB0ZXh0cyBkbyBub3RcbiAqIGhhdmUgYW55IGNvbW1vbiBwcmVmaXggb3Igc3VmZml4LlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIE9sZCBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIE5ldyBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICovXG5mdW5jdGlvbiBkaWZmX2NvbXB1dGVfKHRleHQxLCB0ZXh0Mikge1xuICB2YXIgZGlmZnM7XG5cbiAgaWYgKCF0ZXh0MSkge1xuICAgIC8vIEp1c3QgYWRkIHNvbWUgdGV4dCAoc3BlZWR1cCkuXG4gICAgcmV0dXJuIFtbRElGRl9JTlNFUlQsIHRleHQyXV07XG4gIH1cblxuICBpZiAoIXRleHQyKSB7XG4gICAgLy8gSnVzdCBkZWxldGUgc29tZSB0ZXh0IChzcGVlZHVwKS5cbiAgICByZXR1cm4gW1tESUZGX0RFTEVURSwgdGV4dDFdXTtcbiAgfVxuXG4gIHZhciBsb25ndGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQxIDogdGV4dDI7XG4gIHZhciBzaG9ydHRleHQgPSB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyB0ZXh0MiA6IHRleHQxO1xuICB2YXIgaSA9IGxvbmd0ZXh0LmluZGV4T2Yoc2hvcnR0ZXh0KTtcbiAgaWYgKGkgIT0gLTEpIHtcbiAgICAvLyBTaG9ydGVyIHRleHQgaXMgaW5zaWRlIHRoZSBsb25nZXIgdGV4dCAoc3BlZWR1cCkuXG4gICAgZGlmZnMgPSBbW0RJRkZfSU5TRVJULCBsb25ndGV4dC5zdWJzdHJpbmcoMCwgaSldLFxuICAgICAgICAgICAgIFtESUZGX0VRVUFMLCBzaG9ydHRleHRdLFxuICAgICAgICAgICAgIFtESUZGX0lOU0VSVCwgbG9uZ3RleHQuc3Vic3RyaW5nKGkgKyBzaG9ydHRleHQubGVuZ3RoKV1dO1xuICAgIC8vIFN3YXAgaW5zZXJ0aW9ucyBmb3IgZGVsZXRpb25zIGlmIGRpZmYgaXMgcmV2ZXJzZWQuXG4gICAgaWYgKHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCkge1xuICAgICAgZGlmZnNbMF1bMF0gPSBkaWZmc1syXVswXSA9IERJRkZfREVMRVRFO1xuICAgIH1cbiAgICByZXR1cm4gZGlmZnM7XG4gIH1cblxuICBpZiAoc2hvcnR0ZXh0Lmxlbmd0aCA9PSAxKSB7XG4gICAgLy8gU2luZ2xlIGNoYXJhY3RlciBzdHJpbmcuXG4gICAgLy8gQWZ0ZXIgdGhlIHByZXZpb3VzIHNwZWVkdXAsIHRoZSBjaGFyYWN0ZXIgY2FuJ3QgYmUgYW4gZXF1YWxpdHkuXG4gICAgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXSwgW0RJRkZfSU5TRVJULCB0ZXh0Ml1dO1xuICB9XG5cbiAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBwcm9ibGVtIGNhbiBiZSBzcGxpdCBpbiB0d28uXG4gIHZhciBobSA9IGRpZmZfaGFsZk1hdGNoXyh0ZXh0MSwgdGV4dDIpO1xuICBpZiAoaG0pIHtcbiAgICAvLyBBIGhhbGYtbWF0Y2ggd2FzIGZvdW5kLCBzb3J0IG91dCB0aGUgcmV0dXJuIGRhdGEuXG4gICAgdmFyIHRleHQxX2EgPSBobVswXTtcbiAgICB2YXIgdGV4dDFfYiA9IGhtWzFdO1xuICAgIHZhciB0ZXh0Ml9hID0gaG1bMl07XG4gICAgdmFyIHRleHQyX2IgPSBobVszXTtcbiAgICB2YXIgbWlkX2NvbW1vbiA9IGhtWzRdO1xuICAgIC8vIFNlbmQgYm90aCBwYWlycyBvZmYgZm9yIHNlcGFyYXRlIHByb2Nlc3NpbmcuXG4gICAgdmFyIGRpZmZzX2EgPSBkaWZmX21haW4odGV4dDFfYSwgdGV4dDJfYSk7XG4gICAgdmFyIGRpZmZzX2IgPSBkaWZmX21haW4odGV4dDFfYiwgdGV4dDJfYik7XG4gICAgLy8gTWVyZ2UgdGhlIHJlc3VsdHMuXG4gICAgcmV0dXJuIGRpZmZzX2EuY29uY2F0KFtbRElGRl9FUVVBTCwgbWlkX2NvbW1vbl1dLCBkaWZmc19iKTtcbiAgfVxuXG4gIHJldHVybiBkaWZmX2Jpc2VjdF8odGV4dDEsIHRleHQyKTtcbn07XG5cblxuLyoqXG4gKiBGaW5kIHRoZSAnbWlkZGxlIHNuYWtlJyBvZiBhIGRpZmYsIHNwbGl0IHRoZSBwcm9ibGVtIGluIHR3b1xuICogYW5kIHJldHVybiB0aGUgcmVjdXJzaXZlbHkgY29uc3RydWN0ZWQgZGlmZi5cbiAqIFNlZSBNeWVycyAxOTg2IHBhcGVyOiBBbiBPKE5EKSBEaWZmZXJlbmNlIEFsZ29yaXRobSBhbmQgSXRzIFZhcmlhdGlvbnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgT2xkIHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgTmV3IHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgZGlmZiB0dXBsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBkaWZmX2Jpc2VjdF8odGV4dDEsIHRleHQyKSB7XG4gIC8vIENhY2hlIHRoZSB0ZXh0IGxlbmd0aHMgdG8gcHJldmVudCBtdWx0aXBsZSBjYWxscy5cbiAgdmFyIHRleHQxX2xlbmd0aCA9IHRleHQxLmxlbmd0aDtcbiAgdmFyIHRleHQyX2xlbmd0aCA9IHRleHQyLmxlbmd0aDtcbiAgdmFyIG1heF9kID0gTWF0aC5jZWlsKCh0ZXh0MV9sZW5ndGggKyB0ZXh0Ml9sZW5ndGgpIC8gMik7XG4gIHZhciB2X29mZnNldCA9IG1heF9kO1xuICB2YXIgdl9sZW5ndGggPSAyICogbWF4X2Q7XG4gIHZhciB2MSA9IG5ldyBBcnJheSh2X2xlbmd0aCk7XG4gIHZhciB2MiA9IG5ldyBBcnJheSh2X2xlbmd0aCk7XG4gIC8vIFNldHRpbmcgYWxsIGVsZW1lbnRzIHRvIC0xIGlzIGZhc3RlciBpbiBDaHJvbWUgJiBGaXJlZm94IHRoYW4gbWl4aW5nXG4gIC8vIGludGVnZXJzIGFuZCB1bmRlZmluZWQuXG4gIGZvciAodmFyIHggPSAwOyB4IDwgdl9sZW5ndGg7IHgrKykge1xuICAgIHYxW3hdID0gLTE7XG4gICAgdjJbeF0gPSAtMTtcbiAgfVxuICB2MVt2X29mZnNldCArIDFdID0gMDtcbiAgdjJbdl9vZmZzZXQgKyAxXSA9IDA7XG4gIHZhciBkZWx0YSA9IHRleHQxX2xlbmd0aCAtIHRleHQyX2xlbmd0aDtcbiAgLy8gSWYgdGhlIHRvdGFsIG51bWJlciBvZiBjaGFyYWN0ZXJzIGlzIG9kZCwgdGhlbiB0aGUgZnJvbnQgcGF0aCB3aWxsIGNvbGxpZGVcbiAgLy8gd2l0aCB0aGUgcmV2ZXJzZSBwYXRoLlxuICB2YXIgZnJvbnQgPSAoZGVsdGEgJSAyICE9IDApO1xuICAvLyBPZmZzZXRzIGZvciBzdGFydCBhbmQgZW5kIG9mIGsgbG9vcC5cbiAgLy8gUHJldmVudHMgbWFwcGluZyBvZiBzcGFjZSBiZXlvbmQgdGhlIGdyaWQuXG4gIHZhciBrMXN0YXJ0ID0gMDtcbiAgdmFyIGsxZW5kID0gMDtcbiAgdmFyIGsyc3RhcnQgPSAwO1xuICB2YXIgazJlbmQgPSAwO1xuICBmb3IgKHZhciBkID0gMDsgZCA8IG1heF9kOyBkKyspIHtcbiAgICAvLyBXYWxrIHRoZSBmcm9udCBwYXRoIG9uZSBzdGVwLlxuICAgIGZvciAodmFyIGsxID0gLWQgKyBrMXN0YXJ0OyBrMSA8PSBkIC0gazFlbmQ7IGsxICs9IDIpIHtcbiAgICAgIHZhciBrMV9vZmZzZXQgPSB2X29mZnNldCArIGsxO1xuICAgICAgdmFyIHgxO1xuICAgICAgaWYgKGsxID09IC1kIHx8IChrMSAhPSBkICYmIHYxW2sxX29mZnNldCAtIDFdIDwgdjFbazFfb2Zmc2V0ICsgMV0pKSB7XG4gICAgICAgIHgxID0gdjFbazFfb2Zmc2V0ICsgMV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MSA9IHYxW2sxX29mZnNldCAtIDFdICsgMTtcbiAgICAgIH1cbiAgICAgIHZhciB5MSA9IHgxIC0gazE7XG4gICAgICB3aGlsZSAoeDEgPCB0ZXh0MV9sZW5ndGggJiYgeTEgPCB0ZXh0Ml9sZW5ndGggJiZcbiAgICAgICAgICAgICB0ZXh0MS5jaGFyQXQoeDEpID09IHRleHQyLmNoYXJBdCh5MSkpIHtcbiAgICAgICAgeDErKztcbiAgICAgICAgeTErKztcbiAgICAgIH1cbiAgICAgIHYxW2sxX29mZnNldF0gPSB4MTtcbiAgICAgIGlmICh4MSA+IHRleHQxX2xlbmd0aCkge1xuICAgICAgICAvLyBSYW4gb2ZmIHRoZSByaWdodCBvZiB0aGUgZ3JhcGguXG4gICAgICAgIGsxZW5kICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKHkxID4gdGV4dDJfbGVuZ3RoKSB7XG4gICAgICAgIC8vIFJhbiBvZmYgdGhlIGJvdHRvbSBvZiB0aGUgZ3JhcGguXG4gICAgICAgIGsxc3RhcnQgKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoZnJvbnQpIHtcbiAgICAgICAgdmFyIGsyX29mZnNldCA9IHZfb2Zmc2V0ICsgZGVsdGEgLSBrMTtcbiAgICAgICAgaWYgKGsyX29mZnNldCA+PSAwICYmIGsyX29mZnNldCA8IHZfbGVuZ3RoICYmIHYyW2syX29mZnNldF0gIT0gLTEpIHtcbiAgICAgICAgICAvLyBNaXJyb3IgeDIgb250byB0b3AtbGVmdCBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgICAgICB2YXIgeDIgPSB0ZXh0MV9sZW5ndGggLSB2MltrMl9vZmZzZXRdO1xuICAgICAgICAgIGlmICh4MSA+PSB4Mikge1xuICAgICAgICAgICAgLy8gT3ZlcmxhcCBkZXRlY3RlZC5cbiAgICAgICAgICAgIHJldHVybiBkaWZmX2Jpc2VjdFNwbGl0Xyh0ZXh0MSwgdGV4dDIsIHgxLCB5MSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gV2FsayB0aGUgcmV2ZXJzZSBwYXRoIG9uZSBzdGVwLlxuICAgIGZvciAodmFyIGsyID0gLWQgKyBrMnN0YXJ0OyBrMiA8PSBkIC0gazJlbmQ7IGsyICs9IDIpIHtcbiAgICAgIHZhciBrMl9vZmZzZXQgPSB2X29mZnNldCArIGsyO1xuICAgICAgdmFyIHgyO1xuICAgICAgaWYgKGsyID09IC1kIHx8IChrMiAhPSBkICYmIHYyW2syX29mZnNldCAtIDFdIDwgdjJbazJfb2Zmc2V0ICsgMV0pKSB7XG4gICAgICAgIHgyID0gdjJbazJfb2Zmc2V0ICsgMV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MiA9IHYyW2syX29mZnNldCAtIDFdICsgMTtcbiAgICAgIH1cbiAgICAgIHZhciB5MiA9IHgyIC0gazI7XG4gICAgICB3aGlsZSAoeDIgPCB0ZXh0MV9sZW5ndGggJiYgeTIgPCB0ZXh0Ml9sZW5ndGggJiZcbiAgICAgICAgICAgICB0ZXh0MS5jaGFyQXQodGV4dDFfbGVuZ3RoIC0geDIgLSAxKSA9PVxuICAgICAgICAgICAgIHRleHQyLmNoYXJBdCh0ZXh0Ml9sZW5ndGggLSB5MiAtIDEpKSB7XG4gICAgICAgIHgyKys7XG4gICAgICAgIHkyKys7XG4gICAgICB9XG4gICAgICB2MltrMl9vZmZzZXRdID0geDI7XG4gICAgICBpZiAoeDIgPiB0ZXh0MV9sZW5ndGgpIHtcbiAgICAgICAgLy8gUmFuIG9mZiB0aGUgbGVmdCBvZiB0aGUgZ3JhcGguXG4gICAgICAgIGsyZW5kICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKHkyID4gdGV4dDJfbGVuZ3RoKSB7XG4gICAgICAgIC8vIFJhbiBvZmYgdGhlIHRvcCBvZiB0aGUgZ3JhcGguXG4gICAgICAgIGsyc3RhcnQgKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoIWZyb250KSB7XG4gICAgICAgIHZhciBrMV9vZmZzZXQgPSB2X29mZnNldCArIGRlbHRhIC0gazI7XG4gICAgICAgIGlmIChrMV9vZmZzZXQgPj0gMCAmJiBrMV9vZmZzZXQgPCB2X2xlbmd0aCAmJiB2MVtrMV9vZmZzZXRdICE9IC0xKSB7XG4gICAgICAgICAgdmFyIHgxID0gdjFbazFfb2Zmc2V0XTtcbiAgICAgICAgICB2YXIgeTEgPSB2X29mZnNldCArIHgxIC0gazFfb2Zmc2V0O1xuICAgICAgICAgIC8vIE1pcnJvciB4MiBvbnRvIHRvcC1sZWZ0IGNvb3JkaW5hdGUgc3lzdGVtLlxuICAgICAgICAgIHgyID0gdGV4dDFfbGVuZ3RoIC0geDI7XG4gICAgICAgICAgaWYgKHgxID49IHgyKSB7XG4gICAgICAgICAgICAvLyBPdmVybGFwIGRldGVjdGVkLlxuICAgICAgICAgICAgcmV0dXJuIGRpZmZfYmlzZWN0U3BsaXRfKHRleHQxLCB0ZXh0MiwgeDEsIHkxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gRGlmZiB0b29rIHRvbyBsb25nIGFuZCBoaXQgdGhlIGRlYWRsaW5lIG9yXG4gIC8vIG51bWJlciBvZiBkaWZmcyBlcXVhbHMgbnVtYmVyIG9mIGNoYXJhY3RlcnMsIG5vIGNvbW1vbmFsaXR5IGF0IGFsbC5cbiAgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXSwgW0RJRkZfSU5TRVJULCB0ZXh0Ml1dO1xufTtcblxuXG4vKipcbiAqIEdpdmVuIHRoZSBsb2NhdGlvbiBvZiB0aGUgJ21pZGRsZSBzbmFrZScsIHNwbGl0IHRoZSBkaWZmIGluIHR3byBwYXJ0c1xuICogYW5kIHJlY3Vyc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgT2xkIHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgTmV3IHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge251bWJlcn0geCBJbmRleCBvZiBzcGxpdCBwb2ludCBpbiB0ZXh0MS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB5IEluZGV4IG9mIHNwbGl0IHBvaW50IGluIHRleHQyLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICovXG5mdW5jdGlvbiBkaWZmX2Jpc2VjdFNwbGl0Xyh0ZXh0MSwgdGV4dDIsIHgsIHkpIHtcbiAgdmFyIHRleHQxYSA9IHRleHQxLnN1YnN0cmluZygwLCB4KTtcbiAgdmFyIHRleHQyYSA9IHRleHQyLnN1YnN0cmluZygwLCB5KTtcbiAgdmFyIHRleHQxYiA9IHRleHQxLnN1YnN0cmluZyh4KTtcbiAgdmFyIHRleHQyYiA9IHRleHQyLnN1YnN0cmluZyh5KTtcblxuICAvLyBDb21wdXRlIGJvdGggZGlmZnMgc2VyaWFsbHkuXG4gIHZhciBkaWZmcyA9IGRpZmZfbWFpbih0ZXh0MWEsIHRleHQyYSk7XG4gIHZhciBkaWZmc2IgPSBkaWZmX21haW4odGV4dDFiLCB0ZXh0MmIpO1xuXG4gIHJldHVybiBkaWZmcy5jb25jYXQoZGlmZnNiKTtcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgdGhlIGNvbW1vbiBwcmVmaXggb2YgdHdvIHN0cmluZ3MuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgRmlyc3Qgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIFNlY29uZCBzdHJpbmcuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBjb21tb24gdG8gdGhlIHN0YXJ0IG9mIGVhY2hcbiAqICAgICBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGRpZmZfY29tbW9uUHJlZml4KHRleHQxLCB0ZXh0Mikge1xuICAvLyBRdWljayBjaGVjayBmb3IgY29tbW9uIG51bGwgY2FzZXMuXG4gIGlmICghdGV4dDEgfHwgIXRleHQyIHx8IHRleHQxLmNoYXJBdCgwKSAhPSB0ZXh0Mi5jaGFyQXQoMCkpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICAvLyBCaW5hcnkgc2VhcmNoLlxuICAvLyBQZXJmb3JtYW5jZSBhbmFseXNpczogaHR0cDovL25laWwuZnJhc2VyLm5hbWUvbmV3cy8yMDA3LzEwLzA5L1xuICB2YXIgcG9pbnRlcm1pbiA9IDA7XG4gIHZhciBwb2ludGVybWF4ID0gTWF0aC5taW4odGV4dDEubGVuZ3RoLCB0ZXh0Mi5sZW5ndGgpO1xuICB2YXIgcG9pbnRlcm1pZCA9IHBvaW50ZXJtYXg7XG4gIHZhciBwb2ludGVyc3RhcnQgPSAwO1xuICB3aGlsZSAocG9pbnRlcm1pbiA8IHBvaW50ZXJtaWQpIHtcbiAgICBpZiAodGV4dDEuc3Vic3RyaW5nKHBvaW50ZXJzdGFydCwgcG9pbnRlcm1pZCkgPT1cbiAgICAgICAgdGV4dDIuc3Vic3RyaW5nKHBvaW50ZXJzdGFydCwgcG9pbnRlcm1pZCkpIHtcbiAgICAgIHBvaW50ZXJtaW4gPSBwb2ludGVybWlkO1xuICAgICAgcG9pbnRlcnN0YXJ0ID0gcG9pbnRlcm1pbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnRlcm1heCA9IHBvaW50ZXJtaWQ7XG4gICAgfVxuICAgIHBvaW50ZXJtaWQgPSBNYXRoLmZsb29yKChwb2ludGVybWF4IC0gcG9pbnRlcm1pbikgLyAyICsgcG9pbnRlcm1pbik7XG4gIH1cbiAgcmV0dXJuIHBvaW50ZXJtaWQ7XG59O1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIHRoZSBjb21tb24gc3VmZml4IG9mIHR3byBzdHJpbmdzLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIEZpcnN0IHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBTZWNvbmQgc3RyaW5nLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgY29tbW9uIHRvIHRoZSBlbmQgb2YgZWFjaCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGRpZmZfY29tbW9uU3VmZml4KHRleHQxLCB0ZXh0Mikge1xuICAvLyBRdWljayBjaGVjayBmb3IgY29tbW9uIG51bGwgY2FzZXMuXG4gIGlmICghdGV4dDEgfHwgIXRleHQyIHx8XG4gICAgICB0ZXh0MS5jaGFyQXQodGV4dDEubGVuZ3RoIC0gMSkgIT0gdGV4dDIuY2hhckF0KHRleHQyLmxlbmd0aCAtIDEpKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgLy8gQmluYXJ5IHNlYXJjaC5cbiAgLy8gUGVyZm9ybWFuY2UgYW5hbHlzaXM6IGh0dHA6Ly9uZWlsLmZyYXNlci5uYW1lL25ld3MvMjAwNy8xMC8wOS9cbiAgdmFyIHBvaW50ZXJtaW4gPSAwO1xuICB2YXIgcG9pbnRlcm1heCA9IE1hdGgubWluKHRleHQxLmxlbmd0aCwgdGV4dDIubGVuZ3RoKTtcbiAgdmFyIHBvaW50ZXJtaWQgPSBwb2ludGVybWF4O1xuICB2YXIgcG9pbnRlcmVuZCA9IDA7XG4gIHdoaWxlIChwb2ludGVybWluIDwgcG9pbnRlcm1pZCkge1xuICAgIGlmICh0ZXh0MS5zdWJzdHJpbmcodGV4dDEubGVuZ3RoIC0gcG9pbnRlcm1pZCwgdGV4dDEubGVuZ3RoIC0gcG9pbnRlcmVuZCkgPT1cbiAgICAgICAgdGV4dDIuc3Vic3RyaW5nKHRleHQyLmxlbmd0aCAtIHBvaW50ZXJtaWQsIHRleHQyLmxlbmd0aCAtIHBvaW50ZXJlbmQpKSB7XG4gICAgICBwb2ludGVybWluID0gcG9pbnRlcm1pZDtcbiAgICAgIHBvaW50ZXJlbmQgPSBwb2ludGVybWluO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb2ludGVybWF4ID0gcG9pbnRlcm1pZDtcbiAgICB9XG4gICAgcG9pbnRlcm1pZCA9IE1hdGguZmxvb3IoKHBvaW50ZXJtYXggLSBwb2ludGVybWluKSAvIDIgKyBwb2ludGVybWluKTtcbiAgfVxuICByZXR1cm4gcG9pbnRlcm1pZDtcbn07XG5cblxuLyoqXG4gKiBEbyB0aGUgdHdvIHRleHRzIHNoYXJlIGEgc3Vic3RyaW5nIHdoaWNoIGlzIGF0IGxlYXN0IGhhbGYgdGhlIGxlbmd0aCBvZiB0aGVcbiAqIGxvbmdlciB0ZXh0P1xuICogVGhpcyBzcGVlZHVwIGNhbiBwcm9kdWNlIG5vbi1taW5pbWFsIGRpZmZzLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIEZpcnN0IHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBTZWNvbmQgc3RyaW5nLlxuICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59IEZpdmUgZWxlbWVudCBBcnJheSwgY29udGFpbmluZyB0aGUgcHJlZml4IG9mXG4gKiAgICAgdGV4dDEsIHRoZSBzdWZmaXggb2YgdGV4dDEsIHRoZSBwcmVmaXggb2YgdGV4dDIsIHRoZSBzdWZmaXggb2ZcbiAqICAgICB0ZXh0MiBhbmQgdGhlIGNvbW1vbiBtaWRkbGUuICBPciBudWxsIGlmIHRoZXJlIHdhcyBubyBtYXRjaC5cbiAqL1xuZnVuY3Rpb24gZGlmZl9oYWxmTWF0Y2hfKHRleHQxLCB0ZXh0Mikge1xuICB2YXIgbG9uZ3RleHQgPSB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyB0ZXh0MSA6IHRleHQyO1xuICB2YXIgc2hvcnR0ZXh0ID0gdGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoID8gdGV4dDIgOiB0ZXh0MTtcbiAgaWYgKGxvbmd0ZXh0Lmxlbmd0aCA8IDQgfHwgc2hvcnR0ZXh0Lmxlbmd0aCAqIDIgPCBsb25ndGV4dC5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDsgIC8vIFBvaW50bGVzcy5cbiAgfVxuXG4gIC8qKlxuICAgKiBEb2VzIGEgc3Vic3RyaW5nIG9mIHNob3J0dGV4dCBleGlzdCB3aXRoaW4gbG9uZ3RleHQgc3VjaCB0aGF0IHRoZSBzdWJzdHJpbmdcbiAgICogaXMgYXQgbGVhc3QgaGFsZiB0aGUgbGVuZ3RoIG9mIGxvbmd0ZXh0P1xuICAgKiBDbG9zdXJlLCBidXQgZG9lcyBub3QgcmVmZXJlbmNlIGFueSBleHRlcm5hbCB2YXJpYWJsZXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb25ndGV4dCBMb25nZXIgc3RyaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2hvcnR0ZXh0IFNob3J0ZXIgc3RyaW5nLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaSBTdGFydCBpbmRleCBvZiBxdWFydGVyIGxlbmd0aCBzdWJzdHJpbmcgd2l0aGluIGxvbmd0ZXh0LlxuICAgKiBAcmV0dXJuIHtBcnJheS48c3RyaW5nPn0gRml2ZSBlbGVtZW50IEFycmF5LCBjb250YWluaW5nIHRoZSBwcmVmaXggb2ZcbiAgICogICAgIGxvbmd0ZXh0LCB0aGUgc3VmZml4IG9mIGxvbmd0ZXh0LCB0aGUgcHJlZml4IG9mIHNob3J0dGV4dCwgdGhlIHN1ZmZpeFxuICAgKiAgICAgb2Ygc2hvcnR0ZXh0IGFuZCB0aGUgY29tbW9uIG1pZGRsZS4gIE9yIG51bGwgaWYgdGhlcmUgd2FzIG5vIG1hdGNoLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZGlmZl9oYWxmTWF0Y2hJXyhsb25ndGV4dCwgc2hvcnR0ZXh0LCBpKSB7XG4gICAgLy8gU3RhcnQgd2l0aCBhIDEvNCBsZW5ndGggc3Vic3RyaW5nIGF0IHBvc2l0aW9uIGkgYXMgYSBzZWVkLlxuICAgIHZhciBzZWVkID0gbG9uZ3RleHQuc3Vic3RyaW5nKGksIGkgKyBNYXRoLmZsb29yKGxvbmd0ZXh0Lmxlbmd0aCAvIDQpKTtcbiAgICB2YXIgaiA9IC0xO1xuICAgIHZhciBiZXN0X2NvbW1vbiA9ICcnO1xuICAgIHZhciBiZXN0X2xvbmd0ZXh0X2EsIGJlc3RfbG9uZ3RleHRfYiwgYmVzdF9zaG9ydHRleHRfYSwgYmVzdF9zaG9ydHRleHRfYjtcbiAgICB3aGlsZSAoKGogPSBzaG9ydHRleHQuaW5kZXhPZihzZWVkLCBqICsgMSkpICE9IC0xKSB7XG4gICAgICB2YXIgcHJlZml4TGVuZ3RoID0gZGlmZl9jb21tb25QcmVmaXgobG9uZ3RleHQuc3Vic3RyaW5nKGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0dGV4dC5zdWJzdHJpbmcoaikpO1xuICAgICAgdmFyIHN1ZmZpeExlbmd0aCA9IGRpZmZfY29tbW9uU3VmZml4KGxvbmd0ZXh0LnN1YnN0cmluZygwLCBpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9ydHRleHQuc3Vic3RyaW5nKDAsIGopKTtcbiAgICAgIGlmIChiZXN0X2NvbW1vbi5sZW5ndGggPCBzdWZmaXhMZW5ndGggKyBwcmVmaXhMZW5ndGgpIHtcbiAgICAgICAgYmVzdF9jb21tb24gPSBzaG9ydHRleHQuc3Vic3RyaW5nKGogLSBzdWZmaXhMZW5ndGgsIGopICtcbiAgICAgICAgICAgIHNob3J0dGV4dC5zdWJzdHJpbmcoaiwgaiArIHByZWZpeExlbmd0aCk7XG4gICAgICAgIGJlc3RfbG9uZ3RleHRfYSA9IGxvbmd0ZXh0LnN1YnN0cmluZygwLCBpIC0gc3VmZml4TGVuZ3RoKTtcbiAgICAgICAgYmVzdF9sb25ndGV4dF9iID0gbG9uZ3RleHQuc3Vic3RyaW5nKGkgKyBwcmVmaXhMZW5ndGgpO1xuICAgICAgICBiZXN0X3Nob3J0dGV4dF9hID0gc2hvcnR0ZXh0LnN1YnN0cmluZygwLCBqIC0gc3VmZml4TGVuZ3RoKTtcbiAgICAgICAgYmVzdF9zaG9ydHRleHRfYiA9IHNob3J0dGV4dC5zdWJzdHJpbmcoaiArIHByZWZpeExlbmd0aCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChiZXN0X2NvbW1vbi5sZW5ndGggKiAyID49IGxvbmd0ZXh0Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFtiZXN0X2xvbmd0ZXh0X2EsIGJlc3RfbG9uZ3RleHRfYixcbiAgICAgICAgICAgICAgYmVzdF9zaG9ydHRleHRfYSwgYmVzdF9zaG9ydHRleHRfYiwgYmVzdF9jb21tb25dO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBGaXJzdCBjaGVjayBpZiB0aGUgc2Vjb25kIHF1YXJ0ZXIgaXMgdGhlIHNlZWQgZm9yIGEgaGFsZi1tYXRjaC5cbiAgdmFyIGhtMSA9IGRpZmZfaGFsZk1hdGNoSV8obG9uZ3RleHQsIHNob3J0dGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5jZWlsKGxvbmd0ZXh0Lmxlbmd0aCAvIDQpKTtcbiAgLy8gQ2hlY2sgYWdhaW4gYmFzZWQgb24gdGhlIHRoaXJkIHF1YXJ0ZXIuXG4gIHZhciBobTIgPSBkaWZmX2hhbGZNYXRjaElfKGxvbmd0ZXh0LCBzaG9ydHRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguY2VpbChsb25ndGV4dC5sZW5ndGggLyAyKSk7XG4gIHZhciBobTtcbiAgaWYgKCFobTEgJiYgIWhtMikge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2UgaWYgKCFobTIpIHtcbiAgICBobSA9IGhtMTtcbiAgfSBlbHNlIGlmICghaG0xKSB7XG4gICAgaG0gPSBobTI7XG4gIH0gZWxzZSB7XG4gICAgLy8gQm90aCBtYXRjaGVkLiAgU2VsZWN0IHRoZSBsb25nZXN0LlxuICAgIGhtID0gaG0xWzRdLmxlbmd0aCA+IGhtMls0XS5sZW5ndGggPyBobTEgOiBobTI7XG4gIH1cblxuICAvLyBBIGhhbGYtbWF0Y2ggd2FzIGZvdW5kLCBzb3J0IG91dCB0aGUgcmV0dXJuIGRhdGEuXG4gIHZhciB0ZXh0MV9hLCB0ZXh0MV9iLCB0ZXh0Ml9hLCB0ZXh0Ml9iO1xuICBpZiAodGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoKSB7XG4gICAgdGV4dDFfYSA9IGhtWzBdO1xuICAgIHRleHQxX2IgPSBobVsxXTtcbiAgICB0ZXh0Ml9hID0gaG1bMl07XG4gICAgdGV4dDJfYiA9IGhtWzNdO1xuICB9IGVsc2Uge1xuICAgIHRleHQyX2EgPSBobVswXTtcbiAgICB0ZXh0Ml9iID0gaG1bMV07XG4gICAgdGV4dDFfYSA9IGhtWzJdO1xuICAgIHRleHQxX2IgPSBobVszXTtcbiAgfVxuICB2YXIgbWlkX2NvbW1vbiA9IGhtWzRdO1xuICByZXR1cm4gW3RleHQxX2EsIHRleHQxX2IsIHRleHQyX2EsIHRleHQyX2IsIG1pZF9jb21tb25dO1xufTtcblxuXG4vKipcbiAqIFJlb3JkZXIgYW5kIG1lcmdlIGxpa2UgZWRpdCBzZWN0aW9ucy4gIE1lcmdlIGVxdWFsaXRpZXMuXG4gKiBBbnkgZWRpdCBzZWN0aW9uIGNhbiBtb3ZlIGFzIGxvbmcgYXMgaXQgZG9lc24ndCBjcm9zcyBhbiBlcXVhbGl0eS5cbiAqIEBwYXJhbSB7QXJyYXl9IGRpZmZzIEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICovXG5mdW5jdGlvbiBkaWZmX2NsZWFudXBNZXJnZShkaWZmcykge1xuICBkaWZmcy5wdXNoKFtESUZGX0VRVUFMLCAnJ10pOyAgLy8gQWRkIGEgZHVtbXkgZW50cnkgYXQgdGhlIGVuZC5cbiAgdmFyIHBvaW50ZXIgPSAwO1xuICB2YXIgY291bnRfZGVsZXRlID0gMDtcbiAgdmFyIGNvdW50X2luc2VydCA9IDA7XG4gIHZhciB0ZXh0X2RlbGV0ZSA9ICcnO1xuICB2YXIgdGV4dF9pbnNlcnQgPSAnJztcbiAgdmFyIGNvbW1vbmxlbmd0aDtcbiAgd2hpbGUgKHBvaW50ZXIgPCBkaWZmcy5sZW5ndGgpIHtcbiAgICBzd2l0Y2ggKGRpZmZzW3BvaW50ZXJdWzBdKSB7XG4gICAgICBjYXNlIERJRkZfSU5TRVJUOlxuICAgICAgICBjb3VudF9pbnNlcnQrKztcbiAgICAgICAgdGV4dF9pbnNlcnQgKz0gZGlmZnNbcG9pbnRlcl1bMV07XG4gICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERJRkZfREVMRVRFOlxuICAgICAgICBjb3VudF9kZWxldGUrKztcbiAgICAgICAgdGV4dF9kZWxldGUgKz0gZGlmZnNbcG9pbnRlcl1bMV07XG4gICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERJRkZfRVFVQUw6XG4gICAgICAgIC8vIFVwb24gcmVhY2hpbmcgYW4gZXF1YWxpdHksIGNoZWNrIGZvciBwcmlvciByZWR1bmRhbmNpZXMuXG4gICAgICAgIGlmIChjb3VudF9kZWxldGUgKyBjb3VudF9pbnNlcnQgPiAxKSB7XG4gICAgICAgICAgaWYgKGNvdW50X2RlbGV0ZSAhPT0gMCAmJiBjb3VudF9pbnNlcnQgIT09IDApIHtcbiAgICAgICAgICAgIC8vIEZhY3RvciBvdXQgYW55IGNvbW1vbiBwcmVmaXhpZXMuXG4gICAgICAgICAgICBjb21tb25sZW5ndGggPSBkaWZmX2NvbW1vblByZWZpeCh0ZXh0X2luc2VydCwgdGV4dF9kZWxldGUpO1xuICAgICAgICAgICAgaWYgKGNvbW1vbmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICBpZiAoKHBvaW50ZXIgLSBjb3VudF9kZWxldGUgLSBjb3VudF9pbnNlcnQpID4gMCAmJlxuICAgICAgICAgICAgICAgICAgZGlmZnNbcG9pbnRlciAtIGNvdW50X2RlbGV0ZSAtIGNvdW50X2luc2VydCAtIDFdWzBdID09XG4gICAgICAgICAgICAgICAgICBESUZGX0VRVUFMKSB7XG4gICAgICAgICAgICAgICAgZGlmZnNbcG9pbnRlciAtIGNvdW50X2RlbGV0ZSAtIGNvdW50X2luc2VydCAtIDFdWzFdICs9XG4gICAgICAgICAgICAgICAgICAgIHRleHRfaW5zZXJ0LnN1YnN0cmluZygwLCBjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpZmZzLnNwbGljZSgwLCAwLCBbRElGRl9FUVVBTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfaW5zZXJ0LnN1YnN0cmluZygwLCBjb21tb25sZW5ndGgpXSk7XG4gICAgICAgICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRleHRfaW5zZXJ0ID0gdGV4dF9pbnNlcnQuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCk7XG4gICAgICAgICAgICAgIHRleHRfZGVsZXRlID0gdGV4dF9kZWxldGUuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGYWN0b3Igb3V0IGFueSBjb21tb24gc3VmZml4aWVzLlxuICAgICAgICAgICAgY29tbW9ubGVuZ3RoID0gZGlmZl9jb21tb25TdWZmaXgodGV4dF9pbnNlcnQsIHRleHRfZGVsZXRlKTtcbiAgICAgICAgICAgIGlmIChjb21tb25sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgZGlmZnNbcG9pbnRlcl1bMV0gPSB0ZXh0X2luc2VydC5zdWJzdHJpbmcodGV4dF9pbnNlcnQubGVuZ3RoIC1cbiAgICAgICAgICAgICAgICAgIGNvbW1vbmxlbmd0aCkgKyBkaWZmc1twb2ludGVyXVsxXTtcbiAgICAgICAgICAgICAgdGV4dF9pbnNlcnQgPSB0ZXh0X2luc2VydC5zdWJzdHJpbmcoMCwgdGV4dF9pbnNlcnQubGVuZ3RoIC1cbiAgICAgICAgICAgICAgICAgIGNvbW1vbmxlbmd0aCk7XG4gICAgICAgICAgICAgIHRleHRfZGVsZXRlID0gdGV4dF9kZWxldGUuc3Vic3RyaW5nKDAsIHRleHRfZGVsZXRlLmxlbmd0aCAtXG4gICAgICAgICAgICAgICAgICBjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBEZWxldGUgdGhlIG9mZmVuZGluZyByZWNvcmRzIGFuZCBhZGQgdGhlIG1lcmdlZCBvbmVzLlxuICAgICAgICAgIGlmIChjb3VudF9kZWxldGUgPT09IDApIHtcbiAgICAgICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyIC0gY291bnRfaW5zZXJ0LFxuICAgICAgICAgICAgICAgIGNvdW50X2RlbGV0ZSArIGNvdW50X2luc2VydCwgW0RJRkZfSU5TRVJULCB0ZXh0X2luc2VydF0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY291bnRfaW5zZXJ0ID09PSAwKSB7XG4gICAgICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciAtIGNvdW50X2RlbGV0ZSxcbiAgICAgICAgICAgICAgICBjb3VudF9kZWxldGUgKyBjb3VudF9pbnNlcnQsIFtESUZGX0RFTEVURSwgdGV4dF9kZWxldGVdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIgLSBjb3VudF9kZWxldGUgLSBjb3VudF9pbnNlcnQsXG4gICAgICAgICAgICAgICAgY291bnRfZGVsZXRlICsgY291bnRfaW5zZXJ0LCBbRElGRl9ERUxFVEUsIHRleHRfZGVsZXRlXSxcbiAgICAgICAgICAgICAgICBbRElGRl9JTlNFUlQsIHRleHRfaW5zZXJ0XSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvaW50ZXIgPSBwb2ludGVyIC0gY291bnRfZGVsZXRlIC0gY291bnRfaW5zZXJ0ICtcbiAgICAgICAgICAgICAgICAgICAgKGNvdW50X2RlbGV0ZSA/IDEgOiAwKSArIChjb3VudF9pbnNlcnQgPyAxIDogMCkgKyAxO1xuICAgICAgICB9IGVsc2UgaWYgKHBvaW50ZXIgIT09IDAgJiYgZGlmZnNbcG9pbnRlciAtIDFdWzBdID09IERJRkZfRVFVQUwpIHtcbiAgICAgICAgICAvLyBNZXJnZSB0aGlzIGVxdWFsaXR5IHdpdGggdGhlIHByZXZpb3VzIG9uZS5cbiAgICAgICAgICBkaWZmc1twb2ludGVyIC0gMV1bMV0gKz0gZGlmZnNbcG9pbnRlcl1bMV07XG4gICAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIsIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgfVxuICAgICAgICBjb3VudF9pbnNlcnQgPSAwO1xuICAgICAgICBjb3VudF9kZWxldGUgPSAwO1xuICAgICAgICB0ZXh0X2RlbGV0ZSA9ICcnO1xuICAgICAgICB0ZXh0X2luc2VydCA9ICcnO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGRpZmZzW2RpZmZzLmxlbmd0aCAtIDFdWzFdID09PSAnJykge1xuICAgIGRpZmZzLnBvcCgpOyAgLy8gUmVtb3ZlIHRoZSBkdW1teSBlbnRyeSBhdCB0aGUgZW5kLlxuICB9XG5cbiAgLy8gU2Vjb25kIHBhc3M6IGxvb2sgZm9yIHNpbmdsZSBlZGl0cyBzdXJyb3VuZGVkIG9uIGJvdGggc2lkZXMgYnkgZXF1YWxpdGllc1xuICAvLyB3aGljaCBjYW4gYmUgc2hpZnRlZCBzaWRld2F5cyB0byBlbGltaW5hdGUgYW4gZXF1YWxpdHkuXG4gIC8vIGUuZzogQTxpbnM+QkE8L2lucz5DIC0+IDxpbnM+QUI8L2lucz5BQ1xuICB2YXIgY2hhbmdlcyA9IGZhbHNlO1xuICBwb2ludGVyID0gMTtcbiAgLy8gSW50ZW50aW9uYWxseSBpZ25vcmUgdGhlIGZpcnN0IGFuZCBsYXN0IGVsZW1lbnQgKGRvbid0IG5lZWQgY2hlY2tpbmcpLlxuICB3aGlsZSAocG9pbnRlciA8IGRpZmZzLmxlbmd0aCAtIDEpIHtcbiAgICBpZiAoZGlmZnNbcG9pbnRlciAtIDFdWzBdID09IERJRkZfRVFVQUwgJiZcbiAgICAgICAgZGlmZnNbcG9pbnRlciArIDFdWzBdID09IERJRkZfRVFVQUwpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBzaW5nbGUgZWRpdCBzdXJyb3VuZGVkIGJ5IGVxdWFsaXRpZXMuXG4gICAgICBpZiAoZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCAtXG4gICAgICAgICAgZGlmZnNbcG9pbnRlciAtIDFdWzFdLmxlbmd0aCkgPT0gZGlmZnNbcG9pbnRlciAtIDFdWzFdKSB7XG4gICAgICAgIC8vIFNoaWZ0IHRoZSBlZGl0IG92ZXIgdGhlIHByZXZpb3VzIGVxdWFsaXR5LlxuICAgICAgICBkaWZmc1twb2ludGVyXVsxXSA9IGRpZmZzW3BvaW50ZXIgLSAxXVsxXSArXG4gICAgICAgICAgICBkaWZmc1twb2ludGVyXVsxXS5zdWJzdHJpbmcoMCwgZGlmZnNbcG9pbnRlcl1bMV0ubGVuZ3RoIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmc1twb2ludGVyIC0gMV1bMV0ubGVuZ3RoKTtcbiAgICAgICAgZGlmZnNbcG9pbnRlciArIDFdWzFdID0gZGlmZnNbcG9pbnRlciAtIDFdWzFdICsgZGlmZnNbcG9pbnRlciArIDFdWzFdO1xuICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciAtIDEsIDEpO1xuICAgICAgICBjaGFuZ2VzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKDAsIGRpZmZzW3BvaW50ZXIgKyAxXVsxXS5sZW5ndGgpID09XG4gICAgICAgICAgZGlmZnNbcG9pbnRlciArIDFdWzFdKSB7XG4gICAgICAgIC8vIFNoaWZ0IHRoZSBlZGl0IG92ZXIgdGhlIG5leHQgZXF1YWxpdHkuXG4gICAgICAgIGRpZmZzW3BvaW50ZXIgLSAxXVsxXSArPSBkaWZmc1twb2ludGVyICsgMV1bMV07XG4gICAgICAgIGRpZmZzW3BvaW50ZXJdWzFdID1cbiAgICAgICAgICAgIGRpZmZzW3BvaW50ZXJdWzFdLnN1YnN0cmluZyhkaWZmc1twb2ludGVyICsgMV1bMV0ubGVuZ3RoKSArXG4gICAgICAgICAgICBkaWZmc1twb2ludGVyICsgMV1bMV07XG4gICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyICsgMSwgMSk7XG4gICAgICAgIGNoYW5nZXMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBwb2ludGVyKys7XG4gIH1cbiAgLy8gSWYgc2hpZnRzIHdlcmUgbWFkZSwgdGhlIGRpZmYgbmVlZHMgcmVvcmRlcmluZyBhbmQgYW5vdGhlciBzaGlmdCBzd2VlcC5cbiAgaWYgKGNoYW5nZXMpIHtcbiAgICBkaWZmX2NsZWFudXBNZXJnZShkaWZmcyk7XG4gIH1cbn07XG5cblxudmFyIGRpZmYgPSBkaWZmX21haW47XG5kaWZmLklOU0VSVCA9IERJRkZfSU5TRVJUO1xuZGlmZi5ERUxFVEUgPSBESUZGX0RFTEVURTtcbmRpZmYuRVFVQUwgPSBESUZGX0VRVUFMO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRpZmY7XG5cbi8qXG4gKiBNb2RpZnkgYSBkaWZmIHN1Y2ggdGhhdCB0aGUgY3Vyc29yIHBvc2l0aW9uIHBvaW50cyB0byB0aGUgc3RhcnQgb2YgYSBjaGFuZ2U6XG4gKiBFLmcuXG4gKiAgIGN1cnNvcl9ub3JtYWxpemVfZGlmZihbW0RJRkZfRVFVQUwsICdhYmMnXV0sIDEpXG4gKiAgICAgPT4gWzEsIFtbRElGRl9FUVVBTCwgJ2EnXSwgW0RJRkZfRVFVQUwsICdiYyddXV1cbiAqICAgY3Vyc29yX25vcm1hbGl6ZV9kaWZmKFtbRElGRl9JTlNFUlQsICduZXcnXSwgW0RJRkZfREVMRVRFLCAneHl6J11dLCAyKVxuICogICAgID0+IFsyLCBbW0RJRkZfSU5TRVJULCAnbmV3J10sIFtESUZGX0RFTEVURSwgJ3h5J10sIFtESUZGX0RFTEVURSwgJ3onXV1dXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGlmZnMgQXJyYXkgb2YgZGlmZiB0dXBsZXNcbiAqIEBwYXJhbSB7SW50fSBjdXJzb3JfcG9zIFN1Z2dlc3RlZCBlZGl0IHBvc2l0aW9uLiBNdXN0IG5vdCBiZSBvdXQgb2YgYm91bmRzIVxuICogQHJldHVybiB7QXJyYXl9IEEgdHVwbGUgW2N1cnNvciBsb2NhdGlvbiBpbiB0aGUgbW9kaWZpZWQgZGlmZiwgbW9kaWZpZWQgZGlmZl1cbiAqL1xuZnVuY3Rpb24gY3Vyc29yX25vcm1hbGl6ZV9kaWZmIChkaWZmcywgY3Vyc29yX3Bvcykge1xuICBpZiAoY3Vyc29yX3BvcyA9PT0gMCkge1xuICAgIHJldHVybiBbRElGRl9FUVVBTCwgZGlmZnNdO1xuICB9XG4gIGZvciAodmFyIGN1cnJlbnRfcG9zID0gMCwgaSA9IDA7IGkgPCBkaWZmcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkID0gZGlmZnNbaV07XG4gICAgaWYgKGRbMF0gPT09IERJRkZfREVMRVRFIHx8IGRbMF0gPT09IERJRkZfRVFVQUwpIHtcbiAgICAgIHZhciBuZXh0X3BvcyA9IGN1cnJlbnRfcG9zICsgZFsxXS5sZW5ndGg7XG4gICAgICBpZiAoY3Vyc29yX3BvcyA9PT0gbmV4dF9wb3MpIHtcbiAgICAgICAgcmV0dXJuIFtpICsgMSwgZGlmZnNdO1xuICAgICAgfSBlbHNlIGlmIChjdXJzb3JfcG9zIDwgbmV4dF9wb3MpIHtcbiAgICAgICAgLy8gY29weSB0byBwcmV2ZW50IHNpZGUgZWZmZWN0c1xuICAgICAgICBkaWZmcyA9IGRpZmZzLnNsaWNlKCk7XG4gICAgICAgIC8vIHNwbGl0IGQgaW50byB0d28gZGlmZiBjaGFuZ2VzXG4gICAgICAgIHZhciBzcGxpdF9wb3MgPSBjdXJzb3JfcG9zIC0gY3VycmVudF9wb3M7XG4gICAgICAgIHZhciBkX2xlZnQgPSBbZFswXSwgZFsxXS5zbGljZSgwLCBzcGxpdF9wb3MpXTtcbiAgICAgICAgdmFyIGRfcmlnaHQgPSBbZFswXSwgZFsxXS5zbGljZShzcGxpdF9wb3MpXTtcbiAgICAgICAgZGlmZnMuc3BsaWNlKGksIDEsIGRfbGVmdCwgZF9yaWdodCk7XG4gICAgICAgIHJldHVybiBbaSArIDEsIGRpZmZzXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRfcG9zID0gbmV4dF9wb3M7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBFcnJvcignY3Vyc29yX3BvcyBpcyBvdXQgb2YgYm91bmRzIScpXG59XG5cbi8qXG4gKiBNb2RpZnkgYSBkaWZmIHN1Y2ggdGhhdCB0aGUgZWRpdCBwb3NpdGlvbiBpcyBcInNoaWZ0ZWRcIiB0byB0aGUgcHJvcG9zZWQgZWRpdCBsb2NhdGlvbiAoY3Vyc29yX3Bvc2l0aW9uKS5cbiAqXG4gKiBDYXNlIDEpXG4gKiAgIENoZWNrIGlmIGEgbmFpdmUgc2hpZnQgaXMgcG9zc2libGU6XG4gKiAgICAgWzAsIFhdLCBbIDEsIFldIC0+IFsgMSwgWV0sIFswLCBYXSAgICAoaWYgWCArIFkgPT09IFkgKyBYKVxuICogICAgIFswLCBYXSwgWy0xLCBZXSAtPiBbLTEsIFldLCBbMCwgWF0gICAgKGlmIFggKyBZID09PSBZICsgWCkgLSBob2xkcyBzYW1lIHJlc3VsdFxuICogQ2FzZSAyKVxuICogICBDaGVjayBpZiB0aGUgZm9sbG93aW5nIHNoaWZ0cyBhcmUgcG9zc2libGU6XG4gKiAgICAgWzAsICdwcmUnXSwgWyAxLCAncHJlZml4J10gLT4gWyAxLCAncHJlJ10sIFswLCAncHJlJ10sIFsgMSwgJ2ZpeCddXG4gKiAgICAgWzAsICdwcmUnXSwgWy0xLCAncHJlZml4J10gLT4gWy0xLCAncHJlJ10sIFswLCAncHJlJ10sIFstMSwgJ2ZpeCddXG4gKiAgICAgICAgIF4gICAgICAgICAgICBeXG4gKiAgICAgICAgIGQgICAgICAgICAgZF9uZXh0XG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGlmZnMgQXJyYXkgb2YgZGlmZiB0dXBsZXNcbiAqIEBwYXJhbSB7SW50fSBjdXJzb3JfcG9zIFN1Z2dlc3RlZCBlZGl0IHBvc2l0aW9uLiBNdXN0IG5vdCBiZSBvdXQgb2YgYm91bmRzIVxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzXG4gKi9cbmZ1bmN0aW9uIGZpeF9jdXJzb3IgKGRpZmZzLCBjdXJzb3JfcG9zKSB7XG4gIHZhciBub3JtID0gY3Vyc29yX25vcm1hbGl6ZV9kaWZmKGRpZmZzLCBjdXJzb3JfcG9zKTtcbiAgdmFyIG5kaWZmcyA9IG5vcm1bMV07XG4gIHZhciBjdXJzb3JfcG9pbnRlciA9IG5vcm1bMF07XG4gIHZhciBkID0gbmRpZmZzW2N1cnNvcl9wb2ludGVyXTtcbiAgdmFyIGRfbmV4dCA9IG5kaWZmc1tjdXJzb3JfcG9pbnRlciArIDFdO1xuXG4gIGlmIChkID09IG51bGwpIHtcbiAgICAvLyBUZXh0IHdhcyBkZWxldGVkIGZyb20gZW5kIG9mIG9yaWdpbmFsIHN0cmluZyxcbiAgICAvLyBjdXJzb3IgaXMgbm93IG91dCBvZiBib3VuZHMgaW4gbmV3IHN0cmluZ1xuICAgIHJldHVybiBkaWZmcztcbiAgfSBlbHNlIGlmIChkWzBdICE9PSBESUZGX0VRVUFMKSB7XG4gICAgLy8gQSBtb2RpZmljYXRpb24gaGFwcGVuZWQgYXQgdGhlIGN1cnNvciBsb2NhdGlvbi5cbiAgICAvLyBUaGlzIGlzIHRoZSBleHBlY3RlZCBvdXRjb21lLCBzbyB3ZSBjYW4gcmV0dXJuIHRoZSBvcmlnaW5hbCBkaWZmLlxuICAgIHJldHVybiBkaWZmcztcbiAgfSBlbHNlIHtcbiAgICBpZiAoZF9uZXh0ICE9IG51bGwgJiYgZFsxXSArIGRfbmV4dFsxXSA9PT0gZF9uZXh0WzFdICsgZFsxXSkge1xuICAgICAgLy8gQ2FzZSAxKVxuICAgICAgLy8gSXQgaXMgcG9zc2libGUgdG8gcGVyZm9ybSBhIG5haXZlIHNoaWZ0XG4gICAgICBuZGlmZnMuc3BsaWNlKGN1cnNvcl9wb2ludGVyLCAyLCBkX25leHQsIGQpXG4gICAgICByZXR1cm4gbWVyZ2VfdHVwbGVzKG5kaWZmcywgY3Vyc29yX3BvaW50ZXIsIDIpXG4gICAgfSBlbHNlIGlmIChkX25leHQgIT0gbnVsbCAmJiBkX25leHRbMV0uaW5kZXhPZihkWzFdKSA9PT0gMCkge1xuICAgICAgLy8gQ2FzZSAyKVxuICAgICAgLy8gZFsxXSBpcyBhIHByZWZpeCBvZiBkX25leHRbMV1cbiAgICAgIC8vIFdlIGNhbiBhc3N1bWUgdGhhdCBkX25leHRbMF0gIT09IDAsIHNpbmNlIGRbMF0gPT09IDBcbiAgICAgIC8vIFNoaWZ0IGVkaXQgbG9jYXRpb25zLi5cbiAgICAgIG5kaWZmcy5zcGxpY2UoY3Vyc29yX3BvaW50ZXIsIDIsIFtkX25leHRbMF0sIGRbMV1dLCBbMCwgZFsxXV0pO1xuICAgICAgdmFyIHN1ZmZpeCA9IGRfbmV4dFsxXS5zbGljZShkWzFdLmxlbmd0aCk7XG4gICAgICBpZiAoc3VmZml4Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgbmRpZmZzLnNwbGljZShjdXJzb3JfcG9pbnRlciArIDIsIDAsIFtkX25leHRbMF0sIHN1ZmZpeF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lcmdlX3R1cGxlcyhuZGlmZnMsIGN1cnNvcl9wb2ludGVyLCAzKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOb3QgcG9zc2libGUgdG8gcGVyZm9ybSBhbnkgbW9kaWZpY2F0aW9uXG4gICAgICByZXR1cm4gZGlmZnM7XG4gICAgfVxuICB9XG59XG5cbi8qXG4gKiBDaGVjayBkaWZmIGRpZCBub3Qgc3BsaXQgc3Vycm9nYXRlIHBhaXJzLlxuICogRXguIFswLCAnXFx1RDgzRCddLCBbLTEsICdcXHVEQzM2J10sIFsxLCAnXFx1REMyRiddIC0+IFstMSwgJ1xcdUQ4M0RcXHVEQzM2J10sIFsxLCAnXFx1RDgzRFxcdURDMkYnXVxuICogICAgICdcXHVEODNEXFx1REMzNicgPT09ICfwn5C2JywgJ1xcdUQ4M0RcXHVEQzJGJyA9PT0gJ/CfkK8nXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGlmZnMgQXJyYXkgb2YgZGlmZiB0dXBsZXNcbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBkaWZmIHR1cGxlc1xuICovXG5mdW5jdGlvbiBmaXhfZW1vamkgKGRpZmZzKSB7XG4gIHZhciBjb21wYWN0ID0gZmFsc2U7XG4gIHZhciBzdGFydHNfd2l0aF9wYWlyX2VuZCA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckNvZGVBdCgwKSA+PSAweERDMDAgJiYgc3RyLmNoYXJDb2RlQXQoMCkgPD0gMHhERkZGO1xuICB9XG4gIHZhciBlbmRzX3dpdGhfcGFpcl9zdGFydCA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckNvZGVBdChzdHIubGVuZ3RoLTEpID49IDB4RDgwMCAmJiBzdHIuY2hhckNvZGVBdChzdHIubGVuZ3RoLTEpIDw9IDB4REJGRjtcbiAgfVxuICBmb3IgKHZhciBpID0gMjsgaSA8IGRpZmZzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGRpZmZzW2ktMl1bMF0gPT09IERJRkZfRVFVQUwgJiYgZW5kc193aXRoX3BhaXJfc3RhcnQoZGlmZnNbaS0yXVsxXSkgJiZcbiAgICAgICAgZGlmZnNbaS0xXVswXSA9PT0gRElGRl9ERUxFVEUgJiYgc3RhcnRzX3dpdGhfcGFpcl9lbmQoZGlmZnNbaS0xXVsxXSkgJiZcbiAgICAgICAgZGlmZnNbaV1bMF0gPT09IERJRkZfSU5TRVJUICYmIHN0YXJ0c193aXRoX3BhaXJfZW5kKGRpZmZzW2ldWzFdKSkge1xuICAgICAgY29tcGFjdCA9IHRydWU7XG5cbiAgICAgIGRpZmZzW2ktMV1bMV0gPSBkaWZmc1tpLTJdWzFdLnNsaWNlKC0xKSArIGRpZmZzW2ktMV1bMV07XG4gICAgICBkaWZmc1tpXVsxXSA9IGRpZmZzW2ktMl1bMV0uc2xpY2UoLTEpICsgZGlmZnNbaV1bMV07XG5cbiAgICAgIGRpZmZzW2ktMl1bMV0gPSBkaWZmc1tpLTJdWzFdLnNsaWNlKDAsIC0xKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFjb21wYWN0KSB7XG4gICAgcmV0dXJuIGRpZmZzO1xuICB9XG4gIHZhciBmaXhlZF9kaWZmcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpZmZzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGRpZmZzW2ldWzFdLmxlbmd0aCA+IDApIHtcbiAgICAgIGZpeGVkX2RpZmZzLnB1c2goZGlmZnNbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZml4ZWRfZGlmZnM7XG59XG5cbi8qXG4gKiBUcnkgdG8gbWVyZ2UgdHVwbGVzIHdpdGggdGhlaXIgbmVpZ2JvcnMgaW4gYSBnaXZlbiByYW5nZS5cbiAqIEUuZy4gWzAsICdhJ10sIFswLCAnYiddIC0+IFswLCAnYWInXVxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRpZmZzIEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICogQHBhcmFtIHtJbnR9IHN0YXJ0IFBvc2l0aW9uIG9mIHRoZSBmaXJzdCBlbGVtZW50IHRvIG1lcmdlIChkaWZmc1tzdGFydF0gaXMgYWxzbyBtZXJnZWQgd2l0aCBkaWZmc1tzdGFydCAtIDFdKS5cbiAqIEBwYXJhbSB7SW50fSBsZW5ndGggTnVtYmVyIG9mIGNvbnNlY3V0aXZlIGVsZW1lbnRzIHRvIGNoZWNrLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIG1lcmdlZCBkaWZmIHR1cGxlcy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VfdHVwbGVzIChkaWZmcywgc3RhcnQsIGxlbmd0aCkge1xuICAvLyBDaGVjayBmcm9tIChzdGFydC0xKSB0byAoc3RhcnQrbGVuZ3RoKS5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0ICsgbGVuZ3RoIC0gMTsgaSA+PSAwICYmIGkgPj0gc3RhcnQgLSAxOyBpLS0pIHtcbiAgICBpZiAoaSArIDEgPCBkaWZmcy5sZW5ndGgpIHtcbiAgICAgIHZhciBsZWZ0X2QgPSBkaWZmc1tpXTtcbiAgICAgIHZhciByaWdodF9kID0gZGlmZnNbaSsxXTtcbiAgICAgIGlmIChsZWZ0X2RbMF0gPT09IHJpZ2h0X2RbMV0pIHtcbiAgICAgICAgZGlmZnMuc3BsaWNlKGksIDIsIFtsZWZ0X2RbMF0sIGxlZnRfZFsxXSArIHJpZ2h0X2RbMV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRpZmZzO1xufVxuIiwidmFyIGRpZmYgPSByZXF1aXJlKCdmYXN0LWRpZmYnKTtcbnZhciBlcXVhbCA9IHJlcXVpcmUoJ2RlZXAtZXF1YWwnKTtcbnZhciBleHRlbmQgPSByZXF1aXJlKCdleHRlbmQnKTtcbnZhciBvcCA9IHJlcXVpcmUoJy4vb3AnKTtcblxuXG52YXIgTlVMTF9DSEFSQUNURVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDApOyAgLy8gUGxhY2Vob2xkZXIgY2hhciBmb3IgZW1iZWQgaW4gZGlmZigpXG5cblxudmFyIERlbHRhID0gZnVuY3Rpb24gKG9wcykge1xuICAvLyBBc3N1bWUgd2UgYXJlIGdpdmVuIGEgd2VsbCBmb3JtZWQgb3BzXG4gIGlmIChBcnJheS5pc0FycmF5KG9wcykpIHtcbiAgICB0aGlzLm9wcyA9IG9wcztcbiAgfSBlbHNlIGlmIChvcHMgIT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KG9wcy5vcHMpKSB7XG4gICAgdGhpcy5vcHMgPSBvcHMub3BzO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3BzID0gW107XG4gIH1cbn07XG5cblxuRGVsdGEucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uICh0ZXh0LCBhdHRyaWJ1dGVzKSB7XG4gIHZhciBuZXdPcCA9IHt9O1xuICBpZiAodGV4dC5sZW5ndGggPT09IDApIHJldHVybiB0aGlzO1xuICBuZXdPcC5pbnNlcnQgPSB0ZXh0O1xuICBpZiAoYXR0cmlidXRlcyAhPSBudWxsICYmIHR5cGVvZiBhdHRyaWJ1dGVzID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwKSB7XG4gICAgbmV3T3AuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gIH1cbiAgcmV0dXJuIHRoaXMucHVzaChuZXdPcCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICBpZiAobGVuZ3RoIDw9IDApIHJldHVybiB0aGlzO1xuICByZXR1cm4gdGhpcy5wdXNoKHsgJ2RlbGV0ZSc6IGxlbmd0aCB9KTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5yZXRhaW4gPSBmdW5jdGlvbiAobGVuZ3RoLCBhdHRyaWJ1dGVzKSB7XG4gIGlmIChsZW5ndGggPD0gMCkgcmV0dXJuIHRoaXM7XG4gIHZhciBuZXdPcCA9IHsgcmV0YWluOiBsZW5ndGggfTtcbiAgaWYgKGF0dHJpYnV0ZXMgIT0gbnVsbCAmJiB0eXBlb2YgYXR0cmlidXRlcyA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoID4gMCkge1xuICAgIG5ld09wLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICB9XG4gIHJldHVybiB0aGlzLnB1c2gobmV3T3ApO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAobmV3T3ApIHtcbiAgdmFyIGluZGV4ID0gdGhpcy5vcHMubGVuZ3RoO1xuICB2YXIgbGFzdE9wID0gdGhpcy5vcHNbaW5kZXggLSAxXTtcbiAgbmV3T3AgPSBleHRlbmQodHJ1ZSwge30sIG5ld09wKTtcbiAgaWYgKHR5cGVvZiBsYXN0T3AgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHR5cGVvZiBuZXdPcFsnZGVsZXRlJ10gPT09ICdudW1iZXInICYmIHR5cGVvZiBsYXN0T3BbJ2RlbGV0ZSddID09PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5vcHNbaW5kZXggLSAxXSA9IHsgJ2RlbGV0ZSc6IGxhc3RPcFsnZGVsZXRlJ10gKyBuZXdPcFsnZGVsZXRlJ10gfTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBTaW5jZSBpdCBkb2VzIG5vdCBtYXR0ZXIgaWYgd2UgaW5zZXJ0IGJlZm9yZSBvciBhZnRlciBkZWxldGluZyBhdCB0aGUgc2FtZSBpbmRleCxcbiAgICAvLyBhbHdheXMgcHJlZmVyIHRvIGluc2VydCBmaXJzdFxuICAgIGlmICh0eXBlb2YgbGFzdE9wWydkZWxldGUnXSA9PT0gJ251bWJlcicgJiYgbmV3T3AuaW5zZXJ0ICE9IG51bGwpIHtcbiAgICAgIGluZGV4IC09IDE7XG4gICAgICBsYXN0T3AgPSB0aGlzLm9wc1tpbmRleCAtIDFdO1xuICAgICAgaWYgKHR5cGVvZiBsYXN0T3AgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRoaXMub3BzLnVuc2hpZnQobmV3T3ApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVxdWFsKG5ld09wLmF0dHJpYnV0ZXMsIGxhc3RPcC5hdHRyaWJ1dGVzKSkge1xuICAgICAgaWYgKHR5cGVvZiBuZXdPcC5pbnNlcnQgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBsYXN0T3AuaW5zZXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLm9wc1tpbmRleCAtIDFdID0geyBpbnNlcnQ6IGxhc3RPcC5pbnNlcnQgKyBuZXdPcC5pbnNlcnQgfTtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdPcC5hdHRyaWJ1dGVzID09PSAnb2JqZWN0JykgdGhpcy5vcHNbaW5kZXggLSAxXS5hdHRyaWJ1dGVzID0gbmV3T3AuYXR0cmlidXRlc1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5ld09wLnJldGFpbiA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGxhc3RPcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHRoaXMub3BzW2luZGV4IC0gMV0gPSB7IHJldGFpbjogbGFzdE9wLnJldGFpbiArIG5ld09wLnJldGFpbiB9O1xuICAgICAgICBpZiAodHlwZW9mIG5ld09wLmF0dHJpYnV0ZXMgPT09ICdvYmplY3QnKSB0aGlzLm9wc1tpbmRleCAtIDFdLmF0dHJpYnV0ZXMgPSBuZXdPcC5hdHRyaWJ1dGVzXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaW5kZXggPT09IHRoaXMub3BzLmxlbmd0aCkge1xuICAgIHRoaXMub3BzLnB1c2gobmV3T3ApO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3BzLnNwbGljZShpbmRleCwgMCwgbmV3T3ApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmNob3AgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsYXN0T3AgPSB0aGlzLm9wc1t0aGlzLm9wcy5sZW5ndGggLSAxXTtcbiAgaWYgKGxhc3RPcCAmJiBsYXN0T3AucmV0YWluICYmICFsYXN0T3AuYXR0cmlidXRlcykge1xuICAgIHRoaXMub3BzLnBvcCgpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcbiAgcmV0dXJuIHRoaXMub3BzLmZpbHRlcihwcmVkaWNhdGUpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gIHRoaXMub3BzLmZvckVhY2gocHJlZGljYXRlKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gIHJldHVybiB0aGlzLm9wcy5tYXAocHJlZGljYXRlKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5wYXJ0aXRpb24gPSBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gIHZhciBwYXNzZWQgPSBbXSwgZmFpbGVkID0gW107XG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbihvcCkge1xuICAgIHZhciB0YXJnZXQgPSBwcmVkaWNhdGUob3ApID8gcGFzc2VkIDogZmFpbGVkO1xuICAgIHRhcmdldC5wdXNoKG9wKTtcbiAgfSk7XG4gIHJldHVybiBbcGFzc2VkLCBmYWlsZWRdO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChwcmVkaWNhdGUsIGluaXRpYWwpIHtcbiAgcmV0dXJuIHRoaXMub3BzLnJlZHVjZShwcmVkaWNhdGUsIGluaXRpYWwpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmNoYW5nZUxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucmVkdWNlKGZ1bmN0aW9uIChsZW5ndGgsIGVsZW0pIHtcbiAgICBpZiAoZWxlbS5pbnNlcnQpIHtcbiAgICAgIHJldHVybiBsZW5ndGggKyBvcC5sZW5ndGgoZWxlbSk7XG4gICAgfSBlbHNlIGlmIChlbGVtLmRlbGV0ZSkge1xuICAgICAgcmV0dXJuIGxlbmd0aCAtIGVsZW0uZGVsZXRlO1xuICAgIH1cbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9LCAwKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnJlZHVjZShmdW5jdGlvbiAobGVuZ3RoLCBlbGVtKSB7XG4gICAgcmV0dXJuIGxlbmd0aCArIG9wLmxlbmd0aChlbGVtKTtcbiAgfSwgMCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJykgZW5kID0gSW5maW5pdHk7XG4gIHZhciBvcHMgPSBbXTtcbiAgdmFyIGl0ZXIgPSBvcC5pdGVyYXRvcih0aGlzLm9wcyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHdoaWxlIChpbmRleCA8IGVuZCAmJiBpdGVyLmhhc05leHQoKSkge1xuICAgIHZhciBuZXh0T3A7XG4gICAgaWYgKGluZGV4IDwgc3RhcnQpIHtcbiAgICAgIG5leHRPcCA9IGl0ZXIubmV4dChzdGFydCAtIGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dE9wID0gaXRlci5uZXh0KGVuZCAtIGluZGV4KTtcbiAgICAgIG9wcy5wdXNoKG5leHRPcCk7XG4gICAgfVxuICAgIGluZGV4ICs9IG9wLmxlbmd0aChuZXh0T3ApO1xuICB9XG4gIHJldHVybiBuZXcgRGVsdGEob3BzKTtcbn07XG5cblxuRGVsdGEucHJvdG90eXBlLmNvbXBvc2UgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgdmFyIHRoaXNJdGVyID0gb3AuaXRlcmF0b3IodGhpcy5vcHMpO1xuICB2YXIgb3RoZXJJdGVyID0gb3AuaXRlcmF0b3Iob3RoZXIub3BzKTtcbiAgdmFyIGRlbHRhID0gbmV3IERlbHRhKCk7XG4gIHdoaWxlICh0aGlzSXRlci5oYXNOZXh0KCkgfHwgb3RoZXJJdGVyLmhhc05leHQoKSkge1xuICAgIGlmIChvdGhlckl0ZXIucGVla1R5cGUoKSA9PT0gJ2luc2VydCcpIHtcbiAgICAgIGRlbHRhLnB1c2gob3RoZXJJdGVyLm5leHQoKSk7XG4gICAgfSBlbHNlIGlmICh0aGlzSXRlci5wZWVrVHlwZSgpID09PSAnZGVsZXRlJykge1xuICAgICAgZGVsdGEucHVzaCh0aGlzSXRlci5uZXh0KCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGVuZ3RoID0gTWF0aC5taW4odGhpc0l0ZXIucGVla0xlbmd0aCgpLCBvdGhlckl0ZXIucGVla0xlbmd0aCgpKTtcbiAgICAgIHZhciB0aGlzT3AgPSB0aGlzSXRlci5uZXh0KGxlbmd0aCk7XG4gICAgICB2YXIgb3RoZXJPcCA9IG90aGVySXRlci5uZXh0KGxlbmd0aCk7XG4gICAgICBpZiAodHlwZW9mIG90aGVyT3AucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgICB2YXIgbmV3T3AgPSB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzT3AucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIG5ld09wLnJldGFpbiA9IGxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdPcC5pbnNlcnQgPSB0aGlzT3AuaW5zZXJ0O1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXNlcnZlIG51bGwgd2hlbiBjb21wb3Npbmcgd2l0aCBhIHJldGFpbiwgb3RoZXJ3aXNlIHJlbW92ZSBpdCBmb3IgaW5zZXJ0c1xuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IG9wLmF0dHJpYnV0ZXMuY29tcG9zZSh0aGlzT3AuYXR0cmlidXRlcywgb3RoZXJPcC5hdHRyaWJ1dGVzLCB0eXBlb2YgdGhpc09wLnJldGFpbiA9PT0gJ251bWJlcicpO1xuICAgICAgICBpZiAoYXR0cmlidXRlcykgbmV3T3AuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIGRlbHRhLnB1c2gobmV3T3ApO1xuICAgICAgLy8gT3RoZXIgb3Agc2hvdWxkIGJlIGRlbGV0ZSwgd2UgY291bGQgYmUgYW4gaW5zZXJ0IG9yIHJldGFpblxuICAgICAgLy8gSW5zZXJ0ICsgZGVsZXRlIGNhbmNlbHMgb3V0XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvdGhlck9wWydkZWxldGUnXSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHRoaXNPcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgIGRlbHRhLnB1c2gob3RoZXJPcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWx0YS5jaG9wKCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIHZhciBkZWx0YSA9IG5ldyBEZWx0YSh0aGlzLm9wcy5zbGljZSgpKTtcbiAgaWYgKG90aGVyLm9wcy5sZW5ndGggPiAwKSB7XG4gICAgZGVsdGEucHVzaChvdGhlci5vcHNbMF0pO1xuICAgIGRlbHRhLm9wcyA9IGRlbHRhLm9wcy5jb25jYXQob3RoZXIub3BzLnNsaWNlKDEpKTtcbiAgfVxuICByZXR1cm4gZGVsdGE7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuZGlmZiA9IGZ1bmN0aW9uIChvdGhlciwgaW5kZXgpIHtcbiAgaWYgKHRoaXMub3BzID09PSBvdGhlci5vcHMpIHtcbiAgICByZXR1cm4gbmV3IERlbHRhKCk7XG4gIH1cbiAgdmFyIHN0cmluZ3MgPSBbdGhpcywgb3RoZXJdLm1hcChmdW5jdGlvbiAoZGVsdGEpIHtcbiAgICByZXR1cm4gZGVsdGEubWFwKGZ1bmN0aW9uIChvcCkge1xuICAgICAgaWYgKG9wLmluc2VydCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb3AuaW5zZXJ0ID09PSAnc3RyaW5nJyA/IG9wLmluc2VydCA6IE5VTExfQ0hBUkFDVEVSO1xuICAgICAgfVxuICAgICAgdmFyIHByZXAgPSAoZGVsdGEgPT09IG90aGVyKSA/ICdvbicgOiAnd2l0aCc7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpZmYoKSBjYWxsZWQgJyArIHByZXAgKyAnIG5vbi1kb2N1bWVudCcpO1xuICAgIH0pLmpvaW4oJycpO1xuICB9KTtcbiAgdmFyIGRlbHRhID0gbmV3IERlbHRhKCk7XG4gIHZhciBkaWZmUmVzdWx0ID0gZGlmZihzdHJpbmdzWzBdLCBzdHJpbmdzWzFdLCBpbmRleCk7XG4gIHZhciB0aGlzSXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIG90aGVySXRlciA9IG9wLml0ZXJhdG9yKG90aGVyLm9wcyk7XG4gIGRpZmZSZXN1bHQuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgdmFyIGxlbmd0aCA9IGNvbXBvbmVudFsxXS5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBvcExlbmd0aCA9IDA7XG4gICAgICBzd2l0Y2ggKGNvbXBvbmVudFswXSkge1xuICAgICAgICBjYXNlIGRpZmYuSU5TRVJUOlxuICAgICAgICAgIG9wTGVuZ3RoID0gTWF0aC5taW4ob3RoZXJJdGVyLnBlZWtMZW5ndGgoKSwgbGVuZ3RoKTtcbiAgICAgICAgICBkZWx0YS5wdXNoKG90aGVySXRlci5uZXh0KG9wTGVuZ3RoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZGlmZi5ERUxFVEU6XG4gICAgICAgICAgb3BMZW5ndGggPSBNYXRoLm1pbihsZW5ndGgsIHRoaXNJdGVyLnBlZWtMZW5ndGgoKSk7XG4gICAgICAgICAgdGhpc0l0ZXIubmV4dChvcExlbmd0aCk7XG4gICAgICAgICAgZGVsdGFbJ2RlbGV0ZSddKG9wTGVuZ3RoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBkaWZmLkVRVUFMOlxuICAgICAgICAgIG9wTGVuZ3RoID0gTWF0aC5taW4odGhpc0l0ZXIucGVla0xlbmd0aCgpLCBvdGhlckl0ZXIucGVla0xlbmd0aCgpLCBsZW5ndGgpO1xuICAgICAgICAgIHZhciB0aGlzT3AgPSB0aGlzSXRlci5uZXh0KG9wTGVuZ3RoKTtcbiAgICAgICAgICB2YXIgb3RoZXJPcCA9IG90aGVySXRlci5uZXh0KG9wTGVuZ3RoKTtcbiAgICAgICAgICBpZiAoZXF1YWwodGhpc09wLmluc2VydCwgb3RoZXJPcC5pbnNlcnQpKSB7XG4gICAgICAgICAgICBkZWx0YS5yZXRhaW4ob3BMZW5ndGgsIG9wLmF0dHJpYnV0ZXMuZGlmZih0aGlzT3AuYXR0cmlidXRlcywgb3RoZXJPcC5hdHRyaWJ1dGVzKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbHRhLnB1c2gob3RoZXJPcClbJ2RlbGV0ZSddKG9wTGVuZ3RoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBsZW5ndGggLT0gb3BMZW5ndGg7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRlbHRhLmNob3AoKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5lYWNoTGluZSA9IGZ1bmN0aW9uIChwcmVkaWNhdGUsIG5ld2xpbmUpIHtcbiAgbmV3bGluZSA9IG5ld2xpbmUgfHwgJ1xcbic7XG4gIHZhciBpdGVyID0gb3AuaXRlcmF0b3IodGhpcy5vcHMpO1xuICB2YXIgbGluZSA9IG5ldyBEZWx0YSgpO1xuICB2YXIgaSA9IDA7XG4gIHdoaWxlIChpdGVyLmhhc05leHQoKSkge1xuICAgIGlmIChpdGVyLnBlZWtUeXBlKCkgIT09ICdpbnNlcnQnKSByZXR1cm47XG4gICAgdmFyIHRoaXNPcCA9IGl0ZXIucGVlaygpO1xuICAgIHZhciBzdGFydCA9IG9wLmxlbmd0aCh0aGlzT3ApIC0gaXRlci5wZWVrTGVuZ3RoKCk7XG4gICAgdmFyIGluZGV4ID0gdHlwZW9mIHRoaXNPcC5pbnNlcnQgPT09ICdzdHJpbmcnID9cbiAgICAgIHRoaXNPcC5pbnNlcnQuaW5kZXhPZihuZXdsaW5lLCBzdGFydCkgLSBzdGFydCA6IC0xO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIGxpbmUucHVzaChpdGVyLm5leHQoKSk7XG4gICAgfSBlbHNlIGlmIChpbmRleCA+IDApIHtcbiAgICAgIGxpbmUucHVzaChpdGVyLm5leHQoaW5kZXgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByZWRpY2F0ZShsaW5lLCBpdGVyLm5leHQoMSkuYXR0cmlidXRlcyB8fCB7fSwgaSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGkgKz0gMTtcbiAgICAgIGxpbmUgPSBuZXcgRGVsdGEoKTtcbiAgICB9XG4gIH1cbiAgaWYgKGxpbmUubGVuZ3RoKCkgPiAwKSB7XG4gICAgcHJlZGljYXRlKGxpbmUsIHt9LCBpKTtcbiAgfVxufTtcblxuRGVsdGEucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIChvdGhlciwgcHJpb3JpdHkpIHtcbiAgcHJpb3JpdHkgPSAhIXByaW9yaXR5O1xuICBpZiAodHlwZW9mIG90aGVyID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybVBvc2l0aW9uKG90aGVyLCBwcmlvcml0eSk7XG4gIH1cbiAgdmFyIHRoaXNJdGVyID0gb3AuaXRlcmF0b3IodGhpcy5vcHMpO1xuICB2YXIgb3RoZXJJdGVyID0gb3AuaXRlcmF0b3Iob3RoZXIub3BzKTtcbiAgdmFyIGRlbHRhID0gbmV3IERlbHRhKCk7XG4gIHdoaWxlICh0aGlzSXRlci5oYXNOZXh0KCkgfHwgb3RoZXJJdGVyLmhhc05leHQoKSkge1xuICAgIGlmICh0aGlzSXRlci5wZWVrVHlwZSgpID09PSAnaW5zZXJ0JyAmJiAocHJpb3JpdHkgfHwgb3RoZXJJdGVyLnBlZWtUeXBlKCkgIT09ICdpbnNlcnQnKSkge1xuICAgICAgZGVsdGEucmV0YWluKG9wLmxlbmd0aCh0aGlzSXRlci5uZXh0KCkpKTtcbiAgICB9IGVsc2UgaWYgKG90aGVySXRlci5wZWVrVHlwZSgpID09PSAnaW5zZXJ0Jykge1xuICAgICAgZGVsdGEucHVzaChvdGhlckl0ZXIubmV4dCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWluKHRoaXNJdGVyLnBlZWtMZW5ndGgoKSwgb3RoZXJJdGVyLnBlZWtMZW5ndGgoKSk7XG4gICAgICB2YXIgdGhpc09wID0gdGhpc0l0ZXIubmV4dChsZW5ndGgpO1xuICAgICAgdmFyIG90aGVyT3AgPSBvdGhlckl0ZXIubmV4dChsZW5ndGgpO1xuICAgICAgaWYgKHRoaXNPcFsnZGVsZXRlJ10pIHtcbiAgICAgICAgLy8gT3VyIGRlbGV0ZSBlaXRoZXIgbWFrZXMgdGhlaXIgZGVsZXRlIHJlZHVuZGFudCBvciByZW1vdmVzIHRoZWlyIHJldGFpblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAob3RoZXJPcFsnZGVsZXRlJ10pIHtcbiAgICAgICAgZGVsdGEucHVzaChvdGhlck9wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdlIHJldGFpbiBlaXRoZXIgdGhlaXIgcmV0YWluIG9yIGluc2VydFxuICAgICAgICBkZWx0YS5yZXRhaW4obGVuZ3RoLCBvcC5hdHRyaWJ1dGVzLnRyYW5zZm9ybSh0aGlzT3AuYXR0cmlidXRlcywgb3RoZXJPcC5hdHRyaWJ1dGVzLCBwcmlvcml0eSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGVsdGEuY2hvcCgpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnRyYW5zZm9ybVBvc2l0aW9uID0gZnVuY3Rpb24gKGluZGV4LCBwcmlvcml0eSkge1xuICBwcmlvcml0eSA9ICEhcHJpb3JpdHk7XG4gIHZhciB0aGlzSXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIG9mZnNldCA9IDA7XG4gIHdoaWxlICh0aGlzSXRlci5oYXNOZXh0KCkgJiYgb2Zmc2V0IDw9IGluZGV4KSB7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXNJdGVyLnBlZWtMZW5ndGgoKTtcbiAgICB2YXIgbmV4dFR5cGUgPSB0aGlzSXRlci5wZWVrVHlwZSgpO1xuICAgIHRoaXNJdGVyLm5leHQoKTtcbiAgICBpZiAobmV4dFR5cGUgPT09ICdkZWxldGUnKSB7XG4gICAgICBpbmRleCAtPSBNYXRoLm1pbihsZW5ndGgsIGluZGV4IC0gb2Zmc2V0KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAobmV4dFR5cGUgPT09ICdpbnNlcnQnICYmIChvZmZzZXQgPCBpbmRleCB8fCAhcHJpb3JpdHkpKSB7XG4gICAgICBpbmRleCArPSBsZW5ndGg7XG4gICAgfVxuICAgIG9mZnNldCArPSBsZW5ndGg7XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IERlbHRhO1xuIiwiaW1wb3J0IERlbHRhIGZyb20gJ3F1aWxsLWRlbHRhJ1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXG5pbXBvcnQgRW1iZWRJdGVtIGZyb20gJy4vY29tcG9uZW50cy9FbWJlZEl0ZW0udnVlJ1xuVnVlLmNvbXBvbmVudChFbWJlZEl0ZW0pXG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuICAvLyBPbmx5IG1hdGNoIHNpbmdsZSBsaW5lIHVybHNcbiAgdXJsUmVnZXg6IC9eaHR0cHM/OlxcL1xcL1tcXFNdKyQvZ21cbn1cblxuY2xhc3MgVXJsRW1iZWRzIHtcbiAgY29uc3RydWN0b3IgKHF1aWxsLCBvcHRpb25zKSB7XG4gICAgdGhpcy5xdWlsbCA9IHF1aWxsXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgICB0aGlzLm9wdGlvbnMgPSB7Li4uZGVmYXVsdHMsIC4uLm9wdGlvbnN9XG4gICAgdGhpcy5yZWdpc3RlclR5cGVMaXN0ZW5lcigpXG4gICAgdGhpcy5yZWdpc3RlclBhc3RlTGlzdGVuZXIoKVxuICB9XG4gIHJlZ2lzdGVyUGFzdGVMaXN0ZW5lciAoKSB7XG4gICAgdGhpcy5xdWlsbC5jbGlwYm9hcmQuYWRkTWF0Y2hlcihOb2RlLlRFWFRfTk9ERSwgKG5vZGUsIGRlbHRhKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIG5vZGUuZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBjb25zdCBtYXRjaGVzID0gbm9kZS5kYXRhLm1hdGNoKHRoaXMub3B0aW9ucy51cmxSZWdleClcbiAgICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBuZXdEZWx0YSA9IG5ldyBEZWx0YSgpXG4gICAgICAgIGxldCBzdHIgPSBub2RlLmRhdGFcbiAgICAgICAgbWF0Y2hlcy5mb3JFYWNoKHVybCA9PiB7XG4gICAgICAgICAgY29uc3Qgc3BsaXQgPSBzdHIuc3BsaXQodXJsKVxuICAgICAgICAgIGNvbnN0IGJlZm9yZUxpbmsgPSBzcGxpdC5zaGlmdCgpXG4gICAgICAgICAgY29uc3QgdXJsRW1iZWQgPSB0aGlzLmJ1aWxkVXJsRW1iZWQodXJsKVxuICAgICAgICAgIG5ld0RlbHRhLmluc2VydChiZWZvcmVMaW5rKVxuICAgICAgICAgIG5ld0RlbHRhLmluc2VydCh1cmxFbWJlZClcbiAgICAgICAgICBzdHIgPSBzcGxpdC5qb2luKHVybClcbiAgICAgICAgfSlcbiAgICAgICAgbmV3RGVsdGEuaW5zZXJ0KHN0cilcbiAgICAgICAgZGVsdGEub3BzID0gbmV3RGVsdGEub3BzXG4gICAgICB9XG4gICAgICByZXR1cm4gZGVsdGFcbiAgICB9KVxuICB9XG4gIHJlZ2lzdGVyVHlwZUxpc3RlbmVyICgpIHtcbiAgICB0aGlzLnF1aWxsLm9uKCd0ZXh0LWNoYW5nZScsIChkZWx0YSkgPT4ge1xuICAgICAgbGV0IG9wcyA9IGRlbHRhLm9wc1xuICAgICAgLy8gT25seSByZXR1cm4gdHJ1ZSwgaWYgbGFzdCBvcGVyYXRpb24gaW5jbHVkZXMgd2hpdGVzcGFjZSBpbnNlcnRzXG4gICAgICAvLyBFcXVpdmFsZW50IHRvIGxpc3RlbmluZyBmb3IgZW50ZXIsIHRhYiBvciBzcGFjZVxuICAgICAgaWYgKCFvcHMgfHwgb3BzLmxlbmd0aCA8IDEgfHwgb3BzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBsZXQgbGFzdE9wID0gb3BzW29wcy5sZW5ndGggLSAxXVxuICAgICAgaWYgKCFsYXN0T3AuaW5zZXJ0IHx8IHR5cGVvZiBsYXN0T3AuaW5zZXJ0ICE9PSAnc3RyaW5nJyB8fCAhbGFzdE9wLmluc2VydC5tYXRjaCgvXFxzLykpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB0aGlzLmNoZWNrVGV4dEZvclVybCgpXG4gICAgfSlcbiAgfVxuICBjaGVja1RleHRGb3JVcmwgKCkge1xuICAgIGxldCBzZWwgPSB0aGlzLnF1aWxsLmdldFNlbGVjdGlvbigpXG4gICAgaWYgKCFzZWwpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBsZXQgW2xlYWZdID0gdGhpcy5xdWlsbC5nZXRMZWFmKHNlbC5pbmRleClcbiAgICBpZiAoIWxlYWYudGV4dCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGxlYWYudGV4dClcbiAgICBjb25zdCBtYXRjaGVzID0gbGVhZi50ZXh0Lm1hdGNoKHRoaXMub3B0aW9ucy51cmxSZWdleClcbiAgICBpZiAoIW1hdGNoZXMgfHwgIW1hdGNoZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgbGV0IHN0ZXBzQmFjayA9IGxlYWYudGV4dC5sZW5ndGhcbiAgICBsZXQgaW5kZXggPSBzZWwuaW5kZXggLSBzdGVwc0JhY2tcbiAgICB0aGlzLnRleHRUb1VybChpbmRleCwgbWF0Y2hlc1swXSlcbiAgfVxuICBhc3luYyB0ZXh0VG9VcmwgKGluZGV4LCB1cmwpIHtcbiAgICBjb25zdCB1cmxFbWJlZCA9IGF3YWl0IHRoaXMuYnVpbGRVcmxFbWJlZCh1cmwpXG4gICAgY29uc3Qgb3BzID0gbmV3IERlbHRhKClcbiAgICAgIC5yZXRhaW4oaW5kZXgpXG4gICAgICAuZGVsZXRlKHVybC5sZW5ndGgpXG4gICAgICAuaW5zZXJ0KHVybEVtYmVkKVxuICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMob3BzKVxuICB9XG4gIGJ1aWxkVXJsRW1iZWQgKHVybCkge1xuICAgIGNvbnN0IGVtYmVkID0ge1xuICAgICAgdXJsRW1iZWQ6IHtcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIGh0bWw6IHVybFxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFkZE1ldGFJbmZvKHVybClcbiAgICByZXR1cm4gZW1iZWRcbiAgfVxuICBhc3luYyBhZGRNZXRhSW5mbyAodXJsKSB7XG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmdldE1ldGFJbmZvKHVybClcbiAgICBjb25zdCBlbWJlZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGBbZGF0YS11cmwtZW1iZWQ9XCIke3VybH1cIl1gKVxuICAgIGlmICghZW1iZWRzIHx8ICFlbWJlZHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZW1iZWRzLmZvckVhY2goZW1iZWQgPT4ge1xuICAgICAgY29uc3QgZW1iZWREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgZW1iZWQuaW5uZXJIVE1MID0gJydcbiAgICAgIGVtYmVkLmFwcGVuZENoaWxkKGVtYmVkRGl2KVxuICAgICAgbmV3IFZ1ZSh7XG4gICAgICAgIGVsOiBlbWJlZERpdixcbiAgICAgICAgcmVuZGVyIChjcmVhdGVFbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoRW1iZWRJdGVtLCB7XG4gICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgIG1ldGE6IGRhdGFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gIH1cbiAgYXN5bmMgZ2V0TWV0YUluZm8gKHVybCkge1xuICAgIHVybCA9IGVuY29kZVVSSUNvbXBvbmVudCh1cmwpXG4gICAgY29uc3QgcmVxdWVzdFVybCA9IGAke3RoaXMub3B0aW9ucy5tZXRhQXBpfS9lbWJlZHM/dXJsPSR7dXJsfWBcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChyZXF1ZXN0VXJsKVxuICAgIHJldHVybiByZXNwb25zZVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVybEVtYmVkc1xuIiwiaW1wb3J0IFF1aWxsIGZyb20gJ3F1aWxsJ1xuY29uc3QgQmxvY2tFbWJlZCA9IFF1aWxsLmltcG9ydCgnYmxvdHMvYmxvY2svZW1iZWQnKVxuXG5jbGFzcyBVcmxFbWJlZCBleHRlbmRzIEJsb2NrRW1iZWQge1xuICBzdGF0aWMgY3JlYXRlICh7dXJsLCBodG1sfSkge1xuICAgIGxldCBub2RlID0gc3VwZXIuY3JlYXRlKClcbiAgICBub2RlLnNldEF0dHJpYnV0ZSgnZGF0YS11cmwtZW1iZWQnLCB1cmwpXG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsICdmYWxzZScpXG4gICAgbm9kZS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGh0bWwpXG4gICAgcmV0dXJuIG5vZGVcbiAgfVxuXG4gIHN0YXRpYyB2YWx1ZSAobm9kZSkge1xuICAgIHJldHVybiBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS11cmwtZW1iZWQnKVxuICB9XG59XG5VcmxFbWJlZC5ibG90TmFtZSA9ICd1cmxFbWJlZCdcblVybEVtYmVkLmNsYXNzTmFtZSA9ICd1cmwtZW1iZWQnXG5VcmxFbWJlZC50YWdOYW1lID0gJ2RpdidcblxuZXhwb3J0IGRlZmF1bHQgVXJsRW1iZWRcbiIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIlBhcmNobWVudFwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJQYXJjaG1lbnRcIl0gPSBmYWN0b3J5KCk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDkpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUGFyY2htZW50RXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBhcmNobWVudEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBhcmNobWVudEVycm9yKG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgbWVzc2FnZSA9ICdbUGFyY2htZW50XSAnICsgbWVzc2FnZTtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtZXNzYWdlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgX3RoaXMubmFtZSA9IF90aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFBhcmNobWVudEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0cy5QYXJjaG1lbnRFcnJvciA9IFBhcmNobWVudEVycm9yO1xudmFyIGF0dHJpYnV0ZXMgPSB7fTtcbnZhciBjbGFzc2VzID0ge307XG52YXIgdGFncyA9IHt9O1xudmFyIHR5cGVzID0ge307XG5leHBvcnRzLkRBVEFfS0VZID0gJ19fYmxvdCc7XG52YXIgU2NvcGU7XG4oZnVuY3Rpb24gKFNjb3BlKSB7XG4gICAgU2NvcGVbU2NvcGVbXCJUWVBFXCJdID0gM10gPSBcIlRZUEVcIjtcbiAgICBTY29wZVtTY29wZVtcIkxFVkVMXCJdID0gMTJdID0gXCJMRVZFTFwiO1xuICAgIFNjb3BlW1Njb3BlW1wiQVRUUklCVVRFXCJdID0gMTNdID0gXCJBVFRSSUJVVEVcIjtcbiAgICBTY29wZVtTY29wZVtcIkJMT1RcIl0gPSAxNF0gPSBcIkJMT1RcIjtcbiAgICBTY29wZVtTY29wZVtcIklOTElORVwiXSA9IDddID0gXCJJTkxJTkVcIjtcbiAgICBTY29wZVtTY29wZVtcIkJMT0NLXCJdID0gMTFdID0gXCJCTE9DS1wiO1xuICAgIFNjb3BlW1Njb3BlW1wiQkxPQ0tfQkxPVFwiXSA9IDEwXSA9IFwiQkxPQ0tfQkxPVFwiO1xuICAgIFNjb3BlW1Njb3BlW1wiSU5MSU5FX0JMT1RcIl0gPSA2XSA9IFwiSU5MSU5FX0JMT1RcIjtcbiAgICBTY29wZVtTY29wZVtcIkJMT0NLX0FUVFJJQlVURVwiXSA9IDldID0gXCJCTE9DS19BVFRSSUJVVEVcIjtcbiAgICBTY29wZVtTY29wZVtcIklOTElORV9BVFRSSUJVVEVcIl0gPSA1XSA9IFwiSU5MSU5FX0FUVFJJQlVURVwiO1xuICAgIFNjb3BlW1Njb3BlW1wiQU5ZXCJdID0gMTVdID0gXCJBTllcIjtcbn0pKFNjb3BlID0gZXhwb3J0cy5TY29wZSB8fCAoZXhwb3J0cy5TY29wZSA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGUoaW5wdXQsIHZhbHVlKSB7XG4gICAgdmFyIG1hdGNoID0gcXVlcnkoaW5wdXQpO1xuICAgIGlmIChtYXRjaCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJjaG1lbnRFcnJvcihcIlVuYWJsZSB0byBjcmVhdGUgXCIgKyBpbnB1dCArIFwiIGJsb3RcIik7XG4gICAgfVxuICAgIHZhciBCbG90Q2xhc3MgPSBtYXRjaDtcbiAgICB2YXIgbm9kZSA9IFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpbnB1dCBpbnN0YW5jZW9mIE5vZGUgfHwgaW5wdXRbJ25vZGVUeXBlJ10gPT09IE5vZGUuVEVYVF9OT0RFID8gaW5wdXQgOiBCbG90Q2xhc3MuY3JlYXRlKHZhbHVlKTtcbiAgICByZXR1cm4gbmV3IEJsb3RDbGFzcyhub2RlLCB2YWx1ZSk7XG59XG5leHBvcnRzLmNyZWF0ZSA9IGNyZWF0ZTtcbmZ1bmN0aW9uIGZpbmQobm9kZSwgYnViYmxlKSB7XG4gICAgaWYgKGJ1YmJsZSA9PT0gdm9pZCAwKSB7IGJ1YmJsZSA9IGZhbHNlOyB9XG4gICAgaWYgKG5vZGUgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmIChub2RlW2V4cG9ydHMuREFUQV9LRVldICE9IG51bGwpXG4gICAgICAgIHJldHVybiBub2RlW2V4cG9ydHMuREFUQV9LRVldLmJsb3Q7XG4gICAgaWYgKGJ1YmJsZSlcbiAgICAgICAgcmV0dXJuIGZpbmQobm9kZS5wYXJlbnROb2RlLCBidWJibGUpO1xuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0cy5maW5kID0gZmluZDtcbmZ1bmN0aW9uIHF1ZXJ5KHF1ZXJ5LCBzY29wZSkge1xuICAgIGlmIChzY29wZSA9PT0gdm9pZCAwKSB7IHNjb3BlID0gU2NvcGUuQU5ZOyB9XG4gICAgdmFyIG1hdGNoO1xuICAgIGlmICh0eXBlb2YgcXVlcnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1hdGNoID0gdHlwZXNbcXVlcnldIHx8IGF0dHJpYnV0ZXNbcXVlcnldO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgfVxuICAgIGVsc2UgaWYgKHF1ZXJ5IGluc3RhbmNlb2YgVGV4dCB8fCBxdWVyeVsnbm9kZVR5cGUnXSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgbWF0Y2ggPSB0eXBlc1sndGV4dCddO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcXVlcnkgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmIChxdWVyeSAmIFNjb3BlLkxFVkVMICYgU2NvcGUuQkxPQ0spIHtcbiAgICAgICAgICAgIG1hdGNoID0gdHlwZXNbJ2Jsb2NrJ107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocXVlcnkgJiBTY29wZS5MRVZFTCAmIFNjb3BlLklOTElORSkge1xuICAgICAgICAgICAgbWF0Y2ggPSB0eXBlc1snaW5saW5lJ107XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAocXVlcnkgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICB2YXIgbmFtZXMgPSAocXVlcnkuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKS5zcGxpdCgvXFxzKy8pO1xuICAgICAgICBmb3IgKHZhciBpIGluIG5hbWVzKSB7XG4gICAgICAgICAgICBtYXRjaCA9IGNsYXNzZXNbbmFtZXNbaV1dO1xuICAgICAgICAgICAgaWYgKG1hdGNoKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG1hdGNoID0gbWF0Y2ggfHwgdGFnc1txdWVyeS50YWdOYW1lXTtcbiAgICB9XG4gICAgaWYgKG1hdGNoID09IG51bGwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoc2NvcGUgJiBTY29wZS5MRVZFTCAmIG1hdGNoLnNjb3BlICYmIHNjb3BlICYgU2NvcGUuVFlQRSAmIG1hdGNoLnNjb3BlKVxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnRzLnF1ZXJ5ID0gcXVlcnk7XG5mdW5jdGlvbiByZWdpc3RlcigpIHtcbiAgICB2YXIgRGVmaW5pdGlvbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBEZWZpbml0aW9uc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBpZiAoRGVmaW5pdGlvbnMubGVuZ3RoID4gMSkge1xuICAgICAgICByZXR1cm4gRGVmaW5pdGlvbnMubWFwKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVnaXN0ZXIoZCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgRGVmaW5pdGlvbiA9IERlZmluaXRpb25zWzBdO1xuICAgIGlmICh0eXBlb2YgRGVmaW5pdGlvbi5ibG90TmFtZSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIERlZmluaXRpb24uYXR0ck5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJjaG1lbnRFcnJvcignSW52YWxpZCBkZWZpbml0aW9uJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKERlZmluaXRpb24uYmxvdE5hbWUgPT09ICdhYnN0cmFjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcmNobWVudEVycm9yKCdDYW5ub3QgcmVnaXN0ZXIgYWJzdHJhY3QgY2xhc3MnKTtcbiAgICB9XG4gICAgdHlwZXNbRGVmaW5pdGlvbi5ibG90TmFtZSB8fCBEZWZpbml0aW9uLmF0dHJOYW1lXSA9IERlZmluaXRpb247XG4gICAgaWYgKHR5cGVvZiBEZWZpbml0aW9uLmtleU5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGF0dHJpYnV0ZXNbRGVmaW5pdGlvbi5rZXlOYW1lXSA9IERlZmluaXRpb247XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoRGVmaW5pdGlvbi5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgY2xhc3Nlc1tEZWZpbml0aW9uLmNsYXNzTmFtZV0gPSBEZWZpbml0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChEZWZpbml0aW9uLnRhZ05hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoRGVmaW5pdGlvbi50YWdOYW1lKSkge1xuICAgICAgICAgICAgICAgIERlZmluaXRpb24udGFnTmFtZSA9IERlZmluaXRpb24udGFnTmFtZS5tYXAoZnVuY3Rpb24gKHRhZ05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhZ05hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIERlZmluaXRpb24udGFnTmFtZSA9IERlZmluaXRpb24udGFnTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRhZ05hbWVzID0gQXJyYXkuaXNBcnJheShEZWZpbml0aW9uLnRhZ05hbWUpID8gRGVmaW5pdGlvbi50YWdOYW1lIDogW0RlZmluaXRpb24udGFnTmFtZV07XG4gICAgICAgICAgICB0YWdOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFnc1t0YWddID09IG51bGwgfHwgRGVmaW5pdGlvbi5jbGFzc05hbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0YWdzW3RhZ10gPSBEZWZpbml0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBEZWZpbml0aW9uO1xufVxuZXhwb3J0cy5yZWdpc3RlciA9IHJlZ2lzdGVyO1xuXG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBBdHRyaWJ1dG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEF0dHJpYnV0b3IoYXR0ck5hbWUsIGtleU5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdGhpcy5hdHRyTmFtZSA9IGF0dHJOYW1lO1xuICAgICAgICB0aGlzLmtleU5hbWUgPSBrZXlOYW1lO1xuICAgICAgICB2YXIgYXR0cmlidXRlQml0ID0gUmVnaXN0cnkuU2NvcGUuVFlQRSAmIFJlZ2lzdHJ5LlNjb3BlLkFUVFJJQlVURTtcbiAgICAgICAgaWYgKG9wdGlvbnMuc2NvcGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gSWdub3JlIHR5cGUgYml0cywgZm9yY2UgYXR0cmlidXRlIGJpdFxuICAgICAgICAgICAgdGhpcy5zY29wZSA9IChvcHRpb25zLnNjb3BlICYgUmVnaXN0cnkuU2NvcGUuTEVWRUwpIHwgYXR0cmlidXRlQml0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLkFUVFJJQlVURTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy53aGl0ZWxpc3QgIT0gbnVsbClcbiAgICAgICAgICAgIHRoaXMud2hpdGVsaXN0ID0gb3B0aW9ucy53aGl0ZWxpc3Q7XG4gICAgfVxuICAgIEF0dHJpYnV0b3Iua2V5cyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiBbXS5tYXAuY2FsbChub2RlLmF0dHJpYnV0ZXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5uYW1lO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEF0dHJpYnV0b3IucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChub2RlLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuY2FuQWRkKG5vZGUsIHZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUodGhpcy5rZXlOYW1lLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgQXR0cmlidXRvci5wcm90b3R5cGUuY2FuQWRkID0gZnVuY3Rpb24gKG5vZGUsIHZhbHVlKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IFJlZ2lzdHJ5LnF1ZXJ5KG5vZGUsIFJlZ2lzdHJ5LlNjb3BlLkJMT1QgJiAodGhpcy5zY29wZSB8IFJlZ2lzdHJ5LlNjb3BlLlRZUEUpKTtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLndoaXRlbGlzdCA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53aGl0ZWxpc3QuaW5kZXhPZih2YWx1ZS5yZXBsYWNlKC9bXCInXS9nLCAnJykpID4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53aGl0ZWxpc3QuaW5kZXhPZih2YWx1ZSkgPiAtMTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXR0cmlidXRvci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUodGhpcy5rZXlOYW1lKTtcbiAgICB9O1xuICAgIEF0dHJpYnV0b3IucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUodGhpcy5rZXlOYW1lKTtcbiAgICAgICAgaWYgKHRoaXMuY2FuQWRkKG5vZGUsIHZhbHVlKSAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9O1xuICAgIHJldHVybiBBdHRyaWJ1dG9yO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEF0dHJpYnV0b3I7XG5cblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBsaW5rZWRfbGlzdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG52YXIgc2hhZG93XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBDb250YWluZXJCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDb250YWluZXJCbG90LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbnRhaW5lckJsb3QoZG9tTm9kZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkb21Ob2RlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5idWlsZCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmFwcGVuZENoaWxkID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0QmVmb3JlKG90aGVyKTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5hdHRhY2guY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgY2hpbGQuYXR0YWNoKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBuZXcgbGlua2VkX2xpc3RfMS5kZWZhdWx0KCk7XG4gICAgICAgIC8vIE5lZWQgdG8gYmUgcmV2ZXJzZWQgZm9yIGlmIERPTSBub2RlcyBhbHJlYWR5IGluIG9yZGVyXG4gICAgICAgIFtdLnNsaWNlXG4gICAgICAgICAgICAuY2FsbCh0aGlzLmRvbU5vZGUuY2hpbGROb2RlcylcbiAgICAgICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IG1ha2VCbG90KG5vZGUpO1xuICAgICAgICAgICAgICAgIF90aGlzLmluc2VydEJlZm9yZShjaGlsZCwgX3RoaXMuY2hpbGRyZW4uaGVhZCB8fCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBSZWdpc3RyeS5QYXJjaG1lbnRFcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmRlbGV0ZUF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAwICYmIGxlbmd0aCA9PT0gdGhpcy5sZW5ndGgoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoQXQoaW5kZXgsIGxlbmd0aCwgZnVuY3Rpb24gKGNoaWxkLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgICAgICAgY2hpbGQuZGVsZXRlQXQob2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmRlc2NlbmRhbnQgPSBmdW5jdGlvbiAoY3JpdGVyaWEsIGluZGV4KSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuY2hpbGRyZW4uZmluZChpbmRleCksIGNoaWxkID0gX2FbMF0sIG9mZnNldCA9IF9hWzFdO1xuICAgICAgICBpZiAoKGNyaXRlcmlhLmJsb3ROYW1lID09IG51bGwgJiYgY3JpdGVyaWEoY2hpbGQpKSB8fFxuICAgICAgICAgICAgKGNyaXRlcmlhLmJsb3ROYW1lICE9IG51bGwgJiYgY2hpbGQgaW5zdGFuY2VvZiBjcml0ZXJpYSkpIHtcbiAgICAgICAgICAgIHJldHVybiBbY2hpbGQsIG9mZnNldF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2hpbGQgaW5zdGFuY2VvZiBDb250YWluZXJCbG90KSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGQuZGVzY2VuZGFudChjcml0ZXJpYSwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbbnVsbCwgLTFdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5kZXNjZW5kYW50cyA9IGZ1bmN0aW9uIChjcml0ZXJpYSwgaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkgeyBpbmRleCA9IDA7IH1cbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gdm9pZCAwKSB7IGxlbmd0aCA9IE51bWJlci5NQVhfVkFMVUU7IH1cbiAgICAgICAgdmFyIGRlc2NlbmRhbnRzID0gW107XG4gICAgICAgIHZhciBsZW5ndGhMZWZ0ID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2hBdChpbmRleCwgbGVuZ3RoLCBmdW5jdGlvbiAoY2hpbGQsIGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICgoY3JpdGVyaWEuYmxvdE5hbWUgPT0gbnVsbCAmJiBjcml0ZXJpYShjaGlsZCkpIHx8XG4gICAgICAgICAgICAgICAgKGNyaXRlcmlhLmJsb3ROYW1lICE9IG51bGwgJiYgY2hpbGQgaW5zdGFuY2VvZiBjcml0ZXJpYSkpIHtcbiAgICAgICAgICAgICAgICBkZXNjZW5kYW50cy5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIENvbnRhaW5lckJsb3QpIHtcbiAgICAgICAgICAgICAgICBkZXNjZW5kYW50cyA9IGRlc2NlbmRhbnRzLmNvbmNhdChjaGlsZC5kZXNjZW5kYW50cyhjcml0ZXJpYSwgaW5kZXgsIGxlbmd0aExlZnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxlbmd0aExlZnQgLT0gbGVuZ3RoO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRlc2NlbmRhbnRzO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuZGV0YWNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICBjaGlsZC5kZXRhY2goKTtcbiAgICAgICAgfSk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGV0YWNoLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5mb3JtYXRBdCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2hBdChpbmRleCwgbGVuZ3RoLCBmdW5jdGlvbiAoY2hpbGQsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjaGlsZC5mb3JtYXRBdChvZmZzZXQsIGxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmluc2VydEF0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuY2hpbGRyZW4uZmluZChpbmRleCksIGNoaWxkID0gX2FbMF0sIG9mZnNldCA9IF9hWzFdO1xuICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGNoaWxkLmluc2VydEF0KG9mZnNldCwgdmFsdWUsIGRlZik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYmxvdCA9IGRlZiA9PSBudWxsID8gUmVnaXN0cnkuY3JlYXRlKCd0ZXh0JywgdmFsdWUpIDogUmVnaXN0cnkuY3JlYXRlKHZhbHVlLCBkZWYpO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChibG90KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlID0gZnVuY3Rpb24gKGNoaWxkQmxvdCwgcmVmQmxvdCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0aWNzLmFsbG93ZWRDaGlsZHJlbiAhPSBudWxsICYmXG4gICAgICAgICAgICAhdGhpcy5zdGF0aWNzLmFsbG93ZWRDaGlsZHJlbi5zb21lKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZEJsb3QgaW5zdGFuY2VvZiBjaGlsZDtcbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVnaXN0cnkuUGFyY2htZW50RXJyb3IoXCJDYW5ub3QgaW5zZXJ0IFwiICsgY2hpbGRCbG90LnN0YXRpY3MuYmxvdE5hbWUgKyBcIiBpbnRvIFwiICsgdGhpcy5zdGF0aWNzLmJsb3ROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZEJsb3QuaW5zZXJ0SW50byh0aGlzLCByZWZCbG90KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBjaGlsZCkge1xuICAgICAgICAgICAgcmV0dXJuIG1lbW8gKyBjaGlsZC5sZW5ndGgoKTtcbiAgICAgICAgfSwgMCk7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5tb3ZlQ2hpbGRyZW4gPSBmdW5jdGlvbiAodGFyZ2V0UGFyZW50LCByZWZOb2RlKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIHRhcmdldFBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHJlZk5vZGUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLm9wdGltaXplID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5vcHRpbWl6ZS5jYWxsKHRoaXMsIGNvbnRleHQpO1xuICAgICAgICBpZiAodGhpcy5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRpY3MuZGVmYXVsdENoaWxkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBSZWdpc3RyeS5jcmVhdGUodGhpcy5zdGF0aWNzLmRlZmF1bHRDaGlsZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICAgICAgICAgICAgY2hpbGQub3B0aW1pemUoY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5wYXRoID0gZnVuY3Rpb24gKGluZGV4LCBpbmNsdXNpdmUpIHtcbiAgICAgICAgaWYgKGluY2x1c2l2ZSA9PT0gdm9pZCAwKSB7IGluY2x1c2l2ZSA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBfYSA9IHRoaXMuY2hpbGRyZW4uZmluZChpbmRleCwgaW5jbHVzaXZlKSwgY2hpbGQgPSBfYVswXSwgb2Zmc2V0ID0gX2FbMV07XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IFtbdGhpcywgaW5kZXhdXTtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgQ29udGFpbmVyQmxvdCkge1xuICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uLmNvbmNhdChjaGlsZC5wYXRoKG9mZnNldCwgaW5jbHVzaXZlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2hpbGQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcG9zaXRpb24ucHVzaChbY2hpbGQsIG9mZnNldF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb3NpdGlvbjtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucmVtb3ZlKGNoaWxkKTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBDb250YWluZXJCbG90KSB7XG4gICAgICAgICAgICB0YXJnZXQubW92ZUNoaWxkcmVuKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUucmVwbGFjZS5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIChpbmRleCwgZm9yY2UpIHtcbiAgICAgICAgaWYgKGZvcmNlID09PSB2b2lkIDApIHsgZm9yY2UgPSBmYWxzZTsgfVxuICAgICAgICBpZiAoIWZvcmNlKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMubGVuZ3RoKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWZ0ZXIgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShhZnRlciwgdGhpcy5uZXh0KTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoQXQoaW5kZXgsIHRoaXMubGVuZ3RoKCksIGZ1bmN0aW9uIChjaGlsZCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGNoaWxkID0gY2hpbGQuc3BsaXQob2Zmc2V0LCBmb3JjZSk7XG4gICAgICAgICAgICBhZnRlci5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYWZ0ZXI7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS51bndyYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubW92ZUNoaWxkcmVuKHRoaXMucGFyZW50LCB0aGlzLm5leHQpO1xuICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgYWRkZWROb2RlcyA9IFtdO1xuICAgICAgICB2YXIgcmVtb3ZlZE5vZGVzID0gW107XG4gICAgICAgIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICAgICAgaWYgKG11dGF0aW9uLnRhcmdldCA9PT0gX3RoaXMuZG9tTm9kZSAmJiBtdXRhdGlvbi50eXBlID09PSAnY2hpbGRMaXN0Jykge1xuICAgICAgICAgICAgICAgIGFkZGVkTm9kZXMucHVzaC5hcHBseShhZGRlZE5vZGVzLCBtdXRhdGlvbi5hZGRlZE5vZGVzKTtcbiAgICAgICAgICAgICAgICByZW1vdmVkTm9kZXMucHVzaC5hcHBseShyZW1vdmVkTm9kZXMsIG11dGF0aW9uLnJlbW92ZWROb2Rlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZW1vdmVkTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgbm9kZSBoYXMgYWN0dWFsbHkgYmVlbiByZW1vdmVkXG4gICAgICAgICAgICAvLyBPbmUgZXhjZXB0aW9uIGlzIENocm9tZSBkb2VzIG5vdCBpbW1lZGlhdGVseSByZW1vdmUgSUZSQU1Fc1xuICAgICAgICAgICAgLy8gZnJvbSBET00gYnV0IE11dGF0aW9uUmVjb3JkIGlzIGNvcnJlY3QgaW4gaXRzIHJlcG9ydGVkIHJlbW92YWxcbiAgICAgICAgICAgIGlmIChub2RlLnBhcmVudE5vZGUgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBub2RlLnRhZ05hbWUgIT09ICdJRlJBTUUnICYmXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlKSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTkVEX0JZKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJsb3QgPSBSZWdpc3RyeS5maW5kKG5vZGUpO1xuICAgICAgICAgICAgaWYgKGJsb3QgPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAoYmxvdC5kb21Ob2RlLnBhcmVudE5vZGUgPT0gbnVsbCB8fCBibG90LmRvbU5vZGUucGFyZW50Tm9kZSA9PT0gX3RoaXMuZG9tTm9kZSkge1xuICAgICAgICAgICAgICAgIGJsb3QuZGV0YWNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBhZGRlZE5vZGVzXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5wYXJlbnROb2RlID09IF90aGlzLmRvbU5vZGU7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgaWYgKGEgPT09IGIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICBpZiAoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgdmFyIHJlZkJsb3QgPSBudWxsO1xuICAgICAgICAgICAgaWYgKG5vZGUubmV4dFNpYmxpbmcgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlZkJsb3QgPSBSZWdpc3RyeS5maW5kKG5vZGUubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJsb3QgPSBtYWtlQmxvdChub2RlKTtcbiAgICAgICAgICAgIGlmIChibG90Lm5leHQgIT0gcmVmQmxvdCB8fCBibG90Lm5leHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChibG90LnBhcmVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGJsb3QucGFyZW50LnJlbW92ZUNoaWxkKF90aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5zZXJ0QmVmb3JlKGJsb3QsIHJlZkJsb3QgfHwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29udGFpbmVyQmxvdDtcbn0oc2hhZG93XzEuZGVmYXVsdCkpO1xuZnVuY3Rpb24gbWFrZUJsb3Qobm9kZSkge1xuICAgIHZhciBibG90ID0gUmVnaXN0cnkuZmluZChub2RlKTtcbiAgICBpZiAoYmxvdCA9PSBudWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBibG90ID0gUmVnaXN0cnkuY3JlYXRlKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBibG90ID0gUmVnaXN0cnkuY3JlYXRlKFJlZ2lzdHJ5LlNjb3BlLklOTElORSk7XG4gICAgICAgICAgICBbXS5zbGljZS5jYWxsKG5vZGUuY2hpbGROb2RlcykuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgYmxvdC5kb21Ob2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoYmxvdC5kb21Ob2RlLCBub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsb3QuYXR0YWNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJsb3Q7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBDb250YWluZXJCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYXR0cmlidXRvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBzdG9yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbnZhciBjb250YWluZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIEZvcm1hdEJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZvcm1hdEJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRm9ybWF0QmxvdChkb21Ob2RlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRvbU5vZGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmF0dHJpYnV0ZXMgPSBuZXcgc3RvcmVfMS5kZWZhdWx0KF90aGlzLmRvbU5vZGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZvcm1hdEJsb3QuZm9ybWF0cyA9IGZ1bmN0aW9uIChkb21Ob2RlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy50YWdOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnRhZ05hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9tTm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEZvcm1hdEJsb3QucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gUmVnaXN0cnkucXVlcnkobmFtZSk7XG4gICAgICAgIGlmIChmb3JtYXQgaW5zdGFuY2VvZiBhdHRyaWJ1dG9yXzEuZGVmYXVsdCkge1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmF0dHJpYnV0ZShmb3JtYXQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCAhPSBudWxsICYmIChuYW1lICE9PSB0aGlzLnN0YXRpY3MuYmxvdE5hbWUgfHwgdGhpcy5mb3JtYXRzKClbbmFtZV0gIT09IHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVdpdGgobmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGb3JtYXRCbG90LnByb3RvdHlwZS5mb3JtYXRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZm9ybWF0cyA9IHRoaXMuYXR0cmlidXRlcy52YWx1ZXMoKTtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuc3RhdGljcy5mb3JtYXRzKHRoaXMuZG9tTm9kZSk7XG4gICAgICAgIGlmIChmb3JtYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgZm9ybWF0c1t0aGlzLnN0YXRpY3MuYmxvdE5hbWVdID0gZm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXRzO1xuICAgIH07XG4gICAgRm9ybWF0QmxvdC5wcm90b3R5cGUucmVwbGFjZVdpdGggPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gX3N1cGVyLnByb3RvdHlwZS5yZXBsYWNlV2l0aC5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmNvcHkocmVwbGFjZW1lbnQpO1xuICAgICAgICByZXR1cm4gcmVwbGFjZW1lbnQ7XG4gICAgfTtcbiAgICBGb3JtYXRCbG90LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcywgbXV0YXRpb25zLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKG11dGF0aW9ucy5zb21lKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIG11dGF0aW9uLnRhcmdldCA9PT0gX3RoaXMuZG9tTm9kZSAmJiBtdXRhdGlvbi50eXBlID09PSAnYXR0cmlidXRlcyc7XG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuYnVpbGQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRm9ybWF0QmxvdC5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IF9zdXBlci5wcm90b3R5cGUud3JhcC5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBGb3JtYXRCbG90ICYmIHdyYXBwZXIuc3RhdGljcy5zY29wZSA9PT0gdGhpcy5zdGF0aWNzLnNjb3BlKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMubW92ZSh3cmFwcGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9O1xuICAgIHJldHVybiBGb3JtYXRCbG90O1xufShjb250YWluZXJfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBGb3JtYXRCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgc2hhZG93XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBMZWFmQmxvdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTGVhZkJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTGVhZkJsb3QoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgTGVhZkJsb3QudmFsdWUgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIExlYWZCbG90LnByb3RvdHlwZS5pbmRleCA9IGZ1bmN0aW9uIChub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuZG9tTm9kZSA9PT0gbm9kZSB8fFxuICAgICAgICAgICAgdGhpcy5kb21Ob2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5vZGUpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlkpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihvZmZzZXQsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIExlYWZCbG90LnByb3RvdHlwZS5wb3NpdGlvbiA9IGZ1bmN0aW9uIChpbmRleCwgaW5jbHVzaXZlKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSBbXS5pbmRleE9mLmNhbGwodGhpcy5wYXJlbnQuZG9tTm9kZS5jaGlsZE5vZGVzLCB0aGlzLmRvbU5vZGUpO1xuICAgICAgICBpZiAoaW5kZXggPiAwKVxuICAgICAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgIHJldHVybiBbdGhpcy5wYXJlbnQuZG9tTm9kZSwgb2Zmc2V0XTtcbiAgICB9O1xuICAgIExlYWZCbG90LnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9hID0ge30sIF9hW3RoaXMuc3RhdGljcy5ibG90TmFtZV0gPSB0aGlzLnN0YXRpY3MudmFsdWUodGhpcy5kb21Ob2RlKSB8fCB0cnVlLCBfYTtcbiAgICAgICAgdmFyIF9hO1xuICAgIH07XG4gICAgTGVhZkJsb3Quc2NvcGUgPSBSZWdpc3RyeS5TY29wZS5JTkxJTkVfQkxPVDtcbiAgICByZXR1cm4gTGVhZkJsb3Q7XG59KHNoYWRvd18xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IExlYWZCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBTaGFkb3dCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNoYWRvd0Jsb3QoZG9tTm9kZSkge1xuICAgICAgICB0aGlzLmRvbU5vZGUgPSBkb21Ob2RlO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0gPSB7IGJsb3Q6IHRoaXMgfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNoYWRvd0Jsb3QucHJvdG90eXBlLCBcInN0YXRpY3NcIiwge1xuICAgICAgICAvLyBIYWNrIGZvciBhY2Nlc3NpbmcgaW5oZXJpdGVkIHN0YXRpYyBtZXRob2RzXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFNoYWRvd0Jsb3QuY3JlYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnRhZ05hbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlZ2lzdHJ5LlBhcmNobWVudEVycm9yKCdCbG90IGRlZmluaXRpb24gbWlzc2luZyB0YWdOYW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5vZGU7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudGFnTmFtZSkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludCh2YWx1ZSkudG9TdHJpbmcoKSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnRhZ05hbWVbdmFsdWUgLSAxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnRhZ05hbWUuaW5kZXhPZih2YWx1ZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMudGFnTmFtZVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnRhZ05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgbm9kZS5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsID0gdGhpcy5wYXJlbnQuc2Nyb2xsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRvbU5vZGUgPSB0aGlzLmRvbU5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIFJlZ2lzdHJ5LmNyZWF0ZShkb21Ob2RlKTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmRldGFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICE9IG51bGwpXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBkZWxldGUgdGhpcy5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmRlbGV0ZUF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGJsb3QgPSB0aGlzLmlzb2xhdGUoaW5kZXgsIGxlbmd0aCk7XG4gICAgICAgIGJsb3QucmVtb3ZlKCk7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5mb3JtYXRBdCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgYmxvdCA9IHRoaXMuaXNvbGF0ZShpbmRleCwgbGVuZ3RoKTtcbiAgICAgICAgaWYgKFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkJMT1QpICE9IG51bGwgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIGJsb3Qud3JhcChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoUmVnaXN0cnkucXVlcnkobmFtZSwgUmVnaXN0cnkuU2NvcGUuQVRUUklCVVRFKSAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBSZWdpc3RyeS5jcmVhdGUodGhpcy5zdGF0aWNzLnNjb3BlKTtcbiAgICAgICAgICAgIGJsb3Qud3JhcChwYXJlbnRfMSk7XG4gICAgICAgICAgICBwYXJlbnRfMS5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5pbnNlcnRBdCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUsIGRlZikge1xuICAgICAgICB2YXIgYmxvdCA9IGRlZiA9PSBudWxsID8gUmVnaXN0cnkuY3JlYXRlKCd0ZXh0JywgdmFsdWUpIDogUmVnaXN0cnkuY3JlYXRlKHZhbHVlLCBkZWYpO1xuICAgICAgICB2YXIgcmVmID0gdGhpcy5zcGxpdChpbmRleCk7XG4gICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShibG90LCByZWYpO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuaW5zZXJ0SW50byA9IGZ1bmN0aW9uIChwYXJlbnRCbG90LCByZWZCbG90KSB7XG4gICAgICAgIGlmIChyZWZCbG90ID09PSB2b2lkIDApIHsgcmVmQmxvdCA9IG51bGw7IH1cbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LmNoaWxkcmVuLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVmRG9tTm9kZSA9IG51bGw7XG4gICAgICAgIHBhcmVudEJsb3QuY2hpbGRyZW4uaW5zZXJ0QmVmb3JlKHRoaXMsIHJlZkJsb3QpO1xuICAgICAgICBpZiAocmVmQmxvdCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZWZEb21Ob2RlID0gcmVmQmxvdC5kb21Ob2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRvbU5vZGUucGFyZW50Tm9kZSAhPSBwYXJlbnRCbG90LmRvbU5vZGUgfHxcbiAgICAgICAgICAgIHRoaXMuZG9tTm9kZS5uZXh0U2libGluZyAhPSByZWZEb21Ob2RlKSB7XG4gICAgICAgICAgICBwYXJlbnRCbG90LmRvbU5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuZG9tTm9kZSwgcmVmRG9tTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRCbG90O1xuICAgICAgICB0aGlzLmF0dGFjaCgpO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuaXNvbGF0ZSA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLnNwbGl0KGluZGV4KTtcbiAgICAgICAgdGFyZ2V0LnNwbGl0KGxlbmd0aCk7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUub2Zmc2V0ID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgaWYgKHJvb3QgPT09IHZvaWQgMCkgeyByb290ID0gdGhpcy5wYXJlbnQ7IH1cbiAgICAgICAgaWYgKHRoaXMucGFyZW50ID09IG51bGwgfHwgdGhpcyA9PSByb290KVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5jaGlsZHJlbi5vZmZzZXQodGhpcykgKyB0aGlzLnBhcmVudC5vZmZzZXQocm9vdCk7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5vcHRpbWl6ZSA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIC8vIFRPRE8gY2xlYW4gdXAgb25jZSB3ZSB1c2UgV2Vha01hcFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICh0aGlzLmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucztcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5kb21Ob2RlLnBhcmVudE5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5kb21Ob2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5kb21Ob2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRldGFjaCgpO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRhcmdldC5wYXJlbnQgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGFyZ2V0LnBhcmVudC5pbnNlcnRCZWZvcmUodGhpcywgdGFyZ2V0Lm5leHQpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlKCk7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5yZXBsYWNlV2l0aCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgPyBSZWdpc3RyeS5jcmVhdGUobmFtZSwgdmFsdWUpIDogbmFtZTtcbiAgICAgICAgcmVwbGFjZW1lbnQucmVwbGFjZSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2VtZW50O1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiAoaW5kZXgsIGZvcmNlKSB7XG4gICAgICAgIHJldHVybiBpbmRleCA9PT0gMCA/IHRoaXMgOiB0aGlzLm5leHQ7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIC8vIE5vdGhpbmcgdG8gZG8gYnkgZGVmYXVsdFxuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyA/IFJlZ2lzdHJ5LmNyZWF0ZShuYW1lLCB2YWx1ZSkgOiBuYW1lO1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKHdyYXBwZXIsIHRoaXMubmV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LmJsb3ROYW1lID0gJ2Fic3RyYWN0JztcbiAgICByZXR1cm4gU2hhZG93QmxvdDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTaGFkb3dCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGF0dHJpYnV0b3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgY2xhc3NfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG52YXIgc3R5bGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIEF0dHJpYnV0b3JTdG9yZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBdHRyaWJ1dG9yU3RvcmUoZG9tTm9kZSkge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgdGhpcy5kb21Ob2RlID0gZG9tTm9kZTtcbiAgICAgICAgdGhpcy5idWlsZCgpO1xuICAgIH1cbiAgICBBdHRyaWJ1dG9yU3RvcmUucHJvdG90eXBlLmF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgICAgIC8vIHZlcmJcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlLmFkZCh0aGlzLmRvbU5vZGUsIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUudmFsdWUodGhpcy5kb21Ob2RlKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGUuYXR0ck5hbWVdID0gYXR0cmlidXRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGUuYXR0ck5hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZS5yZW1vdmUodGhpcy5kb21Ob2RlKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlLmF0dHJOYW1lXTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXR0cmlidXRvclN0b3JlLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gYXR0cmlidXRvcl8xLmRlZmF1bHQua2V5cyh0aGlzLmRvbU5vZGUpO1xuICAgICAgICB2YXIgY2xhc3NlcyA9IGNsYXNzXzEuZGVmYXVsdC5rZXlzKHRoaXMuZG9tTm9kZSk7XG4gICAgICAgIHZhciBzdHlsZXMgPSBzdHlsZV8xLmRlZmF1bHQua2V5cyh0aGlzLmRvbU5vZGUpO1xuICAgICAgICBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAuY29uY2F0KGNsYXNzZXMpXG4gICAgICAgICAgICAuY29uY2F0KHN0eWxlcylcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICB2YXIgYXR0ciA9IFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkFUVFJJQlVURSk7XG4gICAgICAgICAgICBpZiAoYXR0ciBpbnN0YW5jZW9mIGF0dHJpYnV0b3JfMS5kZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYXR0cmlidXRlc1thdHRyLmF0dHJOYW1lXSA9IGF0dHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQXR0cmlidXRvclN0b3JlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gX3RoaXMuYXR0cmlidXRlc1trZXldLnZhbHVlKF90aGlzLmRvbU5vZGUpO1xuICAgICAgICAgICAgdGFyZ2V0LmZvcm1hdChrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBBdHRyaWJ1dG9yU3RvcmUucHJvdG90eXBlLm1vdmUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY29weSh0YXJnZXQpO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgX3RoaXMuYXR0cmlidXRlc1trZXldLnJlbW92ZShfdGhpcy5kb21Ob2RlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuICAgIH07XG4gICAgQXR0cmlidXRvclN0b3JlLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmF0dHJpYnV0ZXMpLnJlZHVjZShmdW5jdGlvbiAoYXR0cmlidXRlcywgbmFtZSkge1xuICAgICAgICAgICAgYXR0cmlidXRlc1tuYW1lXSA9IF90aGlzLmF0dHJpYnV0ZXNbbmFtZV0udmFsdWUoX3RoaXMuZG9tTm9kZSk7XG4gICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgICAgICAgfSwge30pO1xuICAgIH07XG4gICAgcmV0dXJuIEF0dHJpYnV0b3JTdG9yZTtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBBdHRyaWJ1dG9yU3RvcmU7XG5cblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBhdHRyaWJ1dG9yXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuZnVuY3Rpb24gbWF0Y2gobm9kZSwgcHJlZml4KSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnO1xuICAgIHJldHVybiBjbGFzc05hbWUuc3BsaXQoL1xccysvKS5maWx0ZXIoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5hbWUuaW5kZXhPZihwcmVmaXggKyBcIi1cIikgPT09IDA7XG4gICAgfSk7XG59XG52YXIgQ2xhc3NBdHRyaWJ1dG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDbGFzc0F0dHJpYnV0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2xhc3NBdHRyaWJ1dG9yKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIENsYXNzQXR0cmlidXRvci5rZXlzID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIChub2RlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykuc3BsaXQoL1xccysvKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lXG4gICAgICAgICAgICAgICAgLnNwbGl0KCctJylcbiAgICAgICAgICAgICAgICAuc2xpY2UoMCwgLTEpXG4gICAgICAgICAgICAgICAgLmpvaW4oJy0nKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDbGFzc0F0dHJpYnV0b3IucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChub2RlLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuY2FuQWRkKG5vZGUsIHZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdGhpcy5yZW1vdmUobm9kZSk7XG4gICAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZCh0aGlzLmtleU5hbWUgKyBcIi1cIiArIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBDbGFzc0F0dHJpYnV0b3IucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gbWF0Y2gobm9kZSwgdGhpcy5rZXlOYW1lKTtcbiAgICAgICAgbWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICBub2RlLmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobm9kZS5jbGFzc0xpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ2xhc3NBdHRyaWJ1dG9yLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBtYXRjaChub2RlLCB0aGlzLmtleU5hbWUpWzBdIHx8ICcnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQuc2xpY2UodGhpcy5rZXlOYW1lLmxlbmd0aCArIDEpOyAvLyArMSBmb3IgaHlwaGVuXG4gICAgICAgIHJldHVybiB0aGlzLmNhbkFkZChub2RlLCB2YWx1ZSkgPyB2YWx1ZSA6ICcnO1xuICAgIH07XG4gICAgcmV0dXJuIENsYXNzQXR0cmlidXRvcjtcbn0oYXR0cmlidXRvcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IENsYXNzQXR0cmlidXRvcjtcblxuXG4vKioqLyB9KSxcbi8qIDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGF0dHJpYnV0b3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5mdW5jdGlvbiBjYW1lbGl6ZShuYW1lKSB7XG4gICAgdmFyIHBhcnRzID0gbmFtZS5zcGxpdCgnLScpO1xuICAgIHZhciByZXN0ID0gcGFydHNcbiAgICAgICAgLnNsaWNlKDEpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnRbMF0udG9VcHBlckNhc2UoKSArIHBhcnQuc2xpY2UoMSk7XG4gICAgfSlcbiAgICAgICAgLmpvaW4oJycpO1xuICAgIHJldHVybiBwYXJ0c1swXSArIHJlc3Q7XG59XG52YXIgU3R5bGVBdHRyaWJ1dG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdHlsZUF0dHJpYnV0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3R5bGVBdHRyaWJ1dG9yKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFN0eWxlQXR0cmlidXRvci5rZXlzID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIChub2RlLmdldEF0dHJpYnV0ZSgnc3R5bGUnKSB8fCAnJykuc3BsaXQoJzsnKS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgYXJyID0gdmFsdWUuc3BsaXQoJzonKTtcbiAgICAgICAgICAgIHJldHVybiBhcnJbMF0udHJpbSgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN0eWxlQXR0cmlidXRvci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG5vZGUsIHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5jYW5BZGQobm9kZSwgdmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIG5vZGUuc3R5bGVbY2FtZWxpemUodGhpcy5rZXlOYW1lKV0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBTdHlsZUF0dHJpYnV0b3IucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbm9kZS5zdHlsZVtjYW1lbGl6ZSh0aGlzLmtleU5hbWUpXSA9ICcnO1xuICAgICAgICBpZiAoIW5vZGUuZ2V0QXR0cmlidXRlKCdzdHlsZScpKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3R5bGVBdHRyaWJ1dG9yLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdmFyIHZhbHVlID0gbm9kZS5zdHlsZVtjYW1lbGl6ZSh0aGlzLmtleU5hbWUpXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FuQWRkKG5vZGUsIHZhbHVlKSA/IHZhbHVlIDogJyc7XG4gICAgfTtcbiAgICByZXR1cm4gU3R5bGVBdHRyaWJ1dG9yO1xufShhdHRyaWJ1dG9yXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gU3R5bGVBdHRyaWJ1dG9yO1xuXG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG5cbi8qKiovIH0pLFxuLyogMTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb250YWluZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG52YXIgZm9ybWF0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xudmFyIGxlYWZfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG52YXIgc2Nyb2xsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcbnZhciBpbmxpbmVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xudmFyIGJsb2NrXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcbnZhciBlbWJlZF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG52YXIgdGV4dF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG52YXIgYXR0cmlidXRvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBjbGFzc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcbnZhciBzdHlsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcbnZhciBzdG9yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbnZhciBSZWdpc3RyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgUGFyY2htZW50ID0ge1xuICAgIFNjb3BlOiBSZWdpc3RyeS5TY29wZSxcbiAgICBjcmVhdGU6IFJlZ2lzdHJ5LmNyZWF0ZSxcbiAgICBmaW5kOiBSZWdpc3RyeS5maW5kLFxuICAgIHF1ZXJ5OiBSZWdpc3RyeS5xdWVyeSxcbiAgICByZWdpc3RlcjogUmVnaXN0cnkucmVnaXN0ZXIsXG4gICAgQ29udGFpbmVyOiBjb250YWluZXJfMS5kZWZhdWx0LFxuICAgIEZvcm1hdDogZm9ybWF0XzEuZGVmYXVsdCxcbiAgICBMZWFmOiBsZWFmXzEuZGVmYXVsdCxcbiAgICBFbWJlZDogZW1iZWRfMS5kZWZhdWx0LFxuICAgIFNjcm9sbDogc2Nyb2xsXzEuZGVmYXVsdCxcbiAgICBCbG9jazogYmxvY2tfMS5kZWZhdWx0LFxuICAgIElubGluZTogaW5saW5lXzEuZGVmYXVsdCxcbiAgICBUZXh0OiB0ZXh0XzEuZGVmYXVsdCxcbiAgICBBdHRyaWJ1dG9yOiB7XG4gICAgICAgIEF0dHJpYnV0ZTogYXR0cmlidXRvcl8xLmRlZmF1bHQsXG4gICAgICAgIENsYXNzOiBjbGFzc18xLmRlZmF1bHQsXG4gICAgICAgIFN0eWxlOiBzdHlsZV8xLmRlZmF1bHQsXG4gICAgICAgIFN0b3JlOiBzdG9yZV8xLmRlZmF1bHQsXG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBQYXJjaG1lbnQ7XG5cblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIExpbmtlZExpc3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGlua2VkTGlzdCgpIHtcbiAgICAgICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIH1cbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBub2RlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgbm9kZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluc2VydEJlZm9yZShub2Rlc1swXSwgbnVsbCk7XG4gICAgICAgIGlmIChub2Rlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZC5hcHBseSh0aGlzLCBub2Rlcy5zbGljZSgxKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIGN1ciwgbmV4dCA9IHRoaXMuaXRlcmF0b3IoKTtcbiAgICAgICAgd2hpbGUgKChjdXIgPSBuZXh0KCkpKSB7XG4gICAgICAgICAgICBpZiAoY3VyID09PSBub2RlKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIChub2RlLCByZWZOb2RlKSB7XG4gICAgICAgIGlmICghbm9kZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbm9kZS5uZXh0ID0gcmVmTm9kZTtcbiAgICAgICAgaWYgKHJlZk5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgbm9kZS5wcmV2ID0gcmVmTm9kZS5wcmV2O1xuICAgICAgICAgICAgaWYgKHJlZk5vZGUucHJldiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVmTm9kZS5wcmV2Lm5leHQgPSBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVmTm9kZS5wcmV2ID0gbm9kZTtcbiAgICAgICAgICAgIGlmIChyZWZOb2RlID09PSB0aGlzLmhlYWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWQgPSBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMudGFpbCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnRhaWwubmV4dCA9IG5vZGU7XG4gICAgICAgICAgICBub2RlLnByZXYgPSB0aGlzLnRhaWw7XG4gICAgICAgICAgICB0aGlzLnRhaWwgPSBub2RlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbm9kZS5wcmV2ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZW5ndGggKz0gMTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLm9mZnNldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMCwgY3VyID0gdGhpcy5oZWFkO1xuICAgICAgICB3aGlsZSAoY3VyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjdXIgPT09IHRhcmdldClcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCArPSBjdXIubGVuZ3RoKCk7XG4gICAgICAgICAgICBjdXIgPSBjdXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBpZiAoIXRoaXMuY29udGFpbnMobm9kZSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChub2RlLnByZXYgIT0gbnVsbClcbiAgICAgICAgICAgIG5vZGUucHJldi5uZXh0ID0gbm9kZS5uZXh0O1xuICAgICAgICBpZiAobm9kZS5uZXh0ICE9IG51bGwpXG4gICAgICAgICAgICBub2RlLm5leHQucHJldiA9IG5vZGUucHJldjtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMuaGVhZClcbiAgICAgICAgICAgIHRoaXMuaGVhZCA9IG5vZGUubmV4dDtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMudGFpbClcbiAgICAgICAgICAgIHRoaXMudGFpbCA9IG5vZGUucHJldjtcbiAgICAgICAgdGhpcy5sZW5ndGggLT0gMTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLml0ZXJhdG9yID0gZnVuY3Rpb24gKGN1ck5vZGUpIHtcbiAgICAgICAgaWYgKGN1ck5vZGUgPT09IHZvaWQgMCkgeyBjdXJOb2RlID0gdGhpcy5oZWFkOyB9XG4gICAgICAgIC8vIFRPRE8gdXNlIHlpZWxkIHdoZW4gd2UgY2FuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmV0ID0gY3VyTm9kZTtcbiAgICAgICAgICAgIGlmIChjdXJOb2RlICE9IG51bGwpXG4gICAgICAgICAgICAgICAgY3VyTm9kZSA9IGN1ck5vZGUubmV4dDtcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKGluZGV4LCBpbmNsdXNpdmUpIHtcbiAgICAgICAgaWYgKGluY2x1c2l2ZSA9PT0gdm9pZCAwKSB7IGluY2x1c2l2ZSA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBjdXIsIG5leHQgPSB0aGlzLml0ZXJhdG9yKCk7XG4gICAgICAgIHdoaWxlICgoY3VyID0gbmV4dCgpKSkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aF8xID0gY3VyLmxlbmd0aCgpO1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoXzEgfHxcbiAgICAgICAgICAgICAgICAoaW5jbHVzaXZlICYmIGluZGV4ID09PSBsZW5ndGhfMSAmJiAoY3VyLm5leHQgPT0gbnVsbCB8fCBjdXIubmV4dC5sZW5ndGgoKSAhPT0gMCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtjdXIsIGluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluZGV4IC09IGxlbmd0aF8xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbnVsbCwgMF07XG4gICAgfTtcbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBjdXIsIG5leHQgPSB0aGlzLml0ZXJhdG9yKCk7XG4gICAgICAgIHdoaWxlICgoY3VyID0gbmV4dCgpKSkge1xuICAgICAgICAgICAgY2FsbGJhY2soY3VyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGlua2VkTGlzdC5wcm90b3R5cGUuZm9yRWFjaEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChsZW5ndGggPD0gMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5maW5kKGluZGV4KSwgc3RhcnROb2RlID0gX2FbMF0sIG9mZnNldCA9IF9hWzFdO1xuICAgICAgICB2YXIgY3VyLCBjdXJJbmRleCA9IGluZGV4IC0gb2Zmc2V0LCBuZXh0ID0gdGhpcy5pdGVyYXRvcihzdGFydE5vZGUpO1xuICAgICAgICB3aGlsZSAoKGN1ciA9IG5leHQoKSkgJiYgY3VySW5kZXggPCBpbmRleCArIGxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGN1ckxlbmd0aCA9IGN1ci5sZW5ndGgoKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA+IGN1ckluZGV4KSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soY3VyLCBpbmRleCAtIGN1ckluZGV4LCBNYXRoLm1pbihsZW5ndGgsIGN1ckluZGV4ICsgY3VyTGVuZ3RoIC0gaW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGN1ciwgMCwgTWF0aC5taW4oY3VyTGVuZ3RoLCBpbmRleCArIGxlbmd0aCAtIGN1ckluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJJbmRleCArPSBjdXJMZW5ndGg7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGN1cikge1xuICAgICAgICAgICAgbWVtby5wdXNoKGNhbGxiYWNrKGN1cikpO1xuICAgICAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICAgIH0sIFtdKTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgbWVtbykge1xuICAgICAgICB2YXIgY3VyLCBuZXh0ID0gdGhpcy5pdGVyYXRvcigpO1xuICAgICAgICB3aGlsZSAoKGN1ciA9IG5leHQoKSkpIHtcbiAgICAgICAgICAgIG1lbW8gPSBjYWxsYmFjayhtZW1vLCBjdXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgIH07XG4gICAgcmV0dXJuIExpbmtlZExpc3Q7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTGlua2VkTGlzdDtcblxuXG4vKioqLyB9KSxcbi8qIDEyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb250YWluZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIE9CU0VSVkVSX0NPTkZJRyA9IHtcbiAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgIGNoYXJhY3RlckRhdGE6IHRydWUsXG4gICAgY2hhcmFjdGVyRGF0YU9sZFZhbHVlOiB0cnVlLFxuICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICBzdWJ0cmVlOiB0cnVlLFxufTtcbnZhciBNQVhfT1BUSU1JWkVfSVRFUkFUSU9OUyA9IDEwMDtcbnZhciBTY3JvbGxCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTY3JvbGxCbG90LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNjcm9sbEJsb3Qobm9kZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBub2RlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY3JvbGwgPSBfdGhpcztcbiAgICAgICAgX3RoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7XG4gICAgICAgICAgICBfdGhpcy51cGRhdGUobXV0YXRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLm9ic2VydmVyLm9ic2VydmUoX3RoaXMuZG9tTm9kZSwgT0JTRVJWRVJfQ09ORklHKTtcbiAgICAgICAgX3RoaXMuYXR0YWNoKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2Nyb2xsQmxvdC5wcm90b3R5cGUuZGV0YWNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRldGFjaC5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9O1xuICAgIFNjcm9sbEJsb3QucHJvdG90eXBlLmRlbGV0ZUF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAwICYmIGxlbmd0aCA9PT0gdGhpcy5sZW5ndGgoKSkge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIGNoaWxkLnJlbW92ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlbGV0ZUF0LmNhbGwodGhpcywgaW5kZXgsIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjcm9sbEJsb3QucHJvdG90eXBlLmZvcm1hdEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZm9ybWF0QXQuY2FsbCh0aGlzLCBpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBTY3JvbGxCbG90LnByb3RvdHlwZS5pbnNlcnRBdCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUsIGRlZikge1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluc2VydEF0LmNhbGwodGhpcywgaW5kZXgsIHZhbHVlLCBkZWYpO1xuICAgIH07XG4gICAgU2Nyb2xsQmxvdC5wcm90b3R5cGUub3B0aW1pemUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChtdXRhdGlvbnMgPT09IHZvaWQgMCkgeyBtdXRhdGlvbnMgPSBbXTsgfVxuICAgICAgICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7IGNvbnRleHQgPSB7fTsgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm9wdGltaXplLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICAgIC8vIFdlIG11c3QgbW9kaWZ5IG11dGF0aW9ucyBkaXJlY3RseSwgY2Fubm90IG1ha2UgY29weSBhbmQgdGhlbiBtb2RpZnlcbiAgICAgICAgdmFyIHJlY29yZHMgPSBbXS5zbGljZS5jYWxsKHRoaXMub2JzZXJ2ZXIudGFrZVJlY29yZHMoKSk7XG4gICAgICAgIC8vIEFycmF5LnB1c2ggY3VycmVudGx5IHNlZW1zIHRvIGJlIGltcGxlbWVudGVkIGJ5IGEgbm9uLXRhaWwgcmVjdXJzaXZlIGZ1bmN0aW9uXG4gICAgICAgIC8vIHNvIHdlIGNhbm5vdCBqdXN0IG11dGF0aW9ucy5wdXNoLmFwcGx5KG11dGF0aW9ucywgdGhpcy5vYnNlcnZlci50YWtlUmVjb3JkcygpKTtcbiAgICAgICAgd2hpbGUgKHJlY29yZHMubGVuZ3RoID4gMClcbiAgICAgICAgICAgIG11dGF0aW9ucy5wdXNoKHJlY29yZHMucG9wKCkpO1xuICAgICAgICAvLyBUT0RPIHVzZSBXZWFrTWFwXG4gICAgICAgIHZhciBtYXJrID0gZnVuY3Rpb24gKGJsb3QsIG1hcmtQYXJlbnQpIHtcbiAgICAgICAgICAgIGlmIChtYXJrUGFyZW50ID09PSB2b2lkIDApIHsgbWFya1BhcmVudCA9IHRydWU7IH1cbiAgICAgICAgICAgIGlmIChibG90ID09IG51bGwgfHwgYmxvdCA9PT0gX3RoaXMpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGJsb3QuZG9tTm9kZS5wYXJlbnROb2RlID09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgaWYgKGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXJrUGFyZW50KVxuICAgICAgICAgICAgICAgIG1hcmsoYmxvdC5wYXJlbnQpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgb3B0aW1pemUgPSBmdW5jdGlvbiAoYmxvdCkge1xuICAgICAgICAgICAgLy8gUG9zdC1vcmRlciB0cmF2ZXJzYWxcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0gPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBibG90LmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJsb3QgaW5zdGFuY2VvZiBjb250YWluZXJfMS5kZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgYmxvdC5jaGlsZHJlbi5mb3JFYWNoKG9wdGltaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsb3Qub3B0aW1pemUoY29udGV4dCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciByZW1haW5pbmcgPSBtdXRhdGlvbnM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyByZW1haW5pbmcubGVuZ3RoID4gMDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoaSA+PSBNQVhfT1BUSU1JWkVfSVRFUkFUSU9OUykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1BhcmNobWVudF0gTWF4aW11bSBvcHRpbWl6ZSBpdGVyYXRpb25zIHJlYWNoZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbWFpbmluZy5mb3JFYWNoKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBibG90ID0gUmVnaXN0cnkuZmluZChtdXRhdGlvbi50YXJnZXQsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmIChibG90ID09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoYmxvdC5kb21Ob2RlID09PSBtdXRhdGlvbi50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdjaGlsZExpc3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrKFJlZ2lzdHJ5LmZpbmQobXV0YXRpb24ucHJldmlvdXNTaWJsaW5nLCBmYWxzZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKG11dGF0aW9uLmFkZGVkTm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gUmVnaXN0cnkuZmluZChub2RlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyayhjaGlsZCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIGNvbnRhaW5lcl8xLmRlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoZ3JhbmRDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyayhncmFuZENoaWxkLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdhdHRyaWJ1dGVzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyayhibG90LnByZXYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1hcmsoYmxvdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChvcHRpbWl6ZSk7XG4gICAgICAgICAgICByZW1haW5pbmcgPSBbXS5zbGljZS5jYWxsKHRoaXMub2JzZXJ2ZXIudGFrZVJlY29yZHMoKSk7XG4gICAgICAgICAgICByZWNvcmRzID0gcmVtYWluaW5nLnNsaWNlKCk7XG4gICAgICAgICAgICB3aGlsZSAocmVjb3Jkcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgIG11dGF0aW9ucy5wdXNoKHJlY29yZHMucG9wKCkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTY3JvbGxCbG90LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHsgY29udGV4dCA9IHt9OyB9XG4gICAgICAgIG11dGF0aW9ucyA9IG11dGF0aW9ucyB8fCB0aGlzLm9ic2VydmVyLnRha2VSZWNvcmRzKCk7XG4gICAgICAgIC8vIFRPRE8gdXNlIFdlYWtNYXBcbiAgICAgICAgbXV0YXRpb25zXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICAgICAgdmFyIGJsb3QgPSBSZWdpc3RyeS5maW5kKG11dGF0aW9uLnRhcmdldCwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoYmxvdCA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgaWYgKGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMgPSBbbXV0YXRpb25dO1xuICAgICAgICAgICAgICAgIHJldHVybiBibG90O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zLnB1c2gobXV0YXRpb24pO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGJsb3QpIHtcbiAgICAgICAgICAgIGlmIChibG90ID09IG51bGwgfHxcbiAgICAgICAgICAgICAgICBibG90ID09PSBfdGhpcyB8fFxuICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0gPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBibG90LnVwZGF0ZShibG90LmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucyB8fCBbXSwgY29udGV4dCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICh0aGlzLmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucyAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGltaXplKG11dGF0aW9ucywgY29udGV4dCk7XG4gICAgfTtcbiAgICBTY3JvbGxCbG90LmJsb3ROYW1lID0gJ3Njcm9sbCc7XG4gICAgU2Nyb2xsQmxvdC5kZWZhdWx0Q2hpbGQgPSAnYmxvY2snO1xuICAgIFNjcm9sbEJsb3Quc2NvcGUgPSBSZWdpc3RyeS5TY29wZS5CTE9DS19CTE9UO1xuICAgIFNjcm9sbEJsb3QudGFnTmFtZSA9ICdESVYnO1xuICAgIHJldHVybiBTY3JvbGxCbG90O1xufShjb250YWluZXJfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTY3JvbGxCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGZvcm1hdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbnZhciBSZWdpc3RyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vLyBTaGFsbG93IG9iamVjdCBjb21wYXJpc29uXG5mdW5jdGlvbiBpc0VxdWFsKG9iajEsIG9iajIpIHtcbiAgICBpZiAoT2JqZWN0LmtleXMob2JqMSkubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhvYmoyKS5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZm9yICh2YXIgcHJvcCBpbiBvYmoxKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKG9iajFbcHJvcF0gIT09IG9iajJbcHJvcF0pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxudmFyIElubGluZUJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKElubGluZUJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW5saW5lQmxvdCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBJbmxpbmVCbG90LmZvcm1hdHMgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICBpZiAoZG9tTm9kZS50YWdOYW1lID09PSBJbmxpbmVCbG90LnRhZ05hbWUpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gX3N1cGVyLmZvcm1hdHMuY2FsbCh0aGlzLCBkb21Ob2RlKTtcbiAgICB9O1xuICAgIElubGluZUJsb3QucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAobmFtZSA9PT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lICYmICF2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgZm9ybWF0XzEuZGVmYXVsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC53cmFwKElubGluZUJsb3QuYmxvdE5hbWUsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5hdHRyaWJ1dGVzLmNvcHkoY2hpbGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnVud3JhcCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXQuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElubGluZUJsb3QucHJvdG90eXBlLmZvcm1hdEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmZvcm1hdHMoKVtuYW1lXSAhPSBudWxsIHx8IFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkFUVFJJQlVURSkpIHtcbiAgICAgICAgICAgIHZhciBibG90ID0gdGhpcy5pc29sYXRlKGluZGV4LCBsZW5ndGgpO1xuICAgICAgICAgICAgYmxvdC5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXRBdC5jYWxsKHRoaXMsIGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5saW5lQmxvdC5wcm90b3R5cGUub3B0aW1pemUgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm9wdGltaXplLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICAgIHZhciBmb3JtYXRzID0gdGhpcy5mb3JtYXRzKCk7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhmb3JtYXRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVud3JhcCgpOyAvLyB1bmZvcm1hdHRlZCBzcGFuXG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5leHQgPSB0aGlzLm5leHQ7XG4gICAgICAgIGlmIChuZXh0IGluc3RhbmNlb2YgSW5saW5lQmxvdCAmJiBuZXh0LnByZXYgPT09IHRoaXMgJiYgaXNFcXVhbChmb3JtYXRzLCBuZXh0LmZvcm1hdHMoKSkpIHtcbiAgICAgICAgICAgIG5leHQubW92ZUNoaWxkcmVuKHRoaXMpO1xuICAgICAgICAgICAgbmV4dC5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5saW5lQmxvdC5ibG90TmFtZSA9ICdpbmxpbmUnO1xuICAgIElubGluZUJsb3Quc2NvcGUgPSBSZWdpc3RyeS5TY29wZS5JTkxJTkVfQkxPVDtcbiAgICBJbmxpbmVCbG90LnRhZ05hbWUgPSAnU1BBTic7XG4gICAgcmV0dXJuIElubGluZUJsb3Q7XG59KGZvcm1hdF8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IElubGluZUJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiAxNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZm9ybWF0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBCbG9ja0Jsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJsb2NrQmxvdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCbG9ja0Jsb3QoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgQmxvY2tCbG90LmZvcm1hdHMgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICB2YXIgdGFnTmFtZSA9IFJlZ2lzdHJ5LnF1ZXJ5KEJsb2NrQmxvdC5ibG90TmFtZSkudGFnTmFtZTtcbiAgICAgICAgaWYgKGRvbU5vZGUudGFnTmFtZSA9PT0gdGFnTmFtZSlcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBfc3VwZXIuZm9ybWF0cy5jYWxsKHRoaXMsIGRvbU5vZGUpO1xuICAgIH07XG4gICAgQmxvY2tCbG90LnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkJMT0NLKSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lICYmICF2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlV2l0aChCbG9ja0Jsb3QuYmxvdE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXQuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJsb2NrQmxvdC5wcm90b3R5cGUuZm9ybWF0QXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkJMT0NLKSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmZvcm1hdEF0LmNhbGwodGhpcywgaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCbG9ja0Jsb3QucHJvdG90eXBlLmluc2VydEF0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICAgIGlmIChkZWYgPT0gbnVsbCB8fCBSZWdpc3RyeS5xdWVyeSh2YWx1ZSwgUmVnaXN0cnkuU2NvcGUuSU5MSU5FKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBJbnNlcnQgdGV4dCBvciBpbmxpbmVcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5zZXJ0QXQuY2FsbCh0aGlzLCBpbmRleCwgdmFsdWUsIGRlZik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYWZ0ZXIgPSB0aGlzLnNwbGl0KGluZGV4KTtcbiAgICAgICAgICAgIHZhciBibG90ID0gUmVnaXN0cnkuY3JlYXRlKHZhbHVlLCBkZWYpO1xuICAgICAgICAgICAgYWZ0ZXIucGFyZW50Lmluc2VydEJlZm9yZShibG90LCBhZnRlcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJsb2NrQmxvdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVHJpZGVudC8pKSB7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMsIG11dGF0aW9ucywgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJsb2NrQmxvdC5ibG90TmFtZSA9ICdibG9jayc7XG4gICAgQmxvY2tCbG90LnNjb3BlID0gUmVnaXN0cnkuU2NvcGUuQkxPQ0tfQkxPVDtcbiAgICBCbG9ja0Jsb3QudGFnTmFtZSA9ICdQJztcbiAgICByZXR1cm4gQmxvY2tCbG90O1xufShmb3JtYXRfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBCbG9ja0Jsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiAxNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbGVhZl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbnZhciBFbWJlZEJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEVtYmVkQmxvdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFbWJlZEJsb3QoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgRW1iZWRCbG90LmZvcm1hdHMgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgRW1iZWRCbG90LnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgLy8gc3VwZXIuZm9ybWF0QXQgd3JhcHMsIHdoaWNoIGlzIHdoYXQgd2Ugd2FudCBpbiBnZW5lcmFsLFxuICAgICAgICAvLyBidXQgdGhpcyBhbGxvd3Mgc3ViY2xhc3NlcyB0byBvdmVyd3JpdGUgZm9yIGZvcm1hdHNcbiAgICAgICAgLy8gdGhhdCBqdXN0IGFwcGx5IHRvIHBhcnRpY3VsYXIgZW1iZWRzXG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZm9ybWF0QXQuY2FsbCh0aGlzLCAwLCB0aGlzLmxlbmd0aCgpLCBuYW1lLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBFbWJlZEJsb3QucHJvdG90eXBlLmZvcm1hdEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBsZW5ndGggPT09IHRoaXMubGVuZ3RoKCkpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybWF0KG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZm9ybWF0QXQuY2FsbCh0aGlzLCBpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEVtYmVkQmxvdC5wcm90b3R5cGUuZm9ybWF0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGljcy5mb3JtYXRzKHRoaXMuZG9tTm9kZSk7XG4gICAgfTtcbiAgICByZXR1cm4gRW1iZWRCbG90O1xufShsZWFmXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gRW1iZWRCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogMTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGxlYWZfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIFRleHRCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUZXh0QmxvdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUZXh0QmxvdChub2RlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG5vZGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnRleHQgPSBfdGhpcy5zdGF0aWNzLnZhbHVlKF90aGlzLmRvbU5vZGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRleHRCbG90LmNyZWF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodmFsdWUpO1xuICAgIH07XG4gICAgVGV4dEJsb3QudmFsdWUgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICB2YXIgdGV4dCA9IGRvbU5vZGUuZGF0YTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAodGV4dFsnbm9ybWFsaXplJ10pXG4gICAgICAgICAgICB0ZXh0ID0gdGV4dFsnbm9ybWFsaXplJ10oKTtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUuZGVsZXRlQXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICB0aGlzLmRvbU5vZGUuZGF0YSA9IHRoaXMudGV4dCA9IHRoaXMudGV4dC5zbGljZSgwLCBpbmRleCkgKyB0aGlzLnRleHQuc2xpY2UoaW5kZXggKyBsZW5ndGgpO1xuICAgIH07XG4gICAgVGV4dEJsb3QucHJvdG90eXBlLmluZGV4ID0gZnVuY3Rpb24gKG5vZGUsIG9mZnNldCkge1xuICAgICAgICBpZiAodGhpcy5kb21Ob2RlID09PSBub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS5pbnNlcnRBdCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUsIGRlZikge1xuICAgICAgICBpZiAoZGVmID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IHRoaXMudGV4dC5zbGljZSgwLCBpbmRleCkgKyB2YWx1ZSArIHRoaXMudGV4dC5zbGljZShpbmRleCk7XG4gICAgICAgICAgICB0aGlzLmRvbU5vZGUuZGF0YSA9IHRoaXMudGV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5zZXJ0QXQuY2FsbCh0aGlzLCBpbmRleCwgdmFsdWUsIGRlZik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQubGVuZ3RoO1xuICAgIH07XG4gICAgVGV4dEJsb3QucHJvdG90eXBlLm9wdGltaXplID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5vcHRpbWl6ZS5jYWxsKHRoaXMsIGNvbnRleHQpO1xuICAgICAgICB0aGlzLnRleHQgPSB0aGlzLnN0YXRpY3MudmFsdWUodGhpcy5kb21Ob2RlKTtcbiAgICAgICAgaWYgKHRoaXMudGV4dC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5uZXh0IGluc3RhbmNlb2YgVGV4dEJsb3QgJiYgdGhpcy5uZXh0LnByZXYgPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0QXQodGhpcy5sZW5ndGgoKSwgdGhpcy5uZXh0LnZhbHVlKCkpO1xuICAgICAgICAgICAgdGhpcy5uZXh0LnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUucG9zaXRpb24gPSBmdW5jdGlvbiAoaW5kZXgsIGluY2x1c2l2ZSkge1xuICAgICAgICBpZiAoaW5jbHVzaXZlID09PSB2b2lkIDApIHsgaW5jbHVzaXZlID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIFt0aGlzLmRvbU5vZGUsIGluZGV4XTtcbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIChpbmRleCwgZm9yY2UpIHtcbiAgICAgICAgaWYgKGZvcmNlID09PSB2b2lkIDApIHsgZm9yY2UgPSBmYWxzZTsgfVxuICAgICAgICBpZiAoIWZvcmNlKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMubGVuZ3RoKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWZ0ZXIgPSBSZWdpc3RyeS5jcmVhdGUodGhpcy5kb21Ob2RlLnNwbGl0VGV4dChpbmRleCkpO1xuICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUoYWZ0ZXIsIHRoaXMubmV4dCk7XG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMuc3RhdGljcy52YWx1ZSh0aGlzLmRvbU5vZGUpO1xuICAgICAgICByZXR1cm4gYWZ0ZXI7XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAobXV0YXRpb25zLnNvbWUoZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gbXV0YXRpb24udHlwZSA9PT0gJ2NoYXJhY3RlckRhdGEnICYmIG11dGF0aW9uLnRhcmdldCA9PT0gX3RoaXMuZG9tTm9kZTtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IHRoaXMuc3RhdGljcy52YWx1ZSh0aGlzLmRvbU5vZGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQ7XG4gICAgfTtcbiAgICBUZXh0QmxvdC5ibG90TmFtZSA9ICd0ZXh0JztcbiAgICBUZXh0QmxvdC5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLklOTElORV9CTE9UO1xuICAgIHJldHVybiBUZXh0QmxvdDtcbn0obGVhZl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFRleHRCbG90O1xuXG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyY2htZW50LmpzLm1hcCIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gcGxhY2VIb2xkZXJzQ291bnQgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycylcbiAgLy8gaWYgdGhlcmUgYXJlIHR3byBwbGFjZWhvbGRlcnMsIHRoYW4gdGhlIHR3byBjaGFyYWN0ZXJzIGJlZm9yZSBpdFxuICAvLyByZXByZXNlbnQgb25lIGJ5dGVcbiAgLy8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzXG4gIC8vIHRoaXMgaXMganVzdCBhIGNoZWFwIGhhY2sgdG8gbm90IGRvIGluZGV4T2YgdHdpY2VcbiAgcmV0dXJuIGI2NFtsZW4gLSAyXSA9PT0gJz0nID8gMiA6IGI2NFtsZW4gLSAxXSA9PT0gJz0nID8gMSA6IDBcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuICByZXR1cm4gKGI2NC5sZW5ndGggKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNDb3VudChiNjQpXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIGksIGwsIHRtcCwgcGxhY2VIb2xkZXJzLCBhcnJcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcbiAgcGxhY2VIb2xkZXJzID0gcGxhY2VIb2xkZXJzQ291bnQoYjY0KVxuXG4gIGFyciA9IG5ldyBBcnIoKGxlbiAqIDMgLyA0KSAtIHBsYWNlSG9sZGVycylcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIGwgPSBwbGFjZUhvbGRlcnMgPiAwID8gbGVuIC0gNCA6IGxlblxuXG4gIHZhciBMID0gMFxuXG4gIGZvciAoaSA9IDA7IGkgPCBsOyBpICs9IDQpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHwgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbTCsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnMgPT09IDIpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9IGVsc2UgaWYgKHBsYWNlSG9sZGVycyA9PT0gMSkge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICsgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9ICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICsgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICsgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBvdXRwdXQgPSAnJ1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aCkpKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMl1cbiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXVxuICAgIG91dHB1dCArPSAnPT0nXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArICh1aW50OFtsZW4gLSAxXSlcbiAgICBvdXRwdXQgKz0gbG9va3VwW3RtcCA+PiAxMF1cbiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9ICc9J1xuICB9XG5cbiAgcGFydHMucHVzaChvdXRwdXQpXG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZWdFeHAsIHJlcGxhY2UpIHtcbiAgdmFyIHJlcGxhY2VyID0gcmVwbGFjZSA9PT0gT2JqZWN0KHJlcGxhY2UpID8gZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gcmVwbGFjZVtwYXJ0XTtcbiAgfSA6IHJlcGxhY2U7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JleEV4cC5lc2NhcGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlID0gcmVxdWlyZSgnLi9fcmVwbGFjZXInKSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWdFeHAnLCB7IGVzY2FwZTogZnVuY3Rpb24gZXNjYXBlKGl0KSB7IHJldHVybiAkcmUoaXQpOyB9IH0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlJlZ0V4cC5lc2NhcGU7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuXG4gKiBhZGRpdGlvbmFsIGdyYW50IG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW5cbiAqIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGVcbiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZVxuICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90XG4gICAgICAgICAgLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZVxuICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW5cbiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXRcbiAgICAgICAgICAvLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWRcbiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aFxuICAgICAgICAgIC8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGVcbiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlXG4gICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kXG4gICAgICAgICAgLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGdsb2JhbC5wcm9jZXNzID09PSBcIm9iamVjdFwiICYmIGdsb2JhbC5wcm9jZXNzLmRvbWFpbikge1xuICAgICAgaW52b2tlID0gZ2xvYmFsLnByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xufSkoXG4gIC8vIEFtb25nIHRoZSB2YXJpb3VzIHRyaWNrcyBmb3Igb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWxcbiAgLy8gb2JqZWN0LCB0aGlzIHNlZW1zIHRvIGJlIHRoZSBtb3N0IHJlbGlhYmxlIHRlY2huaXF1ZSB0aGF0IGRvZXMgbm90XG4gIC8vIHVzZSBpbmRpcmVjdCBldmFsICh3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuXG4gIHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOlxuICB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiID8gd2luZG93IDpcbiAgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdGhpc1xuKTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuIiwiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBNU0lFID0gL01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgdGltZSAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgYm91bmRBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiBmYWxzZTtcbiAgICByZXR1cm4gc2V0KGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBmbiwgdGltZSk7XG4gIH07XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIE9CU0VSVkFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnb2JzZXJ2YWJsZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIFJFVFVSTiA9IGZvck9mLlJFVFVSTjtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXAoKTtcbiAgfVxufTtcblxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbi5fbyA9PT0gdW5kZWZpbmVkO1xufTtcblxudmFyIGNsb3NlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICBhbk9iamVjdChvYnNlcnZlcik7XG4gIHRoaXMuX2MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZiAoY2xlYW51cCAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIGNsZWFudXAgPSBmdW5jdGlvbiAoKSB7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XG4gICAgICB0aGlzLl9jID0gY2xlYW51cDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH0gaWYgKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSkgY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcbn07XG5cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9XG59KTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB0aHJvdyB2YWx1ZTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICBpZiAoIW0pIHRocm93IHZhbHVlO1xuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpO1xuICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7XG59O1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7XG4gIH0sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBhRnVuY3Rpb24oZm4pO1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSwge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpIHtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xuICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pO1xuICAgIGlmIChtZXRob2QpIHtcbiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpO1xuICAgICAgcmV0dXJuIG9ic2VydmFibGUuY29uc3RydWN0b3IgPT09IEMgPyBvYnNlcnZhYmxlIDogbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZm9yT2YoeCwgZmFsc2UsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcbiAgICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybiBSRVRVUk47XG4gICAgICAgICAgICB9KSA9PT0gUkVUVVJOKSByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHRocm93IGU7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH0sXG4gIG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gbmV3IEFycmF5KGwpOyBpIDwgbDspIGl0ZW1zW2ldID0gYXJndW1lbnRzW2krK107XG4gICAgcmV0dXJuIG5ldyAodHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGUpKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbal0pO1xuICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5oaWRlKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgT0JTRVJWQUJMRSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IE9ic2VydmFibGU6ICRPYnNlcnZhYmxlIH0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdPYnNlcnZhYmxlJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBwcm9jZXNzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2VzcztcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7XG4gIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pIHtcbiAgICB2YXIgZG9tYWluID0gaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluO1xuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XG4gIH1cbn0pO1xuIiwidmFyICRtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9NZXRhS2V5ID0gJG1ldGFkYXRhLmtleTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gJG1ldGFkYXRhLnNldDtcblxuJG1ldGFkYXRhLmV4cCh7IG1ldGFkYXRhOiBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gICAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShcbiAgICAgIG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLFxuICAgICAgKHRhcmdldEtleSAhPT0gdW5kZWZpbmVkID8gYW5PYmplY3QgOiBhRnVuY3Rpb24pKHRhcmdldCksXG4gICAgICB0b01ldGFLZXkodGFyZ2V0S2V5KVxuICAgICk7XG4gIH07XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBoYXNPd25NZXRhZGF0YTogZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlIYXNNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiB0cnVlO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogZmFsc2U7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBoYXNNZXRhZGF0YTogZnVuY3Rpb24gaGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YTogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIFNldCA9IHJlcXVpcmUoJy4vZXM2LnNldCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG52YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKE8sIFApIHtcbiAgdmFyIG9LZXlzID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBtZXRhZGF0YS5tYXA7XG52YXIgc3RvcmUgPSBtZXRhZGF0YS5zdG9yZTtcblxubWV0YWRhdGEuZXhwKHsgZGVsZXRlTWV0YWRhdGE6IGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgdmFyIHRhcmdldEtleSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSk7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIGlmIChtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkIHx8ICFtZXRhZGF0YU1hcFsnZGVsZXRlJ10obWV0YWRhdGFLZXkpKSByZXR1cm4gZmFsc2U7XG4gIGlmIChtZXRhZGF0YU1hcC5zaXplKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIHRhcmdldE1ldGFkYXRhWydkZWxldGUnXSh0YXJnZXRLZXkpO1xuICByZXR1cm4gISF0YXJnZXRNZXRhZGF0YS5zaXplIHx8IHN0b3JlWydkZWxldGUnXSh0YXJnZXQpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHsgZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSkge1xuICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCBhbk9iamVjdCh0YXJnZXQpLCB0b01ldGFLZXkodGFyZ2V0S2V5KSk7XG59IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS10cnlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdQcm9taXNlJywgeyAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZih0aGlzKTtcbiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oY2FsbGJhY2tmbik7XG4gIChyZXN1bHQuZSA/IHByb21pc2VDYXBhYmlsaXR5LnJlamVjdCA6IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmUpKHJlc3VsdC52KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59IH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuIiwiLy8gaHR0cDovL2pmYmFzdGllbi5naXRodWIuaW8vcGFwZXJzL01hdGguc2lnbmJpdC5odG1sXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ25iaXQ6IGZ1bmN0aW9uIHNpZ25iaXQoeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSAhPSB4ID8geCA6IHggPT0gMCA/IDEgLyB4ID09IEluZmluaXR5IDogeCA+IDA7XG59IH0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+Pj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNjYWxlOiByZXF1aXJlKCcuL19tYXRoLXNjYWxlJykgfSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIERFR19QRVJfUkFEID0gTWF0aC5QSSAvIDE4MDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICByYWRpYW5zOiBmdW5jdGlvbiByYWRpYW5zKGRlZ3JlZXMpIHtcbiAgICByZXR1cm4gZGVncmVlcyAqIERFR19QRVJfUkFEO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgUkFEX1BFUl9ERUc6IDE4MCAvIE1hdGguUEkgfSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdikge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyICR1ID0gK3U7XG4gICAgdmFyICR2ID0gK3Y7XG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XG4gICAgdmFyIHUxID0gJHUgPj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaXN1Ymg6IGZ1bmN0aW9uIGlzdWJoKHgwLCB4MSwgeTAsIHkxKSB7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwO1xuICAgIHZhciAkeDEgPSB4MSA+Pj4gMDtcbiAgICB2YXIgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSAtICh5MSA+Pj4gMCkgLSAoKH4keDAgJiAkeTAgfCB+KCR4MCBeICR5MCkgJiAkeDAgLSAkeTAgPj4+IDApID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlhZGRoOiBmdW5jdGlvbiBpYWRkaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgKyAoeTEgPj4+IDApICsgKCgkeDAgJiAkeTAgfCAoJHgwIHwgJHkwKSAmIH4oJHgwICsgJHkwID4+PiAwKSkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzY2FsZSA9IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKTtcbnZhciBmcm91bmQgPSByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGZzY2FsZTogZnVuY3Rpb24gZnNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICAgIHJldHVybiBmcm91bmQoc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBSQURfUEVSX0RFRyA9IDE4MCAvIE1hdGguUEk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZGVncmVlczogZnVuY3Rpb24gZGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgKiBSQURfUEVSX0RFRztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IERFR19QRVJfUkFEOiBNYXRoLlBJIC8gMTgwIH0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbGFtcDogZnVuY3Rpb24gY2xhbXAoeCwgbG93ZXIsIHVwcGVyKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKHVwcGVyLCBNYXRoLm1heChsb3dlciwgeCkpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtaXMtZXJyb3JcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7XG4gIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpIHtcbiAgICByZXR1cm4gY29mKGl0KSA9PT0gJ0Vycm9yJztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnTWFwJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1NldCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0JykgfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjUgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5zZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjQgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMiBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbC9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZ2V0RmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIFJlZ0V4cFByb3RvID0gUmVnRXhwLnByb3RvdHlwZTtcblxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uIChyZWdleHAsIHN0cmluZykge1xuICB0aGlzLl9yID0gcmVnZXhwO1xuICB0aGlzLl9zID0gc3RyaW5nO1xufTtcblxucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpO1xuICByZXR1cm4geyB2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcbiAgICBkZWZpbmVkKHRoaXMpO1xuICAgIGlmICghaXNSZWdFeHAocmVnZXhwKSkgdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgIHZhciBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKTtcbiAgICB2YXIgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cC5zb3VyY2UsIH5mbGFncy5pbmRleE9mKCdnJykgPyBmbGFncyA6ICdnJyArIGZsYWdzKTtcbiAgICByeC5sYXN0SW5kZXggPSB0b0xlbmd0aChyZWdleHAubGFzdEluZGV4KTtcbiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDIpO1xuICB9O1xufSwgJ3RyaW1FbmQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7XG4gIH07XG59LCAndHJpbVN0YXJ0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCksICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBhdDogZnVuY3Rpb24gYXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0dGVuXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0dGVuJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdE1hcFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0TWFwJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBleGlzdGluZ0Rlc2NyaXB0b3IgPSBnT1BELmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSB8fCBjcmVhdGVEZXNjKDApO1xuICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcbiIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjLCBwcm90bztcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpIHJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBrZXlzID0gdGhhdC5faztcbiAgdmFyIGtleTtcbiAgZG8ge1xuICAgIGlmICh0aGF0Ll9pID49IGtleXMubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH0gd2hpbGUgKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4geyB2YWx1ZToga2V5LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vX2JpbmQnKTtcbnZhciByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHJBcHBseSA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJBcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbmFsID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW5hbCAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTID0gbmV3ICREYXRhVmlldyh0aGlzKTtcbiAgICB2YXIgdmlld1QgPSBuZXcgJERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW5hbCkge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJykgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpO1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xuICB2YXIgX3NwbGl0ID0gJHNwbGl0O1xuICB2YXIgJHB1c2ggPSBbXS5wdXNoO1xuICB2YXIgJFNQTElUID0gJ3NwbGl0JztcbiAgdmFyIExFTkdUSCA9ICdsZW5ndGgnO1xuICB2YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIHZhciBOUENHID0gLygpPz8vLmV4ZWMoJycpWzFdID09PSB1bmRlZmluZWQ7IC8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwXG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiBfc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IDQyOTQ5NjcyOTUgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIHNlcGFyYXRvcjIsIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGgsIGk7XG4gICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgIGlmICghTlBDRykgc2VwYXJhdG9yMiA9IG5ldyBSZWdFeHAoJ14nICsgc2VwYXJhdG9yQ29weS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHNlcGFyYXRvckNvcHkuZXhlYyhzdHJpbmcpKSB7XG4gICAgICAgIC8vIGBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvciBOUENHXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgICAgIGlmICghTlBDRyAmJiBtYXRjaFtMRU5HVEhdID4gMSkgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzW0xFTkdUSF0gLSAyOyBpKyspIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogX3NwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfVxuICAvLyAyMS4xLjMuMTcgU3RyaW5nLnByb3RvdHlwZS5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KVxuICByZXR1cm4gW2Z1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpIDogJHNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgfSwgJHNwbGl0XTtcbn0pO1xuIiwiLy8gQEBzZWFyY2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCkge1xuICAvLyAyMS4xLjMuMTUgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2gocmVnZXhwKVxuICByZXR1cm4gW2Z1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRzZWFyY2hdO1xufSk7XG4iLCIvLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSkge1xuICAvLyAyMS4xLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpXG4gIHJldHVybiBbZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgfSwgJHJlcGxhY2VdO1xufSk7XG4iLCIvLyBAQG1hdGNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gpIHtcbiAgLy8gMjEuMS4zLjExIFN0cmluZy5wcm90b3R5cGUubWF0Y2gocmVnZXhwKVxuICByZXR1cm4gW2Z1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRtYXRjaF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcbnZhciBLRVkgPSAnZmluZEluZGV4JztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgY29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2NvcHlXaXRoaW4nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZSAoYUxlbiA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBOVU1CRVIgPSAnbnVtYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07XG4iLCJ2YXIgVE9fUFJJTUlUSVZFID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpO1xuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG52YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBseiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGQgPSB0aGlzO1xuICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICB2YXIgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbn0gOiAkdG9JU09TdHJpbmc7XG4iLCIvLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4vX2RhdGUtdG8taXNvLXN0cmluZycpO1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc21hbGwnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZml4ZWQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9O1xufSk7XG4iLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnO1xudmFyICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSCk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7XG4iLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZW4gPiBpKSB7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgY29kZTtcbiAgICB3aGlsZSAoYUxlbiA+IGkpIHtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSkgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpIH0pO1xuIiwiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpIH0pO1xuIiwiLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRpbXVsKDB4ZmZmZmZmZmYsIDUpICE9IC01IHx8ICRpbXVsLmxlbmd0aCAhPSAyO1xufSksICdNYXRoJywge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciB4biA9ICt4O1xuICAgIHZhciB5biA9ICt5O1xuICAgIHZhciB4bCA9IFVJTlQxNiAmIHhuO1xuICAgIHZhciB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuIiwiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIE1hdGgucG93KE1hdGguYWJzKHgpLCAxIC8gMyk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuIiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKTtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykgfSk7XG4iLCIvLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBfaXNGaW5pdGUgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5pc0Zpbml0ZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCkge1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IEVQU0lMT046IE1hdGgucG93KDIsIC01MikgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgJHRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbnZhciBFUlJPUiA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJztcbnZhciBaRVJPID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xuICB2YXIgaSA9IC0xO1xuICB2YXIgYzIgPSBjO1xuICB3aGlsZSAoKytpIDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBjMiAlIDFlNztcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcbiAgfVxufTtcbnZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xuICB2YXIgaSA9IDY7XG4gIHZhciBjID0gMDtcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7XG4gICAgYyA9IChjICUgbikgKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIHMgPSAnJztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCkge1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xudmFyIGxvZyA9IGZ1bmN0aW9uICh4KSB7XG4gIHZhciBuID0gMDtcbiAgdmFyIHgyID0geDtcbiAgd2hpbGUgKHgyID49IDQwOTYpIHtcbiAgICBuICs9IDEyO1xuICAgIHgyIC89IDQwOTY7XG4gIH1cbiAgd2hpbGUgKHgyID49IDIpIHtcbiAgICBuICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4wLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVI7XG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmICghJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBIQVNfSU5TVEFOQ0UgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgaXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKSB9KTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24gKCRmcmVlemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7XG4iLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwicmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaWFkZGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pc3ViaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmltdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC51bXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UudHJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFzYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvX2NvcmUnKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7IiwiaW1wb3J0ICdiYWJlbC1wb2x5ZmlsbCdcbmltcG9ydCBRdWlsbCBmcm9tICdxdWlsbCdcbmltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50J1xuaW1wb3J0IHVybEVtYmVkIGZyb20gJy4vYmxvdCdcbmltcG9ydCB1cmxFbWJlZE1vZHVsZSBmcm9tICcuL21vZHVsZSdcblxuUXVpbGwucmVnaXN0ZXIoe1xuICAnYmxvdHMvdXJsRW1iZWQnOiB1cmxFbWJlZCxcbiAgJ21vZHVsZXMvdXJsRW1iZWRzJzogdXJsRW1iZWRNb2R1bGVcbn0pXG5QYXJjaG1lbnQucmVnaXN0ZXIodXJsRW1iZWQpXG4iXSwic291cmNlUm9vdCI6IiJ9