!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var r in n)("object"==typeof exports?exports:t)[r]=n[r]}}(window,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=432)}([function(t,e,n){var r=n(2),o=n(27),i=n(13),a=n(12),u=n(21),s=function(t,e,n){var l,c,f,p,h=t&s.F,d=t&s.G,v=t&s.S,y=t&s.P,g=t&s.B,b=d?r:v?r[e]||(r[e]={}):(r[e]||{}).prototype,m=d?o:o[e]||(o[e]={}),_=m.prototype||(m.prototype={});for(l in d&&(n=e),n)f=((c=!h&&b&&void 0!==b[l])?b:n)[l],p=g&&c?u(f,r):y&&"function"==typeof f?u(Function.call,f):f,b&&a(b,l,f,t&s.U),m[l]!=f&&i(m,l,p),y&&_[l]!=f&&(_[l]=f)};r.core=o,s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,t.exports=s},function(t,e,n){var r=n(4);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(67)("wks"),o=n(42),i=n(2).Symbol,a="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=a&&i[t]||(a?i:o)("Symbol."+t))}).store=r},function(t,e,n){var r=n(24),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(1),o=n(155),i=n(26),a=Object.defineProperty;e.f=n(8)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){t.exports=!n(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(25);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var r=n(0),o=n(3),i=n(25),a=/"/g,u=function(t,e,n,r){var o=String(i(t)),u="<"+e;return""!==n&&(u+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),u+">"+o+"</"+e+">"};t.exports=function(t,e){var n={};n[t]=e(u),r(r.P+r.F*o(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",n)}},function(t,e,n){var r=n(2),o=n(13),i=n(14),a=n(42)("src"),u=Function.toString,s=(""+u).split("toString");n(27).inspectSource=function(t){return u.call(t)},(t.exports=function(t,e,n,u){var l="function"==typeof n;l&&(i(n,"name")||o(n,"name",e)),t[e]!==n&&(l&&(i(n,a)||o(n,a,t[e]?""+t[e]:s.join(String(e)))),t===r?t[e]=n:u?t[e]?t[e]=n:o(t,e,n):(delete t[e],o(t,e,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||u.call(this)})},function(t,e,n){var r=n(7),o=n(43);t.exports=n(8)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){"use strict";var r=n(119),o=n(215),i=Object.prototype.toString;function a(t){return"[object Array]"===i.call(t)}function u(t){return null!==t&&"object"==typeof t}function s(t){return"[object Function]"===i.call(t)}function l(t,e){if(null!==t&&void 0!==t)if("object"!=typeof t&&(t=[t]),a(t))for(var n=0,r=t.length;n<r;n++)e.call(null,t[n],n,t);else for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.call(null,t[o],o,t)}t.exports={isArray:a,isArrayBuffer:function(t){return"[object ArrayBuffer]"===i.call(t)},isBuffer:o,isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:u,isUndefined:function(t){return void 0===t},isDate:function(t){return"[object Date]"===i.call(t)},isFile:function(t){return"[object File]"===i.call(t)},isBlob:function(t){return"[object Blob]"===i.call(t)},isFunction:s,isStream:function(t){return u(t)&&s(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function t(){var e={};function n(n,r){"object"==typeof e[r]&&"object"==typeof n?e[r]=t(e[r],n):e[r]=n}for(var r=0,o=arguments.length;r<o;r++)l(arguments[r],n);return e},extend:function(t,e,n){return l(e,function(e,o){t[o]=n&&"function"==typeof e?r(e,n):e}),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(t,e,n){var r=n(14),o=n(9),i=n(100)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){var r=n(52),o=n(43),i=n(18),a=n(26),u=n(14),s=n(155),l=Object.getOwnPropertyDescriptor;e.f=n(8)?l:function(t,e){if(t=i(t),e=a(e,!0),s)try{return l(t,e)}catch(t){}if(u(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e,n){var r=n(53),o=n(25);t.exports=function(t){return r(o(t))}},function(t,e,n){"use strict";var r=n(3);t.exports=function(t,e){return!!t&&r(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(10);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){var r=n(21),o=n(53),i=n(9),a=n(6),u=n(83);t.exports=function(t,e){var n=1==t,s=2==t,l=3==t,c=4==t,f=6==t,p=5==t||f,h=e||u;return function(e,u,d){for(var v,y,g=i(e),b=o(g),m=r(u,d,3),_=a(b.length),w=0,x=n?h(e,_):s?h(e,0):void 0;_>w;w++)if((p||w in b)&&(y=m(v=b[w],w,g),t))if(n)x[w]=y;else if(y)switch(t){case 3:return!0;case 5:return v;case 6:return w;case 2:x.push(v)}else if(c)return!1;return f?-1:l||c?c:x}}},function(t,e,n){var r=n(0),o=n(27),i=n(3);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],a={};a[t]=e(n),r(r.S+r.F*i(function(){n(1)}),"Object",a)}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(4);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){var n=t.exports={version:"2.5.3"};"number"==typeof __e&&(__e=n)},function(t,e,n){"use strict";function r(t,e,n,r,o,i,a,u){var s=typeof(t=t||{}).default;"object"!==s&&"function"!==s||(t=t.default);var l,c="function"==typeof t?t.options:t;if(e&&(c.render=e,c.staticRenderFns=n,c._compiled=!0),r&&(c.functional=!0),i&&(c._scopeId=i),a?(l=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},c._ssrRegister=l):o&&(l=u?function(){o.call(this,this.$root.$options.shadowRoot)}:o),l)if(c.functional){c._injectStyles=l;var f=c.render;c.render=function(t,e){return l.call(e),f(t,e)}}else{var p=c.beforeCreate;c.beforeCreate=p?[].concat(p,l):[l]}return{exports:t,options:c}}n.d(e,"a",function(){return r})},function(t,e,n){var r=n(134),o=n(0),i=n(67)("metadata"),a=i.store||(i.store=new(n(131))),u=function(t,e,n){var o=a.get(t);if(!o){if(!n)return;a.set(t,o=new r)}var i=o.get(e);if(!i){if(!n)return;o.set(e,i=new r)}return i};t.exports={store:a,map:u,has:function(t,e,n){var r=u(e,n,!1);return void 0!==r&&r.has(t)},get:function(t,e,n){var r=u(e,n,!1);return void 0===r?void 0:r.get(t)},set:function(t,e,n,r){u(n,r,!0).set(t,e)},keys:function(t,e){var n=u(t,e,!1),r=[];return n&&n.forEach(function(t,e){r.push(e)}),r},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){o(o.S,"Reflect",t)}}},function(t,e,n){"use strict";if(n(8)){var r=n(41),o=n(2),i=n(3),a=n(0),u=n(57),s=n(77),l=n(21),c=n(35),f=n(43),p=n(13),h=n(33),d=n(24),v=n(6),y=n(129),g=n(39),b=n(26),m=n(14),_=n(51),w=n(4),x=n(9),O=n(86),E=n(38),k=n(16),A=n(37).f,S=n(84),j=n(42),N=n(5),T=n(22),P=n(66),C=n(59),L=n(81),q=n(46),M=n(62),R=n(36),I=n(82),B=n(139),D=n(7),F=n(17),U=D.f,$=F.f,H=o.RangeError,z=o.TypeError,V=o.Uint8Array,W=Array.prototype,K=s.ArrayBuffer,Y=s.DataView,G=T(0),Z=T(2),X=T(3),J=T(4),Q=T(5),tt=T(6),et=P(!0),nt=P(!1),rt=L.values,ot=L.keys,it=L.entries,at=W.lastIndexOf,ut=W.reduce,st=W.reduceRight,lt=W.join,ct=W.sort,ft=W.slice,pt=W.toString,ht=W.toLocaleString,dt=N("iterator"),vt=N("toStringTag"),yt=j("typed_constructor"),gt=j("def_constructor"),bt=u.CONSTR,mt=u.TYPED,_t=u.VIEW,wt=T(1,function(t,e){return At(C(t,t[gt]),e)}),xt=i(function(){return 1===new V(new Uint16Array([1]).buffer)[0]}),Ot=!!V&&!!V.prototype.set&&i(function(){new V(1).set({})}),Et=function(t,e){var n=d(t);if(n<0||n%e)throw H("Wrong offset!");return n},kt=function(t){if(w(t)&&mt in t)return t;throw z(t+" is not a typed array!")},At=function(t,e){if(!(w(t)&&yt in t))throw z("It is not a typed array constructor!");return new t(e)},St=function(t,e){return jt(C(t,t[gt]),e)},jt=function(t,e){for(var n=0,r=e.length,o=At(t,r);r>n;)o[n]=e[n++];return o},Nt=function(t,e,n){U(t,e,{get:function(){return this._d[n]}})},Tt=function(t){var e,n,r,o,i,a,u=x(t),s=arguments.length,c=s>1?arguments[1]:void 0,f=void 0!==c,p=S(u);if(void 0!=p&&!O(p)){for(a=p.call(u),r=[],e=0;!(i=a.next()).done;e++)r.push(i.value);u=r}for(f&&s>2&&(c=l(c,arguments[2],2)),e=0,n=v(u.length),o=At(this,n);n>e;e++)o[e]=f?c(u[e],e):u[e];return o},Pt=function(){for(var t=0,e=arguments.length,n=At(this,e);e>t;)n[t]=arguments[t++];return n},Ct=!!V&&i(function(){ht.call(new V(1))}),Lt=function(){return ht.apply(Ct?ft.call(kt(this)):kt(this),arguments)},qt={copyWithin:function(t,e){return B.call(kt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return J(kt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return I.apply(kt(this),arguments)},filter:function(t){return St(this,Z(kt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(kt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(kt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){G(kt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return nt(kt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(kt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return lt.apply(kt(this),arguments)},lastIndexOf:function(t){return at.apply(kt(this),arguments)},map:function(t){return wt(kt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ut.apply(kt(this),arguments)},reduceRight:function(t){return st.apply(kt(this),arguments)},reverse:function(){for(var t,e=kt(this).length,n=Math.floor(e/2),r=0;r<n;)t=this[r],this[r++]=this[--e],this[e]=t;return this},some:function(t){return X(kt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ct.call(kt(this),t)},subarray:function(t,e){var n=kt(this),r=n.length,o=g(t,r);return new(C(n,n[gt]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,v((void 0===e?r:g(e,r))-o))}},Mt=function(t,e){return St(this,ft.call(kt(this),t,e))},Rt=function(t){kt(this);var e=Et(arguments[1],1),n=this.length,r=x(t),o=v(r.length),i=0;if(o+e>n)throw H("Wrong length!");for(;i<o;)this[e+i]=r[i++]},It={entries:function(){return it.call(kt(this))},keys:function(){return ot.call(kt(this))},values:function(){return rt.call(kt(this))}},Bt=function(t,e){return w(t)&&t[mt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Dt=function(t,e){return Bt(t,e=b(e,!0))?f(2,t[e]):$(t,e)},Ft=function(t,e,n){return!(Bt(t,e=b(e,!0))&&w(n)&&m(n,"value"))||m(n,"get")||m(n,"set")||n.configurable||m(n,"writable")&&!n.writable||m(n,"enumerable")&&!n.enumerable?U(t,e,n):(t[e]=n.value,t)};bt||(F.f=Dt,D.f=Ft),a(a.S+a.F*!bt,"Object",{getOwnPropertyDescriptor:Dt,defineProperty:Ft}),i(function(){pt.call({})})&&(pt=ht=function(){return lt.call(this)});var Ut=h({},qt);h(Ut,It),p(Ut,dt,It.values),h(Ut,{slice:Mt,set:Rt,constructor:function(){},toString:pt,toLocaleString:Lt}),Nt(Ut,"buffer","b"),Nt(Ut,"byteOffset","o"),Nt(Ut,"byteLength","l"),Nt(Ut,"length","e"),U(Ut,vt,{get:function(){return this[mt]}}),t.exports=function(t,e,n,s){var l=t+((s=!!s)?"Clamped":"")+"Array",f="get"+t,h="set"+t,d=o[l],g=d||{},b=d&&k(d),m=!d||!u.ABV,x={},O=d&&d.prototype,S=function(t,n){U(t,n,{get:function(){return function(t,n){var r=t._d;return r.v[f](n*e+r.o,xt)}(this,n)},set:function(t){return function(t,n,r){var o=t._d;s&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[h](n*e+o.o,r,xt)}(this,n,t)},enumerable:!0})};m?(d=n(function(t,n,r,o){c(t,d,l,"_d");var i,a,u,s,f=0,h=0;if(w(n)){if(!(n instanceof K||"ArrayBuffer"==(s=_(n))||"SharedArrayBuffer"==s))return mt in n?jt(d,n):Tt.call(d,n);i=n,h=Et(r,e);var g=n.byteLength;if(void 0===o){if(g%e)throw H("Wrong length!");if((a=g-h)<0)throw H("Wrong length!")}else if((a=v(o)*e)+h>g)throw H("Wrong length!");u=a/e}else u=y(n),i=new K(a=u*e);for(p(t,"_d",{b:i,o:h,l:a,e:u,v:new Y(i)});f<u;)S(t,f++)}),O=d.prototype=E(Ut),p(O,"constructor",d)):i(function(){d(1)})&&i(function(){new d(-1)})&&M(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=n(function(t,n,r,o){var i;return c(t,d,l),w(n)?n instanceof K||"ArrayBuffer"==(i=_(n))||"SharedArrayBuffer"==i?void 0!==o?new g(n,Et(r,e),o):void 0!==r?new g(n,Et(r,e)):new g(n):mt in n?jt(d,n):Tt.call(d,n):new g(y(n))}),G(b!==Function.prototype?A(g).concat(A(b)):A(g),function(t){t in d||p(d,t,g[t])}),d.prototype=O,r||(O.constructor=d));var j=O[dt],N=!!j&&("values"==j.name||void 0==j.name),T=It.values;p(d,yt,!0),p(O,mt,l),p(O,_t,!0),p(O,gt,d),(s?new d(1)[vt]==l:vt in O)||U(O,vt,{get:function(){return l}}),x[l]=d,a(a.G+a.W+a.F*(d!=g),x),a(a.S,l,{BYTES_PER_ELEMENT:e}),a(a.S+a.F*i(function(){g.of.call(d,1)}),l,{from:Tt,of:Pt}),"BYTES_PER_ELEMENT"in O||p(O,"BYTES_PER_ELEMENT",e),a(a.P,l,qt),R(l),a(a.P+a.F*Ot,l,{set:Rt}),a(a.P+a.F*!N,l,It),r||O.toString==pt||(O.toString=pt),a(a.P+a.F*i(function(){new d(1).slice()}),l,{slice:Mt}),a(a.P+a.F*(i(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!i(function(){O.toLocaleString.call([1,2])})),l,{toLocaleString:Lt}),q[l]=N?j:T,r||N||p(O,dt,T)}}else t.exports=function(){}},function(t,e,n){var r=n(5)("unscopables"),o=Array.prototype;void 0==o[r]&&n(13)(o,r,{}),t.exports=function(t){o[r][t]=!0}},function(t,e,n){var r=n(42)("meta"),o=n(4),i=n(14),a=n(7).f,u=0,s=Object.isExtensible||function(){return!0},l=!n(3)(function(){return s(Object.preventExtensions({}))}),c=function(t){a(t,r,{value:{i:"O"+ ++u,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!s(t))return"F";if(!e)return"E";c(t)}return t[r].i},getWeak:function(t,e){if(!i(t,r)){if(!s(t))return!0;if(!e)return!1;c(t)}return t[r].w},onFreeze:function(t){return l&&f.NEED&&s(t)&&!i(t,r)&&c(t),t}}},function(t,e,n){var r=n(12);t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},function(t,e,n){var r=n(21),o=n(141),i=n(86),a=n(1),u=n(6),s=n(84),l={},c={};(e=t.exports=function(t,e,n,f,p){var h,d,v,y,g=p?function(){return t}:s(t),b=r(n,f,e?2:1),m=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(i(g)){for(h=u(t.length);h>m;m++)if((y=e?b(a(d=t[m])[0],d[1]):b(t[m]))===l||y===c)return y}else for(v=g.call(t);!(d=v.next()).done;)if((y=o(v,b,d.value,e))===l||y===c)return y}).BREAK=l,e.RETURN=c},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){"use strict";var r=n(2),o=n(7),i=n(8),a=n(5)("species");t.exports=function(t){var e=r[t];i&&e&&!e[a]&&o.f(e,a,{configurable:!0,get:function(){return this}})}},function(t,e,n){var r=n(153),o=n(99).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){var r=n(1),o=n(152),i=n(99),a=n(100)("IE_PROTO"),u=function(){},s=function(){var t,e=n(102)("iframe"),r=i.length;for(e.style.display="none",n(98).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),s=t.F;r--;)delete s.prototype[i[r]];return s()};t.exports=Object.create||function(t,e){var n;return null!==t?(u.prototype=r(t),n=new u,u.prototype=null,n[a]=t):n=s(),void 0===e?n:o(n,e)}},function(t,e,n){var r=n(24),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):i(t,e)}},function(t,e,n){var r=n(153),o=n(99);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e){t.exports=!1},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(4);t.exports=function(t,e){if(!r(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e){t.exports={}},function(t,e,n){var r=n(0),o=n(25),i=n(3),a=n(96),u="["+a+"]",s=RegExp("^"+u+u+"*"),l=RegExp(u+u+"*$"),c=function(t,e,n){var o={},u=i(function(){return!!a[t]()||"​"!="​"[t]()}),s=o[t]=u?e(f):a[t];n&&(o[n]=s),r(r.P+r.F*u,"String",o)},f=c.trim=function(t,e){return t=String(o(t)),1&e&&(t=t.replace(s,"")),2&e&&(t=t.replace(l,"")),t};t.exports=c},function(t,e,n){var r=n(7).f,o=n(14),i=n(5)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){"use strict";function r(t,e){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=i[0],u={id:t+":"+o,css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}n.r(e),n.d(e,"default",function(){return d});var o="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!o)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var i={},a=o&&(document.head||document.getElementsByTagName("head")[0]),u=null,s=0,l=!1,c=function(){},f=null,p="data-vue-ssr-id",h="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function d(t,e,n,o){l=n,f=o||{};var a=r(t,e);return v(a),function(e){for(var n=[],o=0;o<a.length;o++){var u=a[o];(s=i[u.id]).refs--,n.push(s)}e?v(a=r(t,e)):a=[];for(o=0;o<n.length;o++){var s;if(0===(s=n[o]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete i[s.id]}}}}function v(t){for(var e=0;e<t.length;e++){var n=t[e],r=i[n.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](n.parts[o]);for(;o<n.parts.length;o++)r.parts.push(g(n.parts[o]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{var a=[];for(o=0;o<n.parts.length;o++)a.push(g(n.parts[o]));i[n.id]={id:n.id,refs:1,parts:a}}}}function y(){var t=document.createElement("style");return t.type="text/css",a.appendChild(t),t}function g(t){var e,n,r=document.querySelector("style["+p+'~="'+t.id+'"]');if(r){if(l)return c;r.parentNode.removeChild(r)}if(h){var o=s++;r=u||(u=y()),e=_.bind(null,r,o,!1),n=_.bind(null,r,o,!0)}else r=y(),e=function(t,e){var n=e.css,r=e.media,o=e.sourceMap;r&&t.setAttribute("media",r);f.ssrId&&t.setAttribute(p,e.id);o&&(n+="\n/*# sourceURL="+o.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,r),n=function(){r.parentNode.removeChild(r)};return e(t),function(r){if(r){if(r.css===t.css&&r.media===t.media&&r.sourceMap===t.sourceMap)return;e(t=r)}else n()}}var b,m=(b=[],function(t,e){return b[t]=e,b.filter(Boolean).join("\n")});function _(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=m(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){var r=n(20),o=n(5)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:i?r(e):"Object"==(a=r(e))&&"function"==typeof e.callee?"Arguments":a}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var r=n(20);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){"use strict";var r=n(0),o=n(10),i=n(21),a=n(34);t.exports=function(t){r(r.S,t,{from:function(t){var e,n,r,u,s=arguments[1];return o(this),(e=void 0!==s)&&o(s),void 0==t?new this:(n=[],e?(r=0,u=i(s,arguments[2],2),a(t,!1,function(t){n.push(u(t,r++))})):a(t,!1,n.push,n),new this(n))}})}},function(t,e,n){"use strict";var r=n(0);t.exports=function(t){r(r.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},function(t,e,n){"use strict";t.exports=n(41)||!n(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete n(2)[t]})},function(t,e,n){for(var r,o=n(2),i=n(13),a=n(42),u=a("typed_array"),s=a("view"),l=!(!o.ArrayBuffer||!o.DataView),c=l,f=0,p="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=o[p[f++]])?(i(r.prototype,u,!0),i(r.prototype,s,!0)):c=!1;t.exports={ABV:l,CONSTR:c,TYPED:u,VIEW:s}},function(t,e,n){"use strict";var r=n(2),o=n(0),i=n(12),a=n(33),u=n(32),s=n(34),l=n(35),c=n(4),f=n(3),p=n(62),h=n(48),d=n(95);t.exports=function(t,e,n,v,y,g){var b=r[t],m=b,_=y?"set":"add",w=m&&m.prototype,x={},O=function(t){var e=w[t];i(w,t,"delete"==t?function(t){return!(g&&!c(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!c(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!c(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof m&&(g||w.forEach&&!f(function(){(new m).entries().next()}))){var E=new m,k=E[_](g?{}:-0,1)!=E,A=f(function(){E.has(1)}),S=p(function(t){new m(t)}),j=!g&&f(function(){for(var t=new m,e=5;e--;)t[_](e,e);return!t.has(-0)});S||((m=e(function(e,n){l(e,m,t);var r=d(new b,e,m);return void 0!=n&&s(n,y,r[_],r),r})).prototype=w,w.constructor=m),(A||j)&&(O("delete"),O("has"),y&&O("get")),(j||k)&&O(_),g&&w.clear&&delete w.clear}else m=v.getConstructor(e,t,y,_),a(m.prototype,n),u.NEED=!0;return h(m,t),x[t]=m,o(o.G+o.W+o.F*(m!=b),x),g||v.setStrong(m,t,y),m}},function(t,e,n){var r=n(1),o=n(10),i=n(5)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||void 0==(n=r(a)[i])?e:o(n)}},function(t,e,n){"use strict";var r=n(13),o=n(12),i=n(3),a=n(25),u=n(5);t.exports=function(t,e,n){var s=u(t),l=n(a,s,""[t]),c=l[0],f=l[1];i(function(){var e={};return e[s]=function(){return 7},7!=""[t](e)})&&(o(String.prototype,t,c),r(RegExp.prototype,s,2==e?function(t,e){return f.call(t,this,e)}:function(t){return f.call(t,this)}))}},function(t,e,n){"use strict";var r=n(1);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){var r=n(5)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:n=!0}},i[r]=function(){return a},t(i)}catch(t){}return n}},function(t,e,n){var r=n(4),o=n(20),i=n(5)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},function(t,e,n){var r=n(20);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(18),o=n(6),i=n(39);t.exports=function(t){return function(e,n,a){var u,s=r(e),l=o(s.length),c=i(a,l);if(t&&n!=n){for(;l>c;)if((u=s[c++])!=u)return!0}else for(;l>c;c++)if((t||c in s)&&s[c]===n)return t||c||0;return!t&&-1}}},function(t,e,n){var r=n(2),o=r["__core-js_shared__"]||(r["__core-js_shared__"]={});t.exports=function(t){return o[t]||(o[t]={})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"ql-video-embed",props:{url:{type:String,default:""},meta:{type:Object,default:function(){return{}}}},computed:{embedUrl:function(){return"Vimeo"===this.meta.site_name?this.meta.player.url:"YouTube"===this.meta.site_name?"https://www.youtube.com/embed/"+this.meta.url.split("watch?v=")[1]+"?feature=oembed":""}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"ql-embed-source-image",props:{image:{type:String,default:""}},data:function(){return{hasError:!1}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"ql-embed-source-icon",props:{icon:{type:String,default:""}},data:function(){return{hasError:!1}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=a(n(189)),o=a(n(186)),i=a(n(183));function a(t){return t&&t.__esModule?t:{default:t}}e.default={name:"ql-link-embed",components:{SourceIcon:r.default,SourceImage:o.default},props:{url:{type:String,default:""},meta:{type:Object,default:function(){return{}}}},computed:{description:function(){return(0,i.default)(this.meta.description,{length:256})},publisher:function(){return this.meta.site_name||(0,i.default)(this.meta.url,{length:64})}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(n(192)),o=i(n(159));function i(t){return t&&t.__esModule?t:{default:t}}e.default={name:"ql-embed-item",components:{LinkEmbed:r.default,VideoEmbed:o.default},props:{url:{type:String,default:""},meta:{type:Object,default:function(){return{}}}},computed:{componentType:function(){return"video"===this.meta.embed.type?"video-embed":"link"===this.meta.embed.type?"link-embed":"default-embed"}},mounted:function(){console.log(this.meta)}}},function(t,e){var n=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");t.exports=function(t){return n.test(t)}},function(t,e,n){var r=n(182).Symbol;t.exports=r},function(t,e,n){"use strict";(function(e){var r=n(15),o=n(213),i={"Content-Type":"application/x-www-form-urlencoded"};function a(t,e){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var u,s={adapter:("undefined"!=typeof XMLHttpRequest?u=n(117):void 0!==e&&(u=n(117)),u),transformRequest:[function(t,e){return o(e,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(a(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(a(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300}};s.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(t){s.headers[t]={}}),r.forEach(["post","put","patch"],function(t){s.headers[t]=r.merge(i)}),t.exports=s}).call(this,n(118))},function(t,e,n){var r=n(2).navigator;t.exports=r&&r.userAgent||""},function(t,e,n){"use strict";var r=n(2),o=n(8),i=n(41),a=n(57),u=n(13),s=n(33),l=n(3),c=n(35),f=n(24),p=n(6),h=n(129),d=n(37).f,v=n(7).f,y=n(82),g=n(48),b="prototype",m="Wrong index!",_=r.ArrayBuffer,w=r.DataView,x=r.Math,O=r.RangeError,E=r.Infinity,k=_,A=x.abs,S=x.pow,j=x.floor,N=x.log,T=x.LN2,P=o?"_b":"buffer",C=o?"_l":"byteLength",L=o?"_o":"byteOffset";function q(t,e,n){var r,o,i,a=new Array(n),u=8*n-e-1,s=(1<<u)-1,l=s>>1,c=23===e?S(2,-24)-S(2,-77):0,f=0,p=t<0||0===t&&1/t<0?1:0;for((t=A(t))!=t||t===E?(o=t!=t?1:0,r=s):(r=j(N(t)/T),t*(i=S(2,-r))<1&&(r--,i*=2),(t+=r+l>=1?c/i:c*S(2,1-l))*i>=2&&(r++,i/=2),r+l>=s?(o=0,r=s):r+l>=1?(o=(t*i-1)*S(2,e),r+=l):(o=t*S(2,l-1)*S(2,e),r=0));e>=8;a[f++]=255&o,o/=256,e-=8);for(r=r<<e|o,u+=e;u>0;a[f++]=255&r,r/=256,u-=8);return a[--f]|=128*p,a}function M(t,e,n){var r,o=8*n-e-1,i=(1<<o)-1,a=i>>1,u=o-7,s=n-1,l=t[s--],c=127&l;for(l>>=7;u>0;c=256*c+t[s],s--,u-=8);for(r=c&(1<<-u)-1,c>>=-u,u+=e;u>0;r=256*r+t[s],s--,u-=8);if(0===c)c=1-a;else{if(c===i)return r?NaN:l?-E:E;r+=S(2,e),c-=a}return(l?-1:1)*r*S(2,c-e)}function R(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function I(t){return[255&t]}function B(t){return[255&t,t>>8&255]}function D(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function F(t){return q(t,52,8)}function U(t){return q(t,23,4)}function $(t,e,n){v(t[b],e,{get:function(){return this[n]}})}function H(t,e,n,r){var o=h(+n);if(o+e>t[C])throw O(m);var i=t[P]._b,a=o+t[L],u=i.slice(a,a+e);return r?u:u.reverse()}function z(t,e,n,r,o,i){var a=h(+n);if(a+e>t[C])throw O(m);for(var u=t[P]._b,s=a+t[L],l=r(+o),c=0;c<e;c++)u[s+c]=l[i?c:e-c-1]}if(a.ABV){if(!l(function(){_(1)})||!l(function(){new _(-1)})||l(function(){return new _,new _(1.5),new _(NaN),"ArrayBuffer"!=_.name})){for(var V,W=(_=function(t){return c(this,_),new k(h(t))})[b]=k[b],K=d(k),Y=0;K.length>Y;)(V=K[Y++])in _||u(_,V,k[V]);i||(W.constructor=_)}var G=new w(new _(2)),Z=w[b].setInt8;G.setInt8(0,2147483648),G.setInt8(1,2147483649),!G.getInt8(0)&&G.getInt8(1)||s(w[b],{setInt8:function(t,e){Z.call(this,t,e<<24>>24)},setUint8:function(t,e){Z.call(this,t,e<<24>>24)}},!0)}else _=function(t){c(this,_,"ArrayBuffer");var e=h(t);this._b=y.call(new Array(e),0),this[C]=e},w=function(t,e,n){c(this,w,"DataView"),c(t,_,"DataView");var r=t[C],o=f(e);if(o<0||o>r)throw O("Wrong offset!");if(o+(n=void 0===n?r-o:p(n))>r)throw O("Wrong length!");this[P]=t,this[L]=o,this[C]=n},o&&($(_,"byteLength","_l"),$(w,"buffer","_b"),$(w,"byteLength","_l"),$(w,"byteOffset","_o")),s(w[b],{getInt8:function(t){return H(this,1,t)[0]<<24>>24},getUint8:function(t){return H(this,1,t)[0]},getInt16:function(t){var e=H(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=H(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return R(H(this,4,t,arguments[1]))},getUint32:function(t){return R(H(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return M(H(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return M(H(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){z(this,1,t,I,e)},setUint8:function(t,e){z(this,1,t,I,e)},setInt16:function(t,e){z(this,2,t,B,e,arguments[2])},setUint16:function(t,e){z(this,2,t,B,e,arguments[2])},setInt32:function(t,e){z(this,4,t,D,e,arguments[2])},setUint32:function(t,e){z(this,4,t,D,e,arguments[2])},setFloat32:function(t,e){z(this,4,t,U,e,arguments[2])},setFloat64:function(t,e){z(this,8,t,F,e,arguments[2])}});g(_,"ArrayBuffer"),g(w,"DataView"),u(w[b],a.VIEW,!0),e.ArrayBuffer=_,e.DataView=w},function(t,e,n){"use strict";var r=n(10);t.exports.f=function(t){return new function(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r}),this.resolve=r(e),this.reject=r(n)}(t)}},function(t,e,n){var r=n(2),o=n(80).set,i=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,s="process"==n(20)(a);t.exports=function(){var t,e,n,l=function(){var r,o;for(s&&(r=a.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(s)n=function(){a.nextTick(l)};else if(!i||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var c=u.resolve();n=function(){c.then(l)}}else n=function(){o.call(r,l)};else{var f=!0,p=document.createTextNode("");new i(l).observe(p,{characterData:!0}),n=function(){p.data=f=!f}}return function(r){var o={fn:r,next:void 0};e&&(e.next=o),t||(t=o,n()),e=o}}},function(t,e,n){var r,o,i,a=n(21),u=n(148),s=n(98),l=n(102),c=n(2),f=c.process,p=c.setImmediate,h=c.clearImmediate,d=c.MessageChannel,v=c.Dispatch,y=0,g={},b=function(){var t=+this;if(g.hasOwnProperty(t)){var e=g[t];delete g[t],e()}},m=function(t){b.call(t.data)};p&&h||(p=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return g[++y]=function(){u("function"==typeof t?t:Function(t),e)},r(y),y},h=function(t){delete g[t]},"process"==n(20)(f)?r=function(t){f.nextTick(a(b,t,1))}:v&&v.now?r=function(t){v.now(a(b,t,1))}:d?(i=(o=new d).port2,o.port1.onmessage=m,r=a(i.postMessage,i,1)):c.addEventListener&&"function"==typeof postMessage&&!c.importScripts?(r=function(t){c.postMessage(t+"","*")},c.addEventListener("message",m,!1)):r="onreadystatechange"in l("script")?function(t){s.appendChild(l("script")).onreadystatechange=function(){s.removeChild(this),b.call(t)}}:function(t){setTimeout(a(b,t,1),0)}),t.exports={set:p,clear:h}},function(t,e,n){"use strict";var r=n(31),o=n(138),i=n(46),a=n(18);t.exports=n(90)(Array,"Array",function(t,e){this._t=a(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,e,n){"use strict";var r=n(9),o=n(39),i=n(6);t.exports=function(t){for(var e=r(this),n=i(e.length),a=arguments.length,u=o(a>1?arguments[1]:void 0,n),s=a>2?arguments[2]:void 0,l=void 0===s?n:o(s,n);l>u;)e[u++]=t;return e}},function(t,e,n){var r=n(338);t.exports=function(t,e){return new(r(t))(e)}},function(t,e,n){var r=n(51),o=n(5)("iterator"),i=n(46);t.exports=n(27).getIteratorMethod=function(t){if(void 0!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,e,n){"use strict";var r=n(7),o=n(43);t.exports=function(t,e,n){e in t?r.f(t,e,o(0,n)):t[e]=n}},function(t,e,n){var r=n(46),o=n(5)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,e,n){var r=n(5)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,n){var r=n(63),o=n(25);t.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(t))}},function(t,e,n){"use strict";var r=n(38),o=n(43),i=n(48),a={};n(13)(a,n(5)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(a,{next:o(1,n)}),i(t,e+" Iterator")}},function(t,e,n){"use strict";var r=n(41),o=n(0),i=n(12),a=n(13),u=n(14),s=n(46),l=n(89),c=n(48),f=n(16),p=n(5)("iterator"),h=!([].keys&&"next"in[].keys()),d=function(){return this};t.exports=function(t,e,n,v,y,g,b){l(n,e,v);var m,_,w,x=function(t){if(!h&&t in A)return A[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},O=e+" Iterator",E="values"==y,k=!1,A=t.prototype,S=A[p]||A["@@iterator"]||y&&A[y],j=!h&&S||x(y),N=y?E?x("entries"):j:void 0,T="Array"==e&&A.entries||S;if(T&&(w=f(T.call(new t)))!==Object.prototype&&w.next&&(c(w,O,!0),r||u(w,p)||a(w,p,d)),E&&S&&"values"!==S.name&&(k=!0,j=function(){return S.call(this)}),r&&!b||!h&&!k&&A[p]||a(A,p,j),s[e]=j,s[O]=d,y)if(m={values:E?j:x("values"),keys:g?j:x("keys"),entries:N},b)for(_ in m)_ in A||i(A,_,m[_]);else o(o.P+o.F*(h||k),e,m);return m}},function(t,e,n){var r=n(24),o=n(25);t.exports=function(t){return function(e,n){var i,a,u=String(o(e)),s=r(n),l=u.length;return s<0||s>=l?t?"":void 0:(i=u.charCodeAt(s))<55296||i>56319||s+1===l||(a=u.charCodeAt(s+1))<56320||a>57343?t?u.charAt(s):i:t?u.slice(s,s+2):a-56320+(i-55296<<10)+65536}}},function(t,e){var n=Math.expm1;t.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:n},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e,n){"use strict";var r=n(24),o=n(25);t.exports=function(t){var e=String(o(this)),n="",i=r(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(e+=e))1&i&&(n+=e);return n}},function(t,e,n){var r=n(4),o=n(97).set;t.exports=function(t,e,n){var i,a=e.constructor;return a!==n&&"function"==typeof a&&(i=a.prototype)!==n.prototype&&r(i)&&o&&o(t,i),t}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,n){var r=n(4),o=n(1),i=function(t,e){if(o(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(21)(Function.call,n(17).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return i(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:i}},function(t,e,n){var r=n(2).document;t.exports=r&&r.documentElement},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(67)("keys"),o=n(42);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e,n){var r=n(2),o=n(27),i=n(41),a=n(154),u=n(7).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||u(e,t,{value:a.f(t)})}},function(t,e,n){var r=n(4),o=n(2).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){"use strict";n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o});var r=function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"ql-embed-item"},[e(this.componentType,{tag:"component",attrs:{url:this.url,meta:this.meta}})],1)},o=[]},function(t,e,n){"use strict";n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o});var r=function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"ql-video-embed"},[e("iframe",{attrs:{src:this.embedUrl,frameborder:"0",webkitallowfullscreen:"",mozallowfullscreen:"",allowfullscreen:""}})])},o=[]},function(t,e,n){"use strict";n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o});var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"ql-link-embed"},[n("a",{staticClass:"ql-embed-link",attrs:{href:t.meta.url,target:"_blank"}},[n("span",{staticClass:"ql-embed-content"},[n("span",{staticClass:"ql-embed-description"},[t._v(t._s(t.description))]),t._v(" "),n("span",{staticClass:"ql-embed-source"},[n("source-icon",{attrs:{icon:t.meta.icon.any}}),t._v(" "),n("small",{staticClass:"ql-embed-publisher"},[t._v(t._s(t.publisher))])],1)]),t._v(" "),n("span",{staticClass:"ql-embed-image"},[n("source-image",{attrs:{image:t.meta.image.url}})],1)])])},o=[]},function(t,e,n){"use strict";n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o});var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("span",{staticClass:"ql-embed-source-image"},[t.image&&!t.hasError?n("img",{attrs:{src:t.image},on:{error:function(e){t.hasError=!0}}}):n("span",[n("svg",{attrs:{viewBox:"0 0 80 80",version:"1.1"}},[n("g",{attrs:{stroke:"none","stroke-width":"1",fill:"none","fill-rule":"evenodd"}},[n("path",{attrs:{d:"M8,8 L36,8 L36,0 L8,0 C3.6,0 0,3.6 0,8 L0,36 L8,36 L8,8 L8,8 Z M32,44 L16,64 L64,64 L52,48 L43.88,58.84 L32,44 L32,44 Z M60,26 C60,22.68 57.32,20 54,20 C50.68,20 48,22.68 48,26 C48,29.32 50.68,32 54,32 C57.32,32 60,29.32 60,26 L60,26 Z M72,0 L44,0 L44,8 L72,8 L72,36 L80,36 L80,8 C80,3.6 76.4,0 72,0 L72,0 Z M72,72 L44,72 L44,80 L72,80 C76.4,80 80,76.4 80,72 L80,44 L72,44 L72,72 L72,72 Z M8,44 L0,44 L0,72 C0,76.4 3.6,80 8,80 L36,80 L36,72 L8,72 L8,44 L8,44 Z",id:"Shape",fill:"currentcolor"}})])])])])},o=[]},function(t,e,n){"use strict";n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o});var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("span",{staticClass:"ql-embed-source-icon"},[t.icon&&!t.hasError?n("img",{attrs:{src:t.icon},on:{error:function(e){t.hasError=!0}}}):n("span",[n("svg",{attrs:{viewBox:"0 0 8 12",version:"1.1"}},[n("g",{attrs:{stroke:"none","stroke-width":"1",fill:"none","fill-rule":"evenodd"}},[n("polygon",{attrs:{id:"Shape",fill:"currentcolor",points:"0 10.59 4.58 6 0 1.41 1.41 0 7.41 6 1.41 12"}})])])])])},o=[]},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e,n){var r=n(74),o=n(179),i=n(178),a="[object Null]",u="[object Undefined]",s=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?u:a:s&&s in Object(t)?o(t):i(t)}},function(t,e,n){var r=n(110),o=n(109),i="[object Symbol]";t.exports=function(t){return"symbol"==typeof t||o(t)&&r(t)==i}},function(t,e,n){(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.exports=n}).call(this,n(44))},function(t,e,n){var r=n(74),o=n(181),i=n(180),a=n(111),u=1/0,s=r?r.prototype:void 0,l=s?s.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(i(e))return o(e,t)+"";if(a(e))return l?l.call(e):"";var n=e+"";return"0"==n&&1/e==-u?"-0":n}},function(t,e,n){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},function(t,e,n){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,e,n){"use strict";var r=n(211);t.exports=function(t,e,n,o,i){var a=new Error(t);return r(a,e,n,o,i)}},function(t,e,n){"use strict";var r=n(15),o=n(212),i=n(210),a=n(209),u=n(208),s=n(116),l="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(207);t.exports=function(t){return new Promise(function(e,c){var f=t.data,p=t.headers;r.isFormData(f)&&delete p["Content-Type"];var h=new XMLHttpRequest,d="onreadystatechange",v=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in h||u(t.url)||(h=new window.XDomainRequest,d="onload",v=!0,h.onprogress=function(){},h.ontimeout=function(){}),t.auth){var y=t.auth.username||"",g=t.auth.password||"";p.Authorization="Basic "+l(y+":"+g)}if(h.open(t.method.toUpperCase(),i(t.url,t.params,t.paramsSerializer),!0),h.timeout=t.timeout,h[d]=function(){if(h&&(4===h.readyState||v)&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in h?a(h.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?h.response:h.responseText,status:1223===h.status?204:h.status,statusText:1223===h.status?"No Content":h.statusText,headers:n,config:t,request:h};o(e,c,r),h=null}},h.onerror=function(){c(s("Network Error",t,null,h)),h=null},h.ontimeout=function(){c(s("timeout of "+t.timeout+"ms exceeded",t,"ECONNABORTED",h)),h=null},r.isStandardBrowserEnv()){var b=n(206),m=(t.withCredentials||u(t.url))&&t.xsrfCookieName?b.read(t.xsrfCookieName):void 0;m&&(p[t.xsrfHeaderName]=m)}if("setRequestHeader"in h&&r.forEach(p,function(t,e){void 0===f&&"content-type"===e.toLowerCase()?delete p[e]:h.setRequestHeader(e,t)}),t.withCredentials&&(h.withCredentials=!0),t.responseType)try{h.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&h.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then(function(t){h&&(h.abort(),c(t),h=null)}),void 0===f&&(f=null),h.send(f)})}},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var s,l=[],c=!1,f=-1;function p(){c&&s&&(c=!1,s.length?l=s.concat(l):f=-1,l.length&&h())}function h(){if(!c){var t=u(p);c=!0;for(var e=l.length;e;){for(s=l,l=[];++f<e;)s&&s[f].run();f=-1,e=l.length}s=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function v(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new d(t,e)),1!==l.length||c||u(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return t.apply(e,n)}}},function(t,e,n){"use strict";var r=Object.prototype.hasOwnProperty,o=Object.prototype.toString,i=function(t){return"function"==typeof Array.isArray?Array.isArray(t):"[object Array]"===o.call(t)},a=function(t){if(!t||"[object Object]"!==o.call(t))return!1;var e,n=r.call(t,"constructor"),i=t.constructor&&t.constructor.prototype&&r.call(t.constructor.prototype,"isPrototypeOf");if(t.constructor&&!n&&!i)return!1;for(e in t);return void 0===e||r.call(t,e)};t.exports=function t(){var e,n,r,o,u,s,l=arguments[0],c=1,f=arguments.length,p=!1;for("boolean"==typeof l&&(p=l,l=arguments[1]||{},c=2),(null==l||"object"!=typeof l&&"function"!=typeof l)&&(l={});c<f;++c)if(null!=(e=arguments[c]))for(n in e)r=l[n],l!==(o=e[n])&&(p&&o&&(a(o)||(u=i(o)))?(u?(u=!1,s=r&&i(r)?r:[]):s=r&&a(r)?r:{},l[n]=t(p,s,o)):void 0!==o&&(l[n]=o));return l}},function(t,e,n){var r=Array.prototype.slice,o=n(220),i=n(219),a=t.exports=function(t,e,n){return n||(n={}),t===e||(t instanceof Date&&e instanceof Date?t.getTime()===e.getTime():!t||!e||"object"!=typeof t&&"object"!=typeof e?n.strict?t===e:t==e:function(t,e,n){var l,c;if(u(t)||u(e))return!1;if(t.prototype!==e.prototype)return!1;if(i(t))return!!i(e)&&(t=r.call(t),e=r.call(e),a(t,e,n));if(s(t)){if(!s(e))return!1;if(t.length!==e.length)return!1;for(l=0;l<t.length;l++)if(t[l]!==e[l])return!1;return!0}try{var f=o(t),p=o(e)}catch(t){return!1}if(f.length!=p.length)return!1;for(f.sort(),p.sort(),l=f.length-1;l>=0;l--)if(f[l]!=p[l])return!1;for(l=f.length-1;l>=0;l--)if(c=f[l],!a(t[c],e[c],n))return!1;return typeof t==typeof e}(t,e,n))};function u(t){return null===t||void 0===t}function s(t){return!(!t||"object"!=typeof t||"number"!=typeof t.length)&&("function"==typeof t.copy&&"function"==typeof t.slice&&!(t.length>0&&"number"!=typeof t[0]))}},function(t,e){t.exports=Math.scale||function(t,e,n,r,o){return 0===arguments.length||t!=t||e!=e||n!=n||r!=r||o!=o?NaN:t===1/0||t===-1/0?t:(t-e)*(o-r)/(n-e)+r}},function(t,e,n){var r=n(34);t.exports=function(t,e){var n=[];return r(t,!1,n.push,n,e),n}},function(t,e,n){var r=n(51),o=n(123);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return o(this)}}},function(t,e,n){var r=n(40),o=n(18),i=n(52).f;t.exports=function(t){return function(e){for(var n,a=o(e),u=r(a),s=u.length,l=0,c=[];s>l;)i.call(a,n=u[l++])&&c.push(t?[n,a[n]]:a[n]);return c}}},function(t,e,n){var r=n(6),o=n(94),i=n(25);t.exports=function(t,e,n,a){var u=String(i(t)),s=u.length,l=void 0===n?" ":String(n),c=r(e);if(c<=s||""==l)return u;var f=c-s,p=o.call(l,Math.ceil(f/l.length));return p.length>f&&(p=p.slice(0,f)),a?p+u:u+p}},function(t,e,n){"use strict";var r=n(64),o=n(4),i=n(6),a=n(21),u=n(5)("isConcatSpreadable");t.exports=function t(e,n,s,l,c,f,p,h){for(var d,v,y=c,g=0,b=!!p&&a(p,h,3);g<l;){if(g in s){if(d=b?b(s[g],g,n):s[g],v=!1,o(d)&&(v=void 0!==(v=d[u])?!!v:r(d)),v&&f>0)y=t(e,n,d,i(d.length),y,f-1)-1;else{if(y>=9007199254740991)throw TypeError();e[y]=d}y++}g++}return y}},function(t,e,n){var r=n(37),o=n(65),i=n(1),a=n(2).Reflect;t.exports=a&&a.ownKeys||function(t){var e=r.f(i(t)),n=o.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(24),o=n(6);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=o(e);if(e!==n)throw RangeError("Wrong length!");return n}},function(t,e,n){"use strict";var r=n(33),o=n(32).getWeak,i=n(1),a=n(4),u=n(35),s=n(34),l=n(22),c=n(14),f=n(45),p=l(5),h=l(6),d=0,v=function(t){return t._l||(t._l=new y)},y=function(){this.a=[]},g=function(t,e){return p(t.a,function(t){return t[0]===e})};y.prototype={get:function(t){var e=g(this,t);if(e)return e[1]},has:function(t){return!!g(this,t)},set:function(t,e){var n=g(this,t);n?n[1]=e:this.a.push([t,e])},delete:function(t){var e=h(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,i){var l=t(function(t,r){u(t,l,e,"_i"),t._t=e,t._i=d++,t._l=void 0,void 0!=r&&s(r,n,t[i],t)});return r(l.prototype,{delete:function(t){if(!a(t))return!1;var n=o(t);return!0===n?v(f(this,e)).delete(t):n&&c(n,this._i)&&delete n[this._i]},has:function(t){if(!a(t))return!1;var n=o(t);return!0===n?v(f(this,e)).has(t):n&&c(n,this._i)}}),l},def:function(t,e,n){var r=o(i(e),!0);return!0===r?v(t).set(e,n):r[t._i]=n,t},ufstore:v}},function(t,e,n){"use strict";var r,o=n(22)(0),i=n(12),a=n(32),u=n(150),s=n(130),l=n(4),c=n(3),f=n(45),p=a.getWeak,h=Object.isExtensible,d=s.ufstore,v={},y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},g={get:function(t){if(l(t)){var e=p(t);return!0===e?d(f(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return s.def(f(this,"WeakMap"),t,e)}},b=t.exports=n(58)("WeakMap",y,g,s,!0,!0);c(function(){return 7!=(new b).set((Object.freeze||Object)(v),7).get(v)})&&(u((r=s.getConstructor(y,"WeakMap")).prototype,g),a.NEED=!0,o(["delete","has","get","set"],function(t){var e=b.prototype,n=e[t];i(e,t,function(e,o){if(l(e)&&!h(e)){this._f||(this._f=new r);var i=this._f[t](e,o);return"set"==t?this:i}return n.call(this,e,o)})}))},function(t,e,n){"use strict";var r=n(133),o=n(45);t.exports=n(58)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"Set"),t=0===t?0:t,t)}},r)},function(t,e,n){"use strict";var r=n(7).f,o=n(38),i=n(33),a=n(21),u=n(35),s=n(34),l=n(90),c=n(138),f=n(36),p=n(8),h=n(32).fastKey,d=n(45),v=p?"_s":"size",y=function(t,e){var n,r=h(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};t.exports={getConstructor:function(t,e,n,l){var c=t(function(t,r){u(t,c,e,"_i"),t._t=e,t._i=o(null),t._f=void 0,t._l=void 0,t[v]=0,void 0!=r&&s(r,n,t[l],t)});return i(c.prototype,{clear:function(){for(var t=d(this,e),n=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var n=d(this,e),r=y(n,t);if(r){var o=r.n,i=r.p;delete n._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==r&&(n._f=o),n._l==r&&(n._l=i),n[v]--}return!!r},forEach:function(t){d(this,e);for(var n,r=a(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!y(d(this,e),t)}}),p&&r(c.prototype,"size",{get:function(){return d(this,e)[v]}}),c},def:function(t,e,n){var r,o,i=y(t,e);return i?i.v=n:(t._l=i={i:o=h(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=i),r&&(r.n=i),t[v]++,"F"!==o&&(t._i[o]=i)),t},getEntry:y,setStrong:function(t,e,n){l(t,e,function(t,n){this._t=d(t,e),this._k=n,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?c(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,c(1))},n?"entries":"values",!n,!0),f(e)}}},function(t,e,n){"use strict";var r=n(133),o=n(45);t.exports=n(58)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=r.getEntry(o(this,"Map"),t);return e&&e.v},set:function(t,e){return r.def(o(this,"Map"),0===t?0:t,e)}},r,!0)},function(t,e,n){var r=n(1),o=n(4),i=n(78);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){n(8)&&"g"!=/./g.flags&&n(7).f(RegExp.prototype,"flags",{configurable:!0,get:n(61)})},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){"use strict";var r=n(9),o=n(39),i=n(6);t.exports=[].copyWithin||function(t,e){var n=r(this),a=i(n.length),u=o(t,a),s=o(e,a),l=arguments.length>2?arguments[2]:void 0,c=Math.min((void 0===l?a:o(l,a))-s,a-u),f=1;for(s<u&&u<s+c&&(f=-1,s+=c-1,u+=c-1);c-- >0;)s in n?n[u]=n[s]:delete n[u],u+=f,s+=f;return n}},function(t,e,n){var r=n(10),o=n(9),i=n(53),a=n(6);t.exports=function(t,e,n,u,s){r(e);var l=o(t),c=i(l),f=a(l.length),p=s?f-1:0,h=s?-1:1;if(n<2)for(;;){if(p in c){u=c[p],p+=h;break}if(p+=h,s?p<0:f<=p)throw TypeError("Reduce of empty array with no initial value")}for(;s?p>=0:f>p;p+=h)p in c&&(u=e(u,c[p],p,l));return u}},function(t,e,n){var r=n(1);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},function(t,e,n){var r=n(93),o=Math.pow,i=o(2,-52),a=o(2,-23),u=o(2,127)*(2-a),s=o(2,-126);t.exports=Math.fround||function(t){var e,n,o=Math.abs(t),l=r(t);return o<s?l*(o/s/a+1/i-1/i)*s*a:(n=(e=(1+a/i)*o)-(e-o))>u||n!=n?l*(1/0):l*n}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,n){var r=n(4),o=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&o(t)===t}},function(t,e,n){var r=n(20);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(e);return+t}},function(t,e,n){var r=n(2).parseFloat,o=n(47).trim;t.exports=1/r(n(96)+"-0")!=-1/0?function(t){var e=o(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},function(t,e,n){var r=n(2).parseInt,o=n(47).trim,i=n(96),a=/^[-+]?0[xX]/;t.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(t,e){var n=o(String(t),3);return r(n,e>>>0||(a.test(n)?16:10))}:r},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){"use strict";var r=n(10),o=n(4),i=n(148),a=[].slice,u={};t.exports=Function.bind||function(t){var e=r(this),n=a.call(arguments,1),s=function(){var r=n.concat(a.call(arguments));return this instanceof s?function(t,e,n){if(!(e in u)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";u[e]=Function("F,a","return new F("+r.join(",")+")")}return u[e](t,n)}(e,r.length,r):i(e,r,t)};return o(e.prototype)&&(s.prototype=e.prototype),s}},function(t,e,n){"use strict";var r=n(40),o=n(65),i=n(52),a=n(9),u=n(53),s=Object.assign;t.exports=!s||n(3)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=s({},t)[n]||Object.keys(s({},e)).join("")!=r})?function(t,e){for(var n=a(t),s=arguments.length,l=1,c=o.f,f=i.f;s>l;)for(var p,h=u(arguments[l++]),d=c?r(h).concat(c(h)):r(h),v=d.length,y=0;v>y;)f.call(h,p=d[y++])&&(n[p]=h[p]);return n}:s},function(t,e,n){var r=n(18),o=n(37).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return a.slice()}}(t):o(r(t))}},function(t,e,n){var r=n(7),o=n(1),i=n(40);t.exports=n(8)?Object.defineProperties:function(t,e){o(t);for(var n,a=i(e),u=a.length,s=0;u>s;)r.f(t,n=a[s++],e[n]);return t}},function(t,e,n){var r=n(14),o=n(18),i=n(66)(!1),a=n(100)("IE_PROTO");t.exports=function(t,e){var n,u=o(t),s=0,l=[];for(n in u)n!=a&&r(u,n)&&l.push(n);for(;e.length>s;)r(u,n=e[s++])&&(~i(l,n)||l.push(n));return l}},function(t,e,n){e.f=n(5)},function(t,e,n){t.exports=!n(8)&&!n(3)(function(){return 7!=Object.defineProperty(n(102)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){(function(e){
/*!
 * Quill Editor v1.3.6
 * https://quilljs.com/
 * Copyright (c) 2014, Jason Chen
 * Copyright (c) 2013, salesforce.com
 */
var n;"undefined"!=typeof self&&self,n=function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=109)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(17),o=n(18),i=n(19),a=n(45),u=n(46),s=n(47),l=n(48),c=n(49),f=n(12),p=n(32),h=n(33),d=n(31),v=n(1),y={Scope:v.Scope,create:v.create,find:v.find,query:v.query,register:v.register,Container:r.default,Format:o.default,Leaf:i.default,Embed:l.default,Scroll:a.default,Block:s.default,Inline:u.default,Text:c.default,Attributor:{Attribute:f.default,Class:p.default,Style:h.default,Store:d.default}};e.default=y},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e){var n=this;return e="[Parchment] "+e,(n=t.call(this,e)||this).message=e,n.name=n.constructor.name,n}return o(e,t),e}(Error);e.ParchmentError=i;var a,u={},s={},l={},c={};function f(t,e){var n;if(void 0===e&&(e=a.ANY),"string"==typeof t)n=c[t]||u[t];else if(t instanceof Text||t.nodeType===Node.TEXT_NODE)n=c.text;else if("number"==typeof t)t&a.LEVEL&a.BLOCK?n=c.block:t&a.LEVEL&a.INLINE&&(n=c.inline);else if(t instanceof HTMLElement){var r=(t.getAttribute("class")||"").split(/\s+/);for(var o in r)if(n=s[r[o]])break;n=n||l[t.tagName]}return null==n?null:e&a.LEVEL&n.scope&&e&a.TYPE&n.scope?n:null}e.DATA_KEY="__blot",function(t){t[t.TYPE=3]="TYPE",t[t.LEVEL=12]="LEVEL",t[t.ATTRIBUTE=13]="ATTRIBUTE",t[t.BLOT=14]="BLOT",t[t.INLINE=7]="INLINE",t[t.BLOCK=11]="BLOCK",t[t.BLOCK_BLOT=10]="BLOCK_BLOT",t[t.INLINE_BLOT=6]="INLINE_BLOT",t[t.BLOCK_ATTRIBUTE=9]="BLOCK_ATTRIBUTE",t[t.INLINE_ATTRIBUTE=5]="INLINE_ATTRIBUTE",t[t.ANY=15]="ANY"}(a=e.Scope||(e.Scope={})),e.create=function(t,e){var n=f(t);if(null==n)throw new i("Unable to create "+t+" blot");var r=n;return new r(t instanceof Node||t.nodeType===Node.TEXT_NODE?t:r.create(e),e)},e.find=function t(n,r){return void 0===r&&(r=!1),null==n?null:null!=n[e.DATA_KEY]?n[e.DATA_KEY].blot:r?t(n.parentNode,r):null},e.query=f,e.register=function t(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];if(e.length>1)return e.map(function(e){return t(e)});var r=e[0];if("string"!=typeof r.blotName&&"string"!=typeof r.attrName)throw new i("Invalid definition");if("abstract"===r.blotName)throw new i("Cannot register abstract class");c[r.blotName||r.attrName]=r,"string"==typeof r.keyName?u[r.keyName]=r:(null!=r.className&&(s[r.className]=r),null!=r.tagName&&(Array.isArray(r.tagName)?r.tagName=r.tagName.map(function(t){return t.toUpperCase()}):r.tagName=r.tagName.toUpperCase(),(Array.isArray(r.tagName)?r.tagName:[r.tagName]).forEach(function(t){null!=l[t]&&null!=r.className||(l[t]=r)})));return r}},function(t,e,n){var r=n(51),o=n(11),i=n(3),a=n(20),u=String.fromCharCode(0),s=function(t){Array.isArray(t)?this.ops=t:null!=t&&Array.isArray(t.ops)?this.ops=t.ops:this.ops=[]};s.prototype.insert=function(t,e){var n={};return 0===t.length?this:(n.insert=t,null!=e&&"object"==typeof e&&Object.keys(e).length>0&&(n.attributes=e),this.push(n))},s.prototype.delete=function(t){return t<=0?this:this.push({delete:t})},s.prototype.retain=function(t,e){if(t<=0)return this;var n={retain:t};return null!=e&&"object"==typeof e&&Object.keys(e).length>0&&(n.attributes=e),this.push(n)},s.prototype.push=function(t){var e=this.ops.length,n=this.ops[e-1];if(t=i(!0,{},t),"object"==typeof n){if("number"==typeof t.delete&&"number"==typeof n.delete)return this.ops[e-1]={delete:n.delete+t.delete},this;if("number"==typeof n.delete&&null!=t.insert&&(e-=1,"object"!=typeof(n=this.ops[e-1])))return this.ops.unshift(t),this;if(o(t.attributes,n.attributes)){if("string"==typeof t.insert&&"string"==typeof n.insert)return this.ops[e-1]={insert:n.insert+t.insert},"object"==typeof t.attributes&&(this.ops[e-1].attributes=t.attributes),this;if("number"==typeof t.retain&&"number"==typeof n.retain)return this.ops[e-1]={retain:n.retain+t.retain},"object"==typeof t.attributes&&(this.ops[e-1].attributes=t.attributes),this}}return e===this.ops.length?this.ops.push(t):this.ops.splice(e,0,t),this},s.prototype.chop=function(){var t=this.ops[this.ops.length-1];return t&&t.retain&&!t.attributes&&this.ops.pop(),this},s.prototype.filter=function(t){return this.ops.filter(t)},s.prototype.forEach=function(t){this.ops.forEach(t)},s.prototype.map=function(t){return this.ops.map(t)},s.prototype.partition=function(t){var e=[],n=[];return this.forEach(function(r){(t(r)?e:n).push(r)}),[e,n]},s.prototype.reduce=function(t,e){return this.ops.reduce(t,e)},s.prototype.changeLength=function(){return this.reduce(function(t,e){return e.insert?t+a.length(e):e.delete?t-e.delete:t},0)},s.prototype.length=function(){return this.reduce(function(t,e){return t+a.length(e)},0)},s.prototype.slice=function(t,e){t=t||0,"number"!=typeof e&&(e=1/0);for(var n=[],r=a.iterator(this.ops),o=0;o<e&&r.hasNext();){var i;o<t?i=r.next(t-o):(i=r.next(e-o),n.push(i)),o+=a.length(i)}return new s(n)},s.prototype.compose=function(t){for(var e=a.iterator(this.ops),n=a.iterator(t.ops),r=new s;e.hasNext()||n.hasNext();)if("insert"===n.peekType())r.push(n.next());else if("delete"===e.peekType())r.push(e.next());else{var o=Math.min(e.peekLength(),n.peekLength()),i=e.next(o),u=n.next(o);if("number"==typeof u.retain){var l={};"number"==typeof i.retain?l.retain=o:l.insert=i.insert;var c=a.attributes.compose(i.attributes,u.attributes,"number"==typeof i.retain);c&&(l.attributes=c),r.push(l)}else"number"==typeof u.delete&&"number"==typeof i.retain&&r.push(u)}return r.chop()},s.prototype.concat=function(t){var e=new s(this.ops.slice());return t.ops.length>0&&(e.push(t.ops[0]),e.ops=e.ops.concat(t.ops.slice(1))),e},s.prototype.diff=function(t,e){if(this.ops===t.ops)return new s;var n=[this,t].map(function(e){return e.map(function(n){if(null!=n.insert)return"string"==typeof n.insert?n.insert:u;throw new Error("diff() called "+(e===t?"on":"with")+" non-document")}).join("")}),i=new s,l=r(n[0],n[1],e),c=a.iterator(this.ops),f=a.iterator(t.ops);return l.forEach(function(t){for(var e=t[1].length;e>0;){var n=0;switch(t[0]){case r.INSERT:n=Math.min(f.peekLength(),e),i.push(f.next(n));break;case r.DELETE:n=Math.min(e,c.peekLength()),c.next(n),i.delete(n);break;case r.EQUAL:n=Math.min(c.peekLength(),f.peekLength(),e);var u=c.next(n),s=f.next(n);o(u.insert,s.insert)?i.retain(n,a.attributes.diff(u.attributes,s.attributes)):i.push(s).delete(n)}e-=n}}),i.chop()},s.prototype.eachLine=function(t,e){e=e||"\n";for(var n=a.iterator(this.ops),r=new s,o=0;n.hasNext();){if("insert"!==n.peekType())return;var i=n.peek(),u=a.length(i)-n.peekLength(),l="string"==typeof i.insert?i.insert.indexOf(e,u)-u:-1;if(l<0)r.push(n.next());else if(l>0)r.push(n.next(l));else{if(!1===t(r,n.next(1).attributes||{},o))return;o+=1,r=new s}}r.length()>0&&t(r,{},o)},s.prototype.transform=function(t,e){if(e=!!e,"number"==typeof t)return this.transformPosition(t,e);for(var n=a.iterator(this.ops),r=a.iterator(t.ops),o=new s;n.hasNext()||r.hasNext();)if("insert"!==n.peekType()||!e&&"insert"===r.peekType())if("insert"===r.peekType())o.push(r.next());else{var i=Math.min(n.peekLength(),r.peekLength()),u=n.next(i),l=r.next(i);if(u.delete)continue;l.delete?o.push(l):o.retain(i,a.attributes.transform(u.attributes,l.attributes,e))}else o.retain(a.length(n.next()));return o.chop()},s.prototype.transformPosition=function(t,e){e=!!e;for(var n=a.iterator(this.ops),r=0;n.hasNext()&&r<=t;){var o=n.peekLength(),i=n.peekType();n.next(),"delete"!==i?("insert"===i&&(r<t||!e)&&(t+=o),r+=o):t-=Math.min(o,t-r)}return t},t.exports=s},function(t,e){"use strict";var n=Object.prototype.hasOwnProperty,r=Object.prototype.toString,o=function(t){return"function"==typeof Array.isArray?Array.isArray(t):"[object Array]"===r.call(t)},i=function(t){if(!t||"[object Object]"!==r.call(t))return!1;var e,o=n.call(t,"constructor"),i=t.constructor&&t.constructor.prototype&&n.call(t.constructor.prototype,"isPrototypeOf");if(t.constructor&&!o&&!i)return!1;for(e in t);return void 0===e||n.call(t,e)};t.exports=function t(){var e,n,r,a,u,s,l=arguments[0],c=1,f=arguments.length,p=!1;for("boolean"==typeof l&&(p=l,l=arguments[1]||{},c=2),(null==l||"object"!=typeof l&&"function"!=typeof l)&&(l={});c<f;++c)if(null!=(e=arguments[c]))for(n in e)r=l[n],l!==(a=e[n])&&(p&&a&&(i(a)||(u=o(a)))?(u?(u=!1,s=r&&o(r)?r:[]):s=r&&i(r)?r:{},l[n]=t(p,s,a)):void 0!==a&&(l[n]=a));return l}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.BlockEmbed=e.bubbleFormats=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=f(n(3)),a=f(n(2)),u=f(n(0)),s=f(n(16)),l=f(n(6)),c=f(n(7));function f(t){return t&&t.__esModule?t:{default:t}}function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function d(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var v=function(t){function e(){return p(this,e),h(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return d(e,u.default.Embed),r(e,[{key:"attach",value:function(){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"attach",this).call(this),this.attributes=new u.default.Attributor.Store(this.domNode)}},{key:"delta",value:function(){return(new a.default).insert(this.value(),(0,i.default)(this.formats(),this.attributes.values()))}},{key:"format",value:function(t,e){var n=u.default.query(t,u.default.Scope.BLOCK_ATTRIBUTE);null!=n&&this.attributes.attribute(n,e)}},{key:"formatAt",value:function(t,e,n,r){this.format(n,r)}},{key:"insertAt",value:function(t,n,r){if("string"==typeof n&&n.endsWith("\n")){var i=u.default.create(y.blotName);this.parent.insertBefore(i,0===t?this:this.next),i.insertAt(0,n.slice(0,-1))}else o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertAt",this).call(this,t,n,r)}}]),e}();v.scope=u.default.Scope.BLOCK_BLOT;var y=function(t){function e(t){p(this,e);var n=h(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.cache={},n}return d(e,u.default.Block),r(e,[{key:"delta",value:function(){return null==this.cache.delta&&(this.cache.delta=this.descendants(u.default.Leaf).reduce(function(t,e){return 0===e.length()?t:t.insert(e.value(),g(e))},new a.default).insert("\n",g(this))),this.cache.delta}},{key:"deleteAt",value:function(t,n){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"deleteAt",this).call(this,t,n),this.cache={}}},{key:"formatAt",value:function(t,n,r,i){n<=0||(u.default.query(r,u.default.Scope.BLOCK)?t+n===this.length()&&this.format(r,i):o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"formatAt",this).call(this,t,Math.min(n,this.length()-t-1),r,i),this.cache={})}},{key:"insertAt",value:function(t,n,r){if(null!=r)return o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertAt",this).call(this,t,n,r);if(0!==n.length){var i=n.split("\n"),a=i.shift();a.length>0&&(t<this.length()-1||null==this.children.tail?o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertAt",this).call(this,Math.min(t,this.length()-1),a):this.children.tail.insertAt(this.children.tail.length(),a),this.cache={});var u=this;i.reduce(function(t,e){return(u=u.split(t,!0)).insertAt(0,e),e.length},t+a.length)}}},{key:"insertBefore",value:function(t,n){var r=this.children.head;o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertBefore",this).call(this,t,n),r instanceof s.default&&r.remove(),this.cache={}}},{key:"length",value:function(){return null==this.cache.length&&(this.cache.length=o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"length",this).call(this)+1),this.cache.length}},{key:"moveChildren",value:function(t,n){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"moveChildren",this).call(this,t,n),this.cache={}}},{key:"optimize",value:function(t){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t),this.cache={}}},{key:"path",value:function(t){return o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"path",this).call(this,t,!0)}},{key:"removeChild",value:function(t){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"removeChild",this).call(this,t),this.cache={}}},{key:"split",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(n&&(0===t||t>=this.length()-1)){var r=this.clone();return 0===t?(this.parent.insertBefore(r,this),this):(this.parent.insertBefore(r,this.next),r)}var i=o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"split",this).call(this,t,n);return this.cache={},i}}]),e}();function g(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return null==t?e:("function"==typeof t.formats&&(e=(0,i.default)(e,t.formats())),null==t.parent||"scroll"==t.parent.blotName||t.parent.statics.scope!==t.statics.scope?e:g(t.parent,e))}y.blotName="block",y.tagName="P",y.defaultChild="break",y.allowedChildren=[l.default,u.default.Embed,c.default],e.bubbleFormats=g,e.BlockEmbed=v,e.default=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.overload=e.expandConfig=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();n(50);var a=y(n(2)),u=y(n(14)),s=y(n(8)),l=y(n(9)),c=y(n(0)),f=n(15),p=y(f),h=y(n(3)),d=y(n(10)),v=y(n(34));function y(t){return t&&t.__esModule?t:{default:t}}function g(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var b=(0,d.default)("quill"),m=function(){function t(e){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.options=_(e,r),this.container=this.options.container,null==this.container)return b.error("Invalid Quill container",e);this.options.debug&&t.debug(this.options.debug);var o=this.container.innerHTML.trim();this.container.classList.add("ql-container"),this.container.innerHTML="",this.container.__quill=this,this.root=this.addContainer("ql-editor"),this.root.classList.add("ql-blank"),this.root.setAttribute("data-gramm",!1),this.scrollingContainer=this.options.scrollingContainer||this.root,this.emitter=new s.default,this.scroll=c.default.create(this.root,{emitter:this.emitter,whitelist:this.options.formats}),this.editor=new u.default(this.scroll),this.selection=new p.default(this.scroll,this.emitter),this.theme=new this.options.theme(this,this.options),this.keyboard=this.theme.addModule("keyboard"),this.clipboard=this.theme.addModule("clipboard"),this.history=this.theme.addModule("history"),this.theme.init(),this.emitter.on(s.default.events.EDITOR_CHANGE,function(t){t===s.default.events.TEXT_CHANGE&&n.root.classList.toggle("ql-blank",n.editor.isBlank())}),this.emitter.on(s.default.events.SCROLL_UPDATE,function(t,e){var r=n.selection.lastRange,o=r&&0===r.length?r.index:void 0;w.call(n,function(){return n.editor.update(null,e,o)},t)});var i=this.clipboard.convert("<div class='ql-editor' style=\"white-space: normal;\">"+o+"<p><br></p></div>");this.setContents(i),this.history.clear(),this.options.placeholder&&this.root.setAttribute("data-placeholder",this.options.placeholder),this.options.readOnly&&this.disable()}return i(t,null,[{key:"debug",value:function(t){!0===t&&(t="log"),d.default.level(t)}},{key:"find",value:function(t){return t.__quill||c.default.find(t)}},{key:"import",value:function(t){return null==this.imports[t]&&b.error("Cannot import "+t+". Are you sure it was registered?"),this.imports[t]}},{key:"register",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if("string"!=typeof t){var o=t.attrName||t.blotName;"string"==typeof o?this.register("formats/"+o,t,e):Object.keys(t).forEach(function(r){n.register(r,t[r],e)})}else null==this.imports[t]||r||b.warn("Overwriting "+t+" with",e),this.imports[t]=e,(t.startsWith("blots/")||t.startsWith("formats/"))&&"abstract"!==e.blotName?c.default.register(e):t.startsWith("modules")&&"function"==typeof e.register&&e.register()}}]),i(t,[{key:"addContainer",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if("string"==typeof t){var n=t;(t=document.createElement("div")).classList.add(n)}return this.container.insertBefore(t,e),t}},{key:"blur",value:function(){this.selection.setRange(null)}},{key:"deleteText",value:function(t,e,n){var r=this,i=x(t,e,n),a=o(i,4);return t=a[0],e=a[1],n=a[3],w.call(this,function(){return r.editor.deleteText(t,e)},n,t,-1*e)}},{key:"disable",value:function(){this.enable(!1)}},{key:"enable",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.scroll.enable(t),this.container.classList.toggle("ql-disabled",!t)}},{key:"focus",value:function(){var t=this.scrollingContainer.scrollTop;this.selection.focus(),this.scrollingContainer.scrollTop=t,this.scrollIntoView()}},{key:"format",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:s.default.sources.API;return w.call(this,function(){var r=n.getSelection(!0),o=new a.default;if(null==r)return o;if(c.default.query(t,c.default.Scope.BLOCK))o=n.editor.formatLine(r.index,r.length,g({},t,e));else{if(0===r.length)return n.selection.format(t,e),o;o=n.editor.formatText(r.index,r.length,g({},t,e))}return n.setSelection(r,s.default.sources.SILENT),o},r)}},{key:"formatLine",value:function(t,e,n,r,i){var a,u=this,s=x(t,e,n,r,i),l=o(s,4);return t=l[0],e=l[1],a=l[2],i=l[3],w.call(this,function(){return u.editor.formatLine(t,e,a)},i,t,0)}},{key:"formatText",value:function(t,e,n,r,i){var a,u=this,s=x(t,e,n,r,i),l=o(s,4);return t=l[0],e=l[1],a=l[2],i=l[3],w.call(this,function(){return u.editor.formatText(t,e,a)},i,t,0)}},{key:"getBounds",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=void 0;n="number"==typeof t?this.selection.getBounds(t,e):this.selection.getBounds(t.index,t.length);var r=this.container.getBoundingClientRect();return{bottom:n.bottom-r.top,height:n.height,left:n.left-r.left,right:n.right-r.left,top:n.top-r.top,width:n.width}}},{key:"getContents",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.getLength()-t,n=x(t,e),r=o(n,2);return t=r[0],e=r[1],this.editor.getContents(t,e)}},{key:"getFormat",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.getSelection(!0),e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return"number"==typeof t?this.editor.getFormat(t,e):this.editor.getFormat(t.index,t.length)}},{key:"getIndex",value:function(t){return t.offset(this.scroll)}},{key:"getLength",value:function(){return this.scroll.length()}},{key:"getLeaf",value:function(t){return this.scroll.leaf(t)}},{key:"getLine",value:function(t){return this.scroll.line(t)}},{key:"getLines",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.MAX_VALUE;return"number"!=typeof t?this.scroll.lines(t.index,t.length):this.scroll.lines(t,e)}},{key:"getModule",value:function(t){return this.theme.modules[t]}},{key:"getSelection",value:function(){return arguments.length>0&&void 0!==arguments[0]&&arguments[0]&&this.focus(),this.update(),this.selection.getRange()[0]}},{key:"getText",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.getLength()-t,n=x(t,e),r=o(n,2);return t=r[0],e=r[1],this.editor.getText(t,e)}},{key:"hasFocus",value:function(){return this.selection.hasFocus()}},{key:"insertEmbed",value:function(e,n,r){var o=this,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.sources.API;return w.call(this,function(){return o.editor.insertEmbed(e,n,r)},i,e)}},{key:"insertText",value:function(t,e,n,r,i){var a,u=this,s=x(t,0,n,r,i),l=o(s,4);return t=l[0],a=l[2],i=l[3],w.call(this,function(){return u.editor.insertText(t,e,a)},i,t,e.length)}},{key:"isEnabled",value:function(){return!this.container.classList.contains("ql-disabled")}},{key:"off",value:function(){return this.emitter.off.apply(this.emitter,arguments)}},{key:"on",value:function(){return this.emitter.on.apply(this.emitter,arguments)}},{key:"once",value:function(){return this.emitter.once.apply(this.emitter,arguments)}},{key:"pasteHTML",value:function(t,e,n){this.clipboard.dangerouslyPasteHTML(t,e,n)}},{key:"removeFormat",value:function(t,e,n){var r=this,i=x(t,e,n),a=o(i,4);return t=a[0],e=a[1],n=a[3],w.call(this,function(){return r.editor.removeFormat(t,e)},n,t)}},{key:"scrollIntoView",value:function(){this.selection.scrollIntoView(this.scrollingContainer)}},{key:"setContents",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:s.default.sources.API;return w.call(this,function(){t=new a.default(t);var n=e.getLength(),r=e.editor.deleteText(0,n),o=e.editor.applyDelta(t),i=o.ops[o.ops.length-1];return null!=i&&"string"==typeof i.insert&&"\n"===i.insert[i.insert.length-1]&&(e.editor.deleteText(e.getLength()-1,1),o.delete(1)),r.compose(o)},n)}},{key:"setSelection",value:function(e,n,r){if(null==e)this.selection.setRange(null,n||t.sources.API);else{var i=x(e,n,r),a=o(i,4);e=a[0],n=a[1],r=a[3],this.selection.setRange(new f.Range(e,n),r),r!==s.default.sources.SILENT&&this.selection.scrollIntoView(this.scrollingContainer)}}},{key:"setText",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:s.default.sources.API,n=(new a.default).insert(t);return this.setContents(n,e)}},{key:"update",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s.default.sources.USER,e=this.scroll.update(t);return this.selection.update(t),e}},{key:"updateContents",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:s.default.sources.API;return w.call(this,function(){return t=new a.default(t),e.editor.applyDelta(t,n)},n,!0)}}]),t}();function _(t,e){if((e=(0,h.default)(!0,{container:t,modules:{clipboard:!0,keyboard:!0,history:!0}},e)).theme&&e.theme!==m.DEFAULTS.theme){if(e.theme=m.import("themes/"+e.theme),null==e.theme)throw new Error("Invalid theme "+e.theme+". Did you register it?")}else e.theme=v.default;var n=(0,h.default)(!0,{},e.theme.DEFAULTS);[n,e].forEach(function(t){t.modules=t.modules||{},Object.keys(t.modules).forEach(function(e){!0===t.modules[e]&&(t.modules[e]={})})});var r=Object.keys(n.modules).concat(Object.keys(e.modules)).reduce(function(t,e){var n=m.import("modules/"+e);return null==n?b.error("Cannot load "+e+" module. Are you sure you registered it?"):t[e]=n.DEFAULTS||{},t},{});return null!=e.modules&&e.modules.toolbar&&e.modules.toolbar.constructor!==Object&&(e.modules.toolbar={container:e.modules.toolbar}),e=(0,h.default)(!0,{},m.DEFAULTS,{modules:r},n,e),["bounds","container","scrollingContainer"].forEach(function(t){"string"==typeof e[t]&&(e[t]=document.querySelector(e[t]))}),e.modules=Object.keys(e.modules).reduce(function(t,n){return e.modules[n]&&(t[n]=e.modules[n]),t},{}),e}function w(t,e,n,r){if(this.options.strict&&!this.isEnabled()&&e===s.default.sources.USER)return new a.default;var o=null==n?null:this.getSelection(),i=this.editor.delta,u=t();if(null!=o&&(!0===n&&(n=o.index),null==r?o=O(o,u,e):0!==r&&(o=O(o,n,r,e)),this.setSelection(o,s.default.sources.SILENT)),u.length()>0){var l,c,f=[s.default.events.TEXT_CHANGE,u,i,e];if((l=this.emitter).emit.apply(l,[s.default.events.EDITOR_CHANGE].concat(f)),e!==s.default.sources.SILENT)(c=this.emitter).emit.apply(c,f)}return u}function x(t,e,n,o,i){var a={};return"number"==typeof t.index&&"number"==typeof t.length?"number"!=typeof e?(i=o,o=n,n=e,e=t.length,t=t.index):(e=t.length,t=t.index):"number"!=typeof e&&(i=o,o=n,n=e,e=0),"object"===(void 0===n?"undefined":r(n))?(a=n,i=o):"string"==typeof n&&(null!=o?a[n]=o:i=n),[t,e,a,i=i||s.default.sources.API]}function O(t,e,n,r){if(null==t)return null;var i=void 0,u=void 0;if(e instanceof a.default){var l=[t.index,t.index+t.length].map(function(t){return e.transformPosition(t,r!==s.default.sources.USER)}),c=o(l,2);i=c[0],u=c[1]}else{var p=[t.index,t.index+t.length].map(function(t){return t<e||t===e&&r===s.default.sources.USER?t:n>=0?t+n:Math.max(e,t+n)}),h=o(p,2);i=h[0],u=h[1]}return new f.Range(i,u-i)}m.DEFAULTS={bounds:null,formats:null,modules:{},placeholder:"",readOnly:!1,scrollingContainer:null,strict:!0,theme:"default"},m.events=s.default.events,m.sources=s.default.sources,m.version="1.3.6",m.imports={delta:a.default,parchment:c.default,"core/module":l.default,"core/theme":v.default},e.expandConfig=_,e.overload=x,e.default=m},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=u(n(7)),a=u(n(0));function u(t){return t&&t.__esModule?t:{default:t}}var s=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default.Inline),r(e,[{key:"formatAt",value:function(t,n,r,i){if(e.compare(this.statics.blotName,r)<0&&a.default.query(r,a.default.Scope.BLOT)){var u=this.isolate(t,n);i&&u.wrap(r,i)}else o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"formatAt",this).call(this,t,n,r,i)}},{key:"optimize",value:function(t){if(o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t),this.parent instanceof e&&e.compare(this.statics.blotName,this.parent.statics.blotName)>0){var n=this.parent.isolate(this.offset(),this.length());this.moveChildren(n),n.wrap(this)}}}],[{key:"compare",value:function(t,n){var r=e.order.indexOf(t),o=e.order.indexOf(n);return r>=0||o>=0?r-o:t===n?0:t<n?-1:1}}]),e}();s.allowedChildren=[s,a.default.Embed,i.default],s.order=["cursor","inline","underline","strike","italic","bold","script","link","code"],e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};var a=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default.Text),e}();e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=i(n(54));function i(t){return t&&t.__esModule?t:{default:t}}var a=(0,i(n(10)).default)("quill:events");["selectionchange","mousedown","mouseup","click"].forEach(function(t){document.addEventListener(t,function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];[].slice.call(document.querySelectorAll(".ql-container")).forEach(function(t){var n;t.__quill&&t.__quill.emitter&&(n=t.__quill.emitter).handleDOM.apply(n,e)})})});var u=function(t){function e(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var t=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return t.listeners={},t.on("error",a.error),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,o.default),r(e,[{key:"emit",value:function(){a.log.apply(a,arguments),function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"emit",this).apply(this,arguments)}},{key:"handleDOM",value:function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];(this.listeners[t.type]||[]).forEach(function(e){var r=e.node,o=e.handler;(t.target===r||r.contains(t.target))&&o.apply(void 0,[t].concat(n))})}},{key:"listenDOM",value:function(t,e,n){this.listeners[t]||(this.listeners[t]=[]),this.listeners[t].push({node:e,handler:n})}}]),e}();u.events={EDITOR_CHANGE:"editor-change",SCROLL_BEFORE_UPDATE:"scroll-before-update",SCROLL_OPTIMIZE:"scroll-optimize",SCROLL_UPDATE:"scroll-update",SELECTION_CHANGE:"selection-change",TEXT_CHANGE:"text-change"},u.sources={API:"api",SILENT:"silent",USER:"user"},e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.quill=e,this.options=n};r.DEFAULTS={},e.default=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=["error","warn","log","info"],o="warn";function i(t){if(r.indexOf(t)<=r.indexOf(o)){for(var e,n=arguments.length,i=Array(n>1?n-1:0),a=1;a<n;a++)i[a-1]=arguments[a];(e=console)[t].apply(e,i)}}function a(t){return r.reduce(function(e,n){return e[n]=i.bind(console,n,t),e},{})}i.level=a.level=function(t){o=t},e.default=a},function(t,e,n){var r=Array.prototype.slice,o=n(52),i=n(53),a=t.exports=function(t,e,n){return n||(n={}),t===e||(t instanceof Date&&e instanceof Date?t.getTime()===e.getTime():!t||!e||"object"!=typeof t&&"object"!=typeof e?n.strict?t===e:t==e:function(t,e,n){var l,c;if(u(t)||u(e))return!1;if(t.prototype!==e.prototype)return!1;if(i(t))return!!i(e)&&(t=r.call(t),e=r.call(e),a(t,e,n));if(s(t)){if(!s(e))return!1;if(t.length!==e.length)return!1;for(l=0;l<t.length;l++)if(t[l]!==e[l])return!1;return!0}try{var f=o(t),p=o(e)}catch(t){return!1}if(f.length!=p.length)return!1;for(f.sort(),p.sort(),l=f.length-1;l>=0;l--)if(f[l]!=p[l])return!1;for(l=f.length-1;l>=0;l--)if(c=f[l],!a(t[c],e[c],n))return!1;return typeof t==typeof e}(t,e,n))};function u(t){return null===t||void 0===t}function s(t){return!(!t||"object"!=typeof t||"number"!=typeof t.length)&&("function"==typeof t.copy&&"function"==typeof t.slice&&!(t.length>0&&"number"!=typeof t[0]))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),o=function(){function t(t,e,n){void 0===n&&(n={}),this.attrName=t,this.keyName=e;var o=r.Scope.TYPE&r.Scope.ATTRIBUTE;null!=n.scope?this.scope=n.scope&r.Scope.LEVEL|o:this.scope=r.Scope.ATTRIBUTE,null!=n.whitelist&&(this.whitelist=n.whitelist)}return t.keys=function(t){return[].map.call(t.attributes,function(t){return t.name})},t.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(t.setAttribute(this.keyName,e),!0)},t.prototype.canAdd=function(t,e){return null!=r.query(t,r.Scope.BLOT&(this.scope|r.Scope.TYPE))&&(null==this.whitelist||("string"==typeof e?this.whitelist.indexOf(e.replace(/["']/g,""))>-1:this.whitelist.indexOf(e)>-1))},t.prototype.remove=function(t){t.removeAttribute(this.keyName)},t.prototype.value=function(t){var e=t.getAttribute(this.keyName);return this.canAdd(t,e)&&e?e:""},t}();e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.Code=void 0;var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=f(n(2)),u=f(n(0)),s=f(n(4)),l=f(n(6)),c=f(n(7));function f(t){return t&&t.__esModule?t:{default:t}}function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function d(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var v=function(t){function e(){return p(this,e),h(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return d(e,l.default),e}();v.blotName="code",v.tagName="CODE";var y=function(t){function e(){return p(this,e),h(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return d(e,s.default),o(e,[{key:"delta",value:function(){var t=this,e=this.domNode.textContent;return e.endsWith("\n")&&(e=e.slice(0,-1)),e.split("\n").reduce(function(e,n){return e.insert(n).insert("\n",t.formats())},new a.default)}},{key:"format",value:function(t,n){if(t!==this.statics.blotName||!n){var o=this.descendant(c.default,this.length()-1),a=r(o,1)[0];null!=a&&a.deleteAt(a.length()-1,1),i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n)}}},{key:"formatAt",value:function(t,n,r,o){if(0!==n&&null!=u.default.query(r,u.default.Scope.BLOCK)&&(r!==this.statics.blotName||o!==this.statics.formats(this.domNode))){var i=this.newlineIndex(t);if(!(i<0||i>=t+n)){var a=this.newlineIndex(t,!0)+1,s=i-a+1,l=this.isolate(a,s),c=l.next;l.format(r,o),c instanceof e&&c.formatAt(0,t-a+n-s,r,o)}}}},{key:"insertAt",value:function(t,e,n){if(null==n){var o=this.descendant(c.default,t),i=r(o,2),a=i[0],u=i[1];a.insertAt(u,e)}}},{key:"length",value:function(){var t=this.domNode.textContent.length;return this.domNode.textContent.endsWith("\n")?t:t+1}},{key:"newlineIndex",value:function(t){if(arguments.length>1&&void 0!==arguments[1]&&arguments[1])return this.domNode.textContent.slice(0,t).lastIndexOf("\n");var e=this.domNode.textContent.slice(t).indexOf("\n");return e>-1?t+e:-1}},{key:"optimize",value:function(t){this.domNode.textContent.endsWith("\n")||this.appendChild(u.default.create("text","\n")),i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t);var n=this.next;null!=n&&n.prev===this&&n.statics.blotName===this.statics.blotName&&this.statics.formats(this.domNode)===n.statics.formats(n.domNode)&&(n.optimize(t),n.moveChildren(this),n.remove())}},{key:"replace",value:function(t){i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"replace",this).call(this,t),[].slice.call(this.domNode.querySelectorAll("*")).forEach(function(t){var e=u.default.find(t);null==e?t.parentNode.removeChild(t):e instanceof u.default.Embed?e.remove():e.unwrap()})}}],[{key:"create",value:function(t){var n=i(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t);return n.setAttribute("spellcheck",!1),n}},{key:"formats",value:function(){return!0}}]),e}();y.blotName="code-block",y.tagName="PRE",y.TAB="  ",e.Code=v,e.default=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=g(n(2)),u=g(n(20)),s=g(n(0)),l=g(n(13)),c=g(n(24)),f=n(4),p=g(f),h=g(n(16)),d=g(n(21)),v=g(n(11)),y=g(n(3));function g(t){return t&&t.__esModule?t:{default:t}}var b=/^[ -~]*$/,m=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.scroll=e,this.delta=this.getDelta()}return i(t,[{key:"applyDelta",value:function(t){var e=this,n=!1;this.scroll.update();var i=this.scroll.length();return this.scroll.batchStart(),(t=function(t){return t.reduce(function(t,e){if(1===e.insert){var n=(0,d.default)(e.attributes);return delete n.image,t.insert({image:e.attributes.image},n)}if(null==e.attributes||!0!==e.attributes.list&&!0!==e.attributes.bullet||((e=(0,d.default)(e)).attributes.list?e.attributes.list="ordered":(e.attributes.list="bullet",delete e.attributes.bullet)),"string"==typeof e.insert){var r=e.insert.replace(/\r\n/g,"\n").replace(/\r/g,"\n");return t.insert(r,e.attributes)}return t.push(e)},new a.default)}(t)).reduce(function(t,a){var l=a.retain||a.delete||a.insert.length||1,c=a.attributes||{};if(null!=a.insert){if("string"==typeof a.insert){var h=a.insert;h.endsWith("\n")&&n&&(n=!1,h=h.slice(0,-1)),t>=i&&!h.endsWith("\n")&&(n=!0),e.scroll.insertAt(t,h);var d=e.scroll.line(t),v=o(d,2),g=v[0],b=v[1],m=(0,y.default)({},(0,f.bubbleFormats)(g));if(g instanceof p.default){var _=g.descendant(s.default.Leaf,b),w=o(_,1)[0];m=(0,y.default)(m,(0,f.bubbleFormats)(w))}c=u.default.attributes.diff(m,c)||{}}else if("object"===r(a.insert)){var x=Object.keys(a.insert)[0];if(null==x)return t;e.scroll.insertAt(t,x,a.insert[x])}i+=l}return Object.keys(c).forEach(function(n){e.scroll.formatAt(t,l,n,c[n])}),t+l},0),t.reduce(function(t,n){return"number"==typeof n.delete?(e.scroll.deleteAt(t,n.delete),t):t+(n.retain||n.insert.length||1)},0),this.scroll.batchEnd(),this.update(t)}},{key:"deleteText",value:function(t,e){return this.scroll.deleteAt(t,e),this.update((new a.default).retain(t).delete(e))}},{key:"formatLine",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.scroll.update(),Object.keys(r).forEach(function(o){if(null==n.scroll.whitelist||n.scroll.whitelist[o]){var i=n.scroll.lines(t,Math.max(e,1)),a=e;i.forEach(function(e){var i=e.length();if(e instanceof l.default){var u=t-e.offset(n.scroll),s=e.newlineIndex(u+a)-u+1;e.formatAt(u,s,o,r[o])}else e.format(o,r[o]);a-=i})}}),this.scroll.optimize(),this.update((new a.default).retain(t).retain(e,(0,d.default)(r)))}},{key:"formatText",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return Object.keys(r).forEach(function(o){n.scroll.formatAt(t,e,o,r[o])}),this.update((new a.default).retain(t).retain(e,(0,d.default)(r)))}},{key:"getContents",value:function(t,e){return this.delta.slice(t,t+e)}},{key:"getDelta",value:function(){return this.scroll.lines().reduce(function(t,e){return t.concat(e.delta())},new a.default)}},{key:"getFormat",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=[],r=[];0===e?this.scroll.path(t).forEach(function(t){var e=o(t,1)[0];e instanceof p.default?n.push(e):e instanceof s.default.Leaf&&r.push(e)}):(n=this.scroll.lines(t,e),r=this.scroll.descendants(s.default.Leaf,t,e));var i=[n,r].map(function(t){if(0===t.length)return{};for(var e=(0,f.bubbleFormats)(t.shift());Object.keys(e).length>0;){var n=t.shift();if(null==n)return e;e=_((0,f.bubbleFormats)(n),e)}return e});return y.default.apply(y.default,i)}},{key:"getText",value:function(t,e){return this.getContents(t,e).filter(function(t){return"string"==typeof t.insert}).map(function(t){return t.insert}).join("")}},{key:"insertEmbed",value:function(t,e,n){return this.scroll.insertAt(t,e,n),this.update((new a.default).retain(t).insert(function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}({},e,n)))}},{key:"insertText",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return e=e.replace(/\r\n/g,"\n").replace(/\r/g,"\n"),this.scroll.insertAt(t,e),Object.keys(r).forEach(function(o){n.scroll.formatAt(t,e.length,o,r[o])}),this.update((new a.default).retain(t).insert(e,(0,d.default)(r)))}},{key:"isBlank",value:function(){if(0==this.scroll.children.length)return!0;if(this.scroll.children.length>1)return!1;var t=this.scroll.children.head;return t.statics.blotName===p.default.blotName&&(!(t.children.length>1)&&t.children.head instanceof h.default)}},{key:"removeFormat",value:function(t,e){var n=this.getText(t,e),r=this.scroll.line(t+e),i=o(r,2),u=i[0],s=i[1],c=0,f=new a.default;null!=u&&(c=u instanceof l.default?u.newlineIndex(s)-s+1:u.length()-s,f=u.delta().slice(s,s+c-1).insert("\n"));var p=this.getContents(t,e+c).diff((new a.default).insert(n).concat(f)),h=(new a.default).retain(t).concat(p);return this.applyDelta(h)}},{key:"update",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,r=this.delta;if(1===e.length&&"characterData"===e[0].type&&e[0].target.data.match(b)&&s.default.find(e[0].target)){var o=s.default.find(e[0].target),i=(0,f.bubbleFormats)(o),u=o.offset(this.scroll),l=e[0].oldValue.replace(c.default.CONTENTS,""),p=(new a.default).insert(l),h=(new a.default).insert(o.value());t=(new a.default).retain(u).concat(p.diff(h,n)).reduce(function(t,e){return e.insert?t.insert(e.insert,i):t.push(e)},new a.default),this.delta=r.compose(t)}else this.delta=this.getDelta(),t&&(0,v.default)(r.compose(t),this.delta)||(t=r.diff(this.delta,n));return t}}]),t}();function _(t,e){return Object.keys(e).reduce(function(n,r){return null==t[r]?n:(e[r]===t[r]?n[r]=e[r]:Array.isArray(e[r])?e[r].indexOf(t[r])<0&&(n[r]=e[r].concat([t[r]])):n[r]=[e[r],t[r]],n)},{})}e.default=m},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.Range=void 0;var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=l(n(0)),a=l(n(21)),u=l(n(11)),s=l(n(8));function l(t){return t&&t.__esModule?t:{default:t}}function c(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function f(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var p=(0,l(n(10)).default)("quill:selection"),h=function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;f(this,t),this.index=e,this.length=n},d=function(){function t(e,n){var r=this;f(this,t),this.emitter=n,this.scroll=e,this.composing=!1,this.mouseDown=!1,this.root=this.scroll.domNode,this.cursor=i.default.create("cursor",this),this.lastRange=this.savedRange=new h(0,0),this.handleComposition(),this.handleDragging(),this.emitter.listenDOM("selectionchange",document,function(){r.mouseDown||setTimeout(r.update.bind(r,s.default.sources.USER),1)}),this.emitter.on(s.default.events.EDITOR_CHANGE,function(t,e){t===s.default.events.TEXT_CHANGE&&e.length()>0&&r.update(s.default.sources.SILENT)}),this.emitter.on(s.default.events.SCROLL_BEFORE_UPDATE,function(){if(r.hasFocus()){var t=r.getNativeRange();null!=t&&t.start.node!==r.cursor.textNode&&r.emitter.once(s.default.events.SCROLL_UPDATE,function(){try{r.setNativeRange(t.start.node,t.start.offset,t.end.node,t.end.offset)}catch(t){}})}}),this.emitter.on(s.default.events.SCROLL_OPTIMIZE,function(t,e){if(e.range){var n=e.range,o=n.startNode,i=n.startOffset,a=n.endNode,u=n.endOffset;r.setNativeRange(o,i,a,u)}}),this.update(s.default.sources.SILENT)}return o(t,[{key:"handleComposition",value:function(){var t=this;this.root.addEventListener("compositionstart",function(){t.composing=!0}),this.root.addEventListener("compositionend",function(){if(t.composing=!1,t.cursor.parent){var e=t.cursor.restore();if(!e)return;setTimeout(function(){t.setNativeRange(e.startNode,e.startOffset,e.endNode,e.endOffset)},1)}})}},{key:"handleDragging",value:function(){var t=this;this.emitter.listenDOM("mousedown",document.body,function(){t.mouseDown=!0}),this.emitter.listenDOM("mouseup",document.body,function(){t.mouseDown=!1,t.update(s.default.sources.USER)})}},{key:"focus",value:function(){this.hasFocus()||(this.root.focus(),this.setRange(this.savedRange))}},{key:"format",value:function(t,e){if(null==this.scroll.whitelist||this.scroll.whitelist[t]){this.scroll.update();var n=this.getNativeRange();if(null!=n&&n.native.collapsed&&!i.default.query(t,i.default.Scope.BLOCK)){if(n.start.node!==this.cursor.textNode){var r=i.default.find(n.start.node,!1);if(null==r)return;if(r instanceof i.default.Leaf){var o=r.split(n.start.offset);r.parent.insertBefore(this.cursor,o)}else r.insertBefore(this.cursor,n.start.node);this.cursor.attach()}this.cursor.format(t,e),this.scroll.optimize(),this.setNativeRange(this.cursor.textNode,this.cursor.textNode.data.length),this.update()}}}},{key:"getBounds",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=this.scroll.length();t=Math.min(t,n-1),e=Math.min(t+e,n-1)-t;var o=void 0,i=this.scroll.leaf(t),a=r(i,2),u=a[0],s=a[1];if(null==u)return null;var l=u.position(s,!0),c=r(l,2);o=c[0],s=c[1];var f=document.createRange();if(e>0){f.setStart(o,s);var p=this.scroll.leaf(t+e),h=r(p,2);if(u=h[0],s=h[1],null==u)return null;var d=u.position(s,!0),v=r(d,2);return o=v[0],s=v[1],f.setEnd(o,s),f.getBoundingClientRect()}var y="left",g=void 0;return o instanceof Text?(s<o.data.length?(f.setStart(o,s),f.setEnd(o,s+1)):(f.setStart(o,s-1),f.setEnd(o,s),y="right"),g=f.getBoundingClientRect()):(g=u.domNode.getBoundingClientRect(),s>0&&(y="right")),{bottom:g.top+g.height,height:g.height,left:g[y],right:g[y],top:g.top,width:0}}},{key:"getNativeRange",value:function(){var t=document.getSelection();if(null==t||t.rangeCount<=0)return null;var e=t.getRangeAt(0);if(null==e)return null;var n=this.normalizeNative(e);return p.info("getNativeRange",n),n}},{key:"getRange",value:function(){var t=this.getNativeRange();return null==t?[null,null]:[this.normalizedToRange(t),t]}},{key:"hasFocus",value:function(){return document.activeElement===this.root}},{key:"normalizedToRange",value:function(t){var e=this,n=[[t.start.node,t.start.offset]];t.native.collapsed||n.push([t.end.node,t.end.offset]);var o=n.map(function(t){var n=r(t,2),o=n[0],a=n[1],u=i.default.find(o,!0),s=u.offset(e.scroll);return 0===a?s:u instanceof i.default.Container?s+u.length():s+u.index(o,a)}),a=Math.min(Math.max.apply(Math,c(o)),this.scroll.length()-1),u=Math.min.apply(Math,[a].concat(c(o)));return new h(u,a-u)}},{key:"normalizeNative",value:function(t){if(!v(this.root,t.startContainer)||!t.collapsed&&!v(this.root,t.endContainer))return null;var e={start:{node:t.startContainer,offset:t.startOffset},end:{node:t.endContainer,offset:t.endOffset},native:t};return[e.start,e.end].forEach(function(t){for(var e=t.node,n=t.offset;!(e instanceof Text)&&e.childNodes.length>0;)if(e.childNodes.length>n)e=e.childNodes[n],n=0;else{if(e.childNodes.length!==n)break;n=(e=e.lastChild)instanceof Text?e.data.length:e.childNodes.length+1}t.node=e,t.offset=n}),e}},{key:"rangeToNative",value:function(t){var e=this,n=t.collapsed?[t.index]:[t.index,t.index+t.length],o=[],i=this.scroll.length();return n.forEach(function(t,n){t=Math.min(i-1,t);var a,u=e.scroll.leaf(t),s=r(u,2),l=s[0],c=s[1],f=l.position(c,0!==n),p=r(f,2);a=p[0],c=p[1],o.push(a,c)}),o.length<2&&(o=o.concat(o)),o}},{key:"scrollIntoView",value:function(t){var e=this.lastRange;if(null!=e){var n=this.getBounds(e.index,e.length);if(null!=n){var o=this.scroll.length()-1,i=this.scroll.line(Math.min(e.index,o)),a=r(i,1)[0],u=a;if(e.length>0){var s=this.scroll.line(Math.min(e.index+e.length,o));u=r(s,1)[0]}if(null!=a&&null!=u){var l=t.getBoundingClientRect();n.top<l.top?t.scrollTop-=l.top-n.top:n.bottom>l.bottom&&(t.scrollTop+=n.bottom-l.bottom)}}}}},{key:"setNativeRange",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:e,o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(p.info("setNativeRange",t,e,n,r),null==t||null!=this.root.parentNode&&null!=t.parentNode&&null!=n.parentNode){var i=document.getSelection();if(null!=i)if(null!=t){this.hasFocus()||this.root.focus();var a=(this.getNativeRange()||{}).native;if(null==a||o||t!==a.startContainer||e!==a.startOffset||n!==a.endContainer||r!==a.endOffset){"BR"==t.tagName&&(e=[].indexOf.call(t.parentNode.childNodes,t),t=t.parentNode),"BR"==n.tagName&&(r=[].indexOf.call(n.parentNode.childNodes,n),n=n.parentNode);var u=document.createRange();u.setStart(t,e),u.setEnd(n,r),i.removeAllRanges(),i.addRange(u)}}else i.removeAllRanges(),this.root.blur(),document.body.focus()}}},{key:"setRange",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:s.default.sources.API;if("string"==typeof e&&(n=e,e=!1),p.info("setRange",t),null!=t){var r=this.rangeToNative(t);this.setNativeRange.apply(this,c(r).concat([e]))}else this.setNativeRange(null);this.update(n)}},{key:"update",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s.default.sources.USER,e=this.lastRange,n=this.getRange(),o=r(n,2),i=o[0],l=o[1];if(this.lastRange=i,null!=this.lastRange&&(this.savedRange=this.lastRange),!(0,u.default)(e,this.lastRange)){var c;!this.composing&&null!=l&&l.native.collapsed&&l.start.node!==this.cursor.textNode&&this.cursor.restore();var f,p=[s.default.events.SELECTION_CHANGE,(0,a.default)(this.lastRange),(0,a.default)(e),t];if((c=this.emitter).emit.apply(c,[s.default.events.EDITOR_CHANGE].concat(p)),t!==s.default.sources.SILENT)(f=this.emitter).emit.apply(f,p)}}}]),t}();function v(t,e){try{e.parentNode}catch(t){return!1}return e instanceof Text&&(e=e.parentNode),t.contains(e)}e.Range=h,e.default=d},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(0),a=(r=i)&&r.__esModule?r:{default:r};var u=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default.Embed),o(e,[{key:"insertInto",value:function(t,n){0===t.children.length?function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertInto",this).call(this,t,n):this.remove()}},{key:"length",value:function(){return 0}},{key:"value",value:function(){return""}}],[{key:"value",value:function(){}}]),e}();u.blotName="break",u.tagName="BR",e.default=u},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(44),a=n(30),u=n(1),s=function(t){function e(e){var n=t.call(this,e)||this;return n.build(),n}return o(e,t),e.prototype.appendChild=function(t){this.insertBefore(t)},e.prototype.attach=function(){t.prototype.attach.call(this),this.children.forEach(function(t){t.attach()})},e.prototype.build=function(){var t=this;this.children=new i.default,[].slice.call(this.domNode.childNodes).reverse().forEach(function(e){try{var n=l(e);t.insertBefore(n,t.children.head||void 0)}catch(t){if(t instanceof u.ParchmentError)return;throw t}})},e.prototype.deleteAt=function(t,e){if(0===t&&e===this.length())return this.remove();this.children.forEachAt(t,e,function(t,e,n){t.deleteAt(e,n)})},e.prototype.descendant=function(t,n){var r=this.children.find(n),o=r[0],i=r[1];return null==t.blotName&&t(o)||null!=t.blotName&&o instanceof t?[o,i]:o instanceof e?o.descendant(t,i):[null,-1]},e.prototype.descendants=function(t,n,r){void 0===n&&(n=0),void 0===r&&(r=Number.MAX_VALUE);var o=[],i=r;return this.children.forEachAt(n,r,function(n,r,a){(null==t.blotName&&t(n)||null!=t.blotName&&n instanceof t)&&o.push(n),n instanceof e&&(o=o.concat(n.descendants(t,r,i))),i-=a}),o},e.prototype.detach=function(){this.children.forEach(function(t){t.detach()}),t.prototype.detach.call(this)},e.prototype.formatAt=function(t,e,n,r){this.children.forEachAt(t,e,function(t,e,o){t.formatAt(e,o,n,r)})},e.prototype.insertAt=function(t,e,n){var r=this.children.find(t),o=r[0],i=r[1];if(o)o.insertAt(i,e,n);else{var a=null==n?u.create("text",e):u.create(e,n);this.appendChild(a)}},e.prototype.insertBefore=function(t,e){if(null!=this.statics.allowedChildren&&!this.statics.allowedChildren.some(function(e){return t instanceof e}))throw new u.ParchmentError("Cannot insert "+t.statics.blotName+" into "+this.statics.blotName);t.insertInto(this,e)},e.prototype.length=function(){return this.children.reduce(function(t,e){return t+e.length()},0)},e.prototype.moveChildren=function(t,e){this.children.forEach(function(n){t.insertBefore(n,e)})},e.prototype.optimize=function(e){if(t.prototype.optimize.call(this,e),0===this.children.length)if(null!=this.statics.defaultChild){var n=u.create(this.statics.defaultChild);this.appendChild(n),n.optimize(e)}else this.remove()},e.prototype.path=function(t,n){void 0===n&&(n=!1);var r=this.children.find(t,n),o=r[0],i=r[1],a=[[this,t]];return o instanceof e?a.concat(o.path(i,n)):(null!=o&&a.push([o,i]),a)},e.prototype.removeChild=function(t){this.children.remove(t)},e.prototype.replace=function(n){n instanceof e&&n.moveChildren(this),t.prototype.replace.call(this,n)},e.prototype.split=function(t,e){if(void 0===e&&(e=!1),!e){if(0===t)return this;if(t===this.length())return this.next}var n=this.clone();return this.parent.insertBefore(n,this.next),this.children.forEachAt(t,this.length(),function(t,r,o){t=t.split(r,e),n.appendChild(t)}),n},e.prototype.unwrap=function(){this.moveChildren(this.parent,this.next),this.remove()},e.prototype.update=function(t,e){var n=this,r=[],o=[];t.forEach(function(t){t.target===n.domNode&&"childList"===t.type&&(r.push.apply(r,t.addedNodes),o.push.apply(o,t.removedNodes))}),o.forEach(function(t){if(!(null!=t.parentNode&&"IFRAME"!==t.tagName&&document.body.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY)){var e=u.find(t);null!=e&&(null!=e.domNode.parentNode&&e.domNode.parentNode!==n.domNode||e.detach())}}),r.filter(function(t){return t.parentNode==n.domNode}).sort(function(t,e){return t===e?0:t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING?1:-1}).forEach(function(t){var e=null;null!=t.nextSibling&&(e=u.find(t.nextSibling));var r=l(t);r.next==e&&null!=r.next||(null!=r.parent&&r.parent.removeChild(n),n.insertBefore(r,e||void 0))})},e}(a.default);function l(t){var e=u.find(t);if(null==e)try{e=u.create(t)}catch(n){e=u.create(u.Scope.INLINE),[].slice.call(t.childNodes).forEach(function(t){e.domNode.appendChild(t)}),t.parentNode&&t.parentNode.replaceChild(e.domNode,t),e.attach()}return e}e.default=s},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(12),a=n(31),u=n(17),s=n(1),l=function(t){function e(e){var n=t.call(this,e)||this;return n.attributes=new a.default(n.domNode),n}return o(e,t),e.formats=function(t){return"string"==typeof this.tagName||(Array.isArray(this.tagName)?t.tagName.toLowerCase():void 0)},e.prototype.format=function(t,e){var n=s.query(t);n instanceof i.default?this.attributes.attribute(n,e):e&&(null==n||t===this.statics.blotName&&this.formats()[t]===e||this.replaceWith(t,e))},e.prototype.formats=function(){var t=this.attributes.values(),e=this.statics.formats(this.domNode);return null!=e&&(t[this.statics.blotName]=e),t},e.prototype.replaceWith=function(e,n){var r=t.prototype.replaceWith.call(this,e,n);return this.attributes.copy(r),r},e.prototype.update=function(e,n){var r=this;t.prototype.update.call(this,e,n),e.some(function(t){return t.target===r.domNode&&"attributes"===t.type})&&this.attributes.build()},e.prototype.wrap=function(n,r){var o=t.prototype.wrap.call(this,n,r);return o instanceof e&&o.statics.scope===this.statics.scope&&this.attributes.move(o),o},e}(u.default);e.default=l},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(30),a=n(1),u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.value=function(t){return!0},e.prototype.index=function(t,e){return this.domNode===t||this.domNode.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY?Math.min(e,1):-1},e.prototype.position=function(t,e){var n=[].indexOf.call(this.parent.domNode.childNodes,this.domNode);return t>0&&(n+=1),[this.parent.domNode,n]},e.prototype.value=function(){return(t={})[this.statics.blotName]=this.statics.value(this.domNode)||!0,t;var t},e.scope=a.Scope.INLINE_BLOT,e}(i.default);e.default=u},function(t,e,n){var r=n(11),o=n(3),i={attributes:{compose:function(t,e,n){"object"!=typeof t&&(t={}),"object"!=typeof e&&(e={});var r=o(!0,{},e);for(var i in n||(r=Object.keys(r).reduce(function(t,e){return null!=r[e]&&(t[e]=r[e]),t},{})),t)void 0!==t[i]&&void 0===e[i]&&(r[i]=t[i]);return Object.keys(r).length>0?r:void 0},diff:function(t,e){"object"!=typeof t&&(t={}),"object"!=typeof e&&(e={});var n=Object.keys(t).concat(Object.keys(e)).reduce(function(n,o){return r(t[o],e[o])||(n[o]=void 0===e[o]?null:e[o]),n},{});return Object.keys(n).length>0?n:void 0},transform:function(t,e,n){if("object"!=typeof t)return e;if("object"==typeof e){if(!n)return e;var r=Object.keys(e).reduce(function(n,r){return void 0===t[r]&&(n[r]=e[r]),n},{});return Object.keys(r).length>0?r:void 0}}},iterator:function(t){return new a(t)},length:function(t){return"number"==typeof t.delete?t.delete:"number"==typeof t.retain?t.retain:"string"==typeof t.insert?t.insert.length:1}};function a(t){this.ops=t,this.index=0,this.offset=0}a.prototype.hasNext=function(){return this.peekLength()<1/0},a.prototype.next=function(t){t||(t=1/0);var e=this.ops[this.index];if(e){var n=this.offset,r=i.length(e);if(t>=r-n?(t=r-n,this.index+=1,this.offset=0):this.offset+=t,"number"==typeof e.delete)return{delete:t};var o={};return e.attributes&&(o.attributes=e.attributes),"number"==typeof e.retain?o.retain=t:"string"==typeof e.insert?o.insert=e.insert.substr(n,t):o.insert=e.insert,o}return{retain:1/0}},a.prototype.peek=function(){return this.ops[this.index]},a.prototype.peekLength=function(){return this.ops[this.index]?i.length(this.ops[this.index])-this.offset:1/0},a.prototype.peekType=function(){return this.ops[this.index]?"number"==typeof this.ops[this.index].delete?"delete":"number"==typeof this.ops[this.index].retain?"retain":"insert":"retain"},t.exports=i},function(t,n){var r=function(){"use strict";function t(t,e){return null!=e&&t instanceof e}var n,r,o;try{n=Map}catch(t){n=function(){}}try{r=Set}catch(t){r=function(){}}try{o=Promise}catch(t){o=function(){}}function i(a,s,l,c,f){"object"==typeof s&&(l=s.depth,c=s.prototype,f=s.includeNonEnumerable,s=s.circular);var p=[],h=[],d=void 0!==e;return void 0===s&&(s=!0),void 0===l&&(l=1/0),function a(l,v){if(null===l)return null;if(0===v)return l;var y,g;if("object"!=typeof l)return l;if(t(l,n))y=new n;else if(t(l,r))y=new r;else if(t(l,o))y=new o(function(t,e){l.then(function(e){t(a(e,v-1))},function(t){e(a(t,v-1))})});else if(i.__isArray(l))y=[];else if(i.__isRegExp(l))y=new RegExp(l.source,u(l)),l.lastIndex&&(y.lastIndex=l.lastIndex);else if(i.__isDate(l))y=new Date(l.getTime());else{if(d&&e.isBuffer(l))return y=new e(l.length),l.copy(y),y;t(l,Error)?y=Object.create(l):void 0===c?(g=Object.getPrototypeOf(l),y=Object.create(g)):(y=Object.create(c),g=c)}if(s){var b=p.indexOf(l);if(-1!=b)return h[b];p.push(l),h.push(y)}for(var m in t(l,n)&&l.forEach(function(t,e){var n=a(e,v-1),r=a(t,v-1);y.set(n,r)}),t(l,r)&&l.forEach(function(t){var e=a(t,v-1);y.add(e)}),l){var _;g&&(_=Object.getOwnPropertyDescriptor(g,m)),_&&null==_.set||(y[m]=a(l[m],v-1))}if(Object.getOwnPropertySymbols){var w=Object.getOwnPropertySymbols(l);for(m=0;m<w.length;m++){var x=w[m];(!(E=Object.getOwnPropertyDescriptor(l,x))||E.enumerable||f)&&(y[x]=a(l[x],v-1),E.enumerable||Object.defineProperty(y,x,{enumerable:!1}))}}if(f){var O=Object.getOwnPropertyNames(l);for(m=0;m<O.length;m++){var E,k=O[m];(E=Object.getOwnPropertyDescriptor(l,k))&&E.enumerable||(y[k]=a(l[k],v-1),Object.defineProperty(y,k,{enumerable:!1}))}}return y}(a,l)}function a(t){return Object.prototype.toString.call(t)}function u(t){var e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),e}return i.clonePrototype=function(t){if(null===t)return null;var e=function(){};return e.prototype=t,new e},i.__objToStr=a,i.__isDate=function(t){return"object"==typeof t&&"[object Date]"===a(t)},i.__isArray=function(t){return"object"==typeof t&&"[object Array]"===a(t)},i.__isRegExp=function(t){return"object"==typeof t&&"[object RegExp]"===a(t)},i.__getRegExpFlags=u,i}();"object"==typeof t&&t.exports&&(t.exports=r)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=h(n(0)),u=h(n(8)),s=n(4),l=h(s),c=h(n(16)),f=h(n(13)),p=h(n(25));function h(t){return t&&t.__esModule?t:{default:t}}function d(t){return t instanceof l.default||t instanceof s.BlockEmbed}var v=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return r.emitter=n.emitter,Array.isArray(n.whitelist)&&(r.whitelist=n.whitelist.reduce(function(t,e){return t[e]=!0,t},{})),r.domNode.addEventListener("DOMNodeInserted",function(){}),r.optimize(),r.enable(),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default.Scroll),o(e,[{key:"batchStart",value:function(){this.batch=!0}},{key:"batchEnd",value:function(){this.batch=!1,this.optimize()}},{key:"deleteAt",value:function(t,n){var o=this.line(t),a=r(o,2),u=a[0],l=a[1],p=this.line(t+n),h=r(p,1)[0];if(i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"deleteAt",this).call(this,t,n),null!=h&&u!==h&&l>0){if(u instanceof s.BlockEmbed||h instanceof s.BlockEmbed)return void this.optimize();if(u instanceof f.default){var d=u.newlineIndex(u.length(),!0);if(d>-1&&(u=u.split(d+1))===h)return void this.optimize()}else if(h instanceof f.default){var v=h.newlineIndex(0);v>-1&&h.split(v+1)}var y=h.children.head instanceof c.default?null:h.children.head;u.moveChildren(h,y),u.remove()}this.optimize()}},{key:"enable",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.domNode.setAttribute("contenteditable",t)}},{key:"formatAt",value:function(t,n,r,o){(null==this.whitelist||this.whitelist[r])&&(i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"formatAt",this).call(this,t,n,r,o),this.optimize())}},{key:"insertAt",value:function(t,n,r){if(null==r||null==this.whitelist||this.whitelist[n]){if(t>=this.length())if(null==r||null==a.default.query(n,a.default.Scope.BLOCK)){var o=a.default.create(this.statics.defaultChild);this.appendChild(o),null==r&&n.endsWith("\n")&&(n=n.slice(0,-1)),o.insertAt(0,n,r)}else{var u=a.default.create(n,r);this.appendChild(u)}else i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertAt",this).call(this,t,n,r);this.optimize()}}},{key:"insertBefore",value:function(t,n){if(t.statics.scope===a.default.Scope.INLINE_BLOT){var r=a.default.create(this.statics.defaultChild);r.appendChild(t),t=r}i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertBefore",this).call(this,t,n)}},{key:"leaf",value:function(t){return this.path(t).pop()||[null,-1]}},{key:"line",value:function(t){return t===this.length()?this.line(t-1):this.descendant(d,t)}},{key:"lines",value:function(){return function t(e,n,r){var o=[],i=r;return e.children.forEachAt(n,r,function(e,n,r){d(e)?o.push(e):e instanceof a.default.Container&&(o=o.concat(t(e,n,i))),i-=r}),o}(this,arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.MAX_VALUE)}},{key:"optimize",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};!0!==this.batch&&(i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t,n),t.length>0&&this.emitter.emit(u.default.events.SCROLL_OPTIMIZE,t,n))}},{key:"path",value:function(t){return i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"path",this).call(this,t).slice(1)}},{key:"update",value:function(t){if(!0!==this.batch){var n=u.default.sources.USER;"string"==typeof t&&(n=t),Array.isArray(t)||(t=this.observer.takeRecords()),t.length>0&&this.emitter.emit(u.default.events.SCROLL_BEFORE_UPDATE,n,t),i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"update",this).call(this,t.concat([])),t.length>0&&this.emitter.emit(u.default.events.SCROLL_UPDATE,n,t)}}}]),e}();v.blotName="scroll",v.className="ql-editor",v.tagName="DIV",v.defaultChild="block",v.allowedChildren=[l.default,s.BlockEmbed,p.default],e.default=v},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SHORTKEY=e.default=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=v(n(21)),u=v(n(11)),s=v(n(3)),l=v(n(2)),c=v(n(20)),f=v(n(0)),p=v(n(5)),h=v(n(10)),d=v(n(9));function v(t){return t&&t.__esModule?t:{default:t}}function y(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var g=(0,h.default)("quill:keyboard"),b=/Mac/i.test(navigator.platform)?"metaKey":"ctrlKey",m=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.bindings={},Object.keys(r.options.bindings).forEach(function(e){("list autofill"!==e||null==t.scroll.whitelist||t.scroll.whitelist.list)&&r.options.bindings[e]&&r.addBinding(r.options.bindings[e])}),r.addBinding({key:e.keys.ENTER,shiftKey:null},E),r.addBinding({key:e.keys.ENTER,metaKey:null,ctrlKey:null,altKey:null},function(){}),/Firefox/i.test(navigator.userAgent)?(r.addBinding({key:e.keys.BACKSPACE},{collapsed:!0},w),r.addBinding({key:e.keys.DELETE},{collapsed:!0},x)):(r.addBinding({key:e.keys.BACKSPACE},{collapsed:!0,prefix:/^.?$/},w),r.addBinding({key:e.keys.DELETE},{collapsed:!0,suffix:/^.?$/},x)),r.addBinding({key:e.keys.BACKSPACE},{collapsed:!1},O),r.addBinding({key:e.keys.DELETE},{collapsed:!1},O),r.addBinding({key:e.keys.BACKSPACE,altKey:null,ctrlKey:null,metaKey:null,shiftKey:null},{collapsed:!0,offset:0},w),r.listen(),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,d.default),i(e,null,[{key:"match",value:function(t,e){return e=S(e),!["altKey","ctrlKey","metaKey","shiftKey"].some(function(n){return!!e[n]!==t[n]&&null!==e[n]})&&e.key===(t.which||t.keyCode)}}]),i(e,[{key:"addBinding",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=S(t);if(null==r||null==r.key)return g.warn("Attempted to add invalid keyboard binding",r);"function"==typeof e&&(e={handler:e}),"function"==typeof n&&(n={handler:n}),r=(0,s.default)(r,e,n),this.bindings[r.key]=this.bindings[r.key]||[],this.bindings[r.key].push(r)}},{key:"listen",value:function(){var t=this;this.quill.root.addEventListener("keydown",function(n){if(!n.defaultPrevented){var i=n.which||n.keyCode,a=(t.bindings[i]||[]).filter(function(t){return e.match(n,t)});if(0!==a.length){var s=t.quill.getSelection();if(null!=s&&t.quill.hasFocus()){var l=t.quill.getLine(s.index),c=o(l,2),p=c[0],h=c[1],d=t.quill.getLeaf(s.index),v=o(d,2),y=v[0],g=v[1],b=0===s.length?[y,g]:t.quill.getLeaf(s.index+s.length),m=o(b,2),_=m[0],w=m[1],x=y instanceof f.default.Text?y.value().slice(0,g):"",O=_ instanceof f.default.Text?_.value().slice(w):"",E={collapsed:0===s.length,empty:0===s.length&&p.length()<=1,format:t.quill.getFormat(s),offset:h,prefix:x,suffix:O};a.some(function(e){if(null!=e.collapsed&&e.collapsed!==E.collapsed)return!1;if(null!=e.empty&&e.empty!==E.empty)return!1;if(null!=e.offset&&e.offset!==E.offset)return!1;if(Array.isArray(e.format)){if(e.format.every(function(t){return null==E.format[t]}))return!1}else if("object"===r(e.format)&&!Object.keys(e.format).every(function(t){return!0===e.format[t]?null!=E.format[t]:!1===e.format[t]?null==E.format[t]:(0,u.default)(e.format[t],E.format[t])}))return!1;return!(null!=e.prefix&&!e.prefix.test(E.prefix))&&(!(null!=e.suffix&&!e.suffix.test(E.suffix))&&!0!==e.handler.call(t,s,E))})&&n.preventDefault()}}}})}}]),e}();function _(t,e){var n,r=t===m.keys.LEFT?"prefix":"suffix";return y(n={key:t,shiftKey:e,altKey:null},r,/^$/),y(n,"handler",function(n){var r=n.index;t===m.keys.RIGHT&&(r+=n.length+1);var i=this.quill.getLeaf(r);return!(o(i,1)[0]instanceof f.default.Embed)||(t===m.keys.LEFT?e?this.quill.setSelection(n.index-1,n.length+1,p.default.sources.USER):this.quill.setSelection(n.index-1,p.default.sources.USER):e?this.quill.setSelection(n.index,n.length+1,p.default.sources.USER):this.quill.setSelection(n.index+n.length+1,p.default.sources.USER),!1)}),n}function w(t,e){if(!(0===t.index||this.quill.getLength()<=1)){var n=this.quill.getLine(t.index),r=o(n,1)[0],i={};if(0===e.offset){var a=this.quill.getLine(t.index-1),u=o(a,1)[0];if(null!=u&&u.length()>1){var s=r.formats(),l=this.quill.getFormat(t.index-1,1);i=c.default.attributes.diff(s,l)||{}}}var f=/[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(e.prefix)?2:1;this.quill.deleteText(t.index-f,f,p.default.sources.USER),Object.keys(i).length>0&&this.quill.formatLine(t.index-f,f,i,p.default.sources.USER),this.quill.focus()}}function x(t,e){var n=/^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(e.suffix)?2:1;if(!(t.index>=this.quill.getLength()-n)){var r={},i=0,a=this.quill.getLine(t.index),u=o(a,1)[0];if(e.offset>=u.length()-1){var s=this.quill.getLine(t.index+1),l=o(s,1)[0];if(l){var f=u.formats(),h=this.quill.getFormat(t.index,1);r=c.default.attributes.diff(f,h)||{},i=l.length()}}this.quill.deleteText(t.index,n,p.default.sources.USER),Object.keys(r).length>0&&this.quill.formatLine(t.index+i-1,n,r,p.default.sources.USER)}}function O(t){var e=this.quill.getLines(t),n={};if(e.length>1){var r=e[0].formats(),o=e[e.length-1].formats();n=c.default.attributes.diff(o,r)||{}}this.quill.deleteText(t,p.default.sources.USER),Object.keys(n).length>0&&this.quill.formatLine(t.index,1,n,p.default.sources.USER),this.quill.setSelection(t.index,p.default.sources.SILENT),this.quill.focus()}function E(t,e){var n=this;t.length>0&&this.quill.scroll.deleteAt(t.index,t.length);var r=Object.keys(e.format).reduce(function(t,n){return f.default.query(n,f.default.Scope.BLOCK)&&!Array.isArray(e.format[n])&&(t[n]=e.format[n]),t},{});this.quill.insertText(t.index,"\n",r,p.default.sources.USER),this.quill.setSelection(t.index+1,p.default.sources.SILENT),this.quill.focus(),Object.keys(e.format).forEach(function(t){null==r[t]&&(Array.isArray(e.format[t])||"link"!==t&&n.quill.format(t,e.format[t],p.default.sources.USER))})}function k(t){return{key:m.keys.TAB,shiftKey:!t,format:{"code-block":!0},handler:function(e){var n=f.default.query("code-block"),r=e.index,i=e.length,a=this.quill.scroll.descendant(n,r),u=o(a,2),s=u[0],l=u[1];if(null!=s){var c=this.quill.getIndex(s),h=s.newlineIndex(l,!0)+1,d=s.newlineIndex(c+l+i),v=s.domNode.textContent.slice(h,d).split("\n");l=0,v.forEach(function(e,o){t?(s.insertAt(h+l,n.TAB),l+=n.TAB.length,0===o?r+=n.TAB.length:i+=n.TAB.length):e.startsWith(n.TAB)&&(s.deleteAt(h+l,n.TAB.length),l-=n.TAB.length,0===o?r-=n.TAB.length:i-=n.TAB.length),l+=e.length+1}),this.quill.update(p.default.sources.USER),this.quill.setSelection(r,i,p.default.sources.SILENT)}}}}function A(t){return{key:t[0].toUpperCase(),shortKey:!0,handler:function(e,n){this.quill.format(t,!n.format[t],p.default.sources.USER)}}}function S(t){if("string"==typeof t||"number"==typeof t)return S({key:t});if("object"===(void 0===t?"undefined":r(t))&&(t=(0,a.default)(t,!1)),"string"==typeof t.key)if(null!=m.keys[t.key.toUpperCase()])t.key=m.keys[t.key.toUpperCase()];else{if(1!==t.key.length)return null;t.key=t.key.toUpperCase().charCodeAt(0)}return t.shortKey&&(t[b]=t.shortKey,delete t.shortKey),t}m.keys={BACKSPACE:8,TAB:9,ENTER:13,ESCAPE:27,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46},m.DEFAULTS={bindings:{bold:A("bold"),italic:A("italic"),underline:A("underline"),indent:{key:m.keys.TAB,format:["blockquote","indent","list"],handler:function(t,e){if(e.collapsed&&0!==e.offset)return!0;this.quill.format("indent","+1",p.default.sources.USER)}},outdent:{key:m.keys.TAB,shiftKey:!0,format:["blockquote","indent","list"],handler:function(t,e){if(e.collapsed&&0!==e.offset)return!0;this.quill.format("indent","-1",p.default.sources.USER)}},"outdent backspace":{key:m.keys.BACKSPACE,collapsed:!0,shiftKey:null,metaKey:null,ctrlKey:null,altKey:null,format:["indent","list"],offset:0,handler:function(t,e){null!=e.format.indent?this.quill.format("indent","-1",p.default.sources.USER):null!=e.format.list&&this.quill.format("list",!1,p.default.sources.USER)}},"indent code-block":k(!0),"outdent code-block":k(!1),"remove tab":{key:m.keys.TAB,shiftKey:!0,collapsed:!0,prefix:/\t$/,handler:function(t){this.quill.deleteText(t.index-1,1,p.default.sources.USER)}},tab:{key:m.keys.TAB,handler:function(t){this.quill.history.cutoff();var e=(new l.default).retain(t.index).delete(t.length).insert("\t");this.quill.updateContents(e,p.default.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(t.index+1,p.default.sources.SILENT)}},"list empty enter":{key:m.keys.ENTER,collapsed:!0,format:["list"],empty:!0,handler:function(t,e){this.quill.format("list",!1,p.default.sources.USER),e.format.indent&&this.quill.format("indent",!1,p.default.sources.USER)}},"checklist enter":{key:m.keys.ENTER,collapsed:!0,format:{list:"checked"},handler:function(t){var e=this.quill.getLine(t.index),n=o(e,2),r=n[0],i=n[1],a=(0,s.default)({},r.formats(),{list:"checked"}),u=(new l.default).retain(t.index).insert("\n",a).retain(r.length()-i-1).retain(1,{list:"unchecked"});this.quill.updateContents(u,p.default.sources.USER),this.quill.setSelection(t.index+1,p.default.sources.SILENT),this.quill.scrollIntoView()}},"header enter":{key:m.keys.ENTER,collapsed:!0,format:["header"],suffix:/^$/,handler:function(t,e){var n=this.quill.getLine(t.index),r=o(n,2),i=r[0],a=r[1],u=(new l.default).retain(t.index).insert("\n",e.format).retain(i.length()-a-1).retain(1,{header:null});this.quill.updateContents(u,p.default.sources.USER),this.quill.setSelection(t.index+1,p.default.sources.SILENT),this.quill.scrollIntoView()}},"list autofill":{key:" ",collapsed:!0,format:{list:!1},prefix:/^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,handler:function(t,e){var n=e.prefix.length,r=this.quill.getLine(t.index),i=o(r,2),a=i[0],u=i[1];if(u>n)return!0;var s=void 0;switch(e.prefix.trim()){case"[]":case"[ ]":s="unchecked";break;case"[x]":s="checked";break;case"-":case"*":s="bullet";break;default:s="ordered"}this.quill.insertText(t.index," ",p.default.sources.USER),this.quill.history.cutoff();var c=(new l.default).retain(t.index-u).delete(n+1).retain(a.length()-2-u).retain(1,{list:s});this.quill.updateContents(c,p.default.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(t.index-n,p.default.sources.SILENT)}},"code exit":{key:m.keys.ENTER,collapsed:!0,format:["code-block"],prefix:/\n\n$/,suffix:/^\s+$/,handler:function(t){var e=this.quill.getLine(t.index),n=o(e,2),r=n[0],i=n[1],a=(new l.default).retain(t.index+r.length()-i-2).retain(1,{"code-block":null}).delete(1);this.quill.updateContents(a,p.default.sources.USER)}},"embed left":_(m.keys.LEFT,!1),"embed left shift":_(m.keys.LEFT,!0),"embed right":_(m.keys.RIGHT,!1),"embed right shift":_(m.keys.RIGHT,!0)}},e.default=m,e.SHORTKEY=b},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=s(n(0)),u=s(n(7));function s(t){return t&&t.__esModule?t:{default:t}}var l=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return r.selection=n,r.textNode=document.createTextNode(e.CONTENTS),r.domNode.appendChild(r.textNode),r._length=0,r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default.Embed),i(e,null,[{key:"value",value:function(){}}]),i(e,[{key:"detach",value:function(){null!=this.parent&&this.parent.removeChild(this)}},{key:"format",value:function(t,n){if(0!==this._length)return o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n);for(var r=this,i=0;null!=r&&r.statics.scope!==a.default.Scope.BLOCK_BLOT;)i+=r.offset(r.parent),r=r.parent;null!=r&&(this._length=e.CONTENTS.length,r.optimize(),r.formatAt(i,e.CONTENTS.length,t,n),this._length=0)}},{key:"index",value:function(t,n){return t===this.textNode?0:o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"index",this).call(this,t,n)}},{key:"length",value:function(){return this._length}},{key:"position",value:function(){return[this.textNode,this.textNode.data.length]}},{key:"remove",value:function(){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"remove",this).call(this),this.parent=null}},{key:"restore",value:function(){if(!this.selection.composing&&null!=this.parent){var t=this.textNode,n=this.selection.getNativeRange(),o=void 0,i=void 0,s=void 0;if(null!=n&&n.start.node===t&&n.end.node===t){var l=[t,n.start.offset,n.end.offset];o=l[0],i=l[1],s=l[2]}for(;null!=this.domNode.lastChild&&this.domNode.lastChild!==this.textNode;)this.domNode.parentNode.insertBefore(this.domNode.lastChild,this.domNode);if(this.textNode.data!==e.CONTENTS){var c=this.textNode.data.split(e.CONTENTS).join("");this.next instanceof u.default?(o=this.next.domNode,this.next.insertAt(0,c),this.textNode.data=e.CONTENTS):(this.textNode.data=c,this.parent.insertBefore(a.default.create(this.textNode),this),this.textNode=document.createTextNode(e.CONTENTS),this.domNode.appendChild(this.textNode))}if(this.remove(),null!=i){var f=[i,s].map(function(t){return Math.max(0,Math.min(o.data.length,t-1))}),p=r(f,2);return i=p[0],s=p[1],{startNode:o,startOffset:i,endNode:o,endOffset:s}}}}},{key:"update",value:function(t,e){var n=this;if(t.some(function(t){return"characterData"===t.type&&t.target===n.textNode})){var r=this.restore();r&&(e.range=r)}}},{key:"value",value:function(){return""}}]),e}();l.blotName="cursor",l.className="ql-cursor",l.tagName="span",l.CONTENTS="\ufeff",e.default=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=a(n(0)),o=n(4),i=a(o);function a(t){return t&&t.__esModule?t:{default:t}}var u=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,r.default.Container),e}();u.allowedChildren=[i.default,o.BlockEmbed,u],e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ColorStyle=e.ColorClass=e.ColorAttributor=void 0;var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(0),a=(r=i)&&r.__esModule?r:{default:r};var u=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default.Attributor.Style),o(e,[{key:"value",value:function(t){var n=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"value",this).call(this,t);return n.startsWith("rgb(")?(n=n.replace(/^[^\d]+/,"").replace(/[^\d]+$/,""),"#"+n.split(",").map(function(t){return("00"+parseInt(t).toString(16)).slice(-2)}).join("")):n}}]),e}(),s=new a.default.Attributor.Class("color","ql-color",{scope:a.default.Scope.INLINE}),l=new u("color","color",{scope:a.default.Scope.INLINE});e.ColorAttributor=u,e.ColorClass=s,e.ColorStyle=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.sanitize=e.default=void 0;var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(6),u=(r=a)&&r.__esModule?r:{default:r};var s=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,u.default),o(e,[{key:"format",value:function(t,n){if(t!==this.statics.blotName||!n)return i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n);n=this.constructor.sanitize(n),this.domNode.setAttribute("href",n)}}],[{key:"create",value:function(t){var n=i(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t);return t=this.sanitize(t),n.setAttribute("href",t),n.setAttribute("target","_blank"),n}},{key:"formats",value:function(t){return t.getAttribute("href")}},{key:"sanitize",value:function(t){return l(t,this.PROTOCOL_WHITELIST)?t:this.SANITIZED_URL}}]),e}();function l(t,e){var n=document.createElement("a");n.href=t;var r=n.href.slice(0,n.href.indexOf(":"));return e.indexOf(r)>-1}s.blotName="link",s.tagName="A",s.SANITIZED_URL="about:blank",s.PROTOCOL_WHITELIST=["http","https","mailto","tel"],e.default=s,e.sanitize=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=u(n(23)),a=u(n(107));function u(t){return t&&t.__esModule?t:{default:t}}var s=0;function l(t,e){t.setAttribute(e,!("true"===t.getAttribute(e)))}var c=function(){function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.select=e,this.container=document.createElement("span"),this.buildPicker(),this.select.style.display="none",this.select.parentNode.insertBefore(this.container,this.select),this.label.addEventListener("mousedown",function(){n.togglePicker()}),this.label.addEventListener("keydown",function(t){switch(t.keyCode){case i.default.keys.ENTER:n.togglePicker();break;case i.default.keys.ESCAPE:n.escape(),t.preventDefault()}}),this.select.addEventListener("change",this.update.bind(this))}return o(t,[{key:"togglePicker",value:function(){this.container.classList.toggle("ql-expanded"),l(this.label,"aria-expanded"),l(this.options,"aria-hidden")}},{key:"buildItem",value:function(t){var e=this,n=document.createElement("span");return n.tabIndex="0",n.setAttribute("role","button"),n.classList.add("ql-picker-item"),t.hasAttribute("value")&&n.setAttribute("data-value",t.getAttribute("value")),t.textContent&&n.setAttribute("data-label",t.textContent),n.addEventListener("click",function(){e.selectItem(n,!0)}),n.addEventListener("keydown",function(t){switch(t.keyCode){case i.default.keys.ENTER:e.selectItem(n,!0),t.preventDefault();break;case i.default.keys.ESCAPE:e.escape(),t.preventDefault()}}),n}},{key:"buildLabel",value:function(){var t=document.createElement("span");return t.classList.add("ql-picker-label"),t.innerHTML=a.default,t.tabIndex="0",t.setAttribute("role","button"),t.setAttribute("aria-expanded","false"),this.container.appendChild(t),t}},{key:"buildOptions",value:function(){var t=this,e=document.createElement("span");e.classList.add("ql-picker-options"),e.setAttribute("aria-hidden","true"),e.tabIndex="-1",e.id="ql-picker-options-"+s,s+=1,this.label.setAttribute("aria-controls",e.id),this.options=e,[].slice.call(this.select.options).forEach(function(n){var r=t.buildItem(n);e.appendChild(r),!0===n.selected&&t.selectItem(r)}),this.container.appendChild(e)}},{key:"buildPicker",value:function(){var t=this;[].slice.call(this.select.attributes).forEach(function(e){t.container.setAttribute(e.name,e.value)}),this.container.classList.add("ql-picker"),this.label=this.buildLabel(),this.buildOptions()}},{key:"escape",value:function(){var t=this;this.close(),setTimeout(function(){return t.label.focus()},1)}},{key:"close",value:function(){this.container.classList.remove("ql-expanded"),this.label.setAttribute("aria-expanded","false"),this.options.setAttribute("aria-hidden","true")}},{key:"selectItem",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.container.querySelector(".ql-selected");if(t!==n&&(null!=n&&n.classList.remove("ql-selected"),null!=t&&(t.classList.add("ql-selected"),this.select.selectedIndex=[].indexOf.call(t.parentNode.children,t),t.hasAttribute("data-value")?this.label.setAttribute("data-value",t.getAttribute("data-value")):this.label.removeAttribute("data-value"),t.hasAttribute("data-label")?this.label.setAttribute("data-label",t.getAttribute("data-label")):this.label.removeAttribute("data-label"),e))){if("function"==typeof Event)this.select.dispatchEvent(new Event("change"));else if("object"===("undefined"==typeof Event?"undefined":r(Event))){var o=document.createEvent("Event");o.initEvent("change",!0,!0),this.select.dispatchEvent(o)}this.close()}}},{key:"update",value:function(){var t=void 0;if(this.select.selectedIndex>-1){var e=this.container.querySelector(".ql-picker-options").children[this.select.selectedIndex];t=this.select.options[this.select.selectedIndex],this.selectItem(e)}else this.selectItem(null);var n=null!=t&&t!==this.select.querySelector("option[selected]");this.label.classList.toggle("ql-active",n)}}]),t}();e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=g(n(0)),o=g(n(5)),i=n(4),a=g(i),u=g(n(16)),s=g(n(25)),l=g(n(24)),c=g(n(35)),f=g(n(6)),p=g(n(22)),h=g(n(7)),d=g(n(55)),v=g(n(42)),y=g(n(23));function g(t){return t&&t.__esModule?t:{default:t}}o.default.register({"blots/block":a.default,"blots/block/embed":i.BlockEmbed,"blots/break":u.default,"blots/container":s.default,"blots/cursor":l.default,"blots/embed":c.default,"blots/inline":f.default,"blots/scroll":p.default,"blots/text":h.default,"modules/clipboard":d.default,"modules/history":v.default,"modules/keyboard":y.default}),r.default.register(a.default,u.default,l.default,f.default,p.default,h.default),e.default=o.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),o=function(){function t(t){this.domNode=t,this.domNode[r.DATA_KEY]={blot:this}}return Object.defineProperty(t.prototype,"statics",{get:function(){return this.constructor},enumerable:!0,configurable:!0}),t.create=function(t){if(null==this.tagName)throw new r.ParchmentError("Blot definition missing tagName");var e;return Array.isArray(this.tagName)?("string"==typeof t&&(t=t.toUpperCase(),parseInt(t).toString()===t&&(t=parseInt(t))),e="number"==typeof t?document.createElement(this.tagName[t-1]):this.tagName.indexOf(t)>-1?document.createElement(t):document.createElement(this.tagName[0])):e=document.createElement(this.tagName),this.className&&e.classList.add(this.className),e},t.prototype.attach=function(){null!=this.parent&&(this.scroll=this.parent.scroll)},t.prototype.clone=function(){var t=this.domNode.cloneNode(!1);return r.create(t)},t.prototype.detach=function(){null!=this.parent&&this.parent.removeChild(this),delete this.domNode[r.DATA_KEY]},t.prototype.deleteAt=function(t,e){this.isolate(t,e).remove()},t.prototype.formatAt=function(t,e,n,o){var i=this.isolate(t,e);if(null!=r.query(n,r.Scope.BLOT)&&o)i.wrap(n,o);else if(null!=r.query(n,r.Scope.ATTRIBUTE)){var a=r.create(this.statics.scope);i.wrap(a),a.format(n,o)}},t.prototype.insertAt=function(t,e,n){var o=null==n?r.create("text",e):r.create(e,n),i=this.split(t);this.parent.insertBefore(o,i)},t.prototype.insertInto=function(t,e){void 0===e&&(e=null),null!=this.parent&&this.parent.children.remove(this);var n=null;t.children.insertBefore(this,e),null!=e&&(n=e.domNode),this.domNode.parentNode==t.domNode&&this.domNode.nextSibling==n||t.domNode.insertBefore(this.domNode,n),this.parent=t,this.attach()},t.prototype.isolate=function(t,e){var n=this.split(t);return n.split(e),n},t.prototype.length=function(){return 1},t.prototype.offset=function(t){return void 0===t&&(t=this.parent),null==this.parent||this==t?0:this.parent.children.offset(this)+this.parent.offset(t)},t.prototype.optimize=function(t){null!=this.domNode[r.DATA_KEY]&&delete this.domNode[r.DATA_KEY].mutations},t.prototype.remove=function(){null!=this.domNode.parentNode&&this.domNode.parentNode.removeChild(this.domNode),this.detach()},t.prototype.replace=function(t){null!=t.parent&&(t.parent.insertBefore(this,t.next),t.remove())},t.prototype.replaceWith=function(t,e){var n="string"==typeof t?r.create(t,e):t;return n.replace(this),n},t.prototype.split=function(t,e){return 0===t?this:this.next},t.prototype.update=function(t,e){},t.prototype.wrap=function(t,e){var n="string"==typeof t?r.create(t,e):t;return null!=this.parent&&this.parent.insertBefore(n,this.next),n.appendChild(this),n},t.blotName="abstract",t}();e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(12),o=n(32),i=n(33),a=n(1),u=function(){function t(t){this.attributes={},this.domNode=t,this.build()}return t.prototype.attribute=function(t,e){e?t.add(this.domNode,e)&&(null!=t.value(this.domNode)?this.attributes[t.attrName]=t:delete this.attributes[t.attrName]):(t.remove(this.domNode),delete this.attributes[t.attrName])},t.prototype.build=function(){var t=this;this.attributes={};var e=r.default.keys(this.domNode),n=o.default.keys(this.domNode),u=i.default.keys(this.domNode);e.concat(n).concat(u).forEach(function(e){var n=a.query(e,a.Scope.ATTRIBUTE);n instanceof r.default&&(t.attributes[n.attrName]=n)})},t.prototype.copy=function(t){var e=this;Object.keys(this.attributes).forEach(function(n){var r=e.attributes[n].value(e.domNode);t.format(n,r)})},t.prototype.move=function(t){var e=this;this.copy(t),Object.keys(this.attributes).forEach(function(t){e.attributes[t].remove(e.domNode)}),this.attributes={}},t.prototype.values=function(){var t=this;return Object.keys(this.attributes).reduce(function(e,n){return e[n]=t.attributes[n].value(t.domNode),e},{})},t}();e.default=u},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});function i(t,e){return(t.getAttribute("class")||"").split(/\s+/).filter(function(t){return 0===t.indexOf(e+"-")})}Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.keys=function(t){return(t.getAttribute("class")||"").split(/\s+/).map(function(t){return t.split("-").slice(0,-1).join("-")})},e.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(this.remove(t),t.classList.add(this.keyName+"-"+e),!0)},e.prototype.remove=function(t){i(t,this.keyName).forEach(function(e){t.classList.remove(e)}),0===t.classList.length&&t.removeAttribute("class")},e.prototype.value=function(t){var e=(i(t,this.keyName)[0]||"").slice(this.keyName.length+1);return this.canAdd(t,e)?e:""},e}(n(12).default);e.default=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});function i(t){var e=t.split("-"),n=e.slice(1).map(function(t){return t[0].toUpperCase()+t.slice(1)}).join("");return e[0]+n}Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.keys=function(t){return(t.getAttribute("style")||"").split(";").map(function(t){return t.split(":")[0].trim()})},e.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(t.style[i(this.keyName)]=e,!0)},e.prototype.remove=function(t){t.style[i(this.keyName)]="",t.getAttribute("style")||t.removeAttribute("style")},e.prototype.value=function(t){var e=t.style[i(this.keyName)];return this.canAdd(t,e)?e:""},e}(n(12).default);e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var o=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.quill=e,this.options=n,this.modules={}}return r(t,[{key:"init",value:function(){var t=this;Object.keys(this.options.modules).forEach(function(e){null==t.modules[e]&&t.addModule(e)})}},{key:"addModule",value:function(t){var e=this.quill.constructor.import("modules/"+t);return this.modules[t]=new e(this.quill,this.options.modules[t]||{}),this.modules[t]}}]),t}();o.DEFAULTS={modules:{}},o.themes={default:o},e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=a(n(0)),i=a(n(7));function a(t){return t&&t.__esModule?t:{default:t}}var u="\ufeff",s=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.contentNode=document.createElement("span"),n.contentNode.setAttribute("contenteditable",!1),[].slice.call(n.domNode.childNodes).forEach(function(t){n.contentNode.appendChild(t)}),n.leftGuard=document.createTextNode(u),n.rightGuard=document.createTextNode(u),n.domNode.appendChild(n.leftGuard),n.domNode.appendChild(n.contentNode),n.domNode.appendChild(n.rightGuard),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,o.default.Embed),r(e,[{key:"index",value:function(t,n){return t===this.leftGuard?0:t===this.rightGuard?1:function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"index",this).call(this,t,n)}},{key:"restore",value:function(t){var e=void 0,n=void 0,r=t.data.split(u).join("");if(t===this.leftGuard)if(this.prev instanceof i.default){var a=this.prev.length();this.prev.insertAt(a,r),e={startNode:this.prev.domNode,startOffset:a+r.length}}else n=document.createTextNode(r),this.parent.insertBefore(o.default.create(n),this),e={startNode:n,startOffset:r.length};else t===this.rightGuard&&(this.next instanceof i.default?(this.next.insertAt(0,r),e={startNode:this.next.domNode,startOffset:r.length}):(n=document.createTextNode(r),this.parent.insertBefore(o.default.create(n),this.next),e={startNode:n,startOffset:r.length}));return t.data=u,e}},{key:"update",value:function(t,e){var n=this;t.forEach(function(t){if("characterData"===t.type&&(t.target===n.leftGuard||t.target===n.rightGuard)){var r=n.restore(t.target);r&&(e.range=r)}})}}]),e}();e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AlignStyle=e.AlignClass=e.AlignAttribute=void 0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};var a={scope:i.default.Scope.BLOCK,whitelist:["right","center","justify"]},u=new i.default.Attributor.Attribute("align","align",a),s=new i.default.Attributor.Class("align","ql-align",a),l=new i.default.Attributor.Style("align","text-align",a);e.AlignAttribute=u,e.AlignClass=s,e.AlignStyle=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BackgroundStyle=e.BackgroundClass=void 0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r},a=n(26);var u=new i.default.Attributor.Class("background","ql-bg",{scope:i.default.Scope.INLINE}),s=new a.ColorAttributor("background","background-color",{scope:i.default.Scope.INLINE});e.BackgroundClass=u,e.BackgroundStyle=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DirectionStyle=e.DirectionClass=e.DirectionAttribute=void 0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};var a={scope:i.default.Scope.BLOCK,whitelist:["rtl"]},u=new i.default.Attributor.Attribute("direction","dir",a),s=new i.default.Attributor.Class("direction","ql-direction",a),l=new i.default.Attributor.Style("direction","direction",a);e.DirectionAttribute=u,e.DirectionClass=s,e.DirectionStyle=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FontClass=e.FontStyle=void 0;var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(0),a=(r=i)&&r.__esModule?r:{default:r};var u={scope:a.default.Scope.INLINE,whitelist:["serif","monospace"]},s=new a.default.Attributor.Class("font","ql-font",u),l=new(function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default.Attributor.Style),o(e,[{key:"value",value:function(t){return function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"value",this).call(this,t).replace(/["']/g,"")}}]),e}())("font","font-family",u);e.FontStyle=l,e.FontClass=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SizeStyle=e.SizeClass=void 0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};var a=new i.default.Attributor.Class("size","ql-size",{scope:i.default.Scope.INLINE,whitelist:["small","large","huge"]}),u=new i.default.Attributor.Style("size","font-size",{scope:i.default.Scope.INLINE,whitelist:["10px","18px","32px"]});e.SizeClass=a,e.SizeStyle=u},function(t,e,n){"use strict";t.exports={align:{"":n(76),center:n(77),right:n(78),justify:n(79)},background:n(80),blockquote:n(81),bold:n(82),clean:n(83),code:n(58),"code-block":n(58),color:n(84),direction:{"":n(85),rtl:n(86)},float:{center:n(87),full:n(88),left:n(89),right:n(90)},formula:n(91),header:{1:n(92),2:n(93)},italic:n(94),image:n(95),indent:{"+1":n(96),"-1":n(97)},link:n(98),list:{ordered:n(99),bullet:n(100),check:n(101)},script:{sub:n(102),super:n(103)},strike:n(104),underline:n(105),video:n(106)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getLastChangeIndex=e.default=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=u(n(0)),i=u(n(5)),a=u(n(9));function u(t){return t&&t.__esModule?t:{default:t}}var s=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.lastRecorded=0,r.ignoreChange=!1,r.clear(),r.quill.on(i.default.events.EDITOR_CHANGE,function(t,e,n,o){t!==i.default.events.TEXT_CHANGE||r.ignoreChange||(r.options.userOnly&&o!==i.default.sources.USER?r.transform(e):r.record(e,n))}),r.quill.keyboard.addBinding({key:"Z",shortKey:!0},r.undo.bind(r)),r.quill.keyboard.addBinding({key:"Z",shortKey:!0,shiftKey:!0},r.redo.bind(r)),/Win/i.test(navigator.platform)&&r.quill.keyboard.addBinding({key:"Y",shortKey:!0},r.redo.bind(r)),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default),r(e,[{key:"change",value:function(t,e){if(0!==this.stack[t].length){var n=this.stack[t].pop();this.stack[e].push(n),this.lastRecorded=0,this.ignoreChange=!0,this.quill.updateContents(n[t],i.default.sources.USER),this.ignoreChange=!1;var r=l(n[t]);this.quill.setSelection(r)}}},{key:"clear",value:function(){this.stack={undo:[],redo:[]}}},{key:"cutoff",value:function(){this.lastRecorded=0}},{key:"record",value:function(t,e){if(0!==t.ops.length){this.stack.redo=[];var n=this.quill.getContents().diff(e),r=Date.now();if(this.lastRecorded+this.options.delay>r&&this.stack.undo.length>0){var o=this.stack.undo.pop();n=n.compose(o.undo),t=o.redo.compose(t)}else this.lastRecorded=r;this.stack.undo.push({redo:t,undo:n}),this.stack.undo.length>this.options.maxStack&&this.stack.undo.shift()}}},{key:"redo",value:function(){this.change("redo","undo")}},{key:"transform",value:function(t){this.stack.undo.forEach(function(e){e.undo=t.transform(e.undo,!0),e.redo=t.transform(e.redo,!0)}),this.stack.redo.forEach(function(e){e.undo=t.transform(e.undo,!0),e.redo=t.transform(e.redo,!0)})}},{key:"undo",value:function(){this.change("undo","redo")}}]),e}();function l(t){var e=t.reduce(function(t,e){return t+=e.delete||0},0),n=t.length()-e;return function(t){var e=t.ops[t.ops.length-1];return null!=e&&(null!=e.insert?"string"==typeof e.insert&&e.insert.endsWith("\n"):null!=e.attributes&&Object.keys(e.attributes).some(function(t){return null!=o.default.query(t,o.default.Scope.BLOCK)}))}(t)&&(n-=1),n}s.DEFAULTS={delay:1e3,maxStack:100,userOnly:!1},e.default=s,e.getLastChangeIndex=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.BaseTooltip=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=h(n(3)),i=h(n(2)),a=h(n(8)),u=h(n(23)),s=h(n(34)),l=h(n(59)),c=h(n(60)),f=h(n(28)),p=h(n(61));function h(t){return t&&t.__esModule?t:{default:t}}function d(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function v(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function y(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var g=[!1,"center","right","justify"],b=["#000000","#e60000","#ff9900","#ffff00","#008a00","#0066cc","#9933ff","#ffffff","#facccc","#ffebcc","#ffffcc","#cce8cc","#cce0f5","#ebd6ff","#bbbbbb","#f06666","#ffc266","#ffff66","#66b966","#66a3e0","#c285ff","#888888","#a10000","#b26b00","#b2b200","#006100","#0047b2","#6b24b2","#444444","#5c0000","#663d00","#666600","#003700","#002966","#3d1466"],m=[!1,"serif","monospace"],_=["1","2","3",!1],w=["small",!1,"large","huge"],x=function(t){function e(t,n){d(this,e);var r=v(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return t.emitter.listenDOM("click",document.body,function e(n){if(!document.body.contains(t.root))return document.body.removeEventListener("click",e);null==r.tooltip||r.tooltip.root.contains(n.target)||document.activeElement===r.tooltip.textbox||r.quill.hasFocus()||r.tooltip.hide(),null!=r.pickers&&r.pickers.forEach(function(t){t.container.contains(n.target)||t.close()})}),r}return y(e,s.default),r(e,[{key:"addModule",value:function(t){var n=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"addModule",this).call(this,t);return"toolbar"===t&&this.extendToolbar(n),n}},{key:"buildButtons",value:function(t,e){t.forEach(function(t){(t.getAttribute("class")||"").split(/\s+/).forEach(function(n){if(n.startsWith("ql-")&&(n=n.slice("ql-".length),null!=e[n]))if("direction"===n)t.innerHTML=e[n][""]+e[n].rtl;else if("string"==typeof e[n])t.innerHTML=e[n];else{var r=t.value||"";null!=r&&e[n][r]&&(t.innerHTML=e[n][r])}})})}},{key:"buildPickers",value:function(t,e){var n=this;this.pickers=t.map(function(t){if(t.classList.contains("ql-align"))return null==t.querySelector("option")&&E(t,g),new c.default(t,e.align);if(t.classList.contains("ql-background")||t.classList.contains("ql-color")){var n=t.classList.contains("ql-background")?"background":"color";return null==t.querySelector("option")&&E(t,b,"background"===n?"#ffffff":"#000000"),new l.default(t,e[n])}return null==t.querySelector("option")&&(t.classList.contains("ql-font")?E(t,m):t.classList.contains("ql-header")?E(t,_):t.classList.contains("ql-size")&&E(t,w)),new f.default(t)});this.quill.on(a.default.events.EDITOR_CHANGE,function(){n.pickers.forEach(function(t){t.update()})})}}]),e}();x.DEFAULTS=(0,o.default)(!0,{},s.default.DEFAULTS,{modules:{toolbar:{handlers:{formula:function(){this.quill.theme.tooltip.edit("formula")},image:function(){var t=this,e=this.container.querySelector("input.ql-image[type=file]");null==e&&((e=document.createElement("input")).setAttribute("type","file"),e.setAttribute("accept","image/png, image/gif, image/jpeg, image/bmp, image/x-icon"),e.classList.add("ql-image"),e.addEventListener("change",function(){if(null!=e.files&&null!=e.files[0]){var n=new FileReader;n.onload=function(n){var r=t.quill.getSelection(!0);t.quill.updateContents((new i.default).retain(r.index).delete(r.length).insert({image:n.target.result}),a.default.sources.USER),t.quill.setSelection(r.index+1,a.default.sources.SILENT),e.value=""},n.readAsDataURL(e.files[0])}}),this.container.appendChild(e)),e.click()},video:function(){this.quill.theme.tooltip.edit("video")}}}}});var O=function(t){function e(t,n){d(this,e);var r=v(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.textbox=r.root.querySelector('input[type="text"]'),r.listen(),r}return y(e,p.default),r(e,[{key:"listen",value:function(){var t=this;this.textbox.addEventListener("keydown",function(e){u.default.match(e,"enter")?(t.save(),e.preventDefault()):u.default.match(e,"escape")&&(t.cancel(),e.preventDefault())})}},{key:"cancel",value:function(){this.hide()}},{key:"edit",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"link",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.root.classList.remove("ql-hidden"),this.root.classList.add("ql-editing"),null!=e?this.textbox.value=e:t!==this.root.getAttribute("data-mode")&&(this.textbox.value=""),this.position(this.quill.getBounds(this.quill.selection.savedRange)),this.textbox.select(),this.textbox.setAttribute("placeholder",this.textbox.getAttribute("data-"+t)||""),this.root.setAttribute("data-mode",t)}},{key:"restoreFocus",value:function(){var t=this.quill.scrollingContainer.scrollTop;this.quill.focus(),this.quill.scrollingContainer.scrollTop=t}},{key:"save",value:function(){var t=this.textbox.value;switch(this.root.getAttribute("data-mode")){case"link":var e=this.quill.root.scrollTop;this.linkRange?(this.quill.formatText(this.linkRange,"link",t,a.default.sources.USER),delete this.linkRange):(this.restoreFocus(),this.quill.format("link",t,a.default.sources.USER)),this.quill.root.scrollTop=e;break;case"video":t=function(t){var e=t.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/)||t.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);if(e)return(e[1]||"https")+"://www.youtube.com/embed/"+e[2]+"?showinfo=0";if(e=t.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/))return(e[1]||"https")+"://player.vimeo.com/video/"+e[2]+"/";return t}(t);case"formula":if(!t)break;var n=this.quill.getSelection(!0);if(null!=n){var r=n.index+n.length;this.quill.insertEmbed(r,this.root.getAttribute("data-mode"),t,a.default.sources.USER),"formula"===this.root.getAttribute("data-mode")&&this.quill.insertText(r+1," ",a.default.sources.USER),this.quill.setSelection(r+2,a.default.sources.USER)}}this.textbox.value="",this.hide()}}]),e}();function E(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];e.forEach(function(e){var r=document.createElement("option");e===n?r.setAttribute("selected","selected"):r.setAttribute("value",e),t.appendChild(r)})}e.BaseTooltip=O,e.default=x},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){this.head=this.tail=null,this.length=0}return t.prototype.append=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.insertBefore(t[0],null),t.length>1&&this.append.apply(this,t.slice(1))},t.prototype.contains=function(t){for(var e,n=this.iterator();e=n();)if(e===t)return!0;return!1},t.prototype.insertBefore=function(t,e){t&&(t.next=e,null!=e?(t.prev=e.prev,null!=e.prev&&(e.prev.next=t),e.prev=t,e===this.head&&(this.head=t)):null!=this.tail?(this.tail.next=t,t.prev=this.tail,this.tail=t):(t.prev=null,this.head=this.tail=t),this.length+=1)},t.prototype.offset=function(t){for(var e=0,n=this.head;null!=n;){if(n===t)return e;e+=n.length(),n=n.next}return-1},t.prototype.remove=function(t){this.contains(t)&&(null!=t.prev&&(t.prev.next=t.next),null!=t.next&&(t.next.prev=t.prev),t===this.head&&(this.head=t.next),t===this.tail&&(this.tail=t.prev),this.length-=1)},t.prototype.iterator=function(t){return void 0===t&&(t=this.head),function(){var e=t;return null!=t&&(t=t.next),e}},t.prototype.find=function(t,e){void 0===e&&(e=!1);for(var n,r=this.iterator();n=r();){var o=n.length();if(t<o||e&&t===o&&(null==n.next||0!==n.next.length()))return[n,t];t-=o}return[null,0]},t.prototype.forEach=function(t){for(var e,n=this.iterator();e=n();)t(e)},t.prototype.forEachAt=function(t,e,n){if(!(e<=0))for(var r,o=this.find(t),i=o[0],a=t-o[1],u=this.iterator(i);(r=u())&&a<t+e;){var s=r.length();t>a?n(r,t-a,Math.min(e,a+s-t)):n(r,0,Math.min(s,t+e-a)),a+=s}},t.prototype.map=function(t){return this.reduce(function(e,n){return e.push(t(n)),e},[])},t.prototype.reduce=function(t,e){for(var n,r=this.iterator();n=r();)e=t(e,n);return e},t}();e.default=r},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(17),a=n(1),u={attributes:!0,characterData:!0,characterDataOldValue:!0,childList:!0,subtree:!0},s=function(t){function e(e){var n=t.call(this,e)||this;return n.scroll=n,n.observer=new MutationObserver(function(t){n.update(t)}),n.observer.observe(n.domNode,u),n.attach(),n}return o(e,t),e.prototype.detach=function(){t.prototype.detach.call(this),this.observer.disconnect()},e.prototype.deleteAt=function(e,n){this.update(),0===e&&n===this.length()?this.children.forEach(function(t){t.remove()}):t.prototype.deleteAt.call(this,e,n)},e.prototype.formatAt=function(e,n,r,o){this.update(),t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.insertAt=function(e,n,r){this.update(),t.prototype.insertAt.call(this,e,n,r)},e.prototype.optimize=function(e,n){var r=this;void 0===e&&(e=[]),void 0===n&&(n={}),t.prototype.optimize.call(this,n);for(var o=[].slice.call(this.observer.takeRecords());o.length>0;)e.push(o.pop());for(var u=function(t,e){void 0===e&&(e=!0),null!=t&&t!==r&&null!=t.domNode.parentNode&&(null==t.domNode[a.DATA_KEY].mutations&&(t.domNode[a.DATA_KEY].mutations=[]),e&&u(t.parent))},s=function(t){null!=t.domNode[a.DATA_KEY]&&null!=t.domNode[a.DATA_KEY].mutations&&(t instanceof i.default&&t.children.forEach(s),t.optimize(n))},l=e,c=0;l.length>0;c+=1){if(c>=100)throw new Error("[Parchment] Maximum optimize iterations reached");for(l.forEach(function(t){var e=a.find(t.target,!0);null!=e&&(e.domNode===t.target&&("childList"===t.type?(u(a.find(t.previousSibling,!1)),[].forEach.call(t.addedNodes,function(t){var e=a.find(t,!1);u(e,!1),e instanceof i.default&&e.children.forEach(function(t){u(t,!1)})})):"attributes"===t.type&&u(e.prev)),u(e))}),this.children.forEach(s),o=(l=[].slice.call(this.observer.takeRecords())).slice();o.length>0;)e.push(o.pop())}},e.prototype.update=function(e,n){var r=this;void 0===n&&(n={}),(e=e||this.observer.takeRecords()).map(function(t){var e=a.find(t.target,!0);return null==e?null:null==e.domNode[a.DATA_KEY].mutations?(e.domNode[a.DATA_KEY].mutations=[t],e):(e.domNode[a.DATA_KEY].mutations.push(t),null)}).forEach(function(t){null!=t&&t!==r&&null!=t.domNode[a.DATA_KEY]&&t.update(t.domNode[a.DATA_KEY].mutations||[],n)}),null!=this.domNode[a.DATA_KEY].mutations&&t.prototype.update.call(this,this.domNode[a.DATA_KEY].mutations,n),this.optimize(e,n)},e.blotName="scroll",e.defaultChild="block",e.scope=a.Scope.BLOCK_BLOT,e.tagName="DIV",e}(i.default);e.default=s},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(18),a=n(1);var u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.formats=function(n){if(n.tagName!==e.tagName)return t.formats.call(this,n)},e.prototype.format=function(n,r){var o=this;n!==this.statics.blotName||r?t.prototype.format.call(this,n,r):(this.children.forEach(function(t){t instanceof i.default||(t=t.wrap(e.blotName,!0)),o.attributes.copy(t)}),this.unwrap())},e.prototype.formatAt=function(e,n,r,o){null!=this.formats()[r]||a.query(r,a.Scope.ATTRIBUTE)?this.isolate(e,n).format(r,o):t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.optimize=function(n){t.prototype.optimize.call(this,n);var r=this.formats();if(0===Object.keys(r).length)return this.unwrap();var o=this.next;o instanceof e&&o.prev===this&&function(t,e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(var n in t)if(t[n]!==e[n])return!1;return!0}(r,o.formats())&&(o.moveChildren(this),o.remove())},e.blotName="inline",e.scope=a.Scope.INLINE_BLOT,e.tagName="SPAN",e}(i.default);e.default=u},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(18),a=n(1),u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.formats=function(n){var r=a.query(e.blotName).tagName;if(n.tagName!==r)return t.formats.call(this,n)},e.prototype.format=function(n,r){null!=a.query(n,a.Scope.BLOCK)&&(n!==this.statics.blotName||r?t.prototype.format.call(this,n,r):this.replaceWith(e.blotName))},e.prototype.formatAt=function(e,n,r,o){null!=a.query(r,a.Scope.BLOCK)?this.format(r,o):t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.insertAt=function(e,n,r){if(null==r||null!=a.query(n,a.Scope.INLINE))t.prototype.insertAt.call(this,e,n,r);else{var o=this.split(e),i=a.create(n,r);o.parent.insertBefore(i,o)}},e.prototype.update=function(e,n){navigator.userAgent.match(/Trident/)?this.build():t.prototype.update.call(this,e,n)},e.blotName="block",e.scope=a.Scope.BLOCK_BLOT,e.tagName="P",e}(i.default);e.default=u},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.formats=function(t){},e.prototype.format=function(e,n){t.prototype.formatAt.call(this,0,this.length(),e,n)},e.prototype.formatAt=function(e,n,r,o){0===e&&n===this.length()?this.format(r,o):t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.formats=function(){return this.statics.formats(this.domNode)},e}(n(19).default);e.default=i},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(19),a=n(1),u=function(t){function e(e){var n=t.call(this,e)||this;return n.text=n.statics.value(n.domNode),n}return o(e,t),e.create=function(t){return document.createTextNode(t)},e.value=function(t){var e=t.data;return e.normalize&&(e=e.normalize()),e},e.prototype.deleteAt=function(t,e){this.domNode.data=this.text=this.text.slice(0,t)+this.text.slice(t+e)},e.prototype.index=function(t,e){return this.domNode===t?e:-1},e.prototype.insertAt=function(e,n,r){null==r?(this.text=this.text.slice(0,e)+n+this.text.slice(e),this.domNode.data=this.text):t.prototype.insertAt.call(this,e,n,r)},e.prototype.length=function(){return this.text.length},e.prototype.optimize=function(n){t.prototype.optimize.call(this,n),this.text=this.statics.value(this.domNode),0===this.text.length?this.remove():this.next instanceof e&&this.next.prev===this&&(this.insertAt(this.length(),this.next.value()),this.next.remove())},e.prototype.position=function(t,e){return void 0===e&&(e=!1),[this.domNode,t]},e.prototype.split=function(t,e){if(void 0===e&&(e=!1),!e){if(0===t)return this;if(t===this.length())return this.next}var n=a.create(this.domNode.splitText(t));return this.parent.insertBefore(n,this.next),this.text=this.statics.value(this.domNode),n},e.prototype.update=function(t,e){var n=this;t.some(function(t){return"characterData"===t.type&&t.target===n.domNode})&&(this.text=this.statics.value(this.domNode))},e.prototype.value=function(){return this.text},e.blotName="text",e.scope=a.Scope.INLINE_BLOT,e}(i.default);e.default=u},function(t,e,n){"use strict";var r=document.createElement("div");if(r.classList.toggle("test-class",!1),r.classList.contains("test-class")){var o=DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle=function(t,e){return arguments.length>1&&!this.contains(t)==!e?e:o.call(this,t)}}String.prototype.startsWith||(String.prototype.startsWith=function(t,e){return e=e||0,this.substr(e,t.length)===t}),String.prototype.endsWith||(String.prototype.endsWith=function(t,e){var n=this.toString();("number"!=typeof e||!isFinite(e)||Math.floor(e)!==e||e>n.length)&&(e=n.length),e-=t.length;var r=n.indexOf(t,e);return-1!==r&&r===e}),Array.prototype.find||Object.defineProperty(Array.prototype,"find",{value:function(t){if(null===this)throw new TypeError("Array.prototype.find called on null or undefined");if("function"!=typeof t)throw new TypeError("predicate must be a function");for(var e,n=Object(this),r=n.length>>>0,o=arguments[1],i=0;i<r;i++)if(e=n[i],t.call(o,e,i,n))return e}}),document.addEventListener("DOMContentLoaded",function(){document.execCommand("enableObjectResizing",!1,!1),document.execCommand("autoUrlDetect",!1,!1)})},function(t,e){var n=-1,r=1,o=0;function i(t,e,l){if(t==e)return t?[[o,t]]:[];(l<0||t.length<l)&&(l=null);var f=u(t,e),p=t.substring(0,f);f=s(t=t.substring(f),e=e.substring(f));var h=t.substring(t.length-f),d=function(t,e){var l;if(!t)return[[r,e]];if(!e)return[[n,t]];var c=t.length>e.length?t:e,f=t.length>e.length?e:t,p=c.indexOf(f);if(-1!=p)return l=[[r,c.substring(0,p)],[o,f],[r,c.substring(p+f.length)]],t.length>e.length&&(l[0][0]=l[2][0]=n),l;if(1==f.length)return[[n,t],[r,e]];var h=function(t,e){var n=t.length>e.length?t:e,r=t.length>e.length?e:t;if(n.length<4||2*r.length<n.length)return null;function o(t,e,n){for(var r,o,i,a,l=t.substring(n,n+Math.floor(t.length/4)),c=-1,f="";-1!=(c=e.indexOf(l,c+1));){var p=u(t.substring(n),e.substring(c)),h=s(t.substring(0,n),e.substring(0,c));f.length<h+p&&(f=e.substring(c-h,c)+e.substring(c,c+p),r=t.substring(0,n-h),o=t.substring(n+p),i=e.substring(0,c-h),a=e.substring(c+p))}return 2*f.length>=t.length?[r,o,i,a,f]:null}var i,a,l,c,f,p=o(n,r,Math.ceil(n.length/4)),h=o(n,r,Math.ceil(n.length/2));if(!p&&!h)return null;i=h?p&&p[4].length>h[4].length?p:h:p;t.length>e.length?(a=i[0],l=i[1],c=i[2],f=i[3]):(c=i[0],f=i[1],a=i[2],l=i[3]);var d=i[4];return[a,l,c,f,d]}(t,e);if(h){var d=h[0],v=h[1],y=h[2],g=h[3],b=h[4],m=i(d,y),_=i(v,g);return m.concat([[o,b]],_)}return function(t,e){for(var o=t.length,i=e.length,u=Math.ceil((o+i)/2),s=u,l=2*u,c=new Array(l),f=new Array(l),p=0;p<l;p++)c[p]=-1,f[p]=-1;c[s+1]=0,f[s+1]=0;for(var h=o-i,d=h%2!=0,v=0,y=0,g=0,b=0,m=0;m<u;m++){for(var _=-m+v;_<=m-y;_+=2){for(var w=s+_,x=(S=_==-m||_!=m&&c[w-1]<c[w+1]?c[w+1]:c[w-1]+1)-_;S<o&&x<i&&t.charAt(S)==e.charAt(x);)S++,x++;if(c[w]=S,S>o)y+=2;else if(x>i)v+=2;else if(d){var O=s+h-_;if(O>=0&&O<l&&-1!=f[O]){var E=o-f[O];if(S>=E)return a(t,e,S,x)}}}for(var k=-m+g;k<=m-b;k+=2){for(var O=s+k,A=(E=k==-m||k!=m&&f[O-1]<f[O+1]?f[O+1]:f[O-1]+1)-k;E<o&&A<i&&t.charAt(o-E-1)==e.charAt(i-A-1);)E++,A++;if(f[O]=E,E>o)b+=2;else if(A>i)g+=2;else if(!d){var w=s+h-k;if(w>=0&&w<l&&-1!=c[w]){var S=c[w],x=s+S-w;if(S>=(E=o-E))return a(t,e,S,x)}}}}return[[n,t],[r,e]]}(t,e)}(t=t.substring(0,t.length-f),e=e.substring(0,e.length-f));return p&&d.unshift([o,p]),h&&d.push([o,h]),function t(e){e.push([o,""]);var i=0;var a=0;var l=0;var c="";var f="";var p;for(;i<e.length;)switch(e[i][0]){case r:l++,f+=e[i][1],i++;break;case n:a++,c+=e[i][1],i++;break;case o:a+l>1?(0!==a&&0!==l&&(0!==(p=u(f,c))&&(i-a-l>0&&e[i-a-l-1][0]==o?e[i-a-l-1][1]+=f.substring(0,p):(e.splice(0,0,[o,f.substring(0,p)]),i++),f=f.substring(p),c=c.substring(p)),0!==(p=s(f,c))&&(e[i][1]=f.substring(f.length-p)+e[i][1],f=f.substring(0,f.length-p),c=c.substring(0,c.length-p))),0===a?e.splice(i-l,a+l,[r,f]):0===l?e.splice(i-a,a+l,[n,c]):e.splice(i-a-l,a+l,[n,c],[r,f]),i=i-a-l+(a?1:0)+(l?1:0)+1):0!==i&&e[i-1][0]==o?(e[i-1][1]+=e[i][1],e.splice(i,1)):i++,l=0,a=0,c="",f=""}""===e[e.length-1][1]&&e.pop();var h=!1;i=1;for(;i<e.length-1;)e[i-1][0]==o&&e[i+1][0]==o&&(e[i][1].substring(e[i][1].length-e[i-1][1].length)==e[i-1][1]?(e[i][1]=e[i-1][1]+e[i][1].substring(0,e[i][1].length-e[i-1][1].length),e[i+1][1]=e[i-1][1]+e[i+1][1],e.splice(i-1,1),h=!0):e[i][1].substring(0,e[i+1][1].length)==e[i+1][1]&&(e[i-1][1]+=e[i+1][1],e[i][1]=e[i][1].substring(e[i+1][1].length)+e[i+1][1],e.splice(i+1,1),h=!0)),i++;h&&t(e)}(d),null!=l&&(d=function(t,e){var r=function(t,e){if(0===e)return[o,t];for(var r=0,i=0;i<t.length;i++){var a=t[i];if(a[0]===n||a[0]===o){var u=r+a[1].length;if(e===u)return[i+1,t];if(e<u){t=t.slice();var s=e-r,l=[a[0],a[1].slice(0,s)],c=[a[0],a[1].slice(s)];return t.splice(i,1,l,c),[i+1,t]}r=u}}throw new Error("cursor_pos is out of bounds!")}(t,e),i=r[1],a=r[0],u=i[a],s=i[a+1];if(null==u)return t;if(u[0]!==o)return t;if(null!=s&&u[1]+s[1]===s[1]+u[1])return i.splice(a,2,s,u),c(i,a,2);if(null!=s&&0===s[1].indexOf(u[1])){i.splice(a,2,[s[0],u[1]],[0,u[1]]);var l=s[1].slice(u[1].length);return l.length>0&&i.splice(a+2,0,[s[0],l]),c(i,a,3)}return t}(d,l)),d=function(t){for(var e=!1,i=function(t){return t.charCodeAt(0)>=56320&&t.charCodeAt(0)<=57343},a=2;a<t.length;a+=1)t[a-2][0]===o&&((u=t[a-2][1]).charCodeAt(u.length-1)>=55296&&u.charCodeAt(u.length-1)<=56319)&&t[a-1][0]===n&&i(t[a-1][1])&&t[a][0]===r&&i(t[a][1])&&(e=!0,t[a-1][1]=t[a-2][1].slice(-1)+t[a-1][1],t[a][1]=t[a-2][1].slice(-1)+t[a][1],t[a-2][1]=t[a-2][1].slice(0,-1));var u;if(!e)return t;for(var s=[],a=0;a<t.length;a+=1)t[a][1].length>0&&s.push(t[a]);return s}(d)}function a(t,e,n,r){var o=t.substring(0,n),a=e.substring(0,r),u=t.substring(n),s=e.substring(r),l=i(o,a),c=i(u,s);return l.concat(c)}function u(t,e){if(!t||!e||t.charAt(0)!=e.charAt(0))return 0;for(var n=0,r=Math.min(t.length,e.length),o=r,i=0;n<o;)t.substring(i,o)==e.substring(i,o)?i=n=o:r=o,o=Math.floor((r-n)/2+n);return o}function s(t,e){if(!t||!e||t.charAt(t.length-1)!=e.charAt(e.length-1))return 0;for(var n=0,r=Math.min(t.length,e.length),o=r,i=0;n<o;)t.substring(t.length-o,t.length-i)==e.substring(e.length-o,e.length-i)?i=n=o:r=o,o=Math.floor((r-n)/2+n);return o}var l=i;function c(t,e,n){for(var r=e+n-1;r>=0&&r>=e-1;r--)if(r+1<t.length){var o=t[r],i=t[r+1];o[0]===i[1]&&t.splice(r,2,[o[0],o[1]+i[1]])}return t}l.INSERT=r,l.DELETE=n,l.EQUAL=o,t.exports=l},function(t,e){function n(t){var e=[];for(var n in t)e.push(n);return e}(t.exports="function"==typeof Object.keys?Object.keys:n).shim=n},function(t,e){var n="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();function r(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function o(t){return t&&"object"==typeof t&&"number"==typeof t.length&&Object.prototype.hasOwnProperty.call(t,"callee")&&!Object.prototype.propertyIsEnumerable.call(t,"callee")||!1}(e=t.exports=n?r:o).supported=r,e.unsupported=o},function(t,e){"use strict";var n=Object.prototype.hasOwnProperty,r="~";function o(){}function i(t,e,n){this.fn=t,this.context=e,this.once=n||!1}function a(){this._events=new o,this._eventsCount=0}Object.create&&(o.prototype=Object.create(null),(new o).__proto__||(r=!1)),a.prototype.eventNames=function(){var t,e,o=[];if(0===this._eventsCount)return o;for(e in t=this._events)n.call(t,e)&&o.push(r?e.slice(1):e);return Object.getOwnPropertySymbols?o.concat(Object.getOwnPropertySymbols(t)):o},a.prototype.listeners=function(t,e){var n=r?r+t:t,o=this._events[n];if(e)return!!o;if(!o)return[];if(o.fn)return[o.fn];for(var i=0,a=o.length,u=new Array(a);i<a;i++)u[i]=o[i].fn;return u},a.prototype.emit=function(t,e,n,o,i,a){var u=r?r+t:t;if(!this._events[u])return!1;var s,l,c=this._events[u],f=arguments.length;if(c.fn){switch(c.once&&this.removeListener(t,c.fn,void 0,!0),f){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,e),!0;case 3:return c.fn.call(c.context,e,n),!0;case 4:return c.fn.call(c.context,e,n,o),!0;case 5:return c.fn.call(c.context,e,n,o,i),!0;case 6:return c.fn.call(c.context,e,n,o,i,a),!0}for(l=1,s=new Array(f-1);l<f;l++)s[l-1]=arguments[l];c.fn.apply(c.context,s)}else{var p,h=c.length;for(l=0;l<h;l++)switch(c[l].once&&this.removeListener(t,c[l].fn,void 0,!0),f){case 1:c[l].fn.call(c[l].context);break;case 2:c[l].fn.call(c[l].context,e);break;case 3:c[l].fn.call(c[l].context,e,n);break;case 4:c[l].fn.call(c[l].context,e,n,o);break;default:if(!s)for(p=1,s=new Array(f-1);p<f;p++)s[p-1]=arguments[p];c[l].fn.apply(c[l].context,s)}}return!0},a.prototype.on=function(t,e,n){var o=new i(e,n||this),a=r?r+t:t;return this._events[a]?this._events[a].fn?this._events[a]=[this._events[a],o]:this._events[a].push(o):(this._events[a]=o,this._eventsCount++),this},a.prototype.once=function(t,e,n){var o=new i(e,n||this,!0),a=r?r+t:t;return this._events[a]?this._events[a].fn?this._events[a]=[this._events[a],o]:this._events[a].push(o):(this._events[a]=o,this._eventsCount++),this},a.prototype.removeListener=function(t,e,n,i){var a=r?r+t:t;if(!this._events[a])return this;if(!e)return 0==--this._eventsCount?this._events=new o:delete this._events[a],this;var u=this._events[a];if(u.fn)u.fn!==e||i&&!u.once||n&&u.context!==n||(0==--this._eventsCount?this._events=new o:delete this._events[a]);else{for(var s=0,l=[],c=u.length;s<c;s++)(u[s].fn!==e||i&&!u[s].once||n&&u[s].context!==n)&&l.push(u[s]);l.length?this._events[a]=1===l.length?l[0]:l:0==--this._eventsCount?this._events=new o:delete this._events[a]}return this},a.prototype.removeAllListeners=function(t){var e;return t?(e=r?r+t:t,this._events[e]&&(0==--this._eventsCount?this._events=new o:delete this._events[e])):(this._events=new o,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prototype.setMaxListeners=function(){return this},a.prefixed=r,a.EventEmitter=a,void 0!==t&&(t.exports=a)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.matchText=e.matchSpacing=e.matchNewline=e.matchBlot=e.matchAttributor=e.default=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=m(n(3)),u=m(n(2)),s=m(n(0)),l=m(n(5)),c=m(n(10)),f=m(n(9)),p=n(36),h=n(37),d=m(n(13)),v=n(26),y=n(38),g=n(39),b=n(40);function m(t){return t&&t.__esModule?t:{default:t}}function _(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var w=(0,c.default)("quill:clipboard"),x="__ql-matcher",O=[[Node.TEXT_NODE,R],[Node.TEXT_NODE,q],["br",function(t,e){N(e,"\n")||e.insert("\n");return e}],[Node.ELEMENT_NODE,q],[Node.ELEMENT_NODE,L],[Node.ELEMENT_NODE,M],[Node.ELEMENT_NODE,C],[Node.ELEMENT_NODE,function(t,e){var n={},r=t.style||{};r.fontStyle&&"italic"===j(t).fontStyle&&(n.italic=!0);r.fontWeight&&(j(t).fontWeight.startsWith("bold")||parseInt(j(t).fontWeight)>=700)&&(n.bold=!0);Object.keys(n).length>0&&(e=S(e,n));parseFloat(r.textIndent||0)>0&&(e=(new u.default).insert("\t").concat(e));return e}],["li",function(t,e){var n=s.default.query(t);if(null==n||"list-item"!==n.blotName||!N(e,"\n"))return e;var r=-1,o=t.parentNode;for(;!o.classList.contains("ql-clipboard");)"list"===(s.default.query(o)||{}).blotName&&(r+=1),o=o.parentNode;return r<=0?e:e.compose((new u.default).retain(e.length()-1).retain(1,{indent:r}))}],["b",P.bind(P,"bold")],["i",P.bind(P,"italic")],["style",function(){return new u.default}]],E=[p.AlignAttribute,y.DirectionAttribute].reduce(function(t,e){return t[e.keyName]=e,t},{}),k=[p.AlignStyle,h.BackgroundStyle,v.ColorStyle,y.DirectionStyle,g.FontStyle,b.SizeStyle].reduce(function(t,e){return t[e.keyName]=e,t},{}),A=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.quill.root.addEventListener("paste",r.onPaste.bind(r)),r.container=r.quill.addContainer("ql-clipboard"),r.container.setAttribute("contenteditable",!0),r.container.setAttribute("tabindex",-1),r.matchers=[],O.concat(r.options.matchers).forEach(function(t){var e=o(t,2),i=e[0],a=e[1];(n.matchVisual||a!==M)&&r.addMatcher(i,a)}),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,f.default),i(e,[{key:"addMatcher",value:function(t,e){this.matchers.push([t,e])}},{key:"convert",value:function(t){if("string"==typeof t)return this.container.innerHTML=t.replace(/\>\r?\n +\</g,"><"),this.convert();var e=this.quill.getFormat(this.quill.selection.savedRange.index);if(e[d.default.blotName]){var n=this.container.innerText;return this.container.innerHTML="",(new u.default).insert(n,_({},d.default.blotName,e[d.default.blotName]))}var r=this.prepareMatching(),i=o(r,2),a=i[0],s=i[1],l=function t(e,n,r){return e.nodeType===e.TEXT_NODE?r.reduce(function(t,n){return n(e,t)},new u.default):e.nodeType===e.ELEMENT_NODE?[].reduce.call(e.childNodes||[],function(o,i){var a=t(i,n,r);return i.nodeType===e.ELEMENT_NODE&&(a=n.reduce(function(t,e){return e(i,t)},a),a=(i[x]||[]).reduce(function(t,e){return e(i,t)},a)),o.concat(a)},new u.default):new u.default}(this.container,a,s);return N(l,"\n")&&null==l.ops[l.ops.length-1].attributes&&(l=l.compose((new u.default).retain(l.length()-1).delete(1))),w.log("convert",this.container.innerHTML,l),this.container.innerHTML="",l}},{key:"dangerouslyPasteHTML",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:l.default.sources.API;if("string"==typeof t)this.quill.setContents(this.convert(t),e),this.quill.setSelection(0,l.default.sources.SILENT);else{var r=this.convert(e);this.quill.updateContents((new u.default).retain(t).concat(r),n),this.quill.setSelection(t+r.length(),l.default.sources.SILENT)}}},{key:"onPaste",value:function(t){var e=this;if(!t.defaultPrevented&&this.quill.isEnabled()){var n=this.quill.getSelection(),r=(new u.default).retain(n.index),o=this.quill.scrollingContainer.scrollTop;this.container.focus(),this.quill.selection.update(l.default.sources.SILENT),setTimeout(function(){r=r.concat(e.convert()).delete(n.length),e.quill.updateContents(r,l.default.sources.USER),e.quill.setSelection(r.length()-n.length,l.default.sources.SILENT),e.quill.scrollingContainer.scrollTop=o,e.quill.focus()},1)}}},{key:"prepareMatching",value:function(){var t=this,e=[],n=[];return this.matchers.forEach(function(r){var i=o(r,2),a=i[0],u=i[1];switch(a){case Node.TEXT_NODE:n.push(u);break;case Node.ELEMENT_NODE:e.push(u);break;default:[].forEach.call(t.container.querySelectorAll(a),function(t){t[x]=t[x]||[],t[x].push(u)})}}),[e,n]}}]),e}();function S(t,e,n){return"object"===(void 0===e?"undefined":r(e))?Object.keys(e).reduce(function(t,n){return S(t,n,e[n])},t):t.reduce(function(t,r){return r.attributes&&r.attributes[e]?t.push(r):t.insert(r.insert,(0,a.default)({},_({},e,n),r.attributes))},new u.default)}function j(t){if(t.nodeType!==Node.ELEMENT_NODE)return{};return t["__ql-computed-style"]||(t["__ql-computed-style"]=window.getComputedStyle(t))}function N(t,e){for(var n="",r=t.ops.length-1;r>=0&&n.length<e.length;--r){var o=t.ops[r];if("string"!=typeof o.insert)break;n=o.insert+n}return n.slice(-1*e.length)===e}function T(t){if(0===t.childNodes.length)return!1;var e=j(t);return["block","list-item"].indexOf(e.display)>-1}function P(t,e,n){return S(n,t,!0)}function C(t,e){var n=s.default.Attributor.Attribute.keys(t),r=s.default.Attributor.Class.keys(t),o=s.default.Attributor.Style.keys(t),i={};return n.concat(r).concat(o).forEach(function(e){var n=s.default.query(e,s.default.Scope.ATTRIBUTE);null!=n&&(i[n.attrName]=n.value(t),i[n.attrName])||(null==(n=E[e])||n.attrName!==e&&n.keyName!==e||(i[n.attrName]=n.value(t)||void 0),null==(n=k[e])||n.attrName!==e&&n.keyName!==e||(n=k[e],i[n.attrName]=n.value(t)||void 0))}),Object.keys(i).length>0&&(e=S(e,i)),e}function L(t,e){var n=s.default.query(t);if(null==n)return e;if(n.prototype instanceof s.default.Embed){var r={},o=n.value(t);null!=o&&(r[n.blotName]=o,e=(new u.default).insert(r,n.formats(t)))}else"function"==typeof n.formats&&(e=S(e,n.blotName,n.formats(t)));return e}function q(t,e){return N(e,"\n")||(T(t)||e.length()>0&&t.nextSibling&&T(t.nextSibling))&&e.insert("\n"),e}function M(t,e){if(T(t)&&null!=t.nextElementSibling&&!N(e,"\n\n")){var n=t.offsetHeight+parseFloat(j(t).marginTop)+parseFloat(j(t).marginBottom);t.nextElementSibling.offsetTop>t.offsetTop+1.5*n&&e.insert("\n")}return e}function R(t,e){var n=t.data;if("O:P"===t.parentNode.tagName)return e.insert(n.trim());if(0===n.trim().length&&t.parentNode.classList.contains("ql-clipboard"))return e;if(!j(t.parentNode).whiteSpace.startsWith("pre")){var r=function(t,e){return(e=e.replace(/[^\u00a0]/g,"")).length<1&&t?" ":e};n=(n=n.replace(/\r\n/g," ").replace(/\n/g," ")).replace(/\s\s+/g,r.bind(r,!0)),(null==t.previousSibling&&T(t.parentNode)||null!=t.previousSibling&&T(t.previousSibling))&&(n=n.replace(/^\s+/,r.bind(r,!1))),(null==t.nextSibling&&T(t.parentNode)||null!=t.nextSibling&&T(t.nextSibling))&&(n=n.replace(/\s+$/,r.bind(r,!1)))}return e.insert(n)}A.DEFAULTS={matchers:[],matchVisual:!0},e.default=A,e.matchAttributor=C,e.matchBlot=L,e.matchNewline=q,e.matchSpacing=M,e.matchText=R},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(6),u=(r=a)&&r.__esModule?r:{default:r};var s=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,u.default),o(e,[{key:"optimize",value:function(t){i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t),this.domNode.tagName!==this.statics.tagName[0]&&this.replaceWith(this.statics.blotName)}}],[{key:"create",value:function(){return i(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this)}},{key:"formats",value:function(){return!0}}]),e}();s.blotName="bold",s.tagName=["STRONG","B"],e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.addControls=e.default=void 0;var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=c(n(2)),a=c(n(0)),u=c(n(5)),s=c(n(10)),l=c(n(9));function c(t){return t&&t.__esModule?t:{default:t}}function f(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var p=(0,s.default)("quill:toolbar"),h=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var o,i=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));if(Array.isArray(i.options.container)){var a=document.createElement("div");v(a,i.options.container),t.container.parentNode.insertBefore(a,t.container),i.container=a}else"string"==typeof i.options.container?i.container=document.querySelector(i.options.container):i.container=i.options.container;return i.container instanceof HTMLElement?(i.container.classList.add("ql-toolbar"),i.controls=[],i.handlers={},Object.keys(i.options.handlers).forEach(function(t){i.addHandler(t,i.options.handlers[t])}),[].forEach.call(i.container.querySelectorAll("button, select"),function(t){i.attach(t)}),i.quill.on(u.default.events.EDITOR_CHANGE,function(t,e){t===u.default.events.SELECTION_CHANGE&&i.update(e)}),i.quill.on(u.default.events.SCROLL_OPTIMIZE,function(){var t=i.quill.selection.getRange(),e=r(t,1)[0];i.update(e)}),i):(o=p.error("Container required for toolbar",i.options),f(i,o))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,l.default),o(e,[{key:"addHandler",value:function(t,e){this.handlers[t]=e}},{key:"attach",value:function(t){var e=this,n=[].find.call(t.classList,function(t){return 0===t.indexOf("ql-")});if(n){if(n=n.slice("ql-".length),"BUTTON"===t.tagName&&t.setAttribute("type","button"),null==this.handlers[n]){if(null!=this.quill.scroll.whitelist&&null==this.quill.scroll.whitelist[n])return void p.warn("ignoring attaching to disabled format",n,t);if(null==a.default.query(n))return void p.warn("ignoring attaching to nonexistent format",n,t)}var o="SELECT"===t.tagName?"change":"click";t.addEventListener(o,function(o){var s=void 0;if("SELECT"===t.tagName){if(t.selectedIndex<0)return;var l=t.options[t.selectedIndex];s=!l.hasAttribute("selected")&&(l.value||!1)}else s=!t.classList.contains("ql-active")&&(t.value||!t.hasAttribute("value")),o.preventDefault();e.quill.focus();var c=e.quill.selection.getRange(),f=r(c,1)[0];if(null!=e.handlers[n])e.handlers[n].call(e,s);else if(a.default.query(n).prototype instanceof a.default.Embed){if(!(s=prompt("Enter "+n)))return;e.quill.updateContents((new i.default).retain(f.index).delete(f.length).insert(function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}({},n,s)),u.default.sources.USER)}else e.quill.format(n,s,u.default.sources.USER);e.update(f)}),this.controls.push([n,t])}}},{key:"update",value:function(t){var e=null==t?{}:this.quill.getFormat(t);this.controls.forEach(function(n){var o=r(n,2),i=o[0],a=o[1];if("SELECT"===a.tagName){var u=void 0;if(null==t)u=null;else if(null==e[i])u=a.querySelector("option[selected]");else if(!Array.isArray(e[i])){var s=e[i];"string"==typeof s&&(s=s.replace(/\"/g,'\\"')),u=a.querySelector('option[value="'+s+'"]')}null==u?(a.value="",a.selectedIndex=-1):u.selected=!0}else if(null==t)a.classList.remove("ql-active");else if(a.hasAttribute("value")){var l=e[i]===a.getAttribute("value")||null!=e[i]&&e[i].toString()===a.getAttribute("value")||null==e[i]&&!a.getAttribute("value");a.classList.toggle("ql-active",l)}else a.classList.toggle("ql-active",null!=e[i])})}}]),e}();function d(t,e,n){var r=document.createElement("button");r.setAttribute("type","button"),r.classList.add("ql-"+e),null!=n&&(r.value=n),t.appendChild(r)}function v(t,e){Array.isArray(e[0])||(e=[e]),e.forEach(function(e){var n=document.createElement("span");n.classList.add("ql-formats"),e.forEach(function(t){if("string"==typeof t)d(n,t);else{var e=Object.keys(t)[0],r=t[e];Array.isArray(r)?function(t,e,n){var r=document.createElement("select");r.classList.add("ql-"+e),n.forEach(function(t){var e=document.createElement("option");!1!==t?e.setAttribute("value",t):e.setAttribute("selected","selected"),r.appendChild(e)}),t.appendChild(r)}(n,e,r):d(n,e,r)}}),t.appendChild(n)})}h.DEFAULTS={},h.DEFAULTS={container:null,handlers:{clean:function(){var t=this,e=this.quill.getSelection();if(null!=e)if(0==e.length){var n=this.quill.getFormat();Object.keys(n).forEach(function(e){null!=a.default.query(e,a.default.Scope.INLINE)&&t.quill.format(e,!1)})}else this.quill.removeFormat(e,u.default.sources.USER)},direction:function(t){var e=this.quill.getFormat().align;"rtl"===t&&null==e?this.quill.format("align","right",u.default.sources.USER):t||"right"!==e||this.quill.format("align",!1,u.default.sources.USER),this.quill.format("direction",t,u.default.sources.USER)},indent:function(t){var e=this.quill.getSelection(),n=this.quill.getFormat(e),r=parseInt(n.indent||0);if("+1"===t||"-1"===t){var o="+1"===t?1:-1;"rtl"===n.direction&&(o*=-1),this.quill.format("indent",r+o,u.default.sources.USER)}},link:function(t){!0===t&&(t=prompt("Enter link URL:")),this.quill.format("link",t,u.default.sources.USER)},list:function(t){var e=this.quill.getSelection(),n=this.quill.getFormat(e);"check"===t?"checked"===n.list||"unchecked"===n.list?this.quill.format("list",!1,u.default.sources.USER):this.quill.format("list","unchecked",u.default.sources.USER):this.quill.format("list",t,u.default.sources.USER)}}},e.default=h,e.addControls=v},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <polyline class="ql-even ql-stroke" points="5 7 3 9 5 11"></polyline> <polyline class="ql-even ql-stroke" points="13 7 15 9 13 11"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>'},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(28),u=(r=a)&&r.__esModule?r:{default:r};var s=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return r.label.innerHTML=n,r.container.classList.add("ql-color-picker"),[].slice.call(r.container.querySelectorAll(".ql-picker-item"),0,7).forEach(function(t){t.classList.add("ql-primary")}),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,u.default),o(e,[{key:"buildItem",value:function(t){var n=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"buildItem",this).call(this,t);return n.style.backgroundColor=t.getAttribute("value")||"",n}},{key:"selectItem",value:function(t,n){i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"selectItem",this).call(this,t,n);var r=this.label.querySelector(".ql-color-label"),o=t&&t.getAttribute("data-value")||"";r&&("line"===r.tagName?r.style.stroke=o:r.style.fill=o)}}]),e}();e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(28),a=(r=i)&&r.__esModule?r:{default:r};var u=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return r.container.classList.add("ql-icon-picker"),[].forEach.call(r.container.querySelectorAll(".ql-picker-item"),function(t){t.innerHTML=n[t.getAttribute("data-value")||""]}),r.defaultItem=r.container.querySelector(".ql-selected"),r.selectItem(r.defaultItem),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default),o(e,[{key:"selectItem",value:function(t,n){(function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0})(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"selectItem",this).call(this,t,n),t=t||this.defaultItem,this.label.innerHTML=t.innerHTML}}]),e}();e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var o=function(){function t(e,n){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.quill=e,this.boundsContainer=n||document.body,this.root=e.addContainer("ql-tooltip"),this.root.innerHTML=this.constructor.TEMPLATE,this.quill.root===this.quill.scrollingContainer&&this.quill.root.addEventListener("scroll",function(){r.root.style.marginTop=-1*r.quill.root.scrollTop+"px"}),this.hide()}return r(t,[{key:"hide",value:function(){this.root.classList.add("ql-hidden")}},{key:"position",value:function(t){var e=t.left+t.width/2-this.root.offsetWidth/2,n=t.bottom+this.quill.root.scrollTop;this.root.style.left=e+"px",this.root.style.top=n+"px",this.root.classList.remove("ql-flip");var r=this.boundsContainer.getBoundingClientRect(),o=this.root.getBoundingClientRect(),i=0;if(o.right>r.right&&(i=r.right-o.right,this.root.style.left=e+i+"px"),o.left<r.left&&(i=r.left-o.left,this.root.style.left=e+i+"px"),o.bottom>r.bottom){var a=o.bottom-o.top,u=t.bottom-t.top+a;this.root.style.top=n-u+"px",this.root.classList.add("ql-flip")}return i}},{key:"show",value:function(){this.root.classList.remove("ql-editing"),this.root.classList.remove("ql-hidden")}}]),t}();e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=h(n(3)),u=h(n(8)),s=n(43),l=h(s),c=h(n(27)),f=n(15),p=h(n(41));function h(t){return t&&t.__esModule?t:{default:t}}function d(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function v(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function y(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var g=[[{header:["1","2","3",!1]}],["bold","italic","underline","link"],[{list:"ordered"},{list:"bullet"}],["clean"]],b=function(t){function e(t,n){d(this,e),null!=n.modules.toolbar&&null==n.modules.toolbar.container&&(n.modules.toolbar.container=g);var r=v(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.quill.container.classList.add("ql-snow"),r}return y(e,l.default),i(e,[{key:"extendToolbar",value:function(t){t.container.classList.add("ql-snow"),this.buildButtons([].slice.call(t.container.querySelectorAll("button")),p.default),this.buildPickers([].slice.call(t.container.querySelectorAll("select")),p.default),this.tooltip=new m(this.quill,this.options.bounds),t.container.querySelector(".ql-link")&&this.quill.keyboard.addBinding({key:"K",shortKey:!0},function(e,n){t.handlers.link.call(t,!n.format.link)})}}]),e}();b.DEFAULTS=(0,a.default)(!0,{},l.default.DEFAULTS,{modules:{toolbar:{handlers:{link:function(t){if(t){var e=this.quill.getSelection();if(null==e||0==e.length)return;var n=this.quill.getText(e);/^\S+@\S+\.\S+$/.test(n)&&0!==n.indexOf("mailto:")&&(n="mailto:"+n),this.quill.theme.tooltip.edit("link",n)}else this.quill.format("link",!1)}}}}});var m=function(t){function e(t,n){d(this,e);var r=v(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.preview=r.root.querySelector("a.ql-preview"),r}return y(e,s.BaseTooltip),i(e,[{key:"listen",value:function(){var t=this;o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"listen",this).call(this),this.root.querySelector("a.ql-action").addEventListener("click",function(e){t.root.classList.contains("ql-editing")?t.save():t.edit("link",t.preview.textContent),e.preventDefault()}),this.root.querySelector("a.ql-remove").addEventListener("click",function(e){if(null!=t.linkRange){var n=t.linkRange;t.restoreFocus(),t.quill.formatText(n,"link",!1,u.default.sources.USER),delete t.linkRange}e.preventDefault(),t.hide()}),this.quill.on(u.default.events.SELECTION_CHANGE,function(e,n,o){if(null!=e){if(0===e.length&&o===u.default.sources.USER){var i=t.quill.scroll.descendant(c.default,e.index),a=r(i,2),s=a[0],l=a[1];if(null!=s){t.linkRange=new f.Range(e.index-l,s.length());var p=c.default.formats(s.domNode);return t.preview.textContent=p,t.preview.setAttribute("href",p),t.show(),void t.position(t.quill.getBounds(t.linkRange))}}else delete t.linkRange;t.hide()}})}},{key:"show",value:function(){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"show",this).call(this),this.root.removeAttribute("data-mode")}}]),e}();m.TEMPLATE=['<a class="ql-preview" target="_blank" href="about:blank"></a>','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-action"></a>','<a class="ql-remove"></a>'].join(""),e.default=b},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=M(n(29)),o=n(36),i=n(38),a=n(64),u=M(n(65)),s=M(n(66)),l=n(67),c=M(l),f=n(37),p=n(26),h=n(39),d=n(40),v=M(n(56)),y=M(n(68)),g=M(n(27)),b=M(n(69)),m=M(n(70)),_=M(n(71)),w=M(n(72)),x=M(n(73)),O=n(13),E=M(O),k=M(n(74)),A=M(n(75)),S=M(n(57)),j=M(n(41)),N=M(n(28)),T=M(n(59)),P=M(n(60)),C=M(n(61)),L=M(n(108)),q=M(n(62));function M(t){return t&&t.__esModule?t:{default:t}}r.default.register({"attributors/attribute/direction":i.DirectionAttribute,"attributors/class/align":o.AlignClass,"attributors/class/background":f.BackgroundClass,"attributors/class/color":p.ColorClass,"attributors/class/direction":i.DirectionClass,"attributors/class/font":h.FontClass,"attributors/class/size":d.SizeClass,"attributors/style/align":o.AlignStyle,"attributors/style/background":f.BackgroundStyle,"attributors/style/color":p.ColorStyle,"attributors/style/direction":i.DirectionStyle,"attributors/style/font":h.FontStyle,"attributors/style/size":d.SizeStyle},!0),r.default.register({"formats/align":o.AlignClass,"formats/direction":i.DirectionClass,"formats/indent":a.IndentClass,"formats/background":f.BackgroundStyle,"formats/color":p.ColorStyle,"formats/font":h.FontClass,"formats/size":d.SizeClass,"formats/blockquote":u.default,"formats/code-block":E.default,"formats/header":s.default,"formats/list":c.default,"formats/bold":v.default,"formats/code":O.Code,"formats/italic":y.default,"formats/link":g.default,"formats/script":b.default,"formats/strike":m.default,"formats/underline":_.default,"formats/image":w.default,"formats/video":x.default,"formats/list/item":l.ListItem,"modules/formula":k.default,"modules/syntax":A.default,"modules/toolbar":S.default,"themes/bubble":L.default,"themes/snow":q.default,"ui/icons":j.default,"ui/picker":N.default,"ui/icon-picker":P.default,"ui/color-picker":T.default,"ui/tooltip":C.default},!0),e.default=r.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IndentClass=void 0;var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(0),u=(r=a)&&r.__esModule?r:{default:r};var s=new(function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,u.default.Attributor.Class),o(e,[{key:"add",value:function(t,n){if("+1"===n||"-1"===n){var r=this.value(t)||0;n="+1"===n?r+1:r-1}return 0===n?(this.remove(t),!0):i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"add",this).call(this,t,n)}},{key:"canAdd",value:function(t,n){return i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"canAdd",this).call(this,t,n)||i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"canAdd",this).call(this,t,parseInt(n))}},{key:"value",value:function(t){return parseInt(i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"value",this).call(this,t))||void 0}}]),e}())("indent","ql-indent",{scope:u.default.Scope.BLOCK,whitelist:[1,2,3,4,5,6,7,8]});e.IndentClass=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(4),i=(r=o)&&r.__esModule?r:{default:r};var a=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),e}();a.blotName="blockquote",a.tagName="blockquote",e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(4),a=(r=i)&&r.__esModule?r:{default:r};var u=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default),o(e,null,[{key:"formats",value:function(t){return this.tagName.indexOf(t.tagName)+1}}]),e}();u.blotName="header",u.tagName=["H1","H2","H3","H4","H5","H6"],e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.ListItem=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=s(n(0)),a=s(n(4)),u=s(n(25));function s(t){return t&&t.__esModule?t:{default:t}}function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function f(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var p=function(t){function e(){return l(this,e),c(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return f(e,a.default),r(e,[{key:"format",value:function(t,n){t!==h.blotName||n?o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n):this.replaceWith(i.default.create(this.statics.scope))}},{key:"remove",value:function(){null==this.prev&&null==this.next?this.parent.remove():o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"remove",this).call(this)}},{key:"replaceWith",value:function(t,n){return this.parent.isolate(this.offset(this.parent),this.length()),t===this.parent.statics.blotName?(this.parent.replaceWith(t,n),this):(this.parent.unwrap(),o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"replaceWith",this).call(this,t,n))}}],[{key:"formats",value:function(t){return t.tagName===this.tagName?void 0:o(e.__proto__||Object.getPrototypeOf(e),"formats",this).call(this,t)}}]),e}();p.blotName="list-item",p.tagName="LI";var h=function(t){function e(t){l(this,e);var n=c(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t)),r=function(e){if(e.target.parentNode===t){var r=n.statics.formats(t),o=i.default.find(e.target);"checked"===r?o.format("list","unchecked"):"unchecked"===r&&o.format("list","checked")}};return t.addEventListener("touchstart",r),t.addEventListener("mousedown",r),n}return f(e,u.default),r(e,null,[{key:"create",value:function(t){var n="ordered"===t?"OL":"UL",r=o(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,n);return"checked"!==t&&"unchecked"!==t||r.setAttribute("data-checked","checked"===t),r}},{key:"formats",value:function(t){return"OL"===t.tagName?"ordered":"UL"===t.tagName?t.hasAttribute("data-checked")?"true"===t.getAttribute("data-checked")?"checked":"unchecked":"bullet":void 0}}]),r(e,[{key:"format",value:function(t,e){this.children.length>0&&this.children.tail.format(t,e)}},{key:"formats",value:function(){return t={},e=this.statics.blotName,n=this.statics.formats(this.domNode),e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t;var t,e,n}},{key:"insertBefore",value:function(t,n){if(t instanceof p)o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertBefore",this).call(this,t,n);else{var r=null==n?this.length():n.offset(this),i=this.split(r);i.parent.insertBefore(t,i)}}},{key:"optimize",value:function(t){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t);var n=this.next;null!=n&&n.prev===this&&n.statics.blotName===this.statics.blotName&&n.domNode.tagName===this.domNode.tagName&&n.domNode.getAttribute("data-checked")===this.domNode.getAttribute("data-checked")&&(n.moveChildren(this),n.remove())}},{key:"replace",value:function(t){if(t.statics.blotName!==this.statics.blotName){var n=i.default.create(this.statics.defaultChild);t.moveChildren(n),this.appendChild(n)}o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"replace",this).call(this,t)}}]),e}();h.blotName="list",h.scope=i.default.Scope.BLOCK_BLOT,h.tagName=["OL","UL"],h.defaultChild="list-item",h.allowedChildren=[p],e.ListItem=p,e.default=h},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(56),i=(r=o)&&r.__esModule?r:{default:r};var a=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),e}();a.blotName="italic",a.tagName=["EM","I"],e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(6),a=(r=i)&&r.__esModule?r:{default:r};var u=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default),o(e,null,[{key:"create",value:function(t){return"super"===t?document.createElement("sup"):"sub"===t?document.createElement("sub"):function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t)}},{key:"formats",value:function(t){return"SUB"===t.tagName?"sub":"SUP"===t.tagName?"super":void 0}}]),e}();u.blotName="script",u.tagName=["SUB","SUP"],e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(6),i=(r=o)&&r.__esModule?r:{default:r};var a=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),e}();a.blotName="strike",a.tagName="S",e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(6),i=(r=o)&&r.__esModule?r:{default:r};var a=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),e}();a.blotName="underline",a.tagName="U",e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(0),u=(r=a)&&r.__esModule?r:{default:r},s=n(27);var l=["alt","height","width"],c=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,u.default.Embed),o(e,[{key:"format",value:function(t,n){l.indexOf(t)>-1?n?this.domNode.setAttribute(t,n):this.domNode.removeAttribute(t):i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n)}}],[{key:"create",value:function(t){var n=i(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t);return"string"==typeof t&&n.setAttribute("src",this.sanitize(t)),n}},{key:"formats",value:function(t){return l.reduce(function(e,n){return t.hasAttribute(n)&&(e[n]=t.getAttribute(n)),e},{})}},{key:"match",value:function(t){return/\.(jpe?g|gif|png)$/.test(t)||/^data:image\/.+;base64/.test(t)}},{key:"sanitize",value:function(t){return(0,s.sanitize)(t,["http","https","data"])?t:"//:0"}},{key:"value",value:function(t){return t.getAttribute("src")}}]),e}();c.blotName="image",c.tagName="IMG",e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(4),u=n(27),s=(r=u)&&r.__esModule?r:{default:r};var l=["height","width"],c=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.BlockEmbed),o(e,[{key:"format",value:function(t,n){l.indexOf(t)>-1?n?this.domNode.setAttribute(t,n):this.domNode.removeAttribute(t):i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n)}}],[{key:"create",value:function(t){var n=i(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t);return n.setAttribute("frameborder","0"),n.setAttribute("allowfullscreen",!0),n.setAttribute("src",this.sanitize(t)),n}},{key:"formats",value:function(t){return l.reduce(function(e,n){return t.hasAttribute(n)&&(e[n]=t.getAttribute(n)),e},{})}},{key:"sanitize",value:function(t){return s.default.sanitize(t)}},{key:"value",value:function(t){return t.getAttribute("src")}}]),e}();c.blotName="video",c.className="ql-video",c.tagName="IFRAME",e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.FormulaBlot=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=u(n(35)),i=u(n(5)),a=u(n(9));function u(t){return t&&t.__esModule?t:{default:t}}function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function c(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var f=function(t){function e(){return s(this,e),l(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return c(e,o.default),r(e,null,[{key:"create",value:function(t){var n=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t);return"string"==typeof t&&(window.katex.render(t,n,{throwOnError:!1,errorColor:"#f00"}),n.setAttribute("data-value",t)),n}},{key:"value",value:function(t){return t.getAttribute("data-value")}}]),e}();f.blotName="formula",f.className="ql-formula",f.tagName="SPAN";var p=function(t){function e(){s(this,e);var t=l(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));if(null==window.katex)throw new Error("Formula module requires KaTeX.");return t}return c(e,a.default),r(e,null,[{key:"register",value:function(){i.default.register(f,!0)}}]),e}();e.FormulaBlot=f,e.default=p},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.CodeToken=e.CodeBlock=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=s(n(0)),i=s(n(5)),a=s(n(9)),u=s(n(13));function s(t){return t&&t.__esModule?t:{default:t}}function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function f(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var p=function(t){function e(){return l(this,e),c(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return f(e,u.default),r(e,[{key:"replaceWith",value:function(t){this.domNode.textContent=this.domNode.textContent,this.attach(),function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"replaceWith",this).call(this,t)}},{key:"highlight",value:function(t){var e=this.domNode.textContent;this.cachedText!==e&&((e.trim().length>0||null==this.cachedText)&&(this.domNode.innerHTML=t(e),this.domNode.normalize(),this.attach()),this.cachedText=e)}}]),e}();p.className="ql-syntax";var h=new o.default.Attributor.Class("token","hljs",{scope:o.default.Scope.INLINE}),d=function(t){function e(t,n){l(this,e);var r=c(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));if("function"!=typeof r.options.highlight)throw new Error("Syntax module requires highlight.js. Please include the library on the page before Quill.");var o=null;return r.quill.on(i.default.events.SCROLL_OPTIMIZE,function(){clearTimeout(o),o=setTimeout(function(){r.highlight(),o=null},r.options.interval)}),r.highlight(),r}return f(e,a.default),r(e,null,[{key:"register",value:function(){i.default.register(h,!0),i.default.register(p,!0)}}]),r(e,[{key:"highlight",value:function(){var t=this;if(!this.quill.selection.composing){this.quill.update(i.default.sources.USER);var e=this.quill.getSelection();this.quill.scroll.descendants(p).forEach(function(e){e.highlight(t.options.highlight)}),this.quill.update(i.default.sources.SILENT),null!=e&&this.quill.setSelection(e,i.default.sources.SILENT)}}}]),e}();d.DEFAULTS={highlight:null==window.hljs?null:function(t){return window.hljs.highlightAuto(t).value},interval:1e3},e.CodeBlock=p,e.CodeToken=h,e.default=d},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <g class="ql-fill ql-color-label"> <polygon points="6 6.868 6 6 5 6 5 7 5.942 7 6 6.868"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points="6.817 5 6 5 6 6 6.38 6 6.817 5"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points="4 11.439 4 11 3 11 3 12 3.755 12 4 11.439"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points="4.63 10 4 10 4 11 4.192 11 4.63 10"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points="13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points="12 6.868 12 6 11.62 6 12 6.868"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points="12.933 9 13 9 13 8 12.495 8 12.933 9"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points="5.5 13 9 5 12.5 13"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <rect class="ql-fill ql-stroke" height=3 width=3 x=4 y=5></rect> <rect class="ql-fill ql-stroke" height=3 width=3 x=11 y=5></rect> <path class="ql-even ql-fill ql-stroke" d=M7,8c0,4.031-3,5-3,5></path> <path class="ql-even ql-fill ql-stroke" d=M14,8c0,4.031-3,5-3,5></path> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>'},function(t,e){t.exports='<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class="ql-color-label ql-stroke ql-transparent" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points="5.5 11 9 3 12.5 11"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="3 11 5 9 3 7 3 11"></polygon> <line class="ql-stroke ql-fill" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="15 12 13 10 15 8 15 12"></polygon> <line class="ql-stroke ql-fill" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform="translate(24 18) rotate(-180)"/> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>'},function(t,e){t.exports='<svg viewBox="0 0 18 18"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>'},function(t,e){t.exports='<svg viewBox="0 0 18 18"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class="ql-even ql-fill" points="5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12"></polyline> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class="ql-fill ql-stroke" points="3 7 3 11 5 9 3 7"></polyline> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="5 7 5 11 3 9 5 7"></polyline> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class="ql-even ql-stroke" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class="ql-even ql-stroke" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class="ql-stroke ql-thin" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class="ql-stroke ql-thin" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class="ql-stroke ql-thin" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>'},function(t,e){t.exports='<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points="3 4 4 5 6 3"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points="3 14 4 15 6 13"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="3 9 4 10 6 8"></polyline> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class="ql-stroke ql-thin" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <polygon class=ql-stroke points="7 11 9 13 11 11 7 11"></polygon> <polygon class=ql-stroke points="7 7 9 5 11 7 7 7"></polygon> </svg>'},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.BubbleTooltip=void 0;var r=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=f(n(3)),a=f(n(8)),u=n(43),s=f(u),l=n(15),c=f(n(41));function f(t){return t&&t.__esModule?t:{default:t}}function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function d(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var v=[["bold","italic","link"],[{header:1},{header:2},"blockquote"]],y=function(t){function e(t,n){p(this,e),null!=n.modules.toolbar&&null==n.modules.toolbar.container&&(n.modules.toolbar.container=v);var r=h(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.quill.container.classList.add("ql-bubble"),r}return d(e,s.default),o(e,[{key:"extendToolbar",value:function(t){this.tooltip=new g(this.quill,this.options.bounds),this.tooltip.root.appendChild(t.container),this.buildButtons([].slice.call(t.container.querySelectorAll("button")),c.default),this.buildPickers([].slice.call(t.container.querySelectorAll("select")),c.default)}}]),e}();y.DEFAULTS=(0,i.default)(!0,{},s.default.DEFAULTS,{modules:{toolbar:{handlers:{link:function(t){t?this.quill.theme.tooltip.edit():this.quill.format("link",!1)}}}}});var g=function(t){function e(t,n){p(this,e);var r=h(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.quill.on(a.default.events.EDITOR_CHANGE,function(t,e,n,o){if(t===a.default.events.SELECTION_CHANGE)if(null!=e&&e.length>0&&o===a.default.sources.USER){r.show(),r.root.style.left="0px",r.root.style.width="",r.root.style.width=r.root.offsetWidth+"px";var i=r.quill.getLines(e.index,e.length);if(1===i.length)r.position(r.quill.getBounds(e));else{var u=i[i.length-1],s=r.quill.getIndex(u),c=Math.min(u.length()-1,e.index+e.length-s),f=r.quill.getBounds(new l.Range(s,c));r.position(f)}}else document.activeElement!==r.textbox&&r.quill.hasFocus()&&r.hide()}),r}return d(e,u.BaseTooltip),o(e,[{key:"listen",value:function(){var t=this;r(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"listen",this).call(this),this.root.querySelector(".ql-close").addEventListener("click",function(){t.root.classList.remove("ql-editing")}),this.quill.on(a.default.events.SCROLL_OPTIMIZE,function(){setTimeout(function(){if(!t.root.classList.contains("ql-hidden")){var e=t.quill.getSelection();null!=e&&t.position(t.quill.getBounds(e))}},1)})}},{key:"cancel",value:function(){this.show()}},{key:"position",value:function(t){var n=r(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"position",this).call(this,t),o=this.root.querySelector(".ql-tooltip-arrow");if(o.style.marginLeft="",0===n)return n;o.style.marginLeft=-1*n-o.offsetWidth/2+"px"}}]),e}();g.TEMPLATE=['<span class="ql-tooltip-arrow"></span>','<div class="ql-tooltip-editor">','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-close"></a>',"</div>"].join(""),e.BubbleTooltip=g,e.default=y},function(t,e,n){t.exports=n(63)}]).default},t.exports=n()}).call(this,n(227).Buffer)},function(t,e,n){(t.exports=n(50)(!1)).push([t.i,".ql-video-embed{position:relative;width:100%;padding-top:56%}.ql-video-embed iframe{position:absolute;top:0;left:0;border:0;margin:0;padding:0;width:100%;height:100%}",""])},function(t,e,n){var r=n(157);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(49).default)("59e71145",r,!0,{})},function(t,e,n){"use strict";n.r(e);var r=n(68),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);var a=n(104),u=n(28);var s=function(t){n(158)},l=Object(u.a)(o.a,a.a,a.b,!1,s,null,null);e.default=l.exports},function(t,e,n){var r=n(113);t.exports=function(t){return null==t?"":r(t)}},function(t,e,n){var r=n(108),o=n(111),i=NaN,a=/^\s+|\s+$/g,u=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,l=/^0o[0-7]+$/i,c=parseInt;t.exports=function(t){if("number"==typeof t)return t;if(o(t))return i;if(r(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=r(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(a,"");var n=s.test(t);return n||l.test(t)?c(t.slice(2),n?2:8):u.test(t)?i:+t}},function(t,e,n){var r=n(161),o=1/0,i=1.7976931348623157e308;t.exports=function(t){return t?(t=r(t))===o||t===-o?(t<0?-1:1)*i:t==t?t:0:0===t?t:0}},function(t,e,n){var r=n(162);t.exports=function(t){var e=r(t),n=e%1;return e==e?n?e-n:e:0}},function(t,e){var n="[\\ud800-\\udfff]",r="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",o="\\ud83c[\\udffb-\\udfff]",i="[^\\ud800-\\udfff]",a="(?:\\ud83c[\\udde6-\\uddff]){2}",u="[\\ud800-\\udbff][\\udc00-\\udfff]",s="(?:"+r+"|"+o+")"+"?",l="[\\ufe0e\\ufe0f]?"+s+("(?:\\u200d(?:"+[i,a,u].join("|")+")[\\ufe0e\\ufe0f]?"+s+")*"),c="(?:"+[i+r+"?",r,a,u,n].join("|")+")",f=RegExp(o+"(?="+o+")|"+c+l,"g");t.exports=function(t){return t.match(f)||[]}},function(t,e){t.exports=function(t){return t.split("")}},function(t,e,n){var r=n(165),o=n(73),i=n(164);t.exports=function(t){return o(t)?i(t):r(t)}},function(t,e){var n="[\\ud800-\\udfff]",r="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",o="\\ud83c[\\udffb-\\udfff]",i="[^\\ud800-\\udfff]",a="(?:\\ud83c[\\udde6-\\uddff]){2}",u="[\\ud800-\\udbff][\\udc00-\\udfff]",s="(?:"+r+"|"+o+")"+"?",l="[\\ufe0e\\ufe0f]?"+s+("(?:\\u200d(?:"+[i,a,u].join("|")+")[\\ufe0e\\ufe0f]?"+s+")*"),c="(?:"+[i+r+"?",r,a,u,n].join("|")+")",f=RegExp(o+"(?="+o+")|"+c+l,"g");t.exports=function(t){for(var e=f.lastIndex=0;f.test(t);)++e;return e}},function(t,e){t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},function(t,e,n){var r=n(168)("length");t.exports=r},function(t,e,n){var r=n(169),o=n(73),i=n(167);t.exports=function(t){return o(t)?i(t):r(t)}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){(function(t){var r=n(112),o="object"==typeof e&&e&&!e.nodeType&&e,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,a=i&&i.exports===o&&r.process,u=function(){try{return a&&a.binding&&a.binding("util")}catch(t){}}();t.exports=u}).call(this,n(171)(t))},function(t,e){t.exports=function(t){return function(e){return t(e)}}},function(t,e,n){var r=n(110),o=n(109),i="[object RegExp]";t.exports=function(t){return o(t)&&r(t)==i}},function(t,e,n){var r=n(174),o=n(173),i=n(172),a=i&&i.isRegExp,u=a?o(a):r;t.exports=u},function(t,e){t.exports=function(t,e,n){var r=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(n=n>o?o:n)<0&&(n+=o),o=e>n?0:n-e>>>0,e>>>=0;for(var i=Array(o);++r<o;)i[r]=t[r+e];return i}},function(t,e,n){var r=n(176);t.exports=function(t,e,n){var o=t.length;return n=void 0===n?o:n,!e&&n>=o?t:r(t,e,n)}},function(t,e){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,e,n){var r=n(74),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,u=r?r.toStringTag:void 0;t.exports=function(t){var e=i.call(t,u),n=t[u];try{t[u]=void 0;var r=!0}catch(t){}var o=a.call(t);return r&&(e?t[u]=n:delete t[u]),o}},function(t,e){var n=Array.isArray;t.exports=n},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,o=Array(r);++n<r;)o[n]=e(t[n],n,t);return o}},function(t,e,n){var r=n(112),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();t.exports=i},function(t,e,n){var r=n(113),o=n(177),i=n(73),a=n(108),u=n(175),s=n(170),l=n(166),c=n(163),f=n(160),p=30,h="...",d=/\w*$/;t.exports=function(t,e){var n=p,v=h;if(a(e)){var y="separator"in e?e.separator:y;n="length"in e?c(e.length):n,v="omission"in e?r(e.omission):v}var g=(t=f(t)).length;if(i(t)){var b=l(t);g=b.length}if(n>=g)return t;var m=n-s(v);if(m<1)return v;var _=b?o(b,0,m).join(""):t.slice(0,m);if(void 0===y)return _+v;if(b&&(m+=_.length-m),u(y)){if(t.slice(m).search(y)){var w,x=_;for(y.global||(y=RegExp(y.source,f(d.exec(y))+"g")),y.lastIndex=0;w=y.exec(x);)var O=w.index;_=_.slice(0,void 0===O?m:O)}}else if(t.indexOf(r(y),m)!=m){var E=_.lastIndexOf(y);E>-1&&(_=_.slice(0,E))}return _+v}},function(t,e,n){(t.exports=n(50)(!1)).push([t.i,".ql-embed-source-image{height:100%;display:flex;align-items:center;justify-content:center}.ql-embed-source-image img{max-height:100%;width:auto;object-fit:contain;justify-self:right}.ql-embed-source-image span{background-color:#fff;min-height:100px;width:100%;display:flex;align-items:center;justify-content:center;padding:10px}.ql-embed-source-image span svg{width:60px;height:auto;color:#eee}",""])},function(t,e,n){var r=n(184);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(49).default)("1bea7281",r,!0,{})},function(t,e,n){"use strict";n.r(e);var r=n(69),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);var a=n(106),u=n(28);var s=function(t){n(185)},l=Object(u.a)(o.a,a.a,a.b,!1,s,null,null);e.default=l.exports},function(t,e,n){(t.exports=n(50)(!1)).push([t.i,".ql-embed-source-icon{margin-right:3px;display:inline-block;width:16px;height:16px}.ql-embed-source-icon img{height:100%;width:100%}.ql-embed-source-icon span{height:100%;width:100%;display:inline-flex;align-items:center;justify-content:center;background-color:#999;border-radius:50%;color:#fff}.ql-embed-source-icon span svg{width:5px;height:auto}",""])},function(t,e,n){var r=n(187);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(49).default)("0b4b9f1e",r,!0,{})},function(t,e,n){"use strict";n.r(e);var r=n(70),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);var a=n(107),u=n(28);var s=function(t){n(188)},l=Object(u.a)(o.a,a.a,a.b,!1,s,null,null);e.default=l.exports},function(t,e,n){(t.exports=n(50)(!1)).push([t.i,".ql-link-embed .ql-embed-link,.ql-link-embed .ql-embed-link:hover,.ql-link-embed .ql-embed-link:link{color:gray;text-decoration:none}.ql-link-embed .ql-embed-link{display:flex;position:relative;background-color:#fbfafa;border:1px solid #eeeded;font-size:.9em;max-height:200px}.ql-link-embed .ql-embed-content{width:70%;flex:0 0 70%;padding:15px;display:flex;flex-direction:column}.ql-link-embed .ql-embed-description{flex:1 1 0}.ql-link-embed .ql-embed-source{margin-top:15px;display:flex;align-items:center}.ql-link-embed .ql-embed-image{width:30%;flex:0 0 30%;padding:15px;background-color:#ccc}",""])},function(t,e,n){var r=n(190);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(49).default)("446e60be",r,!0,{})},function(t,e,n){"use strict";n.r(e);var r=n(71),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);var a=n(105),u=n(28);var s=function(t){n(191)},l=Object(u.a)(o.a,a.a,a.b,!1,s,null,null);e.default=l.exports},function(t,e,n){(t.exports=n(50)(!1)).push([t.i,"",""])},function(t,e,n){var r=n(193);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(49).default)("9322a6fe",r,!0,{})},function(t,e,n){"use strict";n.r(e);var r=n(72),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);var a=n(103),u=n(28);var s=function(t){n(194)},l=Object(u.a)(o.a,a.a,a.b,!1,s,null,null);e.default=l.exports},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,o,i,a,u,s=1,l={},c=!1,f=t.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(t);p=p&&p.setTimeout?p:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){d(t)})}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((i=new MessageChannel).port1.onmessage=function(t){d(t.data)},r=function(t){i.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(o=f.documentElement,r=function(t){var e=f.createElement("script");e.onreadystatechange=function(){d(t),e.onreadystatechange=null,o.removeChild(e),e=null},o.appendChild(e)}):r=function(t){setTimeout(d,0,t)}:(a="setImmediate$"+Math.random()+"$",u=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(a)&&d(+e.data.slice(a.length))},t.addEventListener?t.addEventListener("message",u,!1):t.attachEvent("onmessage",u),r=function(e){t.postMessage(a+e,"*")}),p.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var o={callback:t,args:e};return l[s]=o,r(s),s++},p.clearImmediate=h}function h(t){delete l[t]}function d(t){if(c)setTimeout(d,0,t);else{var e=l[t];if(e){c=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{h(t),c=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(44),n(118))},function(t,e,n){(function(t){var r=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(r.call(setTimeout,window,arguments),clearTimeout)},e.setInterval=function(){return new o(r.call(setInterval,window,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(window,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(196),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(44))},function(t,e,n){"use strict";n.r(e),function(t,n){
/*!
 * Vue.js v2.5.16
 * (c) 2014-2018 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({});function o(t){return void 0===t||null===t}function i(t){return void 0!==t&&null!==t}function a(t){return!0===t}function u(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function s(t){return null!==t&&"object"==typeof t}var l=Object.prototype.toString;function c(t){return"[object Object]"===l.call(t)}function f(t){return"[object RegExp]"===l.call(t)}function p(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function h(t){return null==t?"":"object"==typeof t?JSON.stringify(t,null,2):String(t)}function d(t){var e=parseFloat(t);return isNaN(e)?t:e}function v(t,e){for(var n=Object.create(null),r=t.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}v("slot,component",!0);var y=v("key,ref,slot,slot-scope,is");function g(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var b=Object.prototype.hasOwnProperty;function m(t,e){return b.call(t,e)}function _(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var w=/-(\w)/g,x=_(function(t){return t.replace(w,function(t,e){return e?e.toUpperCase():""})}),O=_(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}),E=/\B([A-Z])/g,k=_(function(t){return t.replace(E,"-$1").toLowerCase()});var A=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function S(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function j(t,e){for(var n in e)t[n]=e[n];return t}function N(t){for(var e={},n=0;n<t.length;n++)t[n]&&j(e,t[n]);return e}function T(t,e,n){}var P=function(t,e,n){return!1},C=function(t){return t};function L(t,e){if(t===e)return!0;var n=s(t),r=s(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var o=Array.isArray(t),i=Array.isArray(e);if(o&&i)return t.length===e.length&&t.every(function(t,n){return L(t,e[n])});if(o||i)return!1;var a=Object.keys(t),u=Object.keys(e);return a.length===u.length&&a.every(function(n){return L(t[n],e[n])})}catch(t){return!1}}function q(t,e){for(var n=0;n<t.length;n++)if(L(t[n],e))return n;return-1}function M(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var R="data-server-rendered",I=["component","directive","filter"],B=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured"],D={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:P,isReservedAttr:P,isUnknownElement:P,getTagNamespace:T,parsePlatformTagName:C,mustUseProp:P,_lifecycleHooks:B};function F(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var U=/[^\w.$]/;var $,H="__proto__"in{},z="undefined"!=typeof window,V="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,W=V&&WXEnvironment.platform.toLowerCase(),K=z&&window.navigator.userAgent.toLowerCase(),Y=K&&/msie|trident/.test(K),G=K&&K.indexOf("msie 9.0")>0,Z=K&&K.indexOf("edge/")>0,X=(K&&K.indexOf("android"),K&&/iphone|ipad|ipod|ios/.test(K)||"ios"===W),J=(K&&/chrome\/\d+/.test(K),{}.watch),Q=!1;if(z)try{var tt={};Object.defineProperty(tt,"passive",{get:function(){Q=!0}}),window.addEventListener("test-passive",null,tt)}catch(t){}var et=function(){return void 0===$&&($=!z&&!V&&void 0!==t&&"server"===t.process.env.VUE_ENV),$},nt=z&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function rt(t){return"function"==typeof t&&/native code/.test(t.toString())}var ot,it="undefined"!=typeof Symbol&&rt(Symbol)&&"undefined"!=typeof Reflect&&rt(Reflect.ownKeys);ot="undefined"!=typeof Set&&rt(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var at=T,ut=0,st=function(){this.id=ut++,this.subs=[]};st.prototype.addSub=function(t){this.subs.push(t)},st.prototype.removeSub=function(t){g(this.subs,t)},st.prototype.depend=function(){st.target&&st.target.addDep(this)},st.prototype.notify=function(){for(var t=this.subs.slice(),e=0,n=t.length;e<n;e++)t[e].update()},st.target=null;var lt=[];function ct(t){st.target&&lt.push(st.target),st.target=t}function ft(){st.target=lt.pop()}var pt=function(t,e,n,r,o,i,a,u){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=u,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},ht={child:{configurable:!0}};ht.child.get=function(){return this.componentInstance},Object.defineProperties(pt.prototype,ht);var dt=function(t){void 0===t&&(t="");var e=new pt;return e.text=t,e.isComment=!0,e};function vt(t){return new pt(void 0,void 0,void 0,String(t))}function yt(t){var e=new pt(t.tag,t.data,t.children,t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.isCloned=!0,e}var gt=Array.prototype,bt=Object.create(gt);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(t){var e=gt[t];F(bt,t,function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,i=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&a.observeArray(o),a.dep.notify(),i})});var mt=Object.getOwnPropertyNames(bt),_t=!0;function wt(t){_t=t}var xt=function(t){(this.value=t,this.dep=new st,this.vmCount=0,F(t,"__ob__",this),Array.isArray(t))?((H?Ot:Et)(t,bt,mt),this.observeArray(t)):this.walk(t)};function Ot(t,e,n){t.__proto__=e}function Et(t,e,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];F(t,i,e[i])}}function kt(t,e){var n;if(s(t)&&!(t instanceof pt))return m(t,"__ob__")&&t.__ob__ instanceof xt?n=t.__ob__:_t&&!et()&&(Array.isArray(t)||c(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new xt(t)),e&&n&&n.vmCount++,n}function At(t,e,n,r,o){var i=new st,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var u=a&&a.get;u||2!==arguments.length||(n=t[e]);var s=a&&a.set,l=!o&&kt(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=u?u.call(t):n;return st.target&&(i.depend(),l&&(l.dep.depend(),Array.isArray(e)&&function t(e){for(var n=void 0,r=0,o=e.length;r<o;r++)(n=e[r])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&t(n)}(e))),e},set:function(e){var r=u?u.call(t):n;e===r||e!=e&&r!=r||(s?s.call(t,e):n=e,l=!o&&kt(e),i.notify())}})}}function St(t,e,n){if(Array.isArray(t)&&p(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?(At(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function jt(t,e){if(Array.isArray(t)&&p(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||m(t,e)&&(delete t[e],n&&n.dep.notify())}}xt.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)At(t,e[n])},xt.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)kt(t[e])};var Nt=D.optionMergeStrategies;function Tt(t,e){if(!e)return t;for(var n,r,o,i=Object.keys(e),a=0;a<i.length;a++)r=t[n=i[a]],o=e[n],m(t,n)?c(r)&&c(o)&&Tt(r,o):St(t,n,o);return t}function Pt(t,e,n){return n?function(){var r="function"==typeof e?e.call(n,n):e,o="function"==typeof t?t.call(n,n):t;return r?Tt(r,o):o}:e?t?function(){return Tt("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function Ct(t,e){return e?t?t.concat(e):Array.isArray(e)?e:[e]:t}function Lt(t,e,n,r){var o=Object.create(t||null);return e?j(o,e):o}Nt.data=function(t,e,n){return n?Pt(t,e,n):e&&"function"!=typeof e?t:Pt(t,e)},B.forEach(function(t){Nt[t]=Ct}),I.forEach(function(t){Nt[t+"s"]=Lt}),Nt.watch=function(t,e,n,r){if(t===J&&(t=void 0),e===J&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var o={};for(var i in j(o,t),e){var a=o[i],u=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(u):Array.isArray(u)?u:[u]}return o},Nt.props=Nt.methods=Nt.inject=Nt.computed=function(t,e,n,r){if(!t)return e;var o=Object.create(null);return j(o,t),e&&j(o,e),o},Nt.provide=Pt;var qt=function(t,e){return void 0===e?t:e};function Mt(t,e,n){"function"==typeof e&&(e=e.options),function(t,e){var n=t.props;if(n){var r,o,i={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(o=n[r])&&(i[x(o)]={type:null});else if(c(n))for(var a in n)o=n[a],i[x(a)]=c(o)?o:{type:o};t.props=i}}(e),function(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(c(n))for(var i in n){var a=n[i];r[i]=c(a)?j({from:i},a):{from:a}}}}(e),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}(e);var r=e.extends;if(r&&(t=Mt(t,r,n)),e.mixins)for(var o=0,i=e.mixins.length;o<i;o++)t=Mt(t,e.mixins[o],n);var a,u={};for(a in t)s(a);for(a in e)m(t,a)||s(a);function s(r){var o=Nt[r]||qt;u[r]=o(t[r],e[r],n,r)}return u}function Rt(t,e,n,r){if("string"==typeof n){var o=t[e];if(m(o,n))return o[n];var i=x(n);if(m(o,i))return o[i];var a=O(i);return m(o,a)?o[a]:o[n]||o[i]||o[a]}}function It(t,e,n,r){var o=e[t],i=!m(n,t),a=n[t],u=Ft(Boolean,o.type);if(u>-1)if(i&&!m(o,"default"))a=!1;else if(""===a||a===k(t)){var s=Ft(String,o.type);(s<0||u<s)&&(a=!0)}if(void 0===a){a=function(t,e,n){if(!m(e,"default"))return;var r=e.default;0;if(t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n])return t._props[n];return"function"==typeof r&&"Function"!==Bt(e.type)?r.call(t):r}(r,o,t);var l=_t;wt(!0),kt(a),wt(l)}return a}function Bt(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function Dt(t,e){return Bt(t)===Bt(e)}function Ft(t,e){if(!Array.isArray(e))return Dt(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Dt(e[n],t))return n;return-1}function Ut(t,e,n){if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(r,t,e,n))return}catch(t){$t(t,r,"errorCaptured hook")}}$t(t,e,n)}function $t(t,e,n){if(D.errorHandler)try{return D.errorHandler.call(null,t,e,n)}catch(t){Ht(t,null,"config.errorHandler")}Ht(t,e,n)}function Ht(t,e,n){if(!z&&!V||"undefined"==typeof console)throw t;console.error(t)}var zt,Vt,Wt=[],Kt=!1;function Yt(){Kt=!1;var t=Wt.slice(0);Wt.length=0;for(var e=0;e<t.length;e++)t[e]()}var Gt=!1;if(void 0!==n&&rt(n))Vt=function(){n(Yt)};else if("undefined"==typeof MessageChannel||!rt(MessageChannel)&&"[object MessageChannelConstructor]"!==MessageChannel.toString())Vt=function(){setTimeout(Yt,0)};else{var Zt=new MessageChannel,Xt=Zt.port2;Zt.port1.onmessage=Yt,Vt=function(){Xt.postMessage(1)}}if("undefined"!=typeof Promise&&rt(Promise)){var Jt=Promise.resolve();zt=function(){Jt.then(Yt),X&&setTimeout(T)}}else zt=Vt;function Qt(t,e){var n;if(Wt.push(function(){if(t)try{t.call(e)}catch(t){Ut(t,e,"nextTick")}else n&&n(e)}),Kt||(Kt=!0,Gt?Vt():zt()),!t&&"undefined"!=typeof Promise)return new Promise(function(t){n=t})}var te=new ot;function ee(t){!function t(e,n){var r,o;var i=Array.isArray(e);if(!i&&!s(e)||Object.isFrozen(e)||e instanceof pt)return;if(e.__ob__){var a=e.__ob__.dep.id;if(n.has(a))return;n.add(a)}if(i)for(r=e.length;r--;)t(e[r],n);else for(o=Object.keys(e),r=o.length;r--;)t(e[o[r]],n)}(t,te),te.clear()}var ne,re=_(function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}});function oe(t){function e(){var t=arguments,n=e.fns;if(!Array.isArray(n))return n.apply(null,arguments);for(var r=n.slice(),o=0;o<r.length;o++)r[o].apply(null,t)}return e.fns=t,e}function ie(t,e,n,r,i){var a,u,s,l;for(a in t)u=t[a],s=e[a],l=re(a),o(u)||(o(s)?(o(u.fns)&&(u=t[a]=oe(u)),n(l.name,u,l.once,l.capture,l.passive,l.params)):u!==s&&(s.fns=u,t[a]=s));for(a in e)o(t[a])&&r((l=re(a)).name,e[a],l.capture)}function ae(t,e,n){var r;t instanceof pt&&(t=t.data.hook||(t.data.hook={}));var u=t[e];function s(){n.apply(this,arguments),g(r.fns,s)}o(u)?r=oe([s]):i(u.fns)&&a(u.merged)?(r=u).fns.push(s):r=oe([u,s]),r.merged=!0,t[e]=r}function ue(t,e,n,r,o){if(i(e)){if(m(e,n))return t[n]=e[n],o||delete e[n],!0;if(m(e,r))return t[n]=e[r],o||delete e[r],!0}return!1}function se(t){return u(t)?[vt(t)]:Array.isArray(t)?function t(e,n){var r=[];var s,l,c,f;for(s=0;s<e.length;s++)o(l=e[s])||"boolean"==typeof l||(c=r.length-1,f=r[c],Array.isArray(l)?l.length>0&&(le((l=t(l,(n||"")+"_"+s))[0])&&le(f)&&(r[c]=vt(f.text+l[0].text),l.shift()),r.push.apply(r,l)):u(l)?le(f)?r[c]=vt(f.text+l):""!==l&&r.push(vt(l)):le(l)&&le(f)?r[c]=vt(f.text+l.text):(a(e._isVList)&&i(l.tag)&&o(l.key)&&i(n)&&(l.key="__vlist"+n+"_"+s+"__"),r.push(l)));return r}(t):void 0}function le(t){return i(t)&&i(t.text)&&!1===t.isComment}function ce(t,e){return(t.__esModule||it&&"Module"===t[Symbol.toStringTag])&&(t=t.default),s(t)?e.extend(t):t}function fe(t){return t.isComment&&t.asyncFactory}function pe(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(i(n)&&(i(n.componentOptions)||fe(n)))return n}}function he(t,e,n){n?ne.$once(t,e):ne.$on(t,e)}function de(t,e){ne.$off(t,e)}function ve(t,e,n){ne=t,ie(e,n||{},he,de),ne=void 0}function ye(t,e){var n={};if(!t)return n;for(var r=0,o=t.length;r<o;r++){var i=t[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var u=a.slot,s=n[u]||(n[u]=[]);"template"===i.tag?s.push.apply(s,i.children||[]):s.push(i)}}for(var l in n)n[l].every(ge)&&delete n[l];return n}function ge(t){return t.isComment&&!t.asyncFactory||" "===t.text}function be(t,e){e=e||{};for(var n=0;n<t.length;n++)Array.isArray(t[n])?be(t[n],e):e[t[n].key]=t[n].fn;return e}var me=null;function _e(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function we(t,e){if(e){if(t._directInactive=!1,_e(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)we(t.$children[n]);xe(t,"activated")}}function xe(t,e){ct();var n=t.$options[e];if(n)for(var r=0,o=n.length;r<o;r++)try{n[r].call(t)}catch(n){Ut(n,t,e+" hook")}t._hasHookEvent&&t.$emit("hook:"+e),ft()}var Oe=[],Ee=[],ke={},Ae=!1,Se=!1,je=0;function Ne(){var t,e;for(Se=!0,Oe.sort(function(t,e){return t.id-e.id}),je=0;je<Oe.length;je++)e=(t=Oe[je]).id,ke[e]=null,t.run();var n=Ee.slice(),r=Oe.slice();je=Oe.length=Ee.length=0,ke={},Ae=Se=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,we(t[e],!0)}(n),function(t){var e=t.length;for(;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&xe(r,"updated")}}(r),nt&&D.devtools&&nt.emit("flush")}var Te=0,Pe=function(t,e,n,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Te,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ot,this.newDepIds=new ot,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(t){if(!U.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=function(){})),this.value=this.lazy?void 0:this.get()};Pe.prototype.get=function(){var t;ct(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;Ut(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ee(t),ft(),this.cleanupDeps()}return t},Pe.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},Pe.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Pe.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==ke[e]){if(ke[e]=!0,Se){for(var n=Oe.length-1;n>je&&Oe[n].id>t.id;)n--;Oe.splice(n+1,0,t)}else Oe.push(t);Ae||(Ae=!0,Qt(Ne))}}(this)},Pe.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||s(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){Ut(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},Pe.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Pe.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},Pe.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||g(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var Ce={enumerable:!0,configurable:!0,get:T,set:T};function Le(t,e,n){Ce.get=function(){return this[e][n]},Ce.set=function(t){this[e][n]=t},Object.defineProperty(t,n,Ce)}function qe(t){t._watchers=[];var e=t.$options;e.props&&function(t,e){var n=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[];t.$parent&&wt(!1);var i=function(i){o.push(i);var a=It(i,e,n,t);At(r,i,a),i in t||Le(t,"_props",i)};for(var a in e)i(a);wt(!0)}(t,e.props),e.methods&&function(t,e){t.$options.props;for(var n in e)t[n]=null==e[n]?T:A(e[n],t)}(t,e.methods),e.data?function(t){var e=t.$options.data;c(e=t._data="function"==typeof e?function(t,e){ct();try{return t.call(e,e)}catch(t){return Ut(t,e,"data()"),{}}finally{ft()}}(e,t):e||{})||(e={});var n=Object.keys(e),r=t.$options.props,o=(t.$options.methods,n.length);for(;o--;){var i=n[o];0,r&&m(r,i)||(void 0,36!==(a=(i+"").charCodeAt(0))&&95!==a&&Le(t,"_data",i))}var a;kt(e,!0)}(t):kt(t._data={},!0),e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),r=et();for(var o in e){var i=e[o],a="function"==typeof i?i:i.get;0,r||(n[o]=new Pe(t,a||T,T,Me)),o in t||Re(t,o,i)}}(t,e.computed),e.watch&&e.watch!==J&&function(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)Be(t,n,r[o]);else Be(t,n,r)}}(t,e.watch)}var Me={lazy:!0};function Re(t,e,n){var r=!et();"function"==typeof n?(Ce.get=r?Ie(e):n,Ce.set=T):(Ce.get=n.get?r&&!1!==n.cache?Ie(e):n.get:T,Ce.set=n.set?n.set:T),Object.defineProperty(t,e,Ce)}function Ie(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),st.target&&e.depend(),e.value}}function Be(t,e,n,r){return c(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}function De(t,e){if(t){for(var n=Object.create(null),r=it?Reflect.ownKeys(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}):Object.keys(t),o=0;o<r.length;o++){for(var i=r[o],a=t[i].from,u=e;u;){if(u._provided&&m(u._provided,a)){n[i]=u._provided[a];break}u=u.$parent}if(!u)if("default"in t[i]){var s=t[i].default;n[i]="function"==typeof s?s.call(e):s}else 0}return n}}function Fe(t,e){var n,r,o,a,u;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),r=0,o=t.length;r<o;r++)n[r]=e(t[r],r);else if("number"==typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(s(t))for(a=Object.keys(t),n=new Array(a.length),r=0,o=a.length;r<o;r++)u=a[r],n[r]=e(t[u],u,r);return i(n)&&(n._isVList=!0),n}function Ue(t,e,n,r){var o,i=this.$scopedSlots[t];if(i)n=n||{},r&&(n=j(j({},r),n)),o=i(n)||e;else{var a=this.$slots[t];a&&(a._rendered=!0),o=a||e}var u=n&&n.slot;return u?this.$createElement("template",{slot:u},o):o}function $e(t){return Rt(this.$options,"filters",t)||C}function He(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function ze(t,e,n,r,o){var i=D.keyCodes[e]||n;return o&&r&&!D.keyCodes[e]?He(o,r):i?He(i,t):r?k(r)!==e:void 0}function Ve(t,e,n,r,o){if(n)if(s(n)){var i;Array.isArray(n)&&(n=N(n));var a=function(a){if("class"===a||"style"===a||y(a))i=t;else{var u=t.attrs&&t.attrs.type;i=r||D.mustUseProp(e,u,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}a in i||(i[a]=n[a],o&&((t.on||(t.on={}))["update:"+a]=function(t){n[a]=t}))};for(var u in n)a(u)}else;return t}function We(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e?r:(Ye(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r)}function Ke(t,e,n){return Ye(t,"__once__"+e+(n?"_"+n:""),!0),t}function Ye(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&Ge(t[r],e+"_"+r,n);else Ge(t,e,n)}function Ge(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function Ze(t,e){if(e)if(c(e)){var n=t.on=t.on?j({},t.on):{};for(var r in e){var o=n[r],i=e[r];n[r]=o?[].concat(o,i):i}}else;return t}function Xe(t){t._o=Ke,t._n=d,t._s=h,t._l=Fe,t._t=Ue,t._q=L,t._i=q,t._m=We,t._f=$e,t._k=ze,t._b=Ve,t._v=vt,t._e=dt,t._u=be,t._g=Ze}function Je(t,e,n,o,i){var u,s=i.options;m(o,"_uid")?(u=Object.create(o))._original=o:(u=o,o=o._original);var l=a(s._compiled),c=!l;this.data=t,this.props=e,this.children=n,this.parent=o,this.listeners=t.on||r,this.injections=De(s.inject,o),this.slots=function(){return ye(n,o)},l&&(this.$options=s,this.$slots=this.slots(),this.$scopedSlots=t.scopedSlots||r),s._scopeId?this._c=function(t,e,n,r){var i=un(u,t,e,n,r,c);return i&&!Array.isArray(i)&&(i.fnScopeId=s._scopeId,i.fnContext=o),i}:this._c=function(t,e,n,r){return un(u,t,e,n,r,c)}}function Qe(t,e,n,r){var o=yt(t);return o.fnContext=n,o.fnOptions=r,e.slot&&((o.data||(o.data={})).slot=e.slot),o}function tn(t,e){for(var n in e)t[x(n)]=e[n]}Xe(Je.prototype);var en={init:function(t,e,n,r){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var o=t;en.prepatch(o,o)}else{(t.componentInstance=function(t,e,n,r){var o={_isComponent:!0,parent:e,_parentVnode:t,_parentElm:n||null,_refElm:r||null},a=t.data.inlineTemplate;i(a)&&(o.render=a.render,o.staticRenderFns=a.staticRenderFns);return new t.componentOptions.Ctor(o)}(t,me,n,r)).$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions;!function(t,e,n,o,i){var a=!!(i||t.$options._renderChildren||o.data.scopedSlots||t.$scopedSlots!==r);if(t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o),t.$options._renderChildren=i,t.$attrs=o.data.attrs||r,t.$listeners=n||r,e&&t.$options.props){wt(!1);for(var u=t._props,s=t.$options._propKeys||[],l=0;l<s.length;l++){var c=s[l],f=t.$options.props;u[c]=It(c,f,e,t)}wt(!0),t.$options.propsData=e}n=n||r;var p=t.$options._parentListeners;t.$options._parentListeners=n,ve(t,n,p),a&&(t.$slots=ye(i,o.context),t.$forceUpdate())}(e.componentInstance=t.componentInstance,n.propsData,n.listeners,e,n.children)},insert:function(t){var e,n=t.context,r=t.componentInstance;r._isMounted||(r._isMounted=!0,xe(r,"mounted")),t.data.keepAlive&&(n._isMounted?((e=r)._inactive=!1,Ee.push(e)):we(r,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?function t(e,n){if(!(n&&(e._directInactive=!0,_e(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)t(e.$children[r]);xe(e,"deactivated")}}(e,!0):e.$destroy())}},nn=Object.keys(en);function rn(t,e,n,u,l){if(!o(t)){var c=n.$options._base;if(s(t)&&(t=c.extend(t)),"function"==typeof t){var f;if(o(t.cid)&&void 0===(t=function(t,e,n){if(a(t.error)&&i(t.errorComp))return t.errorComp;if(i(t.resolved))return t.resolved;if(a(t.loading)&&i(t.loadingComp))return t.loadingComp;if(!i(t.contexts)){var r=t.contexts=[n],u=!0,l=function(){for(var t=0,e=r.length;t<e;t++)r[t].$forceUpdate()},c=M(function(n){t.resolved=ce(n,e),u||l()}),f=M(function(e){i(t.errorComp)&&(t.error=!0,l())}),p=t(c,f);return s(p)&&("function"==typeof p.then?o(t.resolved)&&p.then(c,f):i(p.component)&&"function"==typeof p.component.then&&(p.component.then(c,f),i(p.error)&&(t.errorComp=ce(p.error,e)),i(p.loading)&&(t.loadingComp=ce(p.loading,e),0===p.delay?t.loading=!0:setTimeout(function(){o(t.resolved)&&o(t.error)&&(t.loading=!0,l())},p.delay||200)),i(p.timeout)&&setTimeout(function(){o(t.resolved)&&f(null)},p.timeout))),u=!1,t.loading?t.loadingComp:t.resolved}t.contexts.push(n)}(f=t,c,n)))return function(t,e,n,r,o){var i=dt();return i.asyncFactory=t,i.asyncMeta={data:e,context:n,children:r,tag:o},i}(f,e,n,u,l);e=e||{},ln(t),i(e.model)&&function(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.props||(e.props={}))[n]=e.model.value;var o=e.on||(e.on={});i(o[r])?o[r]=[e.model.callback].concat(o[r]):o[r]=e.model.callback}(t.options,e);var p=function(t,e,n){var r=e.options.props;if(!o(r)){var a={},u=t.attrs,s=t.props;if(i(u)||i(s))for(var l in r){var c=k(l);ue(a,s,l,c,!0)||ue(a,u,l,c,!1)}return a}}(e,t);if(a(t.options.functional))return function(t,e,n,o,a){var u=t.options,s={},l=u.props;if(i(l))for(var c in l)s[c]=It(c,l,e||r);else i(n.attrs)&&tn(s,n.attrs),i(n.props)&&tn(s,n.props);var f=new Je(n,s,a,o,t),p=u.render.call(null,f._c,f);if(p instanceof pt)return Qe(p,n,f.parent,u);if(Array.isArray(p)){for(var h=se(p)||[],d=new Array(h.length),v=0;v<h.length;v++)d[v]=Qe(h[v],n,f.parent,u);return d}}(t,p,e,n,u);var h=e.on;if(e.on=e.nativeOn,a(t.options.abstract)){var d=e.slot;e={},d&&(e.slot=d)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<nn.length;n++){var r=nn[n];e[r]=en[r]}}(e);var v=t.options.name||l;return new pt("vue-component-"+t.cid+(v?"-"+v:""),e,void 0,void 0,void 0,n,{Ctor:t,propsData:p,listeners:h,tag:l,children:u},f)}}}var on=1,an=2;function un(t,e,n,r,l,c){return(Array.isArray(n)||u(n))&&(l=r,r=n,n=void 0),a(c)&&(l=an),function(t,e,n,r,u){if(i(n)&&i(n.__ob__))return dt();i(n)&&i(n.is)&&(e=n.is);if(!e)return dt();0;Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);u===an?r=se(r):u===on&&(r=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(r));var l,c;if("string"==typeof e){var f;c=t.$vnode&&t.$vnode.ns||D.getTagNamespace(e),l=D.isReservedTag(e)?new pt(D.parsePlatformTagName(e),n,r,void 0,void 0,t):i(f=Rt(t.$options,"components",e))?rn(f,n,t,r,e):new pt(e,n,r,void 0,void 0,t)}else l=rn(e,n,t,r);return Array.isArray(l)?l:i(l)?(i(c)&&function t(e,n,r){e.ns=n;"foreignObject"===e.tag&&(n=void 0,r=!0);if(i(e.children))for(var u=0,s=e.children.length;u<s;u++){var l=e.children[u];i(l.tag)&&(o(l.ns)||a(r)&&"svg"!==l.tag)&&t(l,n,r)}}(l,c),i(n)&&function(t){s(t.style)&&ee(t.style);s(t.class)&&ee(t.class)}(n),l):dt()}(t,e,n,r,l)}var sn=0;function ln(t){var e=t.options;if(t.super){var n=ln(t.super);if(n!==t.superOptions){t.superOptions=n;var r=function(t){var e,n=t.options,r=t.extendOptions,o=t.sealedOptions;for(var i in n)n[i]!==o[i]&&(e||(e={}),e[i]=cn(n[i],r[i],o[i]));return e}(t);r&&j(t.extendOptions,r),(e=t.options=Mt(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function cn(t,e,n){if(Array.isArray(t)){var r=[];n=Array.isArray(n)?n:[n],e=Array.isArray(e)?e:[e];for(var o=0;o<t.length;o++)(e.indexOf(t[o])>=0||n.indexOf(t[o])<0)&&r.push(t[o]);return r}return t}function fn(t){this._init(t)}function pn(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||n.options.name;var a=function(t){this._init(t)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=e++,a.options=Mt(n.options,t),a.super=n,a.options.props&&function(t){var e=t.options.props;for(var n in e)Le(t.prototype,"_props",n)}(a),a.options.computed&&function(t){var e=t.options.computed;for(var n in e)Re(t.prototype,n,e[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,I.forEach(function(t){a[t]=n[t]}),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=j({},a.options),o[r]=a,a}}function hn(t){return t&&(t.Ctor.options.name||t.tag)}function dn(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!f(t)&&t.test(e)}function vn(t,e){var n=t.cache,r=t.keys,o=t._vnode;for(var i in n){var a=n[i];if(a){var u=hn(a.componentOptions);u&&!e(u)&&yn(n,i,r,o)}}}function yn(t,e,n,r){var o=t[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[e]=null,g(n,e)}!function(t){t.prototype._init=function(t){var e=this;e._uid=sn++,e._isVue=!0,t&&t._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r,n._parentElm=e._parentElm,n._refElm=e._refElm;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(e,t):e.$options=Mt(ln(e.constructor),t||{},e),e._renderProxy=e,e._self=e,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(e),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&ve(t,e)}(e),function(t){t._vnode=null,t._staticTrees=null;var e=t.$options,n=t.$vnode=e._parentVnode,o=n&&n.context;t.$slots=ye(e._renderChildren,o),t.$scopedSlots=r,t._c=function(e,n,r,o){return un(t,e,n,r,o,!1)},t.$createElement=function(e,n,r,o){return un(t,e,n,r,o,!0)};var i=n&&n.data;At(t,"$attrs",i&&i.attrs||r,null,!0),At(t,"$listeners",e._parentListeners||r,null,!0)}(e),xe(e,"beforeCreate"),function(t){var e=De(t.$options.inject,t);e&&(wt(!1),Object.keys(e).forEach(function(n){At(t,n,e[n])}),wt(!0))}(e),qe(e),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(e),xe(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(fn),function(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=St,t.prototype.$delete=jt,t.prototype.$watch=function(t,e,n){if(c(e))return Be(this,t,e,n);(n=n||{}).user=!0;var r=new Pe(this,t,e,n);return n.immediate&&e.call(this,r.value),function(){r.teardown()}}}(fn),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){if(Array.isArray(t))for(var r=0,o=t.length;r<o;r++)this.$on(t[r],n);else(this._events[t]||(this._events[t]=[])).push(n),e.test(t)&&(this._hasHookEvent=!0);return this},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,o=t.length;r<o;r++)this.$off(t[r],e);return n}var i=n._events[t];if(!i)return n;if(!e)return n._events[t]=null,n;if(e)for(var a,u=i.length;u--;)if((a=i[u])===e||a.fn===e){i.splice(u,1);break}return n},t.prototype.$emit=function(t){var e=this._events[t];if(e){e=e.length>1?S(e):e;for(var n=S(arguments,1),r=0,o=e.length;r<o;r++)try{e[r].apply(this,n)}catch(e){Ut(e,this,'event handler for "'+t+'"')}}return this}}(fn),function(t){t.prototype._update=function(t,e){var n=this;n._isMounted&&xe(n,"beforeUpdate");var r=n.$el,o=n._vnode,i=me;me=n,n._vnode=t,o?n.$el=n.__patch__(o,t):(n.$el=n.__patch__(n.$el,t,e,!1,n.$options._parentElm,n.$options._refElm),n.$options._parentElm=n.$options._refElm=null),me=i,r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){xe(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||g(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),xe(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(fn),function(t){Xe(t.prototype),t.prototype.$nextTick=function(t){return Qt(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,o=n.render,i=n._parentVnode;i&&(e.$scopedSlots=i.data.scopedSlots||r),e.$vnode=i;try{t=o.call(e._renderProxy,e.$createElement)}catch(n){Ut(n,e,"render"),t=e._vnode}return t instanceof pt||(t=dt()),t.parent=i,t}}(fn);var gn=[String,RegExp,Array],bn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:gn,exclude:gn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)yn(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",function(e){vn(t,function(t){return dn(e,t)})}),this.$watch("exclude",function(e){vn(t,function(t){return!dn(e,t)})})},render:function(){var t=this.$slots.default,e=pe(t),n=e&&e.componentOptions;if(n){var r=hn(n),o=this.include,i=this.exclude;if(o&&(!r||!dn(o,r))||i&&r&&dn(i,r))return e;var a=this.cache,u=this.keys,s=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;a[s]?(e.componentInstance=a[s].componentInstance,g(u,s),u.push(s)):(a[s]=e,u.push(s),this.max&&u.length>parseInt(this.max)&&yn(a,u[0],u,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}}};!function(t){var e={get:function(){return D}};Object.defineProperty(t,"config",e),t.util={warn:at,extend:j,mergeOptions:Mt,defineReactive:At},t.set=St,t.delete=jt,t.nextTick=Qt,t.options=Object.create(null),I.forEach(function(e){t.options[e+"s"]=Object.create(null)}),t.options._base=t,j(t.options.components,bn),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=S(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=Mt(this.options,t),this}}(t),pn(t),function(t){I.forEach(function(e){t[e]=function(t,n){return n?("component"===e&&c(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}})}(t)}(fn),Object.defineProperty(fn.prototype,"$isServer",{get:et}),Object.defineProperty(fn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(fn,"FunctionalRenderContext",{value:Je}),fn.version="2.5.16";var mn=v("style,class"),_n=v("input,textarea,option,select,progress"),wn=v("contenteditable,draggable,spellcheck"),xn=v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),On="http://www.w3.org/1999/xlink",En=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},kn=function(t){return En(t)?t.slice(6,t.length):""},An=function(t){return null==t||!1===t};function Sn(t){for(var e=t.data,n=t,r=t;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=jn(r.data,e));for(;i(n=n.parent);)n&&n.data&&(e=jn(e,n.data));return function(t,e){if(i(t)||i(e))return Nn(t,Tn(e));return""}(e.staticClass,e.class)}function jn(t,e){return{staticClass:Nn(t.staticClass,e.staticClass),class:i(t.class)?[t.class,e.class]:e.class}}function Nn(t,e){return t?e?t+" "+e:t:e||""}function Tn(t){return Array.isArray(t)?function(t){for(var e,n="",r=0,o=t.length;r<o;r++)i(e=Tn(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):s(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var Pn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Cn=v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Ln=v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),qn=function(t){return Cn(t)||Ln(t)};var Mn=Object.create(null);var Rn=v("text,number,password,search,email,tel,url");var In=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t?n:(e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(t,e){return document.createElementNS(Pn[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),Bn={create:function(t,e){Dn(e)},update:function(t,e){t.data.ref!==e.data.ref&&(Dn(t,!0),Dn(e))},destroy:function(t){Dn(t,!0)}};function Dn(t,e){var n=t.data.ref;if(i(n)){var r=t.context,o=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?g(a[n],o):a[n]===o&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(o)<0&&a[n].push(o):a[n]=[o]:a[n]=o}}var Fn=new pt("",{},[]),Un=["create","activate","update","remove","destroy"];function $n(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&i(t.data)===i(e.data)&&function(t,e){if("input"!==t.tag)return!0;var n,r=i(n=t.data)&&i(n=n.attrs)&&n.type,o=i(n=e.data)&&i(n=n.attrs)&&n.type;return r===o||Rn(r)&&Rn(o)}(t,e)||a(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&o(e.asyncFactory.error))}function Hn(t,e,n){var r,o,a={};for(r=e;r<=n;++r)i(o=t[r].key)&&(a[o]=r);return a}var zn={create:Vn,update:Vn,destroy:function(t){Vn(t,Fn)}};function Vn(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,o,i=t===Fn,a=e===Fn,u=Kn(t.data.directives,t.context),s=Kn(e.data.directives,e.context),l=[],c=[];for(n in s)r=u[n],o=s[n],r?(o.oldValue=r.value,Gn(o,"update",e,t),o.def&&o.def.componentUpdated&&c.push(o)):(Gn(o,"bind",e,t),o.def&&o.def.inserted&&l.push(o));if(l.length){var f=function(){for(var n=0;n<l.length;n++)Gn(l[n],"inserted",e,t)};i?ae(e,"insert",f):f()}c.length&&ae(e,"postpatch",function(){for(var n=0;n<c.length;n++)Gn(c[n],"componentUpdated",e,t)});if(!i)for(n in u)s[n]||Gn(u[n],"unbind",t,t,a)}(t,e)}var Wn=Object.create(null);function Kn(t,e){var n,r,o=Object.create(null);if(!t)return o;for(n=0;n<t.length;n++)(r=t[n]).modifiers||(r.modifiers=Wn),o[Yn(r)]=r,r.def=Rt(e.$options,"directives",r.name);return o}function Yn(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function Gn(t,e,n,r,o){var i=t.def&&t.def[e];if(i)try{i(n.elm,t,n,r,o)}catch(r){Ut(r,n.context,"directive "+t.name+" "+e+" hook")}}var Zn=[Bn,zn];function Xn(t,e){var n=e.componentOptions;if(!(i(n)&&!1===n.Ctor.options.inheritAttrs||o(t.data.attrs)&&o(e.data.attrs))){var r,a,u=e.elm,s=t.data.attrs||{},l=e.data.attrs||{};for(r in i(l.__ob__)&&(l=e.data.attrs=j({},l)),l)a=l[r],s[r]!==a&&Jn(u,r,a);for(r in(Y||Z)&&l.value!==s.value&&Jn(u,"value",l.value),s)o(l[r])&&(En(r)?u.removeAttributeNS(On,kn(r)):wn(r)||u.removeAttribute(r))}}function Jn(t,e,n){t.tagName.indexOf("-")>-1?Qn(t,e,n):xn(e)?An(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):wn(e)?t.setAttribute(e,An(n)||"false"===n?"false":"true"):En(e)?An(n)?t.removeAttributeNS(On,kn(e)):t.setAttributeNS(On,e,n):Qn(t,e,n)}function Qn(t,e,n){if(An(n))t.removeAttribute(e);else{if(Y&&!G&&"TEXTAREA"===t.tagName&&"placeholder"===e&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var tr={create:Xn,update:Xn};function er(t,e){var n=e.elm,r=e.data,a=t.data;if(!(o(r.staticClass)&&o(r.class)&&(o(a)||o(a.staticClass)&&o(a.class)))){var u=Sn(e),s=n._transitionClasses;i(s)&&(u=Nn(u,Tn(s))),u!==n._prevClass&&(n.setAttribute("class",u),n._prevClass=u)}}var nr,rr={create:er,update:er},or="__r",ir="__c";function ar(t,e,n,r,o){var i;e=(i=e)._withTask||(i._withTask=function(){Gt=!0;var t=i.apply(null,arguments);return Gt=!1,t}),n&&(e=function(t,e,n){var r=nr;return function o(){null!==t.apply(null,arguments)&&ur(e,o,n,r)}}(e,t,r)),nr.addEventListener(t,e,Q?{capture:r,passive:o}:r)}function ur(t,e,n,r){(r||nr).removeEventListener(t,e._withTask||e,n)}function sr(t,e){if(!o(t.data.on)||!o(e.data.on)){var n=e.data.on||{},r=t.data.on||{};nr=e.elm,function(t){if(i(t[or])){var e=Y?"change":"input";t[e]=[].concat(t[or],t[e]||[]),delete t[or]}i(t[ir])&&(t.change=[].concat(t[ir],t.change||[]),delete t[ir])}(n),ie(n,r,ar,ur,e.context),nr=void 0}}var lr={create:sr,update:sr};function cr(t,e){if(!o(t.data.domProps)||!o(e.data.domProps)){var n,r,a=e.elm,u=t.data.domProps||{},s=e.data.domProps||{};for(n in i(s.__ob__)&&(s=e.data.domProps=j({},s)),u)o(s[n])&&(a[n]="");for(n in s){if(r=s[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),r===u[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n){a._value=r;var l=o(r)?"":String(r);fr(a,l)&&(a.value=l)}else a[n]=r}}}function fr(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,r=t._vModifiers;if(i(r)){if(r.lazy)return!1;if(r.number)return d(n)!==d(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var pr={create:cr,update:cr},hr=_(function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach(function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}}),e});function dr(t){var e=vr(t.style);return t.staticStyle?j(t.staticStyle,e):e}function vr(t){return Array.isArray(t)?N(t):"string"==typeof t?hr(t):t}var yr,gr=/^--/,br=/\s*!important$/,mr=function(t,e,n){if(gr.test(e))t.style.setProperty(e,n);else if(br.test(n))t.style.setProperty(e,n.replace(br,""),"important");else{var r=wr(e);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)t.style[r]=n[o];else t.style[r]=n}},_r=["Webkit","Moz","ms"],wr=_(function(t){if(yr=yr||document.createElement("div").style,"filter"!==(t=x(t))&&t in yr)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<_r.length;n++){var r=_r[n]+e;if(r in yr)return r}});function xr(t,e){var n=e.data,r=t.data;if(!(o(n.staticStyle)&&o(n.style)&&o(r.staticStyle)&&o(r.style))){var a,u,s=e.elm,l=r.staticStyle,c=r.normalizedStyle||r.style||{},f=l||c,p=vr(e.data.style)||{};e.data.normalizedStyle=i(p.__ob__)?j({},p):p;var h=function(t,e){var n,r={};if(e)for(var o=t;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=dr(o.data))&&j(r,n);(n=dr(t.data))&&j(r,n);for(var i=t;i=i.parent;)i.data&&(n=dr(i.data))&&j(r,n);return r}(e,!0);for(u in f)o(h[u])&&mr(s,u,"");for(u in h)(a=h[u])!==f[u]&&mr(s,u,null==a?"":a)}}var Or={create:xr,update:xr};function Er(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.add(e)}):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function kr(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.remove(e)}):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function Ar(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&j(e,Sr(t.name||"v")),j(e,t),e}return"string"==typeof t?Sr(t):void 0}}var Sr=_(function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}}),jr=z&&!G,Nr="transition",Tr="animation",Pr="transition",Cr="transitionend",Lr="animation",qr="animationend";jr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Pr="WebkitTransition",Cr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Lr="WebkitAnimation",qr="webkitAnimationEnd"));var Mr=z?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function Rr(t){Mr(function(){Mr(t)})}function Ir(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),Er(t,e))}function Br(t,e){t._transitionClasses&&g(t._transitionClasses,e),kr(t,e)}function Dr(t,e,n){var r=Ur(t,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return n();var u=o===Nr?Cr:qr,s=0,l=function(){t.removeEventListener(u,c),n()},c=function(e){e.target===t&&++s>=a&&l()};setTimeout(function(){s<a&&l()},i+1),t.addEventListener(u,c)}var Fr=/\b(transform|all)(,|$)/;function Ur(t,e){var n,r=window.getComputedStyle(t),o=r[Pr+"Delay"].split(", "),i=r[Pr+"Duration"].split(", "),a=$r(o,i),u=r[Lr+"Delay"].split(", "),s=r[Lr+"Duration"].split(", "),l=$r(u,s),c=0,f=0;return e===Nr?a>0&&(n=Nr,c=a,f=i.length):e===Tr?l>0&&(n=Tr,c=l,f=s.length):f=(n=(c=Math.max(a,l))>0?a>l?Nr:Tr:null)?n===Nr?i.length:s.length:0,{type:n,timeout:c,propCount:f,hasTransform:n===Nr&&Fr.test(r[Pr+"Property"])}}function $r(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map(function(e,n){return Hr(e)+Hr(t[n])}))}function Hr(t){return 1e3*Number(t.slice(0,-1))}function zr(t,e){var n=t.elm;i(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=Ar(t.data.transition);if(!o(r)&&!i(n._enterCb)&&1===n.nodeType){for(var a=r.css,u=r.type,l=r.enterClass,c=r.enterToClass,f=r.enterActiveClass,p=r.appearClass,h=r.appearToClass,v=r.appearActiveClass,y=r.beforeEnter,g=r.enter,b=r.afterEnter,m=r.enterCancelled,_=r.beforeAppear,w=r.appear,x=r.afterAppear,O=r.appearCancelled,E=r.duration,k=me,A=me.$vnode;A&&A.parent;)k=(A=A.parent).context;var S=!k._isMounted||!t.isRootInsert;if(!S||w||""===w){var j=S&&p?p:l,N=S&&v?v:f,T=S&&h?h:c,P=S&&_||y,C=S&&"function"==typeof w?w:g,L=S&&x||b,q=S&&O||m,R=d(s(E)?E.enter:E);0;var I=!1!==a&&!G,B=Kr(C),D=n._enterCb=M(function(){I&&(Br(n,T),Br(n,N)),D.cancelled?(I&&Br(n,j),q&&q(n)):L&&L(n),n._enterCb=null});t.data.show||ae(t,"insert",function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),C&&C(n,D)}),P&&P(n),I&&(Ir(n,j),Ir(n,N),Rr(function(){Br(n,j),D.cancelled||(Ir(n,T),B||(Wr(R)?setTimeout(D,R):Dr(n,u,D)))})),t.data.show&&(e&&e(),C&&C(n,D)),I||B||D()}}}function Vr(t,e){var n=t.elm;i(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=Ar(t.data.transition);if(o(r)||1!==n.nodeType)return e();if(!i(n._leaveCb)){var a=r.css,u=r.type,l=r.leaveClass,c=r.leaveToClass,f=r.leaveActiveClass,p=r.beforeLeave,h=r.leave,v=r.afterLeave,y=r.leaveCancelled,g=r.delayLeave,b=r.duration,m=!1!==a&&!G,_=Kr(h),w=d(s(b)?b.leave:b);0;var x=n._leaveCb=M(function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),m&&(Br(n,c),Br(n,f)),x.cancelled?(m&&Br(n,l),y&&y(n)):(e(),v&&v(n)),n._leaveCb=null});g?g(O):O()}function O(){x.cancelled||(t.data.show||((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),p&&p(n),m&&(Ir(n,l),Ir(n,f),Rr(function(){Br(n,l),x.cancelled||(Ir(n,c),_||(Wr(w)?setTimeout(x,w):Dr(n,u,x)))})),h&&h(n,x),m||_||x())}}function Wr(t){return"number"==typeof t&&!isNaN(t)}function Kr(t){if(o(t))return!1;var e=t.fns;return i(e)?Kr(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function Yr(t,e){!0!==e.data.show&&zr(e)}var Gr=function(t){var e,n,r={},s=t.modules,l=t.nodeOps;for(e=0;e<Un.length;++e)for(r[Un[e]]=[],n=0;n<s.length;++n)i(s[n][Un[e]])&&r[Un[e]].push(s[n][Un[e]]);function c(t){var e=l.parentNode(t);i(e)&&l.removeChild(e,t)}function f(t,e,n,o,u,s,c){if(i(t.elm)&&i(s)&&(t=s[c]=yt(t)),t.isRootInsert=!u,!function(t,e,n,o){var u=t.data;if(i(u)){var s=i(t.componentInstance)&&u.keepAlive;if(i(u=u.hook)&&i(u=u.init)&&u(t,!1,n,o),i(t.componentInstance))return p(t,e),a(s)&&function(t,e,n,o){for(var a,u=t;u.componentInstance;)if(u=u.componentInstance._vnode,i(a=u.data)&&i(a=a.transition)){for(a=0;a<r.activate.length;++a)r.activate[a](Fn,u);e.push(u);break}h(n,t.elm,o)}(t,e,n,o),!0}}(t,e,n,o)){var f=t.data,v=t.children,y=t.tag;i(y)?(t.elm=t.ns?l.createElementNS(t.ns,y):l.createElement(y,t),b(t),d(t,v,e),i(f)&&g(t,e),h(n,t.elm,o)):a(t.isComment)?(t.elm=l.createComment(t.text),h(n,t.elm,o)):(t.elm=l.createTextNode(t.text),h(n,t.elm,o))}}function p(t,e){i(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,y(t)?(g(t,e),b(t)):(Dn(t),e.push(t))}function h(t,e,n){i(t)&&(i(n)?n.parentNode===t&&l.insertBefore(t,e,n):l.appendChild(t,e))}function d(t,e,n){if(Array.isArray(e))for(var r=0;r<e.length;++r)f(e[r],n,t.elm,null,!0,e,r);else u(t.text)&&l.appendChild(t.elm,l.createTextNode(String(t.text)))}function y(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return i(t.tag)}function g(t,n){for(var o=0;o<r.create.length;++o)r.create[o](Fn,t);i(e=t.data.hook)&&(i(e.create)&&e.create(Fn,t),i(e.insert)&&n.push(t))}function b(t){var e;if(i(e=t.fnScopeId))l.setStyleScope(t.elm,e);else for(var n=t;n;)i(e=n.context)&&i(e=e.$options._scopeId)&&l.setStyleScope(t.elm,e),n=n.parent;i(e=me)&&e!==t.context&&e!==t.fnContext&&i(e=e.$options._scopeId)&&l.setStyleScope(t.elm,e)}function m(t,e,n,r,o,i){for(;r<=o;++r)f(n[r],i,t,e,!1,n,r)}function _(t){var e,n,o=t.data;if(i(o))for(i(e=o.hook)&&i(e=e.destroy)&&e(t),e=0;e<r.destroy.length;++e)r.destroy[e](t);if(i(e=t.children))for(n=0;n<t.children.length;++n)_(t.children[n])}function w(t,e,n,r){for(;n<=r;++n){var o=e[n];i(o)&&(i(o.tag)?(x(o),_(o)):c(o.elm))}}function x(t,e){if(i(e)||i(t.data)){var n,o=r.remove.length+1;for(i(e)?e.listeners+=o:e=function(t,e){function n(){0==--n.listeners&&c(t)}return n.listeners=e,n}(t.elm,o),i(n=t.componentInstance)&&i(n=n._vnode)&&i(n.data)&&x(n,e),n=0;n<r.remove.length;++n)r.remove[n](t,e);i(n=t.data.hook)&&i(n=n.remove)?n(t,e):e()}else c(t.elm)}function O(t,e,n,r){for(var o=n;o<r;o++){var a=e[o];if(i(a)&&$n(t,a))return o}}function E(t,e,n,u){if(t!==e){var s=e.elm=t.elm;if(a(t.isAsyncPlaceholder))i(e.asyncFactory.resolved)?S(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(a(e.isStatic)&&a(t.isStatic)&&e.key===t.key&&(a(e.isCloned)||a(e.isOnce)))e.componentInstance=t.componentInstance;else{var c,p=e.data;i(p)&&i(c=p.hook)&&i(c=c.prepatch)&&c(t,e);var h=t.children,d=e.children;if(i(p)&&y(e)){for(c=0;c<r.update.length;++c)r.update[c](t,e);i(c=p.hook)&&i(c=c.update)&&c(t,e)}o(e.text)?i(h)&&i(d)?h!==d&&function(t,e,n,r,a){for(var u,s,c,p=0,h=0,d=e.length-1,v=e[0],y=e[d],g=n.length-1,b=n[0],_=n[g],x=!a;p<=d&&h<=g;)o(v)?v=e[++p]:o(y)?y=e[--d]:$n(v,b)?(E(v,b,r),v=e[++p],b=n[++h]):$n(y,_)?(E(y,_,r),y=e[--d],_=n[--g]):$n(v,_)?(E(v,_,r),x&&l.insertBefore(t,v.elm,l.nextSibling(y.elm)),v=e[++p],_=n[--g]):$n(y,b)?(E(y,b,r),x&&l.insertBefore(t,y.elm,v.elm),y=e[--d],b=n[++h]):(o(u)&&(u=Hn(e,p,d)),o(s=i(b.key)?u[b.key]:O(b,e,p,d))?f(b,r,t,v.elm,!1,n,h):$n(c=e[s],b)?(E(c,b,r),e[s]=void 0,x&&l.insertBefore(t,c.elm,v.elm)):f(b,r,t,v.elm,!1,n,h),b=n[++h]);p>d?m(t,o(n[g+1])?null:n[g+1].elm,n,h,g,r):h>g&&w(0,e,p,d)}(s,h,d,n,u):i(d)?(i(t.text)&&l.setTextContent(s,""),m(s,null,d,0,d.length-1,n)):i(h)?w(0,h,0,h.length-1):i(t.text)&&l.setTextContent(s,""):t.text!==e.text&&l.setTextContent(s,e.text),i(p)&&i(c=p.hook)&&i(c=c.postpatch)&&c(t,e)}}}function k(t,e,n){if(a(n)&&i(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var A=v("attrs,class,staticClass,staticStyle,key");function S(t,e,n,r){var o,u=e.tag,s=e.data,l=e.children;if(r=r||s&&s.pre,e.elm=t,a(e.isComment)&&i(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(i(s)&&(i(o=s.hook)&&i(o=o.init)&&o(e,!0),i(o=e.componentInstance)))return p(e,n),!0;if(i(u)){if(i(l))if(t.hasChildNodes())if(i(o=s)&&i(o=o.domProps)&&i(o=o.innerHTML)){if(o!==t.innerHTML)return!1}else{for(var c=!0,f=t.firstChild,h=0;h<l.length;h++){if(!f||!S(f,l[h],n,r)){c=!1;break}f=f.nextSibling}if(!c||f)return!1}else d(e,l,n);if(i(s)){var v=!1;for(var y in s)if(!A(y)){v=!0,g(e,n);break}!v&&s.class&&ee(s.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,u,s,c){if(!o(e)){var p,h=!1,d=[];if(o(t))h=!0,f(e,d,s,c);else{var v=i(t.nodeType);if(!v&&$n(t,e))E(t,e,d,u);else{if(v){if(1===t.nodeType&&t.hasAttribute(R)&&(t.removeAttribute(R),n=!0),a(n)&&S(t,e,d))return k(e,d,!0),t;p=t,t=new pt(l.tagName(p).toLowerCase(),{},[],void 0,p)}var g=t.elm,b=l.parentNode(g);if(f(e,d,g._leaveCb?null:b,l.nextSibling(g)),i(e.parent))for(var m=e.parent,x=y(e);m;){for(var O=0;O<r.destroy.length;++O)r.destroy[O](m);if(m.elm=e.elm,x){for(var A=0;A<r.create.length;++A)r.create[A](Fn,m);var j=m.data.hook.insert;if(j.merged)for(var N=1;N<j.fns.length;N++)j.fns[N]()}else Dn(m);m=m.parent}i(b)?w(0,[t],0,0):i(t.tag)&&_(t)}}return k(e,d,h),e.elm}i(t)&&_(t)}}({nodeOps:In,modules:[tr,rr,lr,pr,Or,z?{create:Yr,activate:Yr,remove:function(t,e){!0!==t.data.show?Vr(t,e):e()}}:{}].concat(Zn)});G&&document.addEventListener("selectionchange",function(){var t=document.activeElement;t&&t.vmodel&&ro(t,"input")});var Zr={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?ae(n,"postpatch",function(){Zr.componentUpdated(t,e,n)}):Xr(t,e,n.context),t._vOptions=[].map.call(t.options,to)):("textarea"===n.tag||Rn(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",eo),t.addEventListener("compositionend",no),t.addEventListener("change",no),G&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){Xr(t,e,n.context);var r=t._vOptions,o=t._vOptions=[].map.call(t.options,to);if(o.some(function(t,e){return!L(t,r[e])}))(t.multiple?e.value.some(function(t){return Qr(t,o)}):e.value!==e.oldValue&&Qr(e.value,o))&&ro(t,"change")}}};function Xr(t,e,n){Jr(t,e,n),(Y||Z)&&setTimeout(function(){Jr(t,e,n)},0)}function Jr(t,e,n){var r=e.value,o=t.multiple;if(!o||Array.isArray(r)){for(var i,a,u=0,s=t.options.length;u<s;u++)if(a=t.options[u],o)i=q(r,to(a))>-1,a.selected!==i&&(a.selected=i);else if(L(to(a),r))return void(t.selectedIndex!==u&&(t.selectedIndex=u));o||(t.selectedIndex=-1)}}function Qr(t,e){return e.every(function(e){return!L(e,t)})}function to(t){return"_value"in t?t._value:t.value}function eo(t){t.target.composing=!0}function no(t){t.target.composing&&(t.target.composing=!1,ro(t.target,"input"))}function ro(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function oo(t){return!t.componentInstance||t.data&&t.data.transition?t:oo(t.componentInstance._vnode)}var io={model:Zr,show:{bind:function(t,e,n){var r=e.value,o=(n=oo(n)).data&&n.data.transition,i=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&o?(n.data.show=!0,zr(n,function(){t.style.display=i})):t.style.display=r?i:"none"},update:function(t,e,n){var r=e.value;!r!=!e.oldValue&&((n=oo(n)).data&&n.data.transition?(n.data.show=!0,r?zr(n,function(){t.style.display=t.__vOriginalDisplay}):Vr(n,function(){t.style.display="none"})):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,o){o||(t.style.display=t.__vOriginalDisplay)}}},ao={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function uo(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?uo(pe(e.children)):t}function so(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var o=n._parentListeners;for(var i in o)e[x(i)]=o[i];return e}function lo(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var co={name:"transition",props:ao,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(function(t){return t.tag||fe(t)})).length){0;var r=this.mode;0;var o=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return o;var i=uo(o);if(!i)return o;if(this._leaving)return lo(t,o);var a="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?a+"comment":a+i.tag:u(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var s=(i.data||(i.data={})).transition=so(this),l=this._vnode,c=uo(l);if(i.data.directives&&i.data.directives.some(function(t){return"show"===t.name})&&(i.data.show=!0),c&&c.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(i,c)&&!fe(c)&&(!c.componentInstance||!c.componentInstance._vnode.isComment)){var f=c.data.transition=j({},s);if("out-in"===r)return this._leaving=!0,ae(f,"afterLeave",function(){e._leaving=!1,e.$forceUpdate()}),lo(t,o);if("in-out"===r){if(fe(i))return l;var p,h=function(){p()};ae(s,"afterEnter",h),ae(s,"enterCancelled",h),ae(f,"delayLeave",function(t){p=t})}}return o}}},fo=j({tag:String,moveClass:String},ao);function po(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function ho(t){t.data.newPos=t.elm.getBoundingClientRect()}function vo(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,o=e.top-n.top;if(r||o){t.data.moved=!0;var i=t.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}delete fo.mode;var yo={Transition:co,TransitionGroup:{props:fo,render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=so(this),u=0;u<o.length;u++){var s=o[u];if(s.tag)if(null!=s.key&&0!==String(s.key).indexOf("__vlist"))i.push(s),n[s.key]=s,(s.data||(s.data={})).transition=a;else;}if(r){for(var l=[],c=[],f=0;f<r.length;f++){var p=r[f];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?l.push(p):c.push(p)}this.kept=t(e,null,l),this.removed=c}return t(e,null,i)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(po),t.forEach(ho),t.forEach(vo),this._reflow=document.body.offsetHeight,t.forEach(function(t){if(t.data.moved){var n=t.elm,r=n.style;Ir(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Cr,n._moveCb=function t(r){r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Cr,t),n._moveCb=null,Br(n,e))})}}))},methods:{hasMove:function(t,e){if(!jr)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach(function(t){kr(n,t)}),Er(n,e),n.style.display="none",this.$el.appendChild(n);var r=Ur(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};fn.config.mustUseProp=function(t,e,n){return"value"===n&&_n(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},fn.config.isReservedTag=qn,fn.config.isReservedAttr=mn,fn.config.getTagNamespace=function(t){return Ln(t)?"svg":"math"===t?"math":void 0},fn.config.isUnknownElement=function(t){if(!z)return!0;if(qn(t))return!1;if(t=t.toLowerCase(),null!=Mn[t])return Mn[t];var e=document.createElement(t);return t.indexOf("-")>-1?Mn[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Mn[t]=/HTMLUnknownElement/.test(e.toString())},j(fn.options.directives,io),j(fn.options.components,yo),fn.prototype.__patch__=z?Gr:T,fn.prototype.$mount=function(t,e){return function(t,e,n){return t.$el=e,t.$options.render||(t.$options.render=dt),xe(t,"beforeMount"),new Pe(t,function(){t._update(t._render(),n)},T,null,!0),n=!1,null==t.$vnode&&(t._isMounted=!0,xe(t,"mounted")),t}(this,t=t&&z?function(t){if("string"==typeof t){var e=document.querySelector(t);return e||document.createElement("div")}return t}(t):void 0,e)},z&&setTimeout(function(){D.devtools&&nt&&nt.emit("init",fn)},0),e.default=fn}.call(this,n(44),n(197).setImmediate)},function(t,e,n){"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},function(t,e,n){"use strict";var r=n(114);function o(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise(function(t){e=t});var n=this;t(function(t){n.reason||(n.reason=new r(t),e(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var t;return{token:new o(function(e){t=e}),cancel:t}},t.exports=o},function(t,e,n){"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},function(t,e,n){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,e,n){"use strict";var r=n(15);t.exports=function(t,e,n){return r.forEach(n,function(n){t=n(t,e)}),t}},function(t,e,n){"use strict";var r=n(15),o=n(203),i=n(115),a=n(75),u=n(202),s=n(201);function l(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return l(t),t.baseURL&&!u(t.url)&&(t.url=s(t.baseURL,t.url)),t.headers=t.headers||{},t.data=o(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(e){delete t.headers[e]}),(t.adapter||a.adapter)(t).then(function(e){return l(t),e.data=o(e.data,e.headers,t.transformResponse),e},function(e){return i(e)||(l(t),e&&e.response&&(e.response.data=o(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)})}},function(t,e,n){"use strict";var r=n(15);function o(){this.handlers=[]}o.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},o.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},o.prototype.forEach=function(t){r.forEach(this.handlers,function(e){null!==e&&t(e)})},t.exports=o},function(t,e,n){"use strict";var r=n(15);t.exports=r.isStandardBrowserEnv()?{write:function(t,e,n,o,i,a){var u=[];u.push(t+"="+encodeURIComponent(e)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,e,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",t.exports=function(t){for(var e,n,i=String(t),a="",u=0,s=r;i.charAt(0|u)||(s="=",u%1);a+=s.charAt(63&e>>8-u%1*8)){if((n=i.charCodeAt(u+=.75))>255)throw new o;e=e<<8|n}return a}},function(t,e,n){"use strict";var r=n(15);t.exports=r.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(t){var r=t;return e&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return t=o(window.location.href),function(e){var n=r.isString(e)?o(e):e;return n.protocol===t.protocol&&n.host===t.host}}():function(){return!0}},function(t,e,n){"use strict";var r=n(15),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,n,i,a={};return t?(r.forEach(t.split("\n"),function(t){if(i=t.indexOf(":"),e=r.trim(t.substr(0,i)).toLowerCase(),n=r.trim(t.substr(i+1)),e){if(a[e]&&o.indexOf(e)>=0)return;a[e]="set-cookie"===e?(a[e]?a[e]:[]).concat([n]):a[e]?a[e]+", "+n:n}}),a):a}},function(t,e,n){"use strict";var r=n(15);function o(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,n){if(!e)return t;var i;if(n)i=n(e);else if(r.isURLSearchParams(e))i=e.toString();else{var a=[];r.forEach(e,function(t,e){null!==t&&void 0!==t&&(r.isArray(t)?e+="[]":t=[t],r.forEach(t,function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),a.push(o(e)+"="+o(t))}))}),i=a.join("&")}return i&&(t+=(-1===t.indexOf("?")?"?":"&")+i),t}},function(t,e,n){"use strict";t.exports=function(t,e,n,r,o){return t.config=e,n&&(t.code=n),t.request=r,t.response=o,t}},function(t,e,n){"use strict";var r=n(116);t.exports=function(t,e,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?e(r("Request failed with status code "+n.status,n.config,null,n.request,n)):t(n)}},function(t,e,n){"use strict";var r=n(15);t.exports=function(t,e){r.forEach(t,function(n,r){r!==e&&r.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[r])})}},function(t,e,n){"use strict";var r=n(75),o=n(15),i=n(205),a=n(204);function u(t){this.defaults=t,this.interceptors={request:new i,response:new i}}u.prototype.request=function(t){"string"==typeof t&&(t=o.merge({url:arguments[0]},arguments[1])),(t=o.merge(r,{method:"get"},this.defaults,t)).method=t.method.toLowerCase();var e=[a,void 0],n=Promise.resolve(t);for(this.interceptors.request.forEach(function(t){e.unshift(t.fulfilled,t.rejected)}),this.interceptors.response.forEach(function(t){e.push(t.fulfilled,t.rejected)});e.length;)n=n.then(e.shift(),e.shift());return n},o.forEach(["delete","get","head","options"],function(t){u.prototype[t]=function(e,n){return this.request(o.merge(n||{},{method:t,url:e}))}}),o.forEach(["post","put","patch"],function(t){u.prototype[t]=function(e,n,r){return this.request(o.merge(r||{},{method:t,url:e,data:n}))}}),t.exports=u},function(t,e){function n(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
t.exports=function(t){return null!=t&&(n(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&n(t.slice(0,0))}(t)||!!t._isBuffer)}},function(t,e,n){"use strict";var r=n(15),o=n(119),i=n(214),a=n(75);function u(t){var e=new i(t),n=o(i.prototype.request,e);return r.extend(n,i.prototype,e),r.extend(n,e),n}var s=u(a);s.Axios=i,s.create=function(t){return u(r.merge(a,t))},s.Cancel=n(114),s.CancelToken=n(200),s.isCancel=n(115),s.all=function(t){return Promise.all(t)},s.spread=n(199),t.exports=s,t.exports.default=s},function(t,e,n){t.exports=n(216)},function(t,e,n){var r=n(121),o=n(120),i={attributes:{compose:function(t,e,n){"object"!=typeof t&&(t={}),"object"!=typeof e&&(e={});var r=o(!0,{},e);for(var i in n||(r=Object.keys(r).reduce(function(t,e){return null!=r[e]&&(t[e]=r[e]),t},{})),t)void 0!==t[i]&&void 0===e[i]&&(r[i]=t[i]);return Object.keys(r).length>0?r:void 0},diff:function(t,e){"object"!=typeof t&&(t={}),"object"!=typeof e&&(e={});var n=Object.keys(t).concat(Object.keys(e)).reduce(function(n,o){return r(t[o],e[o])||(n[o]=void 0===e[o]?null:e[o]),n},{});return Object.keys(n).length>0?n:void 0},transform:function(t,e,n){if("object"!=typeof t)return e;if("object"==typeof e){if(!n)return e;var r=Object.keys(e).reduce(function(n,r){return void 0===t[r]&&(n[r]=e[r]),n},{});return Object.keys(r).length>0?r:void 0}}},iterator:function(t){return new a(t)},length:function(t){return"number"==typeof t.delete?t.delete:"number"==typeof t.retain?t.retain:"string"==typeof t.insert?t.insert.length:1}};function a(t){this.ops=t,this.index=0,this.offset=0}a.prototype.hasNext=function(){return this.peekLength()<1/0},a.prototype.next=function(t){t||(t=1/0);var e=this.ops[this.index];if(e){var n=this.offset,r=i.length(e);if(t>=r-n?(t=r-n,this.index+=1,this.offset=0):this.offset+=t,"number"==typeof e.delete)return{delete:t};var o={};return e.attributes&&(o.attributes=e.attributes),"number"==typeof e.retain?o.retain=t:"string"==typeof e.insert?o.insert=e.insert.substr(n,t):o.insert=e.insert,o}return{retain:1/0}},a.prototype.peek=function(){return this.ops[this.index]},a.prototype.peekLength=function(){return this.ops[this.index]?i.length(this.ops[this.index])-this.offset:1/0},a.prototype.peekType=function(){return this.ops[this.index]?"number"==typeof this.ops[this.index].delete?"delete":"number"==typeof this.ops[this.index].retain?"retain":"insert":"retain"},t.exports=i},function(t,e){var n="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();function r(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function o(t){return t&&"object"==typeof t&&"number"==typeof t.length&&Object.prototype.hasOwnProperty.call(t,"callee")&&!Object.prototype.propertyIsEnumerable.call(t,"callee")||!1}(e=t.exports=n?r:o).supported=r,e.unsupported=o},function(t,e){function n(t){var e=[];for(var n in t)e.push(n);return e}(t.exports="function"==typeof Object.keys?Object.keys:n).shim=n},function(t,e){var n=-1,r=1,o=0;function i(t,e,l){if(t==e)return t?[[o,t]]:[];(l<0||t.length<l)&&(l=null);var f=u(t,e),p=t.substring(0,f);f=s(t=t.substring(f),e=e.substring(f));var h=t.substring(t.length-f),d=function(t,e){var l;if(!t)return[[r,e]];if(!e)return[[n,t]];var c=t.length>e.length?t:e,f=t.length>e.length?e:t,p=c.indexOf(f);if(-1!=p)return l=[[r,c.substring(0,p)],[o,f],[r,c.substring(p+f.length)]],t.length>e.length&&(l[0][0]=l[2][0]=n),l;if(1==f.length)return[[n,t],[r,e]];var h=function(t,e){var n=t.length>e.length?t:e,r=t.length>e.length?e:t;if(n.length<4||2*r.length<n.length)return null;function o(t,e,n){for(var r,o,i,a,l=t.substring(n,n+Math.floor(t.length/4)),c=-1,f="";-1!=(c=e.indexOf(l,c+1));){var p=u(t.substring(n),e.substring(c)),h=s(t.substring(0,n),e.substring(0,c));f.length<h+p&&(f=e.substring(c-h,c)+e.substring(c,c+p),r=t.substring(0,n-h),o=t.substring(n+p),i=e.substring(0,c-h),a=e.substring(c+p))}return 2*f.length>=t.length?[r,o,i,a,f]:null}var i,a,l,c,f,p=o(n,r,Math.ceil(n.length/4)),h=o(n,r,Math.ceil(n.length/2));if(!p&&!h)return null;i=h?p&&p[4].length>h[4].length?p:h:p;t.length>e.length?(a=i[0],l=i[1],c=i[2],f=i[3]):(c=i[0],f=i[1],a=i[2],l=i[3]);var d=i[4];return[a,l,c,f,d]}(t,e);if(h){var d=h[0],v=h[1],y=h[2],g=h[3],b=h[4],m=i(d,y),_=i(v,g);return m.concat([[o,b]],_)}return function(t,e){for(var o=t.length,i=e.length,u=Math.ceil((o+i)/2),s=u,l=2*u,c=new Array(l),f=new Array(l),p=0;p<l;p++)c[p]=-1,f[p]=-1;c[s+1]=0,f[s+1]=0;for(var h=o-i,d=h%2!=0,v=0,y=0,g=0,b=0,m=0;m<u;m++){for(var _=-m+v;_<=m-y;_+=2){for(var w=s+_,x=(S=_==-m||_!=m&&c[w-1]<c[w+1]?c[w+1]:c[w-1]+1)-_;S<o&&x<i&&t.charAt(S)==e.charAt(x);)S++,x++;if(c[w]=S,S>o)y+=2;else if(x>i)v+=2;else if(d){var O=s+h-_;if(O>=0&&O<l&&-1!=f[O]){var E=o-f[O];if(S>=E)return a(t,e,S,x)}}}for(var k=-m+g;k<=m-b;k+=2){for(var O=s+k,A=(E=k==-m||k!=m&&f[O-1]<f[O+1]?f[O+1]:f[O-1]+1)-k;E<o&&A<i&&t.charAt(o-E-1)==e.charAt(i-A-1);)E++,A++;if(f[O]=E,E>o)b+=2;else if(A>i)g+=2;else if(!d){var w=s+h-k;if(w>=0&&w<l&&-1!=c[w]){var S=c[w],x=s+S-w;if(S>=(E=o-E))return a(t,e,S,x)}}}}return[[n,t],[r,e]]}(t,e)}(t=t.substring(0,t.length-f),e=e.substring(0,e.length-f));return p&&d.unshift([o,p]),h&&d.push([o,h]),function t(e){e.push([o,""]);var i=0;var a=0;var l=0;var c="";var f="";var p;for(;i<e.length;)switch(e[i][0]){case r:l++,f+=e[i][1],i++;break;case n:a++,c+=e[i][1],i++;break;case o:a+l>1?(0!==a&&0!==l&&(0!==(p=u(f,c))&&(i-a-l>0&&e[i-a-l-1][0]==o?e[i-a-l-1][1]+=f.substring(0,p):(e.splice(0,0,[o,f.substring(0,p)]),i++),f=f.substring(p),c=c.substring(p)),0!==(p=s(f,c))&&(e[i][1]=f.substring(f.length-p)+e[i][1],f=f.substring(0,f.length-p),c=c.substring(0,c.length-p))),0===a?e.splice(i-l,a+l,[r,f]):0===l?e.splice(i-a,a+l,[n,c]):e.splice(i-a-l,a+l,[n,c],[r,f]),i=i-a-l+(a?1:0)+(l?1:0)+1):0!==i&&e[i-1][0]==o?(e[i-1][1]+=e[i][1],e.splice(i,1)):i++,l=0,a=0,c="",f=""}""===e[e.length-1][1]&&e.pop();var h=!1;i=1;for(;i<e.length-1;)e[i-1][0]==o&&e[i+1][0]==o&&(e[i][1].substring(e[i][1].length-e[i-1][1].length)==e[i-1][1]?(e[i][1]=e[i-1][1]+e[i][1].substring(0,e[i][1].length-e[i-1][1].length),e[i+1][1]=e[i-1][1]+e[i+1][1],e.splice(i-1,1),h=!0):e[i][1].substring(0,e[i+1][1].length)==e[i+1][1]&&(e[i-1][1]+=e[i+1][1],e[i][1]=e[i][1].substring(e[i+1][1].length)+e[i+1][1],e.splice(i+1,1),h=!0)),i++;h&&t(e)}(d),null!=l&&(d=function(t,e){var r=function(t,e){if(0===e)return[o,t];for(var r=0,i=0;i<t.length;i++){var a=t[i];if(a[0]===n||a[0]===o){var u=r+a[1].length;if(e===u)return[i+1,t];if(e<u){t=t.slice();var s=e-r,l=[a[0],a[1].slice(0,s)],c=[a[0],a[1].slice(s)];return t.splice(i,1,l,c),[i+1,t]}r=u}}throw new Error("cursor_pos is out of bounds!")}(t,e),i=r[1],a=r[0],u=i[a],s=i[a+1];if(null==u)return t;if(u[0]!==o)return t;if(null!=s&&u[1]+s[1]===s[1]+u[1])return i.splice(a,2,s,u),c(i,a,2);if(null!=s&&0===s[1].indexOf(u[1])){i.splice(a,2,[s[0],u[1]],[0,u[1]]);var l=s[1].slice(u[1].length);return l.length>0&&i.splice(a+2,0,[s[0],l]),c(i,a,3)}return t}(d,l)),d=function(t){for(var e=!1,i=function(t){return t.charCodeAt(0)>=56320&&t.charCodeAt(0)<=57343},a=2;a<t.length;a+=1)t[a-2][0]===o&&((u=t[a-2][1]).charCodeAt(u.length-1)>=55296&&u.charCodeAt(u.length-1)<=56319)&&t[a-1][0]===n&&i(t[a-1][1])&&t[a][0]===r&&i(t[a][1])&&(e=!0,t[a-1][1]=t[a-2][1].slice(-1)+t[a-1][1],t[a][1]=t[a-2][1].slice(-1)+t[a][1],t[a-2][1]=t[a-2][1].slice(0,-1));var u;if(!e)return t;for(var s=[],a=0;a<t.length;a+=1)t[a][1].length>0&&s.push(t[a]);return s}(d)}function a(t,e,n,r){var o=t.substring(0,n),a=e.substring(0,r),u=t.substring(n),s=e.substring(r),l=i(o,a),c=i(u,s);return l.concat(c)}function u(t,e){if(!t||!e||t.charAt(0)!=e.charAt(0))return 0;for(var n=0,r=Math.min(t.length,e.length),o=r,i=0;n<o;)t.substring(i,o)==e.substring(i,o)?i=n=o:r=o,o=Math.floor((r-n)/2+n);return o}function s(t,e){if(!t||!e||t.charAt(t.length-1)!=e.charAt(e.length-1))return 0;for(var n=0,r=Math.min(t.length,e.length),o=r,i=0;n<o;)t.substring(t.length-o,t.length-i)==e.substring(e.length-o,e.length-i)?i=n=o:r=o,o=Math.floor((r-n)/2+n);return o}var l=i;function c(t,e,n){for(var r=e+n-1;r>=0&&r>=e-1;r--)if(r+1<t.length){var o=t[r],i=t[r+1];o[0]===i[1]&&t.splice(r,2,[o[0],o[1]+i[1]])}return t}l.INSERT=r,l.DELETE=n,l.EQUAL=o,t.exports=l},function(t,e,n){var r=n(221),o=n(121),i=n(120),a=n(218),u=String.fromCharCode(0),s=function(t){Array.isArray(t)?this.ops=t:null!=t&&Array.isArray(t.ops)?this.ops=t.ops:this.ops=[]};s.prototype.insert=function(t,e){var n={};return 0===t.length?this:(n.insert=t,null!=e&&"object"==typeof e&&Object.keys(e).length>0&&(n.attributes=e),this.push(n))},s.prototype.delete=function(t){return t<=0?this:this.push({delete:t})},s.prototype.retain=function(t,e){if(t<=0)return this;var n={retain:t};return null!=e&&"object"==typeof e&&Object.keys(e).length>0&&(n.attributes=e),this.push(n)},s.prototype.push=function(t){var e=this.ops.length,n=this.ops[e-1];if(t=i(!0,{},t),"object"==typeof n){if("number"==typeof t.delete&&"number"==typeof n.delete)return this.ops[e-1]={delete:n.delete+t.delete},this;if("number"==typeof n.delete&&null!=t.insert&&(e-=1,"object"!=typeof(n=this.ops[e-1])))return this.ops.unshift(t),this;if(o(t.attributes,n.attributes)){if("string"==typeof t.insert&&"string"==typeof n.insert)return this.ops[e-1]={insert:n.insert+t.insert},"object"==typeof t.attributes&&(this.ops[e-1].attributes=t.attributes),this;if("number"==typeof t.retain&&"number"==typeof n.retain)return this.ops[e-1]={retain:n.retain+t.retain},"object"==typeof t.attributes&&(this.ops[e-1].attributes=t.attributes),this}}return e===this.ops.length?this.ops.push(t):this.ops.splice(e,0,t),this},s.prototype.chop=function(){var t=this.ops[this.ops.length-1];return t&&t.retain&&!t.attributes&&this.ops.pop(),this},s.prototype.filter=function(t){return this.ops.filter(t)},s.prototype.forEach=function(t){this.ops.forEach(t)},s.prototype.map=function(t){return this.ops.map(t)},s.prototype.partition=function(t){var e=[],n=[];return this.forEach(function(r){(t(r)?e:n).push(r)}),[e,n]},s.prototype.reduce=function(t,e){return this.ops.reduce(t,e)},s.prototype.changeLength=function(){return this.reduce(function(t,e){return e.insert?t+a.length(e):e.delete?t-e.delete:t},0)},s.prototype.length=function(){return this.reduce(function(t,e){return t+a.length(e)},0)},s.prototype.slice=function(t,e){t=t||0,"number"!=typeof e&&(e=1/0);for(var n=[],r=a.iterator(this.ops),o=0;o<e&&r.hasNext();){var i;o<t?i=r.next(t-o):(i=r.next(e-o),n.push(i)),o+=a.length(i)}return new s(n)},s.prototype.compose=function(t){for(var e=a.iterator(this.ops),n=a.iterator(t.ops),r=new s;e.hasNext()||n.hasNext();)if("insert"===n.peekType())r.push(n.next());else if("delete"===e.peekType())r.push(e.next());else{var o=Math.min(e.peekLength(),n.peekLength()),i=e.next(o),u=n.next(o);if("number"==typeof u.retain){var l={};"number"==typeof i.retain?l.retain=o:l.insert=i.insert;var c=a.attributes.compose(i.attributes,u.attributes,"number"==typeof i.retain);c&&(l.attributes=c),r.push(l)}else"number"==typeof u.delete&&"number"==typeof i.retain&&r.push(u)}return r.chop()},s.prototype.concat=function(t){var e=new s(this.ops.slice());return t.ops.length>0&&(e.push(t.ops[0]),e.ops=e.ops.concat(t.ops.slice(1))),e},s.prototype.diff=function(t,e){if(this.ops===t.ops)return new s;var n=[this,t].map(function(e){return e.map(function(n){if(null!=n.insert)return"string"==typeof n.insert?n.insert:u;throw new Error("diff() called "+(e===t?"on":"with")+" non-document")}).join("")}),i=new s,l=r(n[0],n[1],e),c=a.iterator(this.ops),f=a.iterator(t.ops);return l.forEach(function(t){for(var e=t[1].length;e>0;){var n=0;switch(t[0]){case r.INSERT:n=Math.min(f.peekLength(),e),i.push(f.next(n));break;case r.DELETE:n=Math.min(e,c.peekLength()),c.next(n),i.delete(n);break;case r.EQUAL:n=Math.min(c.peekLength(),f.peekLength(),e);var u=c.next(n),s=f.next(n);o(u.insert,s.insert)?i.retain(n,a.attributes.diff(u.attributes,s.attributes)):i.push(s).delete(n)}e-=n}}),i.chop()},s.prototype.eachLine=function(t,e){e=e||"\n";for(var n=a.iterator(this.ops),r=new s,o=0;n.hasNext();){if("insert"!==n.peekType())return;var i=n.peek(),u=a.length(i)-n.peekLength(),l="string"==typeof i.insert?i.insert.indexOf(e,u)-u:-1;if(l<0)r.push(n.next());else if(l>0)r.push(n.next(l));else{if(!1===t(r,n.next(1).attributes||{},o))return;o+=1,r=new s}}r.length()>0&&t(r,{},o)},s.prototype.transform=function(t,e){if(e=!!e,"number"==typeof t)return this.transformPosition(t,e);for(var n=a.iterator(this.ops),r=a.iterator(t.ops),o=new s;n.hasNext()||r.hasNext();)if("insert"!==n.peekType()||!e&&"insert"===r.peekType())if("insert"===r.peekType())o.push(r.next());else{var i=Math.min(n.peekLength(),r.peekLength()),u=n.next(i),l=r.next(i);if(u.delete)continue;l.delete?o.push(l):o.retain(i,a.attributes.transform(u.attributes,l.attributes,e))}else o.retain(a.length(n.next()));return o.chop()},s.prototype.transformPosition=function(t,e){e=!!e;for(var n=a.iterator(this.ops),r=0;n.hasNext()&&r<=t;){var o=n.peekLength(),i=n.peekType();n.next(),"delete"!==i?("insert"===i&&(r<t||!e)&&(t+=o),r+=o):t-=Math.min(o,t-r)}return t},t.exports=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=c(n(222)),u=c(n(217)),s=c(n(198)),l=c(n(195));function c(t){return t&&t.__esModule?t:{default:t}}function f(t){return function(){var e=t.apply(this,arguments);return new Promise(function(t,n){return function r(o,i){try{var a=e[o](i),u=a.value}catch(t){return void n(t)}if(!a.done)return Promise.resolve(u).then(function(t){r("next",t)},function(t){r("throw",t)});t(u)}("next")})}}s.default.component(l.default);var p={urlRegex:/^https?:\/\/[\S]+$/gm},h=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.quill=e,n=n||{},this.options=o({},p,n),this.registerTypeListener(),this.registerPasteListener()}return i(t,[{key:"registerPasteListener",value:function(){var t=this;this.quill.clipboard.addMatcher(Node.TEXT_NODE,function(e,n){if("string"==typeof e.data){var r=e.data.match(t.options.urlRegex);if(r&&r.length>0){var o=new a.default,i=e.data;r.forEach(function(e){var n=i.split(e),r=n.shift(),a=t.buildUrlEmbed(e);o.insert(r),o.insert(a),i=n.join(e)}),o.insert(i),n.ops=o.ops}return n}})}},{key:"registerTypeListener",value:function(){var t=this;this.quill.on("text-change",function(e){var n=e.ops;if(!(!n||n.length<1||n.length>2)){var r=n[n.length-1];r.insert&&"string"==typeof r.insert&&r.insert.match(/\s/)&&t.checkTextForUrl()}})}},{key:"checkTextForUrl",value:function(){var t=this.quill.getSelection();if(t){var e=this.quill.getLeaf(t.index),n=r(e,1)[0];if(n.text){console.log(n.text);var o=n.text.match(this.options.urlRegex);if(o&&o.length){var i=n.text.length,a=t.index-i;this.textToUrl(a,o[0])}}}}},{key:"textToUrl",value:function(){var t=f(regeneratorRuntime.mark(function t(e,n){var r,o;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.buildUrlEmbed(n);case 2:r=t.sent,o=(new a.default).retain(e).delete(n.length).insert(r),this.quill.updateContents(o);case 5:case"end":return t.stop()}},t,this)}));return function(e,n){return t.apply(this,arguments)}}()},{key:"buildUrlEmbed",value:function(t){var e={urlEmbed:{url:t,html:t}};return this.addMetaInfo(t),e}},{key:"addMetaInfo",value:function(){var t=f(regeneratorRuntime.mark(function t(e){var n,r,o;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.getMetaInfo(e);case 2:if(n=t.sent,r=n.data,(o=document.querySelectorAll('[data-url-embed="'+e+'"]'))&&o.length){t.next=7;break}return t.abrupt("return");case 7:o.forEach(function(t){var n=document.createElement("div");t.innerHTML="",t.appendChild(n);new s.default({el:n,render:function(t){return t(l.default,{props:{url:e,meta:r}})}})});case 8:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()},{key:"getMetaInfo",value:function(){var t=f(regeneratorRuntime.mark(function t(e){var n,r;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e=encodeURIComponent(e),n=this.options.metaApi+"/embeds?url="+e,t.next=4,u.default.get(n);case 4:return r=t.sent,t.abrupt("return",r);case 6:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()}]),t}();e.default=h},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e){e.read=function(t,e,n,r,o){var i,a,u=8*o-r-1,s=(1<<u)-1,l=s>>1,c=-7,f=n?o-1:0,p=n?-1:1,h=t[e+f];for(f+=p,i=h&(1<<-c)-1,h>>=-c,c+=u;c>0;i=256*i+t[e+f],f+=p,c-=8);for(a=i&(1<<-c)-1,i>>=-c,c+=r;c>0;a=256*a+t[e+f],f+=p,c-=8);if(0===i)i=1-l;else{if(i===s)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,r),i-=l}return(h?-1:1)*a*Math.pow(2,i-r)},e.write=function(t,e,n,r,o,i){var a,u,s,l=8*i-o-1,c=(1<<l)-1,f=c>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:i-1,d=r?1:-1,v=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(u=isNaN(e)?1:0,a=c):(a=Math.floor(Math.log(e)/Math.LN2),e*(s=Math.pow(2,-a))<1&&(a--,s*=2),(e+=a+f>=1?p/s:p*Math.pow(2,1-f))*s>=2&&(a++,s/=2),a+f>=c?(u=0,a=c):a+f>=1?(u=(e*s-1)*Math.pow(2,o),a+=f):(u=e*Math.pow(2,f-1)*Math.pow(2,o),a=0));o>=8;t[n+h]=255&u,h+=d,u/=256,o-=8);for(a=a<<o|u,l+=o;l>0;t[n+h]=255&a,h+=d,a/=256,l-=8);t[n+h-d]|=128*v}},function(t,e,n){"use strict";e.byteLength=function(t){return 3*t.length/4-l(t)},e.toByteArray=function(t){var e,n,r,a,u,s=t.length;a=l(t),u=new i(3*s/4-a),n=a>0?s-4:s;var c=0;for(e=0;e<n;e+=4)r=o[t.charCodeAt(e)]<<18|o[t.charCodeAt(e+1)]<<12|o[t.charCodeAt(e+2)]<<6|o[t.charCodeAt(e+3)],u[c++]=r>>16&255,u[c++]=r>>8&255,u[c++]=255&r;2===a?(r=o[t.charCodeAt(e)]<<2|o[t.charCodeAt(e+1)]>>4,u[c++]=255&r):1===a&&(r=o[t.charCodeAt(e)]<<10|o[t.charCodeAt(e+1)]<<4|o[t.charCodeAt(e+2)]>>2,u[c++]=r>>8&255,u[c++]=255&r);return u},e.fromByteArray=function(t){for(var e,n=t.length,o=n%3,i="",a=[],u=0,s=n-o;u<s;u+=16383)a.push(c(t,u,u+16383>s?s:u+16383));1===o?(e=t[n-1],i+=r[e>>2],i+=r[e<<4&63],i+="=="):2===o&&(e=(t[n-2]<<8)+t[n-1],i+=r[e>>10],i+=r[e>>4&63],i+=r[e<<2&63],i+="=");return a.push(i),a.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=0,s=a.length;u<s;++u)r[u]=a[u],o[a.charCodeAt(u)]=u;function l(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===t[e-2]?2:"="===t[e-1]?1:0}function c(t,e,n){for(var o,i,a=[],u=e;u<n;u+=3)o=(t[u]<<16&16711680)+(t[u+1]<<8&65280)+(255&t[u+2]),a.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(226),o=n(225),i=n(224);function a(){return s.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function u(t,e){if(a()<e)throw new RangeError("Invalid typed array length");return s.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=s.prototype:(null===t&&(t=new s(e)),t.length=e),t}function s(t,e,n){if(!(s.TYPED_ARRAY_SUPPORT||this instanceof s))return new s(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return l(this,t,e,n)}function l(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);s.TYPED_ARRAY_SUPPORT?(t=e).__proto__=s.prototype:t=p(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!s.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(e,n),o=(t=u(t,r)).write(e,n);o!==r&&(t=t.slice(0,o));return t}(t,e,n):function(t,e){if(s.isBuffer(e)){var n=0|h(e.length);return 0===(t=u(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?u(t,0):p(t,e);if("Buffer"===e.type&&i(e.data))return p(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(c(e),t=u(t,e<0?0:0|h(e)),!s.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function p(t,e){var n=e.length<0?0:0|h(e.length);t=u(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function h(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function d(t,e){if(s.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return F(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return U(t).length;default:if(r)return F(t).length;e=(""+e).toLowerCase(),r=!0}}function v(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function y(t,e,n,r,o){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(o)return-1;n=t.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof e&&(e=s.from(e,r)),s.isBuffer(e))return 0===e.length?-1:g(t,e,n,r,o);if("number"==typeof e)return e&=255,s.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):g(t,[e],n,r,o);throw new TypeError("val must be string, number or Buffer")}function g(t,e,n,r,o){var i,a=1,u=t.length,s=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,u/=2,s/=2,n/=2}function l(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(o){var c=-1;for(i=n;i<u;i++)if(l(t,i)===l(e,-1===c?0:i-c)){if(-1===c&&(c=i),i-c+1===s)return c*a}else-1!==c&&(i-=i-c),c=-1}else for(n+s>u&&(n=u-s),i=n;i>=0;i--){for(var f=!0,p=0;p<s;p++)if(l(t,i+p)!==l(e,p)){f=!1;break}if(f)return i}return-1}function b(t,e,n,r){n=Number(n)||0;var o=t.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var u=parseInt(e.substr(2*a,2),16);if(isNaN(u))return a;t[n+a]=u}return a}function m(t,e,n,r){return $(F(e,t.length-n),t,n,r)}function _(t,e,n,r){return $(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function w(t,e,n,r){return _(t,e,n,r)}function x(t,e,n,r){return $(U(e),t,n,r)}function O(t,e,n,r){return $(function(t,e){for(var n,r,o,i=[],a=0;a<t.length&&!((e-=2)<0);++a)n=t.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(e,t.length-n),t,n,r)}function E(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function k(t,e,n){n=Math.min(t.length,n);for(var r=[],o=e;o<n;){var i,a,u,s,l=t[o],c=null,f=l>239?4:l>223?3:l>191?2:1;if(o+f<=n)switch(f){case 1:l<128&&(c=l);break;case 2:128==(192&(i=t[o+1]))&&(s=(31&l)<<6|63&i)>127&&(c=s);break;case 3:i=t[o+1],a=t[o+2],128==(192&i)&&128==(192&a)&&(s=(15&l)<<12|(63&i)<<6|63&a)>2047&&(s<55296||s>57343)&&(c=s);break;case 4:i=t[o+1],a=t[o+2],u=t[o+3],128==(192&i)&&128==(192&a)&&128==(192&u)&&(s=(15&l)<<18|(63&i)<<12|(63&a)<<6|63&u)>65535&&s<1114112&&(c=s)}null===c?(c=65533,f=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),o+=f}return function(t){var e=t.length;if(e<=A)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=A));return n}(r)}e.Buffer=s,e.SlowBuffer=function(t){+t!=t&&(t=0);return s.alloc(+t)},e.INSPECT_MAX_BYTES=50,s.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=a(),s.poolSize=8192,s._augment=function(t){return t.__proto__=s.prototype,t},s.from=function(t,e,n){return l(null,t,e,n)},s.TYPED_ARRAY_SUPPORT&&(s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0})),s.alloc=function(t,e,n){return function(t,e,n,r){return c(e),e<=0?u(t,e):void 0!==n?"string"==typeof r?u(t,e).fill(n,r):u(t,e).fill(n):u(t,e)}(null,t,e,n)},s.allocUnsafe=function(t){return f(null,t)},s.allocUnsafeSlow=function(t){return f(null,t)},s.isBuffer=function(t){return!(null==t||!t._isBuffer)},s.compare=function(t,e){if(!s.isBuffer(t)||!s.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0},s.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return s.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=s.allocUnsafe(e),o=0;for(n=0;n<t.length;++n){var a=t[n];if(!s.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},s.byteLength=d,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)v(this,e,e+1);return this},s.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)v(this,e,e+3),v(this,e+1,e+2);return this},s.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)v(this,e,e+7),v(this,e+1,e+6),v(this,e+2,e+5),v(this,e+3,e+4);return this},s.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?k(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return N(this,e,n);case"utf8":case"utf-8":return k(this,e,n);case"ascii":return S(this,e,n);case"latin1":case"binary":return j(this,e,n);case"base64":return E(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},s.prototype.equals=function(t){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===s.compare(this,t)},s.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},s.prototype.compare=function(t,e,n,r,o){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),e<0||n>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&e>=n)return 0;if(r>=o)return-1;if(e>=n)return 1;if(e>>>=0,n>>>=0,r>>>=0,o>>>=0,this===t)return 0;for(var i=o-r,a=n-e,u=Math.min(i,a),l=this.slice(r,o),c=t.slice(e,n),f=0;f<u;++f)if(l[f]!==c[f]){i=l[f],a=c[f];break}return i<a?-1:a<i?1:0},s.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},s.prototype.indexOf=function(t,e,n){return y(this,t,e,n,!0)},s.prototype.lastIndexOf=function(t,e,n){return y(this,t,e,n,!1)},s.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return b(this,t,e,n);case"utf8":case"utf-8":return m(this,t,e,n);case"ascii":return _(this,t,e,n);case"latin1":case"binary":return w(this,t,e,n);case"base64":return x(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var A=4096;function S(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function j(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function N(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=e;i<n;++i)o+=D(t[i]);return o}function T(t,e,n){for(var r=t.slice(e,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function P(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function C(t,e,n,r,o,i){if(!s.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function L(t,e,n,r){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-n,2);o<i;++o)t[n+o]=(e&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function q(t,e,n,r){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-n,4);o<i;++o)t[n+o]=e>>>8*(r?o:3-o)&255}function M(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function R(t,e,n,r,i){return i||M(t,0,n,4),o.write(t,e,n,r,23,4),n+4}function I(t,e,n,r,i){return i||M(t,0,n,8),o.write(t,e,n,r,52,8),n+8}s.prototype.slice=function(t,e){var n,r=this.length;if(t=~~t,e=void 0===e?r:~~e,t<0?(t+=r)<0&&(t=0):t>r&&(t=r),e<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),s.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=s.prototype;else{var o=e-t;n=new s(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+t]}return n},s.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||P(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r},s.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||P(t,e,this.length);for(var r=this[t+--e],o=1;e>0&&(o*=256);)r+=this[t+--e]*o;return r},s.prototype.readUInt8=function(t,e){return e||P(t,1,this.length),this[t]},s.prototype.readUInt16LE=function(t,e){return e||P(t,2,this.length),this[t]|this[t+1]<<8},s.prototype.readUInt16BE=function(t,e){return e||P(t,2,this.length),this[t]<<8|this[t+1]},s.prototype.readUInt32LE=function(t,e){return e||P(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},s.prototype.readUInt32BE=function(t,e){return e||P(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},s.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||P(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*e)),r},s.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||P(t,e,this.length);for(var r=e,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},s.prototype.readInt8=function(t,e){return e||P(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},s.prototype.readInt16LE=function(t,e){e||P(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt16BE=function(t,e){e||P(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt32LE=function(t,e){return e||P(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},s.prototype.readInt32BE=function(t,e){return e||P(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},s.prototype.readFloatLE=function(t,e){return e||P(t,4,this.length),o.read(this,t,!0,23,4)},s.prototype.readFloatBE=function(t,e){return e||P(t,4,this.length),o.read(this,t,!1,23,4)},s.prototype.readDoubleLE=function(t,e){return e||P(t,8,this.length),o.read(this,t,!0,52,8)},s.prototype.readDoubleBE=function(t,e){return e||P(t,8,this.length),o.read(this,t,!1,52,8)},s.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||C(this,t,e,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[e]=255&t;++i<n&&(o*=256);)this[e+i]=t/o&255;return e+n},s.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||C(this,t,e,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+n},s.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,1,255,0),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},s.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):L(this,t,e,!0),e+2},s.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):L(this,t,e,!1),e+2},s.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):q(this,t,e,!0),e+4},s.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):q(this,t,e,!1),e+4},s.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);C(this,t,e,n,o-1,-o)}var i=0,a=1,u=0;for(this[e]=255&t;++i<n&&(a*=256);)t<0&&0===u&&0!==this[e+i-1]&&(u=1),this[e+i]=(t/a>>0)-u&255;return e+n},s.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);C(this,t,e,n,o-1,-o)}var i=n-1,a=1,u=0;for(this[e+i]=255&t;--i>=0&&(a*=256);)t<0&&0===u&&0!==this[e+i+1]&&(u=1),this[e+i]=(t/a>>0)-u&255;return e+n},s.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,1,127,-128),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},s.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):L(this,t,e,!0),e+2},s.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):L(this,t,e,!1),e+2},s.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,2147483647,-2147483648),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):q(this,t,e,!0),e+4},s.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):q(this,t,e,!1),e+4},s.prototype.writeFloatLE=function(t,e,n){return R(this,t,e,!0,n)},s.prototype.writeFloatBE=function(t,e,n){return R(this,t,e,!1,n)},s.prototype.writeDoubleLE=function(t,e,n){return I(this,t,e,!0,n)},s.prototype.writeDoubleBE=function(t,e,n){return I(this,t,e,!1,n)},s.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var o,i=r-n;if(this===t&&n<e&&e<r)for(o=i-1;o>=0;--o)t[o+e]=this[o+n];else if(i<1e3||!s.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+i),e);return i},s.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!s.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else{var a=s.isBuffer(t)?t:F(new s(t,r).toString()),u=a.length;for(i=0;i<n-e;++i)this[i+e]=a[i%u]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function D(t){return t<16?"0"+t.toString(16):t.toString(16)}function F(t,e){var n;e=e||1/0;for(var r=t.length,o=null,i=[],a=0;a<r;++a){if((n=t.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function U(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(B,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function $(t,e,n,r){for(var o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}}).call(this,n(44))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(156);var a=((r=i)&&r.__esModule?r:{default:r}).default.import("blots/block/embed"),u=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a),o(e,null,[{key:"create",value:function(t){var n=t.url,r=t.html,o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this);return o.setAttribute("data-url-embed",n),o.setAttribute("contenteditable","false"),o.insertAdjacentHTML("beforeend",r),o}},{key:"value",value:function(t){return t.getAttribute("data-url-embed")}}]),e}();u.blotName="urlEmbed",u.className="url-embed",u.tagName="div",e.default=u},function(t,e){t.exports=function(t,e){var n=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,n)}}},function(t,e,n){var r=n(0),o=n(229)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return o(t)}})},function(t,e,n){n(230),t.exports=n(27).RegExp.escape},function(t,e,n){(function(e){!function(e){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag",l="object"==typeof t,c=e.regeneratorRuntime;if(c)l&&(t.exports=c);else{(c=e.regeneratorRuntime=l?t.exports:{}).wrap=_;var f="suspendedStart",p="suspendedYield",h="executing",d="completed",v={},y={};y[a]=function(){return this};var g=Object.getPrototypeOf,b=g&&g(g(P([])));b&&b!==r&&o.call(b,a)&&(y=b);var m=E.prototype=x.prototype=Object.create(y);O.prototype=m.constructor=E,E.constructor=O,E[s]=O.displayName="GeneratorFunction",c.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===O||"GeneratorFunction"===(e.displayName||e.name))},c.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,E):(t.__proto__=E,s in t||(t[s]="GeneratorFunction")),t.prototype=Object.create(m),t},c.awrap=function(t){return{__await:t}},k(A.prototype),A.prototype[u]=function(){return this},c.AsyncIterator=A,c.async=function(t,e,n,r){var o=new A(_(t,e,n,r));return c.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},k(m),m[s]="Generator",m[a]=function(){return this},m.toString=function(){return"[object Generator]"},c.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},c.values=P,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(N),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,o){return u.type="throw",u.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var s=o.call(a,"catchLoc"),l=o.call(a,"finallyLoc");if(s&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),N(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;N(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:P(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function _(t,e,n,r){var o=e&&e.prototype instanceof x?e:x,i=Object.create(o.prototype),a=new T(r||[]);return i._invoke=function(t,e,n){var r=f;return function(o,i){if(r===h)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return C()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var u=S(a,n);if(u){if(u===v)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var s=w(t,e,n);if("normal"===s.type){if(r=n.done?d:p,s.arg===v)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=d,n.method="throw",n.arg=s.arg)}}}(t,n,a),i}function w(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function x(){}function O(){}function E(){}function k(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function A(t){function n(e,r,i,a){var u=w(t[e],t,r);if("throw"!==u.type){var s=u.arg,l=s.value;return l&&"object"==typeof l&&o.call(l,"__await")?Promise.resolve(l.__await).then(function(t){n("next",t,i,a)},function(t){n("throw",t,i,a)}):Promise.resolve(l).then(function(t){s.value=t,i(s)},a)}a(u.arg)}var r;"object"==typeof e.process&&e.process.domain&&(n=e.process.domain.bind(n)),this._invoke=function(t,e){function o(){return new Promise(function(r,o){n(t,e,r,o)})}return r=r?r.then(o,o):o()}}function S(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,S(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=w(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,v;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function j(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function N(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(j,this),this.reset(!0)}function P(t){if(t){var e=t[a];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(o.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return i.next=i}}return{next:C}}function C(){return{value:n,done:!0}}}("object"==typeof e?e:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,n(44))},function(t,e,n){for(var r=n(81),o=n(40),i=n(12),a=n(2),u=n(13),s=n(46),l=n(5),c=l("iterator"),f=l("toStringTag"),p=s.Array,h={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=o(h),v=0;v<d.length;v++){var y,g=d[v],b=h[g],m=a[g],_=m&&m.prototype;if(_&&(_[c]||u(_,c,p),_[f]||u(_,f,g),s[g]=p,b))for(y in r)_[y]||i(_,y,r[y],!0)}},function(t,e,n){var r=n(0),o=n(80);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(t,e,n){var r=n(2),o=n(0),i=n(76),a=[].slice,u=/MSIE .\./.test(i),s=function(t){return function(e,n){var r=arguments.length>2,o=!!r&&a.call(arguments,2);return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,o)}:e,n)}};o(o.G+o.B+o.F*u,{setTimeout:s(r.setTimeout),setInterval:s(r.setInterval)})},function(t,e,n){"use strict";var r=n(0),o=n(2),i=n(27),a=n(79)(),u=n(5)("observable"),s=n(10),l=n(1),c=n(35),f=n(33),p=n(13),h=n(34),d=h.RETURN,v=function(t){return null==t?void 0:s(t)},y=function(t){var e=t._c;e&&(t._c=void 0,e())},g=function(t){return void 0===t._o},b=function(t){g(t)||(t._o=void 0,y(t))},m=function(t,e){l(t),this._c=void 0,this._o=t,t=new _(this);try{var n=e(t),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:s(n),this._c=n)}catch(e){return void t.error(e)}g(this)&&y(this)};m.prototype=f({},{unsubscribe:function(){b(this)}});var _=function(t){this._s=t};_.prototype=f({},{next:function(t){var e=this._s;if(!g(e)){var n=e._o;try{var r=v(n.next);if(r)return r.call(n,t)}catch(t){try{b(e)}finally{throw t}}}},error:function(t){var e=this._s;if(g(e))throw t;var n=e._o;e._o=void 0;try{var r=v(n.error);if(!r)throw t;t=r.call(n,t)}catch(t){try{y(e)}finally{throw t}}return y(e),t},complete:function(t){var e=this._s;if(!g(e)){var n=e._o;e._o=void 0;try{var r=v(n.complete);t=r?r.call(n,t):void 0}catch(t){try{y(e)}finally{throw t}}return y(e),t}}});var w=function(t){c(this,w,"Observable","_f")._f=s(t)};f(w.prototype,{subscribe:function(t){return new m(t,this._f)},forEach:function(t){var e=this;return new(i.Promise||o.Promise)(function(n,r){s(t);var o=e.subscribe({next:function(e){try{return t(e)}catch(t){r(t),o.unsubscribe()}},error:r,complete:n})})}}),f(w,{from:function(t){var e="function"==typeof this?this:w,n=v(l(t)[u]);if(n){var r=l(n.call(t));return r.constructor===e?r:new e(function(t){return r.subscribe(t)})}return new e(function(e){var n=!1;return a(function(){if(!n){try{if(h(t,!1,function(t){if(e.next(t),n)return d})===d)return}catch(t){if(n)throw t;return void e.error(t)}e.complete()}}),function(){n=!0}})},of:function(){for(var t=0,e=arguments.length,n=new Array(e);t<e;)n[t]=arguments[t++];return new("function"==typeof this?this:w)(function(t){var e=!1;return a(function(){if(!e){for(var r=0;r<n.length;++r)if(t.next(n[r]),e)return;t.complete()}}),function(){e=!0}})}}),p(w.prototype,u,function(){return this}),r(r.G,{Observable:w}),n(36)("Observable")},function(t,e,n){var r=n(0),o=n(79)(),i=n(2).process,a="process"==n(20)(i);r(r.G,{asap:function(t){var e=a&&i.domain;o(e?e.bind(t):t)}})},function(t,e,n){var r=n(29),o=n(1),i=n(10),a=r.key,u=r.set;r.exp({metadata:function(t,e){return function(n,r){u(t,e,(void 0!==r?o:i)(n),a(r))}}})},function(t,e,n){var r=n(29),o=n(1),i=r.has,a=r.key;r.exp({hasOwnMetadata:function(t,e){return i(t,o(e),arguments.length<3?void 0:a(arguments[2]))}})},function(t,e,n){var r=n(29),o=n(1),i=n(16),a=r.has,u=r.key,s=function(t,e,n){if(a(t,e,n))return!0;var r=i(e);return null!==r&&s(t,r,n)};r.exp({hasMetadata:function(t,e){return s(t,o(e),arguments.length<3?void 0:u(arguments[2]))}})},function(t,e,n){var r=n(29),o=n(1),i=r.keys,a=r.key;r.exp({getOwnMetadataKeys:function(t){return i(o(t),arguments.length<2?void 0:a(arguments[1]))}})},function(t,e,n){var r=n(29),o=n(1),i=r.get,a=r.key;r.exp({getOwnMetadata:function(t,e){return i(t,o(e),arguments.length<3?void 0:a(arguments[2]))}})},function(t,e,n){var r=n(132),o=n(123),i=n(29),a=n(1),u=n(16),s=i.keys,l=i.key,c=function(t,e){var n=s(t,e),i=u(t);if(null===i)return n;var a=c(i,e);return a.length?n.length?o(new r(n.concat(a))):a:n};i.exp({getMetadataKeys:function(t){return c(a(t),arguments.length<2?void 0:l(arguments[1]))}})},function(t,e,n){var r=n(29),o=n(1),i=n(16),a=r.has,u=r.get,s=r.key,l=function(t,e,n){if(a(t,e,n))return u(t,e,n);var r=i(e);return null!==r?l(t,r,n):void 0};r.exp({getMetadata:function(t,e){return l(t,o(e),arguments.length<3?void 0:s(arguments[2]))}})},function(t,e,n){var r=n(29),o=n(1),i=r.key,a=r.map,u=r.store;r.exp({deleteMetadata:function(t,e){var n=arguments.length<3?void 0:i(arguments[2]),r=a(o(e),n,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var s=u.get(e);return s.delete(n),!!s.size||u.delete(e)}})},function(t,e,n){var r=n(29),o=n(1),i=r.key,a=r.set;r.exp({defineMetadata:function(t,e,n,r){a(t,e,o(n),i(r))}})},function(t,e,n){"use strict";var r=n(0),o=n(78),i=n(136);r(r.S,"Promise",{try:function(t){var e=o.f(this),n=i(t);return(n.e?e.reject:e.resolve)(n.v),e.promise}})},function(t,e,n){"use strict";var r=n(0),o=n(27),i=n(2),a=n(59),u=n(135);r(r.P+r.R,"Promise",{finally:function(t){var e=a(this,o.Promise||i.Promise),n="function"==typeof t;return this.then(n?function(n){return u(e,t()).then(function(){return n})}:t,n?function(n){return u(e,t()).then(function(){throw n})}:t)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,e,n){var r=n(0);r(r.S,"Math",{umulh:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r,a=n>>>16,u=r>>>16,s=(a*i>>>0)+(o*i>>>16);return a*u+(s>>>16)+((o*u>>>0)+(65535&s)>>>16)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{scale:n(122)})},function(t,e,n){var r=n(0),o=Math.PI/180;r(r.S,"Math",{radians:function(t){return t*o}})},function(t,e,n){var r=n(0);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,e,n){var r=n(0);r(r.S,"Math",{imulh:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r,a=n>>16,u=r>>16,s=(a*i>>>0)+(o*i>>>16);return a*u+(s>>16)+((o*u>>>0)+(65535&s)>>16)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{isubh:function(t,e,n,r){var o=t>>>0,i=n>>>0;return(e>>>0)-(r>>>0)-((~o&i|~(o^i)&o-i>>>0)>>>31)|0}})},function(t,e,n){var r=n(0);r(r.S,"Math",{iaddh:function(t,e,n,r){var o=t>>>0,i=n>>>0;return(e>>>0)+(r>>>0)+((o&i|(o|i)&~(o+i>>>0))>>>31)|0}})},function(t,e,n){var r=n(0),o=n(122),i=n(142);r(r.S,"Math",{fscale:function(t,e,n,r,a){return i(o(t,e,n,r,a))}})},function(t,e,n){var r=n(0),o=180/Math.PI;r(r.S,"Math",{degrees:function(t){return t*o}})},function(t,e,n){var r=n(0);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,e,n){var r=n(0);r(r.S,"Math",{clamp:function(t,e,n){return Math.min(n,Math.max(e,t))}})},function(t,e,n){var r=n(0),o=n(20);r(r.S,"Error",{isError:function(t){return"Error"===o(t)}})},function(t,e,n){var r=n(0);r(r.S,"System",{global:n(2)})},function(t,e,n){var r=n(0);r(r.G,{global:n(2)})},function(t,e,n){n(54)("WeakSet")},function(t,e,n){n(54)("WeakMap")},function(t,e,n){n(54)("Set")},function(t,e,n){n(54)("Map")},function(t,e,n){n(55)("WeakSet")},function(t,e,n){n(55)("WeakMap")},function(t,e,n){n(55)("Set")},function(t,e,n){n(55)("Map")},function(t,e,n){var r=n(0);r(r.P+r.R,"Set",{toJSON:n(124)("Set")})},function(t,e,n){var r=n(0);r(r.P+r.R,"Map",{toJSON:n(124)("Map")})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(26),a=n(16),u=n(17).f;n(8)&&r(r.P+n(56),"Object",{__lookupSetter__:function(t){var e,n=o(this),r=i(t,!0);do{if(e=u(n,r))return e.set}while(n=a(n))}})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(26),a=n(16),u=n(17).f;n(8)&&r(r.P+n(56),"Object",{__lookupGetter__:function(t){var e,n=o(this),r=i(t,!0);do{if(e=u(n,r))return e.get}while(n=a(n))}})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(10),a=n(7);n(8)&&r(r.P+n(56),"Object",{__defineSetter__:function(t,e){a.f(o(this),t,{set:i(e),enumerable:!0,configurable:!0})}})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(10),a=n(7);n(8)&&r(r.P+n(56),"Object",{__defineGetter__:function(t,e){a.f(o(this),t,{get:i(e),enumerable:!0,configurable:!0})}})},function(t,e,n){var r=n(0),o=n(125)(!0);r(r.S,"Object",{entries:function(t){return o(t)}})},function(t,e,n){var r=n(0),o=n(125)(!1);r(r.S,"Object",{values:function(t){return o(t)}})},function(t,e,n){var r=n(0),o=n(128),i=n(18),a=n(17),u=n(85);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,n,r=i(t),s=a.f,l=o(r),c={},f=0;l.length>f;)void 0!==(n=s(r,e=l[f++]))&&u(c,e,n);return c}})},function(t,e,n){n(101)("observable")},function(t,e,n){n(101)("asyncIterator")},function(t,e,n){"use strict";var r=n(0),o=n(25),i=n(6),a=n(63),u=n(61),s=RegExp.prototype,l=function(t,e){this._r=t,this._s=e};n(89)(l,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),r(r.P,"String",{matchAll:function(t){if(o(this),!a(t))throw TypeError(t+" is not a regexp!");var e=String(this),n="flags"in s?String(t.flags):u.call(t),r=new RegExp(t.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=i(t.lastIndex),new l(r,e)}})},function(t,e,n){"use strict";n(47)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,e,n){"use strict";n(47)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,e,n){"use strict";var r=n(0),o=n(126),i=n(76);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,n){"use strict";var r=n(0),o=n(126),i=n(76);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,n){"use strict";var r=n(0),o=n(91)(!0);r(r.P,"String",{at:function(t){return o(this,t)}})},function(t,e,n){"use strict";var r=n(0),o=n(127),i=n(9),a=n(6),u=n(24),s=n(83);r(r.P,"Array",{flatten:function(){var t=arguments[0],e=i(this),n=a(e.length),r=s(e,0);return o(r,e,e,n,0,void 0===t?1:u(t)),r}}),n(31)("flatten")},function(t,e,n){"use strict";var r=n(0),o=n(127),i=n(9),a=n(6),u=n(10),s=n(83);r(r.P,"Array",{flatMap:function(t){var e,n,r=i(this);return u(t),e=a(r.length),n=s(r,0),o(n,r,r,e,0,1,t,arguments[1]),n}}),n(31)("flatMap")},function(t,e,n){"use strict";var r=n(0),o=n(66)(!0);r(r.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(31)("includes")},function(t,e,n){var r=n(0),o=n(97);o&&r(r.S,"Reflect",{setPrototypeOf:function(t,e){o.check(t,e);try{return o.set(t,e),!0}catch(t){return!1}}})},function(t,e,n){var r=n(7),o=n(17),i=n(16),a=n(14),u=n(0),s=n(43),l=n(1),c=n(4);u(u.S,"Reflect",{set:function t(e,n,u){var f,p,h=arguments.length<4?e:arguments[3],d=o.f(l(e),n);if(!d){if(c(p=i(e)))return t(p,n,u,h);d=s(0)}return a(d,"value")?!(!1===d.writable||!c(h)||((f=o.f(h,n)||s(0)).value=u,r.f(h,n,f),0)):void 0!==d.set&&(d.set.call(h,u),!0)}})},function(t,e,n){var r=n(0),o=n(1),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){o(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{ownKeys:n(128)})},function(t,e,n){var r=n(0),o=n(1),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return o(t),!i||i(t)}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,n){var r=n(0),o=n(16),i=n(1);r(r.S,"Reflect",{getPrototypeOf:function(t){return o(i(t))}})},function(t,e,n){var r=n(17),o=n(0),i=n(1);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return r.f(i(t),e)}})},function(t,e,n){var r=n(17),o=n(16),i=n(14),a=n(0),u=n(4),s=n(1);a(a.S,"Reflect",{get:function t(e,n){var a,l,c=arguments.length<3?e:arguments[2];return s(e)===c?e[n]:(a=r.f(e,n))?i(a,"value")?a.value:void 0!==a.get?a.get.call(c):void 0:u(l=o(e))?t(l,n,c):void 0}})},function(t,e,n){"use strict";var r=n(0),o=n(1),i=function(t){this._t=o(t),this._i=0;var e,n=this._k=[];for(e in t)n.push(e)};n(89)(i,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new i(t)}})},function(t,e,n){var r=n(0),o=n(17).f,i=n(1);r(r.S,"Reflect",{deleteProperty:function(t,e){var n=o(i(t),e);return!(n&&!n.configurable)&&delete t[e]}})},function(t,e,n){var r=n(7),o=n(0),i=n(1),a=n(26);o(o.S+o.F*n(3)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,n){i(t),e=a(e,!0),i(n);try{return r.f(t,e,n),!0}catch(t){return!1}}})},function(t,e,n){var r=n(0),o=n(38),i=n(10),a=n(1),u=n(4),s=n(3),l=n(149),c=(n(2).Reflect||{}).construct,f=s(function(){function t(){}return!(c(function(){},[],t)instanceof t)}),p=!s(function(){c(function(){})});r(r.S+r.F*(f||p),"Reflect",{construct:function(t,e){i(t),a(e);var n=arguments.length<3?t:i(arguments[2]);if(p&&!f)return c(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(l.apply(t,r))}var s=n.prototype,h=o(u(s)?s:Object.prototype),d=Function.apply.call(t,h,e);return u(d)?d:h}})},function(t,e,n){var r=n(0),o=n(10),i=n(1),a=(n(2).Reflect||{}).apply,u=Function.apply;r(r.S+r.F*!n(3)(function(){a(function(){})}),"Reflect",{apply:function(t,e,n){var r=o(t),s=i(n);return a?a(r,e,s):u.call(r,e,s)}})},function(t,e,n){n(30)("Float64",8,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Float32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Uint32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Int32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Uint16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Int16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}},!0)},function(t,e,n){n(30)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Int8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){var r=n(0);r(r.G+r.W+r.F*!n(57).ABV,{DataView:n(77).DataView})},function(t,e,n){"use strict";var r=n(0),o=n(57),i=n(77),a=n(1),u=n(39),s=n(6),l=n(4),c=n(2).ArrayBuffer,f=n(59),p=i.ArrayBuffer,h=i.DataView,d=o.ABV&&c.isView,v=p.prototype.slice,y=o.VIEW;r(r.G+r.W+r.F*(c!==p),{ArrayBuffer:p}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||l(t)&&y in t}}),r(r.P+r.U+r.F*n(3)(function(){return!new p(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==v&&void 0===e)return v.call(a(this),t);for(var n=a(this).byteLength,r=u(t,n),o=u(void 0===e?n:e,n),i=new(f(this,p))(s(o-r)),l=new h(this),c=new h(i),d=0;r<o;)c.setUint8(d++,l.getUint8(r++));return i}}),n(36)("ArrayBuffer")},function(t,e,n){"use strict";var r=n(130),o=n(45);n(58)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,e,n){"use strict";var r,o,i,a,u=n(41),s=n(2),l=n(21),c=n(51),f=n(0),p=n(4),h=n(10),d=n(35),v=n(34),y=n(59),g=n(80).set,b=n(79)(),m=n(78),_=n(136),w=n(135),x=s.TypeError,O=s.process,E=s.Promise,k="process"==c(O),A=function(){},S=o=m.f,j=!!function(){try{var t=E.resolve(1),e=(t.constructor={})[n(5)("species")]=function(t){t(A,A)};return(k||"function"==typeof PromiseRejectionEvent)&&t.then(A)instanceof e}catch(t){}}(),N=function(t){var e;return!(!p(t)||"function"!=typeof(e=t.then))&&e},T=function(t,e){if(!t._n){t._n=!0;var n=t._c;b(function(){for(var r=t._v,o=1==t._s,i=0,a=function(e){var n,i,a=o?e.ok:e.fail,u=e.resolve,s=e.reject,l=e.domain;try{a?(o||(2==t._h&&L(t),t._h=1),!0===a?n=r:(l&&l.enter(),n=a(r),l&&l.exit()),n===e.promise?s(x("Promise-chain cycle")):(i=N(n))?i.call(n,u,s):u(n)):s(r)}catch(t){s(t)}};n.length>i;)a(n[i++]);t._c=[],t._n=!1,e&&!t._h&&P(t)})}},P=function(t){g.call(s,function(){var e,n,r,o=t._v,i=C(t);if(i&&(e=_(function(){k?O.emit("unhandledRejection",o,t):(n=s.onunhandledrejection)?n({promise:t,reason:o}):(r=s.console)&&r.error&&r.error("Unhandled promise rejection",o)}),t._h=k||C(t)?2:1),t._a=void 0,i&&e.e)throw e.v})},C=function(t){return 1!==t._h&&0===(t._a||t._c).length},L=function(t){g.call(s,function(){var e;k?O.emit("rejectionHandled",t):(e=s.onrejectionhandled)&&e({promise:t,reason:t._v})})},q=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),T(e,!0))},M=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw x("Promise can't be resolved itself");(e=N(t))?b(function(){var r={_w:n,_d:!1};try{e.call(t,l(M,r,1),l(q,r,1))}catch(t){q.call(r,t)}}):(n._v=t,n._s=1,T(n,!1))}catch(t){q.call({_w:n,_d:!1},t)}}};j||(E=function(t){d(this,E,"Promise","_h"),h(t),r.call(this);try{t(l(M,this,1),l(q,this,1))}catch(t){q.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(33)(E.prototype,{then:function(t,e){var n=S(y(this,E));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=k?O.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&T(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r;this.promise=t,this.resolve=l(M,t,1),this.reject=l(q,t,1)},m.f=S=function(t){return t===E||t===a?new i(t):o(t)}),f(f.G+f.W+f.F*!j,{Promise:E}),n(48)(E,"Promise"),n(36)("Promise"),a=n(27).Promise,f(f.S+f.F*!j,"Promise",{reject:function(t){var e=S(this);return(0,e.reject)(t),e.promise}}),f(f.S+f.F*(u||!j),"Promise",{resolve:function(t){return w(u&&this===a?E:this,t)}}),f(f.S+f.F*!(j&&n(62)(function(t){E.all(t).catch(A)})),"Promise",{all:function(t){var e=this,n=S(e),r=n.resolve,o=n.reject,i=_(function(){var n=[],i=0,a=1;v(t,!1,function(t){var u=i++,s=!1;n.push(void 0),a++,e.resolve(t).then(function(t){s||(s=!0,n[u]=t,--a||r(n))},o)}),--a||r(n)});return i.e&&o(i.v),n.promise},race:function(t){var e=this,n=S(e),r=n.reject,o=_(function(){v(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(t,e,n){n(60)("split",2,function(t,e,r){"use strict";var o=n(63),i=r,a=[].push;if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length){var u=void 0===/()??/.exec("")[1];r=function(t,e){var n=String(this);if(void 0===t&&0===e)return[];if(!o(t))return i.call(n,t,e);var r,s,l,c,f,p=[],h=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),d=0,v=void 0===e?4294967295:e>>>0,y=new RegExp(t.source,h+"g");for(u||(r=new RegExp("^"+y.source+"$(?!\\s)",h));(s=y.exec(n))&&!((l=s.index+s[0].length)>d&&(p.push(n.slice(d,s.index)),!u&&s.length>1&&s[0].replace(r,function(){for(f=1;f<arguments.length-2;f++)void 0===arguments[f]&&(s[f]=void 0)}),s.length>1&&s.index<n.length&&a.apply(p,s.slice(1)),c=s[0].length,d=l,p.length>=v));)y.lastIndex===s.index&&y.lastIndex++;return d===n.length?!c&&y.test("")||p.push(""):p.push(n.slice(d)),p.length>v?p.slice(0,v):p}}else"0".split(void 0,0).length&&(r=function(t,e){return void 0===t&&0===e?[]:i.call(this,t,e)});return[function(n,o){var i=t(this),a=void 0==n?void 0:n[e];return void 0!==a?a.call(n,i,o):r.call(String(i),n,o)},r]})},function(t,e,n){n(60)("search",1,function(t,e,n){return[function(n){"use strict";var r=t(this),o=void 0==n?void 0:n[e];return void 0!==o?o.call(n,r):new RegExp(n)[e](String(r))},n]})},function(t,e,n){n(60)("replace",2,function(t,e,n){return[function(r,o){"use strict";var i=t(this),a=void 0==r?void 0:r[e];return void 0!==a?a.call(r,i,o):n.call(String(i),r,o)},n]})},function(t,e,n){n(60)("match",1,function(t,e,n){return[function(n){"use strict";var r=t(this),o=void 0==n?void 0:n[e];return void 0!==o?o.call(n,r):new RegExp(n)[e](String(r))},n]})},function(t,e,n){"use strict";n(137);var r=n(1),o=n(61),i=n(8),a=/./.toString,u=function(t){n(12)(RegExp.prototype,"toString",t,!0)};n(3)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?u(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)}):"toString"!=a.name&&u(function(){return a.call(this)})},function(t,e,n){var r=n(2),o=n(95),i=n(7).f,a=n(37).f,u=n(63),s=n(61),l=r.RegExp,c=l,f=l.prototype,p=/a/g,h=/a/g,d=new l(p)!==p;if(n(8)&&(!d||n(3)(function(){return h[n(5)("match")]=!1,l(p)!=p||l(h)==h||"/a/i"!=l(p,"i")}))){l=function(t,e){var n=this instanceof l,r=u(t),i=void 0===e;return!n&&r&&t.constructor===l&&i?t:o(d?new c(r&&!i?t.source:t,e):c((r=t instanceof l)?t.source:t,r&&i?s.call(t):e),n?this:f,l)};for(var v=function(t){t in l||i(l,t,{configurable:!0,get:function(){return c[t]},set:function(e){c[t]=e}})},y=a(c),g=0;y.length>g;)v(y[g++]);f.constructor=l,l.prototype=f,n(12)(r,"RegExp",l)}n(36)("RegExp")},function(t,e,n){n(36)("Array")},function(t,e,n){"use strict";var r=n(0),o=n(22)(6),i="findIndex",a=!0;i in[]&&Array(1)[i](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(31)(i)},function(t,e,n){"use strict";var r=n(0),o=n(22)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(31)("find")},function(t,e,n){var r=n(0);r(r.P,"Array",{fill:n(82)}),n(31)("fill")},function(t,e,n){var r=n(0);r(r.P,"Array",{copyWithin:n(139)}),n(31)("copyWithin")},function(t,e,n){"use strict";var r=n(0),o=n(18),i=n(24),a=n(6),u=[].lastIndexOf,s=!!u&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(s||!n(19)(u)),"Array",{lastIndexOf:function(t){if(s)return u.apply(this,arguments)||0;var e=o(this),n=a(e.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in e&&e[r]===t)return r||0;return-1}})},function(t,e,n){"use strict";var r=n(0),o=n(66)(!1),i=[].indexOf,a=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(19)(i)),"Array",{indexOf:function(t){return a?i.apply(this,arguments)||0:o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(140);r(r.P+r.F*!n(19)([].reduceRight,!0),"Array",{reduceRight:function(t){return o(this,t,arguments.length,arguments[1],!0)}})},function(t,e,n){"use strict";var r=n(0),o=n(140);r(r.P+r.F*!n(19)([].reduce,!0),"Array",{reduce:function(t){return o(this,t,arguments.length,arguments[1],!1)}})},function(t,e,n){"use strict";var r=n(0),o=n(22)(4);r(r.P+r.F*!n(19)([].every,!0),"Array",{every:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(22)(3);r(r.P+r.F*!n(19)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(22)(2);r(r.P+r.F*!n(19)([].filter,!0),"Array",{filter:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(22)(1);r(r.P+r.F*!n(19)([].map,!0),"Array",{map:function(t){return o(this,t,arguments[1])}})},function(t,e,n){var r=n(4),o=n(64),i=n(5)("species");t.exports=function(t){var e;return o(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!o(e.prototype)||(e=void 0),r(e)&&null===(e=e[i])&&(e=void 0)),void 0===e?Array:e}},function(t,e,n){"use strict";var r=n(0),o=n(22)(0),i=n(19)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(10),i=n(9),a=n(3),u=[].sort,s=[1,2,3];r(r.P+r.F*(a(function(){s.sort(void 0)})||!a(function(){s.sort(null)})||!n(19)(u)),"Array",{sort:function(t){return void 0===t?u.call(i(this)):u.call(i(this),o(t))}})},function(t,e,n){"use strict";var r=n(0),o=n(98),i=n(20),a=n(39),u=n(6),s=[].slice;r(r.P+r.F*n(3)(function(){o&&s.call(o)}),"Array",{slice:function(t,e){var n=u(this.length),r=i(this);if(e=void 0===e?n:e,"Array"==r)return s.call(this,t,e);for(var o=a(t,n),l=a(e,n),c=u(l-o),f=new Array(c),p=0;p<c;p++)f[p]="String"==r?this.charAt(o+p):this[o+p];return f}})},function(t,e,n){"use strict";var r=n(0),o=n(18),i=[].join;r(r.P+r.F*(n(53)!=Object||!n(19)(i)),"Array",{join:function(t){return i.call(o(this),void 0===t?",":t)}})},function(t,e,n){"use strict";var r=n(0),o=n(85);r(r.S+r.F*n(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)o(n,t,arguments[t++]);return n.length=e,n}})},function(t,e,n){"use strict";var r=n(21),o=n(0),i=n(9),a=n(141),u=n(86),s=n(6),l=n(85),c=n(84);o(o.S+o.F*!n(62)(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,o,f,p=i(t),h="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,y=void 0!==v,g=0,b=c(p);if(y&&(v=r(v,d>2?arguments[2]:void 0,2)),void 0==b||h==Array&&u(b))for(n=new h(e=s(p.length));e>g;g++)l(n,g,y?v(p[g],g):p[g]);else for(f=b.call(p),n=new h;!(o=f.next()).done;g++)l(n,g,y?a(f,v,[o.value,g],!0):o.value);return n.length=g,n}})},function(t,e,n){var r=n(0);r(r.S,"Array",{isArray:n(64)})},function(t,e,n){"use strict";var r=n(1),o=n(26);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return o(r(this),"number"!=t)}},function(t,e,n){var r=n(5)("toPrimitive"),o=Date.prototype;r in o||n(13)(o,r,n(346))},function(t,e,n){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(12)(r,"toString",function(){var t=i.call(this);return t==t?o.call(this):"Invalid Date"})},function(t,e,n){"use strict";var r=n(3),o=Date.prototype.getTime,i=Date.prototype.toISOString,a=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!r(function(){i.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+("00000"+Math.abs(e)).slice(r?-6:-4)+"-"+a(t.getUTCMonth()+1)+"-"+a(t.getUTCDate())+"T"+a(t.getUTCHours())+":"+a(t.getUTCMinutes())+":"+a(t.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:i},function(t,e,n){var r=n(0),o=n(349);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(26);r(r.P+r.F*n(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=o(this),n=i(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},function(t,e,n){var r=n(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,n){"use strict";n(11)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,n){"use strict";n(11)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,n){"use strict";n(11)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,n){"use strict";n(11)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,n){"use strict";n(11)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,n){"use strict";n(11)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,n){"use strict";n(11)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,n){"use strict";n(11)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,n){"use strict";n(11)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,n){"use strict";n(11)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,n){"use strict";n(11)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,n){"use strict";n(11)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,n){"use strict";n(11)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,n){"use strict";var r=n(0),o=n(6),i=n(88),a="".startsWith;r(r.P+r.F*n(87)("startsWith"),"String",{startsWith:function(t){var e=i(this,t,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return a?a.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){var r=n(0);r(r.P,"String",{repeat:n(94)})},function(t,e,n){"use strict";var r=n(0),o=n(88);r(r.P+r.F*n(87)("includes"),"String",{includes:function(t){return!!~o(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){"use strict";var r=n(0),o=n(6),i=n(88),a="".endsWith;r(r.P+r.F*n(87)("endsWith"),"String",{endsWith:function(t){var e=i(this,t,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=o(e.length),u=void 0===n?r:Math.min(o(n),r),s=String(t);return a?a.call(e,s,u):e.slice(u-s.length,u)===s}})},function(t,e,n){"use strict";var r=n(0),o=n(91)(!1);r(r.P,"String",{codePointAt:function(t){return o(this,t)}})},function(t,e,n){"use strict";var r=n(91)(!0);n(90)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){"use strict";n(47)("trim",function(t){return function(){return t(this,3)}})},function(t,e,n){var r=n(0),o=n(18),i=n(6);r(r.S,"String",{raw:function(t){for(var e=o(t.raw),n=i(e.length),r=arguments.length,a=[],u=0;n>u;)a.push(String(e[u++])),u<r&&a.push(String(arguments[u]));return a.join("")}})},function(t,e,n){var r=n(0),o=n(39),i=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,a=0;r>a;){if(e=+arguments[a++],o(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?i(e):i(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},function(t,e,n){var r=n(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,n){var r=n(0),o=n(92),i=Math.exp;r(r.S,"Math",{tanh:function(t){var e=o(t=+t),n=o(-t);return e==1/0?1:n==1/0?-1:(e-n)/(i(t)+i(-t))}})},function(t,e,n){var r=n(0),o=n(92),i=Math.exp;r(r.S+r.F*n(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(o(t)-o(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{sign:n(93)})},function(t,e,n){var r=n(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,n){var r=n(0);r(r.S,"Math",{log1p:n(143)})},function(t,e,n){var r=n(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,n){var r=n(0),o=Math.imul;r(r.S+r.F*n(3)(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r;return 0|o*i+((65535&n>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(t,e,n){var r=n(0),o=Math.abs;r(r.S,"Math",{hypot:function(t,e){for(var n,r,i=0,a=0,u=arguments.length,s=0;a<u;)s<(n=o(arguments[a++]))?(i=i*(r=s/n)*r+1,s=n):i+=n>0?(r=n/s)*r:n;return s===1/0?1/0:s*Math.sqrt(i)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{fround:n(142)})},function(t,e,n){var r=n(0),o=n(92);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(t,e,n){var r=n(0),o=Math.exp;r(r.S,"Math",{cosh:function(t){return(o(t=+t)+o(-t))/2}})},function(t,e,n){var r=n(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,n){var r=n(0),o=n(93);r(r.S,"Math",{cbrt:function(t){return o(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,n){var r=n(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,n){var r=n(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,n){var r=n(0),o=n(143),i=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:o(t-1+i(t-1)*i(t+1))}})},function(t,e,n){var r=n(0),o=n(147);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(t,e,n){var r=n(0),o=n(146);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(t,e,n){var r=n(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,n){var r=n(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){var r=n(0),o=n(144),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},function(t,e,n){var r=n(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,n){var r=n(0);r(r.S,"Number",{isInteger:n(144)})},function(t,e,n){var r=n(0),o=n(2).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&o(t)}})},function(t,e,n){var r=n(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,n){"use strict";var r=n(0),o=n(3),i=n(145),a=1..toPrecision;r(r.P+r.F*(o(function(){return"1"!==a.call(1,void 0)})||!o(function(){a.call({})})),"Number",{toPrecision:function(t){var e=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?a.call(e):a.call(e,t)}})},function(t,e,n){"use strict";var r=n(0),o=n(24),i=n(145),a=n(94),u=1..toFixed,s=Math.floor,l=[0,0,0,0,0,0],c="Number.toFixed: incorrect invocation!",f=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*l[n],l[n]=r%1e7,r=s(r/1e7)},p=function(t){for(var e=6,n=0;--e>=0;)n+=l[e],l[e]=s(n/t),n=n%t*1e7},h=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==l[t]){var n=String(l[t]);e=""===e?n:e+a.call("0",7-n.length)+n}return e},d=function(t,e,n){return 0===e?n:e%2==1?d(t,e-1,n*t):d(t*t,e/2,n)};r(r.P+r.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(3)(function(){u.call({})})),"Number",{toFixed:function(t){var e,n,r,u,s=i(this,c),l=o(t),v="",y="0";if(l<0||l>20)throw RangeError(c);if(s!=s)return"NaN";if(s<=-1e21||s>=1e21)return String(s);if(s<0&&(v="-",s=-s),s>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(s*d(2,69,1))-69)<0?s*d(2,-e,1):s/d(2,e,1),n*=4503599627370496,(e=52-e)>0){for(f(0,n),r=l;r>=7;)f(1e7,0),r-=7;for(f(d(10,r,1),0),r=e-1;r>=23;)p(1<<23),r-=23;p(1<<r),f(1,1),p(2),y=h()}else f(0,n),f(1<<-e,0),y=h()+a.call("0",l);return y=l>0?v+((u=y.length)<=l?"0."+a.call("0",l-u)+y:y.slice(0,u-l)+"."+y.slice(u-l)):v+y}})},function(t,e,n){"use strict";var r=n(2),o=n(14),i=n(20),a=n(95),u=n(26),s=n(3),l=n(37).f,c=n(17).f,f=n(7).f,p=n(47).trim,h=r.Number,d=h,v=h.prototype,y="Number"==i(n(38)(v)),g="trim"in String.prototype,b=function(t){var e=u(t,!1);if("string"==typeof e&&e.length>2){var n,r,o,i=(e=g?e.trim():p(e,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=e.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(e.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+e}for(var a,s=e.slice(2),l=0,c=s.length;l<c;l++)if((a=s.charCodeAt(l))<48||a>o)return NaN;return parseInt(s,r)}}return+e};if(!h(" 0o1")||!h("0b1")||h("+0x1")){h=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof h&&(y?s(function(){v.valueOf.call(n)}):"Number"!=i(n))?a(new d(b(e)),n,h):b(e)};for(var m,_=n(8)?l(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;_.length>w;w++)o(d,m=_[w])&&!o(h,m)&&f(h,m,c(d,m));h.prototype=v,v.constructor=h,n(12)(r,"Number",h)}},function(t,e,n){var r=n(0),o=n(146);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(t,e,n){var r=n(0),o=n(147);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(t,e,n){"use strict";var r=n(4),o=n(16),i=n(5)("hasInstance"),a=Function.prototype;i in a||n(7).f(a,i,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,n){var r=n(7).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||n(8)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,e,n){var r=n(0);r(r.P,"Function",{bind:n(149)})},function(t,e,n){"use strict";var r=n(51),o={};o[n(5)("toStringTag")]="z",o+""!="[object z]"&&n(12)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,e,n){var r=n(0);r(r.S,"Object",{setPrototypeOf:n(97).set})},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,n){var r=n(0);r(r.S,"Object",{is:n(411)})},function(t,e,n){var r=n(0);r(r.S+r.F,"Object",{assign:n(150)})},function(t,e,n){var r=n(4);n(23)("isExtensible",function(t){return function(e){return!!r(e)&&(!t||t(e))}})},function(t,e,n){var r=n(4);n(23)("isSealed",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(4);n(23)("isFrozen",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(4),o=n(32).onFreeze;n(23)("preventExtensions",function(t){return function(e){return t&&r(e)?t(o(e)):e}})},function(t,e,n){var r=n(4),o=n(32).onFreeze;n(23)("seal",function(t){return function(e){return t&&r(e)?t(o(e)):e}})},function(t,e,n){var r=n(4),o=n(32).onFreeze;n(23)("freeze",function(t){return function(e){return t&&r(e)?t(o(e)):e}})},function(t,e,n){n(23)("getOwnPropertyNames",function(){return n(151).f})},function(t,e,n){var r=n(9),o=n(40);n(23)("keys",function(){return function(t){return o(r(t))}})},function(t,e,n){var r=n(9),o=n(16);n(23)("getPrototypeOf",function(){return function(t){return o(r(t))}})},function(t,e,n){var r=n(18),o=n(17).f;n(23)("getOwnPropertyDescriptor",function(){return function(t,e){return o(r(t),e)}})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(8),"Object",{defineProperties:n(152)})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(8),"Object",{defineProperty:n(7).f})},function(t,e,n){var r=n(0);r(r.S,"Object",{create:n(38)})},function(t,e,n){var r=n(40),o=n(65),i=n(52);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var a,u=n(t),s=i.f,l=0;u.length>l;)s.call(t,a=u[l++])&&e.push(a);return e}},function(t,e,n){"use strict";var r=n(2),o=n(14),i=n(8),a=n(0),u=n(12),s=n(32).KEY,l=n(3),c=n(67),f=n(48),p=n(42),h=n(5),d=n(154),v=n(101),y=n(427),g=n(64),b=n(1),m=n(4),_=n(18),w=n(26),x=n(43),O=n(38),E=n(151),k=n(17),A=n(7),S=n(40),j=k.f,N=A.f,T=E.f,P=r.Symbol,C=r.JSON,L=C&&C.stringify,q=h("_hidden"),M=h("toPrimitive"),R={}.propertyIsEnumerable,I=c("symbol-registry"),B=c("symbols"),D=c("op-symbols"),F=Object.prototype,U="function"==typeof P,$=r.QObject,H=!$||!$.prototype||!$.prototype.findChild,z=i&&l(function(){return 7!=O(N({},"a",{get:function(){return N(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=j(F,e);r&&delete F[e],N(t,e,n),r&&t!==F&&N(F,e,r)}:N,V=function(t){var e=B[t]=O(P.prototype);return e._k=t,e},W=U&&"symbol"==typeof P.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof P},K=function(t,e,n){return t===F&&K(D,e,n),b(t),e=w(e,!0),b(n),o(B,e)?(n.enumerable?(o(t,q)&&t[q][e]&&(t[q][e]=!1),n=O(n,{enumerable:x(0,!1)})):(o(t,q)||N(t,q,x(1,{})),t[q][e]=!0),z(t,e,n)):N(t,e,n)},Y=function(t,e){b(t);for(var n,r=y(e=_(e)),o=0,i=r.length;i>o;)K(t,n=r[o++],e[n]);return t},G=function(t){var e=R.call(this,t=w(t,!0));return!(this===F&&o(B,t)&&!o(D,t))&&(!(e||!o(this,t)||!o(B,t)||o(this,q)&&this[q][t])||e)},Z=function(t,e){if(t=_(t),e=w(e,!0),t!==F||!o(B,e)||o(D,e)){var n=j(t,e);return!n||!o(B,e)||o(t,q)&&t[q][e]||(n.enumerable=!0),n}},X=function(t){for(var e,n=T(_(t)),r=[],i=0;n.length>i;)o(B,e=n[i++])||e==q||e==s||r.push(e);return r},J=function(t){for(var e,n=t===F,r=T(n?D:_(t)),i=[],a=0;r.length>a;)!o(B,e=r[a++])||n&&!o(F,e)||i.push(B[e]);return i};U||(u((P=function(){if(this instanceof P)throw TypeError("Symbol is not a constructor!");var t=p(arguments.length>0?arguments[0]:void 0),e=function(n){this===F&&e.call(D,n),o(this,q)&&o(this[q],t)&&(this[q][t]=!1),z(this,t,x(1,n))};return i&&H&&z(F,t,{configurable:!0,set:e}),V(t)}).prototype,"toString",function(){return this._k}),k.f=Z,A.f=K,n(37).f=E.f=X,n(52).f=G,n(65).f=J,i&&!n(41)&&u(F,"propertyIsEnumerable",G,!0),d.f=function(t){return V(h(t))}),a(a.G+a.W+a.F*!U,{Symbol:P});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)h(Q[tt++]);for(var et=S(h.store),nt=0;et.length>nt;)v(et[nt++]);a(a.S+a.F*!U,"Symbol",{for:function(t){return o(I,t+="")?I[t]:I[t]=P(t)},keyFor:function(t){if(!W(t))throw TypeError(t+" is not a symbol!");for(var e in I)if(I[e]===t)return e},useSetter:function(){H=!0},useSimple:function(){H=!1}}),a(a.S+a.F*!U,"Object",{create:function(t,e){return void 0===e?O(t):Y(O(t),e)},defineProperty:K,defineProperties:Y,getOwnPropertyDescriptor:Z,getOwnPropertyNames:X,getOwnPropertySymbols:J}),C&&a(a.S+a.F*(!U||l(function(){var t=P();return"[null]"!=L([t])||"{}"!=L({a:t})||"{}"!=L(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(m(e)||void 0!==t)&&!W(t))return g(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!W(e))return e}),r[1]=e,L.apply(C,r)}}),P.prototype[M]||n(13)(P.prototype,M,P.prototype.valueOf),f(P,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,e,n){n(428),n(426),n(425),n(424),n(423),n(422),n(421),n(420),n(419),n(418),n(417),n(416),n(415),n(414),n(413),n(412),n(410),n(409),n(408),n(407),n(406),n(405),n(404),n(403),n(402),n(401),n(400),n(399),n(398),n(397),n(396),n(395),n(394),n(393),n(392),n(391),n(390),n(389),n(388),n(387),n(386),n(385),n(384),n(383),n(382),n(381),n(380),n(379),n(378),n(377),n(376),n(375),n(374),n(373),n(372),n(371),n(370),n(369),n(368),n(367),n(366),n(365),n(364),n(363),n(362),n(361),n(360),n(359),n(358),n(357),n(356),n(355),n(354),n(353),n(352),n(351),n(350),n(348),n(347),n(345),n(344),n(343),n(342),n(341),n(340),n(339),n(337),n(336),n(335),n(334),n(333),n(332),n(331),n(330),n(329),n(328),n(327),n(326),n(325),n(81),n(324),n(323),n(137),n(322),n(321),n(320),n(319),n(318),n(134),n(132),n(131),n(317),n(316),n(315),n(314),n(313),n(312),n(311),n(310),n(309),n(308),n(307),n(306),n(305),n(304),n(303),n(302),n(301),n(300),n(299),n(298),n(297),n(296),n(295),n(294),n(293),n(292),n(291),n(290),n(289),n(288),n(287),n(286),n(285),n(284),n(283),n(282),n(281),n(280),n(279),n(278),n(277),n(276),n(275),n(274),n(273),n(272),n(271),n(270),n(269),n(268),n(267),n(266),n(265),n(264),n(263),n(262),n(261),n(260),n(259),n(258),n(257),n(256),n(255),n(254),n(253),n(252),n(251),n(250),n(249),n(248),n(247),n(246),n(245),n(244),n(243),n(242),n(241),n(240),n(239),n(238),n(237),n(236),n(235),n(234),n(233),t.exports=n(27)},function(t,e,n){"use strict";(function(t){if(n(429),n(232),n(231),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var e="defineProperty";function r(t,n,r){t[n]||Object[e](t,n,{writable:!0,configurable:!0,value:r})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&r(Array,t,Function.call.bind([][t]))})}).call(this,n(44))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.urlEmbedModule=e.urlEmbed=void 0,n(430);var r=i(n(228)),o=i(n(223));function i(t){return t&&t.__esModule?t:{default:t}}e.urlEmbed=r.default,e.urlEmbedModule=o.default},function(t,e,n){"use strict";var r,o=n(156),i=(r=o)&&r.__esModule?r:{default:r},a=n(431);i.default.register({"blots/urlEmbed":a.urlEmbed,"modules/urlEmbeds":a.urlEmbedModule});new i.default("#editor",{theme:"snow",modules:{urlEmbeds:{metaApi:"http://localhost:3050"}},placeholder:"Paste or type a url ..."})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLWZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvVmlkZW9FbWJlZC52dWUiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL1NvdXJjZUltYWdlLnZ1ZSIsIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvU291cmNlSWNvbi52dWUiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL0xpbmtFbWJlZC52dWUiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL0VtYmVkSXRlbS52dWUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzVW5pY29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRW1iZWRJdGVtLnZ1ZT8yZjc0Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1ZpZGVvRW1iZWQudnVlPzM2OWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGlua0VtYmVkLnZ1ZT8yYzkyIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NvdXJjZUltYWdlLnZ1ZT9hMTQ4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NvdXJjZUljb24udnVlPzdiZDQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHRlbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlZXAtZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tdG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xdWlsbC9kaXN0L3F1aWxsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1ZpZGVvRW1iZWQudnVlPzZiNzgiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVmlkZW9FbWJlZC52dWU/MDQ5OCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9WaWRlb0VtYmVkLnZ1ZSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9OdW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b0Zpbml0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvSW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL191bmljb2RlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc2NpaVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaW5nVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL191bmljb2RlU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNjaWlTaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmluZ1NpemUuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19ub2RlVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVW5hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzUmVnRXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNSZWdFeHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RTbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90cnVuY2F0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Tb3VyY2VJbWFnZS52dWU/ZGY3YSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Tb3VyY2VJbWFnZS52dWU/Y2JkMCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Tb3VyY2VJbWFnZS52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU291cmNlSWNvbi52dWU/YzFkYyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Tb3VyY2VJY29uLnZ1ZT84Mjg1Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NvdXJjZUljb24udnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xpbmtFbWJlZC52dWU/NmZhZCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MaW5rRW1iZWQudnVlP2E3NzAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGlua0VtYmVkLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9FbWJlZEl0ZW0udnVlPzU1MmYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRW1iZWRJdGVtLnZ1ZT80ODA0Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0VtYmVkSXRlbS52dWUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5ydW50aW1lLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J0b2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3F1aWxsLWRlbHRhL2xpYi9vcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVlcC1lcXVhbC9saWIvaXNfYXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWVwLWVxdWFsL2xpYi9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYXN0LWRpZmYvZGlmZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVpbGwtZGVsdGEvbGliL2RlbHRhLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9ibG90LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UudHJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNjYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pc3ViaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLmF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zYW1lLXZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnVuZGxlLmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImEiLCJpIiwid2luZG93IiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWwiLCJjb3JlIiwiaGlkZSIsInJlZGVmaW5lIiwiY3R4IiwiJGV4cG9ydCIsInR5cGUiLCJzb3VyY2UiLCJrZXkiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsInRhcmdldCIsImV4cFByb3RvIiwidW5kZWZpbmVkIiwiRnVuY3Rpb24iLCJVIiwiVyIsIlIiLCJpc09iamVjdCIsIml0IiwiVHlwZUVycm9yIiwiTWF0aCIsInNlbGYiLCJfX2ciLCJleGVjIiwiZSIsInN0b3JlIiwidWlkIiwiU3ltYm9sIiwiVVNFX1NZTUJPTCIsInRvSW50ZWdlciIsIm1pbiIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZiIsIk8iLCJBdHRyaWJ1dGVzIiwiZGVmaW5lZCIsImZhaWxzIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJTdHJpbmciLCJwMSIsInJlcGxhY2UiLCJOQU1FIiwidGVzdCIsInRvTG93ZXJDYXNlIiwic3BsaXQiLCJsZW5ndGgiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJpbnNwZWN0U291cmNlIiwidmFsIiwic2FmZSIsImlzRnVuY3Rpb24iLCJqb2luIiwidGhpcyIsImNyZWF0ZURlc2MiLCJiaW5kIiwiaXNCdWZmZXIiLCJ0b1N0cmluZyIsImlzQXJyYXkiLCJmb3JFYWNoIiwib2JqIiwiZm4iLCJpc0FycmF5QnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc1VuZGVmaW5lZCIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwiZG9jdW1lbnQiLCJtZXJnZSIsInJlc3VsdCIsImFzc2lnblZhbHVlIiwiYXJndW1lbnRzIiwiZXh0ZW5kIiwiYiIsInRoaXNBcmciLCJ0cmltIiwic3RyIiwidG9PYmplY3QiLCJJRV9QUk9UTyIsIk9iamVjdFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJjb25zdHJ1Y3RvciIsInBJRSIsInRvSU9iamVjdCIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJJT2JqZWN0IiwibWV0aG9kIiwiYXJnIiwic2xpY2UiLCJhRnVuY3Rpb24iLCJ0aGF0IiwiYXBwbHkiLCJ0b0xlbmd0aCIsImFzYyIsIlRZUEUiLCIkY3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiY3JlYXRlIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwicmVzIiwiaW5kZXgiLCJwdXNoIiwiS0VZIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJ2YWx1ZU9mIiwidmVyc2lvbiIsIl9fZSIsIm5vcm1hbGl6ZUNvbXBvbmVudCIsInNjcmlwdEV4cG9ydHMiLCJyZW5kZXIiLCJzdGF0aWNSZW5kZXJGbnMiLCJmdW5jdGlvbmFsVGVtcGxhdGUiLCJpbmplY3RTdHlsZXMiLCJzY29wZUlkIiwibW9kdWxlSWRlbnRpZmllciIsInNoYWRvd01vZGUiLCJkZWZhdWx0IiwiaG9vayIsIm9wdGlvbnMiLCJfY29tcGlsZWQiLCJmdW5jdGlvbmFsIiwiX3Njb3BlSWQiLCJjb250ZXh0IiwiJHZub2RlIiwic3NyQ29udGV4dCIsInBhcmVudCIsIl9fVlVFX1NTUl9DT05URVhUX18iLCJfcmVnaXN0ZXJlZENvbXBvbmVudHMiLCJhZGQiLCJfc3NyUmVnaXN0ZXIiLCIkcm9vdCIsIiRvcHRpb25zIiwic2hhZG93Um9vdCIsIl9pbmplY3RTdHlsZXMiLCJvcmlnaW5hbFJlbmRlciIsImgiLCJleGlzdGluZyIsImJlZm9yZUNyZWF0ZSIsImNvbmNhdCIsIl9fd2VicGFja19leHBvcnRzX18iLCJNYXAiLCJzaGFyZWQiLCJnZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwidGFyZ2V0S2V5IiwidGFyZ2V0TWV0YWRhdGEiLCJzZXQiLCJrZXlNZXRhZGF0YSIsIm1hcCIsIk1ldGFkYXRhS2V5IiwibWV0YWRhdGFNYXAiLCJNZXRhZGF0YVZhbHVlIiwia2V5cyIsIl8iLCJMSUJSQVJZIiwiJHR5cGVkIiwiJGJ1ZmZlciIsImFuSW5zdGFuY2UiLCJwcm9wZXJ0eURlc2MiLCJyZWRlZmluZUFsbCIsInRvSW5kZXgiLCJ0b0Fic29sdXRlSW5kZXgiLCJjbGFzc29mIiwiaXNBcnJheUl0ZXIiLCJnT1BOIiwiZ2V0SXRlckZuIiwid2tzIiwiY3JlYXRlQXJyYXlNZXRob2QiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiQXJyYXlJdGVyYXRvcnMiLCJJdGVyYXRvcnMiLCIkaXRlckRldGVjdCIsInNldFNwZWNpZXMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiQXJyYXlQcm90byIsIkFycmF5IiwiJEFycmF5QnVmZmVyIiwiJERhdGFWaWV3IiwiRGF0YVZpZXciLCJhcnJheUZvckVhY2giLCJhcnJheUZpbHRlciIsImFycmF5U29tZSIsImFycmF5RXZlcnkiLCJhcnJheUZpbmQiLCJhcnJheUZpbmRJbmRleCIsImFycmF5SW5jbHVkZXMiLCJhcnJheUluZGV4T2YiLCJhcnJheVZhbHVlcyIsInZhbHVlcyIsImFycmF5S2V5cyIsImFycmF5RW50cmllcyIsImVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVNsaWNlIiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIklURVJBVE9SIiwiVEFHIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJGT1JDRURfU0VUIiwidG9PZmZzZXQiLCJCWVRFUyIsIm9mZnNldCIsInZhbGlkYXRlIiwiQyIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsInN0ZXAiLCJpdGVyYXRvciIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJuZXh0IiwiZG9uZSIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJzdGFydCIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJpbmRleE9mIiwic2VhcmNoRWxlbWVudCIsImluY2x1ZGVzIiwic2VwYXJhdG9yIiwicmV2ZXJzZSIsIm1pZGRsZSIsInNvbWUiLCJjb21wYXJlZm4iLCJzdWJhcnJheSIsImJlZ2luIiwiZW5kIiwiJGJlZ2luIiwiYnl0ZU9mZnNldCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiJHNsaWNlIiwiJHNldCIsImFycmF5TGlrZSIsInNyYyIsImxlbiIsIiRpdGVyYXRvcnMiLCJpc1RBSW5kZXgiLCIkZ2V0RGVzYyIsIiRzZXREZXNjIiwiZGVzYyIsIndyaXRhYmxlIiwiJFR5cGVkQXJyYXlQcm90b3R5cGUkIiwid3JhcHBlciIsIkNMQU1QRUQiLCJHRVRURVIiLCJTRVRURVIiLCJUeXBlZEFycmF5IiwiQmFzZSIsIlRBQyIsIkZPUkNFRCIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJhZGRFbGVtZW50IiwiZGF0YSIsInYiLCJyb3VuZCIsInNldHRlciIsIiRvZmZzZXQiLCIkbGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImtsYXNzIiwiJGxlbiIsIml0ZXIiLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIm9mIiwiZnJvbSIsIlVOU0NPUEFCTEVTIiwiTUVUQSIsInNldERlc2MiLCJpZCIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsInciLCJtZXRhIiwiTkVFRCIsImZhc3RLZXkiLCJnZXRXZWFrIiwib25GcmVlemUiLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhYmxlIiwiQ29uc3RydWN0b3IiLCJmb3JiaWRkZW5GaWVsZCIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsIiRrZXlzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJkUHMiLCJlbnVtQnVnS2V5cyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJtYXgiLCJweCIsInJhbmRvbSIsImJpdG1hcCIsImciLCJldmFsIiwiX3QiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwiUmVnRXhwIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJkZWYiLCJzdGF0IiwibGlzdFRvU3R5bGVzIiwicGFyZW50SWQiLCJzdHlsZXMiLCJuZXdTdHlsZXMiLCJpdGVtIiwicGFydCIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicGFydHMiLCJhZGRTdHlsZXNDbGllbnRfYWRkU3R5bGVzQ2xpZW50IiwiYWRkU3R5bGVzQ2xpZW50X2hhc0RvY3VtZW50IiwiREVCVUciLCJFcnJvciIsImFkZFN0eWxlc0NsaWVudF9zdHlsZXNJbkRvbSIsImFkZFN0eWxlc0NsaWVudF9oZWFkIiwiaGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYWRkU3R5bGVzQ2xpZW50X3NpbmdsZXRvbkVsZW1lbnQiLCJhZGRTdHlsZXNDbGllbnRfc2luZ2xldG9uQ291bnRlciIsImFkZFN0eWxlc0NsaWVudF9pc1Byb2R1Y3Rpb24iLCJhZGRTdHlsZXNDbGllbnRfbm9vcCIsImFkZFN0eWxlc0NsaWVudF9vcHRpb25zIiwiYWRkU3R5bGVzQ2xpZW50X3NzcklkS2V5IiwiYWRkU3R5bGVzQ2xpZW50X2lzT2xkSUUiLCJ1c2VyQWdlbnQiLCJfaXNQcm9kdWN0aW9uIiwiX29wdGlvbnMiLCJhZGRTdHlsZXNDbGllbnRfYWRkU3R5bGVzVG9Eb20iLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsImFkZFN0eWxlc0NsaWVudF9hZGRTdHlsZSIsImFkZFN0eWxlc0NsaWVudF9jcmVhdGVTdHlsZUVsZW1lbnQiLCJzdHlsZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidXBkYXRlIiwicmVtb3ZlIiwicXVlcnlTZWxlY3RvciIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInN0eWxlSW5kZXgiLCJhZGRTdHlsZXNDbGllbnRfYXBwbHlUb1NpbmdsZXRvblRhZyIsInNldEF0dHJpYnV0ZSIsInNzcklkIiwic291cmNlcyIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIm5ld09iaiIsInRleHRTdG9yZSIsImFkZFN0eWxlc0NsaWVudF9yZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiQm9vbGVhbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwiaW5zZXJ0QmVmb3JlIiwidXNlU291cmNlTWFwIiwiY29udGVudCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJjb2YiLCJBUkciLCJUIiwidHJ5R2V0IiwiY2FsbGVlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJmb3JPZiIsIkNPTExFQ1RJT04iLCJBIiwiY2IiLCJtYXBGbiIsIm5leHRJdGVtIiwiSyIsIl9fZGVmaW5lU2V0dGVyX18iLCJUeXBlZCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMiLCJzZXRUb1N0cmluZ1RhZyIsImluaGVyaXRJZlJlcXVpcmVkIiwibWV0aG9kcyIsImNvbW1vbiIsIklTX1dFQUsiLCJBRERFUiIsImZpeE1ldGhvZCIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiY2xlYXIiLCJnZXRDb25zdHJ1Y3RvciIsInNldFN0cm9uZyIsIkQiLCJTWU1CT0wiLCJmbnMiLCJzdHJmbiIsInJ4Zm4iLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInN0aWNreSIsIlNBRkVfQ0xPU0lORyIsInJpdGVyIiwic2tpcENsb3NpbmciLCJhcnIiLCJNQVRDSCIsImlzUmVnRXhwIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfSU5DTFVERVMiLCJlbCIsImZyb21JbmRleCIsInVybCIsIlNvdXJjZUljb24iLCJfU291cmNlSWNvbjIiLCJTb3VyY2VJbWFnZSIsIl9Tb3VyY2VJbWFnZTIiLCJMaW5rRW1iZWQiLCJfTGlua0VtYmVkMiIsIlZpZGVvRW1iZWQiLCJfVmlkZW9FbWJlZDIiLCJyZUhhc1VuaWNvZGUiLCJ1dGlscyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsIkNvbnRlbnQtVHlwZSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJhZGFwdGVyIiwiZGVmYXVsdHMiLCJYTUxIdHRwUmVxdWVzdCIsInByb2Nlc3MiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwic3RhdHVzIiwiQWNjZXB0IiwiUFJPVE9UWVBFIiwiV1JPTkdfSU5ERVgiLCJJbmZpbml0eSIsIkJhc2VCdWZmZXIiLCJhYnMiLCJwb3ciLCJsb2ciLCJMTjIiLCIkQlVGRkVSIiwiJExFTkdUSCIsIiRPRkZTRVQiLCJwYWNrSUVFRTc1NCIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJOYU4iLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJ2aWV3IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsIl9iIiwicGFjayIsImNvbnZlcnNpb24iLCJBcnJheUJ1ZmZlclByb3RvIiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwiYnVmZmVyTGVuZ3RoIiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJyZXNvbHZlIiwicmVqZWN0IiwicHJvbWlzZSIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsIlByb21pc2UiLCJpc05vZGUiLCJsYXN0Iiwibm90aWZ5IiwiZmx1c2giLCJkb21haW4iLCJleGl0IiwiZW50ZXIiLCJuZXh0VGljayIsInN0YW5kYWxvbmUiLCJ0aGVuIiwidG9nZ2xlIiwibm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwidGFzayIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJpbnZva2UiLCJodG1sIiwiY2VsIiwic2V0VGFzayIsInNldEltbWVkaWF0ZSIsImNsZWFyVGFzayIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsImNvdW50ZXIiLCJxdWV1ZSIsInJ1biIsImxpc3RlbmVyIiwiZXZlbnQiLCJhcmdzIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJzZXRUaW1lb3V0IiwiYWRkVG9VbnNjb3BhYmxlcyIsIml0ZXJhdGVkIiwia2luZCIsIl9pIiwiX2siLCJBcmd1bWVudHMiLCJlbmRQb3MiLCJvcmlnaW5hbCIsImdldEl0ZXJhdG9yTWV0aG9kIiwiJGRlZmluZVByb3BlcnR5IiwicmUiLCJzZWFyY2hTdHJpbmciLCJkZXNjcmlwdG9yIiwiSXRlcmF0b3JQcm90b3R5cGUiLCIkaXRlckNyZWF0ZSIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkRFRkFVTFQiLCJJU19TRVQiLCJnZXRNZXRob2QiLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsIlRPX1NUUklORyIsInBvcyIsImNoYXJDb2RlQXQiLCJjaGFyQXQiLCIkZXhwbTEiLCJleHBtMSIsIngiLCJzaWduIiwiY291bnQiLCJzZXRQcm90b3R5cGVPZiIsImNoZWNrIiwiYnVnZ3kiLCJfX3Byb3RvX18iLCJkb2N1bWVudEVsZW1lbnQiLCJ3a3NFeHQiLCIkU3ltYm9sIiwiaXMiLCJfaCIsIiRjcmVhdGVFbGVtZW50IiwiX2MiLCJfc2VsZiIsInN0YXRpY0NsYXNzIiwiY29tcG9uZW50VHlwZSIsImF0dHJzIiwiZW1iZWRVcmwiLCJmcmFtZWJvcmRlciIsIndlYmtpdGFsbG93ZnVsbHNjcmVlbiIsIm1vemFsbG93ZnVsbHNjcmVlbiIsImFsbG93ZnVsbHNjcmVlbiIsIl92bSIsImhyZWYiLCJfdiIsIl9zIiwiZGVzY3JpcHRpb24iLCJpY29uIiwiYW55IiwicHVibGlzaGVyIiwiaW1hZ2UiLCJoYXNFcnJvciIsIm9uIiwiZXJyb3IiLCIkZXZlbnQiLCJ2aWV3Qm94Iiwic3Ryb2tlIiwic3Ryb2tlLXdpZHRoIiwiZmlsbC1ydWxlIiwicG9pbnRzIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJudWxsVGFnIiwidW5kZWZpbmVkVGFnIiwic3ltVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsImJhc2VHZXRUYWciLCJpc09iamVjdExpa2UiLCJzeW1ib2xUYWciLCJmcmVlR2xvYmFsIiwiYXJyYXlNYXAiLCJpc1N5bWJvbCIsIklORklOSVRZIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xUb1N0cmluZyIsImJhc2VUb1N0cmluZyIsIkNhbmNlbCIsIm1lc3NhZ2UiLCJfX0NBTkNFTF9fIiwiZW5oYW5jZUVycm9yIiwiY29uZmlnIiwiY29kZSIsInJlcXVlc3QiLCJyZXNwb25zZSIsInNldHRsZSIsImJ1aWxkVVJMIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwibG9hZEV2ZW50IiwieERvbWFpbiIsIlhEb21haW5SZXF1ZXN0Iiwib25wcm9ncmVzcyIsIm9udGltZW91dCIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiQXV0aG9yaXphdGlvbiIsInRvVXBwZXJDYXNlIiwicGFyYW1zIiwicGFyYW1zU2VyaWFsaXplciIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmVycm9yIiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwiY2FuY2VsIiwiYWJvcnQiLCJzZW5kIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYXJyYXkiLCJub29wIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiaGFzT3duIiwidG9TdHIiLCJpc1BsYWluT2JqZWN0IiwiaGFzT3duQ29uc3RydWN0b3IiLCJoYXNJc1Byb3RvdHlwZU9mIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJkZWVwIiwicFNsaWNlIiwib2JqZWN0S2V5cyIsImlzQXJndW1lbnRzIiwiZGVlcEVxdWFsIiwiYWN0dWFsIiwiZXhwZWN0ZWQiLCJvcHRzIiwiRGF0ZSIsImdldFRpbWUiLCJzdHJpY3QiLCJpc1VuZGVmaW5lZE9yTnVsbCIsImthIiwia2IiLCJvYmpFcXVpdiIsInNjYWxlIiwiaW5Mb3ciLCJpbkhpZ2giLCJvdXRMb3ciLCJvdXRIaWdoIiwiZ2V0S2V5cyIsImlzRW51bSIsImlzRW50cmllcyIsInJlcGVhdCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJsZWZ0Iiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImludE1heExlbmd0aCIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsImZsYXR0ZW5JbnRvQXJyYXkiLCJzb3VyY2VMZW4iLCJkZXB0aCIsIm1hcHBlciIsImVsZW1lbnQiLCJzcHJlYWRhYmxlIiwidGFyZ2V0SW5kZXgiLCJzb3VyY2VJbmRleCIsImdPUFMiLCJSZWZsZWN0Iiwib3duS2V5cyIsImdldFN5bWJvbHMiLCJudW1iZXIiLCIkaGFzIiwidW5jYXVnaHRGcm96ZW5TdG9yZSIsIl9sIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsImVudHJ5IiwiZGVsZXRlIiwic3BsaWNlIiwidWZzdG9yZSIsIkludGVybmFsTWFwIiwiZWFjaCIsImFzc2lnbiIsIndlYWsiLCJ0bXAiLCIkV2Vha01hcCIsImZyZWV6ZSIsIl9mIiwic3Ryb25nIiwiJGl0ZXJEZWZpbmUiLCJTSVpFIiwiZ2V0RW50cnkiLCJrIiwicHJldiIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJmbGFncyIsInRvIiwiaW5jIiwibWVtbyIsImlzUmlnaHQiLCJyZXQiLCJFUFNJTE9OIiwiRVBTSUxPTjMyIiwiTUFYMzIiLCJNSU4zMiIsImZyb3VuZCIsIiRhYnMiLCIkc2lnbiIsImxvZzFwIiwiaXNGaW5pdGUiLCJtc2ciLCIkcGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCIkdHJpbSIsIiRwYXJzZUludCIsInBhcnNlSW50Iiwid3MiLCJoZXgiLCJyYWRpeCIsInVuIiwiZmFjdG9yaWVzIiwicGFydEFyZ3MiLCJib3VuZCIsImNvbnN0cnVjdCIsIiRhc3NpZ24iLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiZGVmaW5lUHJvcGVydGllcyIsIm5hbWVzIiwiQnVmZmVyIiwiY29udGFpbmVyXzEiLCJmb3JtYXRfMSIsImxlYWZfMSIsInNjcm9sbF8xIiwiaW5saW5lXzEiLCJibG9ja18xIiwiZW1iZWRfMSIsInRleHRfMSIsImF0dHJpYnV0b3JfMSIsImNsYXNzXzEiLCJzdHlsZV8xIiwic3RvcmVfMSIsIlJlZ2lzdHJ5IiwiUGFyY2htZW50IiwiU2NvcGUiLCJxdWVyeSIsInJlZ2lzdGVyIiwiQ29udGFpbmVyIiwiRm9ybWF0IiwiTGVhZiIsIkVtYmVkIiwiU2Nyb2xsIiwiQmxvY2siLCJJbmxpbmUiLCJUZXh0IiwiQXR0cmlidXRvciIsIkF0dHJpYnV0ZSIsIkNsYXNzIiwiU3R5bGUiLCJTdG9yZSIsImV4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJfXyIsIlBhcmNobWVudEVycm9yIiwiX3N1cGVyIiwiX3RoaXMiLCJhdHRyaWJ1dGVzIiwiY2xhc3NlcyIsInRhZ3MiLCJ0eXBlcyIsInNjb3BlIiwibWF0Y2giLCJBTlkiLCJOb2RlIiwiVEVYVF9OT0RFIiwiTEVWRUwiLCJCTE9DSyIsIklOTElORSIsIkhUTUxFbGVtZW50IiwiZ2V0QXR0cmlidXRlIiwidGFnTmFtZSIsIkRBVEFfS0VZIiwiaW5wdXQiLCJCbG90Q2xhc3MiLCJidWJibGUiLCJibG90IiwiRGVmaW5pdGlvbnMiLCJEZWZpbml0aW9uIiwiYmxvdE5hbWUiLCJhdHRyTmFtZSIsImtleU5hbWUiLCJjbGFzc05hbWUiLCJkaWZmIiwiZXF1YWwiLCJvcCIsIk5VTExfQ0hBUkFDVEVSIiwiZnJvbUNoYXJDb2RlIiwiRGVsdGEiLCJvcHMiLCJpbnNlcnQiLCJ0ZXh0IiwibmV3T3AiLCJyZXRhaW4iLCJsYXN0T3AiLCJ1bnNoaWZ0IiwiY2hvcCIsInBvcCIsInBhcnRpdGlvbiIsInBhc3NlZCIsImZhaWxlZCIsImluaXRpYWwiLCJjaGFuZ2VMZW5ndGgiLCJlbGVtIiwiaGFzTmV4dCIsIm5leHRPcCIsImNvbXBvc2UiLCJvdGhlciIsInRoaXNJdGVyIiwib3RoZXJJdGVyIiwiZGVsdGEiLCJwZWVrVHlwZSIsInBlZWtMZW5ndGgiLCJ0aGlzT3AiLCJvdGhlck9wIiwic3RyaW5ncyIsImRpZmZSZXN1bHQiLCJjb21wb25lbnQiLCJvcExlbmd0aCIsIklOU0VSVCIsIkRFTEVURSIsIkVRVUFMIiwiZWFjaExpbmUiLCJuZXdsaW5lIiwibGluZSIsInBlZWsiLCJ0cmFuc2Zvcm0iLCJwcmlvcml0eSIsInRyYW5zZm9ybVBvc2l0aW9uIiwibmV4dFR5cGUiLCJCbG9ja0VtYmVkIiwiYnViYmxlRm9ybWF0cyIsIl9jcmVhdGVDbGFzcyIsInByb3BzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2dldCIsInJlY2VpdmVyIiwiX2V4dGVuZDIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3F1aWxsRGVsdGEyIiwiX3BhcmNobWVudDIiLCJfYnJlYWsyIiwiX2lubGluZTIiLCJfdGV4dDIiLCJfY2xhc3NDYWxsQ2hlY2siLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX1BhcmNobWVudCRFbWJlZCIsImRvbU5vZGUiLCJmb3JtYXRzIiwiQkxPQ0tfQVRUUklCVVRFIiwiZm9ybWF0IiwiZW5kc1dpdGgiLCJibG9jayIsImluc2VydEF0IiwiQkxPQ0tfQkxPVCIsIl9QYXJjaG1lbnQkQmxvY2siLCJfdGhpczIiLCJjYWNoZSIsImRlc2NlbmRhbnRzIiwibGVhZiIsImxpbmVzIiwic2hpZnQiLCJjaGlsZHJlbiIsInRhaWwiLCJyZWYiLCJjaGlsZCIsImZvcmNlIiwic3RhdGljcyIsImRlZmF1bHRDaGlsZCIsImFsbG93ZWRDaGlsZHJlbiIsIm92ZXJsb2FkIiwiZXhwYW5kQ29uZmlnIiwiX3R5cGVvZiIsIl9zbGljZWRUb0FycmF5IiwiX2FyciIsIl9uIiwiX2UiLCJlcnIiLCJzbGljZUl0ZXJhdG9yIiwiX2VkaXRvcjIiLCJfZW1pdHRlcjQiLCJfbW9kdWxlMiIsIl9zZWxlY3Rpb24iLCJfc2VsZWN0aW9uMiIsIl9sb2dnZXIyIiwiX3RoZW1lMiIsIl9kZWZpbmVQcm9wZXJ0eSIsImRlYnVnIiwiUXVpbGwiLCJjb250YWluZXIiLCJpbm5lckhUTUwiLCJjbGFzc0xpc3QiLCJfX3F1aWxsIiwiYWRkQ29udGFpbmVyIiwic2Nyb2xsaW5nQ29udGFpbmVyIiwiZW1pdHRlciIsInNjcm9sbCIsIndoaXRlbGlzdCIsImVkaXRvciIsInNlbGVjdGlvbiIsInRoZW1lIiwia2V5Ym9hcmQiLCJhZGRNb2R1bGUiLCJjbGlwYm9hcmQiLCJoaXN0b3J5IiwiaW5pdCIsImV2ZW50cyIsIkVESVRPUl9DSEFOR0UiLCJURVhUX0NIQU5HRSIsImlzQmxhbmsiLCJTQ1JPTExfVVBEQVRFIiwibXV0YXRpb25zIiwicmFuZ2UiLCJsYXN0UmFuZ2UiLCJtb2RpZnkiLCJjb250ZW50cyIsImNvbnZlcnQiLCJzZXRDb250ZW50cyIsInBsYWNlaG9sZGVyIiwicmVhZE9ubHkiLCJkaXNhYmxlIiwibGltaXQiLCJsZXZlbCIsImltcG9ydHMiLCJwYXRoIiwib3ZlcndyaXRlIiwid2FybiIsInN0YXJ0c1dpdGgiLCJyZWZOb2RlIiwic2V0UmFuZ2UiLCJfdGhpczMiLCJfb3ZlcmxvYWQiLCJfb3ZlcmxvYWQyIiwiZGVsZXRlVGV4dCIsImVuYWJsZSIsImVuYWJsZWQiLCJzY3JvbGxUb3AiLCJmb2N1cyIsInNjcm9sbEludG9WaWV3IiwiX3RoaXM0IiwiQVBJIiwiZ2V0U2VsZWN0aW9uIiwiY2hhbmdlIiwiZm9ybWF0TGluZSIsImZvcm1hdFRleHQiLCJzZXRTZWxlY3Rpb24iLCJTSUxFTlQiLCJfdGhpczUiLCJfb3ZlcmxvYWQzIiwiX292ZXJsb2FkNCIsIl90aGlzNiIsIl9vdmVybG9hZDUiLCJfb3ZlcmxvYWQ2IiwiYm91bmRzIiwiZ2V0Qm91bmRzIiwiY29udGFpbmVyQm91bmRzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYm90dG9tIiwidG9wIiwiaGVpZ2h0IiwicmlnaHQiLCJ3aWR0aCIsImdldExlbmd0aCIsIl9vdmVybG9hZDciLCJfb3ZlcmxvYWQ4IiwiZ2V0Q29udGVudHMiLCJnZXRGb3JtYXQiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJnZXRSYW5nZSIsIl9vdmVybG9hZDkiLCJfb3ZlcmxvYWQxMCIsImdldFRleHQiLCJoYXNGb2N1cyIsImVtYmVkIiwiX3RoaXM3IiwiaW5zZXJ0RW1iZWQiLCJfdGhpczgiLCJfb3ZlcmxvYWQxMSIsIl9vdmVybG9hZDEyIiwiaW5zZXJ0VGV4dCIsImNvbnRhaW5zIiwiZGFuZ2Vyb3VzbHlQYXN0ZUhUTUwiLCJfdGhpczkiLCJfb3ZlcmxvYWQxMyIsIl9vdmVybG9hZDE0IiwicmVtb3ZlRm9ybWF0IiwiX3RoaXMxMCIsImRlbGV0ZWQiLCJhcHBsaWVkIiwiYXBwbHlEZWx0YSIsIl9vdmVybG9hZDE1IiwiX292ZXJsb2FkMTYiLCJSYW5nZSIsIlVTRVIiLCJfdGhpczExIiwidXNlckNvbmZpZyIsIkRFRkFVTFRTIiwiaW1wb3J0IiwidGhlbWVDb25maWciLCJtb2R1bGVDb25maWciLCJtb2R1bGVDbGFzcyIsInRvb2xiYXIiLCJtb2RpZmllciIsImlzRW5hYmxlZCIsIm9sZERlbHRhIiwic2hpZnRSYW5nZSIsIl9lbWl0dGVyIiwiX2VtaXR0ZXIyIiwiX21hcCIsIl9tYXAyIiwiX21hcDMiLCJfbWFwNCIsInBhcmNobWVudCIsImNvcmUvbW9kdWxlIiwiY29yZS90aGVtZSIsIl9QYXJjaG1lbnQkSW5saW5lIiwiY29tcGFyZSIsIkJMT1QiLCJpc29sYXRlIiwid3JhcCIsIm1vdmVDaGlsZHJlbiIsInNlbGZJbmRleCIsIm9yZGVyIiwib3RoZXJJbmRleCIsIl9wYXJjaG1lbnQiLCJUZXh0QmxvdCIsIl9QYXJjaG1lbnQkVGV4dCIsIl9ldmVudGVtaXR0ZXIyIiwiZXZlbnROYW1lIiwiX2xlbiIsIl9rZXkiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX25vZGUkX19xdWlsbCRlbWl0dGVyIiwiaGFuZGxlRE9NIiwiRW1pdHRlciIsIl9FdmVudEVtaXR0ZXIiLCJfbGVuMiIsIl9rZXkyIiwiX3JlZiIsImhhbmRsZXIiLCJTQ1JPTExfQkVGT1JFX1VQREFURSIsIlNDUk9MTF9PUFRJTUlaRSIsIlNFTEVDVElPTl9DSEFOR0UiLCJNb2R1bGUiLCJxdWlsbCIsImxldmVscyIsIl9jb25zb2xlIiwiY29uc29sZSIsIm5hbWVzcGFjZSIsIm5zIiwibG9nZ2VyIiwibmV3TGV2ZWwiLCJhdHRyaWJ1dGVCaXQiLCJBVFRSSUJVVEUiLCJjYW5BZGQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJDb2RlIiwiX2Jsb2NrMiIsIl9JbmxpbmUiLCJDb2RlQmxvY2siLCJfQmxvY2siLCJ0ZXh0Q29udGVudCIsImZyYWciLCJfZGVzY2VuZGFudCIsImRlc2NlbmRhbnQiLCJkZWxldGVBdCIsIm5leHROZXdsaW5lIiwibmV3bGluZUluZGV4IiwicHJldk5ld2xpbmUiLCJpc29sYXRlTGVuZ3RoIiwiZm9ybWF0QXQiLCJfZGVzY2VuZGFudDMiLCJfZGVzY2VuZGFudDQiLCJzZWFyY2hJbmRleCIsIm9wdGltaXplIiwidW53cmFwIiwiVEFCIiwiX29wMiIsIl9jb2RlMiIsIl9jdXJzb3IyIiwiX2Jsb2NrIiwiX2Nsb25lMiIsIl9kZWVwRXF1YWwyIiwiQVNDSUkiLCJFZGl0b3IiLCJnZXREZWx0YSIsImNvbnN1bWVOZXh0TmV3bGluZSIsInNjcm9sbExlbmd0aCIsImJhdGNoU3RhcnQiLCJidWxsZXQiLCJub3JtYWxpemVEZWx0YSIsIl9zY3JvbGwkbGluZSIsIl9zY3JvbGwkbGluZTIiLCJfbGluZSRkZXNjZW5kYW50IiwiYmF0Y2hFbmQiLCJsZW5ndGhSZW1haW5pbmciLCJsaW5lTGVuZ3RoIiwiY29kZUluZGV4IiwiY29kZUxlbmd0aCIsImxlYXZlcyIsImZvcm1hdHNBcnIiLCJibG90cyIsImNvbWJpbmVGb3JtYXRzIiwiX3Njcm9sbCRsaW5lMyIsIl9zY3JvbGwkbGluZTQiLCJzdWZmaXhMZW5ndGgiLCJzdWZmaXgiLCJjdXJzb3JJbmRleCIsInRleHRCbG90Iiwib2xkVmFsdWUiLCJDT05URU5UUyIsIm9sZFRleHQiLCJuZXdUZXh0IiwiY29tYmluZWQiLCJtZXJnZWQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIyIiwiU2VsZWN0aW9uIiwiY29tcG9zaW5nIiwibW91c2VEb3duIiwiY3Vyc29yIiwic2F2ZWRSYW5nZSIsImhhbmRsZUNvbXBvc2l0aW9uIiwiaGFuZGxlRHJhZ2dpbmciLCJsaXN0ZW5ET00iLCJuYXRpdmUiLCJnZXROYXRpdmVSYW5nZSIsInRleHROb2RlIiwic2V0TmF0aXZlUmFuZ2UiLCJpZ25vcmVkIiwiX2NvbnRleHQkcmFuZ2UiLCJzdGFydE5vZGUiLCJzdGFydE9mZnNldCIsImVuZE5vZGUiLCJlbmRPZmZzZXQiLCJyZXN0b3JlIiwiYm9keSIsIl9mb3JtYXQiLCJuYXRpdmVSYW5nZSIsImNvbGxhcHNlZCIsImFmdGVyIiwiYXR0YWNoIiwiX3Njcm9sbCRsZWFmIiwiX3Njcm9sbCRsZWFmMiIsIl9sZWFmJHBvc2l0aW9uIiwicG9zaXRpb24iLCJfbGVhZiRwb3NpdGlvbjIiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwiX3Njcm9sbCRsZWFmMyIsIl9zY3JvbGwkbGVhZjQiLCJfbGVhZiRwb3NpdGlvbjMiLCJfbGVhZiRwb3NpdGlvbjQiLCJzZXRFbmQiLCJzaWRlIiwicmVjdCIsInJhbmdlQ291bnQiLCJnZXRSYW5nZUF0Iiwibm9ybWFsaXplTmF0aXZlIiwiaW5mbyIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVkVG9SYW5nZSIsImFjdGl2ZUVsZW1lbnQiLCJwb3NpdGlvbnMiLCJpbmRleGVzIiwiX3Bvc2l0aW9uIiwic3RhcnRDb250YWluZXIiLCJlbmRDb250YWluZXIiLCJsYXN0Q2hpbGQiLCJfc2Nyb2xsJGxlYWY1IiwiX3Njcm9sbCRsZWFmNiIsIl9sZWFmJHBvc2l0aW9uNSIsIl9sZWFmJHBvc2l0aW9uNiIsImZpcnN0Iiwic2Nyb2xsQm91bmRzIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJibHVyIiwicmFuZ2VUb05hdGl2ZSIsIm9sZFJhbmdlIiwiX2dldFJhbmdlIiwiX2dldFJhbmdlMiIsIkJyZWFrIiwibGlua2VkX2xpc3RfMSIsInNoYWRvd18xIiwiQ29udGFpbmVyQmxvdCIsImJ1aWxkIiwibWFrZUJsb3QiLCJmb3JFYWNoQXQiLCJjcml0ZXJpYSIsIl9hIiwibGVuZ3RoTGVmdCIsImRldGFjaCIsImNoaWxkQmxvdCIsInJlZkJsb3QiLCJpbnNlcnRJbnRvIiwidGFyZ2V0UGFyZW50IiwiaW5jbHVzaXZlIiwiYWRkZWROb2RlcyIsInJlbW92ZWROb2RlcyIsIm11dGF0aW9uIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlkiLCJET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkciLCJuZXh0U2libGluZyIsInJlcGxhY2VDaGlsZCIsIkZvcm1hdEJsb3QiLCJyZXBsYWNlV2l0aCIsIm1vdmUiLCJMZWFmQmxvdCIsIklOTElORV9CTE9UIiwibGliIiwia2VlcE51bGwiLCJJdGVyYXRvciIsInJldE9wIiwic3Vic3RyIiwiX2luc3RhbmNlb2YiLCJuYXRpdmVNYXAiLCJuYXRpdmVTZXQiLCJuYXRpdmVQcm9taXNlIiwiU2V0IiwiY2lyY3VsYXIiLCJpbmNsdWRlTm9uRW51bWVyYWJsZSIsImFsbFBhcmVudHMiLCJhbGxDaGlsZHJlbiIsInVzZUJ1ZmZlciIsIl9jbG9uZSIsIl9faXNBcnJheSIsIl9faXNSZWdFeHAiLCJfX2dldFJlZ0V4cEZsYWdzIiwibGFzdEluZGV4IiwiX19pc0RhdGUiLCJrZXlDaGlsZCIsInZhbHVlQ2hpbGQiLCJlbnRyeUNoaWxkIiwic3ltYm9scyIsInN5bWJvbCIsImFsbFByb3BlcnR5TmFtZXMiLCJwcm9wZXJ0eU5hbWUiLCJfX29ialRvU3RyIiwiY2xvbmVQcm90b3R5cGUiLCJfY29udGFpbmVyMiIsImlzTGluZSIsIl9QYXJjaG1lbnQkU2Nyb2xsIiwiYmF0Y2giLCJfbGluZSIsIl9saW5lMiIsIl9saW5lMyIsIl9uZXdsaW5lSW5kZXgiLCJnZXRMaW5lcyIsIm9ic2VydmVyIiwidGFrZVJlY29yZHMiLCJTSE9SVEtFWSIsIl9xdWlsbDIiLCJwbGF0Zm9ybSIsIktleWJvYXJkIiwiX01vZHVsZSIsImJpbmRpbmdzIiwiYWRkQmluZGluZyIsIkVOVEVSIiwic2hpZnRLZXkiLCJoYW5kbGVFbnRlciIsIm1ldGFLZXkiLCJjdHJsS2V5IiwiYWx0S2V5IiwiQkFDS1NQQUNFIiwiaGFuZGxlQmFja3NwYWNlIiwiaGFuZGxlRGVsZXRlIiwicHJlZml4IiwiaGFuZGxlRGVsZXRlUmFuZ2UiLCJsaXN0ZW4iLCJldnQiLCJub3JtYWxpemUiLCJ3aGljaCIsImtleUNvZGUiLCJkZWZhdWx0UHJldmVudGVkIiwiX3F1aWxsJGdldExpbmUiLCJnZXRMaW5lIiwiX3F1aWxsJGdldExpbmUyIiwiX3F1aWxsJGdldExlYWYiLCJnZXRMZWFmIiwiX3F1aWxsJGdldExlYWYyIiwibGVhZlN0YXJ0Iiwib2Zmc2V0U3RhcnQiLCJfcmVmMiIsImxlYWZFbmQiLCJvZmZzZXRFbmQiLCJwcmVmaXhUZXh0Iiwic3VmZml4VGV4dCIsImN1ckNvbnRleHQiLCJlbXB0eSIsInByZXZlbnREZWZhdWx0IiwibWFrZUVtYmVkQXJyb3dIYW5kbGVyIiwiX3JlZjMiLCJ3aGVyZSIsIkxFRlQiLCJSSUdIVCIsIl9xdWlsbCRnZXRMZWFmMyIsIl9xdWlsbCRnZXRMaW5lMTEiLCJfcXVpbGwkZ2V0TGluZTEzIiwiY3VyRm9ybWF0cyIsInByZXZGb3JtYXRzIiwibmV4dExlbmd0aCIsIl9xdWlsbCRnZXRMaW5lMTUiLCJfcXVpbGwkZ2V0TGluZTE3IiwibmV4dEZvcm1hdHMiLCJmaXJzdEZvcm1hdHMiLCJsYXN0Rm9ybWF0cyIsImxpbmVGb3JtYXRzIiwibWFrZUNvZGVCbG9ja0hhbmRsZXIiLCJpbmRlbnQiLCJjb2RlLWJsb2NrIiwiX3F1aWxsJHNjcm9sbCRkZXNjZW5kIiwiX3F1aWxsJHNjcm9sbCRkZXNjZW5kMiIsInNjcm9sbEluZGV4IiwiZ2V0SW5kZXgiLCJtYWtlRm9ybWF0SGFuZGxlciIsInNob3J0S2V5IiwiRVNDQVBFIiwiVVAiLCJET1dOIiwiYm9sZCIsIml0YWxpYyIsInVuZGVybGluZSIsIm91dGRlbnQiLCJvdXRkZW50IGJhY2tzcGFjZSIsImluZGVudCBjb2RlLWJsb2NrIiwib3V0ZGVudCBjb2RlLWJsb2NrIiwicmVtb3ZlIHRhYiIsInRhYiIsImN1dG9mZiIsInVwZGF0ZUNvbnRlbnRzIiwibGlzdCBlbXB0eSBlbnRlciIsImNoZWNrbGlzdCBlbnRlciIsIl9xdWlsbCRnZXRMaW5lMyIsIl9xdWlsbCRnZXRMaW5lNCIsImhlYWRlciBlbnRlciIsIl9xdWlsbCRnZXRMaW5lNSIsIl9xdWlsbCRnZXRMaW5lNiIsImhlYWRlciIsImxpc3QgYXV0b2ZpbGwiLCJfcXVpbGwkZ2V0TGluZTciLCJfcXVpbGwkZ2V0TGluZTgiLCJjb2RlIGV4aXQiLCJfcXVpbGwkZ2V0TGluZTkiLCJfcXVpbGwkZ2V0TGluZTEwIiwiZW1iZWQgbGVmdCIsImVtYmVkIGxlZnQgc2hpZnQiLCJlbWJlZCByaWdodCIsImVtYmVkIHJpZ2h0IHNoaWZ0IiwiQ3Vyc29yIiwiX2xlbmd0aCIsInJlc3RvcmVUZXh0IiwiX1BhcmNobWVudCRDb250YWluZXIiLCJDb2xvclN0eWxlIiwiQ29sb3JDbGFzcyIsIkNvbG9yQXR0cmlidXRvciIsIl9QYXJjaG1lbnQkQXR0cmlidXRvciIsInNhbml0aXplIiwiX2lubGluZSIsIkxpbmsiLCJfc2FuaXRpemUiLCJQUk9UT0NPTF9XSElURUxJU1QiLCJTQU5JVElaRURfVVJMIiwicHJvdG9jb2xzIiwiYW5jaG9yIiwicHJvdG9jb2wiLCJfa2V5Ym9hcmQyIiwiX2Ryb3Bkb3duMiIsIm9wdGlvbnNDb3VudGVyIiwidG9nZ2xlQXJpYUF0dHJpYnV0ZSIsIlBpY2tlciIsInNlbGVjdCIsImJ1aWxkUGlja2VyIiwibGFiZWwiLCJ0b2dnbGVQaWNrZXIiLCJlc2NhcGUiLCJvcHRpb24iLCJ0YWJJbmRleCIsImhhc0F0dHJpYnV0ZSIsInNlbGVjdEl0ZW0iLCJidWlsZEl0ZW0iLCJzZWxlY3RlZCIsImJ1aWxkTGFiZWwiLCJidWlsZE9wdGlvbnMiLCJ0cmlnZ2VyIiwic2VsZWN0ZWRJbmRleCIsIkV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiaXNBY3RpdmUiLCJfZW1iZWQyIiwiX3Njcm9sbDIiLCJfY2xpcGJvYXJkMiIsIl9oaXN0b3J5MiIsImJsb3RzL2Jsb2NrIiwiYmxvdHMvYmxvY2svZW1iZWQiLCJibG90cy9icmVhayIsImJsb3RzL2NvbnRhaW5lciIsImJsb3RzL2N1cnNvciIsImJsb3RzL2VtYmVkIiwiYmxvdHMvaW5saW5lIiwiYmxvdHMvc2Nyb2xsIiwiYmxvdHMvdGV4dCIsIm1vZHVsZXMvY2xpcGJvYXJkIiwibW9kdWxlcy9oaXN0b3J5IiwibW9kdWxlcy9rZXlib2FyZCIsIlNoYWRvd0Jsb3QiLCJjbG9uZU5vZGUiLCJwYXJlbnRCbG90IiwicmVmRG9tTm9kZSIsIkF0dHJpYnV0b3JTdG9yZSIsImF0dHIiLCJDbGFzc0F0dHJpYnV0b3IiLCJjYW1lbGl6ZSIsInJlc3QiLCJTdHlsZUF0dHJpYnV0b3IiLCJUaGVtZSIsInRoZW1lcyIsIkdVQVJEX1RFWFQiLCJjb250ZW50Tm9kZSIsImNoaWxkTm9kZSIsImxlZnRHdWFyZCIsInJpZ2h0R3VhcmQiLCJwcmV2TGVuZ3RoIiwiQWxpZ25TdHlsZSIsIkFsaWduQ2xhc3MiLCJBbGlnbkF0dHJpYnV0ZSIsIkJhY2tncm91bmRTdHlsZSIsIkJhY2tncm91bmRDbGFzcyIsIl9jb2xvciIsIkRpcmVjdGlvblN0eWxlIiwiRGlyZWN0aW9uQ2xhc3MiLCJEaXJlY3Rpb25BdHRyaWJ1dGUiLCJGb250Q2xhc3MiLCJGb250U3R5bGUiLCJGb250U3R5bGVBdHRyaWJ1dG9yIiwiU2l6ZVN0eWxlIiwiU2l6ZUNsYXNzIiwiYWxpZ24iLCIiLCJjZW50ZXIiLCJqdXN0aWZ5IiwiYmFja2dyb3VuZCIsImJsb2NrcXVvdGUiLCJjbGVhbiIsImNvbG9yIiwiZGlyZWN0aW9uIiwicnRsIiwiZmxvYXQiLCJmdWxsIiwiZm9ybXVsYSIsIjEiLCIyIiwiKzEiLCItMSIsImxpbmsiLCJvcmRlcmVkIiwic2NyaXB0Iiwic3ViIiwic3VwZXIiLCJzdHJpa2UiLCJ2aWRlbyIsImdldExhc3RDaGFuZ2VJbmRleCIsIkhpc3RvcnkiLCJsYXN0UmVjb3JkZWQiLCJpZ25vcmVDaGFuZ2UiLCJ1c2VyT25seSIsInJlY29yZCIsInVuZG8iLCJyZWRvIiwiZGVzdCIsInN0YWNrIiwiY2hhbmdlRGVsdGEiLCJ1bmRvRGVsdGEiLCJ0aW1lc3RhbXAiLCJkZWxheSIsIm1heFN0YWNrIiwiZGVsZXRlTGVuZ3RoIiwiY2hhbmdlSW5kZXgiLCJlbmRzV2l0aE5ld2xpbmVDaGFuZ2UiLCJCYXNlVG9vbHRpcCIsIl9jb2xvclBpY2tlcjIiLCJfaWNvblBpY2tlcjIiLCJfcGlja2VyMiIsIl90b29sdGlwMiIsIkFMSUdOUyIsIkNPTE9SUyIsIkZPTlRTIiwiSEVBREVSUyIsIlNJWkVTIiwiQmFzZVRoZW1lIiwiX1RoZW1lIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInRvb2x0aXAiLCJ0ZXh0Ym94IiwicGlja2VycyIsInBpY2tlciIsImV4dGVuZFRvb2xiYXIiLCJidXR0b25zIiwiaWNvbnMiLCJidXR0b24iLCJzZWxlY3RzIiwiZmlsbFNlbGVjdCIsImhhbmRsZXJzIiwiZWRpdCIsImZpbGVJbnB1dCIsImZpbGVzIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInJlYWRBc0RhdGFVUkwiLCJjbGljayIsIl9Ub29sdGlwIiwiYm91bmRzQ29udGFpbmVyIiwic2F2ZSIsIm1vZGUiLCJwcmV2aWV3IiwibGlua1JhbmdlIiwicmVzdG9yZUZvY3VzIiwiZXh0cmFjdFZpZGVvVXJsIiwiZGVmYXVsdFZhbHVlIiwiTGlua2VkTGlzdCIsImFwcGVuZCIsIm5vZGVzIiwiY3VyIiwiY3VyTm9kZSIsImNhbGxiYWNrIiwiY3VySW5kZXgiLCJjdXJMZW5ndGgiLCJPQlNFUlZFUl9DT05GSUciLCJjaGFyYWN0ZXJEYXRhT2xkVmFsdWUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiU2Nyb2xsQmxvdCIsImRpc2Nvbm5lY3QiLCJyZWNvcmRzIiwibWFyayIsIm1hcmtQYXJlbnQiLCJyZW1haW5pbmciLCJwcmV2aW91c1NpYmxpbmciLCJncmFuZENoaWxkIiwiSW5saW5lQmxvdCIsIm9iajEiLCJvYmoyIiwicHJvcCIsImlzRXF1YWwiLCJCbG9ja0Jsb3QiLCJFbWJlZEJsb3QiLCJzcGxpdFRleHQiLCJfdG9nZ2xlIiwiRE9NVG9rZW5MaXN0IiwidG9rZW4iLCJzdWJqZWN0U3RyaW5nIiwiZXhlY0NvbW1hbmQiLCJESUZGX0RFTEVURSIsIkRJRkZfSU5TRVJUIiwiRElGRl9FUVVBTCIsImRpZmZfbWFpbiIsInRleHQxIiwidGV4dDIiLCJjdXJzb3JfcG9zIiwiY29tbW9ubGVuZ3RoIiwiZGlmZl9jb21tb25QcmVmaXgiLCJjb21tb25wcmVmaXgiLCJzdWJzdHJpbmciLCJkaWZmX2NvbW1vblN1ZmZpeCIsImNvbW1vbnN1ZmZpeCIsImRpZmZzIiwibG9uZ3RleHQiLCJzaG9ydHRleHQiLCJobSIsImRpZmZfaGFsZk1hdGNoSV8iLCJiZXN0X2xvbmd0ZXh0X2EiLCJiZXN0X2xvbmd0ZXh0X2IiLCJiZXN0X3Nob3J0dGV4dF9hIiwiYmVzdF9zaG9ydHRleHRfYiIsInNlZWQiLCJiZXN0X2NvbW1vbiIsInByZWZpeExlbmd0aCIsInRleHQxX2EiLCJ0ZXh0MV9iIiwidGV4dDJfYSIsInRleHQyX2IiLCJobTEiLCJobTIiLCJtaWRfY29tbW9uIiwiZGlmZl9oYWxmTWF0Y2hfIiwiZGlmZnNfYSIsImRpZmZzX2IiLCJ0ZXh0MV9sZW5ndGgiLCJ0ZXh0Ml9sZW5ndGgiLCJtYXhfZCIsInZfb2Zmc2V0Iiwidl9sZW5ndGgiLCJ2MSIsInYyIiwiZnJvbnQiLCJrMXN0YXJ0IiwiazFlbmQiLCJrMnN0YXJ0IiwiazJlbmQiLCJrMSIsImsxX29mZnNldCIsInkxIiwieDEiLCJrMl9vZmZzZXQiLCJ4MiIsImRpZmZfYmlzZWN0U3BsaXRfIiwiazIiLCJ5MiIsImRpZmZfYmlzZWN0XyIsImRpZmZfY29tcHV0ZV8iLCJkaWZmX2NsZWFudXBNZXJnZSIsInBvaW50ZXIiLCJjb3VudF9kZWxldGUiLCJjb3VudF9pbnNlcnQiLCJ0ZXh0X2RlbGV0ZSIsInRleHRfaW5zZXJ0IiwiY2hhbmdlcyIsIm5vcm0iLCJjdXJyZW50X3BvcyIsIm5leHRfcG9zIiwic3BsaXRfcG9zIiwiZF9sZWZ0IiwiZF9yaWdodCIsImN1cnNvcl9ub3JtYWxpemVfZGlmZiIsIm5kaWZmcyIsImN1cnNvcl9wb2ludGVyIiwiZF9uZXh0IiwibWVyZ2VfdHVwbGVzIiwiZml4X2N1cnNvciIsImNvbXBhY3QiLCJzdGFydHNfd2l0aF9wYWlyX2VuZCIsImZpeGVkX2RpZmZzIiwiZml4X2Vtb2ppIiwieSIsInRleHQxYSIsInRleHQyYSIsInRleHQxYiIsInRleHQyYiIsImRpZmZzYiIsInBvaW50ZXJtaW4iLCJwb2ludGVybWF4IiwicG9pbnRlcm1pZCIsInBvaW50ZXJzdGFydCIsInBvaW50ZXJlbmQiLCJsZWZ0X2QiLCJyaWdodF9kIiwic2hpbSIsInN1cHBvcnRzQXJndW1lbnRzQ2xhc3MiLCJzdXBwb3J0ZWQiLCJ1bnN1cHBvcnRlZCIsIkV2ZW50cyIsIkVFIiwiRXZlbnRFbWl0dGVyIiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsImV2ZW50TmFtZXMiLCJleGlzdHMiLCJhdmFpbGFibGUiLCJlZSIsImExIiwiYTIiLCJhMyIsImE0IiwiYTUiLCJzZXRNYXhMaXN0ZW5lcnMiLCJwcmVmaXhlZCIsIm1hdGNoVGV4dCIsIm1hdGNoU3BhY2luZyIsIm1hdGNoTmV3bGluZSIsIm1hdGNoQmxvdCIsIm1hdGNoQXR0cmlidXRvciIsIl9leHRlbmQzIiwiX2FsaWduIiwiX2JhY2tncm91bmQiLCJfZGlyZWN0aW9uIiwiX2ZvbnQiLCJfc2l6ZSIsIkRPTV9LRVkiLCJDTElQQk9BUkRfQ09ORklHIiwiZGVsdGFFbmRzV2l0aCIsIkVMRU1FTlRfTk9ERSIsImZvbnRTdHlsZSIsImNvbXB1dGVTdHlsZSIsImZvbnRXZWlnaHQiLCJhcHBseUZvcm1hdCIsInRleHRJbmRlbnQiLCJtYXRjaEFsaWFzIiwiQVRUUklCVVRFX0FUVFJJQlVUT1JTIiwiU1RZTEVfQVRUUklCVVRPUlMiLCJDbGlwYm9hcmQiLCJvblBhc3RlIiwibWF0Y2hlcnMiLCJzZWxlY3RvciIsIm1hdGNoZXIiLCJtYXRjaFZpc3VhbCIsImFkZE1hdGNoZXIiLCJpbm5lclRleHQiLCJfcHJlcGFyZU1hdGNoaW5nIiwicHJlcGFyZU1hdGNoaW5nIiwiX3ByZXBhcmVNYXRjaGluZzIiLCJlbGVtZW50TWF0Y2hlcnMiLCJ0ZXh0TWF0Y2hlcnMiLCJ0cmF2ZXJzZSIsIm5vZGVUeXBlIiwiY2hpbGRyZW5EZWx0YSIsInBhc3RlIiwicGFpciIsIl9wYWlyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImVuZFRleHQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJub2RlSGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwib2Zmc2V0VG9wIiwid2hpdGVTcGFjZSIsInJlcGxhY2VyIiwiY29sbGFwc2UiLCJCb2xkIiwiYWRkQ29udHJvbHMiLCJUb29sYmFyIiwiX3JldCIsImNvbnRyb2xzIiwiYWRkSGFuZGxlciIsIl90aGlzJHF1aWxsJHNlbGVjdGlvbiIsIl9xdWlsbCRzZWxlY3Rpb24kZ2V0UiIsInByb21wdCIsImFkZEJ1dHRvbiIsImdyb3VwcyIsImdyb3VwIiwiY29udHJvbCIsImFkZFNlbGVjdCIsIl9waWNrZXIiLCJDb2xvclBpY2tlciIsIl9QaWNrZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2xvckxhYmVsIiwiSWNvblBpY2tlciIsImRlZmF1bHRJdGVtIiwiVG9vbHRpcCIsIlRFTVBMQVRFIiwicmVmZXJlbmNlIiwib2Zmc2V0V2lkdGgiLCJyb290Qm91bmRzIiwidmVydGljYWxTaGlmdCIsIl9iYXNlIiwiX2Jhc2UyIiwiX2xpbmsyIiwiX2ljb25zMiIsIlRPT0xCQVJfQ09ORklHIiwiU25vd1RoZW1lIiwiX0Jhc2VUaGVtZSIsImJ1aWxkQnV0dG9ucyIsImJ1aWxkUGlja2VycyIsIlNub3dUb29sdGlwIiwiX0Jhc2VUb29sdGlwIiwic2hvdyIsIl9jb3JlMiIsIl9pbmRlbnQiLCJfYmxvY2txdW90ZTIiLCJfaGVhZGVyMiIsIl9saXN0IiwiX2xpc3QyIiwiX2JvbGQyIiwiX2l0YWxpYzIiLCJfc2NyaXB0MiIsIl9zdHJpa2UyIiwiX3VuZGVybGluZTIiLCJfaW1hZ2UyIiwiX3ZpZGVvMiIsIl9jb2RlIiwiX2Zvcm11bGEyIiwiX3N5bnRheDIiLCJfdG9vbGJhcjIiLCJfYnViYmxlMiIsIl9zbm93MiIsImF0dHJpYnV0b3JzL2F0dHJpYnV0ZS9kaXJlY3Rpb24iLCJhdHRyaWJ1dG9ycy9jbGFzcy9hbGlnbiIsImF0dHJpYnV0b3JzL2NsYXNzL2JhY2tncm91bmQiLCJhdHRyaWJ1dG9ycy9jbGFzcy9jb2xvciIsImF0dHJpYnV0b3JzL2NsYXNzL2RpcmVjdGlvbiIsImF0dHJpYnV0b3JzL2NsYXNzL2ZvbnQiLCJhdHRyaWJ1dG9ycy9jbGFzcy9zaXplIiwiYXR0cmlidXRvcnMvc3R5bGUvYWxpZ24iLCJhdHRyaWJ1dG9ycy9zdHlsZS9iYWNrZ3JvdW5kIiwiYXR0cmlidXRvcnMvc3R5bGUvY29sb3IiLCJhdHRyaWJ1dG9ycy9zdHlsZS9kaXJlY3Rpb24iLCJhdHRyaWJ1dG9ycy9zdHlsZS9mb250IiwiYXR0cmlidXRvcnMvc3R5bGUvc2l6ZSIsImZvcm1hdHMvYWxpZ24iLCJmb3JtYXRzL2RpcmVjdGlvbiIsImZvcm1hdHMvaW5kZW50IiwiSW5kZW50Q2xhc3MiLCJmb3JtYXRzL2JhY2tncm91bmQiLCJmb3JtYXRzL2NvbG9yIiwiZm9ybWF0cy9mb250IiwiZm9ybWF0cy9zaXplIiwiZm9ybWF0cy9ibG9ja3F1b3RlIiwiZm9ybWF0cy9jb2RlLWJsb2NrIiwiZm9ybWF0cy9oZWFkZXIiLCJmb3JtYXRzL2xpc3QiLCJmb3JtYXRzL2JvbGQiLCJmb3JtYXRzL2NvZGUiLCJmb3JtYXRzL2l0YWxpYyIsImZvcm1hdHMvbGluayIsImZvcm1hdHMvc2NyaXB0IiwiZm9ybWF0cy9zdHJpa2UiLCJmb3JtYXRzL3VuZGVybGluZSIsImZvcm1hdHMvaW1hZ2UiLCJmb3JtYXRzL3ZpZGVvIiwiZm9ybWF0cy9saXN0L2l0ZW0iLCJMaXN0SXRlbSIsIm1vZHVsZXMvZm9ybXVsYSIsIm1vZHVsZXMvc3ludGF4IiwibW9kdWxlcy90b29sYmFyIiwidGhlbWVzL2J1YmJsZSIsInRoZW1lcy9zbm93IiwidWkvaWNvbnMiLCJ1aS9waWNrZXIiLCJ1aS9pY29uLXBpY2tlciIsInVpL2NvbG9yLXBpY2tlciIsInVpL3Rvb2x0aXAiLCJJZGVudEF0dHJpYnV0b3IiLCJCbG9ja3F1b3RlIiwiSGVhZGVyIiwiTGlzdCIsIl9Db250YWluZXIiLCJsaXN0RXZlbnRIYW5kbGVyIiwiX2JvbGQiLCJJdGFsaWMiLCJfQm9sZCIsIlNjcmlwdCIsIlN0cmlrZSIsIlVuZGVybGluZSIsIl9saW5rIiwiQVRUUklCVVRFUyIsIkltYWdlIiwiVmlkZW8iLCJfQmxvY2tFbWJlZCIsIkZvcm11bGFCbG90IiwiX0VtYmVkIiwia2F0ZXgiLCJ0aHJvd09uRXJyb3IiLCJlcnJvckNvbG9yIiwiRm9ybXVsYSIsIkNvZGVUb2tlbiIsIlN5bnRheENvZGVCbG9jayIsIl9Db2RlQmxvY2siLCJfaGlnaGxpZ2h0IiwiY2FjaGVkVGV4dCIsIlN5bnRheCIsImhpZ2hsaWdodCIsInRpbWVyIiwiaW50ZXJ2YWwiLCJobGpzIiwiaGlnaGxpZ2h0QXV0byIsIkJ1YmJsZVRvb2x0aXAiLCJCdWJibGVUaGVtZSIsImxhc3RMaW5lIiwiX2JvdW5kcyIsImFycm93IiwibWFyZ2luTGVmdCIsImxvY2FscyIsIl9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfcnVudGltZV9jb21wb25lbnRfbm9ybWFsaXplcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX192dWVfc3R5bGVzX18iLCJDb21wb25lbnQiLCJfYmFiZWxfbG9hZGVyX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9zZWxlY3Rvcl90eXBlX3NjcmlwdF9pbmRleF8wX1ZpZGVvRW1iZWRfdnVlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIl9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfdGVtcGxhdGVfY29tcGlsZXJfaW5kZXhfaWRfZGF0YV92XzM1MDFhZTk5X2hhc1Njb3BlZF9mYWxzZV9vcHRpb25zSWRfMF9idWJsZV90cmFuc2Zvcm1zX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9zZWxlY3Rvcl90eXBlX3RlbXBsYXRlX2luZGV4XzBfVmlkZW9FbWJlZF92dWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIk5BTiIsInJlVHJpbSIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwiZnJlZVBhcnNlSW50IiwiaXNCaW5hcnkiLCJ0b051bWJlciIsIk1BWF9JTlRFR0VSIiwidG9GaW5pdGUiLCJyZW1haW5kZXIiLCJyc0FzdHJhbCIsInJzQ29tYm8iLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicmVPcHRNb2QiLCJyc1NlcSIsInJzU3ltYm9sIiwicmVVbmljb2RlIiwiYXNjaWlUb0FycmF5IiwiaGFzVW5pY29kZSIsInVuaWNvZGVUb0FycmF5IiwiYXNjaWlTaXplIiwiYmFzZVByb3BlcnR5IiwidW5pY29kZVNpemUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsImZyZWVFeHBvcnRzIiwiZnJlZU1vZHVsZSIsImZyZWVQcm9jZXNzIiwibm9kZVV0aWwiLCJmdW5jIiwicmVnZXhwVGFnIiwiYmFzZUlzUmVnRXhwIiwiYmFzZVVuYXJ5Iiwibm9kZUlzUmVnRXhwIiwiYmFzZVNsaWNlIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJvYmplY3RQcm90byIsImlzT3duIiwidW5tYXNrZWQiLCJpdGVyYXRlZSIsImZyZWVTZWxmIiwiY2FzdFNsaWNlIiwic3RyaW5nU2l6ZSIsInN0cmluZ1RvQXJyYXkiLCJERUZBVUxUX1RSVU5DX0xFTkdUSCIsIkRFRkFVTFRfVFJVTkNfT01JU1NJT04iLCJyZUZsYWdzIiwib21pc3Npb24iLCJzdHJMZW5ndGgiLCJzdHJTeW1ib2xzIiwic2VhcmNoIiwibmV3RW5kIiwiX2JhYmVsX2xvYWRlcl9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfc2VsZWN0b3JfdHlwZV9zY3JpcHRfaW5kZXhfMF9Tb3VyY2VJbWFnZV92dWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl90ZW1wbGF0ZV9jb21waWxlcl9pbmRleF9pZF9kYXRhX3ZfMDM2YWI1NDZfaGFzU2NvcGVkX2ZhbHNlX29wdGlvbnNJZF8wX2J1YmxlX3RyYW5zZm9ybXNfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX3NlbGVjdG9yX3R5cGVfdGVtcGxhdGVfaW5kZXhfMF9Tb3VyY2VJbWFnZV92dWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9iYWJlbF9sb2FkZXJfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX3NlbGVjdG9yX3R5cGVfc2NyaXB0X2luZGV4XzBfU291cmNlSWNvbl92dWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl90ZW1wbGF0ZV9jb21waWxlcl9pbmRleF9pZF9kYXRhX3ZfNTgxZTZlMzJfaGFzU2NvcGVkX2ZhbHNlX29wdGlvbnNJZF8wX2J1YmxlX3RyYW5zZm9ybXNfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX3NlbGVjdG9yX3R5cGVfdGVtcGxhdGVfaW5kZXhfMF9Tb3VyY2VJY29uX3Z1ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX2JhYmVsX2xvYWRlcl9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfc2VsZWN0b3JfdHlwZV9zY3JpcHRfaW5kZXhfMF9MaW5rRW1iZWRfdnVlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIl9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfdGVtcGxhdGVfY29tcGlsZXJfaW5kZXhfaWRfZGF0YV92X2MzODQwMDc0X2hhc1Njb3BlZF9mYWxzZV9vcHRpb25zSWRfMF9idWJsZV90cmFuc2Zvcm1zX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9zZWxlY3Rvcl90eXBlX3RlbXBsYXRlX2luZGV4XzBfTGlua0VtYmVkX3Z1ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX2JhYmVsX2xvYWRlcl9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfc2VsZWN0b3JfdHlwZV9zY3JpcHRfaW5kZXhfMF9FbWJlZEl0ZW1fdnVlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIl9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfdGVtcGxhdGVfY29tcGlsZXJfaW5kZXhfaWRfZGF0YV92X2MxM2I5NTcyX2hhc1Njb3BlZF9mYWxzZV9vcHRpb25zSWRfMF9idWJsZV90cmFuc2Zvcm1zX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9zZWxlY3Rvcl90eXBlX3RlbXBsYXRlX2luZGV4XzBfRW1iZWRJdGVtX3Z1ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJtZXNzYWdlUHJlZml4Iiwib25HbG9iYWxNZXNzYWdlIiwibmV4dEhhbmRsZSIsInRhc2tzQnlIYW5kbGUiLCJjdXJyZW50bHlSdW5uaW5nQVRhc2siLCJkb2MiLCJhdHRhY2hUbyIsImhhbmRsZSIsInJ1bklmUHJlc2VudCIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJjYW5Vc2VQb3N0TWVzc2FnZSIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImF0dGFjaEV2ZW50IiwiVGltZW91dCIsImNsZWFyRm4iLCJfaWQiLCJfY2xlYXJGbiIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInVucmVmIiwiZW5yb2xsIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiYWN0aXZlIiwiX29uVGltZW91dCIsImVtcHR5T2JqZWN0IiwiaXNVbmRlZiIsImlzRGVmIiwiaXNUcnVlIiwiaXNQcmltaXRpdmUiLCJfdG9TdHJpbmciLCJpc1ZhbGlkQXJyYXlJbmRleCIsIm1ha2VNYXAiLCJleHBlY3RzTG93ZXJDYXNlIiwiaXNSZXNlcnZlZEF0dHJpYnV0ZSIsImNhY2hlZCIsImNhbWVsaXplUkUiLCJjYXBpdGFsaXplIiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJib3VuZEZuIiwidG9BcnJheSIsIl9mcm9tIiwibm8iLCJpZGVudGl0eSIsImxvb3NlRXF1YWwiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJpc0FycmF5QSIsImlzQXJyYXlCIiwia2V5c0EiLCJrZXlzQiIsImxvb3NlSW5kZXhPZiIsImNhbGxlZCIsIlNTUl9BVFRSIiwiQVNTRVRfVFlQRVMiLCJMSUZFQ1lDTEVfSE9PS1MiLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJzaWxlbnQiLCJwcm9kdWN0aW9uVGlwIiwiZGV2dG9vbHMiLCJwZXJmb3JtYW5jZSIsImVycm9ySGFuZGxlciIsIndhcm5IYW5kbGVyIiwiaWdub3JlZEVsZW1lbnRzIiwia2V5Q29kZXMiLCJpc1Jlc2VydmVkVGFnIiwiaXNSZXNlcnZlZEF0dHIiLCJpc1Vua25vd25FbGVtZW50IiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJtdXN0VXNlUHJvcCIsIl9saWZlY3ljbGVIb29rcyIsImJhaWxSRSIsIl9pc1NlcnZlciIsImhhc1Byb3RvIiwiaW5Ccm93c2VyIiwiaW5XZWV4IiwiV1hFbnZpcm9ubWVudCIsIndlZXhQbGF0Zm9ybSIsIlVBIiwiaXNJRSIsImlzSUU5IiwiaXNFZGdlIiwiaXNJT1MiLCJuYXRpdmVXYXRjaCIsIndhdGNoIiwic3VwcG9ydHNQYXNzaXZlIiwiaXNTZXJ2ZXJSZW5kZXJpbmciLCJWVUVfRU5WIiwiX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzTmF0aXZlIiwiQ3RvciIsIl9TZXQiLCJoYXNTeW1ib2wiLCJEZXAiLCJzdWJzIiwiYWRkU3ViIiwicmVtb3ZlU3ViIiwiZGVwZW5kIiwiYWRkRGVwIiwidGFyZ2V0U3RhY2siLCJwdXNoVGFyZ2V0IiwiX3RhcmdldCIsInBvcFRhcmdldCIsIlZOb2RlIiwiZWxtIiwiY29tcG9uZW50T3B0aW9ucyIsImFzeW5jRmFjdG9yeSIsImZuQ29udGV4dCIsImZuT3B0aW9ucyIsImZuU2NvcGVJZCIsImNvbXBvbmVudEluc3RhbmNlIiwicmF3IiwiaXNTdGF0aWMiLCJpc1Jvb3RJbnNlcnQiLCJpc0NvbW1lbnQiLCJpc0Nsb25lZCIsImlzT25jZSIsImFzeW5jTWV0YSIsImlzQXN5bmNQbGFjZWhvbGRlciIsInByb3RvdHlwZUFjY2Vzc29ycyIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJjcmVhdGVUZXh0Vk5vZGUiLCJjbG9uZVZOb2RlIiwidm5vZGUiLCJjbG9uZWQiLCJhcnJheVByb3RvIiwiYXJyYXlNZXRob2RzIiwiaW5zZXJ0ZWQiLCJvYiIsIl9fb2JfXyIsIm9ic2VydmVBcnJheSIsImRlcCIsInNob3VsZE9ic2VydmUiLCJ0b2dnbGVPYnNlcnZpbmciLCJ2bUNvdW50IiwicHJvdG9BdWdtZW50IiwiY29weUF1Z21lbnQiLCJ3YWxrIiwiYXNSb290RGF0YSIsIl9pc1Z1ZSIsImRlZmluZVJlYWN0aXZlIiwiY3VzdG9tU2V0dGVyIiwic2hhbGxvdyIsImNoaWxkT2IiLCJkZXBlbmRBcnJheSIsIm5ld1ZhbCIsImRlbCIsIml0ZW1zIiwic3RyYXRzIiwibWVyZ2VEYXRhIiwidG9WYWwiLCJmcm9tVmFsIiwibWVyZ2VEYXRhT3JGbiIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwidm0iLCJpbnN0YW5jZURhdGEiLCJkZWZhdWx0RGF0YSIsIm1lcmdlSG9vayIsIm1lcmdlQXNzZXRzIiwia2V5JDEiLCJpbmplY3QiLCJjb21wdXRlZCIsInByb3ZpZGUiLCJkZWZhdWx0U3RyYXQiLCJtZXJnZU9wdGlvbnMiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZUluamVjdCIsImRpcnMiLCJkaXJlY3RpdmVzIiwibm9ybWFsaXplRGlyZWN0aXZlcyIsImV4dGVuZHNGcm9tIiwiZXh0ZW5kcyIsIm1peGlucyIsIm1lcmdlRmllbGQiLCJzdHJhdCIsInJlc29sdmVBc3NldCIsIndhcm5NaXNzaW5nIiwiYXNzZXRzIiwiY2FtZWxpemVkSWQiLCJQYXNjYWxDYXNlSWQiLCJ2YWxpZGF0ZVByb3AiLCJwcm9wT3B0aW9ucyIsInByb3BzRGF0YSIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsInN0cmluZ0luZGV4IiwiX3Byb3BzIiwiZ2V0VHlwZSIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJwcmV2U2hvdWxkT2JzZXJ2ZSIsImlzU2FtZVR5cGUiLCJleHBlY3RlZFR5cGVzIiwiaGFuZGxlRXJyb3IiLCIkcGFyZW50IiwiaG9va3MiLCJlcnJvckNhcHR1cmVkIiwiZ2xvYmFsSGFuZGxlRXJyb3IiLCJsb2dFcnJvciIsIm1pY3JvVGltZXJGdW5jIiwibWFjcm9UaW1lckZ1bmMiLCJjYWxsYmFja3MiLCJwZW5kaW5nIiwiZmx1c2hDYWxsYmFja3MiLCJjb3BpZXMiLCJ1c2VNYWNyb1Rhc2siLCJfcmVzb2x2ZSIsInNlZW5PYmplY3RzIiwiX3RyYXZlcnNlIiwic2VlbiIsImlzQSIsImlzRnJvemVuIiwiZGVwSWQiLCJub3JtYWxpemVFdmVudCIsInBhc3NpdmUiLCJvbmNlJCQxIiwiY2FwdHVyZSIsImNyZWF0ZUZuSW52b2tlciIsImludm9rZXIiLCJhcmd1bWVudHMkMSIsInVwZGF0ZUxpc3RlbmVycyIsIm9sZE9uIiwicmVtb3ZlJCQxIiwib2xkIiwibWVyZ2VWTm9kZUhvb2siLCJob29rS2V5Iiwib2xkSG9vayIsIndyYXBwZWRIb29rIiwiY2hlY2tQcm9wIiwiaGFzaCIsInByZXNlcnZlIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVBcnJheUNoaWxkcmVuIiwibmVzdGVkSW5kZXgiLCJpc1RleHROb2RlIiwiX2lzVkxpc3QiLCJlbnN1cmVDdG9yIiwiY29tcCIsImJhc2UiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwiJG9uY2UiLCIkb24iLCJyZW1vdmUkMSIsIiRvZmYiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCJvbGRMaXN0ZW5lcnMiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJyZXNvbHZlU2NvcGVkU2xvdHMiLCJhY3RpdmVJbnN0YW5jZSIsImlzSW5JbmFjdGl2ZVRyZWUiLCJfaW5hY3RpdmUiLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGlyZWN0IiwiX2RpcmVjdEluYWN0aXZlIiwiJGNoaWxkcmVuIiwiY2FsbEhvb2siLCJfaGFzSG9va0V2ZW50IiwiJGVtaXQiLCJhY3RpdmF0ZWRDaGlsZHJlbiIsIndhaXRpbmciLCJmbHVzaGluZyIsImZsdXNoU2NoZWR1bGVyUXVldWUiLCJ3YXRjaGVyIiwiYWN0aXZhdGVkUXVldWUiLCJ1cGRhdGVkUXVldWUiLCJjYWxsQWN0aXZhdGVkSG9va3MiLCJfd2F0Y2hlciIsIl9pc01vdW50ZWQiLCJjYWxsVXBkYXRlZEhvb2tzIiwidWlkJDEiLCJXYXRjaGVyIiwiZXhwT3JGbiIsImlzUmVuZGVyV2F0Y2hlciIsIl93YXRjaGVycyIsInVzZXIiLCJsYXp5Iiwic3luYyIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJleHByZXNzaW9uIiwic2VnbWVudHMiLCJwYXJzZVBhdGgiLCJjbGVhbnVwRGVwcyIsInF1ZXVlV2F0Y2hlciIsImV2YWx1YXRlIiwidGVhcmRvd24iLCJfaXNCZWluZ0Rlc3Ryb3llZCIsInNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiIsInByb3h5Iiwic291cmNlS2V5IiwiaW5pdFN0YXRlIiwicHJvcHNPcHRpb25zIiwiX3Byb3BLZXlzIiwibG9vcCIsImluaXRQcm9wcyIsImluaXRNZXRob2RzIiwiX2RhdGEiLCJnZXREYXRhIiwiaW5pdERhdGEiLCJ3YXRjaGVycyIsIl9jb21wdXRlZFdhdGNoZXJzIiwiaXNTU1IiLCJ1c2VyRGVmIiwiY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyIsImRlZmluZUNvbXB1dGVkIiwiaW5pdENvbXB1dGVkIiwiY3JlYXRlV2F0Y2hlciIsImluaXRXYXRjaCIsInNob3VsZENhY2hlIiwiY3JlYXRlQ29tcHV0ZWRHZXR0ZXIiLCIkd2F0Y2giLCJyZXNvbHZlSW5qZWN0IiwicHJvdmlkZUtleSIsIl9wcm92aWRlZCIsInByb3ZpZGVEZWZhdWx0IiwicmVuZGVyTGlzdCIsInJlbmRlclNsb3QiLCJmYWxsYmFjayIsImJpbmRPYmplY3QiLCJzY29wZWRTbG90Rm4iLCIkc2NvcGVkU2xvdHMiLCJzbG90Tm9kZXMiLCIkc2xvdHMiLCJfcmVuZGVyZWQiLCJyZXNvbHZlRmlsdGVyIiwiaXNLZXlOb3RNYXRjaCIsImV4cGVjdCIsImNoZWNrS2V5Q29kZXMiLCJldmVudEtleUNvZGUiLCJidWlsdEluS2V5Q29kZSIsImV2ZW50S2V5TmFtZSIsImJ1aWx0SW5LZXlOYW1lIiwibWFwcGVkS2V5Q29kZSIsImJpbmRPYmplY3RQcm9wcyIsImFzUHJvcCIsImlzU3luYyIsImRvbVByb3BzIiwicmVuZGVyU3RhdGljIiwiaXNJbkZvciIsIl9zdGF0aWNUcmVlcyIsInRyZWUiLCJtYXJrU3RhdGljIiwiX3JlbmRlclByb3h5IiwibWFya09uY2UiLCJtYXJrU3RhdGljTm9kZSIsImJpbmRPYmplY3RMaXN0ZW5lcnMiLCJvdXJzIiwiaW5zdGFsbFJlbmRlckhlbHBlcnMiLCJfbyIsIl9xIiwiX20iLCJfdSIsIl9nIiwiRnVuY3Rpb25hbFJlbmRlckNvbnRleHQiLCJjb250ZXh0Vm0iLCJfb3JpZ2luYWwiLCJpc0NvbXBpbGVkIiwibmVlZE5vcm1hbGl6YXRpb24iLCJpbmplY3Rpb25zIiwic2NvcGVkU2xvdHMiLCJjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0IiwibWVyZ2VQcm9wcyIsImNvbXBvbmVudFZOb2RlSG9va3MiLCJoeWRyYXRpbmciLCJwYXJlbnRFbG0iLCJyZWZFbG0iLCJfaXNEZXN0cm95ZWQiLCJrZWVwQWxpdmUiLCJtb3VudGVkTm9kZSIsInByZXBhdGNoIiwiX2lzQ29tcG9uZW50IiwiX3BhcmVudFZub2RlIiwiX3BhcmVudEVsbSIsIl9yZWZFbG0iLCJpbmxpbmVUZW1wbGF0ZSIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUiLCIkbW91bnQiLCJvbGRWbm9kZSIsInBhcmVudFZub2RlIiwicmVuZGVyQ2hpbGRyZW4iLCJoYXNDaGlsZHJlbiIsIl9yZW5kZXJDaGlsZHJlbiIsIl92bm9kZSIsIiRhdHRycyIsIiRsaXN0ZW5lcnMiLCJwcm9wS2V5cyIsIl9wYXJlbnRMaXN0ZW5lcnMiLCIkZm9yY2VVcGRhdGUiLCJ1cGRhdGVDaGlsZENvbXBvbmVudCIsImRlc3Ryb3kiLCJkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCIkZGVzdHJveSIsImhvb2tzVG9NZXJnZSIsImNyZWF0ZUNvbXBvbmVudCIsImJhc2VDdG9yIiwiY2lkIiwiZXJyb3JDb21wIiwicmVzb2x2ZWQiLCJsb2FkaW5nIiwibG9hZGluZ0NvbXAiLCJjb250ZXh0cyIsImZvcmNlUmVuZGVyIiwicmVhc29uIiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiY3JlYXRlQXN5bmNQbGFjZWhvbGRlciIsInJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMiLCJtb2RlbCIsInRyYW5zZm9ybU1vZGVsIiwiZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSIsInJlbmRlckNvbnRleHQiLCJ2bm9kZXMiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibmF0aXZlT24iLCJhYnN0cmFjdCIsImluc3RhbGxDb21wb25lbnRIb29rcyIsIlNJTVBMRV9OT1JNQUxJWkUiLCJBTFdBWVNfTk9STUFMSVpFIiwibm9ybWFsaXphdGlvblR5cGUiLCJhbHdheXNOb3JtYWxpemUiLCJzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiIsImFwcGx5TlMiLCJjbGFzcyIsInJlZ2lzdGVyRGVlcEJpbmRpbmdzIiwiX2NyZWF0ZUVsZW1lbnQiLCJ1aWQkMyIsInN1cGVyT3B0aW9ucyIsIm1vZGlmaWVkT3B0aW9ucyIsIm1vZGlmaWVkIiwibGF0ZXN0IiwiZXh0ZW5kZWQiLCJleHRlbmRPcHRpb25zIiwic2VhbGVkIiwic2VhbGVkT3B0aW9ucyIsImRlZHVwZSIsInJlc29sdmVNb2RpZmllZE9wdGlvbnMiLCJjb21wb25lbnRzIiwiVnVlIiwiX2luaXQiLCJpbml0RXh0ZW5kIiwiU3VwZXIiLCJTdXBlcklkIiwiY2FjaGVkQ3RvcnMiLCJfQ3RvciIsIlN1YiIsIkNvbXAiLCJpbml0UHJvcHMkMSIsImluaXRDb21wdXRlZCQxIiwibWl4aW4iLCJ1c2UiLCJnZXRDb21wb25lbnROYW1lIiwibWF0Y2hlcyIsInBhdHRlcm4iLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJjYWNoZWROb2RlIiwicHJ1bmVDYWNoZUVudHJ5IiwiY3VycmVudCIsImNhY2hlZCQkMSIsIl91aWQiLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJfY29tcG9uZW50VGFnIiwiaW5pdEludGVybmFsQ29tcG9uZW50IiwiJHJlZnMiLCJpbml0TGlmZWN5Y2xlIiwiaW5pdEV2ZW50cyIsInBhcmVudERhdGEiLCJpbml0UmVuZGVyIiwiaW5pdEluamVjdGlvbnMiLCJpbml0UHJvdmlkZSIsImluaXRNaXhpbiIsImRhdGFEZWYiLCJwcm9wc0RlZiIsIiRkZWxldGUiLCJpbW1lZGlhdGUiLCJzdGF0ZU1peGluIiwiaG9va1JFIiwiY2JzIiwiaSQxIiwiZXZlbnRzTWl4aW4iLCJfdXBkYXRlIiwicHJldkVsIiwiJGVsIiwicHJldlZub2RlIiwicHJldkFjdGl2ZUluc3RhbmNlIiwiX19wYXRjaF9fIiwiX192dWVfXyIsImxpZmVjeWNsZU1peGluIiwiJG5leHRUaWNrIiwiX3JlbmRlciIsInJlbmRlck1peGluIiwicGF0dGVyblR5cGVzIiwiYnVpbHRJbkNvbXBvbmVudHMiLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiZXhjbHVkZSIsImNyZWF0ZWQiLCJkZXN0cm95ZWQiLCJtb3VudGVkIiwidGhpcyQxIiwiY29uZmlnRGVmIiwidXRpbCIsInBsdWdpbiIsImluc3RhbGxlZFBsdWdpbnMiLCJfaW5zdGFsbGVkUGx1Z2lucyIsImluc3RhbGwiLCJpbml0VXNlIiwiaW5pdE1peGluJDEiLCJkZWZpbml0aW9uIiwiaW5pdEFzc2V0UmVnaXN0ZXJzIiwiaW5pdEdsb2JhbEFQSSIsImFjY2VwdFZhbHVlIiwiaXNFbnVtZXJhdGVkQXR0ciIsImlzQm9vbGVhbkF0dHIiLCJ4bGlua05TIiwiaXNYbGluayIsImdldFhsaW5rUHJvcCIsImlzRmFsc3lBdHRyVmFsdWUiLCJnZW5DbGFzc0ZvclZub2RlIiwibWVyZ2VDbGFzc0RhdGEiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInJlbmRlckNsYXNzIiwic3RyaW5naWZpZWQiLCJzdHJpbmdpZnlBcnJheSIsInN0cmluZ2lmeU9iamVjdCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJpc1RleHRJbnB1dFR5cGUiLCJub2RlT3BzIiwibXVsdGlwbGUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVDb21tZW50IiwibmV3Tm9kZSIsInJlZmVyZW5jZU5vZGUiLCJzZXRUZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJyZWdpc3RlclJlZiIsImlzUmVtb3ZhbCIsInJlZkluRm9yIiwiZW1wdHlOb2RlIiwic2FtZVZub2RlIiwidHlwZUEiLCJ0eXBlQiIsInNhbWVJbnB1dFR5cGUiLCJjcmVhdGVLZXlUb09sZElkeCIsImJlZ2luSWR4IiwiZW5kSWR4IiwidXBkYXRlRGlyZWN0aXZlcyIsIm9sZERpciIsImlzQ3JlYXRlIiwiaXNEZXN0cm95Iiwib2xkRGlycyIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMkMSIsIm5ld0RpcnMiLCJkaXJzV2l0aEluc2VydCIsImRpcnNXaXRoUG9zdHBhdGNoIiwiY2FsbEhvb2skMSIsImNvbXBvbmVudFVwZGF0ZWQiLCJjYWxsSW5zZXJ0IiwiZW1wdHlNb2RpZmllcnMiLCJtb2RpZmllcnMiLCJnZXRSYXdEaXJOYW1lIiwicmF3TmFtZSIsImJhc2VNb2R1bGVzIiwidXBkYXRlQXR0cnMiLCJpbmhlcml0QXR0cnMiLCJvbGRBdHRycyIsInNldEF0dHIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsImJhc2VTZXRBdHRyIiwic2V0QXR0cmlidXRlTlMiLCJfX2llcGgiLCJibG9ja2VyIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwidXBkYXRlQ2xhc3MiLCJvbGREYXRhIiwiY2xzIiwidHJhbnNpdGlvbkNsYXNzIiwiX3RyYW5zaXRpb25DbGFzc2VzIiwiX3ByZXZDbGFzcyIsInRhcmdldCQxIiwiUkFOR0VfVE9LRU4iLCJDSEVDS0JPWF9SQURJT19UT0tFTiIsImFkZCQxIiwiX3dpdGhUYXNrIiwib25jZUhhbmRsZXIiLCJyZW1vdmUkMiIsImNyZWF0ZU9uY2VIYW5kbGVyIiwidXBkYXRlRE9NTGlzdGVuZXJzIiwibm9ybWFsaXplRXZlbnRzIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsIl92YWx1ZSIsInN0ckN1ciIsInNob3VsZFVwZGF0ZVZhbHVlIiwiY2hlY2tWYWwiLCJub3RJbkZvY3VzIiwiaXNOb3RJbkZvY3VzQW5kRGlydHkiLCJfdk1vZGlmaWVycyIsImlzRGlydHlXaXRoTW9kaWZpZXJzIiwicGFyc2VTdHlsZVRleHQiLCJwcm9wZXJ0eURlbGltaXRlciIsIm5vcm1hbGl6ZVN0eWxlRGF0YSIsIm5vcm1hbGl6ZVN0eWxlQmluZGluZyIsInN0YXRpY1N0eWxlIiwiYmluZGluZ1N0eWxlIiwiZW1wdHlTdHlsZSIsImNzc1ZhclJFIiwiaW1wb3J0YW50UkUiLCJzZXRQcm9wIiwic2V0UHJvcGVydHkiLCJub3JtYWxpemVkTmFtZSIsInZlbmRvck5hbWVzIiwiY2FwTmFtZSIsInVwZGF0ZVN0eWxlIiwib2xkU3RhdGljU3R5bGUiLCJvbGRTdHlsZUJpbmRpbmciLCJub3JtYWxpemVkU3R5bGUiLCJvbGRTdHlsZSIsIm5ld1N0eWxlIiwiY2hlY2tDaGlsZCIsInN0eWxlRGF0YSIsImdldFN0eWxlIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInRhciIsInJlc29sdmVUcmFuc2l0aW9uIiwiYXV0b0Nzc1RyYW5zaXRpb24iLCJlbnRlckNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImxlYXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwiaGFzVHJhbnNpdGlvbiIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJ0cmFuc2l0aW9uUHJvcCIsInRyYW5zaXRpb25FbmRFdmVudCIsImFuaW1hdGlvblByb3AiLCJhbmltYXRpb25FbmRFdmVudCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ud2Via2l0dHJhbnNpdGlvbmVuZCIsIm9uYW5pbWF0aW9uZW5kIiwib253ZWJraXRhbmltYXRpb25lbmQiLCJyYWYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJuZXh0RnJhbWUiLCJhZGRUcmFuc2l0aW9uQ2xhc3MiLCJ0cmFuc2l0aW9uQ2xhc3NlcyIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImV4cGVjdGVkVHlwZSIsImdldFRyYW5zaXRpb25JbmZvIiwicHJvcENvdW50IiwiZW5kZWQiLCJvbkVuZCIsInRyYW5zZm9ybVJFIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZHVyYXRpb25zIiwidG9NcyIsInRvZ2dsZURpc3BsYXkiLCJfbGVhdmVDYiIsImNhbmNlbGxlZCIsInRyYW5zaXRpb24iLCJfZW50ZXJDYiIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYmVmb3JlRW50ZXIiLCJhZnRlckVudGVyIiwiZW50ZXJDYW5jZWxsZWQiLCJiZWZvcmVBcHBlYXIiLCJhcHBlYXIiLCJhZnRlckFwcGVhciIsImFwcGVhckNhbmNlbGxlZCIsImR1cmF0aW9uIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInRvQ2xhc3MiLCJiZWZvcmVFbnRlckhvb2siLCJlbnRlckhvb2siLCJhZnRlckVudGVySG9vayIsImVudGVyQ2FuY2VsbGVkSG9vayIsImV4cGxpY2l0RW50ZXJEdXJhdGlvbiIsImV4cGVjdHNDU1MiLCJ1c2VyV2FudHNDb250cm9sIiwiZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCIsInBlbmRpbmdOb2RlIiwiX3BlbmRpbmciLCJpc1ZhbGlkRHVyYXRpb24iLCJsZWF2ZSIsInJtIiwiYmVmb3JlTGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiZXhwbGljaXRMZWF2ZUR1cmF0aW9uIiwicGVyZm9ybUxlYXZlIiwiaW52b2tlckZucyIsIl9lbnRlciIsInBhdGNoIiwiYmFja2VuZCIsInJlbW92ZU5vZGUiLCJjcmVhdGVFbG0iLCJpbnNlcnRlZFZub2RlUXVldWUiLCJuZXN0ZWQiLCJvd25lckFycmF5IiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJpbm5lck5vZGUiLCJhY3RpdmF0ZSIsInJlYWN0aXZhdGVDb21wb25lbnQiLCJzZXRTY29wZSIsImNyZWF0ZUNoaWxkcmVuIiwiaW52b2tlQ3JlYXRlSG9va3MiLCJwZW5kaW5nSW5zZXJ0IiwiaXNQYXRjaGFibGUiLCJyZWYkJDEiLCJhbmNlc3RvciIsImFkZFZub2RlcyIsInN0YXJ0SWR4IiwiaW52b2tlRGVzdHJveUhvb2siLCJyZW1vdmVWbm9kZXMiLCJjaCIsInJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2siLCJjaGlsZEVsbSIsImNyZWF0ZVJtQ2IiLCJmaW5kSWR4SW5PbGQiLCJvbGRDaCIsInBhdGNoVm5vZGUiLCJyZW1vdmVPbmx5IiwiaHlkcmF0ZSIsIm5ld0NoIiwib2xkS2V5VG9JZHgiLCJpZHhJbk9sZCIsInZub2RlVG9Nb3ZlIiwib2xkU3RhcnRJZHgiLCJuZXdTdGFydElkeCIsIm9sZEVuZElkeCIsIm9sZFN0YXJ0Vm5vZGUiLCJvbGRFbmRWbm9kZSIsIm5ld0VuZElkeCIsIm5ld1N0YXJ0Vm5vZGUiLCJuZXdFbmRWbm9kZSIsImNhbk1vdmUiLCJ1cGRhdGVDaGlsZHJlbiIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJpc1JlbmRlcmVkTW9kdWxlIiwiaW5WUHJlIiwicHJlIiwiaGFzQ2hpbGROb2RlcyIsImNoaWxkcmVuTWF0Y2giLCJmdWxsSW52b2tlIiwiaXNJbml0aWFsUGF0Y2giLCJpc1JlYWxFbGVtZW50Iiwib2xkRWxtIiwicGFyZW50RWxtJDEiLCJwYXRjaGFibGUiLCJpJDIiLCJjcmVhdGVQYXRjaEZ1bmN0aW9uIiwidm1vZGVsIiwiZGlyZWN0aXZlIiwiX3ZPcHRpb25zIiwic2V0U2VsZWN0ZWQiLCJnZXRWYWx1ZSIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJwcmV2T3B0aW9ucyIsImN1ck9wdGlvbnMiLCJoYXNOb01hdGNoaW5nT3B0aW9uIiwiYWN0dWFsbHlTZXRTZWxlY3RlZCIsImlzTXVsdGlwbGUiLCJsb2NhdGVOb2RlIiwicGxhdGZvcm1EaXJlY3RpdmVzIiwidHJhbnNpdGlvbiQkMSIsIm9yaWdpbmFsRGlzcGxheSIsIl9fdk9yaWdpbmFsRGlzcGxheSIsInVuYmluZCIsInRyYW5zaXRpb25Qcm9wcyIsImdldFJlYWxDaGlsZCIsImNvbXBPcHRpb25zIiwiZXh0cmFjdFRyYW5zaXRpb25EYXRhIiwicmF3Q2hpbGQiLCJUcmFuc2l0aW9uIiwiaGFzUGFyZW50VHJhbnNpdGlvbiIsIl9sZWF2aW5nIiwib2xkUmF3Q2hpbGQiLCJvbGRDaGlsZCIsImlzU2FtZUNoaWxkIiwiZGVsYXllZExlYXZlIiwibW92ZUNsYXNzIiwiY2FsbFBlbmRpbmdDYnMiLCJfbW92ZUNiIiwicmVjb3JkUG9zaXRpb24iLCJuZXdQb3MiLCJhcHBseVRyYW5zbGF0aW9uIiwib2xkUG9zIiwiZHgiLCJkeSIsIm1vdmVkIiwiV2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwicGxhdGZvcm1Db21wb25lbnRzIiwiVHJhbnNpdGlvbkdyb3VwIiwicHJldkNoaWxkcmVuIiwicmF3Q2hpbGRyZW4iLCJ0cmFuc2l0aW9uRGF0YSIsImtlcHQiLCJyZW1vdmVkIiwiYyQxIiwiYmVmb3JlVXBkYXRlIiwidXBkYXRlZCIsImhhc01vdmUiLCJfcmVmbG93IiwiX2hhc01vdmUiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJtb3VudENvbXBvbmVudCIsIkNhbmNlbFRva2VuIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsInRocm93SWZSZXF1ZXN0ZWQiLCJiYXNlVVJMIiwicmVsYXRpdmVVUkwiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNDYW5jZWwiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJlamVjdCIsImV4cGlyZXMiLCJzZWN1cmUiLCJjb29raWUiLCJ0b0dNVFN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsImNoYXJzIiwiRSIsImNoYXJDb2RlIiwib3V0cHV0IiwiaWR4Iiwib3JpZ2luVVJMIiwibXNpZSIsInVybFBhcnNpbmdOb2RlIiwicmVzb2x2ZVVSTCIsImhvc3QiLCJob3N0bmFtZSIsInBhdGhuYW1lIiwibG9jYXRpb24iLCJyZXF1ZXN0VVJMIiwicGFyc2VkIiwiaWdub3JlRHVwbGljYXRlT2YiLCJlbmNvZGUiLCJzZXJpYWxpemVkUGFyYW1zIiwidG9JU09TdHJpbmciLCJkaXNwYXRjaFJlcXVlc3QiLCJBeGlvcyIsImluc3RhbmNlQ29uZmlnIiwiaW50ZXJjZXB0b3JzIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsInJlYWRGbG9hdExFIiwiaXNTbG93QnVmZmVyIiwiX2lzQnVmZmVyIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiYXhpb3MiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsIl92dWUyIiwiX0VtYmVkSXRlbTIiLCJ1cmxSZWdleCIsIlVybEVtYmVkcyIsIl9leHRlbmRzIiwicmVnaXN0ZXJUeXBlTGlzdGVuZXIiLCJyZWdpc3RlclBhc3RlTGlzdGVuZXIiLCJuZXdEZWx0YSIsImJlZm9yZUxpbmsiLCJ1cmxFbWJlZCIsImJ1aWxkVXJsRW1iZWQiLCJjaGVja1RleHRGb3JVcmwiLCJzZWwiLCJzdGVwc0JhY2siLCJ0ZXh0VG9VcmwiLCJhZGRNZXRhSW5mbyIsImdldE1ldGFJbmZvIiwiZW1iZWRzIiwiZW1iZWREaXYiLCJyZXF1ZXN0VXJsIiwibWV0YUFwaSIsIl9heGlvczIiLCJpc0xFIiwiYjY0IiwicGxhY2VIb2xkZXJzQ291bnQiLCJ0b0J5dGVBcnJheSIsInBsYWNlSG9sZGVycyIsIkFyciIsIkwiLCJyZXZMb29rdXAiLCJmcm9tQnl0ZUFycmF5IiwidWludDgiLCJleHRyYUJ5dGVzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwibnVtIiwiYmFzZTY0IiwiaWVlZTc1NCIsImtNYXhMZW5ndGgiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwiY3JlYXRlQnVmZmVyIiwiZW5jb2RpbmdPck9mZnNldCIsImFsbG9jVW5zYWZlIiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheUJ1ZmZlciIsImVuY29kaW5nIiwiaXNFbmNvZGluZyIsImZyb21TdHJpbmciLCJjaGVja2VkIiwiZnJvbU9iamVjdCIsImFzc2VydFNpemUiLCJzaXplIiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJzd2FwIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJidWYiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJoZXhXcml0ZSIsInN0ckxlbiIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInVuaXRzIiwiaGkiLCJsbyIsInV0ZjE2bGVUb0J5dGVzIiwiYmFzZTY0U2xpY2UiLCJ1dGY4U2xpY2UiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJmb28iLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJzcGVjaWVzIiwiYWxsb2NVbnNhZmVTbG93Iiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiaGV4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJlcXVhbHMiLCJpbnNwZWN0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsInRvSlNPTiIsInRvSGV4IiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJJTlZBTElEX0JBU0U2NF9SRSIsImxlYWRTdXJyb2dhdGUiLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJkc3QiLCJfcXVpbGwiLCJVcmxFbWJlZCIsImluc2VydEFkamFjZW50SFRNTCIsInJlZ0V4cCIsIiRyZSIsIk9wIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5Nb2R1bGUiLCJydW50aW1lIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiR2VuZXJhdG9yIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiYXdyYXAiLCJfX2F3YWl0IiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsImFzeW5jIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsIkNvbnRleHQiLCJyZXNldCIsInNraXBUZW1wUmVzZXQiLCJzZW50IiwiX3NlbnQiLCJkZWxlZ2F0ZSIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJjb21wbGV0aW9uIiwicnZhbCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiZXhjZXB0aW9uIiwibG9jIiwiY2F1Z2h0IiwidHJ5TG9jIiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWJydXB0IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJhZnRlckxvYyIsImZpbmlzaCIsImNhdGNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHJvdG9HZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJfaW52b2tlIiwic3RhdGUiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJyZXR1cm4iLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiaXRlcmF0b3JNZXRob2QiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiJHRhc2siLCJNU0lFIiwidGltZSIsImJvdW5kQXJncyIsIm1pY3JvdGFzayIsIk9CU0VSVkFCTEUiLCJjbGVhbnVwU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uIiwiY2xlYW51cCIsInN1YnNjcmlwdGlvbkNsb3NlZCIsImNsb3NlU3Vic2NyaXB0aW9uIiwiU3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlciIsIlN1YnNjcmlwdGlvbk9ic2VydmVyIiwidW5zdWJzY3JpYmUiLCIkT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIm9ic2VydmFibGUiLCJPYnNlcnZhYmxlIiwiYXNhcCIsIiRtZXRhZGF0YSIsInRvTWV0YUtleSIsIm9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEiLCJtZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsIm9yZGluYXJ5SGFzT3duTWV0YWRhdGEiLCJoYXNPd25NZXRhZGF0YSIsIm9yZGluYXJ5SGFzTWV0YWRhdGEiLCJoYXNNZXRhZGF0YSIsIm9yZGluYXJ5T3duTWV0YWRhdGFLZXlzIiwiZ2V0T3duTWV0YWRhdGFLZXlzIiwib3JkaW5hcnlHZXRPd25NZXRhZGF0YSIsImdldE93bk1ldGFkYXRhIiwib3JkaW5hcnlNZXRhZGF0YUtleXMiLCJvS2V5cyIsInBLZXlzIiwiZ2V0TWV0YWRhdGFLZXlzIiwib3JkaW5hcnlHZXRNZXRhZGF0YSIsImdldE1ldGFkYXRhIiwiZGVsZXRlTWV0YWRhdGEiLCJkZWZpbmVNZXRhZGF0YSIsInBlcmZvcm0iLCJ0cnkiLCJwcm9taXNlUmVzb2x2ZSIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJzaWduYml0IiwidW11bGgiLCJ1IiwiJHUiLCIkdiIsInUwIiwidjAiLCJ1MSIsInQiLCJERUdfUEVSX1JBRCIsIlBJIiwicmFkaWFucyIsImRlZ3JlZXMiLCJSQURfUEVSX0RFRyIsImltdWxoIiwiaXN1YmgiLCJ4MCIsInkwIiwiJHgwIiwiJHkwIiwiaWFkZGgiLCJmc2NhbGUiLCJjbGFtcCIsImxvd2VyIiwidXBwZXIiLCJpc0Vycm9yIiwiX19sb29rdXBTZXR0ZXJfXyIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2RlZmluZUdldHRlcl9fIiwiJHZhbHVlcyIsImNyZWF0ZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImdldERlc2MiLCJnZXRGbGFncyIsIlJlZ0V4cFByb3RvIiwiJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yIiwicmVnZXhwIiwiX3IiLCJtYXRjaEFsbCIsInJ4IiwiJHBhZCIsInBhZEVuZCIsInBhZFN0YXJ0IiwiJGF0IiwiYXQiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJmbGF0dGVuIiwiZGVwdGhBcmciLCJmbGF0TWFwIiwiJGluY2x1ZGVzIiwic2V0UHJvdG8iLCJwcm9wZXJ0eUtleSIsIlYiLCJleGlzdGluZ0Rlc2NyaXB0b3IiLCJvd25EZXNjIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiJGlzRXh0ZW5zaWJsZSIsIkVudW1lcmF0ZSIsImVudW1lcmF0ZSIsImRlbGV0ZVByb3BlcnR5IiwickNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsInJBcHBseSIsImZBcHBseSIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCIkaXNWaWV3IiwiZmluYWwiLCJ2aWV3UyIsInZpZXdUIiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsIiRQcm9taXNlIiwiVVNFX05BVElWRSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0Iiwib2siLCJyZWFjdGlvbiIsImZhaWwiLCJvbkhhbmRsZVVuaGFuZGxlZCIsIm9uVW5oYW5kbGVkIiwidW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2FwYWJpbGl0eSIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiU1BMSVQiLCIkc3BsaXQiLCJfc3BsaXQiLCIkcHVzaCIsIk5QQ0ciLCJzZXBhcmF0b3IyIiwibGFzdExlbmd0aCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsIlNFQVJDSCIsIiRzZWFyY2giLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsIiRtYXRjaCIsIiRmbGFncyIsIiRSZWdFeHAiLCJyZTEiLCJyZTIiLCJDT1JSRUNUX05FVyIsInRpUkUiLCJwaVJFIiwiZmlVIiwiJGZpbmQiLCJmb3JjZWQiLCJORUdBVElWRV9aRVJPIiwiJGluZGV4T2YiLCIkcmVkdWNlIiwiJGV2ZXJ5IiwiJHNvbWUiLCIkZmlsdGVyIiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkc29ydCIsInVwVG8iLCJoaW50IiwiVE9fUFJJTUlUSVZFIiwiRGF0ZVByb3RvIiwiJHRvSVNPU3RyaW5nIiwibHoiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01pbGxpc2Vjb25kcyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJwdiIsIiRzdGFydHNXaXRoIiwiJGVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJjb2RlUG9pbnRBdCIsInBvaW50IiwiY2FsbFNpdGUiLCJ0cGwiLCIkZnJvbUNvZGVQb2ludCIsImZyb21Db2RlUG9pbnQiLCJ0cnVuYyIsInRhbmgiLCJzaW5oIiwibG9nMiIsImxvZzEwIiwiTE9HMTBFIiwiJGltdWwiLCJpbXVsIiwieG4iLCJ5biIsInhsIiwieWwiLCJoeXBvdCIsInZhbHVlMSIsInZhbHVlMiIsImRpdiIsInN1bSIsImxhcmciLCJzcXJ0IiwiY29zaCIsImNsejMyIiwiTE9HMkUiLCJjYnJ0IiwiJGF0YW5oIiwiYXRhbmgiLCIkYXNpbmgiLCJhc2luaCIsIiRhY29zaCIsImFjb3NoIiwiTUlOX1NBRkVfSU5URUdFUiIsIk1BWF9TQUZFX0lOVEVHRVIiLCJpc0ludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwiX2lzRmluaXRlIiwiJGZhaWxzIiwiYU51bWJlclZhbHVlIiwiJHRvUHJlY2lzaW9uIiwidG9QcmVjaXNpb24iLCJwcmVjaXNpb24iLCIkdG9GaXhlZCIsInRvRml4ZWQiLCJFUlJPUiIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJudW1Ub1N0cmluZyIsImFjYyIsImZyYWN0aW9uRGlnaXRzIiwieiIsIiROdW1iZXIiLCJCUk9LRU5fQ09GIiwiVFJJTSIsImFyZ3VtZW50IiwidGhpcmQiLCJtYXhDb2RlIiwiZGlnaXRzIiwiSEFTX0lOU1RBTkNFIiwiRnVuY3Rpb25Qcm90byIsIkZQcm90byIsIm5hbWVSRSIsIiRpc1NlYWxlZCIsIiRpc0Zyb3plbiIsIiRzZWFsIiwiJGZyZWV6ZSIsIiRnZXRQcm90b3R5cGVPZiIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiUU9iamVjdCIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJzeW0iLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJmb3IiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCIkcmVwbGFjZXIiLCJfYmFiZWxQb2x5ZmlsbCIsIkRFRklORV9QUk9QRVJUWSIsInVybEVtYmVkTW9kdWxlIiwiX2luZGV4IiwiYmxvdHMvdXJsRW1iZWQiLCJtb2R1bGVzL3VybEVtYmVkcyIsInVybEVtYmVkcyJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsRUFBQUMsR0FDQSxvQkFBQUMsU0FBQSxpQkFBQUMsT0FDQUEsT0FBQUQsUUFBQUQsU0FDQSxzQkFBQUcsZUFBQUMsSUFDQUQsVUFBQUgsT0FDQSxDQUNBLElBQUFLLEVBQUFMLElBQ0EsUUFBQU0sS0FBQUQsR0FBQSxpQkFBQUosZ0JBQUFGLEdBQUFPLEdBQUFELEVBQUFDLElBUEEsQ0FTQ0MsT0FBQSxXQUNELG1CQ1RBLElBQUFDLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFULFFBR0EsSUFBQUMsRUFBQU0sRUFBQUUsSUFDQUosRUFBQUksRUFDQUMsR0FBQSxFQUNBVixZQVVBLE9BTkFXLEVBQUFGLEdBQUFHLEtBQUFYLEVBQUFELFFBQUFDLElBQUFELFFBQUFRLEdBR0FQLEVBQUFTLEdBQUEsRUFHQVQsRUFBQUQsUUEyQ0EsT0F0Q0FRLEVBQUFLLEVBQUFGLEVBR0FILEVBQUFNLEVBQUFQLEVBR0FDLEVBQUFPLEVBQUEsU0FBQWYsRUFBQWdCLEVBQUFDLEdBQ0FULEVBQUFVLEVBQUFsQixF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QUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsSUFDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQVAsRUFBQUQsUUFBQVEsRUFBQSwrQ0M1TEEsR0FOQUEsRUFBQSxLQUVBQSxFQUFBLEtBRUFBLEVBQUEsS0FFQTBCLEVBQUFvbEgsZUFDQSxVQUFBOXFHLE1BQUEsa0RBRUF0YSxFQUFBb2xILGdCQUFBLEVBRUEsSUFBQUMsRUFBQSxpQkFDQSxTQUFBcm5ILEVBQUFnRixFQUFBeEMsRUFBQWpCLEdBQ0F5RCxFQUFBeEMsSUFBQXZCLE9BQUFvbUgsR0FBQXJpSCxFQUFBeEMsR0FDQTZULFVBQUEsRUFDQWxWLGNBQUEsRUFDQUksVUFJQXZCLEVBQUF5RixPQUFBN0QsVUFBQSxhQUFBbTRHLFVBQ0EvNUcsRUFBQXlGLE9BQUE3RCxVQUFBLGNBQUFrNEcsUUFFQSxnTUFBQS96RyxNQUFBLEtBQUFpQixRQUFBLFNBQUF4RSxNQUNBQSxJQUFBeEMsRUFBQWlRLE1BQUF6TixFQUFBaUIsU0FBQS9DLEtBQUFrRyxRQUFBcEUsNElDMUJBbEMsRUFBQSxLQUNBLFFBQUFBLEVBQUEsVUFDQUEsRUFBQSwyREFHRTBpRyxxQkFDQXNrQix1RENORixNQUFBdmEsRUFBQXpzRyxFQUFBLHlDQUNBaW5ILEVBQUFqbkgsRUFBQSxLQUNBOCtDLEVBQUFuekMsUUFBTXl5QixVQUNKOG9GLGlCQUFBRCxFQUFBdmtCLFNBQ0F5a0Isb0JBQUFGLEVBQUFELGlCQUlVLElBQUFsb0UsRUFBQW56QyxRQUFVLFdBQ3BCaTlCLE1BQU8sT0FDUHpvQyxTQUNFaW5ILFdBQ0UvakIsUUFBUywwQkFHYnY1RCxZQUFhIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSB7XG5cdFx0dmFyIGEgPSBmYWN0b3J5KCk7XG5cdFx0Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBleHBvcnRzIDogcm9vdClbaV0gPSBhW2ldO1xuXHR9XG59KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNDMyKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IEZ1bmN0aW9uW1RPX1NUUklOR107XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBpc0J1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjMnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICBzY3JpcHRFeHBvcnRzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXG4gIHNoYWRvd01vZGUgLyogdnVlLWNsaSBvbmx5ICovXG4pIHtcbiAgc2NyaXB0RXhwb3J0cyA9IHNjcmlwdEV4cG9ydHMgfHwge31cblxuICAvLyBFUzYgbW9kdWxlcyBpbnRlcm9wXG4gIHZhciB0eXBlID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICBpZiAodHlwZSA9PT0gJ29iamVjdCcgfHwgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNjcmlwdEV4cG9ydHMgPSBzY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgfVxuXG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iLCJ2YXIgTWFwID0gcmVxdWlyZSgnLi9lczYubWFwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpO1xudmFyIHN0b3JlID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKCkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldE1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgaWYgKG1ldGFkYXRhTWFwKSBtZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24gKE8pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaCAoZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsIi8qKlxuICogVHJhbnNsYXRlcyB0aGUgbGlzdCBmb3JtYXQgcHJvZHVjZWQgYnkgY3NzLWxvYWRlciBpbnRvIHNvbWV0aGluZ1xuICogZWFzaWVyIHRvIG1hbmlwdWxhdGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAocGFyZW50SWQsIGxpc3QpIHtcbiAgdmFyIHN0eWxlcyA9IFtdXG4gIHZhciBuZXdTdHlsZXMgPSB7fVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV1cbiAgICB2YXIgaWQgPSBpdGVtWzBdXG4gICAgdmFyIGNzcyA9IGl0ZW1bMV1cbiAgICB2YXIgbWVkaWEgPSBpdGVtWzJdXG4gICAgdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM11cbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGlkOiBwYXJlbnRJZCArICc6JyArIGksXG4gICAgICBjc3M6IGNzcyxcbiAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgIHNvdXJjZU1hcDogc291cmNlTWFwXG4gICAgfVxuICAgIGlmICghbmV3U3R5bGVzW2lkXSkge1xuICAgICAgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHsgaWQ6IGlkLCBwYXJ0czogW3BhcnRdIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3R5bGVzXG59XG4iLCIvKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4gIE1vZGlmaWVkIGJ5IEV2YW4gWW91IEB5eXg5OTA4MDNcbiovXG5cbmltcG9ydCBsaXN0VG9TdHlsZXMgZnJvbSAnLi9saXN0VG9TdHlsZXMnXG5cbnZhciBoYXNEb2N1bWVudCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcblxuaWYgKHR5cGVvZiBERUJVRyAhPT0gJ3VuZGVmaW5lZCcgJiYgREVCVUcpIHtcbiAgaWYgKCFoYXNEb2N1bWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAndnVlLXN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50LiAnICtcbiAgICBcIlVzZSB7IHRhcmdldDogJ25vZGUnIH0gaW4geW91ciBXZWJwYWNrIGNvbmZpZyB0byBpbmRpY2F0ZSBhIHNlcnZlci1yZW5kZXJpbmcgZW52aXJvbm1lbnQuXCJcbiAgKSB9XG59XG5cbi8qXG50eXBlIFN0eWxlT2JqZWN0ID0ge1xuICBpZDogbnVtYmVyO1xuICBwYXJ0czogQXJyYXk8U3R5bGVPYmplY3RQYXJ0PlxufVxuXG50eXBlIFN0eWxlT2JqZWN0UGFydCA9IHtcbiAgY3NzOiBzdHJpbmc7XG4gIG1lZGlhOiBzdHJpbmc7XG4gIHNvdXJjZU1hcDogP3N0cmluZ1xufVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0gey8qXG4gIFtpZDogbnVtYmVyXToge1xuICAgIGlkOiBudW1iZXIsXG4gICAgcmVmczogbnVtYmVyLFxuICAgIHBhcnRzOiBBcnJheTwob2JqPzogU3R5bGVPYmplY3RQYXJ0KSA9PiB2b2lkPlxuICB9XG4qL31cblxudmFyIGhlYWQgPSBoYXNEb2N1bWVudCAmJiAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdKVxudmFyIHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsXG52YXIgc2luZ2xldG9uQ291bnRlciA9IDBcbnZhciBpc1Byb2R1Y3Rpb24gPSBmYWxzZVxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7fVxudmFyIG9wdGlvbnMgPSBudWxsXG52YXIgc3NySWRLZXkgPSAnZGF0YS12dWUtc3NyLWlkJ1xuXG4vLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbi8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcbnZhciBpc09sZElFID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL21zaWUgWzYtOV1cXGIvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRTdHlsZXNDbGllbnQgKHBhcmVudElkLCBsaXN0LCBfaXNQcm9kdWN0aW9uLCBfb3B0aW9ucykge1xuICBpc1Byb2R1Y3Rpb24gPSBfaXNQcm9kdWN0aW9uXG5cbiAgb3B0aW9ucyA9IF9vcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhwYXJlbnRJZCwgbGlzdClcbiAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzKVxuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcbiAgICB2YXIgbWF5UmVtb3ZlID0gW11cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV1cbiAgICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdXG4gICAgICBkb21TdHlsZS5yZWZzLS1cbiAgICAgIG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKVxuICAgIH1cbiAgICBpZiAobmV3TGlzdCkge1xuICAgICAgc3R5bGVzID0gbGlzdFRvU3R5bGVzKHBhcmVudElkLCBuZXdMaXN0KVxuICAgICAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXMgPSBbXVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldXG4gICAgICBpZiAoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgZG9tU3R5bGUucGFydHNbal0oKVxuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcyAvKiBBcnJheTxTdHlsZU9iamVjdD4gKi8pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXVxuICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdXG4gICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICBkb21TdHlsZS5yZWZzKytcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSlcbiAgICAgIH1cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0pKVxuICAgICAgfVxuICAgICAgaWYgKGRvbVN0eWxlLnBhcnRzLmxlbmd0aCA+IGl0ZW0ucGFydHMubGVuZ3RoKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLmxlbmd0aCA9IGl0ZW0ucGFydHMubGVuZ3RoXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYXJ0cyA9IFtdXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgcGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdKSlcbiAgICAgIH1cbiAgICAgIHN0eWxlc0luRG9tW2l0ZW0uaWRdID0geyBpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50ICgpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJylcbiAgc3R5bGVFbGVtZW50LnR5cGUgPSAndGV4dC9jc3MnXG4gIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KVxuICByZXR1cm4gc3R5bGVFbGVtZW50XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmogLyogU3R5bGVPYmplY3RQYXJ0ICovKSB7XG4gIHZhciB1cGRhdGUsIHJlbW92ZVxuICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc3R5bGVbJyArIHNzcklkS2V5ICsgJ349XCInICsgb2JqLmlkICsgJ1wiXScpXG5cbiAgaWYgKHN0eWxlRWxlbWVudCkge1xuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgIC8vIGhhcyBTU1Igc3R5bGVzIGFuZCBpbiBwcm9kdWN0aW9uIG1vZGUuXG4gICAgICAvLyBzaW1wbHkgZG8gbm90aGluZy5cbiAgICAgIHJldHVybiBub29wXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhhcyBTU1Igc3R5bGVzIGJ1dCBpbiBkZXYgbW9kZS5cbiAgICAgIC8vIGZvciBzb21lIHJlYXNvbiBDaHJvbWUgY2FuJ3QgaGFuZGxlIHNvdXJjZSBtYXAgaW4gc2VydmVyLXJlbmRlcmVkXG4gICAgICAvLyBzdHlsZSB0YWdzIC0gc291cmNlIG1hcHMgaW4gPHN0eWxlPiBvbmx5IHdvcmtzIGlmIHRoZSBzdHlsZSB0YWcgaXNcbiAgICAgIC8vIGNyZWF0ZWQgYW5kIGluc2VydGVkIGR5bmFtaWNhbGx5LiBTbyB3ZSByZW1vdmUgdGhlIHNlcnZlciByZW5kZXJlZFxuICAgICAgLy8gc3R5bGVzIGFuZCBpbmplY3QgbmV3IG9uZXMuXG4gICAgICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgaWYgKGlzT2xkSUUpIHtcbiAgICAvLyB1c2Ugc2luZ2xldG9uIG1vZGUgZm9yIElFOS5cbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrK1xuICAgIHN0eWxlRWxlbWVudCA9IHNpbmdsZXRvbkVsZW1lbnQgfHwgKHNpbmdsZXRvbkVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKSlcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCBmYWxzZSlcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKVxuICB9IGVsc2Uge1xuICAgIC8vIHVzZSBtdWx0aS1zdHlsZS10YWcgbW9kZSBpbiBhbGwgb3RoZXIgY2FzZXNcbiAgICBzdHlsZUVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKVxuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZShvYmopXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmogLyogU3R5bGVPYmplY3RQYXJ0ICovKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcbiAgICAgICAgICBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuICAgICAgICAgIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKVxuICAgIH1cbiAgfVxufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgdGV4dFN0b3JlID0gW11cblxuICByZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudFxuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpXG4gIH1cbn0pKClcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGVFbGVtZW50LCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLmNzc1xuXG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKVxuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKVxuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGVFbGVtZW50LmNoaWxkTm9kZXNcbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSlcbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChjc3NOb2RlKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZUVsZW1lbnQsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzc1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWFcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXBcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKVxuICB9XG4gIGlmIChvcHRpb25zLnNzcklkKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShzc3JJZEtleSwgb2JqLmlkKVxuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCkge1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZGV2dG9vbHMvZG9jcy9qYXZhc2NyaXB0LWRlYnVnZ2luZ1xuICAgIC8vIHRoaXMgbWFrZXMgc291cmNlIG1hcHMgaW5zaWRlIHN0eWxlIHRhZ3Mgd29yayBwcm9wZXJseSBpbiBDaHJvbWVcbiAgICBjc3MgKz0gJ1xcbi8qIyBzb3VyY2VVUkw9JyArIHNvdXJjZU1hcC5zb3VyY2VzWzBdICsgJyAqLydcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuICAgIGNzcyArPSAnXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCwnICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArICcgKi8nXG4gIH1cblxuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzXG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpXG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKVxuICB9XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IGZyb206IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwRm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwRm4gPSBhcmd1bWVudHNbMV07XG4gICAgdmFyIG1hcHBpbmcsIEEsIG4sIGNiO1xuICAgIGFGdW5jdGlvbih0aGlzKTtcbiAgICBtYXBwaW5nID0gbWFwRm4gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAobWFwcGluZykgYUZ1bmN0aW9uKG1hcEZuKTtcbiAgICBpZiAoc291cmNlID09IHVuZGVmaW5lZCkgcmV0dXJuIG5ldyB0aGlzKCk7XG4gICAgQSA9IFtdO1xuICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICBuID0gMDtcbiAgICAgIGNiID0gY3R4KG1hcEZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgZnVuY3Rpb24gKG5leHRJdGVtKSB7XG4gICAgICAgIEEucHVzaChjYihuZXh0SXRlbSwgbisrKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgQS5wdXNoLCBBKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBBID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSBBW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19saWJyYXJ5JykgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcbnZhciBBQlYgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG4gIHZhciBmbnMgPSBleGVjKGRlZmluZWQsIFNZTUJPTCwgJydbS0VZXSk7XG4gIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgdmFyIHJ4Zm4gPSBmbnNbMV07XG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pKSB7XG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHt9KTtcbn07XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJxbC12aWRlby1lbWJlZFwiPlxuICAgIDxpZnJhbWUgOnNyYz1cImVtYmVkVXJsXCJcbiAgICAgIGZyYW1lYm9yZGVyPVwiMFwiXG4gICAgICB3ZWJraXRhbGxvd2Z1bGxzY3JlZW5cbiAgICAgIG1vemFsbG93ZnVsbHNjcmVlblxuICAgICAgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAncWwtdmlkZW8tZW1iZWQnLFxuICAgIHByb3BzOiB7XG4gICAgICB1cmw6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgfSxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICBkZWZhdWx0ICgpIHtcbiAgICAgICAgICByZXR1cm4ge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgIGVtYmVkVXJsICgpIHtcbiAgICAgICAgaWYgKHRoaXMubWV0YS5zaXRlX25hbWUgPT09ICdWaW1lbycpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5tZXRhLnBsYXllci51cmxcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tZXRhLnNpdGVfbmFtZSA9PT0gJ1lvdVR1YmUnKSB7XG4gICAgICAgICAgY29uc3QgdmlkZW9VcmwgPSB0aGlzLm1ldGEudXJsLnNwbGl0KCd3YXRjaD92PScpWzFdXG4gICAgICAgICAgcmV0dXJuIGBodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8ke3ZpZGVvVXJsfT9mZWF0dXJlPW9lbWJlZGBcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJydcbiAgICAgIH1cbiAgICB9XG4gIH1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbiAgLnFsLXZpZGVvLWVtYmVkIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy10b3A6IDU2JTtcblxuICAgIGlmcmFtZSB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IDA7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgYm9yZGVyOiAwO1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgcGFkZGluZzogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cbiAgfVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPHNwYW4gY2xhc3M9XCJxbC1lbWJlZC1zb3VyY2UtaW1hZ2VcIj5cbiAgICA8aW1nIDpzcmM9XCJpbWFnZVwiXG4gICAgICAgIEBlcnJvcj1cImhhc0Vycm9yID0gdHJ1ZVwiXG4gICAgICAgIHYtaWY9XCJpbWFnZSAmJiAhaGFzRXJyb3JcIiAvPlxuICAgIDxzcGFuIHYtZWxzZT5cbiAgICAgIDxzdmcgdmlld0JveD1cIjAgMCA4MCA4MFwiIHZlcnNpb249XCIxLjFcIj5cbiAgICAgICAgPGcgc3Ryb2tlPVwibm9uZVwiIHN0cm9rZS13aWR0aD1cIjFcIiBmaWxsPVwibm9uZVwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIj5cbiAgICAgICAgICA8cGF0aCBkPVwiTTgsOCBMMzYsOCBMMzYsMCBMOCwwIEMzLjYsMCAwLDMuNiAwLDggTDAsMzYgTDgsMzYgTDgsOCBMOCw4IFogTTMyLDQ0IEwxNiw2NCBMNjQsNjQgTDUyLDQ4IEw0My44OCw1OC44NCBMMzIsNDQgTDMyLDQ0IFogTTYwLDI2IEM2MCwyMi42OCA1Ny4zMiwyMCA1NCwyMCBDNTAuNjgsMjAgNDgsMjIuNjggNDgsMjYgQzQ4LDI5LjMyIDUwLjY4LDMyIDU0LDMyIEM1Ny4zMiwzMiA2MCwyOS4zMiA2MCwyNiBMNjAsMjYgWiBNNzIsMCBMNDQsMCBMNDQsOCBMNzIsOCBMNzIsMzYgTDgwLDM2IEw4MCw4IEM4MCwzLjYgNzYuNCwwIDcyLDAgTDcyLDAgWiBNNzIsNzIgTDQ0LDcyIEw0NCw4MCBMNzIsODAgQzc2LjQsODAgODAsNzYuNCA4MCw3MiBMODAsNDQgTDcyLDQ0IEw3Miw3MiBMNzIsNzIgWiBNOCw0NCBMMCw0NCBMMCw3MiBDMCw3Ni40IDMuNiw4MCA4LDgwIEwzNiw4MCBMMzYsNzIgTDgsNzIgTDgsNDQgTDgsNDQgWlwiIGlkPVwiU2hhcGVcIiBmaWxsPVwiY3VycmVudGNvbG9yXCI+PC9wYXRoPlxuICAgICAgICA8L2c+XG4gICAgICA8L3N2Zz5cbiAgICA8L3NwYW4+XG4gIDwvc3Bhbj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAncWwtZW1iZWQtc291cmNlLWltYWdlJyxcbiAgICBwcm9wczoge1xuICAgICAgaW1hZ2U6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgfVxuICAgIH0sXG4gICAgZGF0YSAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBoYXNFcnJvcjogZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gIH1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbiAgLnFsLWVtYmVkLXNvdXJjZS1pbWFnZSB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblxuICAgIGltZyAge1xuICAgICAgbWF4LWhlaWdodDogMTAwJTtcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgb2JqZWN0LWZpdDogY29udGFpbjtcbiAgICAgIGp1c3RpZnktc2VsZjogcmlnaHQ7XG4gICAgfVxuXG4gICAgc3BhbiB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgICAgbWluLWhlaWdodDogMTAwcHg7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBwYWRkaW5nOiAxMHB4O1xuXG4gICAgICBzdmcge1xuICAgICAgICB3aWR0aDogNjBweDtcbiAgICAgICAgaGVpZ2h0OiBhdXRvO1xuICAgICAgICBjb2xvcjogI2VlZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxzcGFuIGNsYXNzPVwicWwtZW1iZWQtc291cmNlLWljb25cIj5cbiAgICA8aW1nIDpzcmM9XCJpY29uXCJcbiAgICAgICAgQGVycm9yPVwiaGFzRXJyb3IgPSB0cnVlXCJcbiAgICAgICAgdi1pZj1cImljb24gJiYgIWhhc0Vycm9yXCIgLz5cbiAgICA8c3BhbiB2LWVsc2U+XG4gICAgICA8c3ZnIHZpZXdCb3g9XCIwIDAgOCAxMlwiIHZlcnNpb249XCIxLjFcIj5cbiAgICAgICAgPGcgc3Ryb2tlPVwibm9uZVwiIHN0cm9rZS13aWR0aD1cIjFcIiBmaWxsPVwibm9uZVwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIj5cbiAgICAgICAgICA8cG9seWdvbiBpZD1cIlNoYXBlXCIgZmlsbD1cImN1cnJlbnRjb2xvclwiIHBvaW50cz1cIjAgMTAuNTkgNC41OCA2IDAgMS40MSAxLjQxIDAgNy40MSA2IDEuNDEgMTJcIj48L3BvbHlnb24+XG4gICAgICAgIDwvZz5cbiAgICAgIDwvc3ZnPlxuICAgIDwvc3Bhbj5cbiAgPC9zcGFuPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6ICdxbC1lbWJlZC1zb3VyY2UtaWNvbicsXG4gICAgcHJvcHM6IHtcbiAgICAgIGljb246IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgfVxuICAgIH0sXG4gICAgZGF0YSAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBoYXNFcnJvcjogZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gIH1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbiAgLnFsLWVtYmVkLXNvdXJjZS1pY29uIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDNweDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6IDE2cHg7XG4gICAgaGVpZ2h0OiAxNnB4O1xuXG4gICAgaW1nIHtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIHNwYW4ge1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICM5OTk7XG4gICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICBjb2xvcjogI2ZmZjtcblxuICAgICAgc3ZnIHtcbiAgICAgICAgd2lkdGg6IDVweDtcbiAgICAgICAgaGVpZ2h0OiBhdXRvO1xuICAgICAgfVxuICAgIH1cbiAgfVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInFsLWxpbmstZW1iZWRcIj5cbiAgICA8YSA6aHJlZj1cIm1ldGEudXJsXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJxbC1lbWJlZC1saW5rXCI+XG4gICAgICA8c3BhbiBjbGFzcz1cInFsLWVtYmVkLWNvbnRlbnRcIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJxbC1lbWJlZC1kZXNjcmlwdGlvblwiPnt7IGRlc2NyaXB0aW9uIH19PC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInFsLWVtYmVkLXNvdXJjZVwiPlxuICAgICAgICAgIDxzb3VyY2UtaWNvbiA6aWNvbj1cIm1ldGEuaWNvbi5hbnlcIiAvPlxuICAgICAgICAgIDxzbWFsbCBjbGFzcz1cInFsLWVtYmVkLXB1Ymxpc2hlclwiPnt7IHB1Ymxpc2hlciB9fTwvc21hbGw+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvc3Bhbj5cbiAgICAgIDxzcGFuIGNsYXNzPVwicWwtZW1iZWQtaW1hZ2VcIj5cbiAgICAgICAgPHNvdXJjZS1pbWFnZSA6aW1hZ2U9XCJtZXRhLmltYWdlLnVybFwiIC8+XG4gICAgICA8L3NwYW4+XG4gICAgPC9hPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCBTb3VyY2VJY29uIGZyb20gJy4vU291cmNlSWNvbi52dWUnXG4gIGltcG9ydCBTb3VyY2VJbWFnZSBmcm9tICcuL1NvdXJjZUltYWdlLnZ1ZSdcbiAgaW1wb3J0IHRydW5jYXRlIGZyb20gJ2xvZGFzaC90cnVuY2F0ZSdcblxuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ3FsLWxpbmstZW1iZWQnLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgIFNvdXJjZUljb24sXG4gICAgICBTb3VyY2VJbWFnZVxuICAgIH0sXG4gICAgcHJvcHM6IHtcbiAgICAgIHVybDoge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICB9LFxuICAgICAgbWV0YToge1xuICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgIGRlZmF1bHQgKCkge1xuICAgICAgICAgIHJldHVybiB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgZGVzY3JpcHRpb24gKCkge1xuICAgICAgICByZXR1cm4gdHJ1bmNhdGUodGhpcy5tZXRhLmRlc2NyaXB0aW9uLCB7IGxlbmd0aDogMjU2IH0pXG4gICAgICB9LFxuICAgICAgcHVibGlzaGVyICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWV0YS5zaXRlX25hbWUgfHwgdHJ1bmNhdGUodGhpcy5tZXRhLnVybCwgeyBsZW5ndGg6IDY0IH0pXG4gICAgICB9XG4gICAgfVxuICB9XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG4gIC5xbC1saW5rLWVtYmVkIHtcbiAgICAucWwtZW1iZWQtbGluayxcbiAgICAucWwtZW1iZWQtbGluazpsaW5rLFxuICAgIC5xbC1lbWJlZC1saW5rOmhvdmVyIHtcbiAgICAgIGNvbG9yOiBncmF5O1xuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIH1cblxuICAgIC5xbC1lbWJlZC1saW5rIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkJGQUZBO1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgI0VFRURFRDtcbiAgICAgIGZvbnQtc2l6ZTogMC45ZW07XG4gICAgICBtYXgtaGVpZ2h0OiAyMDBweDtcbiAgICB9XG5cbiAgICAucWwtZW1iZWQtY29udGVudCB7XG4gICAgICB3aWR0aDogNzAlO1xuICAgICAgZmxleDogMCAwIDcwJTtcbiAgICAgIHBhZGRpbmc6IDE1cHg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB9XG5cbiAgICAucWwtZW1iZWQtZGVzY3JpcHRpb24ge1xuICAgICAgZmxleDogMSAxIDA7XG4gICAgfVxuXG4gICAgLnFsLWVtYmVkLXNvdXJjZSB7XG4gICAgICBtYXJnaW4tdG9wOiAxNXB4O1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuXG4gICAgLnFsLWVtYmVkLWltYWdlIHtcbiAgICAgIHdpZHRoOiAzMCU7XG4gICAgICBmbGV4OiAwIDAgMzAlO1xuICAgICAgcGFkZGluZzogMTVweDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNjY2M7XG4gICAgfVxuICB9XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwicWwtZW1iZWQtaXRlbVwiPlxuICAgIDxjb21wb25lbnRcbiAgICAgIDp1cmw9XCJ1cmxcIlxuICAgICAgOm1ldGE9XCJtZXRhXCJcbiAgICAgIDppcz1cImNvbXBvbmVudFR5cGVcIj48L2NvbXBvbmVudD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICBpbXBvcnQgTGlua0VtYmVkIGZyb20gJy4vTGlua0VtYmVkLnZ1ZSdcbiAgaW1wb3J0IFZpZGVvRW1iZWQgZnJvbSAnLi9WaWRlb0VtYmVkLnZ1ZSdcblxuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ3FsLWVtYmVkLWl0ZW0nLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgIExpbmtFbWJlZCxcbiAgICAgIFZpZGVvRW1iZWRcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICB1cmw6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgfSxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICBkZWZhdWx0ICgpIHtcbiAgICAgICAgICByZXR1cm4ge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgIGNvbXBvbmVudFR5cGUgKCkge1xuICAgICAgICBpZiAodGhpcy5tZXRhLmVtYmVkLnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICByZXR1cm4gJ3ZpZGVvLWVtYmVkJ1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm1ldGEuZW1iZWQudHlwZSA9PT0gJ2xpbmsnKSB7XG4gICAgICAgICAgcmV0dXJuICdsaW5rLWVtYmVkJ1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnZGVmYXVsdC1lbWJlZCdcbiAgICAgIH1cbiAgICB9LFxuICAgIG1vdW50ZWQgKCkge1xuICAgICAgY29uc29sZS5sb2codGhpcy5tZXRhKVxuICAgIH1cbiAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuPC9zdHlsZT5cbiIsIi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbnZhciByc0FzdHJhbFJhbmdlID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnLFxuICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLFxuICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZic7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbnZhciByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB3aXRoIFt6ZXJvLXdpZHRoIGpvaW5lcnMgb3IgY29kZSBwb2ludHMgZnJvbSB0aGUgYXN0cmFsIHBsYW5lc10oaHR0cDovL2Vldi5lZS9ibG9nLzIwMTUvMDkvMTIvZGFyay1jb3JuZXJzLW9mLXVuaWNvZGUvKS4gKi9cbnZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgc3ltYm9sIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gIHJldHVybiByZUhhc1VuaWNvZGUudGVzdChzdHJpbmcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1VuaWNvZGU7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xudmFyIFdST05HX0lOREVYID0gJ1dyb25nIGluZGV4ISc7XG52YXIgJEFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgTWF0aCA9IGdsb2JhbC5NYXRoO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3ctcmVzdHJpY3RlZC1uYW1lc1xudmFyIEluZmluaXR5ID0gZ2xvYmFsLkluZmluaXR5O1xudmFyIEJhc2VCdWZmZXIgPSAkQXJyYXlCdWZmZXI7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xudmFyIEJVRkZFUiA9ICdidWZmZXInO1xudmFyIEJZVEVfTEVOR1RIID0gJ2J5dGVMZW5ndGgnO1xudmFyIEJZVEVfT0ZGU0VUID0gJ2J5dGVPZmZzZXQnO1xudmFyICRCVUZGRVIgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVI7XG52YXIgJExFTkdUSCA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIO1xudmFyICRPRkZTRVQgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbmZ1bmN0aW9uIHBhY2tJRUVFNzU0KHZhbHVlLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59XG5mdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn1cblxuaWYgKCEkdHlwZWQuQUJWKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICRBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIHJldHVybiAkQXJyYXlCdWZmZXIubmFtZSAhPSBBUlJBWV9CVUZGRVI7XG4gIH0pKSB7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfVxuICAgIGlmICghTElCUkFSWSkgQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICghQlVHR1kgJiYgJG5hdGl2ZSkgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XG4gIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICB2YXIgUDtcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicWwtZW1iZWQtaXRlbVwifSxbX2MoX3ZtLmNvbXBvbmVudFR5cGUse3RhZzpcImNvbXBvbmVudFwiLGF0dHJzOntcInVybFwiOl92bS51cmwsXCJtZXRhXCI6X3ZtLm1ldGF9fSldLDEpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicWwtdmlkZW8tZW1iZWRcIn0sW19jKCdpZnJhbWUnLHthdHRyczp7XCJzcmNcIjpfdm0uZW1iZWRVcmwsXCJmcmFtZWJvcmRlclwiOlwiMFwiLFwid2Via2l0YWxsb3dmdWxsc2NyZWVuXCI6XCJcIixcIm1vemFsbG93ZnVsbHNjcmVlblwiOlwiXCIsXCJhbGxvd2Z1bGxzY3JlZW5cIjpcIlwifX0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJxbC1saW5rLWVtYmVkXCJ9LFtfYygnYScse3N0YXRpY0NsYXNzOlwicWwtZW1iZWQtbGlua1wiLGF0dHJzOntcImhyZWZcIjpfdm0ubWV0YS51cmwsXCJ0YXJnZXRcIjpcIl9ibGFua1wifX0sW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJxbC1lbWJlZC1jb250ZW50XCJ9LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwicWwtZW1iZWQtZGVzY3JpcHRpb25cIn0sW192bS5fdihfdm0uX3MoX3ZtLmRlc2NyaXB0aW9uKSldKSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJxbC1lbWJlZC1zb3VyY2VcIn0sW19jKCdzb3VyY2UtaWNvbicse2F0dHJzOntcImljb25cIjpfdm0ubWV0YS5pY29uLmFueX19KSxfdm0uX3YoXCIgXCIpLF9jKCdzbWFsbCcse3N0YXRpY0NsYXNzOlwicWwtZW1iZWQtcHVibGlzaGVyXCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS5wdWJsaXNoZXIpKV0pXSwxKV0pLF92bS5fdihcIiBcIiksX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcInFsLWVtYmVkLWltYWdlXCJ9LFtfYygnc291cmNlLWltYWdlJyx7YXR0cnM6e1wiaW1hZ2VcIjpfdm0ubWV0YS5pbWFnZS51cmx9fSldLDEpXSldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJxbC1lbWJlZC1zb3VyY2UtaW1hZ2VcIn0sWyhfdm0uaW1hZ2UgJiYgIV92bS5oYXNFcnJvcik/X2MoJ2ltZycse2F0dHJzOntcInNyY1wiOl92bS5pbWFnZX0sb246e1wiZXJyb3JcIjpmdW5jdGlvbigkZXZlbnQpe192bS5oYXNFcnJvciA9IHRydWV9fX0pOl9jKCdzcGFuJyxbX2MoJ3N2Zycse2F0dHJzOntcInZpZXdCb3hcIjpcIjAgMCA4MCA4MFwiLFwidmVyc2lvblwiOlwiMS4xXCJ9fSxbX2MoJ2cnLHthdHRyczp7XCJzdHJva2VcIjpcIm5vbmVcIixcInN0cm9rZS13aWR0aFwiOlwiMVwiLFwiZmlsbFwiOlwibm9uZVwiLFwiZmlsbC1ydWxlXCI6XCJldmVub2RkXCJ9fSxbX2MoJ3BhdGgnLHthdHRyczp7XCJkXCI6XCJNOCw4IEwzNiw4IEwzNiwwIEw4LDAgQzMuNiwwIDAsMy42IDAsOCBMMCwzNiBMOCwzNiBMOCw4IEw4LDggWiBNMzIsNDQgTDE2LDY0IEw2NCw2NCBMNTIsNDggTDQzLjg4LDU4Ljg0IEwzMiw0NCBMMzIsNDQgWiBNNjAsMjYgQzYwLDIyLjY4IDU3LjMyLDIwIDU0LDIwIEM1MC42OCwyMCA0OCwyMi42OCA0OCwyNiBDNDgsMjkuMzIgNTAuNjgsMzIgNTQsMzIgQzU3LjMyLDMyIDYwLDI5LjMyIDYwLDI2IEw2MCwyNiBaIE03MiwwIEw0NCwwIEw0NCw4IEw3Miw4IEw3MiwzNiBMODAsMzYgTDgwLDggQzgwLDMuNiA3Ni40LDAgNzIsMCBMNzIsMCBaIE03Miw3MiBMNDQsNzIgTDQ0LDgwIEw3Miw4MCBDNzYuNCw4MCA4MCw3Ni40IDgwLDcyIEw4MCw0NCBMNzIsNDQgTDcyLDcyIEw3Miw3MiBaIE04LDQ0IEwwLDQ0IEwwLDcyIEMwLDc2LjQgMy42LDgwIDgsODAgTDM2LDgwIEwzNiw3MiBMOCw3MiBMOCw0NCBMOCw0NCBaXCIsXCJpZFwiOlwiU2hhcGVcIixcImZpbGxcIjpcImN1cnJlbnRjb2xvclwifX0pXSldKV0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwicWwtZW1iZWQtc291cmNlLWljb25cIn0sWyhfdm0uaWNvbiAmJiAhX3ZtLmhhc0Vycm9yKT9fYygnaW1nJyx7YXR0cnM6e1wic3JjXCI6X3ZtLmljb259LG9uOntcImVycm9yXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uaGFzRXJyb3IgPSB0cnVlfX19KTpfYygnc3BhbicsW19jKCdzdmcnLHthdHRyczp7XCJ2aWV3Qm94XCI6XCIwIDAgOCAxMlwiLFwidmVyc2lvblwiOlwiMS4xXCJ9fSxbX2MoJ2cnLHthdHRyczp7XCJzdHJva2VcIjpcIm5vbmVcIixcInN0cm9rZS13aWR0aFwiOlwiMVwiLFwiZmlsbFwiOlwibm9uZVwiLFwiZmlsbC1ydWxlXCI6XCJldmVub2RkXCJ9fSxbX2MoJ3BvbHlnb24nLHthdHRyczp7XCJpZFwiOlwiU2hhcGVcIixcImZpbGxcIjpcImN1cnJlbnRjb2xvclwiLFwicG9pbnRzXCI6XCIwIDEwLjU5IDQuNTggNiAwIDEuNDEgMS40MSAwIDcuNDEgNiAxLjQxIDEyXCJ9fSldKV0pXSldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUb1N0cmluZztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcbnZhciBidG9hID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5idG9hICYmIHdpbmRvdy5idG9hLmJpbmQod2luZG93KSkgfHwgcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J0b2EnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgbG9hZEV2ZW50ID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG4gICAgdmFyIHhEb21haW4gPSBmYWxzZTtcblxuICAgIC8vIEZvciBJRSA4LzkgQ09SUyBzdXBwb3J0XG4gICAgLy8gT25seSBzdXBwb3J0cyBQT1NUIGFuZCBHRVQgY2FsbHMgYW5kIGRvZXNuJ3QgcmV0dXJucyB0aGUgcmVzcG9uc2UgaGVhZGVycy5cbiAgICAvLyBET04nVCBkbyB0aGlzIGZvciB0ZXN0aW5nIGIvYyBYTUxIdHRwUmVxdWVzdCBpcyBtb2NrZWQsIG5vdCBYRG9tYWluUmVxdWVzdC5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSAmJlxuICAgICAgICAhaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSB7XG4gICAgICByZXF1ZXN0ID0gbmV3IHdpbmRvdy5YRG9tYWluUmVxdWVzdCgpO1xuICAgICAgbG9hZEV2ZW50ID0gJ29ubG9hZCc7XG4gICAgICB4RG9tYWluID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uIGhhbmRsZVByb2dyZXNzKCkge307XG4gICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0W2xvYWRFdmVudF0gPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQgJiYgIXhEb21haW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIC8vIElFIHNlbmRzIDEyMjMgaW5zdGVhZCBvZiAyMDQgKGh0dHBzOi8vZ2l0aHViLmNvbS9heGlvcy9heGlvcy9pc3N1ZXMvMjAxKVxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gMjA0IDogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gJ05vIENvbnRlbnQnIDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBpc0FycmF5ID0gZnVuY3Rpb24gaXNBcnJheShhcnIpIHtcblx0aWYgKHR5cGVvZiBBcnJheS5pc0FycmF5ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkoYXJyKTtcblx0fVxuXG5cdHJldHVybiB0b1N0ci5jYWxsKGFycikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG52YXIgaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG5cdGlmICghb2JqIHx8IHRvU3RyLmNhbGwob2JqKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2YXIgaGFzT3duQ29uc3RydWN0b3IgPSBoYXNPd24uY2FsbChvYmosICdjb25zdHJ1Y3RvcicpO1xuXHR2YXIgaGFzSXNQcm90b3R5cGVPZiA9IG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IucHJvdG90eXBlICYmIGhhc093bi5jYWxsKG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsICdpc1Byb3RvdHlwZU9mJyk7XG5cdC8vIE5vdCBvd24gY29uc3RydWN0b3IgcHJvcGVydHkgbXVzdCBiZSBPYmplY3Rcblx0aWYgKG9iai5jb25zdHJ1Y3RvciAmJiAhaGFzT3duQ29uc3RydWN0b3IgJiYgIWhhc0lzUHJvdG90eXBlT2YpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBPd24gcHJvcGVydGllcyBhcmUgZW51bWVyYXRlZCBmaXJzdGx5LCBzbyB0byBzcGVlZCB1cCxcblx0Ly8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd24uXG5cdHZhciBrZXk7XG5cdGZvciAoa2V5IGluIG9iaikgeyAvKiovIH1cblxuXHRyZXR1cm4gdHlwZW9mIGtleSA9PT0gJ3VuZGVmaW5lZCcgfHwgaGFzT3duLmNhbGwob2JqLCBrZXkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHRlbmQoKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZTtcblx0dmFyIHRhcmdldCA9IGFyZ3VtZW50c1swXTtcblx0dmFyIGkgPSAxO1xuXHR2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcblx0dmFyIGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnYm9vbGVhbicpIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcblx0XHQvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0aSA9IDI7XG5cdH1cblx0aWYgKHRhcmdldCA9PSBudWxsIHx8ICh0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Zm9yICg7IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdG9wdGlvbnMgPSBhcmd1bWVudHNbaV07XG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmIChvcHRpb25zICE9IG51bGwpIHtcblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAobmFtZSBpbiBvcHRpb25zKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFtuYW1lXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbbmFtZV07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAodGFyZ2V0ICE9PSBjb3B5KSB7XG5cdFx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdFx0aWYgKGRlZXAgJiYgY29weSAmJiAoaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBpc0FycmF5KGNvcHkpKSkpIHtcblx0XHRcdFx0XHRcdGlmIChjb3B5SXNBcnJheSkge1xuXHRcdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBpc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHRcdHRhcmdldFtuYW1lXSA9IGV4dGVuZChkZWVwLCBjbG9uZSwgY29weSk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgY29weSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdHRhcmdldFtuYW1lXSA9IGNvcHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgcFNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuL2xpYi9rZXlzLmpzJyk7XG52YXIgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2xpYi9pc19hcmd1bWVudHMuanMnKTtcblxudmFyIGRlZXBFcXVhbCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFjdHVhbCwgZXhwZWN0ZWQsIG9wdHMpIHtcbiAgaWYgKCFvcHRzKSBvcHRzID0ge307XG4gIC8vIDcuMS4gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIHJldHVybiB0cnVlO1xuXG4gIH0gZWxzZSBpZiAoYWN0dWFsIGluc3RhbmNlb2YgRGF0ZSAmJiBleHBlY3RlZCBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICByZXR1cm4gYWN0dWFsLmdldFRpbWUoKSA9PT0gZXhwZWN0ZWQuZ2V0VGltZSgpO1xuXG4gIC8vIDcuMy4gT3RoZXIgcGFpcnMgdGhhdCBkbyBub3QgYm90aCBwYXNzIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyxcbiAgLy8gZXF1aXZhbGVuY2UgaXMgZGV0ZXJtaW5lZCBieSA9PS5cbiAgfSBlbHNlIGlmICghYWN0dWFsIHx8ICFleHBlY3RlZCB8fCB0eXBlb2YgYWN0dWFsICE9ICdvYmplY3QnICYmIHR5cGVvZiBleHBlY3RlZCAhPSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBvcHRzLnN0cmljdCA/IGFjdHVhbCA9PT0gZXhwZWN0ZWQgOiBhY3R1YWwgPT0gZXhwZWN0ZWQ7XG5cbiAgLy8gNy40LiBGb3IgYWxsIG90aGVyIE9iamVjdCBwYWlycywgaW5jbHVkaW5nIEFycmF5IG9iamVjdHMsIGVxdWl2YWxlbmNlIGlzXG4gIC8vIGRldGVybWluZWQgYnkgaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChhcyB2ZXJpZmllZFxuICAvLyB3aXRoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCksIHRoZSBzYW1lIHNldCBvZiBrZXlzXG4gIC8vIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLCBlcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnlcbiAgLy8gY29ycmVzcG9uZGluZyBrZXksIGFuZCBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuIE5vdGU6IHRoaXNcbiAgLy8gYWNjb3VudHMgZm9yIGJvdGggbmFtZWQgYW5kIGluZGV4ZWQgcHJvcGVydGllcyBvbiBBcnJheXMuXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9iakVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQsIG9wdHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkT3JOdWxsKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAoeCkge1xuICBpZiAoIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnIHx8IHR5cGVvZiB4Lmxlbmd0aCAhPT0gJ251bWJlcicpIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiB4LmNvcHkgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHguc2xpY2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHgubGVuZ3RoID4gMCAmJiB0eXBlb2YgeFswXSAhPT0gJ251bWJlcicpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG9iakVxdWl2KGEsIGIsIG9wdHMpIHtcbiAgdmFyIGksIGtleTtcbiAgaWYgKGlzVW5kZWZpbmVkT3JOdWxsKGEpIHx8IGlzVW5kZWZpbmVkT3JOdWxsKGIpKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy8gYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LlxuICBpZiAoYS5wcm90b3R5cGUgIT09IGIucHJvdG90eXBlKSByZXR1cm4gZmFsc2U7XG4gIC8vfn5+SSd2ZSBtYW5hZ2VkIHRvIGJyZWFrIE9iamVjdC5rZXlzIHRocm91Z2ggc2NyZXd5IGFyZ3VtZW50cyBwYXNzaW5nLlxuICAvLyAgIENvbnZlcnRpbmcgdG8gYXJyYXkgc29sdmVzIHRoZSBwcm9ibGVtLlxuICBpZiAoaXNBcmd1bWVudHMoYSkpIHtcbiAgICBpZiAoIWlzQXJndW1lbnRzKGIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGEgPSBwU2xpY2UuY2FsbChhKTtcbiAgICBiID0gcFNsaWNlLmNhbGwoYik7XG4gICAgcmV0dXJuIGRlZXBFcXVhbChhLCBiLCBvcHRzKTtcbiAgfVxuICBpZiAoaXNCdWZmZXIoYSkpIHtcbiAgICBpZiAoIWlzQnVmZmVyKGIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdHJ5IHtcbiAgICB2YXIga2EgPSBvYmplY3RLZXlzKGEpLFxuICAgICAgICBrYiA9IG9iamVjdEtleXMoYik7XG4gIH0gY2F0Y2ggKGUpIHsvL2hhcHBlbnMgd2hlbiBvbmUgaXMgYSBzdHJpbmcgbGl0ZXJhbCBhbmQgdGhlIG90aGVyIGlzbid0XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXNcbiAgLy8gaGFzT3duUHJvcGVydHkpXG4gIGlmIChrYS5sZW5ndGggIT0ga2IubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy90aGUgc2FtZSBzZXQgb2Yga2V5cyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSxcbiAga2Euc29ydCgpO1xuICBrYi5zb3J0KCk7XG4gIC8vfn5+Y2hlYXAga2V5IHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoa2FbaV0gIT0ga2JbaV0pXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy9lcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnkgY29ycmVzcG9uZGluZyBrZXksIGFuZFxuICAvL35+fnBvc3NpYmx5IGV4cGVuc2l2ZSBkZWVwIHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBrZXkgPSBrYVtpXTtcbiAgICBpZiAoIWRlZXBFcXVhbChhW2tleV0sIGJba2V5XSwgb3B0cykpIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHlwZW9mIGEgPT09IHR5cGVvZiBiO1xufVxuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNjYWxlIHx8IGZ1bmN0aW9uIHNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICBpZiAoXG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgeCAhPSB4XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBpbkxvdyAhPSBpbkxvd1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5IaWdoICE9IGluSGlnaFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgb3V0TG93ICE9IG91dExvd1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgb3V0SGlnaCAhPSBvdXRIaWdoXG4gICkgcmV0dXJuIE5hTjtcbiAgaWYgKHggPT09IEluZmluaXR5IHx8IHggPT09IC1JbmZpbml0eSkgcmV0dXJuIHg7XG4gIHJldHVybiAoeCAtIGluTG93KSAqIChvdXRIaWdoIC0gb3V0TG93KSAvIChpbkhpZ2ggLSBpbkxvdykgKyBvdXRMb3c7XG59O1xuIiwidmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXIsIElURVJBVE9SKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yT2YoaXRlciwgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1bHQsIElURVJBVE9SKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIGlmIChjbGFzc29mKHRoaXMpICE9IE5BTUUpIHRocm93IFR5cGVFcnJvcihOQU1FICsgXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7XG4gICAgcmV0dXJuIGZyb20odGhpcyk7XG4gIH07XG59O1xuIiwidmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBpc0VudW0gPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlzRW50cmllcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gZ2V0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoTywga2V5ID0ga2V5c1tpKytdKSkge1xuICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICB2YXIgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1GbGF0dGVuSW50b0FycmF5XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuXG5mdW5jdGlvbiBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xuICB2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gY3R4KG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIHNwcmVhZGFibGU7XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIHNwcmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmIChpc09iamVjdChlbGVtZW50KSkge1xuICAgICAgICBzcHJlYWRhYmxlID0gZWxlbWVudFtJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gICAgICAgIHNwcmVhZGFibGUgPSBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3ByZWFkYWJsZSAmJiBkZXB0aCA+IDApIHtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MWZmZmZmZmZmZmZmZmYpIHRocm93IFR5cGVFcnJvcigpO1xuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICB9XG4gICAgc291cmNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcbiIsIi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIFJlZmxlY3QgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ09QTi5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIScpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGdldFdlYWsgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2VhaztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbnZhciAkaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG52YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAodGhhdCkge1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcbnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmEgPSBbXTtcbn07XG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59O1xuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmICh+aW5kZXgpIHRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSkuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZGF0YSA9IGdldFdlYWsoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XG4gICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGF0O1xuICB9LFxuICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciB0bXAgPSB7fTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyAkV2Vha01hcCgpLnNldCgoT2JqZWN0LmZyZWV6ZSB8fCBPYmplY3QpKHRtcCksIDcpLmdldCh0bXApICE9IDc7IH0pKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBNQVAgPSAnTWFwJztcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xuICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd3MgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBoZXggPSAvXlstK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG4iLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykge1xuICBpZiAoIShsZW4gaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKykgbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbiAoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSBpZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSkgVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiLyohXG4gKiBRdWlsbCBFZGl0b3IgdjEuMy42XG4gKiBodHRwczovL3F1aWxsanMuY29tL1xuICogQ29weXJpZ2h0IChjKSAyMDE0LCBKYXNvbiBDaGVuXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMsIHNhbGVzZm9yY2UuY29tXG4gKi9cbihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIlF1aWxsXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIlF1aWxsXCJdID0gZmFjdG9yeSgpO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMDkpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvbnRhaW5lcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG52YXIgZm9ybWF0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcbnZhciBsZWFmXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcbnZhciBzY3JvbGxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDUpO1xudmFyIGlubGluZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nik7XG52YXIgYmxvY2tfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDcpO1xudmFyIGVtYmVkXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KTtcbnZhciB0ZXh0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KTtcbnZhciBhdHRyaWJ1dG9yXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcbnZhciBjbGFzc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMik7XG52YXIgc3R5bGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpO1xudmFyIHN0b3JlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTtcbnZhciBSZWdpc3RyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgUGFyY2htZW50ID0ge1xuICAgIFNjb3BlOiBSZWdpc3RyeS5TY29wZSxcbiAgICBjcmVhdGU6IFJlZ2lzdHJ5LmNyZWF0ZSxcbiAgICBmaW5kOiBSZWdpc3RyeS5maW5kLFxuICAgIHF1ZXJ5OiBSZWdpc3RyeS5xdWVyeSxcbiAgICByZWdpc3RlcjogUmVnaXN0cnkucmVnaXN0ZXIsXG4gICAgQ29udGFpbmVyOiBjb250YWluZXJfMS5kZWZhdWx0LFxuICAgIEZvcm1hdDogZm9ybWF0XzEuZGVmYXVsdCxcbiAgICBMZWFmOiBsZWFmXzEuZGVmYXVsdCxcbiAgICBFbWJlZDogZW1iZWRfMS5kZWZhdWx0LFxuICAgIFNjcm9sbDogc2Nyb2xsXzEuZGVmYXVsdCxcbiAgICBCbG9jazogYmxvY2tfMS5kZWZhdWx0LFxuICAgIElubGluZTogaW5saW5lXzEuZGVmYXVsdCxcbiAgICBUZXh0OiB0ZXh0XzEuZGVmYXVsdCxcbiAgICBBdHRyaWJ1dG9yOiB7XG4gICAgICAgIEF0dHJpYnV0ZTogYXR0cmlidXRvcl8xLmRlZmF1bHQsXG4gICAgICAgIENsYXNzOiBjbGFzc18xLmRlZmF1bHQsXG4gICAgICAgIFN0eWxlOiBzdHlsZV8xLmRlZmF1bHQsXG4gICAgICAgIFN0b3JlOiBzdG9yZV8xLmRlZmF1bHQsXG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBQYXJjaG1lbnQ7XG5cblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBQYXJjaG1lbnRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUGFyY2htZW50RXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUGFyY2htZW50RXJyb3IobWVzc2FnZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBtZXNzYWdlID0gJ1tQYXJjaG1lbnRdICcgKyBtZXNzYWdlO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICBfdGhpcy5uYW1lID0gX3RoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUGFyY2htZW50RXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLlBhcmNobWVudEVycm9yID0gUGFyY2htZW50RXJyb3I7XG52YXIgYXR0cmlidXRlcyA9IHt9O1xudmFyIGNsYXNzZXMgPSB7fTtcbnZhciB0YWdzID0ge307XG52YXIgdHlwZXMgPSB7fTtcbmV4cG9ydHMuREFUQV9LRVkgPSAnX19ibG90JztcbnZhciBTY29wZTtcbihmdW5jdGlvbiAoU2NvcGUpIHtcbiAgICBTY29wZVtTY29wZVtcIlRZUEVcIl0gPSAzXSA9IFwiVFlQRVwiO1xuICAgIFNjb3BlW1Njb3BlW1wiTEVWRUxcIl0gPSAxMl0gPSBcIkxFVkVMXCI7XG4gICAgU2NvcGVbU2NvcGVbXCJBVFRSSUJVVEVcIl0gPSAxM10gPSBcIkFUVFJJQlVURVwiO1xuICAgIFNjb3BlW1Njb3BlW1wiQkxPVFwiXSA9IDE0XSA9IFwiQkxPVFwiO1xuICAgIFNjb3BlW1Njb3BlW1wiSU5MSU5FXCJdID0gN10gPSBcIklOTElORVwiO1xuICAgIFNjb3BlW1Njb3BlW1wiQkxPQ0tcIl0gPSAxMV0gPSBcIkJMT0NLXCI7XG4gICAgU2NvcGVbU2NvcGVbXCJCTE9DS19CTE9UXCJdID0gMTBdID0gXCJCTE9DS19CTE9UXCI7XG4gICAgU2NvcGVbU2NvcGVbXCJJTkxJTkVfQkxPVFwiXSA9IDZdID0gXCJJTkxJTkVfQkxPVFwiO1xuICAgIFNjb3BlW1Njb3BlW1wiQkxPQ0tfQVRUUklCVVRFXCJdID0gOV0gPSBcIkJMT0NLX0FUVFJJQlVURVwiO1xuICAgIFNjb3BlW1Njb3BlW1wiSU5MSU5FX0FUVFJJQlVURVwiXSA9IDVdID0gXCJJTkxJTkVfQVRUUklCVVRFXCI7XG4gICAgU2NvcGVbU2NvcGVbXCJBTllcIl0gPSAxNV0gPSBcIkFOWVwiO1xufSkoU2NvcGUgPSBleHBvcnRzLlNjb3BlIHx8IChleHBvcnRzLlNjb3BlID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZShpbnB1dCwgdmFsdWUpIHtcbiAgICB2YXIgbWF0Y2ggPSBxdWVyeShpbnB1dCk7XG4gICAgaWYgKG1hdGNoID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcmNobWVudEVycm9yKFwiVW5hYmxlIHRvIGNyZWF0ZSBcIiArIGlucHV0ICsgXCIgYmxvdFwiKTtcbiAgICB9XG4gICAgdmFyIEJsb3RDbGFzcyA9IG1hdGNoO1xuICAgIHZhciBub2RlID0gXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlucHV0IGluc3RhbmNlb2YgTm9kZSB8fCBpbnB1dFsnbm9kZVR5cGUnXSA9PT0gTm9kZS5URVhUX05PREUgPyBpbnB1dCA6IEJsb3RDbGFzcy5jcmVhdGUodmFsdWUpO1xuICAgIHJldHVybiBuZXcgQmxvdENsYXNzKG5vZGUsIHZhbHVlKTtcbn1cbmV4cG9ydHMuY3JlYXRlID0gY3JlYXRlO1xuZnVuY3Rpb24gZmluZChub2RlLCBidWJibGUpIHtcbiAgICBpZiAoYnViYmxlID09PSB2b2lkIDApIHsgYnViYmxlID0gZmFsc2U7IH1cbiAgICBpZiAobm9kZSA9PSBudWxsKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKG5vZGVbZXhwb3J0cy5EQVRBX0tFWV0gIT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG5vZGVbZXhwb3J0cy5EQVRBX0tFWV0uYmxvdDtcbiAgICBpZiAoYnViYmxlKVxuICAgICAgICByZXR1cm4gZmluZChub2RlLnBhcmVudE5vZGUsIGJ1YmJsZSk7XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnRzLmZpbmQgPSBmaW5kO1xuZnVuY3Rpb24gcXVlcnkocXVlcnksIHNjb3BlKSB7XG4gICAgaWYgKHNjb3BlID09PSB2b2lkIDApIHsgc2NvcGUgPSBTY29wZS5BTlk7IH1cbiAgICB2YXIgbWF0Y2g7XG4gICAgaWYgKHR5cGVvZiBxdWVyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWF0Y2ggPSB0eXBlc1txdWVyeV0gfHwgYXR0cmlidXRlc1txdWVyeV07XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICB9XG4gICAgZWxzZSBpZiAocXVlcnkgaW5zdGFuY2VvZiBUZXh0IHx8IHF1ZXJ5Wydub2RlVHlwZSddID09PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgICAgICBtYXRjaCA9IHR5cGVzWyd0ZXh0J107XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBxdWVyeSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKHF1ZXJ5ICYgU2NvcGUuTEVWRUwgJiBTY29wZS5CTE9DSykge1xuICAgICAgICAgICAgbWF0Y2ggPSB0eXBlc1snYmxvY2snXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChxdWVyeSAmIFNjb3BlLkxFVkVMICYgU2NvcGUuSU5MSU5FKSB7XG4gICAgICAgICAgICBtYXRjaCA9IHR5cGVzWydpbmxpbmUnXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChxdWVyeSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHZhciBuYW1lcyA9IChxdWVyeS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpLnNwbGl0KC9cXHMrLyk7XG4gICAgICAgIGZvciAodmFyIGkgaW4gbmFtZXMpIHtcbiAgICAgICAgICAgIG1hdGNoID0gY2xhc3Nlc1tuYW1lc1tpXV07XG4gICAgICAgICAgICBpZiAobWF0Y2gpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbWF0Y2ggPSBtYXRjaCB8fCB0YWdzW3F1ZXJ5LnRhZ05hbWVdO1xuICAgIH1cbiAgICBpZiAobWF0Y2ggPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmIChzY29wZSAmIFNjb3BlLkxFVkVMICYgbWF0Y2guc2NvcGUgJiYgc2NvcGUgJiBTY29wZS5UWVBFICYgbWF0Y2guc2NvcGUpXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydHMucXVlcnkgPSBxdWVyeTtcbmZ1bmN0aW9uIHJlZ2lzdGVyKCkge1xuICAgIHZhciBEZWZpbml0aW9ucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIERlZmluaXRpb25zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIGlmIChEZWZpbml0aW9ucy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJldHVybiBEZWZpbml0aW9ucy5tYXAoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIHJldHVybiByZWdpc3RlcihkKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBEZWZpbml0aW9uID0gRGVmaW5pdGlvbnNbMF07XG4gICAgaWYgKHR5cGVvZiBEZWZpbml0aW9uLmJsb3ROYW1lICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgRGVmaW5pdGlvbi5hdHRyTmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcmNobWVudEVycm9yKCdJbnZhbGlkIGRlZmluaXRpb24nKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoRGVmaW5pdGlvbi5ibG90TmFtZSA9PT0gJ2Fic3RyYWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgUGFyY2htZW50RXJyb3IoJ0Nhbm5vdCByZWdpc3RlciBhYnN0cmFjdCBjbGFzcycpO1xuICAgIH1cbiAgICB0eXBlc1tEZWZpbml0aW9uLmJsb3ROYW1lIHx8IERlZmluaXRpb24uYXR0ck5hbWVdID0gRGVmaW5pdGlvbjtcbiAgICBpZiAodHlwZW9mIERlZmluaXRpb24ua2V5TmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYXR0cmlidXRlc1tEZWZpbml0aW9uLmtleU5hbWVdID0gRGVmaW5pdGlvbjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChEZWZpbml0aW9uLmNsYXNzTmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjbGFzc2VzW0RlZmluaXRpb24uY2xhc3NOYW1lXSA9IERlZmluaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKERlZmluaXRpb24udGFnTmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShEZWZpbml0aW9uLnRhZ05hbWUpKSB7XG4gICAgICAgICAgICAgICAgRGVmaW5pdGlvbi50YWdOYW1lID0gRGVmaW5pdGlvbi50YWdOYW1lLm1hcChmdW5jdGlvbiAodGFnTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFnTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgRGVmaW5pdGlvbi50YWdOYW1lID0gRGVmaW5pdGlvbi50YWdOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGFnTmFtZXMgPSBBcnJheS5pc0FycmF5KERlZmluaXRpb24udGFnTmFtZSkgPyBEZWZpbml0aW9uLnRhZ05hbWUgOiBbRGVmaW5pdGlvbi50YWdOYW1lXTtcbiAgICAgICAgICAgIHRhZ05hbWVzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICAgICAgICAgIGlmICh0YWdzW3RhZ10gPT0gbnVsbCB8fCBEZWZpbml0aW9uLmNsYXNzTmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhZ3NbdGFnXSA9IERlZmluaXRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIERlZmluaXRpb247XG59XG5leHBvcnRzLnJlZ2lzdGVyID0gcmVnaXN0ZXI7XG5cblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBkaWZmID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MSk7XG52YXIgZXF1YWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcbnZhciBleHRlbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xudmFyIG9wID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cblxudmFyIE5VTExfQ0hBUkFDVEVSID0gU3RyaW5nLmZyb21DaGFyQ29kZSgwKTsgIC8vIFBsYWNlaG9sZGVyIGNoYXIgZm9yIGVtYmVkIGluIGRpZmYoKVxuXG5cbnZhciBEZWx0YSA9IGZ1bmN0aW9uIChvcHMpIHtcbiAgLy8gQXNzdW1lIHdlIGFyZSBnaXZlbiBhIHdlbGwgZm9ybWVkIG9wc1xuICBpZiAoQXJyYXkuaXNBcnJheShvcHMpKSB7XG4gICAgdGhpcy5vcHMgPSBvcHM7XG4gIH0gZWxzZSBpZiAob3BzICE9IG51bGwgJiYgQXJyYXkuaXNBcnJheShvcHMub3BzKSkge1xuICAgIHRoaXMub3BzID0gb3BzLm9wcztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9wcyA9IFtdO1xuICB9XG59O1xuXG5cbkRlbHRhLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbiAodGV4dCwgYXR0cmlidXRlcykge1xuICB2YXIgbmV3T3AgPSB7fTtcbiAgaWYgKHRleHQubGVuZ3RoID09PSAwKSByZXR1cm4gdGhpcztcbiAgbmV3T3AuaW5zZXJ0ID0gdGV4dDtcbiAgaWYgKGF0dHJpYnV0ZXMgIT0gbnVsbCAmJiB0eXBlb2YgYXR0cmlidXRlcyA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoID4gMCkge1xuICAgIG5ld09wLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICB9XG4gIHJldHVybiB0aGlzLnB1c2gobmV3T3ApO1xufTtcblxuRGVsdGEucHJvdG90eXBlWydkZWxldGUnXSA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgaWYgKGxlbmd0aCA8PSAwKSByZXR1cm4gdGhpcztcbiAgcmV0dXJuIHRoaXMucHVzaCh7ICdkZWxldGUnOiBsZW5ndGggfSk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUucmV0YWluID0gZnVuY3Rpb24gKGxlbmd0aCwgYXR0cmlidXRlcykge1xuICBpZiAobGVuZ3RoIDw9IDApIHJldHVybiB0aGlzO1xuICB2YXIgbmV3T3AgPSB7IHJldGFpbjogbGVuZ3RoIH07XG4gIGlmIChhdHRyaWJ1dGVzICE9IG51bGwgJiYgdHlwZW9mIGF0dHJpYnV0ZXMgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCA+IDApIHtcbiAgICBuZXdPcC5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgfVxuICByZXR1cm4gdGhpcy5wdXNoKG5ld09wKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKG5ld09wKSB7XG4gIHZhciBpbmRleCA9IHRoaXMub3BzLmxlbmd0aDtcbiAgdmFyIGxhc3RPcCA9IHRoaXMub3BzW2luZGV4IC0gMV07XG4gIG5ld09wID0gZXh0ZW5kKHRydWUsIHt9LCBuZXdPcCk7XG4gIGlmICh0eXBlb2YgbGFzdE9wID09PSAnb2JqZWN0Jykge1xuICAgIGlmICh0eXBlb2YgbmV3T3BbJ2RlbGV0ZSddID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgbGFzdE9wWydkZWxldGUnXSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHRoaXMub3BzW2luZGV4IC0gMV0gPSB7ICdkZWxldGUnOiBsYXN0T3BbJ2RlbGV0ZSddICsgbmV3T3BbJ2RlbGV0ZSddIH07XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gU2luY2UgaXQgZG9lcyBub3QgbWF0dGVyIGlmIHdlIGluc2VydCBiZWZvcmUgb3IgYWZ0ZXIgZGVsZXRpbmcgYXQgdGhlIHNhbWUgaW5kZXgsXG4gICAgLy8gYWx3YXlzIHByZWZlciB0byBpbnNlcnQgZmlyc3RcbiAgICBpZiAodHlwZW9mIGxhc3RPcFsnZGVsZXRlJ10gPT09ICdudW1iZXInICYmIG5ld09wLmluc2VydCAhPSBudWxsKSB7XG4gICAgICBpbmRleCAtPSAxO1xuICAgICAgbGFzdE9wID0gdGhpcy5vcHNbaW5kZXggLSAxXTtcbiAgICAgIGlmICh0eXBlb2YgbGFzdE9wICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB0aGlzLm9wcy51bnNoaWZ0KG5ld09wKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlcXVhbChuZXdPcC5hdHRyaWJ1dGVzLCBsYXN0T3AuYXR0cmlidXRlcykpIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3T3AuaW5zZXJ0ID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgbGFzdE9wLmluc2VydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5vcHNbaW5kZXggLSAxXSA9IHsgaW5zZXJ0OiBsYXN0T3AuaW5zZXJ0ICsgbmV3T3AuaW5zZXJ0IH07XG4gICAgICAgIGlmICh0eXBlb2YgbmV3T3AuYXR0cmlidXRlcyA9PT0gJ29iamVjdCcpIHRoaXMub3BzW2luZGV4IC0gMV0uYXR0cmlidXRlcyA9IG5ld09wLmF0dHJpYnV0ZXNcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBuZXdPcC5yZXRhaW4gPT09ICdudW1iZXInICYmIHR5cGVvZiBsYXN0T3AucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgICB0aGlzLm9wc1tpbmRleCAtIDFdID0geyByZXRhaW46IGxhc3RPcC5yZXRhaW4gKyBuZXdPcC5yZXRhaW4gfTtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdPcC5hdHRyaWJ1dGVzID09PSAnb2JqZWN0JykgdGhpcy5vcHNbaW5kZXggLSAxXS5hdHRyaWJ1dGVzID0gbmV3T3AuYXR0cmlidXRlc1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGluZGV4ID09PSB0aGlzLm9wcy5sZW5ndGgpIHtcbiAgICB0aGlzLm9wcy5wdXNoKG5ld09wKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9wcy5zcGxpY2UoaW5kZXgsIDAsIG5ld09wKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5jaG9wID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGFzdE9wID0gdGhpcy5vcHNbdGhpcy5vcHMubGVuZ3RoIC0gMV07XG4gIGlmIChsYXN0T3AgJiYgbGFzdE9wLnJldGFpbiAmJiAhbGFzdE9wLmF0dHJpYnV0ZXMpIHtcbiAgICB0aGlzLm9wcy5wb3AoKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gIHJldHVybiB0aGlzLm9wcy5maWx0ZXIocHJlZGljYXRlKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKHByZWRpY2F0ZSkge1xuICB0aGlzLm9wcy5mb3JFYWNoKHByZWRpY2F0ZSk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gKHByZWRpY2F0ZSkge1xuICByZXR1cm4gdGhpcy5vcHMubWFwKHByZWRpY2F0ZSk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUucGFydGl0aW9uID0gZnVuY3Rpb24gKHByZWRpY2F0ZSkge1xuICB2YXIgcGFzc2VkID0gW10sIGZhaWxlZCA9IFtdO1xuICB0aGlzLmZvckVhY2goZnVuY3Rpb24ob3ApIHtcbiAgICB2YXIgdGFyZ2V0ID0gcHJlZGljYXRlKG9wKSA/IHBhc3NlZCA6IGZhaWxlZDtcbiAgICB0YXJnZXQucHVzaChvcCk7XG4gIH0pO1xuICByZXR1cm4gW3Bhc3NlZCwgZmFpbGVkXTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5yZWR1Y2UgPSBmdW5jdGlvbiAocHJlZGljYXRlLCBpbml0aWFsKSB7XG4gIHJldHVybiB0aGlzLm9wcy5yZWR1Y2UocHJlZGljYXRlLCBpbml0aWFsKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5jaGFuZ2VMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnJlZHVjZShmdW5jdGlvbiAobGVuZ3RoLCBlbGVtKSB7XG4gICAgaWYgKGVsZW0uaW5zZXJ0KSB7XG4gICAgICByZXR1cm4gbGVuZ3RoICsgb3AubGVuZ3RoKGVsZW0pO1xuICAgIH0gZWxzZSBpZiAoZWxlbS5kZWxldGUpIHtcbiAgICAgIHJldHVybiBsZW5ndGggLSBlbGVtLmRlbGV0ZTtcbiAgICB9XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfSwgMCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5yZWR1Y2UoZnVuY3Rpb24gKGxlbmd0aCwgZWxlbSkge1xuICAgIHJldHVybiBsZW5ndGggKyBvcC5sZW5ndGgoZWxlbSk7XG4gIH0sIDApO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICBpZiAodHlwZW9mIGVuZCAhPT0gJ251bWJlcicpIGVuZCA9IEluZmluaXR5O1xuICB2YXIgb3BzID0gW107XG4gIHZhciBpdGVyID0gb3AuaXRlcmF0b3IodGhpcy5vcHMpO1xuICB2YXIgaW5kZXggPSAwO1xuICB3aGlsZSAoaW5kZXggPCBlbmQgJiYgaXRlci5oYXNOZXh0KCkpIHtcbiAgICB2YXIgbmV4dE9wO1xuICAgIGlmIChpbmRleCA8IHN0YXJ0KSB7XG4gICAgICBuZXh0T3AgPSBpdGVyLm5leHQoc3RhcnQgLSBpbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRPcCA9IGl0ZXIubmV4dChlbmQgLSBpbmRleCk7XG4gICAgICBvcHMucHVzaChuZXh0T3ApO1xuICAgIH1cbiAgICBpbmRleCArPSBvcC5sZW5ndGgobmV4dE9wKTtcbiAgfVxuICByZXR1cm4gbmV3IERlbHRhKG9wcyk7XG59O1xuXG5cbkRlbHRhLnByb3RvdHlwZS5jb21wb3NlID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIHZhciB0aGlzSXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIG90aGVySXRlciA9IG9wLml0ZXJhdG9yKG90aGVyLm9wcyk7XG4gIHZhciBkZWx0YSA9IG5ldyBEZWx0YSgpO1xuICB3aGlsZSAodGhpc0l0ZXIuaGFzTmV4dCgpIHx8IG90aGVySXRlci5oYXNOZXh0KCkpIHtcbiAgICBpZiAob3RoZXJJdGVyLnBlZWtUeXBlKCkgPT09ICdpbnNlcnQnKSB7XG4gICAgICBkZWx0YS5wdXNoKG90aGVySXRlci5uZXh0KCkpO1xuICAgIH0gZWxzZSBpZiAodGhpc0l0ZXIucGVla1R5cGUoKSA9PT0gJ2RlbGV0ZScpIHtcbiAgICAgIGRlbHRhLnB1c2godGhpc0l0ZXIubmV4dCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWluKHRoaXNJdGVyLnBlZWtMZW5ndGgoKSwgb3RoZXJJdGVyLnBlZWtMZW5ndGgoKSk7XG4gICAgICB2YXIgdGhpc09wID0gdGhpc0l0ZXIubmV4dChsZW5ndGgpO1xuICAgICAgdmFyIG90aGVyT3AgPSBvdGhlckl0ZXIubmV4dChsZW5ndGgpO1xuICAgICAgaWYgKHR5cGVvZiBvdGhlck9wLnJldGFpbiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdmFyIG5ld09wID0ge307XG4gICAgICAgIGlmICh0eXBlb2YgdGhpc09wLnJldGFpbiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBuZXdPcC5yZXRhaW4gPSBsZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3T3AuaW5zZXJ0ID0gdGhpc09wLmluc2VydDtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmVzZXJ2ZSBudWxsIHdoZW4gY29tcG9zaW5nIHdpdGggYSByZXRhaW4sIG90aGVyd2lzZSByZW1vdmUgaXQgZm9yIGluc2VydHNcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBvcC5hdHRyaWJ1dGVzLmNvbXBvc2UodGhpc09wLmF0dHJpYnV0ZXMsIG90aGVyT3AuYXR0cmlidXRlcywgdHlwZW9mIHRoaXNPcC5yZXRhaW4gPT09ICdudW1iZXInKTtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXMpIG5ld09wLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICAgICAgICBkZWx0YS5wdXNoKG5ld09wKTtcbiAgICAgIC8vIE90aGVyIG9wIHNob3VsZCBiZSBkZWxldGUsIHdlIGNvdWxkIGJlIGFuIGluc2VydCBvciByZXRhaW5cbiAgICAgIC8vIEluc2VydCArIGRlbGV0ZSBjYW5jZWxzIG91dFxuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3RoZXJPcFsnZGVsZXRlJ10gPT09ICdudW1iZXInICYmIHR5cGVvZiB0aGlzT3AucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgICBkZWx0YS5wdXNoKG90aGVyT3ApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGVsdGEuY2hvcCgpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICB2YXIgZGVsdGEgPSBuZXcgRGVsdGEodGhpcy5vcHMuc2xpY2UoKSk7XG4gIGlmIChvdGhlci5vcHMubGVuZ3RoID4gMCkge1xuICAgIGRlbHRhLnB1c2gob3RoZXIub3BzWzBdKTtcbiAgICBkZWx0YS5vcHMgPSBkZWx0YS5vcHMuY29uY2F0KG90aGVyLm9wcy5zbGljZSgxKSk7XG4gIH1cbiAgcmV0dXJuIGRlbHRhO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmRpZmYgPSBmdW5jdGlvbiAob3RoZXIsIGluZGV4KSB7XG4gIGlmICh0aGlzLm9wcyA9PT0gb3RoZXIub3BzKSB7XG4gICAgcmV0dXJuIG5ldyBEZWx0YSgpO1xuICB9XG4gIHZhciBzdHJpbmdzID0gW3RoaXMsIG90aGVyXS5tYXAoZnVuY3Rpb24gKGRlbHRhKSB7XG4gICAgcmV0dXJuIGRlbHRhLm1hcChmdW5jdGlvbiAob3ApIHtcbiAgICAgIGlmIChvcC5pbnNlcnQgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9wLmluc2VydCA9PT0gJ3N0cmluZycgPyBvcC5pbnNlcnQgOiBOVUxMX0NIQVJBQ1RFUjtcbiAgICAgIH1cbiAgICAgIHZhciBwcmVwID0gKGRlbHRhID09PSBvdGhlcikgPyAnb24nIDogJ3dpdGgnO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaWZmKCkgY2FsbGVkICcgKyBwcmVwICsgJyBub24tZG9jdW1lbnQnKTtcbiAgICB9KS5qb2luKCcnKTtcbiAgfSk7XG4gIHZhciBkZWx0YSA9IG5ldyBEZWx0YSgpO1xuICB2YXIgZGlmZlJlc3VsdCA9IGRpZmYoc3RyaW5nc1swXSwgc3RyaW5nc1sxXSwgaW5kZXgpO1xuICB2YXIgdGhpc0l0ZXIgPSBvcC5pdGVyYXRvcih0aGlzLm9wcyk7XG4gIHZhciBvdGhlckl0ZXIgPSBvcC5pdGVyYXRvcihvdGhlci5vcHMpO1xuICBkaWZmUmVzdWx0LmZvckVhY2goZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgIHZhciBsZW5ndGggPSBjb21wb25lbnRbMV0ubGVuZ3RoO1xuICAgIHdoaWxlIChsZW5ndGggPiAwKSB7XG4gICAgICB2YXIgb3BMZW5ndGggPSAwO1xuICAgICAgc3dpdGNoIChjb21wb25lbnRbMF0pIHtcbiAgICAgICAgY2FzZSBkaWZmLklOU0VSVDpcbiAgICAgICAgICBvcExlbmd0aCA9IE1hdGgubWluKG90aGVySXRlci5wZWVrTGVuZ3RoKCksIGxlbmd0aCk7XG4gICAgICAgICAgZGVsdGEucHVzaChvdGhlckl0ZXIubmV4dChvcExlbmd0aCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGRpZmYuREVMRVRFOlxuICAgICAgICAgIG9wTGVuZ3RoID0gTWF0aC5taW4obGVuZ3RoLCB0aGlzSXRlci5wZWVrTGVuZ3RoKCkpO1xuICAgICAgICAgIHRoaXNJdGVyLm5leHQob3BMZW5ndGgpO1xuICAgICAgICAgIGRlbHRhWydkZWxldGUnXShvcExlbmd0aCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZGlmZi5FUVVBTDpcbiAgICAgICAgICBvcExlbmd0aCA9IE1hdGgubWluKHRoaXNJdGVyLnBlZWtMZW5ndGgoKSwgb3RoZXJJdGVyLnBlZWtMZW5ndGgoKSwgbGVuZ3RoKTtcbiAgICAgICAgICB2YXIgdGhpc09wID0gdGhpc0l0ZXIubmV4dChvcExlbmd0aCk7XG4gICAgICAgICAgdmFyIG90aGVyT3AgPSBvdGhlckl0ZXIubmV4dChvcExlbmd0aCk7XG4gICAgICAgICAgaWYgKGVxdWFsKHRoaXNPcC5pbnNlcnQsIG90aGVyT3AuaW5zZXJ0KSkge1xuICAgICAgICAgICAgZGVsdGEucmV0YWluKG9wTGVuZ3RoLCBvcC5hdHRyaWJ1dGVzLmRpZmYodGhpc09wLmF0dHJpYnV0ZXMsIG90aGVyT3AuYXR0cmlidXRlcykpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWx0YS5wdXNoKG90aGVyT3ApWydkZWxldGUnXShvcExlbmd0aCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgbGVuZ3RoIC09IG9wTGVuZ3RoO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkZWx0YS5jaG9wKCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuZWFjaExpbmUgPSBmdW5jdGlvbiAocHJlZGljYXRlLCBuZXdsaW5lKSB7XG4gIG5ld2xpbmUgPSBuZXdsaW5lIHx8ICdcXG4nO1xuICB2YXIgaXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIGxpbmUgPSBuZXcgRGVsdGEoKTtcbiAgdmFyIGkgPSAwO1xuICB3aGlsZSAoaXRlci5oYXNOZXh0KCkpIHtcbiAgICBpZiAoaXRlci5wZWVrVHlwZSgpICE9PSAnaW5zZXJ0JykgcmV0dXJuO1xuICAgIHZhciB0aGlzT3AgPSBpdGVyLnBlZWsoKTtcbiAgICB2YXIgc3RhcnQgPSBvcC5sZW5ndGgodGhpc09wKSAtIGl0ZXIucGVla0xlbmd0aCgpO1xuICAgIHZhciBpbmRleCA9IHR5cGVvZiB0aGlzT3AuaW5zZXJ0ID09PSAnc3RyaW5nJyA/XG4gICAgICB0aGlzT3AuaW5zZXJ0LmluZGV4T2YobmV3bGluZSwgc3RhcnQpIC0gc3RhcnQgOiAtMTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICBsaW5lLnB1c2goaXRlci5uZXh0KCkpO1xuICAgIH0gZWxzZSBpZiAoaW5kZXggPiAwKSB7XG4gICAgICBsaW5lLnB1c2goaXRlci5uZXh0KGluZGV4KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcmVkaWNhdGUobGluZSwgaXRlci5uZXh0KDEpLmF0dHJpYnV0ZXMgfHwge30sIGkpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpICs9IDE7XG4gICAgICBsaW5lID0gbmV3IERlbHRhKCk7XG4gICAgfVxuICB9XG4gIGlmIChsaW5lLmxlbmd0aCgpID4gMCkge1xuICAgIHByZWRpY2F0ZShsaW5lLCB7fSwgaSk7XG4gIH1cbn07XG5cbkRlbHRhLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiAob3RoZXIsIHByaW9yaXR5KSB7XG4gIHByaW9yaXR5ID0gISFwcmlvcml0eTtcbiAgaWYgKHR5cGVvZiBvdGhlciA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1Qb3NpdGlvbihvdGhlciwgcHJpb3JpdHkpO1xuICB9XG4gIHZhciB0aGlzSXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIG90aGVySXRlciA9IG9wLml0ZXJhdG9yKG90aGVyLm9wcyk7XG4gIHZhciBkZWx0YSA9IG5ldyBEZWx0YSgpO1xuICB3aGlsZSAodGhpc0l0ZXIuaGFzTmV4dCgpIHx8IG90aGVySXRlci5oYXNOZXh0KCkpIHtcbiAgICBpZiAodGhpc0l0ZXIucGVla1R5cGUoKSA9PT0gJ2luc2VydCcgJiYgKHByaW9yaXR5IHx8IG90aGVySXRlci5wZWVrVHlwZSgpICE9PSAnaW5zZXJ0JykpIHtcbiAgICAgIGRlbHRhLnJldGFpbihvcC5sZW5ndGgodGhpc0l0ZXIubmV4dCgpKSk7XG4gICAgfSBlbHNlIGlmIChvdGhlckl0ZXIucGVla1R5cGUoKSA9PT0gJ2luc2VydCcpIHtcbiAgICAgIGRlbHRhLnB1c2gob3RoZXJJdGVyLm5leHQoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsZW5ndGggPSBNYXRoLm1pbih0aGlzSXRlci5wZWVrTGVuZ3RoKCksIG90aGVySXRlci5wZWVrTGVuZ3RoKCkpO1xuICAgICAgdmFyIHRoaXNPcCA9IHRoaXNJdGVyLm5leHQobGVuZ3RoKTtcbiAgICAgIHZhciBvdGhlck9wID0gb3RoZXJJdGVyLm5leHQobGVuZ3RoKTtcbiAgICAgIGlmICh0aGlzT3BbJ2RlbGV0ZSddKSB7XG4gICAgICAgIC8vIE91ciBkZWxldGUgZWl0aGVyIG1ha2VzIHRoZWlyIGRlbGV0ZSByZWR1bmRhbnQgb3IgcmVtb3ZlcyB0aGVpciByZXRhaW5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKG90aGVyT3BbJ2RlbGV0ZSddKSB7XG4gICAgICAgIGRlbHRhLnB1c2gob3RoZXJPcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBXZSByZXRhaW4gZWl0aGVyIHRoZWlyIHJldGFpbiBvciBpbnNlcnRcbiAgICAgICAgZGVsdGEucmV0YWluKGxlbmd0aCwgb3AuYXR0cmlidXRlcy50cmFuc2Zvcm0odGhpc09wLmF0dHJpYnV0ZXMsIG90aGVyT3AuYXR0cmlidXRlcywgcHJpb3JpdHkpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlbHRhLmNob3AoKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS50cmFuc2Zvcm1Qb3NpdGlvbiA9IGZ1bmN0aW9uIChpbmRleCwgcHJpb3JpdHkpIHtcbiAgcHJpb3JpdHkgPSAhIXByaW9yaXR5O1xuICB2YXIgdGhpc0l0ZXIgPSBvcC5pdGVyYXRvcih0aGlzLm9wcyk7XG4gIHZhciBvZmZzZXQgPSAwO1xuICB3aGlsZSAodGhpc0l0ZXIuaGFzTmV4dCgpICYmIG9mZnNldCA8PSBpbmRleCkge1xuICAgIHZhciBsZW5ndGggPSB0aGlzSXRlci5wZWVrTGVuZ3RoKCk7XG4gICAgdmFyIG5leHRUeXBlID0gdGhpc0l0ZXIucGVla1R5cGUoKTtcbiAgICB0aGlzSXRlci5uZXh0KCk7XG4gICAgaWYgKG5leHRUeXBlID09PSAnZGVsZXRlJykge1xuICAgICAgaW5kZXggLT0gTWF0aC5taW4obGVuZ3RoLCBpbmRleCAtIG9mZnNldCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9IGVsc2UgaWYgKG5leHRUeXBlID09PSAnaW5zZXJ0JyAmJiAob2Zmc2V0IDwgaW5kZXggfHwgIXByaW9yaXR5KSkge1xuICAgICAgaW5kZXggKz0gbGVuZ3RoO1xuICAgIH1cbiAgICBvZmZzZXQgKz0gbGVuZ3RoO1xuICB9XG4gIHJldHVybiBpbmRleDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBEZWx0YTtcblxuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBpc0FycmF5ID0gZnVuY3Rpb24gaXNBcnJheShhcnIpIHtcblx0aWYgKHR5cGVvZiBBcnJheS5pc0FycmF5ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkoYXJyKTtcblx0fVxuXG5cdHJldHVybiB0b1N0ci5jYWxsKGFycikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG52YXIgaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG5cdGlmICghb2JqIHx8IHRvU3RyLmNhbGwob2JqKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2YXIgaGFzT3duQ29uc3RydWN0b3IgPSBoYXNPd24uY2FsbChvYmosICdjb25zdHJ1Y3RvcicpO1xuXHR2YXIgaGFzSXNQcm90b3R5cGVPZiA9IG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IucHJvdG90eXBlICYmIGhhc093bi5jYWxsKG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsICdpc1Byb3RvdHlwZU9mJyk7XG5cdC8vIE5vdCBvd24gY29uc3RydWN0b3IgcHJvcGVydHkgbXVzdCBiZSBPYmplY3Rcblx0aWYgKG9iai5jb25zdHJ1Y3RvciAmJiAhaGFzT3duQ29uc3RydWN0b3IgJiYgIWhhc0lzUHJvdG90eXBlT2YpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBPd24gcHJvcGVydGllcyBhcmUgZW51bWVyYXRlZCBmaXJzdGx5LCBzbyB0byBzcGVlZCB1cCxcblx0Ly8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd24uXG5cdHZhciBrZXk7XG5cdGZvciAoa2V5IGluIG9iaikgeyAvKiovIH1cblxuXHRyZXR1cm4gdHlwZW9mIGtleSA9PT0gJ3VuZGVmaW5lZCcgfHwgaGFzT3duLmNhbGwob2JqLCBrZXkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHRlbmQoKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZTtcblx0dmFyIHRhcmdldCA9IGFyZ3VtZW50c1swXTtcblx0dmFyIGkgPSAxO1xuXHR2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcblx0dmFyIGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnYm9vbGVhbicpIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcblx0XHQvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0aSA9IDI7XG5cdH1cblx0aWYgKHRhcmdldCA9PSBudWxsIHx8ICh0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Zm9yICg7IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdG9wdGlvbnMgPSBhcmd1bWVudHNbaV07XG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmIChvcHRpb25zICE9IG51bGwpIHtcblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAobmFtZSBpbiBvcHRpb25zKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFtuYW1lXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbbmFtZV07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAodGFyZ2V0ICE9PSBjb3B5KSB7XG5cdFx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdFx0aWYgKGRlZXAgJiYgY29weSAmJiAoaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBpc0FycmF5KGNvcHkpKSkpIHtcblx0XHRcdFx0XHRcdGlmIChjb3B5SXNBcnJheSkge1xuXHRcdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBpc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHRcdHRhcmdldFtuYW1lXSA9IGV4dGVuZChkZWVwLCBjbG9uZSwgY29weSk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgY29weSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdHRhcmdldFtuYW1lXSA9IGNvcHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLkJsb2NrRW1iZWQgPSBleHBvcnRzLmJ1YmJsZUZvcm1hdHMgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9leHRlbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX2V4dGVuZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmQpO1xuXG52YXIgX3F1aWxsRGVsdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3F1aWxsRGVsdGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGxEZWx0YSk7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9icmVhayA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG52YXIgX2JyZWFrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2JyZWFrKTtcblxudmFyIF9pbmxpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX2lubGluZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmxpbmUpO1xuXG52YXIgX3RleHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX3RleHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGV4dCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIE5FV0xJTkVfTEVOR1RIID0gMTtcblxudmFyIEJsb2NrRW1iZWQgPSBmdW5jdGlvbiAoX1BhcmNobWVudCRFbWJlZCkge1xuICBfaW5oZXJpdHMoQmxvY2tFbWJlZCwgX1BhcmNobWVudCRFbWJlZCk7XG5cbiAgZnVuY3Rpb24gQmxvY2tFbWJlZCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmxvY2tFbWJlZCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJsb2NrRW1iZWQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCbG9ja0VtYmVkKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQmxvY2tFbWJlZCwgW3tcbiAgICBrZXk6ICdhdHRhY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgICBfZ2V0KEJsb2NrRW1iZWQucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvY2tFbWJlZC5wcm90b3R5cGUpLCAnYXR0YWNoJywgdGhpcykuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMuYXR0cmlidXRlcyA9IG5ldyBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuU3RvcmUodGhpcy5kb21Ob2RlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZWx0YScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbHRhKCkge1xuICAgICAgcmV0dXJuIG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLmluc2VydCh0aGlzLnZhbHVlKCksICgwLCBfZXh0ZW5kMi5kZWZhdWx0KSh0aGlzLmZvcm1hdHMoKSwgdGhpcy5hdHRyaWJ1dGVzLnZhbHVlcygpKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0KG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgYXR0cmlidXRlID0gX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeShuYW1lLCBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLkJMT0NLX0FUVFJJQlVURSk7XG4gICAgICBpZiAoYXR0cmlidXRlICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRBdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdEF0KGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICB0aGlzLmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5zZXJ0QXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRBdChpbmRleCwgdmFsdWUsIGRlZikge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuZW5kc1dpdGgoJ1xcbicpKSB7XG4gICAgICAgIHZhciBibG9jayA9IF9wYXJjaG1lbnQyLmRlZmF1bHQuY3JlYXRlKEJsb2NrLmJsb3ROYW1lKTtcbiAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKGJsb2NrLCBpbmRleCA9PT0gMCA/IHRoaXMgOiB0aGlzLm5leHQpO1xuICAgICAgICBibG9jay5pbnNlcnRBdCgwLCB2YWx1ZS5zbGljZSgwLCAtMSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2dldChCbG9ja0VtYmVkLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrRW1iZWQucHJvdG90eXBlKSwgJ2luc2VydEF0JywgdGhpcykuY2FsbCh0aGlzLCBpbmRleCwgdmFsdWUsIGRlZik7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJsb2NrRW1iZWQ7XG59KF9wYXJjaG1lbnQyLmRlZmF1bHQuRW1iZWQpO1xuXG5CbG9ja0VtYmVkLnNjb3BlID0gX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5CTE9DS19CTE9UO1xuLy8gSXQgaXMgaW1wb3J0YW50IGZvciBjdXJzb3IgYmVoYXZpb3IgQmxvY2tFbWJlZHMgdXNlIHRhZ3MgdGhhdCBhcmUgYmxvY2sgbGV2ZWwgZWxlbWVudHNcblxuXG52YXIgQmxvY2sgPSBmdW5jdGlvbiAoX1BhcmNobWVudCRCbG9jaykge1xuICBfaW5oZXJpdHMoQmxvY2ssIF9QYXJjaG1lbnQkQmxvY2spO1xuXG4gIGZ1bmN0aW9uIEJsb2NrKGRvbU5vZGUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmxvY2spO1xuXG4gICAgdmFyIF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCbG9jay5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrKSkuY2FsbCh0aGlzLCBkb21Ob2RlKSk7XG5cbiAgICBfdGhpczIuY2FjaGUgPSB7fTtcbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJsb2NrLCBbe1xuICAgIGtleTogJ2RlbHRhJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsdGEoKSB7XG4gICAgICBpZiAodGhpcy5jYWNoZS5kZWx0YSA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuY2FjaGUuZGVsdGEgPSB0aGlzLmRlc2NlbmRhbnRzKF9wYXJjaG1lbnQyLmRlZmF1bHQuTGVhZikucmVkdWNlKGZ1bmN0aW9uIChkZWx0YSwgbGVhZikge1xuICAgICAgICAgIGlmIChsZWFmLmxlbmd0aCgpID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVsdGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkZWx0YS5pbnNlcnQobGVhZi52YWx1ZSgpLCBidWJibGVGb3JtYXRzKGxlYWYpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpKS5pbnNlcnQoJ1xcbicsIGJ1YmJsZUZvcm1hdHModGhpcykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuY2FjaGUuZGVsdGE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlQXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVBdChpbmRleCwgbGVuZ3RoKSB7XG4gICAgICBfZ2V0KEJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrLnByb3RvdHlwZSksICdkZWxldGVBdCcsIHRoaXMpLmNhbGwodGhpcywgaW5kZXgsIGxlbmd0aCk7XG4gICAgICB0aGlzLmNhY2hlID0ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0QXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRBdChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKGxlbmd0aCA8PSAwKSByZXR1cm47XG4gICAgICBpZiAoX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeShuYW1lLCBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLkJMT0NLKSkge1xuICAgICAgICBpZiAoaW5kZXggKyBsZW5ndGggPT09IHRoaXMubGVuZ3RoKCkpIHtcbiAgICAgICAgICB0aGlzLmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9nZXQoQmxvY2sucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvY2sucHJvdG90eXBlKSwgJ2Zvcm1hdEF0JywgdGhpcykuY2FsbCh0aGlzLCBpbmRleCwgTWF0aC5taW4obGVuZ3RoLCB0aGlzLmxlbmd0aCgpIC0gaW5kZXggLSAxKSwgbmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgdGhpcy5jYWNoZSA9IHt9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2luc2VydEF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0QXQoaW5kZXgsIHZhbHVlLCBkZWYpIHtcbiAgICAgIGlmIChkZWYgIT0gbnVsbCkgcmV0dXJuIF9nZXQoQmxvY2sucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvY2sucHJvdG90eXBlKSwgJ2luc2VydEF0JywgdGhpcykuY2FsbCh0aGlzLCBpbmRleCwgdmFsdWUsIGRlZik7XG4gICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICB2YXIgbGluZXMgPSB2YWx1ZS5zcGxpdCgnXFxuJyk7XG4gICAgICB2YXIgdGV4dCA9IGxpbmVzLnNoaWZ0KCk7XG4gICAgICBpZiAodGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChpbmRleCA8IHRoaXMubGVuZ3RoKCkgLSAxIHx8IHRoaXMuY2hpbGRyZW4udGFpbCA9PSBudWxsKSB7XG4gICAgICAgICAgX2dldChCbG9jay5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCbG9jay5wcm90b3R5cGUpLCAnaW5zZXJ0QXQnLCB0aGlzKS5jYWxsKHRoaXMsIE1hdGgubWluKGluZGV4LCB0aGlzLmxlbmd0aCgpIC0gMSksIHRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY2hpbGRyZW4udGFpbC5pbnNlcnRBdCh0aGlzLmNoaWxkcmVuLnRhaWwubGVuZ3RoKCksIHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBibG9jayA9IHRoaXM7XG4gICAgICBsaW5lcy5yZWR1Y2UoZnVuY3Rpb24gKGluZGV4LCBsaW5lKSB7XG4gICAgICAgIGJsb2NrID0gYmxvY2suc3BsaXQoaW5kZXgsIHRydWUpO1xuICAgICAgICBibG9jay5pbnNlcnRBdCgwLCBsaW5lKTtcbiAgICAgICAgcmV0dXJuIGxpbmUubGVuZ3RoO1xuICAgICAgfSwgaW5kZXggKyB0ZXh0Lmxlbmd0aCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5zZXJ0QmVmb3JlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0QmVmb3JlKGJsb3QsIHJlZikge1xuICAgICAgdmFyIGhlYWQgPSB0aGlzLmNoaWxkcmVuLmhlYWQ7XG4gICAgICBfZ2V0KEJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrLnByb3RvdHlwZSksICdpbnNlcnRCZWZvcmUnLCB0aGlzKS5jYWxsKHRoaXMsIGJsb3QsIHJlZik7XG4gICAgICBpZiAoaGVhZCBpbnN0YW5jZW9mIF9icmVhazIuZGVmYXVsdCkge1xuICAgICAgICBoZWFkLnJlbW92ZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5jYWNoZSA9IHt9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2xlbmd0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxlbmd0aCgpIHtcbiAgICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuY2FjaGUubGVuZ3RoID0gX2dldChCbG9jay5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCbG9jay5wcm90b3R5cGUpLCAnbGVuZ3RoJywgdGhpcykuY2FsbCh0aGlzKSArIE5FV0xJTkVfTEVOR1RIO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuY2FjaGUubGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ21vdmVDaGlsZHJlbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmVDaGlsZHJlbih0YXJnZXQsIHJlZikge1xuICAgICAgX2dldChCbG9jay5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCbG9jay5wcm90b3R5cGUpLCAnbW92ZUNoaWxkcmVuJywgdGhpcykuY2FsbCh0aGlzLCB0YXJnZXQsIHJlZik7XG4gICAgICB0aGlzLmNhY2hlID0ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb3B0aW1pemUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcHRpbWl6ZShjb250ZXh0KSB7XG4gICAgICBfZ2V0KEJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrLnByb3RvdHlwZSksICdvcHRpbWl6ZScsIHRoaXMpLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICB0aGlzLmNhY2hlID0ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGF0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdGgoaW5kZXgpIHtcbiAgICAgIHJldHVybiBfZ2V0KEJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrLnByb3RvdHlwZSksICdwYXRoJywgdGhpcykuY2FsbCh0aGlzLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlQ2hpbGQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVDaGlsZChjaGlsZCkge1xuICAgICAgX2dldChCbG9jay5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCbG9jay5wcm90b3R5cGUpLCAncmVtb3ZlQ2hpbGQnLCB0aGlzKS5jYWxsKHRoaXMsIGNoaWxkKTtcbiAgICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzcGxpdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNwbGl0KGluZGV4KSB7XG4gICAgICB2YXIgZm9yY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gICAgICBpZiAoZm9yY2UgJiYgKGluZGV4ID09PSAwIHx8IGluZGV4ID49IHRoaXMubGVuZ3RoKCkgLSBORVdMSU5FX0xFTkdUSCkpIHtcbiAgICAgICAgdmFyIGNsb25lID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMpO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShjbG9uZSwgdGhpcy5uZXh0KTtcbiAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBuZXh0ID0gX2dldChCbG9jay5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCbG9jay5wcm90b3R5cGUpLCAnc3BsaXQnLCB0aGlzKS5jYWxsKHRoaXMsIGluZGV4LCBmb3JjZSk7XG4gICAgICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJsb2NrO1xufShfcGFyY2htZW50Mi5kZWZhdWx0LkJsb2NrKTtcblxuQmxvY2suYmxvdE5hbWUgPSAnYmxvY2snO1xuQmxvY2sudGFnTmFtZSA9ICdQJztcbkJsb2NrLmRlZmF1bHRDaGlsZCA9ICdicmVhayc7XG5CbG9jay5hbGxvd2VkQ2hpbGRyZW4gPSBbX2lubGluZTIuZGVmYXVsdCwgX3BhcmNobWVudDIuZGVmYXVsdC5FbWJlZCwgX3RleHQyLmRlZmF1bHRdO1xuXG5mdW5jdGlvbiBidWJibGVGb3JtYXRzKGJsb3QpIHtcbiAgdmFyIGZvcm1hdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIGlmIChibG90ID09IG51bGwpIHJldHVybiBmb3JtYXRzO1xuICBpZiAodHlwZW9mIGJsb3QuZm9ybWF0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvcm1hdHMgPSAoMCwgX2V4dGVuZDIuZGVmYXVsdCkoZm9ybWF0cywgYmxvdC5mb3JtYXRzKCkpO1xuICB9XG4gIGlmIChibG90LnBhcmVudCA9PSBudWxsIHx8IGJsb3QucGFyZW50LmJsb3ROYW1lID09ICdzY3JvbGwnIHx8IGJsb3QucGFyZW50LnN0YXRpY3Muc2NvcGUgIT09IGJsb3Quc3RhdGljcy5zY29wZSkge1xuICAgIHJldHVybiBmb3JtYXRzO1xuICB9XG4gIHJldHVybiBidWJibGVGb3JtYXRzKGJsb3QucGFyZW50LCBmb3JtYXRzKTtcbn1cblxuZXhwb3J0cy5idWJibGVGb3JtYXRzID0gYnViYmxlRm9ybWF0cztcbmV4cG9ydHMuQmxvY2tFbWJlZCA9IEJsb2NrRW1iZWQ7XG5leHBvcnRzLmRlZmF1bHQgPSBCbG9jaztcblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLm92ZXJsb2FkID0gZXhwb3J0cy5leHBhbmRDb25maWcgPSB1bmRlZmluZWQ7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTtcblxudmFyIF9xdWlsbERlbHRhID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxudmFyIF9xdWlsbERlbHRhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1aWxsRGVsdGEpO1xuXG52YXIgX2VkaXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXG52YXIgX2VkaXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lZGl0b3IpO1xuXG52YXIgX2VtaXR0ZXIzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxudmFyIF9lbWl0dGVyNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VtaXR0ZXIzKTtcblxudmFyIF9tb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXG52YXIgX21vZHVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb2R1bGUpO1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbnZhciBfc2VsZWN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cbnZhciBfc2VsZWN0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGVjdGlvbik7XG5cbnZhciBfZXh0ZW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9leHRlbmQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kKTtcblxudmFyIF9sb2dnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxudmFyIF9sb2dnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9nZ2VyKTtcblxudmFyIF90aGVtZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xuXG52YXIgX3RoZW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RoZW1lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIGRlYnVnID0gKDAsIF9sb2dnZXIyLmRlZmF1bHQpKCdxdWlsbCcpO1xuXG52YXIgUXVpbGwgPSBmdW5jdGlvbiAoKSB7XG4gIF9jcmVhdGVDbGFzcyhRdWlsbCwgbnVsbCwgW3tcbiAgICBrZXk6ICdkZWJ1ZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlYnVnKGxpbWl0KSB7XG4gICAgICBpZiAobGltaXQgPT09IHRydWUpIHtcbiAgICAgICAgbGltaXQgPSAnbG9nJztcbiAgICAgIH1cbiAgICAgIF9sb2dnZXIyLmRlZmF1bHQubGV2ZWwobGltaXQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2ZpbmQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kKG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlLl9fcXVpbGwgfHwgX3BhcmNobWVudDIuZGVmYXVsdC5maW5kKG5vZGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2ltcG9ydCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbXBvcnQobmFtZSkge1xuICAgICAgaWYgKHRoaXMuaW1wb3J0c1tuYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIGRlYnVnLmVycm9yKCdDYW5ub3QgaW1wb3J0ICcgKyBuYW1lICsgJy4gQXJlIHlvdSBzdXJlIGl0IHdhcyByZWdpc3RlcmVkPycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuaW1wb3J0c1tuYW1lXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZWdpc3RlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyKHBhdGgsIHRhcmdldCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG92ZXJ3cml0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBwYXRoLmF0dHJOYW1lIHx8IHBhdGguYmxvdE5hbWU7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAvLyByZWdpc3RlcihCbG90IHwgQXR0cmlidXRvciwgb3ZlcndyaXRlKVxuICAgICAgICAgIHRoaXMucmVnaXN0ZXIoJ2Zvcm1hdHMvJyArIG5hbWUsIHBhdGgsIHRhcmdldCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgT2JqZWN0LmtleXMocGF0aCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBfdGhpcy5yZWdpc3RlcihrZXksIHBhdGhba2V5XSwgdGFyZ2V0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuaW1wb3J0c1twYXRoXSAhPSBudWxsICYmICFvdmVyd3JpdGUpIHtcbiAgICAgICAgICBkZWJ1Zy53YXJuKCdPdmVyd3JpdGluZyAnICsgcGF0aCArICcgd2l0aCcsIHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbXBvcnRzW3BhdGhdID0gdGFyZ2V0O1xuICAgICAgICBpZiAoKHBhdGguc3RhcnRzV2l0aCgnYmxvdHMvJykgfHwgcGF0aC5zdGFydHNXaXRoKCdmb3JtYXRzLycpKSAmJiB0YXJnZXQuYmxvdE5hbWUgIT09ICdhYnN0cmFjdCcpIHtcbiAgICAgICAgICBfcGFyY2htZW50Mi5kZWZhdWx0LnJlZ2lzdGVyKHRhcmdldCk7XG4gICAgICAgIH0gZWxzZSBpZiAocGF0aC5zdGFydHNXaXRoKCdtb2R1bGVzJykgJiYgdHlwZW9mIHRhcmdldC5yZWdpc3RlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRhcmdldC5yZWdpc3RlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgZnVuY3Rpb24gUXVpbGwoY29udGFpbmVyKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUXVpbGwpO1xuXG4gICAgdGhpcy5vcHRpb25zID0gZXhwYW5kQ29uZmlnKGNvbnRhaW5lciwgb3B0aW9ucyk7XG4gICAgdGhpcy5jb250YWluZXIgPSB0aGlzLm9wdGlvbnMuY29udGFpbmVyO1xuICAgIGlmICh0aGlzLmNvbnRhaW5lciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZGVidWcuZXJyb3IoJ0ludmFsaWQgUXVpbGwgY29udGFpbmVyJywgY29udGFpbmVyKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5kZWJ1Zykge1xuICAgICAgUXVpbGwuZGVidWcodGhpcy5vcHRpb25zLmRlYnVnKTtcbiAgICB9XG4gICAgdmFyIGh0bWwgPSB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwudHJpbSgpO1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3FsLWNvbnRhaW5lcicpO1xuICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgIHRoaXMuY29udGFpbmVyLl9fcXVpbGwgPSB0aGlzO1xuICAgIHRoaXMucm9vdCA9IHRoaXMuYWRkQ29udGFpbmVyKCdxbC1lZGl0b3InKTtcbiAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LmFkZCgncWwtYmxhbmsnKTtcbiAgICB0aGlzLnJvb3Quc2V0QXR0cmlidXRlKCdkYXRhLWdyYW1tJywgZmFsc2UpO1xuICAgIHRoaXMuc2Nyb2xsaW5nQ29udGFpbmVyID0gdGhpcy5vcHRpb25zLnNjcm9sbGluZ0NvbnRhaW5lciB8fCB0aGlzLnJvb3Q7XG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IF9lbWl0dGVyNC5kZWZhdWx0KCk7XG4gICAgdGhpcy5zY3JvbGwgPSBfcGFyY2htZW50Mi5kZWZhdWx0LmNyZWF0ZSh0aGlzLnJvb3QsIHtcbiAgICAgIGVtaXR0ZXI6IHRoaXMuZW1pdHRlcixcbiAgICAgIHdoaXRlbGlzdDogdGhpcy5vcHRpb25zLmZvcm1hdHNcbiAgICB9KTtcbiAgICB0aGlzLmVkaXRvciA9IG5ldyBfZWRpdG9yMi5kZWZhdWx0KHRoaXMuc2Nyb2xsKTtcbiAgICB0aGlzLnNlbGVjdGlvbiA9IG5ldyBfc2VsZWN0aW9uMi5kZWZhdWx0KHRoaXMuc2Nyb2xsLCB0aGlzLmVtaXR0ZXIpO1xuICAgIHRoaXMudGhlbWUgPSBuZXcgdGhpcy5vcHRpb25zLnRoZW1lKHRoaXMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5rZXlib2FyZCA9IHRoaXMudGhlbWUuYWRkTW9kdWxlKCdrZXlib2FyZCcpO1xuICAgIHRoaXMuY2xpcGJvYXJkID0gdGhpcy50aGVtZS5hZGRNb2R1bGUoJ2NsaXBib2FyZCcpO1xuICAgIHRoaXMuaGlzdG9yeSA9IHRoaXMudGhlbWUuYWRkTW9kdWxlKCdoaXN0b3J5Jyk7XG4gICAgdGhpcy50aGVtZS5pbml0KCk7XG4gICAgdGhpcy5lbWl0dGVyLm9uKF9lbWl0dGVyNC5kZWZhdWx0LmV2ZW50cy5FRElUT1JfQ0hBTkdFLCBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgaWYgKHR5cGUgPT09IF9lbWl0dGVyNC5kZWZhdWx0LmV2ZW50cy5URVhUX0NIQU5HRSkge1xuICAgICAgICBfdGhpczIucm9vdC5jbGFzc0xpc3QudG9nZ2xlKCdxbC1ibGFuaycsIF90aGlzMi5lZGl0b3IuaXNCbGFuaygpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmVtaXR0ZXIub24oX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9VUERBVEUsIGZ1bmN0aW9uIChzb3VyY2UsIG11dGF0aW9ucykge1xuICAgICAgdmFyIHJhbmdlID0gX3RoaXMyLnNlbGVjdGlvbi5sYXN0UmFuZ2U7XG4gICAgICB2YXIgaW5kZXggPSByYW5nZSAmJiByYW5nZS5sZW5ndGggPT09IDAgPyByYW5nZS5pbmRleCA6IHVuZGVmaW5lZDtcbiAgICAgIG1vZGlmeS5jYWxsKF90aGlzMiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLmVkaXRvci51cGRhdGUobnVsbCwgbXV0YXRpb25zLCBpbmRleCk7XG4gICAgICB9LCBzb3VyY2UpO1xuICAgIH0pO1xuICAgIHZhciBjb250ZW50cyA9IHRoaXMuY2xpcGJvYXJkLmNvbnZlcnQoJzxkaXYgY2xhc3M9XFwncWwtZWRpdG9yXFwnIHN0eWxlPVwid2hpdGUtc3BhY2U6IG5vcm1hbDtcIj4nICsgaHRtbCArICc8cD48YnI+PC9wPjwvZGl2PicpO1xuICAgIHRoaXMuc2V0Q29udGVudHMoY29udGVudHMpO1xuICAgIHRoaXMuaGlzdG9yeS5jbGVhcigpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMucGxhY2Vob2xkZXIpIHtcbiAgICAgIHRoaXMucm9vdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcGxhY2Vob2xkZXInLCB0aGlzLm9wdGlvbnMucGxhY2Vob2xkZXIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnJlYWRPbmx5KSB7XG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICB9XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUXVpbGwsIFt7XG4gICAga2V5OiAnYWRkQ29udGFpbmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ29udGFpbmVyKGNvbnRhaW5lcikge1xuICAgICAgdmFyIHJlZk5vZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG5cbiAgICAgIGlmICh0eXBlb2YgY29udGFpbmVyID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgY2xhc3NOYW1lID0gY29udGFpbmVyO1xuICAgICAgICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY29udGFpbmVyLmluc2VydEJlZm9yZShjb250YWluZXIsIHJlZk5vZGUpO1xuICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdibHVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmx1cigpIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uLnNldFJhbmdlKG51bGwpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RlbGV0ZVRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVUZXh0KGluZGV4LCBsZW5ndGgsIHNvdXJjZSkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQgPSBvdmVybG9hZChpbmRleCwgbGVuZ3RoLCBzb3VyY2UpO1xuXG4gICAgICB2YXIgX292ZXJsb2FkMiA9IF9zbGljZWRUb0FycmF5KF9vdmVybG9hZCwgNCk7XG5cbiAgICAgIGluZGV4ID0gX292ZXJsb2FkMlswXTtcbiAgICAgIGxlbmd0aCA9IF9vdmVybG9hZDJbMV07XG4gICAgICBzb3VyY2UgPSBfb3ZlcmxvYWQyWzNdO1xuXG4gICAgICByZXR1cm4gbW9kaWZ5LmNhbGwodGhpcywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMzLmVkaXRvci5kZWxldGVUZXh0KGluZGV4LCBsZW5ndGgpO1xuICAgICAgfSwgc291cmNlLCBpbmRleCwgLTEgKiBsZW5ndGgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rpc2FibGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgICAgdGhpcy5lbmFibGUoZmFsc2UpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VuYWJsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIHZhciBlbmFibGVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0cnVlO1xuXG4gICAgICB0aGlzLnNjcm9sbC5lbmFibGUoZW5hYmxlZCk7XG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKCdxbC1kaXNhYmxlZCcsICFlbmFibGVkKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb2N1cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcDtcbiAgICAgIHRoaXMuc2VsZWN0aW9uLmZvY3VzKCk7XG4gICAgICB0aGlzLnNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICB0aGlzLnNjcm9sbEludG9WaWV3KCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0KG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5BUEk7XG5cbiAgICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByYW5nZSA9IF90aGlzNC5nZXRTZWxlY3Rpb24odHJ1ZSk7XG4gICAgICAgIHZhciBjaGFuZ2UgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKTtcbiAgICAgICAgaWYgKHJhbmdlID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gY2hhbmdlO1xuICAgICAgICB9IGVsc2UgaWYgKF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkobmFtZSwgX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5CTE9DSykpIHtcbiAgICAgICAgICBjaGFuZ2UgPSBfdGhpczQuZWRpdG9yLmZvcm1hdExpbmUocmFuZ2UuaW5kZXgsIHJhbmdlLmxlbmd0aCwgX2RlZmluZVByb3BlcnR5KHt9LCBuYW1lLCB2YWx1ZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHJhbmdlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIF90aGlzNC5zZWxlY3Rpb24uZm9ybWF0KG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gY2hhbmdlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZSA9IF90aGlzNC5lZGl0b3IuZm9ybWF0VGV4dChyYW5nZS5pbmRleCwgcmFuZ2UubGVuZ3RoLCBfZGVmaW5lUHJvcGVydHkoe30sIG5hbWUsIHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXM0LnNldFNlbGVjdGlvbihyYW5nZSwgX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5TSUxFTlQpO1xuICAgICAgICByZXR1cm4gY2hhbmdlO1xuICAgICAgfSwgc291cmNlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRMaW5lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0TGluZShpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSwgc291cmNlKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdmFyIGZvcm1hdHMgPSB2b2lkIDA7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQzID0gb3ZlcmxvYWQoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUsIHNvdXJjZSk7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQ0ID0gX3NsaWNlZFRvQXJyYXkoX292ZXJsb2FkMywgNCk7XG5cbiAgICAgIGluZGV4ID0gX292ZXJsb2FkNFswXTtcbiAgICAgIGxlbmd0aCA9IF9vdmVybG9hZDRbMV07XG4gICAgICBmb3JtYXRzID0gX292ZXJsb2FkNFsyXTtcbiAgICAgIHNvdXJjZSA9IF9vdmVybG9hZDRbM107XG5cbiAgICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczUuZWRpdG9yLmZvcm1hdExpbmUoaW5kZXgsIGxlbmd0aCwgZm9ybWF0cyk7XG4gICAgICB9LCBzb3VyY2UsIGluZGV4LCAwKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRUZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0VGV4dChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSwgc291cmNlKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgdmFyIGZvcm1hdHMgPSB2b2lkIDA7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQ1ID0gb3ZlcmxvYWQoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUsIHNvdXJjZSk7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQ2ID0gX3NsaWNlZFRvQXJyYXkoX292ZXJsb2FkNSwgNCk7XG5cbiAgICAgIGluZGV4ID0gX292ZXJsb2FkNlswXTtcbiAgICAgIGxlbmd0aCA9IF9vdmVybG9hZDZbMV07XG4gICAgICBmb3JtYXRzID0gX292ZXJsb2FkNlsyXTtcbiAgICAgIHNvdXJjZSA9IF9vdmVybG9hZDZbM107XG5cbiAgICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczYuZWRpdG9yLmZvcm1hdFRleHQoaW5kZXgsIGxlbmd0aCwgZm9ybWF0cyk7XG4gICAgICB9LCBzb3VyY2UsIGluZGV4LCAwKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRCb3VuZHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCb3VuZHMoaW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cbiAgICAgIHZhciBib3VuZHMgPSB2b2lkIDA7XG4gICAgICBpZiAodHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICBib3VuZHMgPSB0aGlzLnNlbGVjdGlvbi5nZXRCb3VuZHMoaW5kZXgsIGxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBib3VuZHMgPSB0aGlzLnNlbGVjdGlvbi5nZXRCb3VuZHMoaW5kZXguaW5kZXgsIGluZGV4Lmxlbmd0aCk7XG4gICAgICB9XG4gICAgICB2YXIgY29udGFpbmVyQm91bmRzID0gdGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBib3R0b206IGJvdW5kcy5ib3R0b20gLSBjb250YWluZXJCb3VuZHMudG9wLFxuICAgICAgICBoZWlnaHQ6IGJvdW5kcy5oZWlnaHQsXG4gICAgICAgIGxlZnQ6IGJvdW5kcy5sZWZ0IC0gY29udGFpbmVyQm91bmRzLmxlZnQsXG4gICAgICAgIHJpZ2h0OiBib3VuZHMucmlnaHQgLSBjb250YWluZXJCb3VuZHMubGVmdCxcbiAgICAgICAgdG9wOiBib3VuZHMudG9wIC0gY29udGFpbmVyQm91bmRzLnRvcCxcbiAgICAgICAgd2lkdGg6IGJvdW5kcy53aWR0aFxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRDb250ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbnRlbnRzKCkge1xuICAgICAgdmFyIGluZGV4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy5nZXRMZW5ndGgoKSAtIGluZGV4O1xuXG4gICAgICB2YXIgX292ZXJsb2FkNyA9IG92ZXJsb2FkKGluZGV4LCBsZW5ndGgpO1xuXG4gICAgICB2YXIgX292ZXJsb2FkOCA9IF9zbGljZWRUb0FycmF5KF9vdmVybG9hZDcsIDIpO1xuXG4gICAgICBpbmRleCA9IF9vdmVybG9hZDhbMF07XG4gICAgICBsZW5ndGggPSBfb3ZlcmxvYWQ4WzFdO1xuXG4gICAgICByZXR1cm4gdGhpcy5lZGl0b3IuZ2V0Q29udGVudHMoaW5kZXgsIGxlbmd0aCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0Rm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Rm9ybWF0KCkge1xuICAgICAgdmFyIGluZGV4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLmdldFNlbGVjdGlvbih0cnVlKTtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cbiAgICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRvci5nZXRGb3JtYXQoaW5kZXgsIGxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5lZGl0b3IuZ2V0Rm9ybWF0KGluZGV4LmluZGV4LCBpbmRleC5sZW5ndGgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEluZGV4JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5kZXgoYmxvdCkge1xuICAgICAgcmV0dXJuIGJsb3Qub2Zmc2V0KHRoaXMuc2Nyb2xsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRMZW5ndGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMZW5ndGgoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zY3JvbGwubGVuZ3RoKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0TGVhZicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldExlYWYoaW5kZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNjcm9sbC5sZWFmKGluZGV4KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRMaW5lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGluZShpbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsLmxpbmUoaW5kZXgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldExpbmVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGluZXMoKSB7XG4gICAgICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBOdW1iZXIuTUFYX1ZBTFVFO1xuXG4gICAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGwubGluZXMoaW5kZXguaW5kZXgsIGluZGV4Lmxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGwubGluZXMoaW5kZXgsIGxlbmd0aCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0TW9kdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TW9kdWxlKG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW1lLm1vZHVsZXNbbmFtZV07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0U2VsZWN0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2VsZWN0aW9uKCkge1xuICAgICAgdmFyIGZvY3VzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgICAgaWYgKGZvY3VzKSB0aGlzLmZvY3VzKCk7XG4gICAgICB0aGlzLnVwZGF0ZSgpOyAvLyBNYWtlIHN1cmUgd2UgYWNjZXNzIGdldFJhbmdlIHdpdGggZWRpdG9yIGluIGNvbnNpc3RlbnQgc3RhdGVcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpWzBdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUZXh0KCkge1xuICAgICAgdmFyIGluZGV4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy5nZXRMZW5ndGgoKSAtIGluZGV4O1xuXG4gICAgICB2YXIgX292ZXJsb2FkOSA9IG92ZXJsb2FkKGluZGV4LCBsZW5ndGgpO1xuXG4gICAgICB2YXIgX292ZXJsb2FkMTAgPSBfc2xpY2VkVG9BcnJheShfb3ZlcmxvYWQ5LCAyKTtcblxuICAgICAgaW5kZXggPSBfb3ZlcmxvYWQxMFswXTtcbiAgICAgIGxlbmd0aCA9IF9vdmVybG9hZDEwWzFdO1xuXG4gICAgICByZXR1cm4gdGhpcy5lZGl0b3IuZ2V0VGV4dChpbmRleCwgbGVuZ3RoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdoYXNGb2N1cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc0ZvY3VzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uLmhhc0ZvY3VzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5zZXJ0RW1iZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRFbWJlZChpbmRleCwgZW1iZWQsIHZhbHVlKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogUXVpbGwuc291cmNlcy5BUEk7XG5cbiAgICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczcuZWRpdG9yLmluc2VydEVtYmVkKGluZGV4LCBlbWJlZCwgdmFsdWUpO1xuICAgICAgfSwgc291cmNlLCBpbmRleCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5zZXJ0VGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydFRleHQoaW5kZXgsIHRleHQsIG5hbWUsIHZhbHVlLCBzb3VyY2UpIHtcbiAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgICB2YXIgZm9ybWF0cyA9IHZvaWQgMDtcblxuICAgICAgdmFyIF9vdmVybG9hZDExID0gb3ZlcmxvYWQoaW5kZXgsIDAsIG5hbWUsIHZhbHVlLCBzb3VyY2UpO1xuXG4gICAgICB2YXIgX292ZXJsb2FkMTIgPSBfc2xpY2VkVG9BcnJheShfb3ZlcmxvYWQxMSwgNCk7XG5cbiAgICAgIGluZGV4ID0gX292ZXJsb2FkMTJbMF07XG4gICAgICBmb3JtYXRzID0gX292ZXJsb2FkMTJbMl07XG4gICAgICBzb3VyY2UgPSBfb3ZlcmxvYWQxMlszXTtcblxuICAgICAgcmV0dXJuIG1vZGlmeS5jYWxsKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzOC5lZGl0b3IuaW5zZXJ0VGV4dChpbmRleCwgdGV4dCwgZm9ybWF0cyk7XG4gICAgICB9LCBzb3VyY2UsIGluZGV4LCB0ZXh0Lmxlbmd0aCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaXNFbmFibGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNFbmFibGVkKCkge1xuICAgICAgcmV0dXJuICF0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWRpc2FibGVkJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb2ZmJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb2ZmKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vZmYuYXBwbHkodGhpcy5lbWl0dGVyLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uLmFwcGx5KHRoaXMuZW1pdHRlciwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvbmNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25jZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub25jZS5hcHBseSh0aGlzLmVtaXR0ZXIsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGFzdGVIVE1MJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFzdGVIVE1MKGluZGV4LCBodG1sLCBzb3VyY2UpIHtcbiAgICAgIHRoaXMuY2xpcGJvYXJkLmRhbmdlcm91c2x5UGFzdGVIVE1MKGluZGV4LCBodG1sLCBzb3VyY2UpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbW92ZUZvcm1hdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUZvcm1hdChpbmRleCwgbGVuZ3RoLCBzb3VyY2UpIHtcbiAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgICB2YXIgX292ZXJsb2FkMTMgPSBvdmVybG9hZChpbmRleCwgbGVuZ3RoLCBzb3VyY2UpO1xuXG4gICAgICB2YXIgX292ZXJsb2FkMTQgPSBfc2xpY2VkVG9BcnJheShfb3ZlcmxvYWQxMywgNCk7XG5cbiAgICAgIGluZGV4ID0gX292ZXJsb2FkMTRbMF07XG4gICAgICBsZW5ndGggPSBfb3ZlcmxvYWQxNFsxXTtcbiAgICAgIHNvdXJjZSA9IF9vdmVybG9hZDE0WzNdO1xuXG4gICAgICByZXR1cm4gbW9kaWZ5LmNhbGwodGhpcywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM5LmVkaXRvci5yZW1vdmVGb3JtYXQoaW5kZXgsIGxlbmd0aCk7XG4gICAgICB9LCBzb3VyY2UsIGluZGV4KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzY3JvbGxJbnRvVmlldycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNjcm9sbEludG9WaWV3KCkge1xuICAgICAgdGhpcy5zZWxlY3Rpb24uc2Nyb2xsSW50b1ZpZXcodGhpcy5zY3JvbGxpbmdDb250YWluZXIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldENvbnRlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q29udGVudHMoZGVsdGEpIHtcbiAgICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5BUEk7XG5cbiAgICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlbHRhID0gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KGRlbHRhKTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IF90aGlzMTAuZ2V0TGVuZ3RoKCk7XG4gICAgICAgIHZhciBkZWxldGVkID0gX3RoaXMxMC5lZGl0b3IuZGVsZXRlVGV4dCgwLCBsZW5ndGgpO1xuICAgICAgICB2YXIgYXBwbGllZCA9IF90aGlzMTAuZWRpdG9yLmFwcGx5RGVsdGEoZGVsdGEpO1xuICAgICAgICB2YXIgbGFzdE9wID0gYXBwbGllZC5vcHNbYXBwbGllZC5vcHMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChsYXN0T3AgIT0gbnVsbCAmJiB0eXBlb2YgbGFzdE9wLmluc2VydCA9PT0gJ3N0cmluZycgJiYgbGFzdE9wLmluc2VydFtsYXN0T3AuaW5zZXJ0Lmxlbmd0aCAtIDFdID09PSAnXFxuJykge1xuICAgICAgICAgIF90aGlzMTAuZWRpdG9yLmRlbGV0ZVRleHQoX3RoaXMxMC5nZXRMZW5ndGgoKSAtIDEsIDEpO1xuICAgICAgICAgIGFwcGxpZWQuZGVsZXRlKDEpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXQgPSBkZWxldGVkLmNvbXBvc2UoYXBwbGllZCk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9LCBzb3VyY2UpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFNlbGVjdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNlbGVjdGlvbihpbmRleCwgbGVuZ3RoLCBzb3VyY2UpIHtcbiAgICAgIGlmIChpbmRleCA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uLnNldFJhbmdlKG51bGwsIGxlbmd0aCB8fCBRdWlsbC5zb3VyY2VzLkFQSSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX292ZXJsb2FkMTUgPSBvdmVybG9hZChpbmRleCwgbGVuZ3RoLCBzb3VyY2UpO1xuXG4gICAgICAgIHZhciBfb3ZlcmxvYWQxNiA9IF9zbGljZWRUb0FycmF5KF9vdmVybG9hZDE1LCA0KTtcblxuICAgICAgICBpbmRleCA9IF9vdmVybG9hZDE2WzBdO1xuICAgICAgICBsZW5ndGggPSBfb3ZlcmxvYWQxNlsxXTtcbiAgICAgICAgc291cmNlID0gX292ZXJsb2FkMTZbM107XG5cbiAgICAgICAgdGhpcy5zZWxlY3Rpb24uc2V0UmFuZ2UobmV3IF9zZWxlY3Rpb24uUmFuZ2UoaW5kZXgsIGxlbmd0aCksIHNvdXJjZSk7XG4gICAgICAgIGlmIChzb3VyY2UgIT09IF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3Rpb24uc2Nyb2xsSW50b1ZpZXcodGhpcy5zY3JvbGxpbmdDb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0VGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRleHQodGV4dCkge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5BUEk7XG5cbiAgICAgIHZhciBkZWx0YSA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLmluc2VydCh0ZXh0KTtcbiAgICAgIHJldHVybiB0aGlzLnNldENvbnRlbnRzKGRlbHRhLCBzb3VyY2UpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXMuVVNFUjtcblxuICAgICAgdmFyIGNoYW5nZSA9IHRoaXMuc2Nyb2xsLnVwZGF0ZShzb3VyY2UpOyAvLyBXaWxsIHVwZGF0ZSBzZWxlY3Rpb24gYmVmb3JlIHNlbGVjdGlvbi51cGRhdGUoKSBkb2VzIGlmIHRleHQgY2hhbmdlc1xuICAgICAgdGhpcy5zZWxlY3Rpb24udXBkYXRlKHNvdXJjZSk7XG4gICAgICByZXR1cm4gY2hhbmdlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZUNvbnRlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlQ29udGVudHMoZGVsdGEpIHtcbiAgICAgIHZhciBfdGhpczExID0gdGhpcztcblxuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5BUEk7XG5cbiAgICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlbHRhID0gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KGRlbHRhKTtcbiAgICAgICAgcmV0dXJuIF90aGlzMTEuZWRpdG9yLmFwcGx5RGVsdGEoZGVsdGEsIHNvdXJjZSk7XG4gICAgICB9LCBzb3VyY2UsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBRdWlsbDtcbn0oKTtcblxuUXVpbGwuREVGQVVMVFMgPSB7XG4gIGJvdW5kczogbnVsbCxcbiAgZm9ybWF0czogbnVsbCxcbiAgbW9kdWxlczoge30sXG4gIHBsYWNlaG9sZGVyOiAnJyxcbiAgcmVhZE9ubHk6IGZhbHNlLFxuICBzY3JvbGxpbmdDb250YWluZXI6IG51bGwsXG4gIHN0cmljdDogdHJ1ZSxcbiAgdGhlbWU6ICdkZWZhdWx0J1xufTtcblF1aWxsLmV2ZW50cyA9IF9lbWl0dGVyNC5kZWZhdWx0LmV2ZW50cztcblF1aWxsLnNvdXJjZXMgPSBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5RdWlsbC52ZXJzaW9uID0gIGZhbHNlID8gJ2RldicgOiBcIjEuMy42XCI7XG5cblF1aWxsLmltcG9ydHMgPSB7XG4gICdkZWx0YSc6IF9xdWlsbERlbHRhMi5kZWZhdWx0LFxuICAncGFyY2htZW50JzogX3BhcmNobWVudDIuZGVmYXVsdCxcbiAgJ2NvcmUvbW9kdWxlJzogX21vZHVsZTIuZGVmYXVsdCxcbiAgJ2NvcmUvdGhlbWUnOiBfdGhlbWUyLmRlZmF1bHRcbn07XG5cbmZ1bmN0aW9uIGV4cGFuZENvbmZpZyhjb250YWluZXIsIHVzZXJDb25maWcpIHtcbiAgdXNlckNvbmZpZyA9ICgwLCBfZXh0ZW5kMi5kZWZhdWx0KSh0cnVlLCB7XG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgbW9kdWxlczoge1xuICAgICAgY2xpcGJvYXJkOiB0cnVlLFxuICAgICAga2V5Ym9hcmQ6IHRydWUsXG4gICAgICBoaXN0b3J5OiB0cnVlXG4gICAgfVxuICB9LCB1c2VyQ29uZmlnKTtcbiAgaWYgKCF1c2VyQ29uZmlnLnRoZW1lIHx8IHVzZXJDb25maWcudGhlbWUgPT09IFF1aWxsLkRFRkFVTFRTLnRoZW1lKSB7XG4gICAgdXNlckNvbmZpZy50aGVtZSA9IF90aGVtZTIuZGVmYXVsdDtcbiAgfSBlbHNlIHtcbiAgICB1c2VyQ29uZmlnLnRoZW1lID0gUXVpbGwuaW1wb3J0KCd0aGVtZXMvJyArIHVzZXJDb25maWcudGhlbWUpO1xuICAgIGlmICh1c2VyQ29uZmlnLnRoZW1lID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0aGVtZSAnICsgdXNlckNvbmZpZy50aGVtZSArICcuIERpZCB5b3UgcmVnaXN0ZXIgaXQ/Jyk7XG4gICAgfVxuICB9XG4gIHZhciB0aGVtZUNvbmZpZyA9ICgwLCBfZXh0ZW5kMi5kZWZhdWx0KSh0cnVlLCB7fSwgdXNlckNvbmZpZy50aGVtZS5ERUZBVUxUUyk7XG4gIFt0aGVtZUNvbmZpZywgdXNlckNvbmZpZ10uZm9yRWFjaChmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgY29uZmlnLm1vZHVsZXMgPSBjb25maWcubW9kdWxlcyB8fCB7fTtcbiAgICBPYmplY3Qua2V5cyhjb25maWcubW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlKSB7XG4gICAgICBpZiAoY29uZmlnLm1vZHVsZXNbbW9kdWxlXSA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25maWcubW9kdWxlc1ttb2R1bGVdID0ge307XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICB2YXIgbW9kdWxlTmFtZXMgPSBPYmplY3Qua2V5cyh0aGVtZUNvbmZpZy5tb2R1bGVzKS5jb25jYXQoT2JqZWN0LmtleXModXNlckNvbmZpZy5tb2R1bGVzKSk7XG4gIHZhciBtb2R1bGVDb25maWcgPSBtb2R1bGVOYW1lcy5yZWR1Y2UoZnVuY3Rpb24gKGNvbmZpZywgbmFtZSkge1xuICAgIHZhciBtb2R1bGVDbGFzcyA9IFF1aWxsLmltcG9ydCgnbW9kdWxlcy8nICsgbmFtZSk7XG4gICAgaWYgKG1vZHVsZUNsYXNzID09IG51bGwpIHtcbiAgICAgIGRlYnVnLmVycm9yKCdDYW5ub3QgbG9hZCAnICsgbmFtZSArICcgbW9kdWxlLiBBcmUgeW91IHN1cmUgeW91IHJlZ2lzdGVyZWQgaXQ/Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZ1tuYW1lXSA9IG1vZHVsZUNsYXNzLkRFRkFVTFRTIHx8IHt9O1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnO1xuICB9LCB7fSk7XG4gIC8vIFNwZWNpYWwgY2FzZSB0b29sYmFyIHNob3J0aGFuZFxuICBpZiAodXNlckNvbmZpZy5tb2R1bGVzICE9IG51bGwgJiYgdXNlckNvbmZpZy5tb2R1bGVzLnRvb2xiYXIgJiYgdXNlckNvbmZpZy5tb2R1bGVzLnRvb2xiYXIuY29uc3RydWN0b3IgIT09IE9iamVjdCkge1xuICAgIHVzZXJDb25maWcubW9kdWxlcy50b29sYmFyID0ge1xuICAgICAgY29udGFpbmVyOiB1c2VyQ29uZmlnLm1vZHVsZXMudG9vbGJhclxuICAgIH07XG4gIH1cbiAgdXNlckNvbmZpZyA9ICgwLCBfZXh0ZW5kMi5kZWZhdWx0KSh0cnVlLCB7fSwgUXVpbGwuREVGQVVMVFMsIHsgbW9kdWxlczogbW9kdWxlQ29uZmlnIH0sIHRoZW1lQ29uZmlnLCB1c2VyQ29uZmlnKTtcbiAgWydib3VuZHMnLCAnY29udGFpbmVyJywgJ3Njcm9sbGluZ0NvbnRhaW5lciddLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICh0eXBlb2YgdXNlckNvbmZpZ1trZXldID09PSAnc3RyaW5nJykge1xuICAgICAgdXNlckNvbmZpZ1trZXldID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih1c2VyQ29uZmlnW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHVzZXJDb25maWcubW9kdWxlcyA9IE9iamVjdC5rZXlzKHVzZXJDb25maWcubW9kdWxlcykucmVkdWNlKGZ1bmN0aW9uIChjb25maWcsIG5hbWUpIHtcbiAgICBpZiAodXNlckNvbmZpZy5tb2R1bGVzW25hbWVdKSB7XG4gICAgICBjb25maWdbbmFtZV0gPSB1c2VyQ29uZmlnLm1vZHVsZXNbbmFtZV07XG4gICAgfVxuICAgIHJldHVybiBjb25maWc7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIHVzZXJDb25maWc7XG59XG5cbi8vIEhhbmRsZSBzZWxlY3Rpb24gcHJlc2VydmF0aW9uIGFuZCBURVhUX0NIQU5HRSBlbWlzc2lvblxuLy8gY29tbW9uIHRvIG1vZGlmaWNhdGlvbiBBUElzXG5mdW5jdGlvbiBtb2RpZnkobW9kaWZpZXIsIHNvdXJjZSwgaW5kZXgsIHNoaWZ0KSB7XG4gIGlmICh0aGlzLm9wdGlvbnMuc3RyaWN0ICYmICF0aGlzLmlzRW5hYmxlZCgpICYmIHNvdXJjZSA9PT0gX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5VU0VSKSB7XG4gICAgcmV0dXJuIG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpO1xuICB9XG4gIHZhciByYW5nZSA9IGluZGV4ID09IG51bGwgPyBudWxsIDogdGhpcy5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIG9sZERlbHRhID0gdGhpcy5lZGl0b3IuZGVsdGE7XG4gIHZhciBjaGFuZ2UgPSBtb2RpZmllcigpO1xuICBpZiAocmFuZ2UgIT0gbnVsbCkge1xuICAgIGlmIChpbmRleCA9PT0gdHJ1ZSkgaW5kZXggPSByYW5nZS5pbmRleDtcbiAgICBpZiAoc2hpZnQgPT0gbnVsbCkge1xuICAgICAgcmFuZ2UgPSBzaGlmdFJhbmdlKHJhbmdlLCBjaGFuZ2UsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmIChzaGlmdCAhPT0gMCkge1xuICAgICAgcmFuZ2UgPSBzaGlmdFJhbmdlKHJhbmdlLCBpbmRleCwgc2hpZnQsIHNvdXJjZSk7XG4gICAgfVxuICAgIHRoaXMuc2V0U2VsZWN0aW9uKHJhbmdlLCBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gIH1cbiAgaWYgKGNoYW5nZS5sZW5ndGgoKSA+IDApIHtcbiAgICB2YXIgX2VtaXR0ZXI7XG5cbiAgICB2YXIgYXJncyA9IFtfZW1pdHRlcjQuZGVmYXVsdC5ldmVudHMuVEVYVF9DSEFOR0UsIGNoYW5nZSwgb2xkRGVsdGEsIHNvdXJjZV07XG4gICAgKF9lbWl0dGVyID0gdGhpcy5lbWl0dGVyKS5lbWl0LmFwcGx5KF9lbWl0dGVyLCBbX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzLkVESVRPUl9DSEFOR0VdLmNvbmNhdChhcmdzKSk7XG4gICAgaWYgKHNvdXJjZSAhPT0gX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5TSUxFTlQpIHtcbiAgICAgIHZhciBfZW1pdHRlcjI7XG5cbiAgICAgIChfZW1pdHRlcjIgPSB0aGlzLmVtaXR0ZXIpLmVtaXQuYXBwbHkoX2VtaXR0ZXIyLCBhcmdzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoYW5nZTtcbn1cblxuZnVuY3Rpb24gb3ZlcmxvYWQoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUsIHNvdXJjZSkge1xuICB2YXIgZm9ybWF0cyA9IHt9O1xuICBpZiAodHlwZW9mIGluZGV4LmluZGV4ID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgaW5kZXgubGVuZ3RoID09PSAnbnVtYmVyJykge1xuICAgIC8vIEFsbG93IGZvciB0aHJvd2F3YXkgZW5kICh1c2VkIGJ5IGluc2VydFRleHQvaW5zZXJ0RW1iZWQpXG4gICAgaWYgKHR5cGVvZiBsZW5ndGggIT09ICdudW1iZXInKSB7XG4gICAgICBzb3VyY2UgPSB2YWx1ZSwgdmFsdWUgPSBuYW1lLCBuYW1lID0gbGVuZ3RoLCBsZW5ndGggPSBpbmRleC5sZW5ndGgsIGluZGV4ID0gaW5kZXguaW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IGluZGV4Lmxlbmd0aCwgaW5kZXggPSBpbmRleC5pbmRleDtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIGxlbmd0aCAhPT0gJ251bWJlcicpIHtcbiAgICBzb3VyY2UgPSB2YWx1ZSwgdmFsdWUgPSBuYW1lLCBuYW1lID0gbGVuZ3RoLCBsZW5ndGggPSAwO1xuICB9XG4gIC8vIEhhbmRsZSBmb3JtYXQgYmVpbmcgb2JqZWN0LCB0d28gZm9ybWF0IG5hbWUvdmFsdWUgc3RyaW5ncyBvciBleGNsdWRlZFxuICBpZiAoKHR5cGVvZiBuYW1lID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihuYW1lKSkgPT09ICdvYmplY3QnKSB7XG4gICAgZm9ybWF0cyA9IG5hbWU7XG4gICAgc291cmNlID0gdmFsdWU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIGZvcm1hdHNbbmFtZV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc291cmNlID0gbmFtZTtcbiAgICB9XG4gIH1cbiAgLy8gSGFuZGxlIG9wdGlvbmFsIHNvdXJjZVxuICBzb3VyY2UgPSBzb3VyY2UgfHwgX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5BUEk7XG4gIHJldHVybiBbaW5kZXgsIGxlbmd0aCwgZm9ybWF0cywgc291cmNlXTtcbn1cblxuZnVuY3Rpb24gc2hpZnRSYW5nZShyYW5nZSwgaW5kZXgsIGxlbmd0aCwgc291cmNlKSB7XG4gIGlmIChyYW5nZSA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgdmFyIHN0YXJ0ID0gdm9pZCAwLFxuICAgICAgZW5kID0gdm9pZCAwO1xuICBpZiAoaW5kZXggaW5zdGFuY2VvZiBfcXVpbGxEZWx0YTIuZGVmYXVsdCkge1xuICAgIHZhciBfbWFwID0gW3JhbmdlLmluZGV4LCByYW5nZS5pbmRleCArIHJhbmdlLmxlbmd0aF0ubWFwKGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIHJldHVybiBpbmRleC50cmFuc2Zvcm1Qb3NpdGlvbihwb3MsIHNvdXJjZSAhPT0gX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICB9KTtcblxuICAgIHZhciBfbWFwMiA9IF9zbGljZWRUb0FycmF5KF9tYXAsIDIpO1xuXG4gICAgc3RhcnQgPSBfbWFwMlswXTtcbiAgICBlbmQgPSBfbWFwMlsxXTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgX21hcDMgPSBbcmFuZ2UuaW5kZXgsIHJhbmdlLmluZGV4ICsgcmFuZ2UubGVuZ3RoXS5tYXAoZnVuY3Rpb24gKHBvcykge1xuICAgICAgaWYgKHBvcyA8IGluZGV4IHx8IHBvcyA9PT0gaW5kZXggJiYgc291cmNlID09PSBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLlVTRVIpIHJldHVybiBwb3M7XG4gICAgICBpZiAobGVuZ3RoID49IDApIHtcbiAgICAgICAgcmV0dXJuIHBvcyArIGxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChpbmRleCwgcG9zICsgbGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBfbWFwNCA9IF9zbGljZWRUb0FycmF5KF9tYXAzLCAyKTtcblxuICAgIHN0YXJ0ID0gX21hcDRbMF07XG4gICAgZW5kID0gX21hcDRbMV07XG4gIH1cbiAgcmV0dXJuIG5ldyBfc2VsZWN0aW9uLlJhbmdlKHN0YXJ0LCBlbmQgLSBzdGFydCk7XG59XG5cbmV4cG9ydHMuZXhwYW5kQ29uZmlnID0gZXhwYW5kQ29uZmlnO1xuZXhwb3J0cy5vdmVybG9hZCA9IG92ZXJsb2FkO1xuZXhwb3J0cy5kZWZhdWx0ID0gUXVpbGw7XG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfdGV4dCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfdGV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90ZXh0KTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBJbmxpbmUgPSBmdW5jdGlvbiAoX1BhcmNobWVudCRJbmxpbmUpIHtcbiAgX2luaGVyaXRzKElubGluZSwgX1BhcmNobWVudCRJbmxpbmUpO1xuXG4gIGZ1bmN0aW9uIElubGluZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5saW5lKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoSW5saW5lLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSW5saW5lKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSW5saW5lLCBbe1xuICAgIGtleTogJ2Zvcm1hdEF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0QXQoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIGlmIChJbmxpbmUuY29tcGFyZSh0aGlzLnN0YXRpY3MuYmxvdE5hbWUsIG5hbWUpIDwgMCAmJiBfcGFyY2htZW50Mi5kZWZhdWx0LnF1ZXJ5KG5hbWUsIF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuQkxPVCkpIHtcbiAgICAgICAgdmFyIGJsb3QgPSB0aGlzLmlzb2xhdGUoaW5kZXgsIGxlbmd0aCk7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGJsb3Qud3JhcChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9nZXQoSW5saW5lLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKElubGluZS5wcm90b3R5cGUpLCAnZm9ybWF0QXQnLCB0aGlzKS5jYWxsKHRoaXMsIGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvcHRpbWl6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9wdGltaXplKGNvbnRleHQpIHtcbiAgICAgIF9nZXQoSW5saW5lLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKElubGluZS5wcm90b3R5cGUpLCAnb3B0aW1pemUnLCB0aGlzKS5jYWxsKHRoaXMsIGNvbnRleHQpO1xuICAgICAgaWYgKHRoaXMucGFyZW50IGluc3RhbmNlb2YgSW5saW5lICYmIElubGluZS5jb21wYXJlKHRoaXMuc3RhdGljcy5ibG90TmFtZSwgdGhpcy5wYXJlbnQuc3RhdGljcy5ibG90TmFtZSkgPiAwKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudC5pc29sYXRlKHRoaXMub2Zmc2V0KCksIHRoaXMubGVuZ3RoKCkpO1xuICAgICAgICB0aGlzLm1vdmVDaGlsZHJlbihwYXJlbnQpO1xuICAgICAgICBwYXJlbnQud3JhcCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ2NvbXBhcmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wYXJlKHNlbGYsIG90aGVyKSB7XG4gICAgICB2YXIgc2VsZkluZGV4ID0gSW5saW5lLm9yZGVyLmluZGV4T2Yoc2VsZik7XG4gICAgICB2YXIgb3RoZXJJbmRleCA9IElubGluZS5vcmRlci5pbmRleE9mKG90aGVyKTtcbiAgICAgIGlmIChzZWxmSW5kZXggPj0gMCB8fCBvdGhlckluZGV4ID49IDApIHtcbiAgICAgICAgcmV0dXJuIHNlbGZJbmRleCAtIG90aGVySW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKHNlbGYgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSBlbHNlIGlmIChzZWxmIDwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIElubGluZTtcbn0oX3BhcmNobWVudDIuZGVmYXVsdC5JbmxpbmUpO1xuXG5JbmxpbmUuYWxsb3dlZENoaWxkcmVuID0gW0lubGluZSwgX3BhcmNobWVudDIuZGVmYXVsdC5FbWJlZCwgX3RleHQyLmRlZmF1bHRdO1xuLy8gTG93ZXIgaW5kZXggbWVhbnMgZGVlcGVyIGluIHRoZSBET00gdHJlZSwgc2luY2Ugbm90IGZvdW5kICgtMSkgaXMgZm9yIGVtYmVkc1xuSW5saW5lLm9yZGVyID0gWydjdXJzb3InLCAnaW5saW5lJywgLy8gTXVzdCBiZSBsb3dlclxuJ3VuZGVybGluZScsICdzdHJpa2UnLCAnaXRhbGljJywgJ2JvbGQnLCAnc2NyaXB0JywgJ2xpbmsnLCAnY29kZScgLy8gTXVzdCBiZSBoaWdoZXJcbl07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IElubGluZTtcblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgVGV4dEJsb3QgPSBmdW5jdGlvbiAoX1BhcmNobWVudCRUZXh0KSB7XG4gIF9pbmhlcml0cyhUZXh0QmxvdCwgX1BhcmNobWVudCRUZXh0KTtcblxuICBmdW5jdGlvbiBUZXh0QmxvdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGV4dEJsb3QpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUZXh0QmxvdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRleHRCbG90KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICByZXR1cm4gVGV4dEJsb3Q7XG59KF9wYXJjaG1lbnQyLmRlZmF1bHQuVGV4dCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFRleHRCbG90O1xuXG4vKioqLyB9KSxcbi8qIDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX2V2ZW50ZW1pdHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oNTQpO1xuXG52YXIgX2V2ZW50ZW1pdHRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ldmVudGVtaXR0ZXIpO1xuXG52YXIgX2xvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG52YXIgX2xvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dnZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBkZWJ1ZyA9ICgwLCBfbG9nZ2VyMi5kZWZhdWx0KSgncXVpbGw6ZXZlbnRzJyk7XG5cbnZhciBFVkVOVFMgPSBbJ3NlbGVjdGlvbmNoYW5nZScsICdtb3VzZWRvd24nLCAnbW91c2V1cCcsICdjbGljayddO1xuXG5FVkVOVFMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucWwtY29udGFpbmVyJykpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIC8vIFRPRE8gdXNlIFdlYWtNYXBcbiAgICAgIGlmIChub2RlLl9fcXVpbGwgJiYgbm9kZS5fX3F1aWxsLmVtaXR0ZXIpIHtcbiAgICAgICAgdmFyIF9ub2RlJF9fcXVpbGwkZW1pdHRlcjtcblxuICAgICAgICAoX25vZGUkX19xdWlsbCRlbWl0dGVyID0gbm9kZS5fX3F1aWxsLmVtaXR0ZXIpLmhhbmRsZURPTS5hcHBseShfbm9kZSRfX3F1aWxsJGVtaXR0ZXIsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn0pO1xuXG52YXIgRW1pdHRlciA9IGZ1bmN0aW9uIChfRXZlbnRFbWl0dGVyKSB7XG4gIF9pbmhlcml0cyhFbWl0dGVyLCBfRXZlbnRFbWl0dGVyKTtcblxuICBmdW5jdGlvbiBFbWl0dGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFbWl0dGVyKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChFbWl0dGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRW1pdHRlcikpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMubGlzdGVuZXJzID0ge307XG4gICAgX3RoaXMub24oJ2Vycm9yJywgZGVidWcuZXJyb3IpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhFbWl0dGVyLCBbe1xuICAgIGtleTogJ2VtaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbWl0KCkge1xuICAgICAgZGVidWcubG9nLmFwcGx5KGRlYnVnLCBhcmd1bWVudHMpO1xuICAgICAgX2dldChFbWl0dGVyLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEVtaXR0ZXIucHJvdG90eXBlKSwgJ2VtaXQnLCB0aGlzKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZURPTScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZURPTShldmVudCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICAodGhpcy5saXN0ZW5lcnNbZXZlbnQudHlwZV0gfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBfcmVmLm5vZGUsXG4gICAgICAgICAgICBoYW5kbGVyID0gX3JlZi5oYW5kbGVyO1xuXG4gICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IG5vZGUgfHwgbm9kZS5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgaGFuZGxlci5hcHBseSh1bmRlZmluZWQsIFtldmVudF0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbGlzdGVuRE9NJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdGVuRE9NKGV2ZW50TmFtZSwgbm9kZSwgaGFuZGxlcikge1xuICAgICAgaWYgKCF0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0gPSBbXTtcbiAgICAgIH1cbiAgICAgIHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0ucHVzaCh7IG5vZGU6IG5vZGUsIGhhbmRsZXI6IGhhbmRsZXIgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEVtaXR0ZXI7XG59KF9ldmVudGVtaXR0ZXIyLmRlZmF1bHQpO1xuXG5FbWl0dGVyLmV2ZW50cyA9IHtcbiAgRURJVE9SX0NIQU5HRTogJ2VkaXRvci1jaGFuZ2UnLFxuICBTQ1JPTExfQkVGT1JFX1VQREFURTogJ3Njcm9sbC1iZWZvcmUtdXBkYXRlJyxcbiAgU0NST0xMX09QVElNSVpFOiAnc2Nyb2xsLW9wdGltaXplJyxcbiAgU0NST0xMX1VQREFURTogJ3Njcm9sbC11cGRhdGUnLFxuICBTRUxFQ1RJT05fQ0hBTkdFOiAnc2VsZWN0aW9uLWNoYW5nZScsXG4gIFRFWFRfQ0hBTkdFOiAndGV4dC1jaGFuZ2UnXG59O1xuRW1pdHRlci5zb3VyY2VzID0ge1xuICBBUEk6ICdhcGknLFxuICBTSUxFTlQ6ICdzaWxlbnQnLFxuICBVU0VSOiAndXNlcidcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEVtaXR0ZXI7XG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgTW9kdWxlID0gZnVuY3Rpb24gTW9kdWxlKHF1aWxsKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kdWxlKTtcblxuICB0aGlzLnF1aWxsID0gcXVpbGw7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG59O1xuXG5Nb2R1bGUuREVGQVVMVFMgPSB7fTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTW9kdWxlO1xuXG4vKioqLyB9KSxcbi8qIDEwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgbGV2ZWxzID0gWydlcnJvcicsICd3YXJuJywgJ2xvZycsICdpbmZvJ107XG52YXIgbGV2ZWwgPSAnd2Fybic7XG5cbmZ1bmN0aW9uIGRlYnVnKG1ldGhvZCkge1xuICBpZiAobGV2ZWxzLmluZGV4T2YobWV0aG9kKSA8PSBsZXZlbHMuaW5kZXhPZihsZXZlbCkpIHtcbiAgICB2YXIgX2NvbnNvbGU7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIChfY29uc29sZSA9IGNvbnNvbGUpW21ldGhvZF0uYXBwbHkoX2NvbnNvbGUsIGFyZ3MpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgfVxufVxuXG5mdW5jdGlvbiBuYW1lc3BhY2UobnMpIHtcbiAgcmV0dXJuIGxldmVscy5yZWR1Y2UoZnVuY3Rpb24gKGxvZ2dlciwgbWV0aG9kKSB7XG4gICAgbG9nZ2VyW21ldGhvZF0gPSBkZWJ1Zy5iaW5kKGNvbnNvbGUsIG1ldGhvZCwgbnMpO1xuICAgIHJldHVybiBsb2dnZXI7XG4gIH0sIHt9KTtcbn1cblxuZGVidWcubGV2ZWwgPSBuYW1lc3BhY2UubGV2ZWwgPSBmdW5jdGlvbiAobmV3TGV2ZWwpIHtcbiAgbGV2ZWwgPSBuZXdMZXZlbDtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG5hbWVzcGFjZTtcblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgcFNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIG9iamVjdEtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyKTtcbnZhciBpc0FyZ3VtZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oNTMpO1xuXG52YXIgZGVlcEVxdWFsID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYWN0dWFsLCBleHBlY3RlZCwgb3B0cykge1xuICBpZiAoIW9wdHMpIG9wdHMgPSB7fTtcbiAgLy8gNy4xLiBBbGwgaWRlbnRpY2FsIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4gIGlmIChhY3R1YWwgPT09IGV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG5cbiAgfSBlbHNlIGlmIChhY3R1YWwgaW5zdGFuY2VvZiBEYXRlICYmIGV4cGVjdGVkIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgIHJldHVybiBhY3R1YWwuZ2V0VGltZSgpID09PSBleHBlY3RlZC5nZXRUaW1lKCk7XG5cbiAgLy8gNy4zLiBPdGhlciBwYWlycyB0aGF0IGRvIG5vdCBib3RoIHBhc3MgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnLFxuICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LlxuICB9IGVsc2UgaWYgKCFhY3R1YWwgfHwgIWV4cGVjdGVkIHx8IHR5cGVvZiBhY3R1YWwgIT0gJ29iamVjdCcgJiYgdHlwZW9mIGV4cGVjdGVkICE9ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9wdHMuc3RyaWN0ID8gYWN0dWFsID09PSBleHBlY3RlZCA6IGFjdHVhbCA9PSBleHBlY3RlZDtcblxuICAvLyA3LjQuIEZvciBhbGwgb3RoZXIgT2JqZWN0IHBhaXJzLCBpbmNsdWRpbmcgQXJyYXkgb2JqZWN0cywgZXF1aXZhbGVuY2UgaXNcbiAgLy8gZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkXG4gIC8vIHdpdGggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKSwgdGhlIHNhbWUgc2V0IG9mIGtleXNcbiAgLy8gKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeVxuICAvLyBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpc1xuICAvLyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2JqRXF1aXYoYWN0dWFsLCBleHBlY3RlZCwgb3B0cyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWRPck51bGwodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyICh4KSB7XG4gIGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHgubGVuZ3RoICE9PSAnbnVtYmVyJykgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIHguY29weSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgeC5zbGljZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoeC5sZW5ndGggPiAwICYmIHR5cGVvZiB4WzBdICE9PSAnbnVtYmVyJykgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb2JqRXF1aXYoYSwgYiwgb3B0cykge1xuICB2YXIgaSwga2V5O1xuICBpZiAoaXNVbmRlZmluZWRPck51bGwoYSkgfHwgaXNVbmRlZmluZWRPck51bGwoYikpXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvLyBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuXG4gIGlmIChhLnByb3RvdHlwZSAhPT0gYi5wcm90b3R5cGUpIHJldHVybiBmYWxzZTtcbiAgLy9+fn5JJ3ZlIG1hbmFnZWQgdG8gYnJlYWsgT2JqZWN0LmtleXMgdGhyb3VnaCBzY3Jld3kgYXJndW1lbnRzIHBhc3NpbmcuXG4gIC8vICAgQ29udmVydGluZyB0byBhcnJheSBzb2x2ZXMgdGhlIHByb2JsZW0uXG4gIGlmIChpc0FyZ3VtZW50cyhhKSkge1xuICAgIGlmICghaXNBcmd1bWVudHMoYikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgYSA9IHBTbGljZS5jYWxsKGEpO1xuICAgIGIgPSBwU2xpY2UuY2FsbChiKTtcbiAgICByZXR1cm4gZGVlcEVxdWFsKGEsIGIsIG9wdHMpO1xuICB9XG4gIGlmIChpc0J1ZmZlcihhKSkge1xuICAgIGlmICghaXNCdWZmZXIoYikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYVtpXSAhPT0gYltpXSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB0cnkge1xuICAgIHZhciBrYSA9IG9iamVjdEtleXMoYSksXG4gICAgICAgIGtiID0gb2JqZWN0S2V5cyhiKTtcbiAgfSBjYXRjaCAoZSkgey8vaGFwcGVucyB3aGVuIG9uZSBpcyBhIHN0cmluZyBsaXRlcmFsIGFuZCB0aGUgb3RoZXIgaXNuJ3RcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChrZXlzIGluY29ycG9yYXRlc1xuICAvLyBoYXNPd25Qcm9wZXJ0eSlcbiAgaWYgKGthLmxlbmd0aCAhPSBrYi5sZW5ndGgpXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvL3RoZSBzYW1lIHNldCBvZiBrZXlzIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLFxuICBrYS5zb3J0KCk7XG4gIGtiLnNvcnQoKTtcbiAgLy9+fn5jaGVhcCBrZXkgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmIChrYVtpXSAhPSBrYltpXSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvL2VxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleSwgYW5kXG4gIC8vfn5+cG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGtleSA9IGthW2ldO1xuICAgIGlmICghZGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBvcHRzKSkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0eXBlb2YgYSA9PT0gdHlwZW9mIGI7XG59XG5cblxuLyoqKi8gfSksXG4vKiAxMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBBdHRyaWJ1dG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEF0dHJpYnV0b3IoYXR0ck5hbWUsIGtleU5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdGhpcy5hdHRyTmFtZSA9IGF0dHJOYW1lO1xuICAgICAgICB0aGlzLmtleU5hbWUgPSBrZXlOYW1lO1xuICAgICAgICB2YXIgYXR0cmlidXRlQml0ID0gUmVnaXN0cnkuU2NvcGUuVFlQRSAmIFJlZ2lzdHJ5LlNjb3BlLkFUVFJJQlVURTtcbiAgICAgICAgaWYgKG9wdGlvbnMuc2NvcGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gSWdub3JlIHR5cGUgYml0cywgZm9yY2UgYXR0cmlidXRlIGJpdFxuICAgICAgICAgICAgdGhpcy5zY29wZSA9IChvcHRpb25zLnNjb3BlICYgUmVnaXN0cnkuU2NvcGUuTEVWRUwpIHwgYXR0cmlidXRlQml0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLkFUVFJJQlVURTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy53aGl0ZWxpc3QgIT0gbnVsbClcbiAgICAgICAgICAgIHRoaXMud2hpdGVsaXN0ID0gb3B0aW9ucy53aGl0ZWxpc3Q7XG4gICAgfVxuICAgIEF0dHJpYnV0b3Iua2V5cyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiBbXS5tYXAuY2FsbChub2RlLmF0dHJpYnV0ZXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5uYW1lO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEF0dHJpYnV0b3IucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChub2RlLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuY2FuQWRkKG5vZGUsIHZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUodGhpcy5rZXlOYW1lLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgQXR0cmlidXRvci5wcm90b3R5cGUuY2FuQWRkID0gZnVuY3Rpb24gKG5vZGUsIHZhbHVlKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IFJlZ2lzdHJ5LnF1ZXJ5KG5vZGUsIFJlZ2lzdHJ5LlNjb3BlLkJMT1QgJiAodGhpcy5zY29wZSB8IFJlZ2lzdHJ5LlNjb3BlLlRZUEUpKTtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLndoaXRlbGlzdCA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53aGl0ZWxpc3QuaW5kZXhPZih2YWx1ZS5yZXBsYWNlKC9bXCInXS9nLCAnJykpID4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53aGl0ZWxpc3QuaW5kZXhPZih2YWx1ZSkgPiAtMTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXR0cmlidXRvci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUodGhpcy5rZXlOYW1lKTtcbiAgICB9O1xuICAgIEF0dHJpYnV0b3IucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUodGhpcy5rZXlOYW1lKTtcbiAgICAgICAgaWYgKHRoaXMuY2FuQWRkKG5vZGUsIHZhbHVlKSAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9O1xuICAgIHJldHVybiBBdHRyaWJ1dG9yO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEF0dHJpYnV0b3I7XG5cblxuLyoqKi8gfSksXG4vKiAxMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5Db2RlID0gdW5kZWZpbmVkO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9xdWlsbERlbHRhID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxudmFyIF9xdWlsbERlbHRhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1aWxsRGVsdGEpO1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbnZhciBfYmxvY2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2Jsb2NrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jsb2NrKTtcblxudmFyIF9pbmxpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX2lubGluZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmxpbmUpO1xuXG52YXIgX3RleHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX3RleHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGV4dCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIENvZGUgPSBmdW5jdGlvbiAoX0lubGluZSkge1xuICBfaW5oZXJpdHMoQ29kZSwgX0lubGluZSk7XG5cbiAgZnVuY3Rpb24gQ29kZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29kZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENvZGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb2RlKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICByZXR1cm4gQ29kZTtcbn0oX2lubGluZTIuZGVmYXVsdCk7XG5cbkNvZGUuYmxvdE5hbWUgPSAnY29kZSc7XG5Db2RlLnRhZ05hbWUgPSAnQ09ERSc7XG5cbnZhciBDb2RlQmxvY2sgPSBmdW5jdGlvbiAoX0Jsb2NrKSB7XG4gIF9pbmhlcml0cyhDb2RlQmxvY2ssIF9CbG9jayk7XG5cbiAgZnVuY3Rpb24gQ29kZUJsb2NrKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2RlQmxvY2spO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDb2RlQmxvY2suX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb2RlQmxvY2spKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb2RlQmxvY2ssIFt7XG4gICAga2V5OiAnZGVsdGEnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWx0YSgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgdGV4dCA9IHRoaXMuZG9tTm9kZS50ZXh0Q29udGVudDtcbiAgICAgIGlmICh0ZXh0LmVuZHNXaXRoKCdcXG4nKSkge1xuICAgICAgICAvLyBTaG91bGQgYWx3YXlzIGJlIHRydWVcbiAgICAgICAgdGV4dCA9IHRleHQuc2xpY2UoMCwgLTEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRleHQuc3BsaXQoJ1xcbicpLnJlZHVjZShmdW5jdGlvbiAoZGVsdGEsIGZyYWcpIHtcbiAgICAgICAgcmV0dXJuIGRlbHRhLmluc2VydChmcmFnKS5pbnNlcnQoJ1xcbicsIF90aGlzMy5mb3JtYXRzKCkpO1xuICAgICAgfSwgbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdChuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKG5hbWUgPT09IHRoaXMuc3RhdGljcy5ibG90TmFtZSAmJiB2YWx1ZSkgcmV0dXJuO1xuXG4gICAgICB2YXIgX2Rlc2NlbmRhbnQgPSB0aGlzLmRlc2NlbmRhbnQoX3RleHQyLmRlZmF1bHQsIHRoaXMubGVuZ3RoKCkgLSAxKSxcbiAgICAgICAgICBfZGVzY2VuZGFudDIgPSBfc2xpY2VkVG9BcnJheShfZGVzY2VuZGFudCwgMSksXG4gICAgICAgICAgdGV4dCA9IF9kZXNjZW5kYW50MlswXTtcblxuICAgICAgaWYgKHRleHQgIT0gbnVsbCkge1xuICAgICAgICB0ZXh0LmRlbGV0ZUF0KHRleHQubGVuZ3RoKCkgLSAxLCAxKTtcbiAgICAgIH1cbiAgICAgIF9nZXQoQ29kZUJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvZGVCbG9jay5wcm90b3R5cGUpLCAnZm9ybWF0JywgdGhpcykuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0QXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRBdChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgaWYgKF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkobmFtZSwgX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5CTE9DSykgPT0gbnVsbCB8fCBuYW1lID09PSB0aGlzLnN0YXRpY3MuYmxvdE5hbWUgJiYgdmFsdWUgPT09IHRoaXMuc3RhdGljcy5mb3JtYXRzKHRoaXMuZG9tTm9kZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG5leHROZXdsaW5lID0gdGhpcy5uZXdsaW5lSW5kZXgoaW5kZXgpO1xuICAgICAgaWYgKG5leHROZXdsaW5lIDwgMCB8fCBuZXh0TmV3bGluZSA+PSBpbmRleCArIGxlbmd0aCkgcmV0dXJuO1xuICAgICAgdmFyIHByZXZOZXdsaW5lID0gdGhpcy5uZXdsaW5lSW5kZXgoaW5kZXgsIHRydWUpICsgMTtcbiAgICAgIHZhciBpc29sYXRlTGVuZ3RoID0gbmV4dE5ld2xpbmUgLSBwcmV2TmV3bGluZSArIDE7XG4gICAgICB2YXIgYmxvdCA9IHRoaXMuaXNvbGF0ZShwcmV2TmV3bGluZSwgaXNvbGF0ZUxlbmd0aCk7XG4gICAgICB2YXIgbmV4dCA9IGJsb3QubmV4dDtcbiAgICAgIGJsb3QuZm9ybWF0KG5hbWUsIHZhbHVlKTtcbiAgICAgIGlmIChuZXh0IGluc3RhbmNlb2YgQ29kZUJsb2NrKSB7XG4gICAgICAgIG5leHQuZm9ybWF0QXQoMCwgaW5kZXggLSBwcmV2TmV3bGluZSArIGxlbmd0aCAtIGlzb2xhdGVMZW5ndGgsIG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRBdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydEF0KGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICBpZiAoZGVmICE9IG51bGwpIHJldHVybjtcblxuICAgICAgdmFyIF9kZXNjZW5kYW50MyA9IHRoaXMuZGVzY2VuZGFudChfdGV4dDIuZGVmYXVsdCwgaW5kZXgpLFxuICAgICAgICAgIF9kZXNjZW5kYW50NCA9IF9zbGljZWRUb0FycmF5KF9kZXNjZW5kYW50MywgMiksXG4gICAgICAgICAgdGV4dCA9IF9kZXNjZW5kYW50NFswXSxcbiAgICAgICAgICBvZmZzZXQgPSBfZGVzY2VuZGFudDRbMV07XG5cbiAgICAgIHRleHQuaW5zZXJ0QXQob2Zmc2V0LCB2YWx1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbGVuZ3RoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGVuZ3RoKCkge1xuICAgICAgdmFyIGxlbmd0aCA9IHRoaXMuZG9tTm9kZS50ZXh0Q29udGVudC5sZW5ndGg7XG4gICAgICBpZiAoIXRoaXMuZG9tTm9kZS50ZXh0Q29udGVudC5lbmRzV2l0aCgnXFxuJykpIHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aCArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ25ld2xpbmVJbmRleCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5ld2xpbmVJbmRleChzZWFyY2hJbmRleCkge1xuICAgICAgdmFyIHJldmVyc2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gICAgICBpZiAoIXJldmVyc2UpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuZG9tTm9kZS50ZXh0Q29udGVudC5zbGljZShzZWFyY2hJbmRleCkuaW5kZXhPZignXFxuJyk7XG4gICAgICAgIHJldHVybiBvZmZzZXQgPiAtMSA/IHNlYXJjaEluZGV4ICsgb2Zmc2V0IDogLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5kb21Ob2RlLnRleHRDb250ZW50LnNsaWNlKDAsIHNlYXJjaEluZGV4KS5sYXN0SW5kZXhPZignXFxuJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb3B0aW1pemUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcHRpbWl6ZShjb250ZXh0KSB7XG4gICAgICBpZiAoIXRoaXMuZG9tTm9kZS50ZXh0Q29udGVudC5lbmRzV2l0aCgnXFxuJykpIHtcbiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChfcGFyY2htZW50Mi5kZWZhdWx0LmNyZWF0ZSgndGV4dCcsICdcXG4nKSk7XG4gICAgICB9XG4gICAgICBfZ2V0KENvZGVCbG9jay5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb2RlQmxvY2sucHJvdG90eXBlKSwgJ29wdGltaXplJywgdGhpcykuY2FsbCh0aGlzLCBjb250ZXh0KTtcbiAgICAgIHZhciBuZXh0ID0gdGhpcy5uZXh0O1xuICAgICAgaWYgKG5leHQgIT0gbnVsbCAmJiBuZXh0LnByZXYgPT09IHRoaXMgJiYgbmV4dC5zdGF0aWNzLmJsb3ROYW1lID09PSB0aGlzLnN0YXRpY3MuYmxvdE5hbWUgJiYgdGhpcy5zdGF0aWNzLmZvcm1hdHModGhpcy5kb21Ob2RlKSA9PT0gbmV4dC5zdGF0aWNzLmZvcm1hdHMobmV4dC5kb21Ob2RlKSkge1xuICAgICAgICBuZXh0Lm9wdGltaXplKGNvbnRleHQpO1xuICAgICAgICBuZXh0Lm1vdmVDaGlsZHJlbih0aGlzKTtcbiAgICAgICAgbmV4dC5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZXBsYWNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVwbGFjZSh0YXJnZXQpIHtcbiAgICAgIF9nZXQoQ29kZUJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvZGVCbG9jay5wcm90b3R5cGUpLCAncmVwbGFjZScsIHRoaXMpLmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICAgIFtdLnNsaWNlLmNhbGwodGhpcy5kb21Ob2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJyonKSkuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB2YXIgYmxvdCA9IF9wYXJjaG1lbnQyLmRlZmF1bHQuZmluZChub2RlKTtcbiAgICAgICAgaWYgKGJsb3QgPT0gbnVsbCkge1xuICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgICAgfSBlbHNlIGlmIChibG90IGluc3RhbmNlb2YgX3BhcmNobWVudDIuZGVmYXVsdC5FbWJlZCkge1xuICAgICAgICAgIGJsb3QucmVtb3ZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmxvdC51bndyYXAoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6ICdjcmVhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUodmFsdWUpIHtcbiAgICAgIHZhciBkb21Ob2RlID0gX2dldChDb2RlQmxvY2suX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb2RlQmxvY2spLCAnY3JlYXRlJywgdGhpcykuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICBkb21Ob2RlLnNldEF0dHJpYnV0ZSgnc3BlbGxjaGVjaycsIGZhbHNlKTtcbiAgICAgIHJldHVybiBkb21Ob2RlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRzKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvZGVCbG9jaztcbn0oX2Jsb2NrMi5kZWZhdWx0KTtcblxuQ29kZUJsb2NrLmJsb3ROYW1lID0gJ2NvZGUtYmxvY2snO1xuQ29kZUJsb2NrLnRhZ05hbWUgPSAnUFJFJztcbkNvZGVCbG9jay5UQUIgPSAnICAnO1xuXG5leHBvcnRzLkNvZGUgPSBDb2RlO1xuZXhwb3J0cy5kZWZhdWx0ID0gQ29kZUJsb2NrO1xuXG4vKioqLyB9KSxcbi8qIDE0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3F1aWxsRGVsdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3F1aWxsRGVsdGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGxEZWx0YSk7XG5cbnZhciBfb3AgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblxudmFyIF9vcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vcCk7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9jb2RlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cbnZhciBfY29kZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb2RlKTtcblxudmFyIF9jdXJzb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcblxudmFyIF9jdXJzb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3Vyc29yKTtcblxudmFyIF9ibG9jayA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfYmxvY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmxvY2spO1xuXG52YXIgX2JyZWFrID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbnZhciBfYnJlYWsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYnJlYWspO1xuXG52YXIgX2Nsb25lID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cbnZhciBfY2xvbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xvbmUpO1xuXG52YXIgX2RlZXBFcXVhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG52YXIgX2RlZXBFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWVwRXF1YWwpO1xuXG52YXIgX2V4dGVuZCA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfZXh0ZW5kMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBBU0NJSSA9IC9eWyAtfl0qJC87XG5cbnZhciBFZGl0b3IgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEVkaXRvcihzY3JvbGwpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRWRpdG9yKTtcblxuICAgIHRoaXMuc2Nyb2xsID0gc2Nyb2xsO1xuICAgIHRoaXMuZGVsdGEgPSB0aGlzLmdldERlbHRhKCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRWRpdG9yLCBbe1xuICAgIGtleTogJ2FwcGx5RGVsdGEnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseURlbHRhKGRlbHRhKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgY29uc3VtZU5leHROZXdsaW5lID0gZmFsc2U7XG4gICAgICB0aGlzLnNjcm9sbC51cGRhdGUoKTtcbiAgICAgIHZhciBzY3JvbGxMZW5ndGggPSB0aGlzLnNjcm9sbC5sZW5ndGgoKTtcbiAgICAgIHRoaXMuc2Nyb2xsLmJhdGNoU3RhcnQoKTtcbiAgICAgIGRlbHRhID0gbm9ybWFsaXplRGVsdGEoZGVsdGEpO1xuICAgICAgZGVsdGEucmVkdWNlKGZ1bmN0aW9uIChpbmRleCwgb3ApIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IG9wLnJldGFpbiB8fCBvcC5kZWxldGUgfHwgb3AuaW5zZXJ0Lmxlbmd0aCB8fCAxO1xuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IG9wLmF0dHJpYnV0ZXMgfHwge307XG4gICAgICAgIGlmIChvcC5pbnNlcnQgIT0gbnVsbCkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygb3AuaW5zZXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIHRleHQgPSBvcC5pbnNlcnQ7XG4gICAgICAgICAgICBpZiAodGV4dC5lbmRzV2l0aCgnXFxuJykgJiYgY29uc3VtZU5leHROZXdsaW5lKSB7XG4gICAgICAgICAgICAgIGNvbnN1bWVOZXh0TmV3bGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gc2Nyb2xsTGVuZ3RoICYmICF0ZXh0LmVuZHNXaXRoKCdcXG4nKSkge1xuICAgICAgICAgICAgICBjb25zdW1lTmV4dE5ld2xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuc2Nyb2xsLmluc2VydEF0KGluZGV4LCB0ZXh0KTtcblxuICAgICAgICAgICAgdmFyIF9zY3JvbGwkbGluZSA9IF90aGlzLnNjcm9sbC5saW5lKGluZGV4KSxcbiAgICAgICAgICAgICAgICBfc2Nyb2xsJGxpbmUyID0gX3NsaWNlZFRvQXJyYXkoX3Njcm9sbCRsaW5lLCAyKSxcbiAgICAgICAgICAgICAgICBsaW5lID0gX3Njcm9sbCRsaW5lMlswXSxcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBfc2Nyb2xsJGxpbmUyWzFdO1xuXG4gICAgICAgICAgICB2YXIgZm9ybWF0cyA9ICgwLCBfZXh0ZW5kMi5kZWZhdWx0KSh7fSwgKDAsIF9ibG9jay5idWJibGVGb3JtYXRzKShsaW5lKSk7XG4gICAgICAgICAgICBpZiAobGluZSBpbnN0YW5jZW9mIF9ibG9jazIuZGVmYXVsdCkge1xuICAgICAgICAgICAgICB2YXIgX2xpbmUkZGVzY2VuZGFudCA9IGxpbmUuZGVzY2VuZGFudChfcGFyY2htZW50Mi5kZWZhdWx0LkxlYWYsIG9mZnNldCksXG4gICAgICAgICAgICAgICAgICBfbGluZSRkZXNjZW5kYW50MiA9IF9zbGljZWRUb0FycmF5KF9saW5lJGRlc2NlbmRhbnQsIDEpLFxuICAgICAgICAgICAgICAgICAgbGVhZiA9IF9saW5lJGRlc2NlbmRhbnQyWzBdO1xuXG4gICAgICAgICAgICAgIGZvcm1hdHMgPSAoMCwgX2V4dGVuZDIuZGVmYXVsdCkoZm9ybWF0cywgKDAsIF9ibG9jay5idWJibGVGb3JtYXRzKShsZWFmKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdHRyaWJ1dGVzID0gX29wMi5kZWZhdWx0LmF0dHJpYnV0ZXMuZGlmZihmb3JtYXRzLCBhdHRyaWJ1dGVzKSB8fCB7fTtcbiAgICAgICAgICB9IGVsc2UgaWYgKF90eXBlb2Yob3AuaW5zZXJ0KSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBPYmplY3Qua2V5cyhvcC5pbnNlcnQpWzBdOyAvLyBUaGVyZSBzaG91bGQgb25seSBiZSBvbmUga2V5XG4gICAgICAgICAgICBpZiAoa2V5ID09IG51bGwpIHJldHVybiBpbmRleDtcbiAgICAgICAgICAgIF90aGlzLnNjcm9sbC5pbnNlcnRBdChpbmRleCwga2V5LCBvcC5pbnNlcnRba2V5XSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNjcm9sbExlbmd0aCArPSBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIF90aGlzLnNjcm9sbC5mb3JtYXRBdChpbmRleCwgbGVuZ3RoLCBuYW1lLCBhdHRyaWJ1dGVzW25hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBpbmRleCArIGxlbmd0aDtcbiAgICAgIH0sIDApO1xuICAgICAgZGVsdGEucmVkdWNlKGZ1bmN0aW9uIChpbmRleCwgb3ApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcC5kZWxldGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgX3RoaXMuc2Nyb2xsLmRlbGV0ZUF0KGluZGV4LCBvcC5kZWxldGUpO1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5kZXggKyAob3AucmV0YWluIHx8IG9wLmluc2VydC5sZW5ndGggfHwgMSk7XG4gICAgICB9LCAwKTtcbiAgICAgIHRoaXMuc2Nyb2xsLmJhdGNoRW5kKCk7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGUoZGVsdGEpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RlbGV0ZVRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVUZXh0KGluZGV4LCBsZW5ndGgpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLmRlbGV0ZUF0KGluZGV4LCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihpbmRleCkuZGVsZXRlKGxlbmd0aCkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdExpbmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRMaW5lKGluZGV4LCBsZW5ndGgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgZm9ybWF0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgICAgIHRoaXMuc2Nyb2xsLnVwZGF0ZSgpO1xuICAgICAgT2JqZWN0LmtleXMoZm9ybWF0cykuZm9yRWFjaChmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIGlmIChfdGhpczIuc2Nyb2xsLndoaXRlbGlzdCAhPSBudWxsICYmICFfdGhpczIuc2Nyb2xsLndoaXRlbGlzdFtmb3JtYXRdKSByZXR1cm47XG4gICAgICAgIHZhciBsaW5lcyA9IF90aGlzMi5zY3JvbGwubGluZXMoaW5kZXgsIE1hdGgubWF4KGxlbmd0aCwgMSkpO1xuICAgICAgICB2YXIgbGVuZ3RoUmVtYWluaW5nID0gbGVuZ3RoO1xuICAgICAgICBsaW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICAgICAgdmFyIGxpbmVMZW5ndGggPSBsaW5lLmxlbmd0aCgpO1xuICAgICAgICAgIGlmICghKGxpbmUgaW5zdGFuY2VvZiBfY29kZTIuZGVmYXVsdCkpIHtcbiAgICAgICAgICAgIGxpbmUuZm9ybWF0KGZvcm1hdCwgZm9ybWF0c1tmb3JtYXRdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNvZGVJbmRleCA9IGluZGV4IC0gbGluZS5vZmZzZXQoX3RoaXMyLnNjcm9sbCk7XG4gICAgICAgICAgICB2YXIgY29kZUxlbmd0aCA9IGxpbmUubmV3bGluZUluZGV4KGNvZGVJbmRleCArIGxlbmd0aFJlbWFpbmluZykgLSBjb2RlSW5kZXggKyAxO1xuICAgICAgICAgICAgbGluZS5mb3JtYXRBdChjb2RlSW5kZXgsIGNvZGVMZW5ndGgsIGZvcm1hdCwgZm9ybWF0c1tmb3JtYXRdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoUmVtYWluaW5nIC09IGxpbmVMZW5ndGg7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnNjcm9sbC5vcHRpbWl6ZSgpO1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihpbmRleCkucmV0YWluKGxlbmd0aCwgKDAsIF9jbG9uZTIuZGVmYXVsdCkoZm9ybWF0cykpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRUZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0VGV4dChpbmRleCwgbGVuZ3RoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIGZvcm1hdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gICAgICBPYmplY3Qua2V5cyhmb3JtYXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgX3RoaXMzLnNjcm9sbC5mb3JtYXRBdChpbmRleCwgbGVuZ3RoLCBmb3JtYXQsIGZvcm1hdHNbZm9ybWF0XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZShuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5yZXRhaW4oaW5kZXgpLnJldGFpbihsZW5ndGgsICgwLCBfY2xvbmUyLmRlZmF1bHQpKGZvcm1hdHMpKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0Q29udGVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb250ZW50cyhpbmRleCwgbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWx0YS5zbGljZShpbmRleCwgaW5kZXggKyBsZW5ndGgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldERlbHRhJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVsdGEoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zY3JvbGwubGluZXMoKS5yZWR1Y2UoZnVuY3Rpb24gKGRlbHRhLCBsaW5lKSB7XG4gICAgICAgIHJldHVybiBkZWx0YS5jb25jYXQobGluZS5kZWx0YSgpKTtcbiAgICAgIH0sIG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRGb3JtYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGb3JtYXQoaW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cbiAgICAgIHZhciBsaW5lcyA9IFtdLFxuICAgICAgICAgIGxlYXZlcyA9IFtdO1xuICAgICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLnNjcm9sbC5wYXRoKGluZGV4KS5mb3JFYWNoKGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgICAgdmFyIF9wYXRoID0gX3NsaWNlZFRvQXJyYXkocGF0aCwgMSksXG4gICAgICAgICAgICAgIGJsb3QgPSBfcGF0aFswXTtcblxuICAgICAgICAgIGlmIChibG90IGluc3RhbmNlb2YgX2Jsb2NrMi5kZWZhdWx0KSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGJsb3QpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYmxvdCBpbnN0YW5jZW9mIF9wYXJjaG1lbnQyLmRlZmF1bHQuTGVhZikge1xuICAgICAgICAgICAgbGVhdmVzLnB1c2goYmxvdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpbmVzID0gdGhpcy5zY3JvbGwubGluZXMoaW5kZXgsIGxlbmd0aCk7XG4gICAgICAgIGxlYXZlcyA9IHRoaXMuc2Nyb2xsLmRlc2NlbmRhbnRzKF9wYXJjaG1lbnQyLmRlZmF1bHQuTGVhZiwgaW5kZXgsIGxlbmd0aCk7XG4gICAgICB9XG4gICAgICB2YXIgZm9ybWF0c0FyciA9IFtsaW5lcywgbGVhdmVzXS5tYXAoZnVuY3Rpb24gKGJsb3RzKSB7XG4gICAgICAgIGlmIChibG90cy5sZW5ndGggPT09IDApIHJldHVybiB7fTtcbiAgICAgICAgdmFyIGZvcm1hdHMgPSAoMCwgX2Jsb2NrLmJ1YmJsZUZvcm1hdHMpKGJsb3RzLnNoaWZ0KCkpO1xuICAgICAgICB3aGlsZSAoT2JqZWN0LmtleXMoZm9ybWF0cykubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBibG90ID0gYmxvdHMuc2hpZnQoKTtcbiAgICAgICAgICBpZiAoYmxvdCA9PSBudWxsKSByZXR1cm4gZm9ybWF0cztcbiAgICAgICAgICBmb3JtYXRzID0gY29tYmluZUZvcm1hdHMoKDAsIF9ibG9jay5idWJibGVGb3JtYXRzKShibG90KSwgZm9ybWF0cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdHM7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfZXh0ZW5kMi5kZWZhdWx0LmFwcGx5KF9leHRlbmQyLmRlZmF1bHQsIGZvcm1hdHNBcnIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUZXh0KGluZGV4LCBsZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldENvbnRlbnRzKGluZGV4LCBsZW5ndGgpLmZpbHRlcihmdW5jdGlvbiAob3ApIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvcC5pbnNlcnQgPT09ICdzdHJpbmcnO1xuICAgICAgfSkubWFwKGZ1bmN0aW9uIChvcCkge1xuICAgICAgICByZXR1cm4gb3AuaW5zZXJ0O1xuICAgICAgfSkuam9pbignJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5zZXJ0RW1iZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRFbWJlZChpbmRleCwgZW1iZWQsIHZhbHVlKSB7XG4gICAgICB0aGlzLnNjcm9sbC5pbnNlcnRBdChpbmRleCwgZW1iZWQsIHZhbHVlKTtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZShuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5yZXRhaW4oaW5kZXgpLmluc2VydChfZGVmaW5lUHJvcGVydHkoe30sIGVtYmVkLCB2YWx1ZSkpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRUZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0VGV4dChpbmRleCwgdGV4dCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBmb3JtYXRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxyXFxuL2csICdcXG4nKS5yZXBsYWNlKC9cXHIvZywgJ1xcbicpO1xuICAgICAgdGhpcy5zY3JvbGwuaW5zZXJ0QXQoaW5kZXgsIHRleHQpO1xuICAgICAgT2JqZWN0LmtleXMoZm9ybWF0cykuZm9yRWFjaChmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIF90aGlzNC5zY3JvbGwuZm9ybWF0QXQoaW5kZXgsIHRleHQubGVuZ3RoLCBmb3JtYXQsIGZvcm1hdHNbZm9ybWF0XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZShuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5yZXRhaW4oaW5kZXgpLmluc2VydCh0ZXh0LCAoMCwgX2Nsb25lMi5kZWZhdWx0KShmb3JtYXRzKSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2lzQmxhbmsnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0JsYW5rKCkge1xuICAgICAgaWYgKHRoaXMuc2Nyb2xsLmNoaWxkcmVuLmxlbmd0aCA9PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0aGlzLnNjcm9sbC5jaGlsZHJlbi5sZW5ndGggPiAxKSByZXR1cm4gZmFsc2U7XG4gICAgICB2YXIgYmxvY2sgPSB0aGlzLnNjcm9sbC5jaGlsZHJlbi5oZWFkO1xuICAgICAgaWYgKGJsb2NrLnN0YXRpY3MuYmxvdE5hbWUgIT09IF9ibG9jazIuZGVmYXVsdC5ibG90TmFtZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKGJsb2NrLmNoaWxkcmVuLmxlbmd0aCA+IDEpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiBibG9jay5jaGlsZHJlbi5oZWFkIGluc3RhbmNlb2YgX2JyZWFrMi5kZWZhdWx0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbW92ZUZvcm1hdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUZvcm1hdChpbmRleCwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdGV4dCA9IHRoaXMuZ2V0VGV4dChpbmRleCwgbGVuZ3RoKTtcblxuICAgICAgdmFyIF9zY3JvbGwkbGluZTMgPSB0aGlzLnNjcm9sbC5saW5lKGluZGV4ICsgbGVuZ3RoKSxcbiAgICAgICAgICBfc2Nyb2xsJGxpbmU0ID0gX3NsaWNlZFRvQXJyYXkoX3Njcm9sbCRsaW5lMywgMiksXG4gICAgICAgICAgbGluZSA9IF9zY3JvbGwkbGluZTRbMF0sXG4gICAgICAgICAgb2Zmc2V0ID0gX3Njcm9sbCRsaW5lNFsxXTtcblxuICAgICAgdmFyIHN1ZmZpeExlbmd0aCA9IDAsXG4gICAgICAgICAgc3VmZml4ID0gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCk7XG4gICAgICBpZiAobGluZSAhPSBudWxsKSB7XG4gICAgICAgIGlmICghKGxpbmUgaW5zdGFuY2VvZiBfY29kZTIuZGVmYXVsdCkpIHtcbiAgICAgICAgICBzdWZmaXhMZW5ndGggPSBsaW5lLmxlbmd0aCgpIC0gb2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN1ZmZpeExlbmd0aCA9IGxpbmUubmV3bGluZUluZGV4KG9mZnNldCkgLSBvZmZzZXQgKyAxO1xuICAgICAgICB9XG4gICAgICAgIHN1ZmZpeCA9IGxpbmUuZGVsdGEoKS5zbGljZShvZmZzZXQsIG9mZnNldCArIHN1ZmZpeExlbmd0aCAtIDEpLmluc2VydCgnXFxuJyk7XG4gICAgICB9XG4gICAgICB2YXIgY29udGVudHMgPSB0aGlzLmdldENvbnRlbnRzKGluZGV4LCBsZW5ndGggKyBzdWZmaXhMZW5ndGgpO1xuICAgICAgdmFyIGRpZmYgPSBjb250ZW50cy5kaWZmKG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLmluc2VydCh0ZXh0KS5jb25jYXQoc3VmZml4KSk7XG4gICAgICB2YXIgZGVsdGEgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5yZXRhaW4oaW5kZXgpLmNvbmNhdChkaWZmKTtcbiAgICAgIHJldHVybiB0aGlzLmFwcGx5RGVsdGEoZGVsdGEpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShjaGFuZ2UpIHtcbiAgICAgIHZhciBtdXRhdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xuICAgICAgdmFyIGN1cnNvckluZGV4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBvbGREZWx0YSA9IHRoaXMuZGVsdGE7XG4gICAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA9PT0gMSAmJiBtdXRhdGlvbnNbMF0udHlwZSA9PT0gJ2NoYXJhY3RlckRhdGEnICYmIG11dGF0aW9uc1swXS50YXJnZXQuZGF0YS5tYXRjaChBU0NJSSkgJiYgX3BhcmNobWVudDIuZGVmYXVsdC5maW5kKG11dGF0aW9uc1swXS50YXJnZXQpKSB7XG4gICAgICAgIC8vIE9wdGltaXphdGlvbiBmb3IgY2hhcmFjdGVyIGNoYW5nZXNcbiAgICAgICAgdmFyIHRleHRCbG90ID0gX3BhcmNobWVudDIuZGVmYXVsdC5maW5kKG11dGF0aW9uc1swXS50YXJnZXQpO1xuICAgICAgICB2YXIgZm9ybWF0cyA9ICgwLCBfYmxvY2suYnViYmxlRm9ybWF0cykodGV4dEJsb3QpO1xuICAgICAgICB2YXIgaW5kZXggPSB0ZXh0QmxvdC5vZmZzZXQodGhpcy5zY3JvbGwpO1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSBtdXRhdGlvbnNbMF0ub2xkVmFsdWUucmVwbGFjZShfY3Vyc29yMi5kZWZhdWx0LkNPTlRFTlRTLCAnJyk7XG4gICAgICAgIHZhciBvbGRUZXh0ID0gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkuaW5zZXJ0KG9sZFZhbHVlKTtcbiAgICAgICAgdmFyIG5ld1RleHQgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5pbnNlcnQodGV4dEJsb3QudmFsdWUoKSk7XG4gICAgICAgIHZhciBkaWZmRGVsdGEgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5yZXRhaW4oaW5kZXgpLmNvbmNhdChvbGRUZXh0LmRpZmYobmV3VGV4dCwgY3Vyc29ySW5kZXgpKTtcbiAgICAgICAgY2hhbmdlID0gZGlmZkRlbHRhLnJlZHVjZShmdW5jdGlvbiAoZGVsdGEsIG9wKSB7XG4gICAgICAgICAgaWYgKG9wLmluc2VydCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlbHRhLmluc2VydChvcC5pbnNlcnQsIGZvcm1hdHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGVsdGEucHVzaChvcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKSk7XG4gICAgICAgIHRoaXMuZGVsdGEgPSBvbGREZWx0YS5jb21wb3NlKGNoYW5nZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRlbHRhID0gdGhpcy5nZXREZWx0YSgpO1xuICAgICAgICBpZiAoIWNoYW5nZSB8fCAhKDAsIF9kZWVwRXF1YWwyLmRlZmF1bHQpKG9sZERlbHRhLmNvbXBvc2UoY2hhbmdlKSwgdGhpcy5kZWx0YSkpIHtcbiAgICAgICAgICBjaGFuZ2UgPSBvbGREZWx0YS5kaWZmKHRoaXMuZGVsdGEsIGN1cnNvckluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRWRpdG9yO1xufSgpO1xuXG5mdW5jdGlvbiBjb21iaW5lRm9ybWF0cyhmb3JtYXRzLCBjb21iaW5lZCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoY29tYmluZWQpLnJlZHVjZShmdW5jdGlvbiAobWVyZ2VkLCBuYW1lKSB7XG4gICAgaWYgKGZvcm1hdHNbbmFtZV0gPT0gbnVsbCkgcmV0dXJuIG1lcmdlZDtcbiAgICBpZiAoY29tYmluZWRbbmFtZV0gPT09IGZvcm1hdHNbbmFtZV0pIHtcbiAgICAgIG1lcmdlZFtuYW1lXSA9IGNvbWJpbmVkW25hbWVdO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjb21iaW5lZFtuYW1lXSkpIHtcbiAgICAgIGlmIChjb21iaW5lZFtuYW1lXS5pbmRleE9mKGZvcm1hdHNbbmFtZV0pIDwgMCkge1xuICAgICAgICBtZXJnZWRbbmFtZV0gPSBjb21iaW5lZFtuYW1lXS5jb25jYXQoW2Zvcm1hdHNbbmFtZV1dKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbWVyZ2VkW25hbWVdID0gW2NvbWJpbmVkW25hbWVdLCBmb3JtYXRzW25hbWVdXTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlZDtcbiAgfSwge30pO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVEZWx0YShkZWx0YSkge1xuICByZXR1cm4gZGVsdGEucmVkdWNlKGZ1bmN0aW9uIChkZWx0YSwgb3ApIHtcbiAgICBpZiAob3AuaW5zZXJ0ID09PSAxKSB7XG4gICAgICB2YXIgYXR0cmlidXRlcyA9ICgwLCBfY2xvbmUyLmRlZmF1bHQpKG9wLmF0dHJpYnV0ZXMpO1xuICAgICAgZGVsZXRlIGF0dHJpYnV0ZXNbJ2ltYWdlJ107XG4gICAgICByZXR1cm4gZGVsdGEuaW5zZXJ0KHsgaW1hZ2U6IG9wLmF0dHJpYnV0ZXMuaW1hZ2UgfSwgYXR0cmlidXRlcyk7XG4gICAgfVxuICAgIGlmIChvcC5hdHRyaWJ1dGVzICE9IG51bGwgJiYgKG9wLmF0dHJpYnV0ZXMubGlzdCA9PT0gdHJ1ZSB8fCBvcC5hdHRyaWJ1dGVzLmJ1bGxldCA9PT0gdHJ1ZSkpIHtcbiAgICAgIG9wID0gKDAsIF9jbG9uZTIuZGVmYXVsdCkob3ApO1xuICAgICAgaWYgKG9wLmF0dHJpYnV0ZXMubGlzdCkge1xuICAgICAgICBvcC5hdHRyaWJ1dGVzLmxpc3QgPSAnb3JkZXJlZCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcC5hdHRyaWJ1dGVzLmxpc3QgPSAnYnVsbGV0JztcbiAgICAgICAgZGVsZXRlIG9wLmF0dHJpYnV0ZXMuYnVsbGV0O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wLmluc2VydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciB0ZXh0ID0gb3AuaW5zZXJ0LnJlcGxhY2UoL1xcclxcbi9nLCAnXFxuJykucmVwbGFjZSgvXFxyL2csICdcXG4nKTtcbiAgICAgIHJldHVybiBkZWx0YS5pbnNlcnQodGV4dCwgb3AuYXR0cmlidXRlcyk7XG4gICAgfVxuICAgIHJldHVybiBkZWx0YS5wdXNoKG9wKTtcbiAgfSwgbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkpO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBFZGl0b3I7XG5cbi8qKiovIH0pLFxuLyogMTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuUmFuZ2UgPSB1bmRlZmluZWQ7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX2Nsb25lID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cbnZhciBfY2xvbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xvbmUpO1xuXG52YXIgX2RlZXBFcXVhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG52YXIgX2RlZXBFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWVwRXF1YWwpO1xuXG52YXIgX2VtaXR0ZXIzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxudmFyIF9lbWl0dGVyNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VtaXR0ZXIzKTtcblxudmFyIF9sb2dnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxudmFyIF9sb2dnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9nZ2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBkZWJ1ZyA9ICgwLCBfbG9nZ2VyMi5kZWZhdWx0KSgncXVpbGw6c2VsZWN0aW9uJyk7XG5cbnZhciBSYW5nZSA9IGZ1bmN0aW9uIFJhbmdlKGluZGV4KSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJhbmdlKTtcblxuICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xufTtcblxudmFyIFNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2VsZWN0aW9uKHNjcm9sbCwgZW1pdHRlcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VsZWN0aW9uKTtcblxuICAgIHRoaXMuZW1pdHRlciA9IGVtaXR0ZXI7XG4gICAgdGhpcy5zY3JvbGwgPSBzY3JvbGw7XG4gICAgdGhpcy5jb21wb3NpbmcgPSBmYWxzZTtcbiAgICB0aGlzLm1vdXNlRG93biA9IGZhbHNlO1xuICAgIHRoaXMucm9vdCA9IHRoaXMuc2Nyb2xsLmRvbU5vZGU7XG4gICAgdGhpcy5jdXJzb3IgPSBfcGFyY2htZW50Mi5kZWZhdWx0LmNyZWF0ZSgnY3Vyc29yJywgdGhpcyk7XG4gICAgLy8gc2F2ZWRSYW5nZSBpcyBsYXN0IG5vbi1udWxsIHJhbmdlXG4gICAgdGhpcy5sYXN0UmFuZ2UgPSB0aGlzLnNhdmVkUmFuZ2UgPSBuZXcgUmFuZ2UoMCwgMCk7XG4gICAgdGhpcy5oYW5kbGVDb21wb3NpdGlvbigpO1xuICAgIHRoaXMuaGFuZGxlRHJhZ2dpbmcoKTtcbiAgICB0aGlzLmVtaXR0ZXIubGlzdGVuRE9NKCdzZWxlY3Rpb25jaGFuZ2UnLCBkb2N1bWVudCwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5tb3VzZURvd24pIHtcbiAgICAgICAgc2V0VGltZW91dChfdGhpcy51cGRhdGUuYmluZChfdGhpcywgX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5VU0VSKSwgMSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5lbWl0dGVyLm9uKF9lbWl0dGVyNC5kZWZhdWx0LmV2ZW50cy5FRElUT1JfQ0hBTkdFLCBmdW5jdGlvbiAodHlwZSwgZGVsdGEpIHtcbiAgICAgIGlmICh0eXBlID09PSBfZW1pdHRlcjQuZGVmYXVsdC5ldmVudHMuVEVYVF9DSEFOR0UgJiYgZGVsdGEubGVuZ3RoKCkgPiAwKSB7XG4gICAgICAgIF90aGlzLnVwZGF0ZShfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5lbWl0dGVyLm9uKF9lbWl0dGVyNC5kZWZhdWx0LmV2ZW50cy5TQ1JPTExfQkVGT1JFX1VQREFURSwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5oYXNGb2N1cygpKSByZXR1cm47XG4gICAgICB2YXIgbmF0aXZlID0gX3RoaXMuZ2V0TmF0aXZlUmFuZ2UoKTtcbiAgICAgIGlmIChuYXRpdmUgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgaWYgKG5hdGl2ZS5zdGFydC5ub2RlID09PSBfdGhpcy5jdXJzb3IudGV4dE5vZGUpIHJldHVybjsgLy8gY3Vyc29yLnJlc3RvcmUoKSB3aWxsIGhhbmRsZVxuICAgICAgLy8gVE9ETyB1bmNsZWFyIGlmIHRoaXMgaGFzIG5lZ2F0aXZlIHNpZGUgZWZmZWN0c1xuICAgICAgX3RoaXMuZW1pdHRlci5vbmNlKF9lbWl0dGVyNC5kZWZhdWx0LmV2ZW50cy5TQ1JPTExfVVBEQVRFLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgX3RoaXMuc2V0TmF0aXZlUmFuZ2UobmF0aXZlLnN0YXJ0Lm5vZGUsIG5hdGl2ZS5zdGFydC5vZmZzZXQsIG5hdGl2ZS5lbmQubm9kZSwgbmF0aXZlLmVuZC5vZmZzZXQpO1xuICAgICAgICB9IGNhdGNoIChpZ25vcmVkKSB7fVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5lbWl0dGVyLm9uKF9lbWl0dGVyNC5kZWZhdWx0LmV2ZW50cy5TQ1JPTExfT1BUSU1JWkUsIGZ1bmN0aW9uIChtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgIGlmIChjb250ZXh0LnJhbmdlKSB7XG4gICAgICAgIHZhciBfY29udGV4dCRyYW5nZSA9IGNvbnRleHQucmFuZ2UsXG4gICAgICAgICAgICBzdGFydE5vZGUgPSBfY29udGV4dCRyYW5nZS5zdGFydE5vZGUsXG4gICAgICAgICAgICBzdGFydE9mZnNldCA9IF9jb250ZXh0JHJhbmdlLnN0YXJ0T2Zmc2V0LFxuICAgICAgICAgICAgZW5kTm9kZSA9IF9jb250ZXh0JHJhbmdlLmVuZE5vZGUsXG4gICAgICAgICAgICBlbmRPZmZzZXQgPSBfY29udGV4dCRyYW5nZS5lbmRPZmZzZXQ7XG5cbiAgICAgICAgX3RoaXMuc2V0TmF0aXZlUmFuZ2Uoc3RhcnROb2RlLCBzdGFydE9mZnNldCwgZW5kTm9kZSwgZW5kT2Zmc2V0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnVwZGF0ZShfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2VsZWN0aW9uLCBbe1xuICAgIGtleTogJ2hhbmRsZUNvbXBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ29tcG9zaXRpb24oKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5yb290LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5jb21wb3NpbmcgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5jb21wb3NpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKF90aGlzMi5jdXJzb3IucGFyZW50KSB7XG4gICAgICAgICAgdmFyIHJhbmdlID0gX3RoaXMyLmN1cnNvci5yZXN0b3JlKCk7XG4gICAgICAgICAgaWYgKCFyYW5nZSkgcmV0dXJuO1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMyLnNldE5hdGl2ZVJhbmdlKHJhbmdlLnN0YXJ0Tm9kZSwgcmFuZ2Uuc3RhcnRPZmZzZXQsIHJhbmdlLmVuZE5vZGUsIHJhbmdlLmVuZE9mZnNldCk7XG4gICAgICAgICAgfSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZURyYWdnaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRHJhZ2dpbmcoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdGhpcy5lbWl0dGVyLmxpc3RlbkRPTSgnbW91c2Vkb3duJywgZG9jdW1lbnQuYm9keSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMubW91c2VEb3duID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbWl0dGVyLmxpc3RlbkRPTSgnbW91c2V1cCcsIGRvY3VtZW50LmJvZHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLm1vdXNlRG93biA9IGZhbHNlO1xuICAgICAgICBfdGhpczMudXBkYXRlKF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb2N1cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgICAgaWYgKHRoaXMuaGFzRm9jdXMoKSkgcmV0dXJuO1xuICAgICAgdGhpcy5yb290LmZvY3VzKCk7XG4gICAgICB0aGlzLnNldFJhbmdlKHRoaXMuc2F2ZWRSYW5nZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0KF9mb3JtYXQsIHZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5zY3JvbGwud2hpdGVsaXN0ICE9IG51bGwgJiYgIXRoaXMuc2Nyb2xsLndoaXRlbGlzdFtfZm9ybWF0XSkgcmV0dXJuO1xuICAgICAgdGhpcy5zY3JvbGwudXBkYXRlKCk7XG4gICAgICB2YXIgbmF0aXZlUmFuZ2UgPSB0aGlzLmdldE5hdGl2ZVJhbmdlKCk7XG4gICAgICBpZiAobmF0aXZlUmFuZ2UgPT0gbnVsbCB8fCAhbmF0aXZlUmFuZ2UubmF0aXZlLmNvbGxhcHNlZCB8fCBfcGFyY2htZW50Mi5kZWZhdWx0LnF1ZXJ5KF9mb3JtYXQsIF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuQkxPQ0spKSByZXR1cm47XG4gICAgICBpZiAobmF0aXZlUmFuZ2Uuc3RhcnQubm9kZSAhPT0gdGhpcy5jdXJzb3IudGV4dE5vZGUpIHtcbiAgICAgICAgdmFyIGJsb3QgPSBfcGFyY2htZW50Mi5kZWZhdWx0LmZpbmQobmF0aXZlUmFuZ2Uuc3RhcnQubm9kZSwgZmFsc2UpO1xuICAgICAgICBpZiAoYmxvdCA9PSBudWxsKSByZXR1cm47XG4gICAgICAgIC8vIFRPRE8gR2l2ZSBibG90IGFiaWxpdHkgdG8gbm90IHNwbGl0XG4gICAgICAgIGlmIChibG90IGluc3RhbmNlb2YgX3BhcmNobWVudDIuZGVmYXVsdC5MZWFmKSB7XG4gICAgICAgICAgdmFyIGFmdGVyID0gYmxvdC5zcGxpdChuYXRpdmVSYW5nZS5zdGFydC5vZmZzZXQpO1xuICAgICAgICAgIGJsb3QucGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLmN1cnNvciwgYWZ0ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJsb3QuaW5zZXJ0QmVmb3JlKHRoaXMuY3Vyc29yLCBuYXRpdmVSYW5nZS5zdGFydC5ub2RlKTsgLy8gU2hvdWxkIG5ldmVyIGhhcHBlblxuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3Vyc29yLmF0dGFjaCgpO1xuICAgICAgfVxuICAgICAgdGhpcy5jdXJzb3IuZm9ybWF0KF9mb3JtYXQsIHZhbHVlKTtcbiAgICAgIHRoaXMuc2Nyb2xsLm9wdGltaXplKCk7XG4gICAgICB0aGlzLnNldE5hdGl2ZVJhbmdlKHRoaXMuY3Vyc29yLnRleHROb2RlLCB0aGlzLmN1cnNvci50ZXh0Tm9kZS5kYXRhLmxlbmd0aCk7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEJvdW5kcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJvdW5kcyhpbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuICAgICAgdmFyIHNjcm9sbExlbmd0aCA9IHRoaXMuc2Nyb2xsLmxlbmd0aCgpO1xuICAgICAgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgc2Nyb2xsTGVuZ3RoIC0gMSk7XG4gICAgICBsZW5ndGggPSBNYXRoLm1pbihpbmRleCArIGxlbmd0aCwgc2Nyb2xsTGVuZ3RoIC0gMSkgLSBpbmRleDtcbiAgICAgIHZhciBub2RlID0gdm9pZCAwLFxuICAgICAgICAgIF9zY3JvbGwkbGVhZiA9IHRoaXMuc2Nyb2xsLmxlYWYoaW5kZXgpLFxuICAgICAgICAgIF9zY3JvbGwkbGVhZjIgPSBfc2xpY2VkVG9BcnJheShfc2Nyb2xsJGxlYWYsIDIpLFxuICAgICAgICAgIGxlYWYgPSBfc2Nyb2xsJGxlYWYyWzBdLFxuICAgICAgICAgIG9mZnNldCA9IF9zY3JvbGwkbGVhZjJbMV07XG4gICAgICBpZiAobGVhZiA9PSBudWxsKSByZXR1cm4gbnVsbDtcblxuICAgICAgdmFyIF9sZWFmJHBvc2l0aW9uID0gbGVhZi5wb3NpdGlvbihvZmZzZXQsIHRydWUpO1xuXG4gICAgICB2YXIgX2xlYWYkcG9zaXRpb24yID0gX3NsaWNlZFRvQXJyYXkoX2xlYWYkcG9zaXRpb24sIDIpO1xuXG4gICAgICBub2RlID0gX2xlYWYkcG9zaXRpb24yWzBdO1xuICAgICAgb2Zmc2V0ID0gX2xlYWYkcG9zaXRpb24yWzFdO1xuXG4gICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICAgICAgcmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0KTtcblxuICAgICAgICB2YXIgX3Njcm9sbCRsZWFmMyA9IHRoaXMuc2Nyb2xsLmxlYWYoaW5kZXggKyBsZW5ndGgpO1xuXG4gICAgICAgIHZhciBfc2Nyb2xsJGxlYWY0ID0gX3NsaWNlZFRvQXJyYXkoX3Njcm9sbCRsZWFmMywgMik7XG5cbiAgICAgICAgbGVhZiA9IF9zY3JvbGwkbGVhZjRbMF07XG4gICAgICAgIG9mZnNldCA9IF9zY3JvbGwkbGVhZjRbMV07XG5cbiAgICAgICAgaWYgKGxlYWYgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgdmFyIF9sZWFmJHBvc2l0aW9uMyA9IGxlYWYucG9zaXRpb24ob2Zmc2V0LCB0cnVlKTtcblxuICAgICAgICB2YXIgX2xlYWYkcG9zaXRpb240ID0gX3NsaWNlZFRvQXJyYXkoX2xlYWYkcG9zaXRpb24zLCAyKTtcblxuICAgICAgICBub2RlID0gX2xlYWYkcG9zaXRpb240WzBdO1xuICAgICAgICBvZmZzZXQgPSBfbGVhZiRwb3NpdGlvbjRbMV07XG5cbiAgICAgICAgcmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldCk7XG4gICAgICAgIHJldHVybiByYW5nZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzaWRlID0gJ2xlZnQnO1xuICAgICAgICB2YXIgcmVjdCA9IHZvaWQgMDtcbiAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBUZXh0KSB7XG4gICAgICAgICAgaWYgKG9mZnNldCA8IG5vZGUuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICByYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0ICsgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KG5vZGUsIG9mZnNldCAtIDEpO1xuICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICBzaWRlID0gJ3JpZ2h0JztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVjdCA9IHJhbmdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlY3QgPSBsZWFmLmRvbU5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgaWYgKG9mZnNldCA+IDApIHNpZGUgPSAncmlnaHQnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYm90dG9tOiByZWN0LnRvcCArIHJlY3QuaGVpZ2h0LFxuICAgICAgICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gICAgICAgICAgbGVmdDogcmVjdFtzaWRlXSxcbiAgICAgICAgICByaWdodDogcmVjdFtzaWRlXSxcbiAgICAgICAgICB0b3A6IHJlY3QudG9wLFxuICAgICAgICAgIHdpZHRoOiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0TmF0aXZlUmFuZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXROYXRpdmVSYW5nZSgpIHtcbiAgICAgIHZhciBzZWxlY3Rpb24gPSBkb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIGlmIChzZWxlY3Rpb24gPT0gbnVsbCB8fCBzZWxlY3Rpb24ucmFuZ2VDb3VudCA8PSAwKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBuYXRpdmVSYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuICAgICAgaWYgKG5hdGl2ZVJhbmdlID09IG51bGwpIHJldHVybiBudWxsO1xuICAgICAgdmFyIHJhbmdlID0gdGhpcy5ub3JtYWxpemVOYXRpdmUobmF0aXZlUmFuZ2UpO1xuICAgICAgZGVidWcuaW5mbygnZ2V0TmF0aXZlUmFuZ2UnLCByYW5nZSk7XG4gICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0UmFuZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSYW5nZSgpIHtcbiAgICAgIHZhciBub3JtYWxpemVkID0gdGhpcy5nZXROYXRpdmVSYW5nZSgpO1xuICAgICAgaWYgKG5vcm1hbGl6ZWQgPT0gbnVsbCkgcmV0dXJuIFtudWxsLCBudWxsXTtcbiAgICAgIHZhciByYW5nZSA9IHRoaXMubm9ybWFsaXplZFRvUmFuZ2Uobm9ybWFsaXplZCk7XG4gICAgICByZXR1cm4gW3JhbmdlLCBub3JtYWxpemVkXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdoYXNGb2N1cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc0ZvY3VzKCkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IHRoaXMucm9vdDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdub3JtYWxpemVkVG9SYW5nZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5vcm1hbGl6ZWRUb1JhbmdlKHJhbmdlKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIHBvc2l0aW9ucyA9IFtbcmFuZ2Uuc3RhcnQubm9kZSwgcmFuZ2Uuc3RhcnQub2Zmc2V0XV07XG4gICAgICBpZiAoIXJhbmdlLm5hdGl2ZS5jb2xsYXBzZWQpIHtcbiAgICAgICAgcG9zaXRpb25zLnB1c2goW3JhbmdlLmVuZC5ub2RlLCByYW5nZS5lbmQub2Zmc2V0XSk7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXhlcyA9IHBvc2l0aW9ucy5tYXAoZnVuY3Rpb24gKHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBfcG9zaXRpb24gPSBfc2xpY2VkVG9BcnJheShwb3NpdGlvbiwgMiksXG4gICAgICAgICAgICBub2RlID0gX3Bvc2l0aW9uWzBdLFxuICAgICAgICAgICAgb2Zmc2V0ID0gX3Bvc2l0aW9uWzFdO1xuXG4gICAgICAgIHZhciBibG90ID0gX3BhcmNobWVudDIuZGVmYXVsdC5maW5kKG5vZGUsIHRydWUpO1xuICAgICAgICB2YXIgaW5kZXggPSBibG90Lm9mZnNldChfdGhpczQuc2Nyb2xsKTtcbiAgICAgICAgaWYgKG9mZnNldCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfSBlbHNlIGlmIChibG90IGluc3RhbmNlb2YgX3BhcmNobWVudDIuZGVmYXVsdC5Db250YWluZXIpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXggKyBibG90Lmxlbmd0aCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBpbmRleCArIGJsb3QuaW5kZXgobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB2YXIgZW5kID0gTWF0aC5taW4oTWF0aC5tYXguYXBwbHkoTWF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KGluZGV4ZXMpKSwgdGhpcy5zY3JvbGwubGVuZ3RoKCkgLSAxKTtcbiAgICAgIHZhciBzdGFydCA9IE1hdGgubWluLmFwcGx5KE1hdGgsIFtlbmRdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoaW5kZXhlcykpKTtcbiAgICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnQsIGVuZCAtIHN0YXJ0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdub3JtYWxpemVOYXRpdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBub3JtYWxpemVOYXRpdmUobmF0aXZlUmFuZ2UpIHtcbiAgICAgIGlmICghY29udGFpbnModGhpcy5yb290LCBuYXRpdmVSYW5nZS5zdGFydENvbnRhaW5lcikgfHwgIW5hdGl2ZVJhbmdlLmNvbGxhcHNlZCAmJiAhY29udGFpbnModGhpcy5yb290LCBuYXRpdmVSYW5nZS5lbmRDb250YWluZXIpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIHJhbmdlID0ge1xuICAgICAgICBzdGFydDogeyBub2RlOiBuYXRpdmVSYW5nZS5zdGFydENvbnRhaW5lciwgb2Zmc2V0OiBuYXRpdmVSYW5nZS5zdGFydE9mZnNldCB9LFxuICAgICAgICBlbmQ6IHsgbm9kZTogbmF0aXZlUmFuZ2UuZW5kQ29udGFpbmVyLCBvZmZzZXQ6IG5hdGl2ZVJhbmdlLmVuZE9mZnNldCB9LFxuICAgICAgICBuYXRpdmU6IG5hdGl2ZVJhbmdlXG4gICAgICB9O1xuICAgICAgW3JhbmdlLnN0YXJ0LCByYW5nZS5lbmRdLmZvckVhY2goZnVuY3Rpb24gKHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBub2RlID0gcG9zaXRpb24ubm9kZSxcbiAgICAgICAgICAgIG9mZnNldCA9IHBvc2l0aW9uLm9mZnNldDtcbiAgICAgICAgd2hpbGUgKCEobm9kZSBpbnN0YW5jZW9mIFRleHQpICYmIG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPiBvZmZzZXQpIHtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLmNoaWxkTm9kZXNbb2Zmc2V0XTtcbiAgICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgICAgfSBlbHNlIGlmIChub2RlLmNoaWxkTm9kZXMubGVuZ3RoID09PSBvZmZzZXQpIHtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLmxhc3RDaGlsZDtcbiAgICAgICAgICAgIG9mZnNldCA9IG5vZGUgaW5zdGFuY2VvZiBUZXh0ID8gbm9kZS5kYXRhLmxlbmd0aCA6IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcG9zaXRpb24ubm9kZSA9IG5vZGUsIHBvc2l0aW9uLm9mZnNldCA9IG9mZnNldDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJhbmdlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JhbmdlVG9OYXRpdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByYW5nZVRvTmF0aXZlKHJhbmdlKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdmFyIGluZGV4ZXMgPSByYW5nZS5jb2xsYXBzZWQgPyBbcmFuZ2UuaW5kZXhdIDogW3JhbmdlLmluZGV4LCByYW5nZS5pbmRleCArIHJhbmdlLmxlbmd0aF07XG4gICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgdmFyIHNjcm9sbExlbmd0aCA9IHRoaXMuc2Nyb2xsLmxlbmd0aCgpO1xuICAgICAgaW5kZXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbmRleCwgaSkge1xuICAgICAgICBpbmRleCA9IE1hdGgubWluKHNjcm9sbExlbmd0aCAtIDEsIGluZGV4KTtcbiAgICAgICAgdmFyIG5vZGUgPSB2b2lkIDAsXG4gICAgICAgICAgICBfc2Nyb2xsJGxlYWY1ID0gX3RoaXM1LnNjcm9sbC5sZWFmKGluZGV4KSxcbiAgICAgICAgICAgIF9zY3JvbGwkbGVhZjYgPSBfc2xpY2VkVG9BcnJheShfc2Nyb2xsJGxlYWY1LCAyKSxcbiAgICAgICAgICAgIGxlYWYgPSBfc2Nyb2xsJGxlYWY2WzBdLFxuICAgICAgICAgICAgb2Zmc2V0ID0gX3Njcm9sbCRsZWFmNlsxXTtcbiAgICAgICAgdmFyIF9sZWFmJHBvc2l0aW9uNSA9IGxlYWYucG9zaXRpb24ob2Zmc2V0LCBpICE9PSAwKTtcblxuICAgICAgICB2YXIgX2xlYWYkcG9zaXRpb242ID0gX3NsaWNlZFRvQXJyYXkoX2xlYWYkcG9zaXRpb241LCAyKTtcblxuICAgICAgICBub2RlID0gX2xlYWYkcG9zaXRpb242WzBdO1xuICAgICAgICBvZmZzZXQgPSBfbGVhZiRwb3NpdGlvbjZbMV07XG5cbiAgICAgICAgYXJncy5wdXNoKG5vZGUsIG9mZnNldCk7XG4gICAgICB9KTtcbiAgICAgIGlmIChhcmdzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2Nyb2xsSW50b1ZpZXcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzY3JvbGxJbnRvVmlldyhzY3JvbGxpbmdDb250YWluZXIpIHtcbiAgICAgIHZhciByYW5nZSA9IHRoaXMubGFzdFJhbmdlO1xuICAgICAgaWYgKHJhbmdlID09IG51bGwpIHJldHVybjtcbiAgICAgIHZhciBib3VuZHMgPSB0aGlzLmdldEJvdW5kcyhyYW5nZS5pbmRleCwgcmFuZ2UubGVuZ3RoKTtcbiAgICAgIGlmIChib3VuZHMgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgdmFyIGxpbWl0ID0gdGhpcy5zY3JvbGwubGVuZ3RoKCkgLSAxO1xuXG4gICAgICB2YXIgX3Njcm9sbCRsaW5lID0gdGhpcy5zY3JvbGwubGluZShNYXRoLm1pbihyYW5nZS5pbmRleCwgbGltaXQpKSxcbiAgICAgICAgICBfc2Nyb2xsJGxpbmUyID0gX3NsaWNlZFRvQXJyYXkoX3Njcm9sbCRsaW5lLCAxKSxcbiAgICAgICAgICBmaXJzdCA9IF9zY3JvbGwkbGluZTJbMF07XG5cbiAgICAgIHZhciBsYXN0ID0gZmlyc3Q7XG4gICAgICBpZiAocmFuZ2UubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgX3Njcm9sbCRsaW5lMyA9IHRoaXMuc2Nyb2xsLmxpbmUoTWF0aC5taW4ocmFuZ2UuaW5kZXggKyByYW5nZS5sZW5ndGgsIGxpbWl0KSk7XG5cbiAgICAgICAgdmFyIF9zY3JvbGwkbGluZTQgPSBfc2xpY2VkVG9BcnJheShfc2Nyb2xsJGxpbmUzLCAxKTtcblxuICAgICAgICBsYXN0ID0gX3Njcm9sbCRsaW5lNFswXTtcbiAgICAgIH1cbiAgICAgIGlmIChmaXJzdCA9PSBudWxsIHx8IGxhc3QgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgdmFyIHNjcm9sbEJvdW5kcyA9IHNjcm9sbGluZ0NvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGlmIChib3VuZHMudG9wIDwgc2Nyb2xsQm91bmRzLnRvcCkge1xuICAgICAgICBzY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsVG9wIC09IHNjcm9sbEJvdW5kcy50b3AgLSBib3VuZHMudG9wO1xuICAgICAgfSBlbHNlIGlmIChib3VuZHMuYm90dG9tID4gc2Nyb2xsQm91bmRzLmJvdHRvbSkge1xuICAgICAgICBzY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsVG9wICs9IGJvdW5kcy5ib3R0b20gLSBzY3JvbGxCb3VuZHMuYm90dG9tO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldE5hdGl2ZVJhbmdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TmF0aXZlUmFuZ2Uoc3RhcnROb2RlLCBzdGFydE9mZnNldCkge1xuICAgICAgdmFyIGVuZE5vZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHN0YXJ0Tm9kZTtcbiAgICAgIHZhciBlbmRPZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHN0YXJ0T2Zmc2V0O1xuICAgICAgdmFyIGZvcmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTtcblxuICAgICAgZGVidWcuaW5mbygnc2V0TmF0aXZlUmFuZ2UnLCBzdGFydE5vZGUsIHN0YXJ0T2Zmc2V0LCBlbmROb2RlLCBlbmRPZmZzZXQpO1xuICAgICAgaWYgKHN0YXJ0Tm9kZSAhPSBudWxsICYmICh0aGlzLnJvb3QucGFyZW50Tm9kZSA9PSBudWxsIHx8IHN0YXJ0Tm9kZS5wYXJlbnROb2RlID09IG51bGwgfHwgZW5kTm9kZS5wYXJlbnROb2RlID09IG51bGwpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBzZWxlY3Rpb24gPSBkb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIGlmIChzZWxlY3Rpb24gPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgaWYgKHN0YXJ0Tm9kZSAhPSBudWxsKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNGb2N1cygpKSB0aGlzLnJvb3QuZm9jdXMoKTtcbiAgICAgICAgdmFyIG5hdGl2ZSA9ICh0aGlzLmdldE5hdGl2ZVJhbmdlKCkgfHwge30pLm5hdGl2ZTtcbiAgICAgICAgaWYgKG5hdGl2ZSA9PSBudWxsIHx8IGZvcmNlIHx8IHN0YXJ0Tm9kZSAhPT0gbmF0aXZlLnN0YXJ0Q29udGFpbmVyIHx8IHN0YXJ0T2Zmc2V0ICE9PSBuYXRpdmUuc3RhcnRPZmZzZXQgfHwgZW5kTm9kZSAhPT0gbmF0aXZlLmVuZENvbnRhaW5lciB8fCBlbmRPZmZzZXQgIT09IG5hdGl2ZS5lbmRPZmZzZXQpIHtcblxuICAgICAgICAgIGlmIChzdGFydE5vZGUudGFnTmFtZSA9PSBcIkJSXCIpIHtcbiAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ID0gW10uaW5kZXhPZi5jYWxsKHN0YXJ0Tm9kZS5wYXJlbnROb2RlLmNoaWxkTm9kZXMsIHN0YXJ0Tm9kZSk7XG4gICAgICAgICAgICBzdGFydE5vZGUgPSBzdGFydE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVuZE5vZGUudGFnTmFtZSA9PSBcIkJSXCIpIHtcbiAgICAgICAgICAgIGVuZE9mZnNldCA9IFtdLmluZGV4T2YuY2FsbChlbmROb2RlLnBhcmVudE5vZGUuY2hpbGROb2RlcywgZW5kTm9kZSk7XG4gICAgICAgICAgICBlbmROb2RlID0gZW5kTm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHN0YXJ0Tm9kZSwgc3RhcnRPZmZzZXQpO1xuICAgICAgICAgIHJhbmdlLnNldEVuZChlbmROb2RlLCBlbmRPZmZzZXQpO1xuICAgICAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgIHRoaXMucm9vdC5ibHVyKCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuZm9jdXMoKTsgLy8gcm9vdC5ibHVyKCkgbm90IGVub3VnaCBvbiBJRTExK1RyYXZpcytTYXVjZUxhYnMgKGJ1dCBub3QgbG9jYWwgVk1zKVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFJhbmdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UmFuZ2UocmFuZ2UpIHtcbiAgICAgIHZhciBmb3JjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLkFQSTtcblxuICAgICAgaWYgKHR5cGVvZiBmb3JjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc291cmNlID0gZm9yY2U7XG4gICAgICAgIGZvcmNlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBkZWJ1Zy5pbmZvKCdzZXRSYW5nZScsIHJhbmdlKTtcbiAgICAgIGlmIChyYW5nZSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBhcmdzID0gdGhpcy5yYW5nZVRvTmF0aXZlKHJhbmdlKTtcbiAgICAgICAgdGhpcy5zZXROYXRpdmVSYW5nZS5hcHBseSh0aGlzLCBfdG9Db25zdW1hYmxlQXJyYXkoYXJncykuY29uY2F0KFtmb3JjZV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0TmF0aXZlUmFuZ2UobnVsbCk7XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZShzb3VyY2UpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXMuVVNFUjtcblxuICAgICAgdmFyIG9sZFJhbmdlID0gdGhpcy5sYXN0UmFuZ2U7XG5cbiAgICAgIHZhciBfZ2V0UmFuZ2UgPSB0aGlzLmdldFJhbmdlKCksXG4gICAgICAgICAgX2dldFJhbmdlMiA9IF9zbGljZWRUb0FycmF5KF9nZXRSYW5nZSwgMiksXG4gICAgICAgICAgbGFzdFJhbmdlID0gX2dldFJhbmdlMlswXSxcbiAgICAgICAgICBuYXRpdmVSYW5nZSA9IF9nZXRSYW5nZTJbMV07XG5cbiAgICAgIHRoaXMubGFzdFJhbmdlID0gbGFzdFJhbmdlO1xuICAgICAgaWYgKHRoaXMubGFzdFJhbmdlICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zYXZlZFJhbmdlID0gdGhpcy5sYXN0UmFuZ2U7XG4gICAgICB9XG4gICAgICBpZiAoISgwLCBfZGVlcEVxdWFsMi5kZWZhdWx0KShvbGRSYW5nZSwgdGhpcy5sYXN0UmFuZ2UpKSB7XG4gICAgICAgIHZhciBfZW1pdHRlcjtcblxuICAgICAgICBpZiAoIXRoaXMuY29tcG9zaW5nICYmIG5hdGl2ZVJhbmdlICE9IG51bGwgJiYgbmF0aXZlUmFuZ2UubmF0aXZlLmNvbGxhcHNlZCAmJiBuYXRpdmVSYW5nZS5zdGFydC5ub2RlICE9PSB0aGlzLmN1cnNvci50ZXh0Tm9kZSkge1xuICAgICAgICAgIHRoaXMuY3Vyc29yLnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXJncyA9IFtfZW1pdHRlcjQuZGVmYXVsdC5ldmVudHMuU0VMRUNUSU9OX0NIQU5HRSwgKDAsIF9jbG9uZTIuZGVmYXVsdCkodGhpcy5sYXN0UmFuZ2UpLCAoMCwgX2Nsb25lMi5kZWZhdWx0KShvbGRSYW5nZSksIHNvdXJjZV07XG4gICAgICAgIChfZW1pdHRlciA9IHRoaXMuZW1pdHRlcikuZW1pdC5hcHBseShfZW1pdHRlciwgW19lbWl0dGVyNC5kZWZhdWx0LmV2ZW50cy5FRElUT1JfQ0hBTkdFXS5jb25jYXQoYXJncykpO1xuICAgICAgICBpZiAoc291cmNlICE9PSBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCkge1xuICAgICAgICAgIHZhciBfZW1pdHRlcjI7XG5cbiAgICAgICAgICAoX2VtaXR0ZXIyID0gdGhpcy5lbWl0dGVyKS5lbWl0LmFwcGx5KF9lbWl0dGVyMiwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2VsZWN0aW9uO1xufSgpO1xuXG5mdW5jdGlvbiBjb250YWlucyhwYXJlbnQsIGRlc2NlbmRhbnQpIHtcbiAgdHJ5IHtcbiAgICAvLyBGaXJlZm94IGluc2VydHMgaW5hY2Nlc3NpYmxlIG5vZGVzIGFyb3VuZCB2aWRlbyBlbGVtZW50c1xuICAgIGRlc2NlbmRhbnQucGFyZW50Tm9kZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBJRTExIGhhcyBidWcgd2l0aCBUZXh0IG5vZGVzXG4gIC8vIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvNzgwODc0L25vZGUtY29udGFpbnMtaXMtaW5jb3JyZWN0XG4gIGlmIChkZXNjZW5kYW50IGluc3RhbmNlb2YgVGV4dCkge1xuICAgIGRlc2NlbmRhbnQgPSBkZXNjZW5kYW50LnBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIHBhcmVudC5jb250YWlucyhkZXNjZW5kYW50KTtcbn1cblxuZXhwb3J0cy5SYW5nZSA9IFJhbmdlO1xuZXhwb3J0cy5kZWZhdWx0ID0gU2VsZWN0aW9uO1xuXG4vKioqLyB9KSxcbi8qIDE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBCcmVhayA9IGZ1bmN0aW9uIChfUGFyY2htZW50JEVtYmVkKSB7XG4gIF9pbmhlcml0cyhCcmVhaywgX1BhcmNobWVudCRFbWJlZCk7XG5cbiAgZnVuY3Rpb24gQnJlYWsoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJyZWFrKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQnJlYWsuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCcmVhaykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJyZWFrLCBbe1xuICAgIGtleTogJ2luc2VydEludG8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRJbnRvKHBhcmVudCwgcmVmKSB7XG4gICAgICBpZiAocGFyZW50LmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBfZ2V0KEJyZWFrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJyZWFrLnByb3RvdHlwZSksICdpbnNlcnRJbnRvJywgdGhpcykuY2FsbCh0aGlzLCBwYXJlbnQsIHJlZik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2xlbmd0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxlbmd0aCgpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3ZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6ICd2YWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQnJlYWs7XG59KF9wYXJjaG1lbnQyLmRlZmF1bHQuRW1iZWQpO1xuXG5CcmVhay5ibG90TmFtZSA9ICdicmVhayc7XG5CcmVhay50YWdOYW1lID0gJ0JSJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gQnJlYWs7XG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGxpbmtlZF9saXN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KTtcbnZhciBzaGFkb3dfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzApO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBDb250YWluZXJCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDb250YWluZXJCbG90LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbnRhaW5lckJsb3QoZG9tTm9kZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkb21Ob2RlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5idWlsZCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmFwcGVuZENoaWxkID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0QmVmb3JlKG90aGVyKTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5hdHRhY2guY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgY2hpbGQuYXR0YWNoKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBuZXcgbGlua2VkX2xpc3RfMS5kZWZhdWx0KCk7XG4gICAgICAgIC8vIE5lZWQgdG8gYmUgcmV2ZXJzZWQgZm9yIGlmIERPTSBub2RlcyBhbHJlYWR5IGluIG9yZGVyXG4gICAgICAgIFtdLnNsaWNlXG4gICAgICAgICAgICAuY2FsbCh0aGlzLmRvbU5vZGUuY2hpbGROb2RlcylcbiAgICAgICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IG1ha2VCbG90KG5vZGUpO1xuICAgICAgICAgICAgICAgIF90aGlzLmluc2VydEJlZm9yZShjaGlsZCwgX3RoaXMuY2hpbGRyZW4uaGVhZCB8fCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBSZWdpc3RyeS5QYXJjaG1lbnRFcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmRlbGV0ZUF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAwICYmIGxlbmd0aCA9PT0gdGhpcy5sZW5ndGgoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoQXQoaW5kZXgsIGxlbmd0aCwgZnVuY3Rpb24gKGNoaWxkLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgICAgICAgY2hpbGQuZGVsZXRlQXQob2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmRlc2NlbmRhbnQgPSBmdW5jdGlvbiAoY3JpdGVyaWEsIGluZGV4KSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuY2hpbGRyZW4uZmluZChpbmRleCksIGNoaWxkID0gX2FbMF0sIG9mZnNldCA9IF9hWzFdO1xuICAgICAgICBpZiAoKGNyaXRlcmlhLmJsb3ROYW1lID09IG51bGwgJiYgY3JpdGVyaWEoY2hpbGQpKSB8fFxuICAgICAgICAgICAgKGNyaXRlcmlhLmJsb3ROYW1lICE9IG51bGwgJiYgY2hpbGQgaW5zdGFuY2VvZiBjcml0ZXJpYSkpIHtcbiAgICAgICAgICAgIHJldHVybiBbY2hpbGQsIG9mZnNldF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2hpbGQgaW5zdGFuY2VvZiBDb250YWluZXJCbG90KSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGQuZGVzY2VuZGFudChjcml0ZXJpYSwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbbnVsbCwgLTFdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5kZXNjZW5kYW50cyA9IGZ1bmN0aW9uIChjcml0ZXJpYSwgaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkgeyBpbmRleCA9IDA7IH1cbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gdm9pZCAwKSB7IGxlbmd0aCA9IE51bWJlci5NQVhfVkFMVUU7IH1cbiAgICAgICAgdmFyIGRlc2NlbmRhbnRzID0gW107XG4gICAgICAgIHZhciBsZW5ndGhMZWZ0ID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2hBdChpbmRleCwgbGVuZ3RoLCBmdW5jdGlvbiAoY2hpbGQsIGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICgoY3JpdGVyaWEuYmxvdE5hbWUgPT0gbnVsbCAmJiBjcml0ZXJpYShjaGlsZCkpIHx8XG4gICAgICAgICAgICAgICAgKGNyaXRlcmlhLmJsb3ROYW1lICE9IG51bGwgJiYgY2hpbGQgaW5zdGFuY2VvZiBjcml0ZXJpYSkpIHtcbiAgICAgICAgICAgICAgICBkZXNjZW5kYW50cy5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIENvbnRhaW5lckJsb3QpIHtcbiAgICAgICAgICAgICAgICBkZXNjZW5kYW50cyA9IGRlc2NlbmRhbnRzLmNvbmNhdChjaGlsZC5kZXNjZW5kYW50cyhjcml0ZXJpYSwgaW5kZXgsIGxlbmd0aExlZnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxlbmd0aExlZnQgLT0gbGVuZ3RoO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRlc2NlbmRhbnRzO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuZGV0YWNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICBjaGlsZC5kZXRhY2goKTtcbiAgICAgICAgfSk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGV0YWNoLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5mb3JtYXRBdCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2hBdChpbmRleCwgbGVuZ3RoLCBmdW5jdGlvbiAoY2hpbGQsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjaGlsZC5mb3JtYXRBdChvZmZzZXQsIGxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmluc2VydEF0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuY2hpbGRyZW4uZmluZChpbmRleCksIGNoaWxkID0gX2FbMF0sIG9mZnNldCA9IF9hWzFdO1xuICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGNoaWxkLmluc2VydEF0KG9mZnNldCwgdmFsdWUsIGRlZik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYmxvdCA9IGRlZiA9PSBudWxsID8gUmVnaXN0cnkuY3JlYXRlKCd0ZXh0JywgdmFsdWUpIDogUmVnaXN0cnkuY3JlYXRlKHZhbHVlLCBkZWYpO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChibG90KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlID0gZnVuY3Rpb24gKGNoaWxkQmxvdCwgcmVmQmxvdCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0aWNzLmFsbG93ZWRDaGlsZHJlbiAhPSBudWxsICYmXG4gICAgICAgICAgICAhdGhpcy5zdGF0aWNzLmFsbG93ZWRDaGlsZHJlbi5zb21lKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZEJsb3QgaW5zdGFuY2VvZiBjaGlsZDtcbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVnaXN0cnkuUGFyY2htZW50RXJyb3IoXCJDYW5ub3QgaW5zZXJ0IFwiICsgY2hpbGRCbG90LnN0YXRpY3MuYmxvdE5hbWUgKyBcIiBpbnRvIFwiICsgdGhpcy5zdGF0aWNzLmJsb3ROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZEJsb3QuaW5zZXJ0SW50byh0aGlzLCByZWZCbG90KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBjaGlsZCkge1xuICAgICAgICAgICAgcmV0dXJuIG1lbW8gKyBjaGlsZC5sZW5ndGgoKTtcbiAgICAgICAgfSwgMCk7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5tb3ZlQ2hpbGRyZW4gPSBmdW5jdGlvbiAodGFyZ2V0UGFyZW50LCByZWZOb2RlKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIHRhcmdldFBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHJlZk5vZGUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLm9wdGltaXplID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5vcHRpbWl6ZS5jYWxsKHRoaXMsIGNvbnRleHQpO1xuICAgICAgICBpZiAodGhpcy5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRpY3MuZGVmYXVsdENoaWxkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBSZWdpc3RyeS5jcmVhdGUodGhpcy5zdGF0aWNzLmRlZmF1bHRDaGlsZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICAgICAgICAgICAgY2hpbGQub3B0aW1pemUoY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5wYXRoID0gZnVuY3Rpb24gKGluZGV4LCBpbmNsdXNpdmUpIHtcbiAgICAgICAgaWYgKGluY2x1c2l2ZSA9PT0gdm9pZCAwKSB7IGluY2x1c2l2ZSA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBfYSA9IHRoaXMuY2hpbGRyZW4uZmluZChpbmRleCwgaW5jbHVzaXZlKSwgY2hpbGQgPSBfYVswXSwgb2Zmc2V0ID0gX2FbMV07XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IFtbdGhpcywgaW5kZXhdXTtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgQ29udGFpbmVyQmxvdCkge1xuICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uLmNvbmNhdChjaGlsZC5wYXRoKG9mZnNldCwgaW5jbHVzaXZlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2hpbGQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcG9zaXRpb24ucHVzaChbY2hpbGQsIG9mZnNldF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb3NpdGlvbjtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucmVtb3ZlKGNoaWxkKTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBDb250YWluZXJCbG90KSB7XG4gICAgICAgICAgICB0YXJnZXQubW92ZUNoaWxkcmVuKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUucmVwbGFjZS5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIChpbmRleCwgZm9yY2UpIHtcbiAgICAgICAgaWYgKGZvcmNlID09PSB2b2lkIDApIHsgZm9yY2UgPSBmYWxzZTsgfVxuICAgICAgICBpZiAoIWZvcmNlKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMubGVuZ3RoKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWZ0ZXIgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShhZnRlciwgdGhpcy5uZXh0KTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoQXQoaW5kZXgsIHRoaXMubGVuZ3RoKCksIGZ1bmN0aW9uIChjaGlsZCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGNoaWxkID0gY2hpbGQuc3BsaXQob2Zmc2V0LCBmb3JjZSk7XG4gICAgICAgICAgICBhZnRlci5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYWZ0ZXI7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS51bndyYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubW92ZUNoaWxkcmVuKHRoaXMucGFyZW50LCB0aGlzLm5leHQpO1xuICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgYWRkZWROb2RlcyA9IFtdO1xuICAgICAgICB2YXIgcmVtb3ZlZE5vZGVzID0gW107XG4gICAgICAgIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICAgICAgaWYgKG11dGF0aW9uLnRhcmdldCA9PT0gX3RoaXMuZG9tTm9kZSAmJiBtdXRhdGlvbi50eXBlID09PSAnY2hpbGRMaXN0Jykge1xuICAgICAgICAgICAgICAgIGFkZGVkTm9kZXMucHVzaC5hcHBseShhZGRlZE5vZGVzLCBtdXRhdGlvbi5hZGRlZE5vZGVzKTtcbiAgICAgICAgICAgICAgICByZW1vdmVkTm9kZXMucHVzaC5hcHBseShyZW1vdmVkTm9kZXMsIG11dGF0aW9uLnJlbW92ZWROb2Rlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZW1vdmVkTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgbm9kZSBoYXMgYWN0dWFsbHkgYmVlbiByZW1vdmVkXG4gICAgICAgICAgICAvLyBPbmUgZXhjZXB0aW9uIGlzIENocm9tZSBkb2VzIG5vdCBpbW1lZGlhdGVseSByZW1vdmUgSUZSQU1Fc1xuICAgICAgICAgICAgLy8gZnJvbSBET00gYnV0IE11dGF0aW9uUmVjb3JkIGlzIGNvcnJlY3QgaW4gaXRzIHJlcG9ydGVkIHJlbW92YWxcbiAgICAgICAgICAgIGlmIChub2RlLnBhcmVudE5vZGUgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBub2RlLnRhZ05hbWUgIT09ICdJRlJBTUUnICYmXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlKSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTkVEX0JZKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJsb3QgPSBSZWdpc3RyeS5maW5kKG5vZGUpO1xuICAgICAgICAgICAgaWYgKGJsb3QgPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAoYmxvdC5kb21Ob2RlLnBhcmVudE5vZGUgPT0gbnVsbCB8fCBibG90LmRvbU5vZGUucGFyZW50Tm9kZSA9PT0gX3RoaXMuZG9tTm9kZSkge1xuICAgICAgICAgICAgICAgIGJsb3QuZGV0YWNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBhZGRlZE5vZGVzXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5wYXJlbnROb2RlID09IF90aGlzLmRvbU5vZGU7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgaWYgKGEgPT09IGIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICBpZiAoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgdmFyIHJlZkJsb3QgPSBudWxsO1xuICAgICAgICAgICAgaWYgKG5vZGUubmV4dFNpYmxpbmcgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlZkJsb3QgPSBSZWdpc3RyeS5maW5kKG5vZGUubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJsb3QgPSBtYWtlQmxvdChub2RlKTtcbiAgICAgICAgICAgIGlmIChibG90Lm5leHQgIT0gcmVmQmxvdCB8fCBibG90Lm5leHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChibG90LnBhcmVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGJsb3QucGFyZW50LnJlbW92ZUNoaWxkKF90aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5zZXJ0QmVmb3JlKGJsb3QsIHJlZkJsb3QgfHwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29udGFpbmVyQmxvdDtcbn0oc2hhZG93XzEuZGVmYXVsdCkpO1xuZnVuY3Rpb24gbWFrZUJsb3Qobm9kZSkge1xuICAgIHZhciBibG90ID0gUmVnaXN0cnkuZmluZChub2RlKTtcbiAgICBpZiAoYmxvdCA9PSBudWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBibG90ID0gUmVnaXN0cnkuY3JlYXRlKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBibG90ID0gUmVnaXN0cnkuY3JlYXRlKFJlZ2lzdHJ5LlNjb3BlLklOTElORSk7XG4gICAgICAgICAgICBbXS5zbGljZS5jYWxsKG5vZGUuY2hpbGROb2RlcykuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgYmxvdC5kb21Ob2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoYmxvdC5kb21Ob2RlLCBub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsb3QuYXR0YWNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJsb3Q7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBDb250YWluZXJCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogMTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGF0dHJpYnV0b3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xudmFyIHN0b3JlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTtcbnZhciBjb250YWluZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBGb3JtYXRCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGb3JtYXRCbG90LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZvcm1hdEJsb3QoZG9tTm9kZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkb21Ob2RlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5hdHRyaWJ1dGVzID0gbmV3IHN0b3JlXzEuZGVmYXVsdChfdGhpcy5kb21Ob2RlKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBGb3JtYXRCbG90LmZvcm1hdHMgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMudGFnTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGhpcy50YWdOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGRvbU5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBGb3JtYXRCbG90LnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUpO1xuICAgICAgICBpZiAoZm9ybWF0IGluc3RhbmNlb2YgYXR0cmlidXRvcl8xLmRlZmF1bHQpIHtcbiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5hdHRyaWJ1dGUoZm9ybWF0LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgIT0gbnVsbCAmJiAobmFtZSAhPT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lIHx8IHRoaXMuZm9ybWF0cygpW25hbWVdICE9PSB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VXaXRoKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRm9ybWF0QmxvdC5wcm90b3R5cGUuZm9ybWF0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZvcm1hdHMgPSB0aGlzLmF0dHJpYnV0ZXMudmFsdWVzKCk7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLnN0YXRpY3MuZm9ybWF0cyh0aGlzLmRvbU5vZGUpO1xuICAgICAgICBpZiAoZm9ybWF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGZvcm1hdHNbdGhpcy5zdGF0aWNzLmJsb3ROYW1lXSA9IGZvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0cztcbiAgICB9O1xuICAgIEZvcm1hdEJsb3QucHJvdG90eXBlLnJlcGxhY2VXaXRoID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHZhciByZXBsYWNlbWVudCA9IF9zdXBlci5wcm90b3R5cGUucmVwbGFjZVdpdGguY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcy5jb3B5KHJlcGxhY2VtZW50KTtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2VtZW50O1xuICAgIH07XG4gICAgRm9ybWF0QmxvdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMsIG11dGF0aW9ucywgY29udGV4dCk7XG4gICAgICAgIGlmIChtdXRhdGlvbnMuc29tZShmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBtdXRhdGlvbi50YXJnZXQgPT09IF90aGlzLmRvbU5vZGUgJiYgbXV0YXRpb24udHlwZSA9PT0gJ2F0dHJpYnV0ZXMnO1xuICAgICAgICB9KSkge1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmJ1aWxkKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZvcm1hdEJsb3QucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBfc3VwZXIucHJvdG90eXBlLndyYXAuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIGlmICh3cmFwcGVyIGluc3RhbmNlb2YgRm9ybWF0QmxvdCAmJiB3cmFwcGVyLnN0YXRpY3Muc2NvcGUgPT09IHRoaXMuc3RhdGljcy5zY29wZSkge1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLm1vdmUod3JhcHBlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfTtcbiAgICByZXR1cm4gRm9ybWF0QmxvdDtcbn0oY29udGFpbmVyXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gRm9ybWF0QmxvdDtcblxuXG4vKioqLyB9KSxcbi8qIDE5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBzaGFkb3dfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzApO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBMZWFmQmxvdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTGVhZkJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTGVhZkJsb3QoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgTGVhZkJsb3QudmFsdWUgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIExlYWZCbG90LnByb3RvdHlwZS5pbmRleCA9IGZ1bmN0aW9uIChub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuZG9tTm9kZSA9PT0gbm9kZSB8fFxuICAgICAgICAgICAgdGhpcy5kb21Ob2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5vZGUpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlkpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihvZmZzZXQsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIExlYWZCbG90LnByb3RvdHlwZS5wb3NpdGlvbiA9IGZ1bmN0aW9uIChpbmRleCwgaW5jbHVzaXZlKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSBbXS5pbmRleE9mLmNhbGwodGhpcy5wYXJlbnQuZG9tTm9kZS5jaGlsZE5vZGVzLCB0aGlzLmRvbU5vZGUpO1xuICAgICAgICBpZiAoaW5kZXggPiAwKVxuICAgICAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgIHJldHVybiBbdGhpcy5wYXJlbnQuZG9tTm9kZSwgb2Zmc2V0XTtcbiAgICB9O1xuICAgIExlYWZCbG90LnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9hID0ge30sIF9hW3RoaXMuc3RhdGljcy5ibG90TmFtZV0gPSB0aGlzLnN0YXRpY3MudmFsdWUodGhpcy5kb21Ob2RlKSB8fCB0cnVlLCBfYTtcbiAgICAgICAgdmFyIF9hO1xuICAgIH07XG4gICAgTGVhZkJsb3Quc2NvcGUgPSBSZWdpc3RyeS5TY29wZS5JTkxJTkVfQkxPVDtcbiAgICByZXR1cm4gTGVhZkJsb3Q7XG59KHNoYWRvd18xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IExlYWZCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogMjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGVxdWFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG52YXIgZXh0ZW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxuXG52YXIgbGliID0ge1xuICBhdHRyaWJ1dGVzOiB7XG4gICAgY29tcG9zZTogZnVuY3Rpb24gKGEsIGIsIGtlZXBOdWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGEgIT09ICdvYmplY3QnKSBhID0ge307XG4gICAgICBpZiAodHlwZW9mIGIgIT09ICdvYmplY3QnKSBiID0ge307XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IGV4dGVuZCh0cnVlLCB7fSwgYik7XG4gICAgICBpZiAoIWtlZXBOdWxsKSB7XG4gICAgICAgIGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5yZWR1Y2UoZnVuY3Rpb24gKGNvcHksIGtleSkge1xuICAgICAgICAgIGlmIChhdHRyaWJ1dGVzW2tleV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgY29weVtrZXldID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY29weTtcbiAgICAgICAgfSwge30pO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIGEpIHtcbiAgICAgICAgaWYgKGFba2V5XSAhPT0gdW5kZWZpbmVkICYmIGJba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYXR0cmlidXRlc1trZXldID0gYVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoID4gMCA/IGF0dHJpYnV0ZXMgOiB1bmRlZmluZWQ7XG4gICAgfSxcblxuICAgIGRpZmY6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIGlmICh0eXBlb2YgYSAhPT0gJ29iamVjdCcpIGEgPSB7fTtcbiAgICAgIGlmICh0eXBlb2YgYiAhPT0gJ29iamVjdCcpIGIgPSB7fTtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gT2JqZWN0LmtleXMoYSkuY29uY2F0KE9iamVjdC5rZXlzKGIpKS5yZWR1Y2UoZnVuY3Rpb24gKGF0dHJpYnV0ZXMsIGtleSkge1xuICAgICAgICBpZiAoIWVxdWFsKGFba2V5XSwgYltrZXldKSkge1xuICAgICAgICAgIGF0dHJpYnV0ZXNba2V5XSA9IGJba2V5XSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGJba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgICAgIH0sIHt9KTtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwID8gYXR0cmlidXRlcyA6IHVuZGVmaW5lZDtcbiAgICB9LFxuXG4gICAgdHJhbnNmb3JtOiBmdW5jdGlvbiAoYSwgYiwgcHJpb3JpdHkpIHtcbiAgICAgIGlmICh0eXBlb2YgYSAhPT0gJ29iamVjdCcpIHJldHVybiBiO1xuICAgICAgaWYgKHR5cGVvZiBiICE9PSAnb2JqZWN0JykgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIGlmICghcHJpb3JpdHkpIHJldHVybiBiOyAgLy8gYiBzaW1wbHkgb3ZlcndyaXRlcyB1cyB3aXRob3V0IHByaW9yaXR5XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKGIpLnJlZHVjZShmdW5jdGlvbiAoYXR0cmlidXRlcywga2V5KSB7XG4gICAgICAgIGlmIChhW2tleV0gPT09IHVuZGVmaW5lZCkgYXR0cmlidXRlc1trZXldID0gYltrZXldOyAgLy8gbnVsbCBpcyBhIHZhbGlkIHZhbHVlXG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVzO1xuICAgICAgfSwge30pO1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCA+IDAgPyBhdHRyaWJ1dGVzIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcblxuICBpdGVyYXRvcjogZnVuY3Rpb24gKG9wcykge1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3Iob3BzKTtcbiAgfSxcblxuICBsZW5ndGg6IGZ1bmN0aW9uIChvcCkge1xuICAgIGlmICh0eXBlb2Ygb3BbJ2RlbGV0ZSddID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIG9wWydkZWxldGUnXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gb3AucmV0YWluO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9wLmluc2VydCA9PT0gJ3N0cmluZycgPyBvcC5pbnNlcnQubGVuZ3RoIDogMTtcbiAgICB9XG4gIH1cbn07XG5cblxuZnVuY3Rpb24gSXRlcmF0b3Iob3BzKSB7XG4gIHRoaXMub3BzID0gb3BzO1xuICB0aGlzLmluZGV4ID0gMDtcbiAgdGhpcy5vZmZzZXQgPSAwO1xufTtcblxuSXRlcmF0b3IucHJvdG90eXBlLmhhc05leHQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnBlZWtMZW5ndGgoKSA8IEluZmluaXR5O1xufTtcblxuSXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gIGlmICghbGVuZ3RoKSBsZW5ndGggPSBJbmZpbml0eTtcbiAgdmFyIG5leHRPcCA9IHRoaXMub3BzW3RoaXMuaW5kZXhdO1xuICBpZiAobmV4dE9wKSB7XG4gICAgdmFyIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgIHZhciBvcExlbmd0aCA9IGxpYi5sZW5ndGgobmV4dE9wKVxuICAgIGlmIChsZW5ndGggPj0gb3BMZW5ndGggLSBvZmZzZXQpIHtcbiAgICAgIGxlbmd0aCA9IG9wTGVuZ3RoIC0gb2Zmc2V0O1xuICAgICAgdGhpcy5pbmRleCArPSAxO1xuICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9mZnNldCArPSBsZW5ndGg7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmV4dE9wWydkZWxldGUnXSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB7ICdkZWxldGUnOiBsZW5ndGggfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHJldE9wID0ge307XG4gICAgICBpZiAobmV4dE9wLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmV0T3AuYXR0cmlidXRlcyA9IG5leHRPcC5hdHRyaWJ1dGVzO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBuZXh0T3AucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXRPcC5yZXRhaW4gPSBsZW5ndGg7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBuZXh0T3AuaW5zZXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXRPcC5pbnNlcnQgPSBuZXh0T3AuaW5zZXJ0LnN1YnN0cihvZmZzZXQsIGxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBvZmZzZXQgc2hvdWxkID09PSAwLCBsZW5ndGggc2hvdWxkID09PSAxXG4gICAgICAgIHJldE9wLmluc2VydCA9IG5leHRPcC5pbnNlcnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0T3A7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB7IHJldGFpbjogSW5maW5pdHkgfTtcbiAgfVxufTtcblxuSXRlcmF0b3IucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLm9wc1t0aGlzLmluZGV4XTtcbn07XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5wZWVrTGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5vcHNbdGhpcy5pbmRleF0pIHtcbiAgICAvLyBTaG91bGQgbmV2ZXIgcmV0dXJuIDAgaWYgb3VyIGluZGV4IGlzIGJlaW5nIG1hbmFnZWQgY29ycmVjdGx5XG4gICAgcmV0dXJuIGxpYi5sZW5ndGgodGhpcy5vcHNbdGhpcy5pbmRleF0pIC0gdGhpcy5vZmZzZXQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEluZmluaXR5O1xuICB9XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUucGVla1R5cGUgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLm9wc1t0aGlzLmluZGV4XSkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5vcHNbdGhpcy5pbmRleF1bJ2RlbGV0ZSddID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuICdkZWxldGUnO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMub3BzW3RoaXMuaW5kZXhdLnJldGFpbiA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiAncmV0YWluJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdpbnNlcnQnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJ3JldGFpbic7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gbGliO1xuXG5cbi8qKiovIH0pLFxuLyogMjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIGNsb25lID0gKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfaW5zdGFuY2VvZihvYmosIHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUgIT0gbnVsbCAmJiBvYmogaW5zdGFuY2VvZiB0eXBlO1xufVxuXG52YXIgbmF0aXZlTWFwO1xudHJ5IHtcbiAgbmF0aXZlTWFwID0gTWFwO1xufSBjYXRjaChfKSB7XG4gIC8vIG1heWJlIGEgcmVmZXJlbmNlIGVycm9yIGJlY2F1c2Ugbm8gYE1hcGAuIEdpdmUgaXQgYSBkdW1teSB2YWx1ZSB0aGF0IG5vXG4gIC8vIHZhbHVlIHdpbGwgZXZlciBiZSBhbiBpbnN0YW5jZW9mLlxuICBuYXRpdmVNYXAgPSBmdW5jdGlvbigpIHt9O1xufVxuXG52YXIgbmF0aXZlU2V0O1xudHJ5IHtcbiAgbmF0aXZlU2V0ID0gU2V0O1xufSBjYXRjaChfKSB7XG4gIG5hdGl2ZVNldCA9IGZ1bmN0aW9uKCkge307XG59XG5cbnZhciBuYXRpdmVQcm9taXNlO1xudHJ5IHtcbiAgbmF0aXZlUHJvbWlzZSA9IFByb21pc2U7XG59IGNhdGNoKF8pIHtcbiAgbmF0aXZlUHJvbWlzZSA9IGZ1bmN0aW9uKCkge307XG59XG5cbi8qKlxuICogQ2xvbmVzIChjb3BpZXMpIGFuIE9iamVjdCB1c2luZyBkZWVwIGNvcHlpbmcuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBzdXBwb3J0cyBjaXJjdWxhciByZWZlcmVuY2VzIGJ5IGRlZmF1bHQsIGJ1dCBpZiB5b3UgYXJlIGNlcnRhaW5cbiAqIHRoZXJlIGFyZSBubyBjaXJjdWxhciByZWZlcmVuY2VzIGluIHlvdXIgb2JqZWN0LCB5b3UgY2FuIHNhdmUgc29tZSBDUFUgdGltZVxuICogYnkgY2FsbGluZyBjbG9uZShvYmosIGZhbHNlKS5cbiAqXG4gKiBDYXV0aW9uOiBpZiBgY2lyY3VsYXJgIGlzIGZhbHNlIGFuZCBgcGFyZW50YCBjb250YWlucyBjaXJjdWxhciByZWZlcmVuY2VzLFxuICogeW91ciBwcm9ncmFtIG1heSBlbnRlciBhbiBpbmZpbml0ZSBsb29wIGFuZCBjcmFzaC5cbiAqXG4gKiBAcGFyYW0gYHBhcmVudGAgLSB0aGUgb2JqZWN0IHRvIGJlIGNsb25lZFxuICogQHBhcmFtIGBjaXJjdWxhcmAgLSBzZXQgdG8gdHJ1ZSBpZiB0aGUgb2JqZWN0IHRvIGJlIGNsb25lZCBtYXkgY29udGFpblxuICogICAgY2lyY3VsYXIgcmVmZXJlbmNlcy4gKG9wdGlvbmFsIC0gdHJ1ZSBieSBkZWZhdWx0KVxuICogQHBhcmFtIGBkZXB0aGAgLSBzZXQgdG8gYSBudW1iZXIgaWYgdGhlIG9iamVjdCBpcyBvbmx5IHRvIGJlIGNsb25lZCB0b1xuICogICAgYSBwYXJ0aWN1bGFyIGRlcHRoLiAob3B0aW9uYWwgLSBkZWZhdWx0cyB0byBJbmZpbml0eSlcbiAqIEBwYXJhbSBgcHJvdG90eXBlYCAtIHNldHMgdGhlIHByb3RvdHlwZSB0byBiZSB1c2VkIHdoZW4gY2xvbmluZyBhbiBvYmplY3QuXG4gKiAgICAob3B0aW9uYWwgLSBkZWZhdWx0cyB0byBwYXJlbnQgcHJvdG90eXBlKS5cbiAqIEBwYXJhbSBgaW5jbHVkZU5vbkVudW1lcmFibGVgIC0gc2V0IHRvIHRydWUgaWYgdGhlIG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAqICAgIHNob3VsZCBiZSBjbG9uZWQgYXMgd2VsbC4gTm9uLWVudW1lcmFibGUgcHJvcGVydGllcyBvbiB0aGUgcHJvdG90eXBlXG4gKiAgICBjaGFpbiB3aWxsIGJlIGlnbm9yZWQuIChvcHRpb25hbCAtIGZhbHNlIGJ5IGRlZmF1bHQpXG4qL1xuZnVuY3Rpb24gY2xvbmUocGFyZW50LCBjaXJjdWxhciwgZGVwdGgsIHByb3RvdHlwZSwgaW5jbHVkZU5vbkVudW1lcmFibGUpIHtcbiAgaWYgKHR5cGVvZiBjaXJjdWxhciA9PT0gJ29iamVjdCcpIHtcbiAgICBkZXB0aCA9IGNpcmN1bGFyLmRlcHRoO1xuICAgIHByb3RvdHlwZSA9IGNpcmN1bGFyLnByb3RvdHlwZTtcbiAgICBpbmNsdWRlTm9uRW51bWVyYWJsZSA9IGNpcmN1bGFyLmluY2x1ZGVOb25FbnVtZXJhYmxlO1xuICAgIGNpcmN1bGFyID0gY2lyY3VsYXIuY2lyY3VsYXI7XG4gIH1cbiAgLy8gbWFpbnRhaW4gdHdvIGFycmF5cyBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcywgd2hlcmUgY29ycmVzcG9uZGluZyBwYXJlbnRzXG4gIC8vIGFuZCBjaGlsZHJlbiBoYXZlIHRoZSBzYW1lIGluZGV4XG4gIHZhciBhbGxQYXJlbnRzID0gW107XG4gIHZhciBhbGxDaGlsZHJlbiA9IFtdO1xuXG4gIHZhciB1c2VCdWZmZXIgPSB0eXBlb2YgQnVmZmVyICE9ICd1bmRlZmluZWQnO1xuXG4gIGlmICh0eXBlb2YgY2lyY3VsYXIgPT0gJ3VuZGVmaW5lZCcpXG4gICAgY2lyY3VsYXIgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZGVwdGggPT0gJ3VuZGVmaW5lZCcpXG4gICAgZGVwdGggPSBJbmZpbml0eTtcblxuICAvLyByZWN1cnNlIHRoaXMgZnVuY3Rpb24gc28gd2UgZG9uJ3QgcmVzZXQgYWxsUGFyZW50cyBhbmQgYWxsQ2hpbGRyZW5cbiAgZnVuY3Rpb24gX2Nsb25lKHBhcmVudCwgZGVwdGgpIHtcbiAgICAvLyBjbG9uaW5nIG51bGwgYWx3YXlzIHJldHVybnMgbnVsbFxuICAgIGlmIChwYXJlbnQgPT09IG51bGwpXG4gICAgICByZXR1cm4gbnVsbDtcblxuICAgIGlmIChkZXB0aCA9PT0gMClcbiAgICAgIHJldHVybiBwYXJlbnQ7XG5cbiAgICB2YXIgY2hpbGQ7XG4gICAgdmFyIHByb3RvO1xuICAgIGlmICh0eXBlb2YgcGFyZW50ICE9ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH1cblxuICAgIGlmIChfaW5zdGFuY2VvZihwYXJlbnQsIG5hdGl2ZU1hcCkpIHtcbiAgICAgIGNoaWxkID0gbmV3IG5hdGl2ZU1hcCgpO1xuICAgIH0gZWxzZSBpZiAoX2luc3RhbmNlb2YocGFyZW50LCBuYXRpdmVTZXQpKSB7XG4gICAgICBjaGlsZCA9IG5ldyBuYXRpdmVTZXQoKTtcbiAgICB9IGVsc2UgaWYgKF9pbnN0YW5jZW9mKHBhcmVudCwgbmF0aXZlUHJvbWlzZSkpIHtcbiAgICAgIGNoaWxkID0gbmV3IG5hdGl2ZVByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBwYXJlbnQudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJlc29sdmUoX2Nsb25lKHZhbHVlLCBkZXB0aCAtIDEpKTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KF9jbG9uZShlcnIsIGRlcHRoIC0gMSkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoY2xvbmUuX19pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIGNoaWxkID0gW107XG4gICAgfSBlbHNlIGlmIChjbG9uZS5fX2lzUmVnRXhwKHBhcmVudCkpIHtcbiAgICAgIGNoaWxkID0gbmV3IFJlZ0V4cChwYXJlbnQuc291cmNlLCBfX2dldFJlZ0V4cEZsYWdzKHBhcmVudCkpO1xuICAgICAgaWYgKHBhcmVudC5sYXN0SW5kZXgpIGNoaWxkLmxhc3RJbmRleCA9IHBhcmVudC5sYXN0SW5kZXg7XG4gICAgfSBlbHNlIGlmIChjbG9uZS5fX2lzRGF0ZShwYXJlbnQpKSB7XG4gICAgICBjaGlsZCA9IG5ldyBEYXRlKHBhcmVudC5nZXRUaW1lKCkpO1xuICAgIH0gZWxzZSBpZiAodXNlQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihwYXJlbnQpKSB7XG4gICAgICBjaGlsZCA9IG5ldyBCdWZmZXIocGFyZW50Lmxlbmd0aCk7XG4gICAgICBwYXJlbnQuY29weShjaGlsZCk7XG4gICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfSBlbHNlIGlmIChfaW5zdGFuY2VvZihwYXJlbnQsIEVycm9yKSkge1xuICAgICAgY2hpbGQgPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvdG90eXBlID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHBhcmVudCk7XG4gICAgICAgIGNoaWxkID0gT2JqZWN0LmNyZWF0ZShwcm90byk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY2hpbGQgPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICAgIHByb3RvID0gcHJvdG90eXBlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjaXJjdWxhcikge1xuICAgICAgdmFyIGluZGV4ID0gYWxsUGFyZW50cy5pbmRleE9mKHBhcmVudCk7XG5cbiAgICAgIGlmIChpbmRleCAhPSAtMSkge1xuICAgICAgICByZXR1cm4gYWxsQ2hpbGRyZW5baW5kZXhdO1xuICAgICAgfVxuICAgICAgYWxsUGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgICBhbGxDaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICB9XG5cbiAgICBpZiAoX2luc3RhbmNlb2YocGFyZW50LCBuYXRpdmVNYXApKSB7XG4gICAgICBwYXJlbnQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIHZhciBrZXlDaGlsZCA9IF9jbG9uZShrZXksIGRlcHRoIC0gMSk7XG4gICAgICAgIHZhciB2YWx1ZUNoaWxkID0gX2Nsb25lKHZhbHVlLCBkZXB0aCAtIDEpO1xuICAgICAgICBjaGlsZC5zZXQoa2V5Q2hpbGQsIHZhbHVlQ2hpbGQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChfaW5zdGFuY2VvZihwYXJlbnQsIG5hdGl2ZVNldCkpIHtcbiAgICAgIHBhcmVudC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciBlbnRyeUNoaWxkID0gX2Nsb25lKHZhbHVlLCBkZXB0aCAtIDEpO1xuICAgICAgICBjaGlsZC5hZGQoZW50cnlDaGlsZCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpIGluIHBhcmVudCkge1xuICAgICAgdmFyIGF0dHJzO1xuICAgICAgaWYgKHByb3RvKSB7XG4gICAgICAgIGF0dHJzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm90bywgaSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhdHRycyAmJiBhdHRycy5zZXQgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNoaWxkW2ldID0gX2Nsb25lKHBhcmVudFtpXSwgZGVwdGggLSAxKTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHBhcmVudCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gRG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCBjbG9uaW5nIGEgc3ltYm9sIGJlY2F1c2UgaXQgaXMgYSBwcmltaXRpdmUsXG4gICAgICAgIC8vIGxpa2UgYSBudW1iZXIgb3Igc3RyaW5nLlxuICAgICAgICB2YXIgc3ltYm9sID0gc3ltYm9sc1tpXTtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHBhcmVudCwgc3ltYm9sKTtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3IuZW51bWVyYWJsZSAmJiAhaW5jbHVkZU5vbkVudW1lcmFibGUpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZFtzeW1ib2xdID0gX2Nsb25lKHBhcmVudFtzeW1ib2xdLCBkZXB0aCAtIDEpO1xuICAgICAgICBpZiAoIWRlc2NyaXB0b3IuZW51bWVyYWJsZSkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjaGlsZCwgc3ltYm9sLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluY2x1ZGVOb25FbnVtZXJhYmxlKSB7XG4gICAgICB2YXIgYWxsUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHBhcmVudCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbFByb3BlcnR5TmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHByb3BlcnR5TmFtZSA9IGFsbFByb3BlcnR5TmFtZXNbaV07XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXJlbnQsIHByb3BlcnR5TmFtZSk7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkW3Byb3BlcnR5TmFtZV0gPSBfY2xvbmUocGFyZW50W3Byb3BlcnR5TmFtZV0sIGRlcHRoIC0gMSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjaGlsZCwgcHJvcGVydHlOYW1lLCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG5cbiAgcmV0dXJuIF9jbG9uZShwYXJlbnQsIGRlcHRoKTtcbn1cblxuLyoqXG4gKiBTaW1wbGUgZmxhdCBjbG9uZSB1c2luZyBwcm90b3R5cGUsIGFjY2VwdHMgb25seSBvYmplY3RzLCB1c2VmdWxsIGZvciBwcm9wZXJ0eVxuICogb3ZlcnJpZGUgb24gRkxBVCBjb25maWd1cmF0aW9uIG9iamVjdCAobm8gbmVzdGVkIHByb3BzKS5cbiAqXG4gKiBVU0UgV0lUSCBDQVVUSU9OISBUaGlzIG1heSBub3QgYmVoYXZlIGFzIHlvdSB3aXNoIGlmIHlvdSBkbyBub3Qga25vdyBob3cgdGhpc1xuICogd29ya3MuXG4gKi9cbmNsb25lLmNsb25lUHJvdG90eXBlID0gZnVuY3Rpb24gY2xvbmVQcm90b3R5cGUocGFyZW50KSB7XG4gIGlmIChwYXJlbnQgPT09IG51bGwpXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgdmFyIGMgPSBmdW5jdGlvbiAoKSB7fTtcbiAgYy5wcm90b3R5cGUgPSBwYXJlbnQ7XG4gIHJldHVybiBuZXcgYygpO1xufTtcblxuLy8gcHJpdmF0ZSB1dGlsaXR5IGZ1bmN0aW9uc1xuXG5mdW5jdGlvbiBfX29ialRvU3RyKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cbmNsb25lLl9fb2JqVG9TdHIgPSBfX29ialRvU3RyO1xuXG5mdW5jdGlvbiBfX2lzRGF0ZShvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgX19vYmpUb1N0cihvKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuY2xvbmUuX19pc0RhdGUgPSBfX2lzRGF0ZTtcblxuZnVuY3Rpb24gX19pc0FycmF5KG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBfX29ialRvU3RyKG8pID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuY2xvbmUuX19pc0FycmF5ID0gX19pc0FycmF5O1xuXG5mdW5jdGlvbiBfX2lzUmVnRXhwKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBfX29ialRvU3RyKG8pID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmNsb25lLl9faXNSZWdFeHAgPSBfX2lzUmVnRXhwO1xuXG5mdW5jdGlvbiBfX2dldFJlZ0V4cEZsYWdzKHJlKSB7XG4gIHZhciBmbGFncyA9ICcnO1xuICBpZiAocmUuZ2xvYmFsKSBmbGFncyArPSAnZyc7XG4gIGlmIChyZS5pZ25vcmVDYXNlKSBmbGFncyArPSAnaSc7XG4gIGlmIChyZS5tdWx0aWxpbmUpIGZsYWdzICs9ICdtJztcbiAgcmV0dXJuIGZsYWdzO1xufVxuY2xvbmUuX19nZXRSZWdFeHBGbGFncyA9IF9fZ2V0UmVnRXhwRmxhZ3M7XG5cbnJldHVybiBjbG9uZTtcbn0pKCk7XG5cbmlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNsb25lO1xufVxuXG5cbi8qKiovIH0pLFxuLyogMjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9lbWl0dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxudmFyIF9lbWl0dGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VtaXR0ZXIpO1xuXG52YXIgX2Jsb2NrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIF9ibG9jazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ibG9jayk7XG5cbnZhciBfYnJlYWsgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblxudmFyIF9icmVhazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9icmVhayk7XG5cbnZhciBfY29kZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXG52YXIgX2NvZGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29kZSk7XG5cbnZhciBfY29udGFpbmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cbnZhciBfY29udGFpbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbnRhaW5lcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gaXNMaW5lKGJsb3QpIHtcbiAgcmV0dXJuIGJsb3QgaW5zdGFuY2VvZiBfYmxvY2syLmRlZmF1bHQgfHwgYmxvdCBpbnN0YW5jZW9mIF9ibG9jay5CbG9ja0VtYmVkO1xufVxuXG52YXIgU2Nyb2xsID0gZnVuY3Rpb24gKF9QYXJjaG1lbnQkU2Nyb2xsKSB7XG4gIF9pbmhlcml0cyhTY3JvbGwsIF9QYXJjaG1lbnQkU2Nyb2xsKTtcblxuICBmdW5jdGlvbiBTY3JvbGwoZG9tTm9kZSwgY29uZmlnKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNjcm9sbCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU2Nyb2xsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2Nyb2xsKSkuY2FsbCh0aGlzLCBkb21Ob2RlKSk7XG5cbiAgICBfdGhpcy5lbWl0dGVyID0gY29uZmlnLmVtaXR0ZXI7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnLndoaXRlbGlzdCkpIHtcbiAgICAgIF90aGlzLndoaXRlbGlzdCA9IGNvbmZpZy53aGl0ZWxpc3QucmVkdWNlKGZ1bmN0aW9uICh3aGl0ZWxpc3QsIGZvcm1hdCkge1xuICAgICAgICB3aGl0ZWxpc3RbZm9ybWF0XSA9IHRydWU7XG4gICAgICAgIHJldHVybiB3aGl0ZWxpc3Q7XG4gICAgICB9LCB7fSk7XG4gICAgfVxuICAgIC8vIFNvbWUgcmVhc29uIGZpeGVzIGNvbXBvc2l0aW9uIGlzc3VlcyB3aXRoIGNoYXJhY3RlciBsYW5ndWFnZXMgaW4gV2luZG93cy9DaHJvbWUsIFNhZmFyaVxuICAgIF90aGlzLmRvbU5vZGUuYWRkRXZlbnRMaXN0ZW5lcignRE9NTm9kZUluc2VydGVkJywgZnVuY3Rpb24gKCkge30pO1xuICAgIF90aGlzLm9wdGltaXplKCk7XG4gICAgX3RoaXMuZW5hYmxlKCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNjcm9sbCwgW3tcbiAgICBrZXk6ICdiYXRjaFN0YXJ0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmF0Y2hTdGFydCgpIHtcbiAgICAgIHRoaXMuYmF0Y2ggPSB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2JhdGNoRW5kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmF0Y2hFbmQoKSB7XG4gICAgICB0aGlzLmJhdGNoID0gZmFsc2U7XG4gICAgICB0aGlzLm9wdGltaXplKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlQXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVBdChpbmRleCwgbGVuZ3RoKSB7XG4gICAgICB2YXIgX2xpbmUgPSB0aGlzLmxpbmUoaW5kZXgpLFxuICAgICAgICAgIF9saW5lMiA9IF9zbGljZWRUb0FycmF5KF9saW5lLCAyKSxcbiAgICAgICAgICBmaXJzdCA9IF9saW5lMlswXSxcbiAgICAgICAgICBvZmZzZXQgPSBfbGluZTJbMV07XG5cbiAgICAgIHZhciBfbGluZTMgPSB0aGlzLmxpbmUoaW5kZXggKyBsZW5ndGgpLFxuICAgICAgICAgIF9saW5lNCA9IF9zbGljZWRUb0FycmF5KF9saW5lMywgMSksXG4gICAgICAgICAgbGFzdCA9IF9saW5lNFswXTtcblxuICAgICAgX2dldChTY3JvbGwucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2Nyb2xsLnByb3RvdHlwZSksICdkZWxldGVBdCcsIHRoaXMpLmNhbGwodGhpcywgaW5kZXgsIGxlbmd0aCk7XG4gICAgICBpZiAobGFzdCAhPSBudWxsICYmIGZpcnN0ICE9PSBsYXN0ICYmIG9mZnNldCA+IDApIHtcbiAgICAgICAgaWYgKGZpcnN0IGluc3RhbmNlb2YgX2Jsb2NrLkJsb2NrRW1iZWQgfHwgbGFzdCBpbnN0YW5jZW9mIF9ibG9jay5CbG9ja0VtYmVkKSB7XG4gICAgICAgICAgdGhpcy5vcHRpbWl6ZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlyc3QgaW5zdGFuY2VvZiBfY29kZTIuZGVmYXVsdCkge1xuICAgICAgICAgIHZhciBuZXdsaW5lSW5kZXggPSBmaXJzdC5uZXdsaW5lSW5kZXgoZmlyc3QubGVuZ3RoKCksIHRydWUpO1xuICAgICAgICAgIGlmIChuZXdsaW5lSW5kZXggPiAtMSkge1xuICAgICAgICAgICAgZmlyc3QgPSBmaXJzdC5zcGxpdChuZXdsaW5lSW5kZXggKyAxKTtcbiAgICAgICAgICAgIGlmIChmaXJzdCA9PT0gbGFzdCkge1xuICAgICAgICAgICAgICB0aGlzLm9wdGltaXplKCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdCBpbnN0YW5jZW9mIF9jb2RlMi5kZWZhdWx0KSB7XG4gICAgICAgICAgdmFyIF9uZXdsaW5lSW5kZXggPSBsYXN0Lm5ld2xpbmVJbmRleCgwKTtcbiAgICAgICAgICBpZiAoX25ld2xpbmVJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICBsYXN0LnNwbGl0KF9uZXdsaW5lSW5kZXggKyAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlZiA9IGxhc3QuY2hpbGRyZW4uaGVhZCBpbnN0YW5jZW9mIF9icmVhazIuZGVmYXVsdCA/IG51bGwgOiBsYXN0LmNoaWxkcmVuLmhlYWQ7XG4gICAgICAgIGZpcnN0Lm1vdmVDaGlsZHJlbihsYXN0LCByZWYpO1xuICAgICAgICBmaXJzdC5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMub3B0aW1pemUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlbmFibGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgICB2YXIgZW5hYmxlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdHJ1ZTtcblxuICAgICAgdGhpcy5kb21Ob2RlLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgZW5hYmxlZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0QXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRBdChpbmRleCwgbGVuZ3RoLCBmb3JtYXQsIHZhbHVlKSB7XG4gICAgICBpZiAodGhpcy53aGl0ZWxpc3QgIT0gbnVsbCAmJiAhdGhpcy53aGl0ZWxpc3RbZm9ybWF0XSkgcmV0dXJuO1xuICAgICAgX2dldChTY3JvbGwucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2Nyb2xsLnByb3RvdHlwZSksICdmb3JtYXRBdCcsIHRoaXMpLmNhbGwodGhpcywgaW5kZXgsIGxlbmd0aCwgZm9ybWF0LCB2YWx1ZSk7XG4gICAgICB0aGlzLm9wdGltaXplKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5zZXJ0QXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRBdChpbmRleCwgdmFsdWUsIGRlZikge1xuICAgICAgaWYgKGRlZiAhPSBudWxsICYmIHRoaXMud2hpdGVsaXN0ICE9IG51bGwgJiYgIXRoaXMud2hpdGVsaXN0W3ZhbHVlXSkgcmV0dXJuO1xuICAgICAgaWYgKGluZGV4ID49IHRoaXMubGVuZ3RoKCkpIHtcbiAgICAgICAgaWYgKGRlZiA9PSBudWxsIHx8IF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkodmFsdWUsIF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuQkxPQ0spID09IG51bGwpIHtcbiAgICAgICAgICB2YXIgYmxvdCA9IF9wYXJjaG1lbnQyLmRlZmF1bHQuY3JlYXRlKHRoaXMuc3RhdGljcy5kZWZhdWx0Q2hpbGQpO1xuICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoYmxvdCk7XG4gICAgICAgICAgaWYgKGRlZiA9PSBudWxsICYmIHZhbHVlLmVuZHNXaXRoKCdcXG4nKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJsb3QuaW5zZXJ0QXQoMCwgdmFsdWUsIGRlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGVtYmVkID0gX3BhcmNobWVudDIuZGVmYXVsdC5jcmVhdGUodmFsdWUsIGRlZik7XG4gICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChlbWJlZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9nZXQoU2Nyb2xsLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNjcm9sbC5wcm90b3R5cGUpLCAnaW5zZXJ0QXQnLCB0aGlzKS5jYWxsKHRoaXMsIGluZGV4LCB2YWx1ZSwgZGVmKTtcbiAgICAgIH1cbiAgICAgIHRoaXMub3B0aW1pemUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRCZWZvcmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRCZWZvcmUoYmxvdCwgcmVmKSB7XG4gICAgICBpZiAoYmxvdC5zdGF0aWNzLnNjb3BlID09PSBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLklOTElORV9CTE9UKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0gX3BhcmNobWVudDIuZGVmYXVsdC5jcmVhdGUodGhpcy5zdGF0aWNzLmRlZmF1bHRDaGlsZCk7XG4gICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoYmxvdCk7XG4gICAgICAgIGJsb3QgPSB3cmFwcGVyO1xuICAgICAgfVxuICAgICAgX2dldChTY3JvbGwucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2Nyb2xsLnByb3RvdHlwZSksICdpbnNlcnRCZWZvcmUnLCB0aGlzKS5jYWxsKHRoaXMsIGJsb3QsIHJlZik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbGVhZicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxlYWYoaW5kZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhdGgoaW5kZXgpLnBvcCgpIHx8IFtudWxsLCAtMV07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbGluZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpbmUoaW5kZXgpIHtcbiAgICAgIGlmIChpbmRleCA9PT0gdGhpcy5sZW5ndGgoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5saW5lKGluZGV4IC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5kZXNjZW5kYW50KGlzTGluZSwgaW5kZXgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2xpbmVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGluZXMoKSB7XG4gICAgICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBOdW1iZXIuTUFYX1ZBTFVFO1xuXG4gICAgICB2YXIgZ2V0TGluZXMgPSBmdW5jdGlvbiBnZXRMaW5lcyhibG90LCBpbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBsaW5lcyA9IFtdLFxuICAgICAgICAgICAgbGVuZ3RoTGVmdCA9IGxlbmd0aDtcbiAgICAgICAgYmxvdC5jaGlsZHJlbi5mb3JFYWNoQXQoaW5kZXgsIGxlbmd0aCwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKGlzTGluZShjaGlsZCkpIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goY2hpbGQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGQgaW5zdGFuY2VvZiBfcGFyY2htZW50Mi5kZWZhdWx0LkNvbnRhaW5lcikge1xuICAgICAgICAgICAgbGluZXMgPSBsaW5lcy5jb25jYXQoZ2V0TGluZXMoY2hpbGQsIGluZGV4LCBsZW5ndGhMZWZ0KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aExlZnQgLT0gbGVuZ3RoO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGxpbmVzO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBnZXRMaW5lcyh0aGlzLCBpbmRleCwgbGVuZ3RoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvcHRpbWl6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9wdGltaXplKCkge1xuICAgICAgdmFyIG11dGF0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gICAgICB2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICAgIGlmICh0aGlzLmJhdGNoID09PSB0cnVlKSByZXR1cm47XG4gICAgICBfZ2V0KFNjcm9sbC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTY3JvbGwucHJvdG90eXBlKSwgJ29wdGltaXplJywgdGhpcykuY2FsbCh0aGlzLCBtdXRhdGlvbnMsIGNvbnRleHQpO1xuICAgICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KF9lbWl0dGVyMi5kZWZhdWx0LmV2ZW50cy5TQ1JPTExfT1BUSU1JWkUsIG11dGF0aW9ucywgY29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGF0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdGgoaW5kZXgpIHtcbiAgICAgIHJldHVybiBfZ2V0KFNjcm9sbC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTY3JvbGwucHJvdG90eXBlKSwgJ3BhdGgnLCB0aGlzKS5jYWxsKHRoaXMsIGluZGV4KS5zbGljZSgxKTsgLy8gRXhjbHVkZSBzZWxmXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKG11dGF0aW9ucykge1xuICAgICAgaWYgKHRoaXMuYmF0Y2ggPT09IHRydWUpIHJldHVybjtcbiAgICAgIHZhciBzb3VyY2UgPSBfZW1pdHRlcjIuZGVmYXVsdC5zb3VyY2VzLlVTRVI7XG4gICAgICBpZiAodHlwZW9mIG11dGF0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc291cmNlID0gbXV0YXRpb25zO1xuICAgICAgfVxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG11dGF0aW9ucykpIHtcbiAgICAgICAgbXV0YXRpb25zID0gdGhpcy5vYnNlcnZlci50YWtlUmVjb3JkcygpO1xuICAgICAgfVxuICAgICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KF9lbWl0dGVyMi5kZWZhdWx0LmV2ZW50cy5TQ1JPTExfQkVGT1JFX1VQREFURSwgc291cmNlLCBtdXRhdGlvbnMpO1xuICAgICAgfVxuICAgICAgX2dldChTY3JvbGwucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2Nyb2xsLnByb3RvdHlwZSksICd1cGRhdGUnLCB0aGlzKS5jYWxsKHRoaXMsIG11dGF0aW9ucy5jb25jYXQoW10pKTsgLy8gcGFzcyBjb3B5XG4gICAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoX2VtaXR0ZXIyLmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9VUERBVEUsIHNvdXJjZSwgbXV0YXRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2Nyb2xsO1xufShfcGFyY2htZW50Mi5kZWZhdWx0LlNjcm9sbCk7XG5cblNjcm9sbC5ibG90TmFtZSA9ICdzY3JvbGwnO1xuU2Nyb2xsLmNsYXNzTmFtZSA9ICdxbC1lZGl0b3InO1xuU2Nyb2xsLnRhZ05hbWUgPSAnRElWJztcblNjcm9sbC5kZWZhdWx0Q2hpbGQgPSAnYmxvY2snO1xuU2Nyb2xsLmFsbG93ZWRDaGlsZHJlbiA9IFtfYmxvY2syLmRlZmF1bHQsIF9ibG9jay5CbG9ja0VtYmVkLCBfY29udGFpbmVyMi5kZWZhdWx0XTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2Nyb2xsO1xuXG4vKioqLyB9KSxcbi8qIDIzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNIT1JUS0VZID0gZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9jbG9uZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXG52YXIgX2Nsb25lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nsb25lKTtcblxudmFyIF9kZWVwRXF1YWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcblxudmFyIF9kZWVwRXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVlcEVxdWFsKTtcblxudmFyIF9leHRlbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX2V4dGVuZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmQpO1xuXG52YXIgX3F1aWxsRGVsdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3F1aWxsRGVsdGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGxEZWx0YSk7XG5cbnZhciBfb3AgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblxudmFyIF9vcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vcCk7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9xdWlsbCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfcXVpbGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGwpO1xuXG52YXIgX2xvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG52YXIgX2xvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dnZXIpO1xuXG52YXIgX21vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfbW9kdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vZHVsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGRlYnVnID0gKDAsIF9sb2dnZXIyLmRlZmF1bHQpKCdxdWlsbDprZXlib2FyZCcpO1xuXG52YXIgU0hPUlRLRVkgPSAvTWFjL2kudGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pID8gJ21ldGFLZXknIDogJ2N0cmxLZXknO1xuXG52YXIgS2V5Ym9hcmQgPSBmdW5jdGlvbiAoX01vZHVsZSkge1xuICBfaW5oZXJpdHMoS2V5Ym9hcmQsIF9Nb2R1bGUpO1xuXG4gIF9jcmVhdGVDbGFzcyhLZXlib2FyZCwgbnVsbCwgW3tcbiAgICBrZXk6ICdtYXRjaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1hdGNoKGV2dCwgYmluZGluZykge1xuICAgICAgYmluZGluZyA9IG5vcm1hbGl6ZShiaW5kaW5nKTtcbiAgICAgIGlmIChbJ2FsdEtleScsICdjdHJsS2V5JywgJ21ldGFLZXknLCAnc2hpZnRLZXknXS5zb21lKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhYmluZGluZ1trZXldICE9PSBldnRba2V5XSAmJiBiaW5kaW5nW2tleV0gIT09IG51bGw7XG4gICAgICB9KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmluZGluZy5rZXkgPT09IChldnQud2hpY2ggfHwgZXZ0LmtleUNvZGUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIGZ1bmN0aW9uIEtleWJvYXJkKHF1aWxsLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEtleWJvYXJkKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChLZXlib2FyZC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEtleWJvYXJkKSkuY2FsbCh0aGlzLCBxdWlsbCwgb3B0aW9ucykpO1xuXG4gICAgX3RoaXMuYmluZGluZ3MgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhfdGhpcy5vcHRpb25zLmJpbmRpbmdzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBpZiAobmFtZSA9PT0gJ2xpc3QgYXV0b2ZpbGwnICYmIHF1aWxsLnNjcm9sbC53aGl0ZWxpc3QgIT0gbnVsbCAmJiAhcXVpbGwuc2Nyb2xsLndoaXRlbGlzdFsnbGlzdCddKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChfdGhpcy5vcHRpb25zLmJpbmRpbmdzW25hbWVdKSB7XG4gICAgICAgIF90aGlzLmFkZEJpbmRpbmcoX3RoaXMub3B0aW9ucy5iaW5kaW5nc1tuYW1lXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX3RoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5FTlRFUiwgc2hpZnRLZXk6IG51bGwgfSwgaGFuZGxlRW50ZXIpO1xuICAgIF90aGlzLmFkZEJpbmRpbmcoeyBrZXk6IEtleWJvYXJkLmtleXMuRU5URVIsIG1ldGFLZXk6IG51bGwsIGN0cmxLZXk6IG51bGwsIGFsdEtleTogbnVsbCB9LCBmdW5jdGlvbiAoKSB7fSk7XG4gICAgaWYgKC9GaXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgLy8gTmVlZCB0byBoYW5kbGUgZGVsZXRlIGFuZCBiYWNrc3BhY2UgZm9yIEZpcmVmb3ggaW4gdGhlIGdlbmVyYWwgY2FzZSAjMTE3MVxuICAgICAgX3RoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5CQUNLU1BBQ0UgfSwgeyBjb2xsYXBzZWQ6IHRydWUgfSwgaGFuZGxlQmFja3NwYWNlKTtcbiAgICAgIF90aGlzLmFkZEJpbmRpbmcoeyBrZXk6IEtleWJvYXJkLmtleXMuREVMRVRFIH0sIHsgY29sbGFwc2VkOiB0cnVlIH0sIGhhbmRsZURlbGV0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLmFkZEJpbmRpbmcoeyBrZXk6IEtleWJvYXJkLmtleXMuQkFDS1NQQUNFIH0sIHsgY29sbGFwc2VkOiB0cnVlLCBwcmVmaXg6IC9eLj8kLyB9LCBoYW5kbGVCYWNrc3BhY2UpO1xuICAgICAgX3RoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5ERUxFVEUgfSwgeyBjb2xsYXBzZWQ6IHRydWUsIHN1ZmZpeDogL14uPyQvIH0sIGhhbmRsZURlbGV0ZSk7XG4gICAgfVxuICAgIF90aGlzLmFkZEJpbmRpbmcoeyBrZXk6IEtleWJvYXJkLmtleXMuQkFDS1NQQUNFIH0sIHsgY29sbGFwc2VkOiBmYWxzZSB9LCBoYW5kbGVEZWxldGVSYW5nZSk7XG4gICAgX3RoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5ERUxFVEUgfSwgeyBjb2xsYXBzZWQ6IGZhbHNlIH0sIGhhbmRsZURlbGV0ZVJhbmdlKTtcbiAgICBfdGhpcy5hZGRCaW5kaW5nKHsga2V5OiBLZXlib2FyZC5rZXlzLkJBQ0tTUEFDRSwgYWx0S2V5OiBudWxsLCBjdHJsS2V5OiBudWxsLCBtZXRhS2V5OiBudWxsLCBzaGlmdEtleTogbnVsbCB9LCB7IGNvbGxhcHNlZDogdHJ1ZSwgb2Zmc2V0OiAwIH0sIGhhbmRsZUJhY2tzcGFjZSk7XG4gICAgX3RoaXMubGlzdGVuKCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEtleWJvYXJkLCBbe1xuICAgIGtleTogJ2FkZEJpbmRpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRCaW5kaW5nKGtleSkge1xuICAgICAgdmFyIGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIGhhbmRsZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gICAgICB2YXIgYmluZGluZyA9IG5vcm1hbGl6ZShrZXkpO1xuICAgICAgaWYgKGJpbmRpbmcgPT0gbnVsbCB8fCBiaW5kaW5nLmtleSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBkZWJ1Zy53YXJuKCdBdHRlbXB0ZWQgdG8gYWRkIGludmFsaWQga2V5Ym9hcmQgYmluZGluZycsIGJpbmRpbmcpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjb250ZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnRleHQgPSB7IGhhbmRsZXI6IGNvbnRleHQgfTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBoYW5kbGVyID0geyBoYW5kbGVyOiBoYW5kbGVyIH07XG4gICAgICB9XG4gICAgICBiaW5kaW5nID0gKDAsIF9leHRlbmQyLmRlZmF1bHQpKGJpbmRpbmcsIGNvbnRleHQsIGhhbmRsZXIpO1xuICAgICAgdGhpcy5iaW5kaW5nc1tiaW5kaW5nLmtleV0gPSB0aGlzLmJpbmRpbmdzW2JpbmRpbmcua2V5XSB8fCBbXTtcbiAgICAgIHRoaXMuYmluZGluZ3NbYmluZGluZy5rZXldLnB1c2goYmluZGluZyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbGlzdGVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdGVuKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMucXVpbGwucm9vdC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICBpZiAoZXZ0LmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcbiAgICAgICAgdmFyIHdoaWNoID0gZXZ0LndoaWNoIHx8IGV2dC5rZXlDb2RlO1xuICAgICAgICB2YXIgYmluZGluZ3MgPSAoX3RoaXMyLmJpbmRpbmdzW3doaWNoXSB8fCBbXSkuZmlsdGVyKGZ1bmN0aW9uIChiaW5kaW5nKSB7XG4gICAgICAgICAgcmV0dXJuIEtleWJvYXJkLm1hdGNoKGV2dCwgYmluZGluZyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoYmluZGluZ3MubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAgIHZhciByYW5nZSA9IF90aGlzMi5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgaWYgKHJhbmdlID09IG51bGwgfHwgIV90aGlzMi5xdWlsbC5oYXNGb2N1cygpKSByZXR1cm47XG5cbiAgICAgICAgdmFyIF9xdWlsbCRnZXRMaW5lID0gX3RoaXMyLnF1aWxsLmdldExpbmUocmFuZ2UuaW5kZXgpLFxuICAgICAgICAgICAgX3F1aWxsJGdldExpbmUyID0gX3NsaWNlZFRvQXJyYXkoX3F1aWxsJGdldExpbmUsIDIpLFxuICAgICAgICAgICAgbGluZSA9IF9xdWlsbCRnZXRMaW5lMlswXSxcbiAgICAgICAgICAgIG9mZnNldCA9IF9xdWlsbCRnZXRMaW5lMlsxXTtcblxuICAgICAgICB2YXIgX3F1aWxsJGdldExlYWYgPSBfdGhpczIucXVpbGwuZ2V0TGVhZihyYW5nZS5pbmRleCksXG4gICAgICAgICAgICBfcXVpbGwkZ2V0TGVhZjIgPSBfc2xpY2VkVG9BcnJheShfcXVpbGwkZ2V0TGVhZiwgMiksXG4gICAgICAgICAgICBsZWFmU3RhcnQgPSBfcXVpbGwkZ2V0TGVhZjJbMF0sXG4gICAgICAgICAgICBvZmZzZXRTdGFydCA9IF9xdWlsbCRnZXRMZWFmMlsxXTtcblxuICAgICAgICB2YXIgX3JlZiA9IHJhbmdlLmxlbmd0aCA9PT0gMCA/IFtsZWFmU3RhcnQsIG9mZnNldFN0YXJ0XSA6IF90aGlzMi5xdWlsbC5nZXRMZWFmKHJhbmdlLmluZGV4ICsgcmFuZ2UubGVuZ3RoKSxcbiAgICAgICAgICAgIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgICAgICBsZWFmRW5kID0gX3JlZjJbMF0sXG4gICAgICAgICAgICBvZmZzZXRFbmQgPSBfcmVmMlsxXTtcblxuICAgICAgICB2YXIgcHJlZml4VGV4dCA9IGxlYWZTdGFydCBpbnN0YW5jZW9mIF9wYXJjaG1lbnQyLmRlZmF1bHQuVGV4dCA/IGxlYWZTdGFydC52YWx1ZSgpLnNsaWNlKDAsIG9mZnNldFN0YXJ0KSA6ICcnO1xuICAgICAgICB2YXIgc3VmZml4VGV4dCA9IGxlYWZFbmQgaW5zdGFuY2VvZiBfcGFyY2htZW50Mi5kZWZhdWx0LlRleHQgPyBsZWFmRW5kLnZhbHVlKCkuc2xpY2Uob2Zmc2V0RW5kKSA6ICcnO1xuICAgICAgICB2YXIgY3VyQ29udGV4dCA9IHtcbiAgICAgICAgICBjb2xsYXBzZWQ6IHJhbmdlLmxlbmd0aCA9PT0gMCxcbiAgICAgICAgICBlbXB0eTogcmFuZ2UubGVuZ3RoID09PSAwICYmIGxpbmUubGVuZ3RoKCkgPD0gMSxcbiAgICAgICAgICBmb3JtYXQ6IF90aGlzMi5xdWlsbC5nZXRGb3JtYXQocmFuZ2UpLFxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgIHByZWZpeDogcHJlZml4VGV4dCxcbiAgICAgICAgICBzdWZmaXg6IHN1ZmZpeFRleHRcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHByZXZlbnRlZCA9IGJpbmRpbmdzLnNvbWUoZnVuY3Rpb24gKGJpbmRpbmcpIHtcbiAgICAgICAgICBpZiAoYmluZGluZy5jb2xsYXBzZWQgIT0gbnVsbCAmJiBiaW5kaW5nLmNvbGxhcHNlZCAhPT0gY3VyQ29udGV4dC5jb2xsYXBzZWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBpZiAoYmluZGluZy5lbXB0eSAhPSBudWxsICYmIGJpbmRpbmcuZW1wdHkgIT09IGN1ckNvbnRleHQuZW1wdHkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBpZiAoYmluZGluZy5vZmZzZXQgIT0gbnVsbCAmJiBiaW5kaW5nLm9mZnNldCAhPT0gY3VyQ29udGV4dC5vZmZzZXQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShiaW5kaW5nLmZvcm1hdCkpIHtcbiAgICAgICAgICAgIC8vIGFueSBmb3JtYXQgaXMgcHJlc2VudFxuICAgICAgICAgICAgaWYgKGJpbmRpbmcuZm9ybWF0LmV2ZXJ5KGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjdXJDb250ZXh0LmZvcm1hdFtuYW1lXSA9PSBudWxsO1xuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoX3R5cGVvZihiaW5kaW5nLmZvcm1hdCkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAvLyBhbGwgZm9ybWF0cyBtdXN0IG1hdGNoXG4gICAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKGJpbmRpbmcuZm9ybWF0KS5ldmVyeShmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICBpZiAoYmluZGluZy5mb3JtYXRbbmFtZV0gPT09IHRydWUpIHJldHVybiBjdXJDb250ZXh0LmZvcm1hdFtuYW1lXSAhPSBudWxsO1xuICAgICAgICAgICAgICBpZiAoYmluZGluZy5mb3JtYXRbbmFtZV0gPT09IGZhbHNlKSByZXR1cm4gY3VyQ29udGV4dC5mb3JtYXRbbmFtZV0gPT0gbnVsbDtcbiAgICAgICAgICAgICAgcmV0dXJuICgwLCBfZGVlcEVxdWFsMi5kZWZhdWx0KShiaW5kaW5nLmZvcm1hdFtuYW1lXSwgY3VyQ29udGV4dC5mb3JtYXRbbmFtZV0pO1xuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYmluZGluZy5wcmVmaXggIT0gbnVsbCAmJiAhYmluZGluZy5wcmVmaXgudGVzdChjdXJDb250ZXh0LnByZWZpeCkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBpZiAoYmluZGluZy5zdWZmaXggIT0gbnVsbCAmJiAhYmluZGluZy5zdWZmaXgudGVzdChjdXJDb250ZXh0LnN1ZmZpeCkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gYmluZGluZy5oYW5kbGVyLmNhbGwoX3RoaXMyLCByYW5nZSwgY3VyQ29udGV4dCkgIT09IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocHJldmVudGVkKSB7XG4gICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBLZXlib2FyZDtcbn0oX21vZHVsZTIuZGVmYXVsdCk7XG5cbktleWJvYXJkLmtleXMgPSB7XG4gIEJBQ0tTUEFDRTogOCxcbiAgVEFCOiA5LFxuICBFTlRFUjogMTMsXG4gIEVTQ0FQRTogMjcsXG4gIExFRlQ6IDM3LFxuICBVUDogMzgsXG4gIFJJR0hUOiAzOSxcbiAgRE9XTjogNDAsXG4gIERFTEVURTogNDZcbn07XG5cbktleWJvYXJkLkRFRkFVTFRTID0ge1xuICBiaW5kaW5nczoge1xuICAgICdib2xkJzogbWFrZUZvcm1hdEhhbmRsZXIoJ2JvbGQnKSxcbiAgICAnaXRhbGljJzogbWFrZUZvcm1hdEhhbmRsZXIoJ2l0YWxpYycpLFxuICAgICd1bmRlcmxpbmUnOiBtYWtlRm9ybWF0SGFuZGxlcigndW5kZXJsaW5lJyksXG4gICAgJ2luZGVudCc6IHtcbiAgICAgIC8vIGhpZ2hsaWdodCB0YWIgb3IgdGFiIGF0IGJlZ2lubmluZyBvZiBsaXN0LCBpbmRlbnQgb3IgYmxvY2txdW90ZVxuICAgICAga2V5OiBLZXlib2FyZC5rZXlzLlRBQixcbiAgICAgIGZvcm1hdDogWydibG9ja3F1b3RlJywgJ2luZGVudCcsICdsaXN0J10sXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0LmNvbGxhcHNlZCAmJiBjb250ZXh0Lm9mZnNldCAhPT0gMCkgcmV0dXJuIHRydWU7XG4gICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdpbmRlbnQnLCAnKzEnLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdvdXRkZW50Jzoge1xuICAgICAga2V5OiBLZXlib2FyZC5rZXlzLlRBQixcbiAgICAgIHNoaWZ0S2V5OiB0cnVlLFxuICAgICAgZm9ybWF0OiBbJ2Jsb2NrcXVvdGUnLCAnaW5kZW50JywgJ2xpc3QnXSxcbiAgICAgIC8vIGhpZ2hsaWdodCB0YWIgb3IgdGFiIGF0IGJlZ2lubmluZyBvZiBsaXN0LCBpbmRlbnQgb3IgYmxvY2txdW90ZVxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihyYW5nZSwgY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5jb2xsYXBzZWQgJiYgY29udGV4dC5vZmZzZXQgIT09IDApIHJldHVybiB0cnVlO1xuICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnaW5kZW50JywgJy0xJywgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICB9XG4gICAgfSxcbiAgICAnb3V0ZGVudCBiYWNrc3BhY2UnOiB7XG4gICAgICBrZXk6IEtleWJvYXJkLmtleXMuQkFDS1NQQUNFLFxuICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgc2hpZnRLZXk6IG51bGwsXG4gICAgICBtZXRhS2V5OiBudWxsLFxuICAgICAgY3RybEtleTogbnVsbCxcbiAgICAgIGFsdEtleTogbnVsbCxcbiAgICAgIGZvcm1hdDogWydpbmRlbnQnLCAnbGlzdCddLFxuICAgICAgb2Zmc2V0OiAwLFxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihyYW5nZSwgY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5mb3JtYXQuaW5kZW50ICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnaW5kZW50JywgJy0xJywgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5mb3JtYXQubGlzdCAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2xpc3QnLCBmYWxzZSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgICdpbmRlbnQgY29kZS1ibG9jayc6IG1ha2VDb2RlQmxvY2tIYW5kbGVyKHRydWUpLFxuICAgICdvdXRkZW50IGNvZGUtYmxvY2snOiBtYWtlQ29kZUJsb2NrSGFuZGxlcihmYWxzZSksXG4gICAgJ3JlbW92ZSB0YWInOiB7XG4gICAgICBrZXk6IEtleWJvYXJkLmtleXMuVEFCLFxuICAgICAgc2hpZnRLZXk6IHRydWUsXG4gICAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgICBwcmVmaXg6IC9cXHQkLyxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIocmFuZ2UpIHtcbiAgICAgICAgdGhpcy5xdWlsbC5kZWxldGVUZXh0KHJhbmdlLmluZGV4IC0gMSwgMSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICB9XG4gICAgfSxcbiAgICAndGFiJzoge1xuICAgICAga2V5OiBLZXlib2FyZC5rZXlzLlRBQixcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIocmFuZ2UpIHtcbiAgICAgICAgdGhpcy5xdWlsbC5oaXN0b3J5LmN1dG9mZigpO1xuICAgICAgICB2YXIgZGVsdGEgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5yZXRhaW4ocmFuZ2UuaW5kZXgpLmRlbGV0ZShyYW5nZS5sZW5ndGgpLmluc2VydCgnXFx0Jyk7XG4gICAgICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMoZGVsdGEsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB0aGlzLnF1aWxsLmhpc3RvcnkuY3V0b2ZmKCk7XG4gICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4ICsgMSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdsaXN0IGVtcHR5IGVudGVyJzoge1xuICAgICAga2V5OiBLZXlib2FyZC5rZXlzLkVOVEVSLFxuICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgZm9ybWF0OiBbJ2xpc3QnXSxcbiAgICAgIGVtcHR5OiB0cnVlLFxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihyYW5nZSwgY29udGV4dCkge1xuICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnbGlzdCcsIGZhbHNlLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgaWYgKGNvbnRleHQuZm9ybWF0LmluZGVudCkge1xuICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdpbmRlbnQnLCBmYWxzZSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgICdjaGVja2xpc3QgZW50ZXInOiB7XG4gICAgICBrZXk6IEtleWJvYXJkLmtleXMuRU5URVIsXG4gICAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgICBmb3JtYXQ6IHsgbGlzdDogJ2NoZWNrZWQnIH0sXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKHJhbmdlKSB7XG4gICAgICAgIHZhciBfcXVpbGwkZ2V0TGluZTMgPSB0aGlzLnF1aWxsLmdldExpbmUocmFuZ2UuaW5kZXgpLFxuICAgICAgICAgICAgX3F1aWxsJGdldExpbmU0ID0gX3NsaWNlZFRvQXJyYXkoX3F1aWxsJGdldExpbmUzLCAyKSxcbiAgICAgICAgICAgIGxpbmUgPSBfcXVpbGwkZ2V0TGluZTRbMF0sXG4gICAgICAgICAgICBvZmZzZXQgPSBfcXVpbGwkZ2V0TGluZTRbMV07XG5cbiAgICAgICAgdmFyIGZvcm1hdHMgPSAoMCwgX2V4dGVuZDIuZGVmYXVsdCkoe30sIGxpbmUuZm9ybWF0cygpLCB7IGxpc3Q6ICdjaGVja2VkJyB9KTtcbiAgICAgICAgdmFyIGRlbHRhID0gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkucmV0YWluKHJhbmdlLmluZGV4KS5pbnNlcnQoJ1xcbicsIGZvcm1hdHMpLnJldGFpbihsaW5lLmxlbmd0aCgpIC0gb2Zmc2V0IC0gMSkucmV0YWluKDEsIHsgbGlzdDogJ3VuY2hlY2tlZCcgfSk7XG4gICAgICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMoZGVsdGEsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCArIDEsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICAgIHRoaXMucXVpbGwuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdoZWFkZXIgZW50ZXInOiB7XG4gICAgICBrZXk6IEtleWJvYXJkLmtleXMuRU5URVIsXG4gICAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgICBmb3JtYXQ6IFsnaGVhZGVyJ10sXG4gICAgICBzdWZmaXg6IC9eJC8sXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfcXVpbGwkZ2V0TGluZTUgPSB0aGlzLnF1aWxsLmdldExpbmUocmFuZ2UuaW5kZXgpLFxuICAgICAgICAgICAgX3F1aWxsJGdldExpbmU2ID0gX3NsaWNlZFRvQXJyYXkoX3F1aWxsJGdldExpbmU1LCAyKSxcbiAgICAgICAgICAgIGxpbmUgPSBfcXVpbGwkZ2V0TGluZTZbMF0sXG4gICAgICAgICAgICBvZmZzZXQgPSBfcXVpbGwkZ2V0TGluZTZbMV07XG5cbiAgICAgICAgdmFyIGRlbHRhID0gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkucmV0YWluKHJhbmdlLmluZGV4KS5pbnNlcnQoJ1xcbicsIGNvbnRleHQuZm9ybWF0KS5yZXRhaW4obGluZS5sZW5ndGgoKSAtIG9mZnNldCAtIDEpLnJldGFpbigxLCB7IGhlYWRlcjogbnVsbCB9KTtcbiAgICAgICAgdGhpcy5xdWlsbC51cGRhdGVDb250ZW50cyhkZWx0YSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4ICsgMSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgICAgdGhpcy5xdWlsbC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2xpc3QgYXV0b2ZpbGwnOiB7XG4gICAgICBrZXk6ICcgJyxcbiAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgIGZvcm1hdDogeyBsaXN0OiBmYWxzZSB9LFxuICAgICAgcHJlZml4OiAvXlxccyo/KFxcZCtcXC58LXxcXCp8XFxbID9cXF18XFxbeFxcXSkkLyxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIocmFuZ2UsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGNvbnRleHQucHJlZml4Lmxlbmd0aDtcblxuICAgICAgICB2YXIgX3F1aWxsJGdldExpbmU3ID0gdGhpcy5xdWlsbC5nZXRMaW5lKHJhbmdlLmluZGV4KSxcbiAgICAgICAgICAgIF9xdWlsbCRnZXRMaW5lOCA9IF9zbGljZWRUb0FycmF5KF9xdWlsbCRnZXRMaW5lNywgMiksXG4gICAgICAgICAgICBsaW5lID0gX3F1aWxsJGdldExpbmU4WzBdLFxuICAgICAgICAgICAgb2Zmc2V0ID0gX3F1aWxsJGdldExpbmU4WzFdO1xuXG4gICAgICAgIGlmIChvZmZzZXQgPiBsZW5ndGgpIHJldHVybiB0cnVlO1xuICAgICAgICB2YXIgdmFsdWUgPSB2b2lkIDA7XG4gICAgICAgIHN3aXRjaCAoY29udGV4dC5wcmVmaXgudHJpbSgpKSB7XG4gICAgICAgICAgY2FzZSAnW10nOmNhc2UgJ1sgXSc6XG4gICAgICAgICAgICB2YWx1ZSA9ICd1bmNoZWNrZWQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnW3hdJzpcbiAgICAgICAgICAgIHZhbHVlID0gJ2NoZWNrZWQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnLSc6Y2FzZSAnKic6XG4gICAgICAgICAgICB2YWx1ZSA9ICdidWxsZXQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHZhbHVlID0gJ29yZGVyZWQnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucXVpbGwuaW5zZXJ0VGV4dChyYW5nZS5pbmRleCwgJyAnLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgdGhpcy5xdWlsbC5oaXN0b3J5LmN1dG9mZigpO1xuICAgICAgICB2YXIgZGVsdGEgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5yZXRhaW4ocmFuZ2UuaW5kZXggLSBvZmZzZXQpLmRlbGV0ZShsZW5ndGggKyAxKS5yZXRhaW4obGluZS5sZW5ndGgoKSAtIDIgLSBvZmZzZXQpLnJldGFpbigxLCB7IGxpc3Q6IHZhbHVlIH0pO1xuICAgICAgICB0aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKGRlbHRhLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgdGhpcy5xdWlsbC5oaXN0b3J5LmN1dG9mZigpO1xuICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCAtIGxlbmd0aCwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdjb2RlIGV4aXQnOiB7XG4gICAgICBrZXk6IEtleWJvYXJkLmtleXMuRU5URVIsXG4gICAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgICBmb3JtYXQ6IFsnY29kZS1ibG9jayddLFxuICAgICAgcHJlZml4OiAvXFxuXFxuJC8sXG4gICAgICBzdWZmaXg6IC9eXFxzKyQvLFxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihyYW5nZSkge1xuICAgICAgICB2YXIgX3F1aWxsJGdldExpbmU5ID0gdGhpcy5xdWlsbC5nZXRMaW5lKHJhbmdlLmluZGV4KSxcbiAgICAgICAgICAgIF9xdWlsbCRnZXRMaW5lMTAgPSBfc2xpY2VkVG9BcnJheShfcXVpbGwkZ2V0TGluZTksIDIpLFxuICAgICAgICAgICAgbGluZSA9IF9xdWlsbCRnZXRMaW5lMTBbMF0sXG4gICAgICAgICAgICBvZmZzZXQgPSBfcXVpbGwkZ2V0TGluZTEwWzFdO1xuXG4gICAgICAgIHZhciBkZWx0YSA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihyYW5nZS5pbmRleCArIGxpbmUubGVuZ3RoKCkgLSBvZmZzZXQgLSAyKS5yZXRhaW4oMSwgeyAnY29kZS1ibG9jayc6IG51bGwgfSkuZGVsZXRlKDEpO1xuICAgICAgICB0aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKGRlbHRhLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdlbWJlZCBsZWZ0JzogbWFrZUVtYmVkQXJyb3dIYW5kbGVyKEtleWJvYXJkLmtleXMuTEVGVCwgZmFsc2UpLFxuICAgICdlbWJlZCBsZWZ0IHNoaWZ0JzogbWFrZUVtYmVkQXJyb3dIYW5kbGVyKEtleWJvYXJkLmtleXMuTEVGVCwgdHJ1ZSksXG4gICAgJ2VtYmVkIHJpZ2h0JzogbWFrZUVtYmVkQXJyb3dIYW5kbGVyKEtleWJvYXJkLmtleXMuUklHSFQsIGZhbHNlKSxcbiAgICAnZW1iZWQgcmlnaHQgc2hpZnQnOiBtYWtlRW1iZWRBcnJvd0hhbmRsZXIoS2V5Ym9hcmQua2V5cy5SSUdIVCwgdHJ1ZSlcbiAgfVxufTtcblxuZnVuY3Rpb24gbWFrZUVtYmVkQXJyb3dIYW5kbGVyKGtleSwgc2hpZnRLZXkpIHtcbiAgdmFyIF9yZWYzO1xuXG4gIHZhciB3aGVyZSA9IGtleSA9PT0gS2V5Ym9hcmQua2V5cy5MRUZUID8gJ3ByZWZpeCcgOiAnc3VmZml4JztcbiAgcmV0dXJuIF9yZWYzID0ge1xuICAgIGtleToga2V5LFxuICAgIHNoaWZ0S2V5OiBzaGlmdEtleSxcbiAgICBhbHRLZXk6IG51bGxcbiAgfSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCB3aGVyZSwgL14kLyksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgJ2hhbmRsZXInLCBmdW5jdGlvbiBoYW5kbGVyKHJhbmdlKSB7XG4gICAgdmFyIGluZGV4ID0gcmFuZ2UuaW5kZXg7XG4gICAgaWYgKGtleSA9PT0gS2V5Ym9hcmQua2V5cy5SSUdIVCkge1xuICAgICAgaW5kZXggKz0gcmFuZ2UubGVuZ3RoICsgMTtcbiAgICB9XG5cbiAgICB2YXIgX3F1aWxsJGdldExlYWYzID0gdGhpcy5xdWlsbC5nZXRMZWFmKGluZGV4KSxcbiAgICAgICAgX3F1aWxsJGdldExlYWY0ID0gX3NsaWNlZFRvQXJyYXkoX3F1aWxsJGdldExlYWYzLCAxKSxcbiAgICAgICAgbGVhZiA9IF9xdWlsbCRnZXRMZWFmNFswXTtcblxuICAgIGlmICghKGxlYWYgaW5zdGFuY2VvZiBfcGFyY2htZW50Mi5kZWZhdWx0LkVtYmVkKSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKGtleSA9PT0gS2V5Ym9hcmQua2V5cy5MRUZUKSB7XG4gICAgICBpZiAoc2hpZnRLZXkpIHtcbiAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXggLSAxLCByYW5nZS5sZW5ndGggKyAxLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4IC0gMSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzaGlmdEtleSkge1xuICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCwgcmFuZ2UubGVuZ3RoICsgMSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCArIHJhbmdlLmxlbmd0aCArIDEsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pLCBfcmVmMztcbn1cblxuZnVuY3Rpb24gaGFuZGxlQmFja3NwYWNlKHJhbmdlLCBjb250ZXh0KSB7XG4gIGlmIChyYW5nZS5pbmRleCA9PT0gMCB8fCB0aGlzLnF1aWxsLmdldExlbmd0aCgpIDw9IDEpIHJldHVybjtcblxuICB2YXIgX3F1aWxsJGdldExpbmUxMSA9IHRoaXMucXVpbGwuZ2V0TGluZShyYW5nZS5pbmRleCksXG4gICAgICBfcXVpbGwkZ2V0TGluZTEyID0gX3NsaWNlZFRvQXJyYXkoX3F1aWxsJGdldExpbmUxMSwgMSksXG4gICAgICBsaW5lID0gX3F1aWxsJGdldExpbmUxMlswXTtcblxuICB2YXIgZm9ybWF0cyA9IHt9O1xuICBpZiAoY29udGV4dC5vZmZzZXQgPT09IDApIHtcbiAgICB2YXIgX3F1aWxsJGdldExpbmUxMyA9IHRoaXMucXVpbGwuZ2V0TGluZShyYW5nZS5pbmRleCAtIDEpLFxuICAgICAgICBfcXVpbGwkZ2V0TGluZTE0ID0gX3NsaWNlZFRvQXJyYXkoX3F1aWxsJGdldExpbmUxMywgMSksXG4gICAgICAgIHByZXYgPSBfcXVpbGwkZ2V0TGluZTE0WzBdO1xuXG4gICAgaWYgKHByZXYgIT0gbnVsbCAmJiBwcmV2Lmxlbmd0aCgpID4gMSkge1xuICAgICAgdmFyIGN1ckZvcm1hdHMgPSBsaW5lLmZvcm1hdHMoKTtcbiAgICAgIHZhciBwcmV2Rm9ybWF0cyA9IHRoaXMucXVpbGwuZ2V0Rm9ybWF0KHJhbmdlLmluZGV4IC0gMSwgMSk7XG4gICAgICBmb3JtYXRzID0gX29wMi5kZWZhdWx0LmF0dHJpYnV0ZXMuZGlmZihjdXJGb3JtYXRzLCBwcmV2Rm9ybWF0cykgfHwge307XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIGZvciBhc3RyYWwgc3ltYm9sc1xuICB2YXIgbGVuZ3RoID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0kLy50ZXN0KGNvbnRleHQucHJlZml4KSA/IDIgOiAxO1xuICB0aGlzLnF1aWxsLmRlbGV0ZVRleHQocmFuZ2UuaW5kZXggLSBsZW5ndGgsIGxlbmd0aCwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gIGlmIChPYmplY3Qua2V5cyhmb3JtYXRzKS5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5xdWlsbC5mb3JtYXRMaW5lKHJhbmdlLmluZGV4IC0gbGVuZ3RoLCBsZW5ndGgsIGZvcm1hdHMsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICB9XG4gIHRoaXMucXVpbGwuZm9jdXMoKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRGVsZXRlKHJhbmdlLCBjb250ZXh0KSB7XG4gIC8vIENoZWNrIGZvciBhc3RyYWwgc3ltYm9sc1xuICB2YXIgbGVuZ3RoID0gL15bXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdLy50ZXN0KGNvbnRleHQuc3VmZml4KSA/IDIgOiAxO1xuICBpZiAocmFuZ2UuaW5kZXggPj0gdGhpcy5xdWlsbC5nZXRMZW5ndGgoKSAtIGxlbmd0aCkgcmV0dXJuO1xuICB2YXIgZm9ybWF0cyA9IHt9LFxuICAgICAgbmV4dExlbmd0aCA9IDA7XG5cbiAgdmFyIF9xdWlsbCRnZXRMaW5lMTUgPSB0aGlzLnF1aWxsLmdldExpbmUocmFuZ2UuaW5kZXgpLFxuICAgICAgX3F1aWxsJGdldExpbmUxNiA9IF9zbGljZWRUb0FycmF5KF9xdWlsbCRnZXRMaW5lMTUsIDEpLFxuICAgICAgbGluZSA9IF9xdWlsbCRnZXRMaW5lMTZbMF07XG5cbiAgaWYgKGNvbnRleHQub2Zmc2V0ID49IGxpbmUubGVuZ3RoKCkgLSAxKSB7XG4gICAgdmFyIF9xdWlsbCRnZXRMaW5lMTcgPSB0aGlzLnF1aWxsLmdldExpbmUocmFuZ2UuaW5kZXggKyAxKSxcbiAgICAgICAgX3F1aWxsJGdldExpbmUxOCA9IF9zbGljZWRUb0FycmF5KF9xdWlsbCRnZXRMaW5lMTcsIDEpLFxuICAgICAgICBuZXh0ID0gX3F1aWxsJGdldExpbmUxOFswXTtcblxuICAgIGlmIChuZXh0KSB7XG4gICAgICB2YXIgY3VyRm9ybWF0cyA9IGxpbmUuZm9ybWF0cygpO1xuICAgICAgdmFyIG5leHRGb3JtYXRzID0gdGhpcy5xdWlsbC5nZXRGb3JtYXQocmFuZ2UuaW5kZXgsIDEpO1xuICAgICAgZm9ybWF0cyA9IF9vcDIuZGVmYXVsdC5hdHRyaWJ1dGVzLmRpZmYoY3VyRm9ybWF0cywgbmV4dEZvcm1hdHMpIHx8IHt9O1xuICAgICAgbmV4dExlbmd0aCA9IG5leHQubGVuZ3RoKCk7XG4gICAgfVxuICB9XG4gIHRoaXMucXVpbGwuZGVsZXRlVGV4dChyYW5nZS5pbmRleCwgbGVuZ3RoLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgaWYgKE9iamVjdC5rZXlzKGZvcm1hdHMpLmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLnF1aWxsLmZvcm1hdExpbmUocmFuZ2UuaW5kZXggKyBuZXh0TGVuZ3RoIC0gMSwgbGVuZ3RoLCBmb3JtYXRzLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVEZWxldGVSYW5nZShyYW5nZSkge1xuICB2YXIgbGluZXMgPSB0aGlzLnF1aWxsLmdldExpbmVzKHJhbmdlKTtcbiAgdmFyIGZvcm1hdHMgPSB7fTtcbiAgaWYgKGxpbmVzLmxlbmd0aCA+IDEpIHtcbiAgICB2YXIgZmlyc3RGb3JtYXRzID0gbGluZXNbMF0uZm9ybWF0cygpO1xuICAgIHZhciBsYXN0Rm9ybWF0cyA9IGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdLmZvcm1hdHMoKTtcbiAgICBmb3JtYXRzID0gX29wMi5kZWZhdWx0LmF0dHJpYnV0ZXMuZGlmZihsYXN0Rm9ybWF0cywgZmlyc3RGb3JtYXRzKSB8fCB7fTtcbiAgfVxuICB0aGlzLnF1aWxsLmRlbGV0ZVRleHQocmFuZ2UsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICBpZiAoT2JqZWN0LmtleXMoZm9ybWF0cykubGVuZ3RoID4gMCkge1xuICAgIHRoaXMucXVpbGwuZm9ybWF0TGluZShyYW5nZS5pbmRleCwgMSwgZm9ybWF0cywgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gIH1cbiAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXgsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gIHRoaXMucXVpbGwuZm9jdXMoKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRW50ZXIocmFuZ2UsIGNvbnRleHQpIHtcbiAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgaWYgKHJhbmdlLmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLnF1aWxsLnNjcm9sbC5kZWxldGVBdChyYW5nZS5pbmRleCwgcmFuZ2UubGVuZ3RoKTsgLy8gU28gd2UgZG8gbm90IHRyaWdnZXIgdGV4dC1jaGFuZ2VcbiAgfVxuICB2YXIgbGluZUZvcm1hdHMgPSBPYmplY3Qua2V5cyhjb250ZXh0LmZvcm1hdCkucmVkdWNlKGZ1bmN0aW9uIChsaW5lRm9ybWF0cywgZm9ybWF0KSB7XG4gICAgaWYgKF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkoZm9ybWF0LCBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLkJMT0NLKSAmJiAhQXJyYXkuaXNBcnJheShjb250ZXh0LmZvcm1hdFtmb3JtYXRdKSkge1xuICAgICAgbGluZUZvcm1hdHNbZm9ybWF0XSA9IGNvbnRleHQuZm9ybWF0W2Zvcm1hdF07XG4gICAgfVxuICAgIHJldHVybiBsaW5lRm9ybWF0cztcbiAgfSwge30pO1xuICB0aGlzLnF1aWxsLmluc2VydFRleHQocmFuZ2UuaW5kZXgsICdcXG4nLCBsaW5lRm9ybWF0cywgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gIC8vIEVhcmxpZXIgc2Nyb2xsLmRlbGV0ZUF0IG1pZ2h0IGhhdmUgbWVzc2VkIHVwIG91ciBzZWxlY3Rpb24sXG4gIC8vIHNvIGluc2VydFRleHQncyBidWlsdCBpbiBzZWxlY3Rpb24gcHJlc2VydmF0aW9uIGlzIG5vdCByZWxpYWJsZVxuICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCArIDEsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gIHRoaXMucXVpbGwuZm9jdXMoKTtcbiAgT2JqZWN0LmtleXMoY29udGV4dC5mb3JtYXQpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobGluZUZvcm1hdHNbbmFtZV0gIT0gbnVsbCkgcmV0dXJuO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRleHQuZm9ybWF0W25hbWVdKSkgcmV0dXJuO1xuICAgIGlmIChuYW1lID09PSAnbGluaycpIHJldHVybjtcbiAgICBfdGhpczMucXVpbGwuZm9ybWF0KG5hbWUsIGNvbnRleHQuZm9ybWF0W25hbWVdLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VDb2RlQmxvY2tIYW5kbGVyKGluZGVudCkge1xuICByZXR1cm4ge1xuICAgIGtleTogS2V5Ym9hcmQua2V5cy5UQUIsXG4gICAgc2hpZnRLZXk6ICFpbmRlbnQsXG4gICAgZm9ybWF0OiB7ICdjb2RlLWJsb2NrJzogdHJ1ZSB9LFxuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIocmFuZ2UpIHtcbiAgICAgIHZhciBDb2RlQmxvY2sgPSBfcGFyY2htZW50Mi5kZWZhdWx0LnF1ZXJ5KCdjb2RlLWJsb2NrJyk7XG4gICAgICB2YXIgaW5kZXggPSByYW5nZS5pbmRleCxcbiAgICAgICAgICBsZW5ndGggPSByYW5nZS5sZW5ndGg7XG5cbiAgICAgIHZhciBfcXVpbGwkc2Nyb2xsJGRlc2NlbmQgPSB0aGlzLnF1aWxsLnNjcm9sbC5kZXNjZW5kYW50KENvZGVCbG9jaywgaW5kZXgpLFxuICAgICAgICAgIF9xdWlsbCRzY3JvbGwkZGVzY2VuZDIgPSBfc2xpY2VkVG9BcnJheShfcXVpbGwkc2Nyb2xsJGRlc2NlbmQsIDIpLFxuICAgICAgICAgIGJsb2NrID0gX3F1aWxsJHNjcm9sbCRkZXNjZW5kMlswXSxcbiAgICAgICAgICBvZmZzZXQgPSBfcXVpbGwkc2Nyb2xsJGRlc2NlbmQyWzFdO1xuXG4gICAgICBpZiAoYmxvY2sgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgdmFyIHNjcm9sbEluZGV4ID0gdGhpcy5xdWlsbC5nZXRJbmRleChibG9jayk7XG4gICAgICB2YXIgc3RhcnQgPSBibG9jay5uZXdsaW5lSW5kZXgob2Zmc2V0LCB0cnVlKSArIDE7XG4gICAgICB2YXIgZW5kID0gYmxvY2submV3bGluZUluZGV4KHNjcm9sbEluZGV4ICsgb2Zmc2V0ICsgbGVuZ3RoKTtcbiAgICAgIHZhciBsaW5lcyA9IGJsb2NrLmRvbU5vZGUudGV4dENvbnRlbnQuc2xpY2Uoc3RhcnQsIGVuZCkuc3BsaXQoJ1xcbicpO1xuICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgIGxpbmVzLmZvckVhY2goZnVuY3Rpb24gKGxpbmUsIGkpIHtcbiAgICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICAgIGJsb2NrLmluc2VydEF0KHN0YXJ0ICsgb2Zmc2V0LCBDb2RlQmxvY2suVEFCKTtcbiAgICAgICAgICBvZmZzZXQgKz0gQ29kZUJsb2NrLlRBQi5sZW5ndGg7XG4gICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgIGluZGV4ICs9IENvZGVCbG9jay5UQUIubGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZW5ndGggKz0gQ29kZUJsb2NrLlRBQi5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChDb2RlQmxvY2suVEFCKSkge1xuICAgICAgICAgIGJsb2NrLmRlbGV0ZUF0KHN0YXJ0ICsgb2Zmc2V0LCBDb2RlQmxvY2suVEFCLmxlbmd0aCk7XG4gICAgICAgICAgb2Zmc2V0IC09IENvZGVCbG9jay5UQUIubGVuZ3RoO1xuICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICBpbmRleCAtPSBDb2RlQmxvY2suVEFCLmxlbmd0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGVuZ3RoIC09IENvZGVCbG9jay5UQUIubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvZmZzZXQgKz0gbGluZS5sZW5ndGggKyAxO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnF1aWxsLnVwZGF0ZShfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKGluZGV4LCBsZW5ndGgsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBtYWtlRm9ybWF0SGFuZGxlcihmb3JtYXQpIHtcbiAgcmV0dXJuIHtcbiAgICBrZXk6IGZvcm1hdFswXS50b1VwcGVyQ2FzZSgpLFxuICAgIHNob3J0S2V5OiB0cnVlLFxuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIocmFuZ2UsIGNvbnRleHQpIHtcbiAgICAgIHRoaXMucXVpbGwuZm9ybWF0KGZvcm1hdCwgIWNvbnRleHQuZm9ybWF0W2Zvcm1hdF0sIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplKGJpbmRpbmcpIHtcbiAgaWYgKHR5cGVvZiBiaW5kaW5nID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYmluZGluZyA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplKHsga2V5OiBiaW5kaW5nIH0pO1xuICB9XG4gIGlmICgodHlwZW9mIGJpbmRpbmcgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGJpbmRpbmcpKSA9PT0gJ29iamVjdCcpIHtcbiAgICBiaW5kaW5nID0gKDAsIF9jbG9uZTIuZGVmYXVsdCkoYmluZGluZywgZmFsc2UpO1xuICB9XG4gIGlmICh0eXBlb2YgYmluZGluZy5rZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKEtleWJvYXJkLmtleXNbYmluZGluZy5rZXkudG9VcHBlckNhc2UoKV0gIT0gbnVsbCkge1xuICAgICAgYmluZGluZy5rZXkgPSBLZXlib2FyZC5rZXlzW2JpbmRpbmcua2V5LnRvVXBwZXJDYXNlKCldO1xuICAgIH0gZWxzZSBpZiAoYmluZGluZy5rZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICBiaW5kaW5nLmtleSA9IGJpbmRpbmcua2V5LnRvVXBwZXJDYXNlKCkuY2hhckNvZGVBdCgwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGlmIChiaW5kaW5nLnNob3J0S2V5KSB7XG4gICAgYmluZGluZ1tTSE9SVEtFWV0gPSBiaW5kaW5nLnNob3J0S2V5O1xuICAgIGRlbGV0ZSBiaW5kaW5nLnNob3J0S2V5O1xuICB9XG4gIHJldHVybiBiaW5kaW5nO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBLZXlib2FyZDtcbmV4cG9ydHMuU0hPUlRLRVkgPSBTSE9SVEtFWTtcblxuLyoqKi8gfSksXG4vKiAyNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX3RleHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX3RleHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGV4dCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEN1cnNvciA9IGZ1bmN0aW9uIChfUGFyY2htZW50JEVtYmVkKSB7XG4gIF9pbmhlcml0cyhDdXJzb3IsIF9QYXJjaG1lbnQkRW1iZWQpO1xuXG4gIF9jcmVhdGVDbGFzcyhDdXJzb3IsIG51bGwsIFt7XG4gICAga2V5OiAndmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XSk7XG5cbiAgZnVuY3Rpb24gQ3Vyc29yKGRvbU5vZGUsIHNlbGVjdGlvbikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDdXJzb3IpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEN1cnNvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEN1cnNvcikpLmNhbGwodGhpcywgZG9tTm9kZSkpO1xuXG4gICAgX3RoaXMuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuICAgIF90aGlzLnRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoQ3Vyc29yLkNPTlRFTlRTKTtcbiAgICBfdGhpcy5kb21Ob2RlLmFwcGVuZENoaWxkKF90aGlzLnRleHROb2RlKTtcbiAgICBfdGhpcy5fbGVuZ3RoID0gMDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ3Vyc29yLCBbe1xuICAgIGtleTogJ2RldGFjaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICAgIC8vIHN1cGVyLmRldGFjaCgpIHdpbGwgYWxzbyBjbGVhciBkb21Ob2RlLl9fYmxvdFxuICAgICAgaWYgKHRoaXMucGFyZW50ICE9IG51bGwpIHRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdChuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMuX2xlbmd0aCAhPT0gMCkge1xuICAgICAgICByZXR1cm4gX2dldChDdXJzb3IucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ3Vyc29yLnByb3RvdHlwZSksICdmb3JtYXQnLCB0aGlzKS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciB0YXJnZXQgPSB0aGlzLFxuICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgIHdoaWxlICh0YXJnZXQgIT0gbnVsbCAmJiB0YXJnZXQuc3RhdGljcy5zY29wZSAhPT0gX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5CTE9DS19CTE9UKSB7XG4gICAgICAgIGluZGV4ICs9IHRhcmdldC5vZmZzZXQodGFyZ2V0LnBhcmVudCk7XG4gICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAodGFyZ2V0ICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gQ3Vyc29yLkNPTlRFTlRTLmxlbmd0aDtcbiAgICAgICAgdGFyZ2V0Lm9wdGltaXplKCk7XG4gICAgICAgIHRhcmdldC5mb3JtYXRBdChpbmRleCwgQ3Vyc29yLkNPTlRFTlRTLmxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgICAgICB0aGlzLl9sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2luZGV4JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5kZXgobm9kZSwgb2Zmc2V0KSB7XG4gICAgICBpZiAobm9kZSA9PT0gdGhpcy50ZXh0Tm9kZSkgcmV0dXJuIDA7XG4gICAgICByZXR1cm4gX2dldChDdXJzb3IucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ3Vyc29yLnByb3RvdHlwZSksICdpbmRleCcsIHRoaXMpLmNhbGwodGhpcywgbm9kZSwgb2Zmc2V0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdsZW5ndGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsZW5ndGgoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Bvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcG9zaXRpb24oKSB7XG4gICAgICByZXR1cm4gW3RoaXMudGV4dE5vZGUsIHRoaXMudGV4dE5vZGUuZGF0YS5sZW5ndGhdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbW92ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIF9nZXQoQ3Vyc29yLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEN1cnNvci5wcm90b3R5cGUpLCAncmVtb3ZlJywgdGhpcykuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZXN0b3JlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdG9yZSgpIHtcbiAgICAgIGlmICh0aGlzLnNlbGVjdGlvbi5jb21wb3NpbmcgfHwgdGhpcy5wYXJlbnQgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgdmFyIHRleHROb2RlID0gdGhpcy50ZXh0Tm9kZTtcbiAgICAgIHZhciByYW5nZSA9IHRoaXMuc2VsZWN0aW9uLmdldE5hdGl2ZVJhbmdlKCk7XG4gICAgICB2YXIgcmVzdG9yZVRleHQgPSB2b2lkIDAsXG4gICAgICAgICAgc3RhcnQgPSB2b2lkIDAsXG4gICAgICAgICAgZW5kID0gdm9pZCAwO1xuICAgICAgaWYgKHJhbmdlICE9IG51bGwgJiYgcmFuZ2Uuc3RhcnQubm9kZSA9PT0gdGV4dE5vZGUgJiYgcmFuZ2UuZW5kLm5vZGUgPT09IHRleHROb2RlKSB7XG4gICAgICAgIHZhciBfcmVmID0gW3RleHROb2RlLCByYW5nZS5zdGFydC5vZmZzZXQsIHJhbmdlLmVuZC5vZmZzZXRdO1xuICAgICAgICByZXN0b3JlVGV4dCA9IF9yZWZbMF07XG4gICAgICAgIHN0YXJ0ID0gX3JlZlsxXTtcbiAgICAgICAgZW5kID0gX3JlZlsyXTtcbiAgICAgIH1cbiAgICAgIC8vIExpbmsgZm9ybWF0IHdpbGwgaW5zZXJ0IHRleHQgb3V0c2lkZSBvZiBhbmNob3IgdGFnXG4gICAgICB3aGlsZSAodGhpcy5kb21Ob2RlLmxhc3RDaGlsZCAhPSBudWxsICYmIHRoaXMuZG9tTm9kZS5sYXN0Q2hpbGQgIT09IHRoaXMudGV4dE5vZGUpIHtcbiAgICAgICAgdGhpcy5kb21Ob2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuZG9tTm9kZS5sYXN0Q2hpbGQsIHRoaXMuZG9tTm9kZSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy50ZXh0Tm9kZS5kYXRhICE9PSBDdXJzb3IuQ09OVEVOVFMpIHtcbiAgICAgICAgdmFyIHRleHQgPSB0aGlzLnRleHROb2RlLmRhdGEuc3BsaXQoQ3Vyc29yLkNPTlRFTlRTKS5qb2luKCcnKTtcbiAgICAgICAgaWYgKHRoaXMubmV4dCBpbnN0YW5jZW9mIF90ZXh0Mi5kZWZhdWx0KSB7XG4gICAgICAgICAgcmVzdG9yZVRleHQgPSB0aGlzLm5leHQuZG9tTm9kZTtcbiAgICAgICAgICB0aGlzLm5leHQuaW5zZXJ0QXQoMCwgdGV4dCk7XG4gICAgICAgICAgdGhpcy50ZXh0Tm9kZS5kYXRhID0gQ3Vyc29yLkNPTlRFTlRTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudGV4dE5vZGUuZGF0YSA9IHRleHQ7XG4gICAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKF9wYXJjaG1lbnQyLmRlZmF1bHQuY3JlYXRlKHRoaXMudGV4dE5vZGUpLCB0aGlzKTtcbiAgICAgICAgICB0aGlzLnRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoQ3Vyc29yLkNPTlRFTlRTKTtcbiAgICAgICAgICB0aGlzLmRvbU5vZGUuYXBwZW5kQ2hpbGQodGhpcy50ZXh0Tm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICBpZiAoc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICB2YXIgX21hcCA9IFtzdGFydCwgZW5kXS5tYXAoZnVuY3Rpb24gKG9mZnNldCkge1xuICAgICAgICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbihyZXN0b3JlVGV4dC5kYXRhLmxlbmd0aCwgb2Zmc2V0IC0gMSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgX21hcDIgPSBfc2xpY2VkVG9BcnJheShfbWFwLCAyKTtcblxuICAgICAgICBzdGFydCA9IF9tYXAyWzBdO1xuICAgICAgICBlbmQgPSBfbWFwMlsxXTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0YXJ0Tm9kZTogcmVzdG9yZVRleHQsXG4gICAgICAgICAgc3RhcnRPZmZzZXQ6IHN0YXJ0LFxuICAgICAgICAgIGVuZE5vZGU6IHJlc3RvcmVUZXh0LFxuICAgICAgICAgIGVuZE9mZnNldDogZW5kXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmIChtdXRhdGlvbnMuc29tZShmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIG11dGF0aW9uLnR5cGUgPT09ICdjaGFyYWN0ZXJEYXRhJyAmJiBtdXRhdGlvbi50YXJnZXQgPT09IF90aGlzMi50ZXh0Tm9kZTtcbiAgICAgIH0pKSB7XG4gICAgICAgIHZhciByYW5nZSA9IHRoaXMucmVzdG9yZSgpO1xuICAgICAgICBpZiAocmFuZ2UpIGNvbnRleHQucmFuZ2UgPSByYW5nZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd2YWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDdXJzb3I7XG59KF9wYXJjaG1lbnQyLmRlZmF1bHQuRW1iZWQpO1xuXG5DdXJzb3IuYmxvdE5hbWUgPSAnY3Vyc29yJztcbkN1cnNvci5jbGFzc05hbWUgPSAncWwtY3Vyc29yJztcbkN1cnNvci50YWdOYW1lID0gJ3NwYW4nO1xuQ3Vyc29yLkNPTlRFTlRTID0gJ1xcdUZFRkYnOyAvLyBaZXJvIHdpZHRoIG5vIGJyZWFrIHNwYWNlXG5cblxuZXhwb3J0cy5kZWZhdWx0ID0gQ3Vyc29yO1xuXG4vKioqLyB9KSxcbi8qIDI1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9ibG9jayA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfYmxvY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmxvY2spO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBDb250YWluZXIgPSBmdW5jdGlvbiAoX1BhcmNobWVudCRDb250YWluZXIpIHtcbiAgX2luaGVyaXRzKENvbnRhaW5lciwgX1BhcmNobWVudCRDb250YWluZXIpO1xuXG4gIGZ1bmN0aW9uIENvbnRhaW5lcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29udGFpbmVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ29udGFpbmVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29udGFpbmVyKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICByZXR1cm4gQ29udGFpbmVyO1xufShfcGFyY2htZW50Mi5kZWZhdWx0LkNvbnRhaW5lcik7XG5cbkNvbnRhaW5lci5hbGxvd2VkQ2hpbGRyZW4gPSBbX2Jsb2NrMi5kZWZhdWx0LCBfYmxvY2suQmxvY2tFbWJlZCwgQ29udGFpbmVyXTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ29udGFpbmVyO1xuXG4vKioqLyB9KSxcbi8qIDI2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkNvbG9yU3R5bGUgPSBleHBvcnRzLkNvbG9yQ2xhc3MgPSBleHBvcnRzLkNvbG9yQXR0cmlidXRvciA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIENvbG9yQXR0cmlidXRvciA9IGZ1bmN0aW9uIChfUGFyY2htZW50JEF0dHJpYnV0b3IpIHtcbiAgX2luaGVyaXRzKENvbG9yQXR0cmlidXRvciwgX1BhcmNobWVudCRBdHRyaWJ1dG9yKTtcblxuICBmdW5jdGlvbiBDb2xvckF0dHJpYnV0b3IoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbG9yQXR0cmlidXRvcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENvbG9yQXR0cmlidXRvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbG9yQXR0cmlidXRvcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvbG9yQXR0cmlidXRvciwgW3tcbiAgICBrZXk6ICd2YWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKGRvbU5vZGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IF9nZXQoQ29sb3JBdHRyaWJ1dG9yLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbG9yQXR0cmlidXRvci5wcm90b3R5cGUpLCAndmFsdWUnLCB0aGlzKS5jYWxsKHRoaXMsIGRvbU5vZGUpO1xuICAgICAgaWYgKCF2YWx1ZS5zdGFydHNXaXRoKCdyZ2IoJykpIHJldHVybiB2YWx1ZTtcbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXlteXFxkXSsvLCAnJykucmVwbGFjZSgvW15cXGRdKyQvLCAnJyk7XG4gICAgICByZXR1cm4gJyMnICsgdmFsdWUuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgICAgICByZXR1cm4gKCcwMCcgKyBwYXJzZUludChjb21wb25lbnQpLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO1xuICAgICAgfSkuam9pbignJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvbG9yQXR0cmlidXRvcjtcbn0oX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLlN0eWxlKTtcblxudmFyIENvbG9yQ2xhc3MgPSBuZXcgX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLkNsYXNzKCdjb2xvcicsICdxbC1jb2xvcicsIHtcbiAgc2NvcGU6IF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuSU5MSU5FXG59KTtcbnZhciBDb2xvclN0eWxlID0gbmV3IENvbG9yQXR0cmlidXRvcignY29sb3InLCAnY29sb3InLCB7XG4gIHNjb3BlOiBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLklOTElORVxufSk7XG5cbmV4cG9ydHMuQ29sb3JBdHRyaWJ1dG9yID0gQ29sb3JBdHRyaWJ1dG9yO1xuZXhwb3J0cy5Db2xvckNsYXNzID0gQ29sb3JDbGFzcztcbmV4cG9ydHMuQ29sb3JTdHlsZSA9IENvbG9yU3R5bGU7XG5cbi8qKiovIH0pLFxuLyogMjcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuc2FuaXRpemUgPSBleHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9pbmxpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX2lubGluZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmxpbmUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBMaW5rID0gZnVuY3Rpb24gKF9JbmxpbmUpIHtcbiAgX2luaGVyaXRzKExpbmssIF9JbmxpbmUpO1xuXG4gIGZ1bmN0aW9uIExpbmsoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpbmspO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMaW5rLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGluaykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKExpbmssIFt7XG4gICAga2V5OiAnZm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0KG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAobmFtZSAhPT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lIHx8ICF2YWx1ZSkgcmV0dXJuIF9nZXQoTGluay5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMaW5rLnByb3RvdHlwZSksICdmb3JtYXQnLCB0aGlzKS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgIHZhbHVlID0gdGhpcy5jb25zdHJ1Y3Rvci5zYW5pdGl6ZSh2YWx1ZSk7XG4gICAgICB0aGlzLmRvbU5vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgdmFsdWUpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAnY3JlYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZSA9IF9nZXQoTGluay5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExpbmspLCAnY3JlYXRlJywgdGhpcykuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICB2YWx1ZSA9IHRoaXMuc2FuaXRpemUodmFsdWUpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCB2YWx1ZSk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgndGFyZ2V0JywgJ19ibGFuaycpO1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdHMoZG9tTm9kZSkge1xuICAgICAgcmV0dXJuIGRvbU5vZGUuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2FuaXRpemUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzYW5pdGl6ZSh1cmwpIHtcbiAgICAgIHJldHVybiBfc2FuaXRpemUodXJsLCB0aGlzLlBST1RPQ09MX1dISVRFTElTVCkgPyB1cmwgOiB0aGlzLlNBTklUSVpFRF9VUkw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExpbms7XG59KF9pbmxpbmUyLmRlZmF1bHQpO1xuXG5MaW5rLmJsb3ROYW1lID0gJ2xpbmsnO1xuTGluay50YWdOYW1lID0gJ0EnO1xuTGluay5TQU5JVElaRURfVVJMID0gJ2Fib3V0OmJsYW5rJztcbkxpbmsuUFJPVE9DT0xfV0hJVEVMSVNUID0gWydodHRwJywgJ2h0dHBzJywgJ21haWx0bycsICd0ZWwnXTtcblxuZnVuY3Rpb24gX3Nhbml0aXplKHVybCwgcHJvdG9jb2xzKSB7XG4gIHZhciBhbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gIGFuY2hvci5ocmVmID0gdXJsO1xuICB2YXIgcHJvdG9jb2wgPSBhbmNob3IuaHJlZi5zbGljZSgwLCBhbmNob3IuaHJlZi5pbmRleE9mKCc6JykpO1xuICByZXR1cm4gcHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID4gLTE7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IExpbms7XG5leHBvcnRzLnNhbml0aXplID0gX3Nhbml0aXplO1xuXG4vKioqLyB9KSxcbi8qIDI4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9rZXlib2FyZCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXG52YXIgX2tleWJvYXJkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleWJvYXJkKTtcblxudmFyIF9kcm9wZG93biA9IF9fd2VicGFja19yZXF1aXJlX18oMTA3KTtcblxudmFyIF9kcm9wZG93bjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kcm9wZG93bik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBvcHRpb25zQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIHRvZ2dsZUFyaWFBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlKSB7XG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgIShlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpID09PSAndHJ1ZScpKTtcbn1cblxudmFyIFBpY2tlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGlja2VyKHNlbGVjdCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGlja2VyKTtcblxuICAgIHRoaXMuc2VsZWN0ID0gc2VsZWN0O1xuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHRoaXMuYnVpbGRQaWNrZXIoKTtcbiAgICB0aGlzLnNlbGVjdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIHRoaXMuc2VsZWN0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuY29udGFpbmVyLCB0aGlzLnNlbGVjdCk7XG5cbiAgICB0aGlzLmxhYmVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnRvZ2dsZVBpY2tlcigpO1xuICAgIH0pO1xuICAgIHRoaXMubGFiZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIC8vIEFsbG93cyB0aGUgXCJFbnRlclwiIGtleSB0byBvcGVuIHRoZSBwaWNrZXJcbiAgICAgICAgY2FzZSBfa2V5Ym9hcmQyLmRlZmF1bHQua2V5cy5FTlRFUjpcbiAgICAgICAgICBfdGhpcy50b2dnbGVQaWNrZXIoKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICAvLyBBbGxvd3MgdGhlIFwiRXNjYXBlXCIga2V5IHRvIGNsb3NlIHRoZSBwaWNrZXJcbiAgICAgICAgY2FzZSBfa2V5Ym9hcmQyLmRlZmF1bHQua2V5cy5FU0NBUEU6XG4gICAgICAgICAgX3RoaXMuZXNjYXBlKCk7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQaWNrZXIsIFt7XG4gICAga2V5OiAndG9nZ2xlUGlja2VyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlUGlja2VyKCkge1xuICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZSgncWwtZXhwYW5kZWQnKTtcbiAgICAgIC8vIFRvZ2dsZSBhcmlhLWV4cGFuZGVkIGFuZCBhcmlhLWhpZGRlbiB0byBtYWtlIHRoZSBwaWNrZXIgYWNjZXNzaWJsZVxuICAgICAgdG9nZ2xlQXJpYUF0dHJpYnV0ZSh0aGlzLmxhYmVsLCAnYXJpYS1leHBhbmRlZCcpO1xuICAgICAgdG9nZ2xlQXJpYUF0dHJpYnV0ZSh0aGlzLm9wdGlvbnMsICdhcmlhLWhpZGRlbicpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2J1aWxkSXRlbScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJ1aWxkSXRlbShvcHRpb24pIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIGl0ZW0udGFiSW5kZXggPSAnMCc7XG4gICAgICBpdGVtLnNldEF0dHJpYnV0ZSgncm9sZScsICdidXR0b24nKTtcblxuICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKCdxbC1waWNrZXItaXRlbScpO1xuICAgICAgaWYgKG9wdGlvbi5oYXNBdHRyaWJ1dGUoJ3ZhbHVlJykpIHtcbiAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnLCBvcHRpb24uZ2V0QXR0cmlidXRlKCd2YWx1ZScpKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb24udGV4dENvbnRlbnQpIHtcbiAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtbGFiZWwnLCBvcHRpb24udGV4dENvbnRlbnQpO1xuICAgICAgfVxuICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNlbGVjdEl0ZW0oaXRlbSwgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgICAvLyBBbGxvd3MgdGhlIFwiRW50ZXJcIiBrZXkgdG8gc2VsZWN0IGFuIGl0ZW1cbiAgICAgICAgICBjYXNlIF9rZXlib2FyZDIuZGVmYXVsdC5rZXlzLkVOVEVSOlxuICAgICAgICAgICAgX3RoaXMyLnNlbGVjdEl0ZW0oaXRlbSwgdHJ1ZSk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAvLyBBbGxvd3MgdGhlIFwiRXNjYXBlXCIga2V5IHRvIGNsb3NlIHRoZSBwaWNrZXJcbiAgICAgICAgICBjYXNlIF9rZXlib2FyZDIuZGVmYXVsdC5rZXlzLkVTQ0FQRTpcbiAgICAgICAgICAgIF90aGlzMi5lc2NhcGUoKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYnVpbGRMYWJlbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJ1aWxkTGFiZWwoKSB7XG4gICAgICB2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKCdxbC1waWNrZXItbGFiZWwnKTtcbiAgICAgIGxhYmVsLmlubmVySFRNTCA9IF9kcm9wZG93bjIuZGVmYXVsdDtcbiAgICAgIGxhYmVsLnRhYkluZGV4ID0gJzAnO1xuICAgICAgbGFiZWwuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpO1xuICAgICAgbGFiZWwuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgICByZXR1cm4gbGFiZWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYnVpbGRPcHRpb25zJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYnVpbGRPcHRpb25zKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgb3B0aW9ucy5jbGFzc0xpc3QuYWRkKCdxbC1waWNrZXItb3B0aW9ucycpO1xuXG4gICAgICAvLyBEb24ndCB3YW50IHNjcmVlbiByZWFkZXJzIHRvIHJlYWQgdGhpcyB1bnRpbCBvcHRpb25zIGFyZSB2aXNpYmxlXG4gICAgICBvcHRpb25zLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgb3B0aW9ucy50YWJJbmRleCA9ICctMSc7XG5cbiAgICAgIC8vIE5lZWQgYSB1bmlxdWUgaWQgZm9yIGFyaWEtY29udHJvbHNcbiAgICAgIG9wdGlvbnMuaWQgPSAncWwtcGlja2VyLW9wdGlvbnMtJyArIG9wdGlvbnNDb3VudGVyO1xuICAgICAgb3B0aW9uc0NvdW50ZXIgKz0gMTtcbiAgICAgIHRoaXMubGFiZWwuc2V0QXR0cmlidXRlKCdhcmlhLWNvbnRyb2xzJywgb3B0aW9ucy5pZCk7XG5cbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICAgIFtdLnNsaWNlLmNhbGwodGhpcy5zZWxlY3Qub3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgIHZhciBpdGVtID0gX3RoaXMzLmJ1aWxkSXRlbShvcHRpb24pO1xuICAgICAgICBvcHRpb25zLmFwcGVuZENoaWxkKGl0ZW0pO1xuICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgX3RoaXMzLnNlbGVjdEl0ZW0oaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQob3B0aW9ucyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYnVpbGRQaWNrZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZFBpY2tlcigpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICBbXS5zbGljZS5jYWxsKHRoaXMuc2VsZWN0LmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgX3RoaXM0LmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoaXRlbS5uYW1lLCBpdGVtLnZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncWwtcGlja2VyJyk7XG4gICAgICB0aGlzLmxhYmVsID0gdGhpcy5idWlsZExhYmVsKCk7XG4gICAgICB0aGlzLmJ1aWxkT3B0aW9ucygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VzY2FwZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVzY2FwZSgpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICAvLyBDbG9zZSBtZW51IGFuZCByZXR1cm4gZm9jdXMgdG8gdHJpZ2dlciBsYWJlbFxuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgLy8gTmVlZCBzZXRUaW1lb3V0IGZvciBhY2Nlc3NpYmlsaXR5IHRvIGVuc3VyZSB0aGF0IHRoZSBicm93c2VyIGV4ZWN1dGVzXG4gICAgICAvLyBmb2N1cyBvbiB0aGUgbmV4dCBwcm9jZXNzIHRocmVhZCBhbmQgYWZ0ZXIgYW55IERPTSBjb250ZW50IGNoYW5nZXNcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM1LmxhYmVsLmZvY3VzKCk7XG4gICAgICB9LCAxKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjbG9zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgncWwtZXhwYW5kZWQnKTtcbiAgICAgIHRoaXMubGFiZWwuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICB0aGlzLm9wdGlvbnMuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2VsZWN0SXRlbScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdEl0ZW0oaXRlbSkge1xuICAgICAgdmFyIHRyaWdnZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gICAgICB2YXIgc2VsZWN0ZWQgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcucWwtc2VsZWN0ZWQnKTtcbiAgICAgIGlmIChpdGVtID09PSBzZWxlY3RlZCkgcmV0dXJuO1xuICAgICAgaWYgKHNlbGVjdGVkICE9IG51bGwpIHtcbiAgICAgICAgc2VsZWN0ZWQuY2xhc3NMaXN0LnJlbW92ZSgncWwtc2VsZWN0ZWQnKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtID09IG51bGwpIHJldHVybjtcbiAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgncWwtc2VsZWN0ZWQnKTtcbiAgICAgIHRoaXMuc2VsZWN0LnNlbGVjdGVkSW5kZXggPSBbXS5pbmRleE9mLmNhbGwoaXRlbS5wYXJlbnROb2RlLmNoaWxkcmVuLCBpdGVtKTtcbiAgICAgIGlmIChpdGVtLmhhc0F0dHJpYnV0ZSgnZGF0YS12YWx1ZScpKSB7XG4gICAgICAgIHRoaXMubGFiZWwuc2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJywgaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxhYmVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW0uaGFzQXR0cmlidXRlKCdkYXRhLWxhYmVsJykpIHtcbiAgICAgICAgdGhpcy5sYWJlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbGFiZWwnLCBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1sYWJlbCcpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGFiZWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWxhYmVsJyk7XG4gICAgICB9XG4gICAgICBpZiAodHJpZ2dlcikge1xuICAgICAgICBpZiAodHlwZW9mIEV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3QuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKTtcbiAgICAgICAgfSBlbHNlIGlmICgodHlwZW9mIEV2ZW50ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihFdmVudCkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIC8vIElFMTFcbiAgICAgICAgICB2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgICAgICBldmVudC5pbml0RXZlbnQoJ2NoYW5nZScsIHRydWUsIHRydWUpO1xuICAgICAgICAgIHRoaXMuc2VsZWN0LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB2YXIgb3B0aW9uID0gdm9pZCAwO1xuICAgICAgaWYgKHRoaXMuc2VsZWN0LnNlbGVjdGVkSW5kZXggPiAtMSkge1xuICAgICAgICB2YXIgaXRlbSA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5xbC1waWNrZXItb3B0aW9ucycpLmNoaWxkcmVuW3RoaXMuc2VsZWN0LnNlbGVjdGVkSW5kZXhdO1xuICAgICAgICBvcHRpb24gPSB0aGlzLnNlbGVjdC5vcHRpb25zW3RoaXMuc2VsZWN0LnNlbGVjdGVkSW5kZXhdO1xuICAgICAgICB0aGlzLnNlbGVjdEl0ZW0oaXRlbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNlbGVjdEl0ZW0obnVsbCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNBY3RpdmUgPSBvcHRpb24gIT0gbnVsbCAmJiBvcHRpb24gIT09IHRoaXMuc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJ29wdGlvbltzZWxlY3RlZF0nKTtcbiAgICAgIHRoaXMubGFiZWwuY2xhc3NMaXN0LnRvZ2dsZSgncWwtYWN0aXZlJywgaXNBY3RpdmUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQaWNrZXI7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFBpY2tlcjtcblxuLyoqKi8gfSksXG4vKiAyOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbnZhciBfcXVpbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG52YXIgX3F1aWxsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1aWxsKTtcblxudmFyIF9ibG9jayA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfYmxvY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmxvY2spO1xuXG52YXIgX2JyZWFrID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbnZhciBfYnJlYWsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYnJlYWspO1xuXG52YXIgX2NvbnRhaW5lciA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xuXG52YXIgX2NvbnRhaW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb250YWluZXIpO1xuXG52YXIgX2N1cnNvciA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xuXG52YXIgX2N1cnNvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jdXJzb3IpO1xuXG52YXIgX2VtYmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSk7XG5cbnZhciBfZW1iZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZW1iZWQpO1xuXG52YXIgX2lubGluZSA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5saW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lubGluZSk7XG5cbnZhciBfc2Nyb2xsID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cbnZhciBfc2Nyb2xsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Njcm9sbCk7XG5cbnZhciBfdGV4dCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfdGV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90ZXh0KTtcblxudmFyIF9jbGlwYm9hcmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1KTtcblxudmFyIF9jbGlwYm9hcmQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xpcGJvYXJkKTtcblxudmFyIF9oaXN0b3J5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Mik7XG5cbnZhciBfaGlzdG9yeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oaXN0b3J5KTtcblxudmFyIF9rZXlib2FyZCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXG52YXIgX2tleWJvYXJkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleWJvYXJkKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuX3F1aWxsMi5kZWZhdWx0LnJlZ2lzdGVyKHtcbiAgJ2Jsb3RzL2Jsb2NrJzogX2Jsb2NrMi5kZWZhdWx0LFxuICAnYmxvdHMvYmxvY2svZW1iZWQnOiBfYmxvY2suQmxvY2tFbWJlZCxcbiAgJ2Jsb3RzL2JyZWFrJzogX2JyZWFrMi5kZWZhdWx0LFxuICAnYmxvdHMvY29udGFpbmVyJzogX2NvbnRhaW5lcjIuZGVmYXVsdCxcbiAgJ2Jsb3RzL2N1cnNvcic6IF9jdXJzb3IyLmRlZmF1bHQsXG4gICdibG90cy9lbWJlZCc6IF9lbWJlZDIuZGVmYXVsdCxcbiAgJ2Jsb3RzL2lubGluZSc6IF9pbmxpbmUyLmRlZmF1bHQsXG4gICdibG90cy9zY3JvbGwnOiBfc2Nyb2xsMi5kZWZhdWx0LFxuICAnYmxvdHMvdGV4dCc6IF90ZXh0Mi5kZWZhdWx0LFxuXG4gICdtb2R1bGVzL2NsaXBib2FyZCc6IF9jbGlwYm9hcmQyLmRlZmF1bHQsXG4gICdtb2R1bGVzL2hpc3RvcnknOiBfaGlzdG9yeTIuZGVmYXVsdCxcbiAgJ21vZHVsZXMva2V5Ym9hcmQnOiBfa2V5Ym9hcmQyLmRlZmF1bHRcbn0pO1xuXG5fcGFyY2htZW50Mi5kZWZhdWx0LnJlZ2lzdGVyKF9ibG9jazIuZGVmYXVsdCwgX2JyZWFrMi5kZWZhdWx0LCBfY3Vyc29yMi5kZWZhdWx0LCBfaW5saW5lMi5kZWZhdWx0LCBfc2Nyb2xsMi5kZWZhdWx0LCBfdGV4dDIuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9xdWlsbDIuZGVmYXVsdDtcblxuLyoqKi8gfSksXG4vKiAzMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBTaGFkb3dCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNoYWRvd0Jsb3QoZG9tTm9kZSkge1xuICAgICAgICB0aGlzLmRvbU5vZGUgPSBkb21Ob2RlO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0gPSB7IGJsb3Q6IHRoaXMgfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNoYWRvd0Jsb3QucHJvdG90eXBlLCBcInN0YXRpY3NcIiwge1xuICAgICAgICAvLyBIYWNrIGZvciBhY2Nlc3NpbmcgaW5oZXJpdGVkIHN0YXRpYyBtZXRob2RzXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFNoYWRvd0Jsb3QuY3JlYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnRhZ05hbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlZ2lzdHJ5LlBhcmNobWVudEVycm9yKCdCbG90IGRlZmluaXRpb24gbWlzc2luZyB0YWdOYW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5vZGU7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudGFnTmFtZSkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludCh2YWx1ZSkudG9TdHJpbmcoKSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnRhZ05hbWVbdmFsdWUgLSAxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnRhZ05hbWUuaW5kZXhPZih2YWx1ZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMudGFnTmFtZVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnRhZ05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgbm9kZS5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsID0gdGhpcy5wYXJlbnQuc2Nyb2xsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRvbU5vZGUgPSB0aGlzLmRvbU5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIFJlZ2lzdHJ5LmNyZWF0ZShkb21Ob2RlKTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmRldGFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICE9IG51bGwpXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBkZWxldGUgdGhpcy5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmRlbGV0ZUF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGJsb3QgPSB0aGlzLmlzb2xhdGUoaW5kZXgsIGxlbmd0aCk7XG4gICAgICAgIGJsb3QucmVtb3ZlKCk7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5mb3JtYXRBdCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgYmxvdCA9IHRoaXMuaXNvbGF0ZShpbmRleCwgbGVuZ3RoKTtcbiAgICAgICAgaWYgKFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkJMT1QpICE9IG51bGwgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIGJsb3Qud3JhcChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoUmVnaXN0cnkucXVlcnkobmFtZSwgUmVnaXN0cnkuU2NvcGUuQVRUUklCVVRFKSAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gUmVnaXN0cnkuY3JlYXRlKHRoaXMuc3RhdGljcy5zY29wZSk7XG4gICAgICAgICAgICBibG90LndyYXAocGFyZW50KTtcbiAgICAgICAgICAgIHBhcmVudC5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5pbnNlcnRBdCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUsIGRlZikge1xuICAgICAgICB2YXIgYmxvdCA9IGRlZiA9PSBudWxsID8gUmVnaXN0cnkuY3JlYXRlKCd0ZXh0JywgdmFsdWUpIDogUmVnaXN0cnkuY3JlYXRlKHZhbHVlLCBkZWYpO1xuICAgICAgICB2YXIgcmVmID0gdGhpcy5zcGxpdChpbmRleCk7XG4gICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShibG90LCByZWYpO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuaW5zZXJ0SW50byA9IGZ1bmN0aW9uIChwYXJlbnRCbG90LCByZWZCbG90KSB7XG4gICAgICAgIGlmIChyZWZCbG90ID09PSB2b2lkIDApIHsgcmVmQmxvdCA9IG51bGw7IH1cbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LmNoaWxkcmVuLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVmRG9tTm9kZSA9IG51bGw7XG4gICAgICAgIHBhcmVudEJsb3QuY2hpbGRyZW4uaW5zZXJ0QmVmb3JlKHRoaXMsIHJlZkJsb3QpO1xuICAgICAgICBpZiAocmVmQmxvdCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZWZEb21Ob2RlID0gcmVmQmxvdC5kb21Ob2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRvbU5vZGUucGFyZW50Tm9kZSAhPSBwYXJlbnRCbG90LmRvbU5vZGUgfHxcbiAgICAgICAgICAgIHRoaXMuZG9tTm9kZS5uZXh0U2libGluZyAhPSByZWZEb21Ob2RlKSB7XG4gICAgICAgICAgICBwYXJlbnRCbG90LmRvbU5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuZG9tTm9kZSwgcmVmRG9tTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRCbG90O1xuICAgICAgICB0aGlzLmF0dGFjaCgpO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuaXNvbGF0ZSA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLnNwbGl0KGluZGV4KTtcbiAgICAgICAgdGFyZ2V0LnNwbGl0KGxlbmd0aCk7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUub2Zmc2V0ID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgaWYgKHJvb3QgPT09IHZvaWQgMCkgeyByb290ID0gdGhpcy5wYXJlbnQ7IH1cbiAgICAgICAgaWYgKHRoaXMucGFyZW50ID09IG51bGwgfHwgdGhpcyA9PSByb290KVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5jaGlsZHJlbi5vZmZzZXQodGhpcykgKyB0aGlzLnBhcmVudC5vZmZzZXQocm9vdCk7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5vcHRpbWl6ZSA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIC8vIFRPRE8gY2xlYW4gdXAgb25jZSB3ZSB1c2UgV2Vha01hcFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICh0aGlzLmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucztcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5kb21Ob2RlLnBhcmVudE5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5kb21Ob2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5kb21Ob2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRldGFjaCgpO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRhcmdldC5wYXJlbnQgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGFyZ2V0LnBhcmVudC5pbnNlcnRCZWZvcmUodGhpcywgdGFyZ2V0Lm5leHQpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlKCk7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5yZXBsYWNlV2l0aCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgPyBSZWdpc3RyeS5jcmVhdGUobmFtZSwgdmFsdWUpIDogbmFtZTtcbiAgICAgICAgcmVwbGFjZW1lbnQucmVwbGFjZSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2VtZW50O1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiAoaW5kZXgsIGZvcmNlKSB7XG4gICAgICAgIHJldHVybiBpbmRleCA9PT0gMCA/IHRoaXMgOiB0aGlzLm5leHQ7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIC8vIE5vdGhpbmcgdG8gZG8gYnkgZGVmYXVsdFxuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyA/IFJlZ2lzdHJ5LmNyZWF0ZShuYW1lLCB2YWx1ZSkgOiBuYW1lO1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKHdyYXBwZXIsIHRoaXMubmV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LmJsb3ROYW1lID0gJ2Fic3RyYWN0JztcbiAgICByZXR1cm4gU2hhZG93QmxvdDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTaGFkb3dCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogMzEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBhdHRyaWJ1dG9yXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcbnZhciBjbGFzc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMik7XG52YXIgc3R5bGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBBdHRyaWJ1dG9yU3RvcmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXR0cmlidXRvclN0b3JlKGRvbU5vZGUpIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XG4gICAgICAgIHRoaXMuZG9tTm9kZSA9IGRvbU5vZGU7XG4gICAgICAgIHRoaXMuYnVpbGQoKTtcbiAgICB9XG4gICAgQXR0cmlidXRvclN0b3JlLnByb3RvdHlwZS5hdHRyaWJ1dGUgPSBmdW5jdGlvbiAoYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgICAgICAvLyB2ZXJiXG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS5hZGQodGhpcy5kb21Ob2RlLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLnZhbHVlKHRoaXMuZG9tTm9kZSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlLmF0dHJOYW1lXSA9IGF0dHJpYnV0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlLmF0dHJOYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGUucmVtb3ZlKHRoaXMuZG9tTm9kZSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5hdHRyTmFtZV07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEF0dHJpYnV0b3JTdG9yZS5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IGF0dHJpYnV0b3JfMS5kZWZhdWx0LmtleXModGhpcy5kb21Ob2RlKTtcbiAgICAgICAgdmFyIGNsYXNzZXMgPSBjbGFzc18xLmRlZmF1bHQua2V5cyh0aGlzLmRvbU5vZGUpO1xuICAgICAgICB2YXIgc3R5bGVzID0gc3R5bGVfMS5kZWZhdWx0LmtleXModGhpcy5kb21Ob2RlKTtcbiAgICAgICAgYXR0cmlidXRlc1xuICAgICAgICAgICAgLmNvbmNhdChjbGFzc2VzKVxuICAgICAgICAgICAgLmNvbmNhdChzdHlsZXMpXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgdmFyIGF0dHIgPSBSZWdpc3RyeS5xdWVyeShuYW1lLCBSZWdpc3RyeS5TY29wZS5BVFRSSUJVVEUpO1xuICAgICAgICAgICAgaWYgKGF0dHIgaW5zdGFuY2VvZiBhdHRyaWJ1dG9yXzEuZGVmYXVsdCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmF0dHJpYnV0ZXNbYXR0ci5hdHRyTmFtZV0gPSBhdHRyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEF0dHJpYnV0b3JTdG9yZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5hdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IF90aGlzLmF0dHJpYnV0ZXNba2V5XS52YWx1ZShfdGhpcy5kb21Ob2RlKTtcbiAgICAgICAgICAgIHRhcmdldC5mb3JtYXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQXR0cmlidXRvclN0b3JlLnByb3RvdHlwZS5tb3ZlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNvcHkodGFyZ2V0KTtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5hdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIF90aGlzLmF0dHJpYnV0ZXNba2V5XS5yZW1vdmUoX3RoaXMuZG9tTm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcbiAgICB9O1xuICAgIEF0dHJpYnV0b3JTdG9yZS5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5hdHRyaWJ1dGVzKS5yZWR1Y2UoZnVuY3Rpb24gKGF0dHJpYnV0ZXMsIG5hbWUpIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXNbbmFtZV0gPSBfdGhpcy5hdHRyaWJ1dGVzW25hbWVdLnZhbHVlKF90aGlzLmRvbU5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZXM7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9O1xuICAgIHJldHVybiBBdHRyaWJ1dG9yU3RvcmU7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQXR0cmlidXRvclN0b3JlO1xuXG5cbi8qKiovIH0pLFxuLyogMzIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGF0dHJpYnV0b3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuZnVuY3Rpb24gbWF0Y2gobm9kZSwgcHJlZml4KSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnO1xuICAgIHJldHVybiBjbGFzc05hbWUuc3BsaXQoL1xccysvKS5maWx0ZXIoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5hbWUuaW5kZXhPZihwcmVmaXggKyBcIi1cIikgPT09IDA7XG4gICAgfSk7XG59XG52YXIgQ2xhc3NBdHRyaWJ1dG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDbGFzc0F0dHJpYnV0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2xhc3NBdHRyaWJ1dG9yKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIENsYXNzQXR0cmlidXRvci5rZXlzID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIChub2RlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykuc3BsaXQoL1xccysvKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lXG4gICAgICAgICAgICAgICAgLnNwbGl0KCctJylcbiAgICAgICAgICAgICAgICAuc2xpY2UoMCwgLTEpXG4gICAgICAgICAgICAgICAgLmpvaW4oJy0nKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDbGFzc0F0dHJpYnV0b3IucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChub2RlLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuY2FuQWRkKG5vZGUsIHZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdGhpcy5yZW1vdmUobm9kZSk7XG4gICAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZCh0aGlzLmtleU5hbWUgKyBcIi1cIiArIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBDbGFzc0F0dHJpYnV0b3IucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gbWF0Y2gobm9kZSwgdGhpcy5rZXlOYW1lKTtcbiAgICAgICAgbWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICBub2RlLmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobm9kZS5jbGFzc0xpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ2xhc3NBdHRyaWJ1dG9yLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBtYXRjaChub2RlLCB0aGlzLmtleU5hbWUpWzBdIHx8ICcnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQuc2xpY2UodGhpcy5rZXlOYW1lLmxlbmd0aCArIDEpOyAvLyArMSBmb3IgaHlwaGVuXG4gICAgICAgIHJldHVybiB0aGlzLmNhbkFkZChub2RlLCB2YWx1ZSkgPyB2YWx1ZSA6ICcnO1xuICAgIH07XG4gICAgcmV0dXJuIENsYXNzQXR0cmlidXRvcjtcbn0oYXR0cmlidXRvcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IENsYXNzQXR0cmlidXRvcjtcblxuXG4vKioqLyB9KSxcbi8qIDMzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBhdHRyaWJ1dG9yXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcbmZ1bmN0aW9uIGNhbWVsaXplKG5hbWUpIHtcbiAgICB2YXIgcGFydHMgPSBuYW1lLnNwbGl0KCctJyk7XG4gICAgdmFyIHJlc3QgPSBwYXJ0c1xuICAgICAgICAuc2xpY2UoMSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAocGFydCkge1xuICAgICAgICByZXR1cm4gcGFydFswXS50b1VwcGVyQ2FzZSgpICsgcGFydC5zbGljZSgxKTtcbiAgICB9KVxuICAgICAgICAuam9pbignJyk7XG4gICAgcmV0dXJuIHBhcnRzWzBdICsgcmVzdDtcbn1cbnZhciBTdHlsZUF0dHJpYnV0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN0eWxlQXR0cmlidXRvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdHlsZUF0dHJpYnV0b3IoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgU3R5bGVBdHRyaWJ1dG9yLmtleXMgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gKG5vZGUuZ2V0QXR0cmlidXRlKCdzdHlsZScpIHx8ICcnKS5zcGxpdCgnOycpLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBhcnIgPSB2YWx1ZS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgcmV0dXJuIGFyclswXS50cmltKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3R5bGVBdHRyaWJ1dG9yLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAobm9kZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNhbkFkZChub2RlLCB2YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbm9kZS5zdHlsZVtjYW1lbGl6ZSh0aGlzLmtleU5hbWUpXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFN0eWxlQXR0cmlidXRvci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBub2RlLnN0eWxlW2NhbWVsaXplKHRoaXMua2V5TmFtZSldID0gJyc7XG4gICAgICAgIGlmICghbm9kZS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykpIHtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdHlsZUF0dHJpYnV0b3IucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB2YXIgdmFsdWUgPSBub2RlLnN0eWxlW2NhbWVsaXplKHRoaXMua2V5TmFtZSldO1xuICAgICAgICByZXR1cm4gdGhpcy5jYW5BZGQobm9kZSwgdmFsdWUpID8gdmFsdWUgOiAnJztcbiAgICB9O1xuICAgIHJldHVybiBTdHlsZUF0dHJpYnV0b3I7XG59KGF0dHJpYnV0b3JfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTdHlsZUF0dHJpYnV0b3I7XG5cblxuLyoqKi8gfSksXG4vKiAzNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgVGhlbWUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRoZW1lKHF1aWxsLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRoZW1lKTtcblxuICAgIHRoaXMucXVpbGwgPSBxdWlsbDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMubW9kdWxlcyA9IHt9O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRoZW1lLCBbe1xuICAgIGtleTogJ2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZHVsZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgaWYgKF90aGlzLm1vZHVsZXNbbmFtZV0gPT0gbnVsbCkge1xuICAgICAgICAgIF90aGlzLmFkZE1vZHVsZShuYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYWRkTW9kdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTW9kdWxlKG5hbWUpIHtcbiAgICAgIHZhciBtb2R1bGVDbGFzcyA9IHRoaXMucXVpbGwuY29uc3RydWN0b3IuaW1wb3J0KCdtb2R1bGVzLycgKyBuYW1lKTtcbiAgICAgIHRoaXMubW9kdWxlc1tuYW1lXSA9IG5ldyBtb2R1bGVDbGFzcyh0aGlzLnF1aWxsLCB0aGlzLm9wdGlvbnMubW9kdWxlc1tuYW1lXSB8fCB7fSk7XG4gICAgICByZXR1cm4gdGhpcy5tb2R1bGVzW25hbWVdO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUaGVtZTtcbn0oKTtcblxuVGhlbWUuREVGQVVMVFMgPSB7XG4gIG1vZHVsZXM6IHt9XG59O1xuVGhlbWUudGhlbWVzID0ge1xuICAnZGVmYXVsdCc6IFRoZW1lXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBUaGVtZTtcblxuLyoqKi8gfSksXG4vKiAzNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF90ZXh0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxudmFyIF90ZXh0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RleHQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBHVUFSRF9URVhUID0gJ1xcdUZFRkYnO1xuXG52YXIgRW1iZWQgPSBmdW5jdGlvbiAoX1BhcmNobWVudCRFbWJlZCkge1xuICBfaW5oZXJpdHMoRW1iZWQsIF9QYXJjaG1lbnQkRW1iZWQpO1xuXG4gIGZ1bmN0aW9uIEVtYmVkKG5vZGUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRW1iZWQpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEVtYmVkLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRW1iZWQpKS5jYWxsKHRoaXMsIG5vZGUpKTtcblxuICAgIF90aGlzLmNvbnRlbnROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIF90aGlzLmNvbnRlbnROb2RlLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgZmFsc2UpO1xuICAgIFtdLnNsaWNlLmNhbGwoX3RoaXMuZG9tTm9kZS5jaGlsZE5vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZE5vZGUpIHtcbiAgICAgIF90aGlzLmNvbnRlbnROb2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XG4gICAgfSk7XG4gICAgX3RoaXMubGVmdEd1YXJkID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoR1VBUkRfVEVYVCk7XG4gICAgX3RoaXMucmlnaHRHdWFyZCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKEdVQVJEX1RFWFQpO1xuICAgIF90aGlzLmRvbU5vZGUuYXBwZW5kQ2hpbGQoX3RoaXMubGVmdEd1YXJkKTtcbiAgICBfdGhpcy5kb21Ob2RlLmFwcGVuZENoaWxkKF90aGlzLmNvbnRlbnROb2RlKTtcbiAgICBfdGhpcy5kb21Ob2RlLmFwcGVuZENoaWxkKF90aGlzLnJpZ2h0R3VhcmQpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhFbWJlZCwgW3tcbiAgICBrZXk6ICdpbmRleCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluZGV4KG5vZGUsIG9mZnNldCkge1xuICAgICAgaWYgKG5vZGUgPT09IHRoaXMubGVmdEd1YXJkKSByZXR1cm4gMDtcbiAgICAgIGlmIChub2RlID09PSB0aGlzLnJpZ2h0R3VhcmQpIHJldHVybiAxO1xuICAgICAgcmV0dXJuIF9nZXQoRW1iZWQucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRW1iZWQucHJvdG90eXBlKSwgJ2luZGV4JywgdGhpcykuY2FsbCh0aGlzLCBub2RlLCBvZmZzZXQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Jlc3RvcmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN0b3JlKG5vZGUpIHtcbiAgICAgIHZhciByYW5nZSA9IHZvaWQgMCxcbiAgICAgICAgICB0ZXh0Tm9kZSA9IHZvaWQgMDtcbiAgICAgIHZhciB0ZXh0ID0gbm9kZS5kYXRhLnNwbGl0KEdVQVJEX1RFWFQpLmpvaW4oJycpO1xuICAgICAgaWYgKG5vZGUgPT09IHRoaXMubGVmdEd1YXJkKSB7XG4gICAgICAgIGlmICh0aGlzLnByZXYgaW5zdGFuY2VvZiBfdGV4dDIuZGVmYXVsdCkge1xuICAgICAgICAgIHZhciBwcmV2TGVuZ3RoID0gdGhpcy5wcmV2Lmxlbmd0aCgpO1xuICAgICAgICAgIHRoaXMucHJldi5pbnNlcnRBdChwcmV2TGVuZ3RoLCB0ZXh0KTtcbiAgICAgICAgICByYW5nZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0Tm9kZTogdGhpcy5wcmV2LmRvbU5vZGUsXG4gICAgICAgICAgICBzdGFydE9mZnNldDogcHJldkxlbmd0aCArIHRleHQubGVuZ3RoXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpO1xuICAgICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShfcGFyY2htZW50Mi5kZWZhdWx0LmNyZWF0ZSh0ZXh0Tm9kZSksIHRoaXMpO1xuICAgICAgICAgIHJhbmdlID0ge1xuICAgICAgICAgICAgc3RhcnROb2RlOiB0ZXh0Tm9kZSxcbiAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiB0ZXh0Lmxlbmd0aFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9kZSA9PT0gdGhpcy5yaWdodEd1YXJkKSB7XG4gICAgICAgIGlmICh0aGlzLm5leHQgaW5zdGFuY2VvZiBfdGV4dDIuZGVmYXVsdCkge1xuICAgICAgICAgIHRoaXMubmV4dC5pbnNlcnRBdCgwLCB0ZXh0KTtcbiAgICAgICAgICByYW5nZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0Tm9kZTogdGhpcy5uZXh0LmRvbU5vZGUsXG4gICAgICAgICAgICBzdGFydE9mZnNldDogdGV4dC5sZW5ndGhcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCk7XG4gICAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKF9wYXJjaG1lbnQyLmRlZmF1bHQuY3JlYXRlKHRleHROb2RlKSwgdGhpcy5uZXh0KTtcbiAgICAgICAgICByYW5nZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0Tm9kZTogdGV4dE5vZGUsXG4gICAgICAgICAgICBzdGFydE9mZnNldDogdGV4dC5sZW5ndGhcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBub2RlLmRhdGEgPSBHVUFSRF9URVhUO1xuICAgICAgcmV0dXJuIHJhbmdlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgICAgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdjaGFyYWN0ZXJEYXRhJyAmJiAobXV0YXRpb24udGFyZ2V0ID09PSBfdGhpczIubGVmdEd1YXJkIHx8IG11dGF0aW9uLnRhcmdldCA9PT0gX3RoaXMyLnJpZ2h0R3VhcmQpKSB7XG4gICAgICAgICAgdmFyIHJhbmdlID0gX3RoaXMyLnJlc3RvcmUobXV0YXRpb24udGFyZ2V0KTtcbiAgICAgICAgICBpZiAocmFuZ2UpIGNvbnRleHQucmFuZ2UgPSByYW5nZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEVtYmVkO1xufShfcGFyY2htZW50Mi5kZWZhdWx0LkVtYmVkKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRW1iZWQ7XG5cbi8qKiovIH0pLFxuLyogMzYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQWxpZ25TdHlsZSA9IGV4cG9ydHMuQWxpZ25DbGFzcyA9IGV4cG9ydHMuQWxpZ25BdHRyaWJ1dGUgPSB1bmRlZmluZWQ7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNvbmZpZyA9IHtcbiAgc2NvcGU6IF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuQkxPQ0ssXG4gIHdoaXRlbGlzdDogWydyaWdodCcsICdjZW50ZXInLCAnanVzdGlmeSddXG59O1xuXG52YXIgQWxpZ25BdHRyaWJ1dGUgPSBuZXcgX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLkF0dHJpYnV0ZSgnYWxpZ24nLCAnYWxpZ24nLCBjb25maWcpO1xudmFyIEFsaWduQ2xhc3MgPSBuZXcgX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLkNsYXNzKCdhbGlnbicsICdxbC1hbGlnbicsIGNvbmZpZyk7XG52YXIgQWxpZ25TdHlsZSA9IG5ldyBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuU3R5bGUoJ2FsaWduJywgJ3RleHQtYWxpZ24nLCBjb25maWcpO1xuXG5leHBvcnRzLkFsaWduQXR0cmlidXRlID0gQWxpZ25BdHRyaWJ1dGU7XG5leHBvcnRzLkFsaWduQ2xhc3MgPSBBbGlnbkNsYXNzO1xuZXhwb3J0cy5BbGlnblN0eWxlID0gQWxpZ25TdHlsZTtcblxuLyoqKi8gfSksXG4vKiAzNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5CYWNrZ3JvdW5kU3R5bGUgPSBleHBvcnRzLkJhY2tncm91bmRDbGFzcyA9IHVuZGVmaW5lZDtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX2NvbG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBCYWNrZ3JvdW5kQ2xhc3MgPSBuZXcgX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLkNsYXNzKCdiYWNrZ3JvdW5kJywgJ3FsLWJnJywge1xuICBzY29wZTogX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5JTkxJTkVcbn0pO1xudmFyIEJhY2tncm91bmRTdHlsZSA9IG5ldyBfY29sb3IuQ29sb3JBdHRyaWJ1dG9yKCdiYWNrZ3JvdW5kJywgJ2JhY2tncm91bmQtY29sb3InLCB7XG4gIHNjb3BlOiBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLklOTElORVxufSk7XG5cbmV4cG9ydHMuQmFja2dyb3VuZENsYXNzID0gQmFja2dyb3VuZENsYXNzO1xuZXhwb3J0cy5CYWNrZ3JvdW5kU3R5bGUgPSBCYWNrZ3JvdW5kU3R5bGU7XG5cbi8qKiovIH0pLFxuLyogMzggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRGlyZWN0aW9uU3R5bGUgPSBleHBvcnRzLkRpcmVjdGlvbkNsYXNzID0gZXhwb3J0cy5EaXJlY3Rpb25BdHRyaWJ1dGUgPSB1bmRlZmluZWQ7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNvbmZpZyA9IHtcbiAgc2NvcGU6IF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuQkxPQ0ssXG4gIHdoaXRlbGlzdDogWydydGwnXVxufTtcblxudmFyIERpcmVjdGlvbkF0dHJpYnV0ZSA9IG5ldyBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuQXR0cmlidXRlKCdkaXJlY3Rpb24nLCAnZGlyJywgY29uZmlnKTtcbnZhciBEaXJlY3Rpb25DbGFzcyA9IG5ldyBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuQ2xhc3MoJ2RpcmVjdGlvbicsICdxbC1kaXJlY3Rpb24nLCBjb25maWcpO1xudmFyIERpcmVjdGlvblN0eWxlID0gbmV3IF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5TdHlsZSgnZGlyZWN0aW9uJywgJ2RpcmVjdGlvbicsIGNvbmZpZyk7XG5cbmV4cG9ydHMuRGlyZWN0aW9uQXR0cmlidXRlID0gRGlyZWN0aW9uQXR0cmlidXRlO1xuZXhwb3J0cy5EaXJlY3Rpb25DbGFzcyA9IERpcmVjdGlvbkNsYXNzO1xuZXhwb3J0cy5EaXJlY3Rpb25TdHlsZSA9IERpcmVjdGlvblN0eWxlO1xuXG4vKioqLyB9KSxcbi8qIDM5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkZvbnRDbGFzcyA9IGV4cG9ydHMuRm9udFN0eWxlID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgY29uZmlnID0ge1xuICBzY29wZTogX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5JTkxJTkUsXG4gIHdoaXRlbGlzdDogWydzZXJpZicsICdtb25vc3BhY2UnXVxufTtcblxudmFyIEZvbnRDbGFzcyA9IG5ldyBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuQ2xhc3MoJ2ZvbnQnLCAncWwtZm9udCcsIGNvbmZpZyk7XG5cbnZhciBGb250U3R5bGVBdHRyaWJ1dG9yID0gZnVuY3Rpb24gKF9QYXJjaG1lbnQkQXR0cmlidXRvcikge1xuICBfaW5oZXJpdHMoRm9udFN0eWxlQXR0cmlidXRvciwgX1BhcmNobWVudCRBdHRyaWJ1dG9yKTtcblxuICBmdW5jdGlvbiBGb250U3R5bGVBdHRyaWJ1dG9yKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGb250U3R5bGVBdHRyaWJ1dG9yKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRm9udFN0eWxlQXR0cmlidXRvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZvbnRTdHlsZUF0dHJpYnV0b3IpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhGb250U3R5bGVBdHRyaWJ1dG9yLCBbe1xuICAgIGtleTogJ3ZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUobm9kZSkge1xuICAgICAgcmV0dXJuIF9nZXQoRm9udFN0eWxlQXR0cmlidXRvci5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihGb250U3R5bGVBdHRyaWJ1dG9yLnByb3RvdHlwZSksICd2YWx1ZScsIHRoaXMpLmNhbGwodGhpcywgbm9kZSkucmVwbGFjZSgvW1wiJ10vZywgJycpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBGb250U3R5bGVBdHRyaWJ1dG9yO1xufShfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuU3R5bGUpO1xuXG52YXIgRm9udFN0eWxlID0gbmV3IEZvbnRTdHlsZUF0dHJpYnV0b3IoJ2ZvbnQnLCAnZm9udC1mYW1pbHknLCBjb25maWcpO1xuXG5leHBvcnRzLkZvbnRTdHlsZSA9IEZvbnRTdHlsZTtcbmV4cG9ydHMuRm9udENsYXNzID0gRm9udENsYXNzO1xuXG4vKioqLyB9KSxcbi8qIDQwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNpemVTdHlsZSA9IGV4cG9ydHMuU2l6ZUNsYXNzID0gdW5kZWZpbmVkO1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBTaXplQ2xhc3MgPSBuZXcgX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLkNsYXNzKCdzaXplJywgJ3FsLXNpemUnLCB7XG4gIHNjb3BlOiBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLklOTElORSxcbiAgd2hpdGVsaXN0OiBbJ3NtYWxsJywgJ2xhcmdlJywgJ2h1Z2UnXVxufSk7XG52YXIgU2l6ZVN0eWxlID0gbmV3IF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5TdHlsZSgnc2l6ZScsICdmb250LXNpemUnLCB7XG4gIHNjb3BlOiBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLklOTElORSxcbiAgd2hpdGVsaXN0OiBbJzEwcHgnLCAnMThweCcsICczMnB4J11cbn0pO1xuXG5leHBvcnRzLlNpemVDbGFzcyA9IFNpemVDbGFzcztcbmV4cG9ydHMuU2l6ZVN0eWxlID0gU2l6ZVN0eWxlO1xuXG4vKioqLyB9KSxcbi8qIDQxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAnYWxpZ24nOiB7XG4gICAgJyc6IF9fd2VicGFja19yZXF1aXJlX18oNzYpLFxuICAgICdjZW50ZXInOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3KSxcbiAgICAncmlnaHQnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4KSxcbiAgICAnanVzdGlmeSc6IF9fd2VicGFja19yZXF1aXJlX18oNzkpXG4gIH0sXG4gICdiYWNrZ3JvdW5kJzogX193ZWJwYWNrX3JlcXVpcmVfXyg4MCksXG4gICdibG9ja3F1b3RlJzogX193ZWJwYWNrX3JlcXVpcmVfXyg4MSksXG4gICdib2xkJzogX193ZWJwYWNrX3JlcXVpcmVfXyg4MiksXG4gICdjbGVhbic6IF9fd2VicGFja19yZXF1aXJlX18oODMpLFxuICAnY29kZSc6IF9fd2VicGFja19yZXF1aXJlX18oNTgpLFxuICAnY29kZS1ibG9jayc6IF9fd2VicGFja19yZXF1aXJlX18oNTgpLFxuICAnY29sb3InOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0KSxcbiAgJ2RpcmVjdGlvbic6IHtcbiAgICAnJzogX193ZWJwYWNrX3JlcXVpcmVfXyg4NSksXG4gICAgJ3J0bCc6IF9fd2VicGFja19yZXF1aXJlX18oODYpXG4gIH0sXG4gICdmbG9hdCc6IHtcbiAgICAnY2VudGVyJzogX193ZWJwYWNrX3JlcXVpcmVfXyg4NyksXG4gICAgJ2Z1bGwnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDg4KSxcbiAgICAnbGVmdCc6IF9fd2VicGFja19yZXF1aXJlX18oODkpLFxuICAgICdyaWdodCc6IF9fd2VicGFja19yZXF1aXJlX18oOTApXG4gIH0sXG4gICdmb3JtdWxhJzogX193ZWJwYWNrX3JlcXVpcmVfXyg5MSksXG4gICdoZWFkZXInOiB7XG4gICAgJzEnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDkyKSxcbiAgICAnMic6IF9fd2VicGFja19yZXF1aXJlX18oOTMpXG4gIH0sXG4gICdpdGFsaWMnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDk0KSxcbiAgJ2ltYWdlJzogX193ZWJwYWNrX3JlcXVpcmVfXyg5NSksXG4gICdpbmRlbnQnOiB7XG4gICAgJysxJzogX193ZWJwYWNrX3JlcXVpcmVfXyg5NiksXG4gICAgJy0xJzogX193ZWJwYWNrX3JlcXVpcmVfXyg5NylcbiAgfSxcbiAgJ2xpbmsnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDk4KSxcbiAgJ2xpc3QnOiB7XG4gICAgJ29yZGVyZWQnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5KSxcbiAgICAnYnVsbGV0JzogX193ZWJwYWNrX3JlcXVpcmVfXygxMDApLFxuICAgICdjaGVjayc6IF9fd2VicGFja19yZXF1aXJlX18oMTAxKVxuICB9LFxuICAnc2NyaXB0Jzoge1xuICAgICdzdWInOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMiksXG4gICAgJ3N1cGVyJzogX193ZWJwYWNrX3JlcXVpcmVfXygxMDMpXG4gIH0sXG4gICdzdHJpa2UnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNCksXG4gICd1bmRlcmxpbmUnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNSksXG4gICd2aWRlbyc6IF9fd2VicGFja19yZXF1aXJlX18oMTA2KVxufTtcblxuLyoqKi8gfSksXG4vKiA0MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRMYXN0Q2hhbmdlSW5kZXggPSBleHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9xdWlsbCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfcXVpbGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGwpO1xuXG52YXIgX21vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfbW9kdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vZHVsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEhpc3RvcnkgPSBmdW5jdGlvbiAoX01vZHVsZSkge1xuICBfaW5oZXJpdHMoSGlzdG9yeSwgX01vZHVsZSk7XG5cbiAgZnVuY3Rpb24gSGlzdG9yeShxdWlsbCwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIaXN0b3J5KTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChIaXN0b3J5Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSGlzdG9yeSkpLmNhbGwodGhpcywgcXVpbGwsIG9wdGlvbnMpKTtcblxuICAgIF90aGlzLmxhc3RSZWNvcmRlZCA9IDA7XG4gICAgX3RoaXMuaWdub3JlQ2hhbmdlID0gZmFsc2U7XG4gICAgX3RoaXMuY2xlYXIoKTtcbiAgICBfdGhpcy5xdWlsbC5vbihfcXVpbGwyLmRlZmF1bHQuZXZlbnRzLkVESVRPUl9DSEFOR0UsIGZ1bmN0aW9uIChldmVudE5hbWUsIGRlbHRhLCBvbGREZWx0YSwgc291cmNlKSB7XG4gICAgICBpZiAoZXZlbnROYW1lICE9PSBfcXVpbGwyLmRlZmF1bHQuZXZlbnRzLlRFWFRfQ0hBTkdFIHx8IF90aGlzLmlnbm9yZUNoYW5nZSkgcmV0dXJuO1xuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnVzZXJPbmx5IHx8IHNvdXJjZSA9PT0gX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUikge1xuICAgICAgICBfdGhpcy5yZWNvcmQoZGVsdGEsIG9sZERlbHRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnRyYW5zZm9ybShkZWx0YSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX3RoaXMucXVpbGwua2V5Ym9hcmQuYWRkQmluZGluZyh7IGtleTogJ1onLCBzaG9ydEtleTogdHJ1ZSB9LCBfdGhpcy51bmRvLmJpbmQoX3RoaXMpKTtcbiAgICBfdGhpcy5xdWlsbC5rZXlib2FyZC5hZGRCaW5kaW5nKHsga2V5OiAnWicsIHNob3J0S2V5OiB0cnVlLCBzaGlmdEtleTogdHJ1ZSB9LCBfdGhpcy5yZWRvLmJpbmQoX3RoaXMpKTtcbiAgICBpZiAoL1dpbi9pLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSkge1xuICAgICAgX3RoaXMucXVpbGwua2V5Ym9hcmQuYWRkQmluZGluZyh7IGtleTogJ1knLCBzaG9ydEtleTogdHJ1ZSB9LCBfdGhpcy5yZWRvLmJpbmQoX3RoaXMpKTtcbiAgICB9XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEhpc3RvcnksIFt7XG4gICAga2V5OiAnY2hhbmdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlKHNvdXJjZSwgZGVzdCkge1xuICAgICAgaWYgKHRoaXMuc3RhY2tbc291cmNlXS5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIHZhciBkZWx0YSA9IHRoaXMuc3RhY2tbc291cmNlXS5wb3AoKTtcbiAgICAgIHRoaXMuc3RhY2tbZGVzdF0ucHVzaChkZWx0YSk7XG4gICAgICB0aGlzLmxhc3RSZWNvcmRlZCA9IDA7XG4gICAgICB0aGlzLmlnbm9yZUNoYW5nZSA9IHRydWU7XG4gICAgICB0aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKGRlbHRhW3NvdXJjZV0sIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgdGhpcy5pZ25vcmVDaGFuZ2UgPSBmYWxzZTtcbiAgICAgIHZhciBpbmRleCA9IGdldExhc3RDaGFuZ2VJbmRleChkZWx0YVtzb3VyY2VdKTtcbiAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKGluZGV4KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjbGVhcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpcy5zdGFjayA9IHsgdW5kbzogW10sIHJlZG86IFtdIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3V0b2ZmJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3V0b2ZmKCkge1xuICAgICAgdGhpcy5sYXN0UmVjb3JkZWQgPSAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlY29yZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlY29yZChjaGFuZ2VEZWx0YSwgb2xkRGVsdGEpIHtcbiAgICAgIGlmIChjaGFuZ2VEZWx0YS5vcHMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICB0aGlzLnN0YWNrLnJlZG8gPSBbXTtcbiAgICAgIHZhciB1bmRvRGVsdGEgPSB0aGlzLnF1aWxsLmdldENvbnRlbnRzKCkuZGlmZihvbGREZWx0YSk7XG4gICAgICB2YXIgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgIGlmICh0aGlzLmxhc3RSZWNvcmRlZCArIHRoaXMub3B0aW9ucy5kZWxheSA+IHRpbWVzdGFtcCAmJiB0aGlzLnN0YWNrLnVuZG8ubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgZGVsdGEgPSB0aGlzLnN0YWNrLnVuZG8ucG9wKCk7XG4gICAgICAgIHVuZG9EZWx0YSA9IHVuZG9EZWx0YS5jb21wb3NlKGRlbHRhLnVuZG8pO1xuICAgICAgICBjaGFuZ2VEZWx0YSA9IGRlbHRhLnJlZG8uY29tcG9zZShjaGFuZ2VEZWx0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxhc3RSZWNvcmRlZCA9IHRpbWVzdGFtcDtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhY2sudW5kby5wdXNoKHtcbiAgICAgICAgcmVkbzogY2hhbmdlRGVsdGEsXG4gICAgICAgIHVuZG86IHVuZG9EZWx0YVxuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5zdGFjay51bmRvLmxlbmd0aCA+IHRoaXMub3B0aW9ucy5tYXhTdGFjaykge1xuICAgICAgICB0aGlzLnN0YWNrLnVuZG8uc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZWRvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVkbygpIHtcbiAgICAgIHRoaXMuY2hhbmdlKCdyZWRvJywgJ3VuZG8nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0cmFuc2Zvcm0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFuc2Zvcm0oZGVsdGEpIHtcbiAgICAgIHRoaXMuc3RhY2sudW5kby5mb3JFYWNoKGZ1bmN0aW9uIChjaGFuZ2UpIHtcbiAgICAgICAgY2hhbmdlLnVuZG8gPSBkZWx0YS50cmFuc2Zvcm0oY2hhbmdlLnVuZG8sIHRydWUpO1xuICAgICAgICBjaGFuZ2UucmVkbyA9IGRlbHRhLnRyYW5zZm9ybShjaGFuZ2UucmVkbywgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc3RhY2sucmVkby5mb3JFYWNoKGZ1bmN0aW9uIChjaGFuZ2UpIHtcbiAgICAgICAgY2hhbmdlLnVuZG8gPSBkZWx0YS50cmFuc2Zvcm0oY2hhbmdlLnVuZG8sIHRydWUpO1xuICAgICAgICBjaGFuZ2UucmVkbyA9IGRlbHRhLnRyYW5zZm9ybShjaGFuZ2UucmVkbywgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1bmRvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5kbygpIHtcbiAgICAgIHRoaXMuY2hhbmdlKCd1bmRvJywgJ3JlZG8nKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSGlzdG9yeTtcbn0oX21vZHVsZTIuZGVmYXVsdCk7XG5cbkhpc3RvcnkuREVGQVVMVFMgPSB7XG4gIGRlbGF5OiAxMDAwLFxuICBtYXhTdGFjazogMTAwLFxuICB1c2VyT25seTogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIGVuZHNXaXRoTmV3bGluZUNoYW5nZShkZWx0YSkge1xuICB2YXIgbGFzdE9wID0gZGVsdGEub3BzW2RlbHRhLm9wcy5sZW5ndGggLSAxXTtcbiAgaWYgKGxhc3RPcCA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIGlmIChsYXN0T3AuaW5zZXJ0ICE9IG51bGwpIHtcbiAgICByZXR1cm4gdHlwZW9mIGxhc3RPcC5pbnNlcnQgPT09ICdzdHJpbmcnICYmIGxhc3RPcC5pbnNlcnQuZW5kc1dpdGgoJ1xcbicpO1xuICB9XG4gIGlmIChsYXN0T3AuYXR0cmlidXRlcyAhPSBudWxsKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGxhc3RPcC5hdHRyaWJ1dGVzKS5zb21lKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICByZXR1cm4gX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeShhdHRyLCBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLkJMT0NLKSAhPSBudWxsO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0TGFzdENoYW5nZUluZGV4KGRlbHRhKSB7XG4gIHZhciBkZWxldGVMZW5ndGggPSBkZWx0YS5yZWR1Y2UoZnVuY3Rpb24gKGxlbmd0aCwgb3ApIHtcbiAgICBsZW5ndGggKz0gb3AuZGVsZXRlIHx8IDA7XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfSwgMCk7XG4gIHZhciBjaGFuZ2VJbmRleCA9IGRlbHRhLmxlbmd0aCgpIC0gZGVsZXRlTGVuZ3RoO1xuICBpZiAoZW5kc1dpdGhOZXdsaW5lQ2hhbmdlKGRlbHRhKSkge1xuICAgIGNoYW5nZUluZGV4IC09IDE7XG4gIH1cbiAgcmV0dXJuIGNoYW5nZUluZGV4O1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBIaXN0b3J5O1xuZXhwb3J0cy5nZXRMYXN0Q2hhbmdlSW5kZXggPSBnZXRMYXN0Q2hhbmdlSW5kZXg7XG5cbi8qKiovIH0pLFxuLyogNDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuQmFzZVRvb2x0aXAgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9leHRlbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX2V4dGVuZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmQpO1xuXG52YXIgX3F1aWxsRGVsdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3F1aWxsRGVsdGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGxEZWx0YSk7XG5cbnZhciBfZW1pdHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfZW1pdHRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbWl0dGVyKTtcblxudmFyIF9rZXlib2FyZCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXG52YXIgX2tleWJvYXJkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleWJvYXJkKTtcblxudmFyIF90aGVtZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xuXG52YXIgX3RoZW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RoZW1lKTtcblxudmFyIF9jb2xvclBpY2tlciA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpO1xuXG52YXIgX2NvbG9yUGlja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbG9yUGlja2VyKTtcblxudmFyIF9pY29uUGlja2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MCk7XG5cbnZhciBfaWNvblBpY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pY29uUGlja2VyKTtcblxudmFyIF9waWNrZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTtcblxudmFyIF9waWNrZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGlja2VyKTtcblxudmFyIF90b29sdGlwID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MSk7XG5cbnZhciBfdG9vbHRpcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b29sdGlwKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQUxJR05TID0gW2ZhbHNlLCAnY2VudGVyJywgJ3JpZ2h0JywgJ2p1c3RpZnknXTtcblxudmFyIENPTE9SUyA9IFtcIiMwMDAwMDBcIiwgXCIjZTYwMDAwXCIsIFwiI2ZmOTkwMFwiLCBcIiNmZmZmMDBcIiwgXCIjMDA4YTAwXCIsIFwiIzAwNjZjY1wiLCBcIiM5OTMzZmZcIiwgXCIjZmZmZmZmXCIsIFwiI2ZhY2NjY1wiLCBcIiNmZmViY2NcIiwgXCIjZmZmZmNjXCIsIFwiI2NjZThjY1wiLCBcIiNjY2UwZjVcIiwgXCIjZWJkNmZmXCIsIFwiI2JiYmJiYlwiLCBcIiNmMDY2NjZcIiwgXCIjZmZjMjY2XCIsIFwiI2ZmZmY2NlwiLCBcIiM2NmI5NjZcIiwgXCIjNjZhM2UwXCIsIFwiI2MyODVmZlwiLCBcIiM4ODg4ODhcIiwgXCIjYTEwMDAwXCIsIFwiI2IyNmIwMFwiLCBcIiNiMmIyMDBcIiwgXCIjMDA2MTAwXCIsIFwiIzAwNDdiMlwiLCBcIiM2YjI0YjJcIiwgXCIjNDQ0NDQ0XCIsIFwiIzVjMDAwMFwiLCBcIiM2NjNkMDBcIiwgXCIjNjY2NjAwXCIsIFwiIzAwMzcwMFwiLCBcIiMwMDI5NjZcIiwgXCIjM2QxNDY2XCJdO1xuXG52YXIgRk9OVFMgPSBbZmFsc2UsICdzZXJpZicsICdtb25vc3BhY2UnXTtcblxudmFyIEhFQURFUlMgPSBbJzEnLCAnMicsICczJywgZmFsc2VdO1xuXG52YXIgU0laRVMgPSBbJ3NtYWxsJywgZmFsc2UsICdsYXJnZScsICdodWdlJ107XG5cbnZhciBCYXNlVGhlbWUgPSBmdW5jdGlvbiAoX1RoZW1lKSB7XG4gIF9pbmhlcml0cyhCYXNlVGhlbWUsIF9UaGVtZSk7XG5cbiAgZnVuY3Rpb24gQmFzZVRoZW1lKHF1aWxsLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2VUaGVtZSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQmFzZVRoZW1lLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmFzZVRoZW1lKSkuY2FsbCh0aGlzLCBxdWlsbCwgb3B0aW9ucykpO1xuXG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoZSkge1xuICAgICAgaWYgKCFkb2N1bWVudC5ib2R5LmNvbnRhaW5zKHF1aWxsLnJvb3QpKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLnRvb2x0aXAgIT0gbnVsbCAmJiAhX3RoaXMudG9vbHRpcC5yb290LmNvbnRhaW5zKGUudGFyZ2V0KSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBfdGhpcy50b29sdGlwLnRleHRib3ggJiYgIV90aGlzLnF1aWxsLmhhc0ZvY3VzKCkpIHtcbiAgICAgICAgX3RoaXMudG9vbHRpcC5oaWRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMucGlja2VycyAhPSBudWxsKSB7XG4gICAgICAgIF90aGlzLnBpY2tlcnMuZm9yRWFjaChmdW5jdGlvbiAocGlja2VyKSB7XG4gICAgICAgICAgaWYgKCFwaWNrZXIuY29udGFpbmVyLmNvbnRhaW5zKGUudGFyZ2V0KSkge1xuICAgICAgICAgICAgcGlja2VyLmNsb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHF1aWxsLmVtaXR0ZXIubGlzdGVuRE9NKCdjbGljaycsIGRvY3VtZW50LmJvZHksIGxpc3RlbmVyKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQmFzZVRoZW1lLCBbe1xuICAgIGtleTogJ2FkZE1vZHVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZE1vZHVsZShuYW1lKSB7XG4gICAgICB2YXIgbW9kdWxlID0gX2dldChCYXNlVGhlbWUucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmFzZVRoZW1lLnByb3RvdHlwZSksICdhZGRNb2R1bGUnLCB0aGlzKS5jYWxsKHRoaXMsIG5hbWUpO1xuICAgICAgaWYgKG5hbWUgPT09ICd0b29sYmFyJykge1xuICAgICAgICB0aGlzLmV4dGVuZFRvb2xiYXIobW9kdWxlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtb2R1bGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYnVpbGRCdXR0b25zJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYnVpbGRCdXR0b25zKGJ1dHRvbnMsIGljb25zKSB7XG4gICAgICBidXR0b25zLmZvckVhY2goZnVuY3Rpb24gKGJ1dHRvbikge1xuICAgICAgICB2YXIgY2xhc3NOYW1lID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJztcbiAgICAgICAgY2xhc3NOYW1lLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIGlmICghbmFtZS5zdGFydHNXaXRoKCdxbC0nKSkgcmV0dXJuO1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKCdxbC0nLmxlbmd0aCk7XG4gICAgICAgICAgaWYgKGljb25zW25hbWVdID09IG51bGwpIHJldHVybjtcbiAgICAgICAgICBpZiAobmFtZSA9PT0gJ2RpcmVjdGlvbicpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBpY29uc1tuYW1lXVsnJ10gKyBpY29uc1tuYW1lXVsncnRsJ107XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaWNvbnNbbmFtZV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gaWNvbnNbbmFtZV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGJ1dHRvbi52YWx1ZSB8fCAnJztcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIGljb25zW25hbWVdW3ZhbHVlXSkge1xuICAgICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gaWNvbnNbbmFtZV1bdmFsdWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdidWlsZFBpY2tlcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZFBpY2tlcnMoc2VsZWN0cywgaWNvbnMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLnBpY2tlcnMgPSBzZWxlY3RzLm1hcChmdW5jdGlvbiAoc2VsZWN0KSB7XG4gICAgICAgIGlmIChzZWxlY3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1hbGlnbicpKSB7XG4gICAgICAgICAgaWYgKHNlbGVjdC5xdWVyeVNlbGVjdG9yKCdvcHRpb24nKSA9PSBudWxsKSB7XG4gICAgICAgICAgICBmaWxsU2VsZWN0KHNlbGVjdCwgQUxJR05TKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5ldyBfaWNvblBpY2tlcjIuZGVmYXVsdChzZWxlY3QsIGljb25zLmFsaWduKTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1iYWNrZ3JvdW5kJykgfHwgc2VsZWN0LmNsYXNzTGlzdC5jb250YWlucygncWwtY29sb3InKSkge1xuICAgICAgICAgIHZhciBmb3JtYXQgPSBzZWxlY3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1iYWNrZ3JvdW5kJykgPyAnYmFja2dyb3VuZCcgOiAnY29sb3InO1xuICAgICAgICAgIGlmIChzZWxlY3QucXVlcnlTZWxlY3Rvcignb3B0aW9uJykgPT0gbnVsbCkge1xuICAgICAgICAgICAgZmlsbFNlbGVjdChzZWxlY3QsIENPTE9SUywgZm9ybWF0ID09PSAnYmFja2dyb3VuZCcgPyAnI2ZmZmZmZicgOiAnIzAwMDAwMCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IF9jb2xvclBpY2tlcjIuZGVmYXVsdChzZWxlY3QsIGljb25zW2Zvcm1hdF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzZWxlY3QucXVlcnlTZWxlY3Rvcignb3B0aW9uJykgPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHNlbGVjdC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWZvbnQnKSkge1xuICAgICAgICAgICAgICBmaWxsU2VsZWN0KHNlbGVjdCwgRk9OVFMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxlY3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1oZWFkZXInKSkge1xuICAgICAgICAgICAgICBmaWxsU2VsZWN0KHNlbGVjdCwgSEVBREVSUyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLXNpemUnKSkge1xuICAgICAgICAgICAgICBmaWxsU2VsZWN0KHNlbGVjdCwgU0laRVMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IF9waWNrZXIyLmRlZmF1bHQoc2VsZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB2YXIgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgICBfdGhpczIucGlja2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChwaWNrZXIpIHtcbiAgICAgICAgICBwaWNrZXIudXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIHRoaXMucXVpbGwub24oX2VtaXR0ZXIyLmRlZmF1bHQuZXZlbnRzLkVESVRPUl9DSEFOR0UsIHVwZGF0ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJhc2VUaGVtZTtcbn0oX3RoZW1lMi5kZWZhdWx0KTtcblxuQmFzZVRoZW1lLkRFRkFVTFRTID0gKDAsIF9leHRlbmQyLmRlZmF1bHQpKHRydWUsIHt9LCBfdGhlbWUyLmRlZmF1bHQuREVGQVVMVFMsIHtcbiAgbW9kdWxlczoge1xuICAgIHRvb2xiYXI6IHtcbiAgICAgIGhhbmRsZXJzOiB7XG4gICAgICAgIGZvcm11bGE6IGZ1bmN0aW9uIGZvcm11bGEoKSB7XG4gICAgICAgICAgdGhpcy5xdWlsbC50aGVtZS50b29sdGlwLmVkaXQoJ2Zvcm11bGEnKTtcbiAgICAgICAgfSxcbiAgICAgICAgaW1hZ2U6IGZ1bmN0aW9uIGltYWdlKCkge1xuICAgICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgICAgdmFyIGZpbGVJbnB1dCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0LnFsLWltYWdlW3R5cGU9ZmlsZV0nKTtcbiAgICAgICAgICBpZiAoZmlsZUlucHV0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGZpbGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICBmaWxlSW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2ZpbGUnKTtcbiAgICAgICAgICAgIGZpbGVJbnB1dC5zZXRBdHRyaWJ1dGUoJ2FjY2VwdCcsICdpbWFnZS9wbmcsIGltYWdlL2dpZiwgaW1hZ2UvanBlZywgaW1hZ2UvYm1wLCBpbWFnZS94LWljb24nKTtcbiAgICAgICAgICAgIGZpbGVJbnB1dC5jbGFzc0xpc3QuYWRkKCdxbC1pbWFnZScpO1xuICAgICAgICAgICAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKGZpbGVJbnB1dC5maWxlcyAhPSBudWxsICYmIGZpbGVJbnB1dC5maWxlc1swXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBfdGhpczMucXVpbGwuZ2V0U2VsZWN0aW9uKHRydWUpO1xuICAgICAgICAgICAgICAgICAgX3RoaXMzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihyYW5nZS5pbmRleCkuZGVsZXRlKHJhbmdlLmxlbmd0aCkuaW5zZXJ0KHsgaW1hZ2U6IGUudGFyZ2V0LnJlc3VsdCB9KSwgX2VtaXR0ZXIyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgICAgICAgICAgIF90aGlzMy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXggKyAxLCBfZW1pdHRlcjIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICAgICAgICAgICAgICBmaWxlSW5wdXQudmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZUlucHV0LmZpbGVzWzBdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChmaWxlSW5wdXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmaWxlSW5wdXQuY2xpY2soKTtcbiAgICAgICAgfSxcbiAgICAgICAgdmlkZW86IGZ1bmN0aW9uIHZpZGVvKCkge1xuICAgICAgICAgIHRoaXMucXVpbGwudGhlbWUudG9vbHRpcC5lZGl0KCd2aWRlbycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxudmFyIEJhc2VUb29sdGlwID0gZnVuY3Rpb24gKF9Ub29sdGlwKSB7XG4gIF9pbmhlcml0cyhCYXNlVG9vbHRpcCwgX1Rvb2x0aXApO1xuXG4gIGZ1bmN0aW9uIEJhc2VUb29sdGlwKHF1aWxsLCBib3VuZHNDb250YWluZXIpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzZVRvb2x0aXApO1xuXG4gICAgdmFyIF90aGlzNCA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCYXNlVG9vbHRpcC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJhc2VUb29sdGlwKSkuY2FsbCh0aGlzLCBxdWlsbCwgYm91bmRzQ29udGFpbmVyKSk7XG5cbiAgICBfdGhpczQudGV4dGJveCA9IF90aGlzNC5yb290LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9XCJ0ZXh0XCJdJyk7XG4gICAgX3RoaXM0Lmxpc3RlbigpO1xuICAgIHJldHVybiBfdGhpczQ7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQmFzZVRvb2x0aXAsIFt7XG4gICAga2V5OiAnbGlzdGVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdGVuKCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIHRoaXMudGV4dGJveC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChfa2V5Ym9hcmQyLmRlZmF1bHQubWF0Y2goZXZlbnQsICdlbnRlcicpKSB7XG4gICAgICAgICAgX3RoaXM1LnNhdmUoKTtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9IGVsc2UgaWYgKF9rZXlib2FyZDIuZGVmYXVsdC5tYXRjaChldmVudCwgJ2VzY2FwZScpKSB7XG4gICAgICAgICAgX3RoaXM1LmNhbmNlbCgpO1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NhbmNlbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VkaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlZGl0KCkge1xuICAgICAgdmFyIG1vZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdsaW5rJztcbiAgICAgIHZhciBwcmV2aWV3ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuXG4gICAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZSgncWwtaGlkZGVuJyk7XG4gICAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LmFkZCgncWwtZWRpdGluZycpO1xuICAgICAgaWYgKHByZXZpZXcgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnRleHRib3gudmFsdWUgPSBwcmV2aWV3O1xuICAgICAgfSBlbHNlIGlmIChtb2RlICE9PSB0aGlzLnJvb3QuZ2V0QXR0cmlidXRlKCdkYXRhLW1vZGUnKSkge1xuICAgICAgICB0aGlzLnRleHRib3gudmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICAgIHRoaXMucG9zaXRpb24odGhpcy5xdWlsbC5nZXRCb3VuZHModGhpcy5xdWlsbC5zZWxlY3Rpb24uc2F2ZWRSYW5nZSkpO1xuICAgICAgdGhpcy50ZXh0Ym94LnNlbGVjdCgpO1xuICAgICAgdGhpcy50ZXh0Ym94LnNldEF0dHJpYnV0ZSgncGxhY2Vob2xkZXInLCB0aGlzLnRleHRib3guZ2V0QXR0cmlidXRlKCdkYXRhLScgKyBtb2RlKSB8fCAnJyk7XG4gICAgICB0aGlzLnJvb3Quc2V0QXR0cmlidXRlKCdkYXRhLW1vZGUnLCBtb2RlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZXN0b3JlRm9jdXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN0b3JlRm9jdXMoKSB7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy5xdWlsbC5zY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsVG9wO1xuICAgICAgdGhpcy5xdWlsbC5mb2N1cygpO1xuICAgICAgdGhpcy5xdWlsbC5zY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NhdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlKCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy50ZXh0Ym94LnZhbHVlO1xuICAgICAgc3dpdGNoICh0aGlzLnJvb3QuZ2V0QXR0cmlidXRlKCdkYXRhLW1vZGUnKSkge1xuICAgICAgICBjYXNlICdsaW5rJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy5xdWlsbC5yb290LnNjcm9sbFRvcDtcbiAgICAgICAgICAgIGlmICh0aGlzLmxpbmtSYW5nZSkge1xuICAgICAgICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdFRleHQodGhpcy5saW5rUmFuZ2UsICdsaW5rJywgdmFsdWUsIF9lbWl0dGVyMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmxpbmtSYW5nZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMucmVzdG9yZUZvY3VzKCk7XG4gICAgICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdsaW5rJywgdmFsdWUsIF9lbWl0dGVyMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnF1aWxsLnJvb3Quc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICd2aWRlbyc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFsdWUgPSBleHRyYWN0VmlkZW9VcmwodmFsdWUpO1xuICAgICAgICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWZhbGx0aHJvdWdoXG4gICAgICAgIGNhc2UgJ2Zvcm11bGEnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmICghdmFsdWUpIGJyZWFrO1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24odHJ1ZSk7XG4gICAgICAgICAgICBpZiAocmFuZ2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgICB2YXIgaW5kZXggPSByYW5nZS5pbmRleCArIHJhbmdlLmxlbmd0aDtcbiAgICAgICAgICAgICAgdGhpcy5xdWlsbC5pbnNlcnRFbWJlZChpbmRleCwgdGhpcy5yb290LmdldEF0dHJpYnV0ZSgnZGF0YS1tb2RlJyksIHZhbHVlLCBfZW1pdHRlcjIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICAgICAgICBpZiAodGhpcy5yb290LmdldEF0dHJpYnV0ZSgnZGF0YS1tb2RlJykgPT09ICdmb3JtdWxhJykge1xuICAgICAgICAgICAgICAgIHRoaXMucXVpbGwuaW5zZXJ0VGV4dChpbmRleCArIDEsICcgJywgX2VtaXR0ZXIyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihpbmRleCArIDIsIF9lbWl0dGVyMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgICB0aGlzLnRleHRib3gudmFsdWUgPSAnJztcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCYXNlVG9vbHRpcDtcbn0oX3Rvb2x0aXAyLmRlZmF1bHQpO1xuXG5mdW5jdGlvbiBleHRyYWN0VmlkZW9VcmwodXJsKSB7XG4gIHZhciBtYXRjaCA9IHVybC5tYXRjaCgvXig/OihodHRwcz8pOlxcL1xcLyk/KD86KD86d3d3fG0pXFwuKT95b3V0dWJlXFwuY29tXFwvd2F0Y2guKnY9KFthLXpBLVowLTlfLV0rKS8pIHx8IHVybC5tYXRjaCgvXig/OihodHRwcz8pOlxcL1xcLyk/KD86KD86d3d3fG0pXFwuKT95b3V0dVxcLmJlXFwvKFthLXpBLVowLTlfLV0rKS8pO1xuICBpZiAobWF0Y2gpIHtcbiAgICByZXR1cm4gKG1hdGNoWzFdIHx8ICdodHRwcycpICsgJzovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8nICsgbWF0Y2hbMl0gKyAnP3Nob3dpbmZvPTAnO1xuICB9XG4gIGlmIChtYXRjaCA9IHVybC5tYXRjaCgvXig/OihodHRwcz8pOlxcL1xcLyk/KD86d3d3XFwuKT92aW1lb1xcLmNvbVxcLyhcXGQrKS8pKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25kLWFzc2lnblxuICAgIHJldHVybiAobWF0Y2hbMV0gfHwgJ2h0dHBzJykgKyAnOi8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8nICsgbWF0Y2hbMl0gKyAnLyc7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn1cblxuZnVuY3Rpb24gZmlsbFNlbGVjdChzZWxlY3QsIHZhbHVlcykge1xuICB2YXIgZGVmYXVsdFZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgaWYgKHZhbHVlID09PSBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgdmFsdWUpO1xuICAgIH1cbiAgICBzZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgfSk7XG59XG5cbmV4cG9ydHMuQmFzZVRvb2x0aXAgPSBCYXNlVG9vbHRpcDtcbmV4cG9ydHMuZGVmYXVsdCA9IEJhc2VUaGVtZTtcblxuLyoqKi8gfSksXG4vKiA0NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIExpbmtlZExpc3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGlua2VkTGlzdCgpIHtcbiAgICAgICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIH1cbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBub2RlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgbm9kZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluc2VydEJlZm9yZShub2Rlc1swXSwgbnVsbCk7XG4gICAgICAgIGlmIChub2Rlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZC5hcHBseSh0aGlzLCBub2Rlcy5zbGljZSgxKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIGN1ciwgbmV4dCA9IHRoaXMuaXRlcmF0b3IoKTtcbiAgICAgICAgd2hpbGUgKChjdXIgPSBuZXh0KCkpKSB7XG4gICAgICAgICAgICBpZiAoY3VyID09PSBub2RlKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIChub2RlLCByZWZOb2RlKSB7XG4gICAgICAgIGlmICghbm9kZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbm9kZS5uZXh0ID0gcmVmTm9kZTtcbiAgICAgICAgaWYgKHJlZk5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgbm9kZS5wcmV2ID0gcmVmTm9kZS5wcmV2O1xuICAgICAgICAgICAgaWYgKHJlZk5vZGUucHJldiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVmTm9kZS5wcmV2Lm5leHQgPSBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVmTm9kZS5wcmV2ID0gbm9kZTtcbiAgICAgICAgICAgIGlmIChyZWZOb2RlID09PSB0aGlzLmhlYWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWQgPSBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMudGFpbCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnRhaWwubmV4dCA9IG5vZGU7XG4gICAgICAgICAgICBub2RlLnByZXYgPSB0aGlzLnRhaWw7XG4gICAgICAgICAgICB0aGlzLnRhaWwgPSBub2RlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbm9kZS5wcmV2ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZW5ndGggKz0gMTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLm9mZnNldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMCwgY3VyID0gdGhpcy5oZWFkO1xuICAgICAgICB3aGlsZSAoY3VyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjdXIgPT09IHRhcmdldClcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCArPSBjdXIubGVuZ3RoKCk7XG4gICAgICAgICAgICBjdXIgPSBjdXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBpZiAoIXRoaXMuY29udGFpbnMobm9kZSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChub2RlLnByZXYgIT0gbnVsbClcbiAgICAgICAgICAgIG5vZGUucHJldi5uZXh0ID0gbm9kZS5uZXh0O1xuICAgICAgICBpZiAobm9kZS5uZXh0ICE9IG51bGwpXG4gICAgICAgICAgICBub2RlLm5leHQucHJldiA9IG5vZGUucHJldjtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMuaGVhZClcbiAgICAgICAgICAgIHRoaXMuaGVhZCA9IG5vZGUubmV4dDtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMudGFpbClcbiAgICAgICAgICAgIHRoaXMudGFpbCA9IG5vZGUucHJldjtcbiAgICAgICAgdGhpcy5sZW5ndGggLT0gMTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLml0ZXJhdG9yID0gZnVuY3Rpb24gKGN1ck5vZGUpIHtcbiAgICAgICAgaWYgKGN1ck5vZGUgPT09IHZvaWQgMCkgeyBjdXJOb2RlID0gdGhpcy5oZWFkOyB9XG4gICAgICAgIC8vIFRPRE8gdXNlIHlpZWxkIHdoZW4gd2UgY2FuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmV0ID0gY3VyTm9kZTtcbiAgICAgICAgICAgIGlmIChjdXJOb2RlICE9IG51bGwpXG4gICAgICAgICAgICAgICAgY3VyTm9kZSA9IGN1ck5vZGUubmV4dDtcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKGluZGV4LCBpbmNsdXNpdmUpIHtcbiAgICAgICAgaWYgKGluY2x1c2l2ZSA9PT0gdm9pZCAwKSB7IGluY2x1c2l2ZSA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBjdXIsIG5leHQgPSB0aGlzLml0ZXJhdG9yKCk7XG4gICAgICAgIHdoaWxlICgoY3VyID0gbmV4dCgpKSkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IGN1ci5sZW5ndGgoKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IGxlbmd0aCB8fFxuICAgICAgICAgICAgICAgIChpbmNsdXNpdmUgJiYgaW5kZXggPT09IGxlbmd0aCAmJiAoY3VyLm5leHQgPT0gbnVsbCB8fCBjdXIubmV4dC5sZW5ndGgoKSAhPT0gMCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtjdXIsIGluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluZGV4IC09IGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW251bGwsIDBdO1xuICAgIH07XG4gICAgTGlua2VkTGlzdC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgY3VyLCBuZXh0ID0gdGhpcy5pdGVyYXRvcigpO1xuICAgICAgICB3aGlsZSAoKGN1ciA9IG5leHQoKSkpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGN1cik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLmZvckVhY2hBdCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAobGVuZ3RoIDw9IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBfYSA9IHRoaXMuZmluZChpbmRleCksIHN0YXJ0Tm9kZSA9IF9hWzBdLCBvZmZzZXQgPSBfYVsxXTtcbiAgICAgICAgdmFyIGN1ciwgY3VySW5kZXggPSBpbmRleCAtIG9mZnNldCwgbmV4dCA9IHRoaXMuaXRlcmF0b3Ioc3RhcnROb2RlKTtcbiAgICAgICAgd2hpbGUgKChjdXIgPSBuZXh0KCkpICYmIGN1ckluZGV4IDwgaW5kZXggKyBsZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjdXJMZW5ndGggPSBjdXIubGVuZ3RoKCk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiBjdXJJbmRleCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGN1ciwgaW5kZXggLSBjdXJJbmRleCwgTWF0aC5taW4obGVuZ3RoLCBjdXJJbmRleCArIGN1ckxlbmd0aCAtIGluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhjdXIsIDAsIE1hdGgubWluKGN1ckxlbmd0aCwgaW5kZXggKyBsZW5ndGggLSBjdXJJbmRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VySW5kZXggKz0gY3VyTGVuZ3RoO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBjdXIpIHtcbiAgICAgICAgICAgIG1lbW8ucHVzaChjYWxsYmFjayhjdXIpKTtcbiAgICAgICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgICB9LCBbXSk7XG4gICAgfTtcbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5yZWR1Y2UgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIG1lbW8pIHtcbiAgICAgICAgdmFyIGN1ciwgbmV4dCA9IHRoaXMuaXRlcmF0b3IoKTtcbiAgICAgICAgd2hpbGUgKChjdXIgPSBuZXh0KCkpKSB7XG4gICAgICAgICAgICBtZW1vID0gY2FsbGJhY2sobWVtbywgY3VyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVtbztcbiAgICB9O1xuICAgIHJldHVybiBMaW5rZWRMaXN0O1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IExpbmtlZExpc3Q7XG5cblxuLyoqKi8gfSksXG4vKiA0NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY29udGFpbmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcbnZhciBSZWdpc3RyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgT0JTRVJWRVJfQ09ORklHID0ge1xuICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcbiAgICBjaGFyYWN0ZXJEYXRhT2xkVmFsdWU6IHRydWUsXG4gICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgIHN1YnRyZWU6IHRydWUsXG59O1xudmFyIE1BWF9PUFRJTUlaRV9JVEVSQVRJT05TID0gMTAwO1xudmFyIFNjcm9sbEJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNjcm9sbEJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2Nyb2xsQmxvdChub2RlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG5vZGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjcm9sbCA9IF90aGlzO1xuICAgICAgICBfdGhpcy5vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcbiAgICAgICAgICAgIF90aGlzLnVwZGF0ZShtdXRhdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMub2JzZXJ2ZXIub2JzZXJ2ZShfdGhpcy5kb21Ob2RlLCBPQlNFUlZFUl9DT05GSUcpO1xuICAgICAgICBfdGhpcy5hdHRhY2goKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTY3JvbGxCbG90LnByb3RvdHlwZS5kZXRhY2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGV0YWNoLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH07XG4gICAgU2Nyb2xsQmxvdC5wcm90b3R5cGUuZGVsZXRlQXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgbGVuZ3RoID09PSB0aGlzLmxlbmd0aCgpKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQucmVtb3ZlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVsZXRlQXQuY2FsbCh0aGlzLCBpbmRleCwgbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2Nyb2xsQmxvdC5wcm90b3R5cGUuZm9ybWF0QXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXRBdC5jYWxsKHRoaXMsIGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuICAgIFNjcm9sbEJsb3QucHJvdG90eXBlLmluc2VydEF0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5zZXJ0QXQuY2FsbCh0aGlzLCBpbmRleCwgdmFsdWUsIGRlZik7XG4gICAgfTtcbiAgICBTY3JvbGxCbG90LnByb3RvdHlwZS5vcHRpbWl6ZSA9IGZ1bmN0aW9uIChtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKG11dGF0aW9ucyA9PT0gdm9pZCAwKSB7IG11dGF0aW9ucyA9IFtdOyB9XG4gICAgICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHsgY29udGV4dCA9IHt9OyB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUub3B0aW1pemUuY2FsbCh0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgLy8gV2UgbXVzdCBtb2RpZnkgbXV0YXRpb25zIGRpcmVjdGx5LCBjYW5ub3QgbWFrZSBjb3B5IGFuZCB0aGVuIG1vZGlmeVxuICAgICAgICB2YXIgcmVjb3JkcyA9IFtdLnNsaWNlLmNhbGwodGhpcy5vYnNlcnZlci50YWtlUmVjb3JkcygpKTtcbiAgICAgICAgLy8gQXJyYXkucHVzaCBjdXJyZW50bHkgc2VlbXMgdG8gYmUgaW1wbGVtZW50ZWQgYnkgYSBub24tdGFpbCByZWN1cnNpdmUgZnVuY3Rpb25cbiAgICAgICAgLy8gc28gd2UgY2Fubm90IGp1c3QgbXV0YXRpb25zLnB1c2guYXBwbHkobXV0YXRpb25zLCB0aGlzLm9ic2VydmVyLnRha2VSZWNvcmRzKCkpO1xuICAgICAgICB3aGlsZSAocmVjb3Jkcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgbXV0YXRpb25zLnB1c2gocmVjb3Jkcy5wb3AoKSk7XG4gICAgICAgIC8vIFRPRE8gdXNlIFdlYWtNYXBcbiAgICAgICAgdmFyIG1hcmsgPSBmdW5jdGlvbiAoYmxvdCwgbWFya1BhcmVudCkge1xuICAgICAgICAgICAgaWYgKG1hcmtQYXJlbnQgPT09IHZvaWQgMCkgeyBtYXJrUGFyZW50ID0gdHJ1ZTsgfVxuICAgICAgICAgICAgaWYgKGJsb3QgPT0gbnVsbCB8fCBibG90ID09PSBfdGhpcylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAoYmxvdC5kb21Ob2RlLnBhcmVudE5vZGUgPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBpZiAoYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBibG90LmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hcmtQYXJlbnQpXG4gICAgICAgICAgICAgICAgbWFyayhibG90LnBhcmVudCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvcHRpbWl6ZSA9IGZ1bmN0aW9uIChibG90KSB7XG4gICAgICAgICAgICAvLyBQb3N0LW9yZGVyIHRyYXZlcnNhbFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXSA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmxvdCBpbnN0YW5jZW9mIGNvbnRhaW5lcl8xLmRlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICBibG90LmNoaWxkcmVuLmZvckVhY2gob3B0aW1pemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvdC5vcHRpbWl6ZShjb250ZXh0KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlbWFpbmluZyA9IG11dGF0aW9ucztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IHJlbWFpbmluZy5sZW5ndGggPiAwOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChpID49IE1BWF9PUFRJTUlaRV9JVEVSQVRJT05TKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbUGFyY2htZW50XSBNYXhpbXVtIG9wdGltaXplIGl0ZXJhdGlvbnMgcmVhY2hlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVtYWluaW5nLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJsb3QgPSBSZWdpc3RyeS5maW5kKG11dGF0aW9uLnRhcmdldCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGJsb3QgPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmIChibG90LmRvbU5vZGUgPT09IG11dGF0aW9uLnRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkTGlzdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmsoUmVnaXN0cnkuZmluZChtdXRhdGlvbi5wcmV2aW91c1NpYmxpbmcsIGZhbHNlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwobXV0YXRpb24uYWRkZWROb2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBSZWdpc3RyeS5maW5kKG5vZGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrKGNoaWxkLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgY29udGFpbmVyXzEuZGVmYXVsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChncmFuZENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrKGdyYW5kQ2hpbGQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2F0dHJpYnV0ZXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrKGJsb3QucHJldik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWFyayhibG90KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKG9wdGltaXplKTtcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IFtdLnNsaWNlLmNhbGwodGhpcy5vYnNlcnZlci50YWtlUmVjb3JkcygpKTtcbiAgICAgICAgICAgIHJlY29yZHMgPSByZW1haW5pbmcuc2xpY2UoKTtcbiAgICAgICAgICAgIHdoaWxlIChyZWNvcmRzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgbXV0YXRpb25zLnB1c2gocmVjb3Jkcy5wb3AoKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjcm9sbEJsb3QucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkgeyBjb250ZXh0ID0ge307IH1cbiAgICAgICAgbXV0YXRpb25zID0gbXV0YXRpb25zIHx8IHRoaXMub2JzZXJ2ZXIudGFrZVJlY29yZHMoKTtcbiAgICAgICAgLy8gVE9ETyB1c2UgV2Vha01hcFxuICAgICAgICBtdXRhdGlvbnNcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgICAgICB2YXIgYmxvdCA9IFJlZ2lzdHJ5LmZpbmQobXV0YXRpb24udGFyZ2V0LCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChibG90ID09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBpZiAoYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBibG90LmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucyA9IFttdXRhdGlvbl07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJsb3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMucHVzaChtdXRhdGlvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoYmxvdCkge1xuICAgICAgICAgICAgaWYgKGJsb3QgPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIGJsb3QgPT09IF90aGlzIHx8XG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXSA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGJsb3QudXBkYXRlKGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zIHx8IFtdLCBjb250ZXh0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKHRoaXMuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcywgdGhpcy5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW1pemUobXV0YXRpb25zLCBjb250ZXh0KTtcbiAgICB9O1xuICAgIFNjcm9sbEJsb3QuYmxvdE5hbWUgPSAnc2Nyb2xsJztcbiAgICBTY3JvbGxCbG90LmRlZmF1bHRDaGlsZCA9ICdibG9jayc7XG4gICAgU2Nyb2xsQmxvdC5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLkJMT0NLX0JMT1Q7XG4gICAgU2Nyb2xsQmxvdC50YWdOYW1lID0gJ0RJVic7XG4gICAgcmV0dXJuIFNjcm9sbEJsb3Q7XG59KGNvbnRhaW5lcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFNjcm9sbEJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiA0NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZm9ybWF0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcbnZhciBSZWdpc3RyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vLyBTaGFsbG93IG9iamVjdCBjb21wYXJpc29uXG5mdW5jdGlvbiBpc0VxdWFsKG9iajEsIG9iajIpIHtcbiAgICBpZiAoT2JqZWN0LmtleXMob2JqMSkubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhvYmoyKS5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZm9yICh2YXIgcHJvcCBpbiBvYmoxKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKG9iajFbcHJvcF0gIT09IG9iajJbcHJvcF0pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxudmFyIElubGluZUJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKElubGluZUJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW5saW5lQmxvdCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBJbmxpbmVCbG90LmZvcm1hdHMgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICBpZiAoZG9tTm9kZS50YWdOYW1lID09PSBJbmxpbmVCbG90LnRhZ05hbWUpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gX3N1cGVyLmZvcm1hdHMuY2FsbCh0aGlzLCBkb21Ob2RlKTtcbiAgICB9O1xuICAgIElubGluZUJsb3QucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAobmFtZSA9PT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lICYmICF2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgZm9ybWF0XzEuZGVmYXVsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC53cmFwKElubGluZUJsb3QuYmxvdE5hbWUsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5hdHRyaWJ1dGVzLmNvcHkoY2hpbGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnVud3JhcCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXQuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElubGluZUJsb3QucHJvdG90eXBlLmZvcm1hdEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmZvcm1hdHMoKVtuYW1lXSAhPSBudWxsIHx8IFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkFUVFJJQlVURSkpIHtcbiAgICAgICAgICAgIHZhciBibG90ID0gdGhpcy5pc29sYXRlKGluZGV4LCBsZW5ndGgpO1xuICAgICAgICAgICAgYmxvdC5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXRBdC5jYWxsKHRoaXMsIGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5saW5lQmxvdC5wcm90b3R5cGUub3B0aW1pemUgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm9wdGltaXplLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICAgIHZhciBmb3JtYXRzID0gdGhpcy5mb3JtYXRzKCk7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhmb3JtYXRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVud3JhcCgpOyAvLyB1bmZvcm1hdHRlZCBzcGFuXG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5leHQgPSB0aGlzLm5leHQ7XG4gICAgICAgIGlmIChuZXh0IGluc3RhbmNlb2YgSW5saW5lQmxvdCAmJiBuZXh0LnByZXYgPT09IHRoaXMgJiYgaXNFcXVhbChmb3JtYXRzLCBuZXh0LmZvcm1hdHMoKSkpIHtcbiAgICAgICAgICAgIG5leHQubW92ZUNoaWxkcmVuKHRoaXMpO1xuICAgICAgICAgICAgbmV4dC5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5saW5lQmxvdC5ibG90TmFtZSA9ICdpbmxpbmUnO1xuICAgIElubGluZUJsb3Quc2NvcGUgPSBSZWdpc3RyeS5TY29wZS5JTkxJTkVfQkxPVDtcbiAgICBJbmxpbmVCbG90LnRhZ05hbWUgPSAnU1BBTic7XG4gICAgcmV0dXJuIElubGluZUJsb3Q7XG59KGZvcm1hdF8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IElubGluZUJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiA0NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZm9ybWF0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcbnZhciBSZWdpc3RyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgQmxvY2tCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCbG9ja0Jsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQmxvY2tCbG90KCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEJsb2NrQmxvdC5mb3JtYXRzID0gZnVuY3Rpb24gKGRvbU5vZGUpIHtcbiAgICAgICAgdmFyIHRhZ05hbWUgPSBSZWdpc3RyeS5xdWVyeShCbG9ja0Jsb3QuYmxvdE5hbWUpLnRhZ05hbWU7XG4gICAgICAgIGlmIChkb21Ob2RlLnRhZ05hbWUgPT09IHRhZ05hbWUpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gX3N1cGVyLmZvcm1hdHMuY2FsbCh0aGlzLCBkb21Ob2RlKTtcbiAgICB9O1xuICAgIEJsb2NrQmxvdC5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmIChSZWdpc3RyeS5xdWVyeShuYW1lLCBSZWdpc3RyeS5TY29wZS5CTE9DSykgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5hbWUgPT09IHRoaXMuc3RhdGljcy5ibG90TmFtZSAmJiAhdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVdpdGgoQmxvY2tCbG90LmJsb3ROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZm9ybWF0LmNhbGwodGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCbG9ja0Jsb3QucHJvdG90eXBlLmZvcm1hdEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmIChSZWdpc3RyeS5xdWVyeShuYW1lLCBSZWdpc3RyeS5TY29wZS5CTE9DSykgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXRBdC5jYWxsKHRoaXMsIGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQmxvY2tCbG90LnByb3RvdHlwZS5pbnNlcnRBdCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUsIGRlZikge1xuICAgICAgICBpZiAoZGVmID09IG51bGwgfHwgUmVnaXN0cnkucXVlcnkodmFsdWUsIFJlZ2lzdHJ5LlNjb3BlLklOTElORSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gSW5zZXJ0IHRleHQgb3IgaW5saW5lXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluc2VydEF0LmNhbGwodGhpcywgaW5kZXgsIHZhbHVlLCBkZWYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGFmdGVyID0gdGhpcy5zcGxpdChpbmRleCk7XG4gICAgICAgICAgICB2YXIgYmxvdCA9IFJlZ2lzdHJ5LmNyZWF0ZSh2YWx1ZSwgZGVmKTtcbiAgICAgICAgICAgIGFmdGVyLnBhcmVudC5pbnNlcnRCZWZvcmUoYmxvdCwgYWZ0ZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCbG9ja0Jsb3QucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL1RyaWRlbnQvKSkge1xuICAgICAgICAgICAgdGhpcy5idWlsZCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51cGRhdGUuY2FsbCh0aGlzLCBtdXRhdGlvbnMsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCbG9ja0Jsb3QuYmxvdE5hbWUgPSAnYmxvY2snO1xuICAgIEJsb2NrQmxvdC5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLkJMT0NLX0JMT1Q7XG4gICAgQmxvY2tCbG90LnRhZ05hbWUgPSAnUCc7XG4gICAgcmV0dXJuIEJsb2NrQmxvdDtcbn0oZm9ybWF0XzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQmxvY2tCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogNDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGxlYWZfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xudmFyIEVtYmVkQmxvdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRW1iZWRCbG90LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVtYmVkQmxvdCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBFbWJlZEJsb3QuZm9ybWF0cyA9IGZ1bmN0aW9uIChkb21Ob2RlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBFbWJlZEJsb3QucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAvLyBzdXBlci5mb3JtYXRBdCB3cmFwcywgd2hpY2ggaXMgd2hhdCB3ZSB3YW50IGluIGdlbmVyYWwsXG4gICAgICAgIC8vIGJ1dCB0aGlzIGFsbG93cyBzdWJjbGFzc2VzIHRvIG92ZXJ3cml0ZSBmb3IgZm9ybWF0c1xuICAgICAgICAvLyB0aGF0IGp1c3QgYXBwbHkgdG8gcGFydGljdWxhciBlbWJlZHNcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXRBdC5jYWxsKHRoaXMsIDAsIHRoaXMubGVuZ3RoKCksIG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuICAgIEVtYmVkQmxvdC5wcm90b3R5cGUuZm9ybWF0QXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAwICYmIGxlbmd0aCA9PT0gdGhpcy5sZW5ndGgoKSkge1xuICAgICAgICAgICAgdGhpcy5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXRBdC5jYWxsKHRoaXMsIGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRW1iZWRCbG90LnByb3RvdHlwZS5mb3JtYXRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0aWNzLmZvcm1hdHModGhpcy5kb21Ob2RlKTtcbiAgICB9O1xuICAgIHJldHVybiBFbWJlZEJsb3Q7XG59KGxlYWZfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBFbWJlZEJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiA0OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbGVhZl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIFRleHRCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUZXh0QmxvdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUZXh0QmxvdChub2RlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG5vZGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnRleHQgPSBfdGhpcy5zdGF0aWNzLnZhbHVlKF90aGlzLmRvbU5vZGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRleHRCbG90LmNyZWF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodmFsdWUpO1xuICAgIH07XG4gICAgVGV4dEJsb3QudmFsdWUgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICB2YXIgdGV4dCA9IGRvbU5vZGUuZGF0YTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAodGV4dFsnbm9ybWFsaXplJ10pXG4gICAgICAgICAgICB0ZXh0ID0gdGV4dFsnbm9ybWFsaXplJ10oKTtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUuZGVsZXRlQXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICB0aGlzLmRvbU5vZGUuZGF0YSA9IHRoaXMudGV4dCA9IHRoaXMudGV4dC5zbGljZSgwLCBpbmRleCkgKyB0aGlzLnRleHQuc2xpY2UoaW5kZXggKyBsZW5ndGgpO1xuICAgIH07XG4gICAgVGV4dEJsb3QucHJvdG90eXBlLmluZGV4ID0gZnVuY3Rpb24gKG5vZGUsIG9mZnNldCkge1xuICAgICAgICBpZiAodGhpcy5kb21Ob2RlID09PSBub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS5pbnNlcnRBdCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUsIGRlZikge1xuICAgICAgICBpZiAoZGVmID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IHRoaXMudGV4dC5zbGljZSgwLCBpbmRleCkgKyB2YWx1ZSArIHRoaXMudGV4dC5zbGljZShpbmRleCk7XG4gICAgICAgICAgICB0aGlzLmRvbU5vZGUuZGF0YSA9IHRoaXMudGV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5zZXJ0QXQuY2FsbCh0aGlzLCBpbmRleCwgdmFsdWUsIGRlZik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQubGVuZ3RoO1xuICAgIH07XG4gICAgVGV4dEJsb3QucHJvdG90eXBlLm9wdGltaXplID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5vcHRpbWl6ZS5jYWxsKHRoaXMsIGNvbnRleHQpO1xuICAgICAgICB0aGlzLnRleHQgPSB0aGlzLnN0YXRpY3MudmFsdWUodGhpcy5kb21Ob2RlKTtcbiAgICAgICAgaWYgKHRoaXMudGV4dC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5uZXh0IGluc3RhbmNlb2YgVGV4dEJsb3QgJiYgdGhpcy5uZXh0LnByZXYgPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0QXQodGhpcy5sZW5ndGgoKSwgdGhpcy5uZXh0LnZhbHVlKCkpO1xuICAgICAgICAgICAgdGhpcy5uZXh0LnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUucG9zaXRpb24gPSBmdW5jdGlvbiAoaW5kZXgsIGluY2x1c2l2ZSkge1xuICAgICAgICBpZiAoaW5jbHVzaXZlID09PSB2b2lkIDApIHsgaW5jbHVzaXZlID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIFt0aGlzLmRvbU5vZGUsIGluZGV4XTtcbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIChpbmRleCwgZm9yY2UpIHtcbiAgICAgICAgaWYgKGZvcmNlID09PSB2b2lkIDApIHsgZm9yY2UgPSBmYWxzZTsgfVxuICAgICAgICBpZiAoIWZvcmNlKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMubGVuZ3RoKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWZ0ZXIgPSBSZWdpc3RyeS5jcmVhdGUodGhpcy5kb21Ob2RlLnNwbGl0VGV4dChpbmRleCkpO1xuICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUoYWZ0ZXIsIHRoaXMubmV4dCk7XG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMuc3RhdGljcy52YWx1ZSh0aGlzLmRvbU5vZGUpO1xuICAgICAgICByZXR1cm4gYWZ0ZXI7XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAobXV0YXRpb25zLnNvbWUoZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gbXV0YXRpb24udHlwZSA9PT0gJ2NoYXJhY3RlckRhdGEnICYmIG11dGF0aW9uLnRhcmdldCA9PT0gX3RoaXMuZG9tTm9kZTtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IHRoaXMuc3RhdGljcy52YWx1ZSh0aGlzLmRvbU5vZGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQ7XG4gICAgfTtcbiAgICBUZXh0QmxvdC5ibG90TmFtZSA9ICd0ZXh0JztcbiAgICBUZXh0QmxvdC5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLklOTElORV9CTE9UO1xuICAgIHJldHVybiBUZXh0QmxvdDtcbn0obGVhZl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFRleHRCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogNTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbmVsZW0uY2xhc3NMaXN0LnRvZ2dsZSgndGVzdC1jbGFzcycsIGZhbHNlKTtcbmlmIChlbGVtLmNsYXNzTGlzdC5jb250YWlucygndGVzdC1jbGFzcycpKSB7XG4gIHZhciBfdG9nZ2xlID0gRE9NVG9rZW5MaXN0LnByb3RvdHlwZS50b2dnbGU7XG4gIERPTVRva2VuTGlzdC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKHRva2VuLCBmb3JjZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiAhdGhpcy5jb250YWlucyh0b2tlbikgPT09ICFmb3JjZSkge1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gX3RvZ2dsZS5jYWxsKHRoaXMsIHRva2VuKTtcbiAgICB9XG4gIH07XG59XG5cbmlmICghU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKSB7XG4gIFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCA9IGZ1bmN0aW9uIChzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSB7XG4gICAgcG9zaXRpb24gPSBwb3NpdGlvbiB8fCAwO1xuICAgIHJldHVybiB0aGlzLnN1YnN0cihwb3NpdGlvbiwgc2VhcmNoU3RyaW5nLmxlbmd0aCkgPT09IHNlYXJjaFN0cmluZztcbiAgfTtcbn1cblxuaWYgKCFTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKSB7XG4gIFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGggPSBmdW5jdGlvbiAoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikge1xuICAgIHZhciBzdWJqZWN0U3RyaW5nID0gdGhpcy50b1N0cmluZygpO1xuICAgIGlmICh0eXBlb2YgcG9zaXRpb24gIT09ICdudW1iZXInIHx8ICFpc0Zpbml0ZShwb3NpdGlvbikgfHwgTWF0aC5mbG9vcihwb3NpdGlvbikgIT09IHBvc2l0aW9uIHx8IHBvc2l0aW9uID4gc3ViamVjdFN0cmluZy5sZW5ndGgpIHtcbiAgICAgIHBvc2l0aW9uID0gc3ViamVjdFN0cmluZy5sZW5ndGg7XG4gICAgfVxuICAgIHBvc2l0aW9uIC09IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gICAgdmFyIGxhc3RJbmRleCA9IHN1YmplY3RTdHJpbmcuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gbGFzdEluZGV4ICE9PSAtMSAmJiBsYXN0SW5kZXggPT09IHBvc2l0aW9uO1xuICB9O1xufVxuXG5pZiAoIUFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiZmluZFwiLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHByZWRpY2F0ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLmZpbmQgY2FsbGVkIG9uIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcmVkaWNhdGUgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgICB2YXIgbGlzdCA9IE9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aCA+Pj4gMDtcbiAgICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzFdO1xuICAgICAgdmFyIHZhbHVlO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gbGlzdFtpXTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpLCBsaXN0KSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0pO1xufVxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbiAoKSB7XG4gIC8vIERpc2FibGUgcmVzaXppbmcgaW4gRmlyZWZveFxuICBkb2N1bWVudC5leGVjQ29tbWFuZChcImVuYWJsZU9iamVjdFJlc2l6aW5nXCIsIGZhbHNlLCBmYWxzZSk7XG4gIC8vIERpc2FibGUgYXV0b21hdGljIGxpbmtpZnlpbmcgaW4gSUUxMVxuICBkb2N1bWVudC5leGVjQ29tbWFuZChcImF1dG9VcmxEZXRlY3RcIiwgZmFsc2UsIGZhbHNlKTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDUxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8qKlxuICogVGhpcyBsaWJyYXJ5IG1vZGlmaWVzIHRoZSBkaWZmLXBhdGNoLW1hdGNoIGxpYnJhcnkgYnkgTmVpbCBGcmFzZXJcbiAqIGJ5IHJlbW92aW5nIHRoZSBwYXRjaCBhbmQgbWF0Y2ggZnVuY3Rpb25hbGl0eSBhbmQgY2VydGFpbiBhZHZhbmNlZFxuICogb3B0aW9ucyBpbiB0aGUgZGlmZiBmdW5jdGlvbi4gVGhlIG9yaWdpbmFsIGxpY2Vuc2UgaXMgYXMgZm9sbG93czpcbiAqXG4gKiA9PT1cbiAqXG4gKiBEaWZmIE1hdGNoIGFuZCBQYXRjaFxuICpcbiAqIENvcHlyaWdodCAyMDA2IEdvb2dsZSBJbmMuXG4gKiBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvZ29vZ2xlLWRpZmYtbWF0Y2gtcGF0Y2gvXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbi8qKlxuICogVGhlIGRhdGEgc3RydWN0dXJlIHJlcHJlc2VudGluZyBhIGRpZmYgaXMgYW4gYXJyYXkgb2YgdHVwbGVzOlxuICogW1tESUZGX0RFTEVURSwgJ0hlbGxvJ10sIFtESUZGX0lOU0VSVCwgJ0dvb2RieWUnXSwgW0RJRkZfRVFVQUwsICcgd29ybGQuJ11dXG4gKiB3aGljaCBtZWFuczogZGVsZXRlICdIZWxsbycsIGFkZCAnR29vZGJ5ZScgYW5kIGtlZXAgJyB3b3JsZC4nXG4gKi9cbnZhciBESUZGX0RFTEVURSA9IC0xO1xudmFyIERJRkZfSU5TRVJUID0gMTtcbnZhciBESUZGX0VRVUFMID0gMDtcblxuXG4vKipcbiAqIEZpbmQgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gdHdvIHRleHRzLiAgU2ltcGxpZmllcyB0aGUgcHJvYmxlbSBieSBzdHJpcHBpbmdcbiAqIGFueSBjb21tb24gcHJlZml4IG9yIHN1ZmZpeCBvZmYgdGhlIHRleHRzIGJlZm9yZSBkaWZmaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIE9sZCBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIE5ldyBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHBhcmFtIHtJbnR9IGN1cnNvcl9wb3MgRXhwZWN0ZWQgZWRpdCBwb3NpdGlvbiBpbiB0ZXh0MSAob3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgZGlmZiB0dXBsZXMuXG4gKi9cbmZ1bmN0aW9uIGRpZmZfbWFpbih0ZXh0MSwgdGV4dDIsIGN1cnNvcl9wb3MpIHtcbiAgLy8gQ2hlY2sgZm9yIGVxdWFsaXR5IChzcGVlZHVwKS5cbiAgaWYgKHRleHQxID09IHRleHQyKSB7XG4gICAgaWYgKHRleHQxKSB7XG4gICAgICByZXR1cm4gW1tESUZGX0VRVUFMLCB0ZXh0MV1dO1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH1cblxuICAvLyBDaGVjayBjdXJzb3JfcG9zIHdpdGhpbiBib3VuZHNcbiAgaWYgKGN1cnNvcl9wb3MgPCAwIHx8IHRleHQxLmxlbmd0aCA8IGN1cnNvcl9wb3MpIHtcbiAgICBjdXJzb3JfcG9zID0gbnVsbDtcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGNvbW1vbiBwcmVmaXggKHNwZWVkdXApLlxuICB2YXIgY29tbW9ubGVuZ3RoID0gZGlmZl9jb21tb25QcmVmaXgodGV4dDEsIHRleHQyKTtcbiAgdmFyIGNvbW1vbnByZWZpeCA9IHRleHQxLnN1YnN0cmluZygwLCBjb21tb25sZW5ndGgpO1xuICB0ZXh0MSA9IHRleHQxLnN1YnN0cmluZyhjb21tb25sZW5ndGgpO1xuICB0ZXh0MiA9IHRleHQyLnN1YnN0cmluZyhjb21tb25sZW5ndGgpO1xuXG4gIC8vIFRyaW0gb2ZmIGNvbW1vbiBzdWZmaXggKHNwZWVkdXApLlxuICBjb21tb25sZW5ndGggPSBkaWZmX2NvbW1vblN1ZmZpeCh0ZXh0MSwgdGV4dDIpO1xuICB2YXIgY29tbW9uc3VmZml4ID0gdGV4dDEuc3Vic3RyaW5nKHRleHQxLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCk7XG4gIHRleHQxID0gdGV4dDEuc3Vic3RyaW5nKDAsIHRleHQxLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCk7XG4gIHRleHQyID0gdGV4dDIuc3Vic3RyaW5nKDAsIHRleHQyLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCk7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgZGlmZiBvbiB0aGUgbWlkZGxlIGJsb2NrLlxuICB2YXIgZGlmZnMgPSBkaWZmX2NvbXB1dGVfKHRleHQxLCB0ZXh0Mik7XG5cbiAgLy8gUmVzdG9yZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gIGlmIChjb21tb25wcmVmaXgpIHtcbiAgICBkaWZmcy51bnNoaWZ0KFtESUZGX0VRVUFMLCBjb21tb25wcmVmaXhdKTtcbiAgfVxuICBpZiAoY29tbW9uc3VmZml4KSB7XG4gICAgZGlmZnMucHVzaChbRElGRl9FUVVBTCwgY29tbW9uc3VmZml4XSk7XG4gIH1cbiAgZGlmZl9jbGVhbnVwTWVyZ2UoZGlmZnMpO1xuICBpZiAoY3Vyc29yX3BvcyAhPSBudWxsKSB7XG4gICAgZGlmZnMgPSBmaXhfY3Vyc29yKGRpZmZzLCBjdXJzb3JfcG9zKTtcbiAgfVxuICBkaWZmcyA9IGZpeF9lbW9qaShkaWZmcyk7XG4gIHJldHVybiBkaWZmcztcbn07XG5cblxuLyoqXG4gKiBGaW5kIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIHR3byB0ZXh0cy4gIEFzc3VtZXMgdGhhdCB0aGUgdGV4dHMgZG8gbm90XG4gKiBoYXZlIGFueSBjb21tb24gcHJlZml4IG9yIHN1ZmZpeC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MSBPbGQgc3RyaW5nIHRvIGJlIGRpZmZlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBOZXcgc3RyaW5nIHRvIGJlIGRpZmZlZC5cbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBkaWZmIHR1cGxlcy5cbiAqL1xuZnVuY3Rpb24gZGlmZl9jb21wdXRlXyh0ZXh0MSwgdGV4dDIpIHtcbiAgdmFyIGRpZmZzO1xuXG4gIGlmICghdGV4dDEpIHtcbiAgICAvLyBKdXN0IGFkZCBzb21lIHRleHQgKHNwZWVkdXApLlxuICAgIHJldHVybiBbW0RJRkZfSU5TRVJULCB0ZXh0Ml1dO1xuICB9XG5cbiAgaWYgKCF0ZXh0Mikge1xuICAgIC8vIEp1c3QgZGVsZXRlIHNvbWUgdGV4dCAoc3BlZWR1cCkuXG4gICAgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXV07XG4gIH1cblxuICB2YXIgbG9uZ3RleHQgPSB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyB0ZXh0MSA6IHRleHQyO1xuICB2YXIgc2hvcnR0ZXh0ID0gdGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoID8gdGV4dDIgOiB0ZXh0MTtcbiAgdmFyIGkgPSBsb25ndGV4dC5pbmRleE9mKHNob3J0dGV4dCk7XG4gIGlmIChpICE9IC0xKSB7XG4gICAgLy8gU2hvcnRlciB0ZXh0IGlzIGluc2lkZSB0aGUgbG9uZ2VyIHRleHQgKHNwZWVkdXApLlxuICAgIGRpZmZzID0gW1tESUZGX0lOU0VSVCwgbG9uZ3RleHQuc3Vic3RyaW5nKDAsIGkpXSxcbiAgICAgICAgICAgICBbRElGRl9FUVVBTCwgc2hvcnR0ZXh0XSxcbiAgICAgICAgICAgICBbRElGRl9JTlNFUlQsIGxvbmd0ZXh0LnN1YnN0cmluZyhpICsgc2hvcnR0ZXh0Lmxlbmd0aCldXTtcbiAgICAvLyBTd2FwIGluc2VydGlvbnMgZm9yIGRlbGV0aW9ucyBpZiBkaWZmIGlzIHJldmVyc2VkLlxuICAgIGlmICh0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGgpIHtcbiAgICAgIGRpZmZzWzBdWzBdID0gZGlmZnNbMl1bMF0gPSBESUZGX0RFTEVURTtcbiAgICB9XG4gICAgcmV0dXJuIGRpZmZzO1xuICB9XG5cbiAgaWYgKHNob3J0dGV4dC5sZW5ndGggPT0gMSkge1xuICAgIC8vIFNpbmdsZSBjaGFyYWN0ZXIgc3RyaW5nLlxuICAgIC8vIEFmdGVyIHRoZSBwcmV2aW91cyBzcGVlZHVwLCB0aGUgY2hhcmFjdGVyIGNhbid0IGJlIGFuIGVxdWFsaXR5LlxuICAgIHJldHVybiBbW0RJRkZfREVMRVRFLCB0ZXh0MV0sIFtESUZGX0lOU0VSVCwgdGV4dDJdXTtcbiAgfVxuXG4gIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgcHJvYmxlbSBjYW4gYmUgc3BsaXQgaW4gdHdvLlxuICB2YXIgaG0gPSBkaWZmX2hhbGZNYXRjaF8odGV4dDEsIHRleHQyKTtcbiAgaWYgKGhtKSB7XG4gICAgLy8gQSBoYWxmLW1hdGNoIHdhcyBmb3VuZCwgc29ydCBvdXQgdGhlIHJldHVybiBkYXRhLlxuICAgIHZhciB0ZXh0MV9hID0gaG1bMF07XG4gICAgdmFyIHRleHQxX2IgPSBobVsxXTtcbiAgICB2YXIgdGV4dDJfYSA9IGhtWzJdO1xuICAgIHZhciB0ZXh0Ml9iID0gaG1bM107XG4gICAgdmFyIG1pZF9jb21tb24gPSBobVs0XTtcbiAgICAvLyBTZW5kIGJvdGggcGFpcnMgb2ZmIGZvciBzZXBhcmF0ZSBwcm9jZXNzaW5nLlxuICAgIHZhciBkaWZmc19hID0gZGlmZl9tYWluKHRleHQxX2EsIHRleHQyX2EpO1xuICAgIHZhciBkaWZmc19iID0gZGlmZl9tYWluKHRleHQxX2IsIHRleHQyX2IpO1xuICAgIC8vIE1lcmdlIHRoZSByZXN1bHRzLlxuICAgIHJldHVybiBkaWZmc19hLmNvbmNhdChbW0RJRkZfRVFVQUwsIG1pZF9jb21tb25dXSwgZGlmZnNfYik7XG4gIH1cblxuICByZXR1cm4gZGlmZl9iaXNlY3RfKHRleHQxLCB0ZXh0Mik7XG59O1xuXG5cbi8qKlxuICogRmluZCB0aGUgJ21pZGRsZSBzbmFrZScgb2YgYSBkaWZmLCBzcGxpdCB0aGUgcHJvYmxlbSBpbiB0d29cbiAqIGFuZCByZXR1cm4gdGhlIHJlY3Vyc2l2ZWx5IGNvbnN0cnVjdGVkIGRpZmYuXG4gKiBTZWUgTXllcnMgMTk4NiBwYXBlcjogQW4gTyhORCkgRGlmZmVyZW5jZSBBbGdvcml0aG0gYW5kIEl0cyBWYXJpYXRpb25zLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIE9sZCBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIE5ldyBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZGlmZl9iaXNlY3RfKHRleHQxLCB0ZXh0Mikge1xuICAvLyBDYWNoZSB0aGUgdGV4dCBsZW5ndGhzIHRvIHByZXZlbnQgbXVsdGlwbGUgY2FsbHMuXG4gIHZhciB0ZXh0MV9sZW5ndGggPSB0ZXh0MS5sZW5ndGg7XG4gIHZhciB0ZXh0Ml9sZW5ndGggPSB0ZXh0Mi5sZW5ndGg7XG4gIHZhciBtYXhfZCA9IE1hdGguY2VpbCgodGV4dDFfbGVuZ3RoICsgdGV4dDJfbGVuZ3RoKSAvIDIpO1xuICB2YXIgdl9vZmZzZXQgPSBtYXhfZDtcbiAgdmFyIHZfbGVuZ3RoID0gMiAqIG1heF9kO1xuICB2YXIgdjEgPSBuZXcgQXJyYXkodl9sZW5ndGgpO1xuICB2YXIgdjIgPSBuZXcgQXJyYXkodl9sZW5ndGgpO1xuICAvLyBTZXR0aW5nIGFsbCBlbGVtZW50cyB0byAtMSBpcyBmYXN0ZXIgaW4gQ2hyb21lICYgRmlyZWZveCB0aGFuIG1peGluZ1xuICAvLyBpbnRlZ2VycyBhbmQgdW5kZWZpbmVkLlxuICBmb3IgKHZhciB4ID0gMDsgeCA8IHZfbGVuZ3RoOyB4KyspIHtcbiAgICB2MVt4XSA9IC0xO1xuICAgIHYyW3hdID0gLTE7XG4gIH1cbiAgdjFbdl9vZmZzZXQgKyAxXSA9IDA7XG4gIHYyW3Zfb2Zmc2V0ICsgMV0gPSAwO1xuICB2YXIgZGVsdGEgPSB0ZXh0MV9sZW5ndGggLSB0ZXh0Ml9sZW5ndGg7XG4gIC8vIElmIHRoZSB0b3RhbCBudW1iZXIgb2YgY2hhcmFjdGVycyBpcyBvZGQsIHRoZW4gdGhlIGZyb250IHBhdGggd2lsbCBjb2xsaWRlXG4gIC8vIHdpdGggdGhlIHJldmVyc2UgcGF0aC5cbiAgdmFyIGZyb250ID0gKGRlbHRhICUgMiAhPSAwKTtcbiAgLy8gT2Zmc2V0cyBmb3Igc3RhcnQgYW5kIGVuZCBvZiBrIGxvb3AuXG4gIC8vIFByZXZlbnRzIG1hcHBpbmcgb2Ygc3BhY2UgYmV5b25kIHRoZSBncmlkLlxuICB2YXIgazFzdGFydCA9IDA7XG4gIHZhciBrMWVuZCA9IDA7XG4gIHZhciBrMnN0YXJ0ID0gMDtcbiAgdmFyIGsyZW5kID0gMDtcbiAgZm9yICh2YXIgZCA9IDA7IGQgPCBtYXhfZDsgZCsrKSB7XG4gICAgLy8gV2FsayB0aGUgZnJvbnQgcGF0aCBvbmUgc3RlcC5cbiAgICBmb3IgKHZhciBrMSA9IC1kICsgazFzdGFydDsgazEgPD0gZCAtIGsxZW5kOyBrMSArPSAyKSB7XG4gICAgICB2YXIgazFfb2Zmc2V0ID0gdl9vZmZzZXQgKyBrMTtcbiAgICAgIHZhciB4MTtcbiAgICAgIGlmIChrMSA9PSAtZCB8fCAoazEgIT0gZCAmJiB2MVtrMV9vZmZzZXQgLSAxXSA8IHYxW2sxX29mZnNldCArIDFdKSkge1xuICAgICAgICB4MSA9IHYxW2sxX29mZnNldCArIDFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeDEgPSB2MVtrMV9vZmZzZXQgLSAxXSArIDE7XG4gICAgICB9XG4gICAgICB2YXIgeTEgPSB4MSAtIGsxO1xuICAgICAgd2hpbGUgKHgxIDwgdGV4dDFfbGVuZ3RoICYmIHkxIDwgdGV4dDJfbGVuZ3RoICYmXG4gICAgICAgICAgICAgdGV4dDEuY2hhckF0KHgxKSA9PSB0ZXh0Mi5jaGFyQXQoeTEpKSB7XG4gICAgICAgIHgxKys7XG4gICAgICAgIHkxKys7XG4gICAgICB9XG4gICAgICB2MVtrMV9vZmZzZXRdID0geDE7XG4gICAgICBpZiAoeDEgPiB0ZXh0MV9sZW5ndGgpIHtcbiAgICAgICAgLy8gUmFuIG9mZiB0aGUgcmlnaHQgb2YgdGhlIGdyYXBoLlxuICAgICAgICBrMWVuZCArPSAyO1xuICAgICAgfSBlbHNlIGlmICh5MSA+IHRleHQyX2xlbmd0aCkge1xuICAgICAgICAvLyBSYW4gb2ZmIHRoZSBib3R0b20gb2YgdGhlIGdyYXBoLlxuICAgICAgICBrMXN0YXJ0ICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKGZyb250KSB7XG4gICAgICAgIHZhciBrMl9vZmZzZXQgPSB2X29mZnNldCArIGRlbHRhIC0gazE7XG4gICAgICAgIGlmIChrMl9vZmZzZXQgPj0gMCAmJiBrMl9vZmZzZXQgPCB2X2xlbmd0aCAmJiB2MltrMl9vZmZzZXRdICE9IC0xKSB7XG4gICAgICAgICAgLy8gTWlycm9yIHgyIG9udG8gdG9wLWxlZnQgY29vcmRpbmF0ZSBzeXN0ZW0uXG4gICAgICAgICAgdmFyIHgyID0gdGV4dDFfbGVuZ3RoIC0gdjJbazJfb2Zmc2V0XTtcbiAgICAgICAgICBpZiAoeDEgPj0geDIpIHtcbiAgICAgICAgICAgIC8vIE92ZXJsYXAgZGV0ZWN0ZWQuXG4gICAgICAgICAgICByZXR1cm4gZGlmZl9iaXNlY3RTcGxpdF8odGV4dDEsIHRleHQyLCB4MSwgeTEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFdhbGsgdGhlIHJldmVyc2UgcGF0aCBvbmUgc3RlcC5cbiAgICBmb3IgKHZhciBrMiA9IC1kICsgazJzdGFydDsgazIgPD0gZCAtIGsyZW5kOyBrMiArPSAyKSB7XG4gICAgICB2YXIgazJfb2Zmc2V0ID0gdl9vZmZzZXQgKyBrMjtcbiAgICAgIHZhciB4MjtcbiAgICAgIGlmIChrMiA9PSAtZCB8fCAoazIgIT0gZCAmJiB2MltrMl9vZmZzZXQgLSAxXSA8IHYyW2syX29mZnNldCArIDFdKSkge1xuICAgICAgICB4MiA9IHYyW2syX29mZnNldCArIDFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeDIgPSB2MltrMl9vZmZzZXQgLSAxXSArIDE7XG4gICAgICB9XG4gICAgICB2YXIgeTIgPSB4MiAtIGsyO1xuICAgICAgd2hpbGUgKHgyIDwgdGV4dDFfbGVuZ3RoICYmIHkyIDwgdGV4dDJfbGVuZ3RoICYmXG4gICAgICAgICAgICAgdGV4dDEuY2hhckF0KHRleHQxX2xlbmd0aCAtIHgyIC0gMSkgPT1cbiAgICAgICAgICAgICB0ZXh0Mi5jaGFyQXQodGV4dDJfbGVuZ3RoIC0geTIgLSAxKSkge1xuICAgICAgICB4MisrO1xuICAgICAgICB5MisrO1xuICAgICAgfVxuICAgICAgdjJbazJfb2Zmc2V0XSA9IHgyO1xuICAgICAgaWYgKHgyID4gdGV4dDFfbGVuZ3RoKSB7XG4gICAgICAgIC8vIFJhbiBvZmYgdGhlIGxlZnQgb2YgdGhlIGdyYXBoLlxuICAgICAgICBrMmVuZCArPSAyO1xuICAgICAgfSBlbHNlIGlmICh5MiA+IHRleHQyX2xlbmd0aCkge1xuICAgICAgICAvLyBSYW4gb2ZmIHRoZSB0b3Agb2YgdGhlIGdyYXBoLlxuICAgICAgICBrMnN0YXJ0ICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKCFmcm9udCkge1xuICAgICAgICB2YXIgazFfb2Zmc2V0ID0gdl9vZmZzZXQgKyBkZWx0YSAtIGsyO1xuICAgICAgICBpZiAoazFfb2Zmc2V0ID49IDAgJiYgazFfb2Zmc2V0IDwgdl9sZW5ndGggJiYgdjFbazFfb2Zmc2V0XSAhPSAtMSkge1xuICAgICAgICAgIHZhciB4MSA9IHYxW2sxX29mZnNldF07XG4gICAgICAgICAgdmFyIHkxID0gdl9vZmZzZXQgKyB4MSAtIGsxX29mZnNldDtcbiAgICAgICAgICAvLyBNaXJyb3IgeDIgb250byB0b3AtbGVmdCBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgICAgICB4MiA9IHRleHQxX2xlbmd0aCAtIHgyO1xuICAgICAgICAgIGlmICh4MSA+PSB4Mikge1xuICAgICAgICAgICAgLy8gT3ZlcmxhcCBkZXRlY3RlZC5cbiAgICAgICAgICAgIHJldHVybiBkaWZmX2Jpc2VjdFNwbGl0Xyh0ZXh0MSwgdGV4dDIsIHgxLCB5MSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIERpZmYgdG9vayB0b28gbG9uZyBhbmQgaGl0IHRoZSBkZWFkbGluZSBvclxuICAvLyBudW1iZXIgb2YgZGlmZnMgZXF1YWxzIG51bWJlciBvZiBjaGFyYWN0ZXJzLCBubyBjb21tb25hbGl0eSBhdCBhbGwuXG4gIHJldHVybiBbW0RJRkZfREVMRVRFLCB0ZXh0MV0sIFtESUZGX0lOU0VSVCwgdGV4dDJdXTtcbn07XG5cblxuLyoqXG4gKiBHaXZlbiB0aGUgbG9jYXRpb24gb2YgdGhlICdtaWRkbGUgc25ha2UnLCBzcGxpdCB0aGUgZGlmZiBpbiB0d28gcGFydHNcbiAqIGFuZCByZWN1cnNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIE9sZCBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIE5ldyBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHBhcmFtIHtudW1iZXJ9IHggSW5kZXggb2Ygc3BsaXQgcG9pbnQgaW4gdGV4dDEuXG4gKiBAcGFyYW0ge251bWJlcn0geSBJbmRleCBvZiBzcGxpdCBwb2ludCBpbiB0ZXh0Mi5cbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBkaWZmIHR1cGxlcy5cbiAqL1xuZnVuY3Rpb24gZGlmZl9iaXNlY3RTcGxpdF8odGV4dDEsIHRleHQyLCB4LCB5KSB7XG4gIHZhciB0ZXh0MWEgPSB0ZXh0MS5zdWJzdHJpbmcoMCwgeCk7XG4gIHZhciB0ZXh0MmEgPSB0ZXh0Mi5zdWJzdHJpbmcoMCwgeSk7XG4gIHZhciB0ZXh0MWIgPSB0ZXh0MS5zdWJzdHJpbmcoeCk7XG4gIHZhciB0ZXh0MmIgPSB0ZXh0Mi5zdWJzdHJpbmcoeSk7XG5cbiAgLy8gQ29tcHV0ZSBib3RoIGRpZmZzIHNlcmlhbGx5LlxuICB2YXIgZGlmZnMgPSBkaWZmX21haW4odGV4dDFhLCB0ZXh0MmEpO1xuICB2YXIgZGlmZnNiID0gZGlmZl9tYWluKHRleHQxYiwgdGV4dDJiKTtcblxuICByZXR1cm4gZGlmZnMuY29uY2F0KGRpZmZzYik7XG59O1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIHRoZSBjb21tb24gcHJlZml4IG9mIHR3byBzdHJpbmdzLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIEZpcnN0IHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBTZWNvbmQgc3RyaW5nLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgY29tbW9uIHRvIHRoZSBzdGFydCBvZiBlYWNoXG4gKiAgICAgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBkaWZmX2NvbW1vblByZWZpeCh0ZXh0MSwgdGV4dDIpIHtcbiAgLy8gUXVpY2sgY2hlY2sgZm9yIGNvbW1vbiBudWxsIGNhc2VzLlxuICBpZiAoIXRleHQxIHx8ICF0ZXh0MiB8fCB0ZXh0MS5jaGFyQXQoMCkgIT0gdGV4dDIuY2hhckF0KDApKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgLy8gQmluYXJ5IHNlYXJjaC5cbiAgLy8gUGVyZm9ybWFuY2UgYW5hbHlzaXM6IGh0dHA6Ly9uZWlsLmZyYXNlci5uYW1lL25ld3MvMjAwNy8xMC8wOS9cbiAgdmFyIHBvaW50ZXJtaW4gPSAwO1xuICB2YXIgcG9pbnRlcm1heCA9IE1hdGgubWluKHRleHQxLmxlbmd0aCwgdGV4dDIubGVuZ3RoKTtcbiAgdmFyIHBvaW50ZXJtaWQgPSBwb2ludGVybWF4O1xuICB2YXIgcG9pbnRlcnN0YXJ0ID0gMDtcbiAgd2hpbGUgKHBvaW50ZXJtaW4gPCBwb2ludGVybWlkKSB7XG4gICAgaWYgKHRleHQxLnN1YnN0cmluZyhwb2ludGVyc3RhcnQsIHBvaW50ZXJtaWQpID09XG4gICAgICAgIHRleHQyLnN1YnN0cmluZyhwb2ludGVyc3RhcnQsIHBvaW50ZXJtaWQpKSB7XG4gICAgICBwb2ludGVybWluID0gcG9pbnRlcm1pZDtcbiAgICAgIHBvaW50ZXJzdGFydCA9IHBvaW50ZXJtaW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvaW50ZXJtYXggPSBwb2ludGVybWlkO1xuICAgIH1cbiAgICBwb2ludGVybWlkID0gTWF0aC5mbG9vcigocG9pbnRlcm1heCAtIHBvaW50ZXJtaW4pIC8gMiArIHBvaW50ZXJtaW4pO1xuICB9XG4gIHJldHVybiBwb2ludGVybWlkO1xufTtcblxuXG4vKipcbiAqIERldGVybWluZSB0aGUgY29tbW9uIHN1ZmZpeCBvZiB0d28gc3RyaW5ncy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MSBGaXJzdCBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgU2Vjb25kIHN0cmluZy5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGNvbW1vbiB0byB0aGUgZW5kIG9mIGVhY2ggc3RyaW5nLlxuICovXG5mdW5jdGlvbiBkaWZmX2NvbW1vblN1ZmZpeCh0ZXh0MSwgdGV4dDIpIHtcbiAgLy8gUXVpY2sgY2hlY2sgZm9yIGNvbW1vbiBudWxsIGNhc2VzLlxuICBpZiAoIXRleHQxIHx8ICF0ZXh0MiB8fFxuICAgICAgdGV4dDEuY2hhckF0KHRleHQxLmxlbmd0aCAtIDEpICE9IHRleHQyLmNoYXJBdCh0ZXh0Mi5sZW5ndGggLSAxKSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIC8vIEJpbmFyeSBzZWFyY2guXG4gIC8vIFBlcmZvcm1hbmNlIGFuYWx5c2lzOiBodHRwOi8vbmVpbC5mcmFzZXIubmFtZS9uZXdzLzIwMDcvMTAvMDkvXG4gIHZhciBwb2ludGVybWluID0gMDtcbiAgdmFyIHBvaW50ZXJtYXggPSBNYXRoLm1pbih0ZXh0MS5sZW5ndGgsIHRleHQyLmxlbmd0aCk7XG4gIHZhciBwb2ludGVybWlkID0gcG9pbnRlcm1heDtcbiAgdmFyIHBvaW50ZXJlbmQgPSAwO1xuICB3aGlsZSAocG9pbnRlcm1pbiA8IHBvaW50ZXJtaWQpIHtcbiAgICBpZiAodGV4dDEuc3Vic3RyaW5nKHRleHQxLmxlbmd0aCAtIHBvaW50ZXJtaWQsIHRleHQxLmxlbmd0aCAtIHBvaW50ZXJlbmQpID09XG4gICAgICAgIHRleHQyLnN1YnN0cmluZyh0ZXh0Mi5sZW5ndGggLSBwb2ludGVybWlkLCB0ZXh0Mi5sZW5ndGggLSBwb2ludGVyZW5kKSkge1xuICAgICAgcG9pbnRlcm1pbiA9IHBvaW50ZXJtaWQ7XG4gICAgICBwb2ludGVyZW5kID0gcG9pbnRlcm1pbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnRlcm1heCA9IHBvaW50ZXJtaWQ7XG4gICAgfVxuICAgIHBvaW50ZXJtaWQgPSBNYXRoLmZsb29yKChwb2ludGVybWF4IC0gcG9pbnRlcm1pbikgLyAyICsgcG9pbnRlcm1pbik7XG4gIH1cbiAgcmV0dXJuIHBvaW50ZXJtaWQ7XG59O1xuXG5cbi8qKlxuICogRG8gdGhlIHR3byB0ZXh0cyBzaGFyZSBhIHN1YnN0cmluZyB3aGljaCBpcyBhdCBsZWFzdCBoYWxmIHRoZSBsZW5ndGggb2YgdGhlXG4gKiBsb25nZXIgdGV4dD9cbiAqIFRoaXMgc3BlZWR1cCBjYW4gcHJvZHVjZSBub24tbWluaW1hbCBkaWZmcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MSBGaXJzdCBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgU2Vjb25kIHN0cmluZy5cbiAqIEByZXR1cm4ge0FycmF5LjxzdHJpbmc+fSBGaXZlIGVsZW1lbnQgQXJyYXksIGNvbnRhaW5pbmcgdGhlIHByZWZpeCBvZlxuICogICAgIHRleHQxLCB0aGUgc3VmZml4IG9mIHRleHQxLCB0aGUgcHJlZml4IG9mIHRleHQyLCB0aGUgc3VmZml4IG9mXG4gKiAgICAgdGV4dDIgYW5kIHRoZSBjb21tb24gbWlkZGxlLiAgT3IgbnVsbCBpZiB0aGVyZSB3YXMgbm8gbWF0Y2guXG4gKi9cbmZ1bmN0aW9uIGRpZmZfaGFsZk1hdGNoXyh0ZXh0MSwgdGV4dDIpIHtcbiAgdmFyIGxvbmd0ZXh0ID0gdGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoID8gdGV4dDEgOiB0ZXh0MjtcbiAgdmFyIHNob3J0dGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQyIDogdGV4dDE7XG4gIGlmIChsb25ndGV4dC5sZW5ndGggPCA0IHx8IHNob3J0dGV4dC5sZW5ndGggKiAyIDwgbG9uZ3RleHQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7ICAvLyBQb2ludGxlc3MuXG4gIH1cblxuICAvKipcbiAgICogRG9lcyBhIHN1YnN0cmluZyBvZiBzaG9ydHRleHQgZXhpc3Qgd2l0aGluIGxvbmd0ZXh0IHN1Y2ggdGhhdCB0aGUgc3Vic3RyaW5nXG4gICAqIGlzIGF0IGxlYXN0IGhhbGYgdGhlIGxlbmd0aCBvZiBsb25ndGV4dD9cbiAgICogQ2xvc3VyZSwgYnV0IGRvZXMgbm90IHJlZmVyZW5jZSBhbnkgZXh0ZXJuYWwgdmFyaWFibGVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9uZ3RleHQgTG9uZ2VyIHN0cmluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNob3J0dGV4dCBTaG9ydGVyIHN0cmluZy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGkgU3RhcnQgaW5kZXggb2YgcXVhcnRlciBsZW5ndGggc3Vic3RyaW5nIHdpdGhpbiBsb25ndGV4dC5cbiAgICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59IEZpdmUgZWxlbWVudCBBcnJheSwgY29udGFpbmluZyB0aGUgcHJlZml4IG9mXG4gICAqICAgICBsb25ndGV4dCwgdGhlIHN1ZmZpeCBvZiBsb25ndGV4dCwgdGhlIHByZWZpeCBvZiBzaG9ydHRleHQsIHRoZSBzdWZmaXhcbiAgICogICAgIG9mIHNob3J0dGV4dCBhbmQgdGhlIGNvbW1vbiBtaWRkbGUuICBPciBudWxsIGlmIHRoZXJlIHdhcyBubyBtYXRjaC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGRpZmZfaGFsZk1hdGNoSV8obG9uZ3RleHQsIHNob3J0dGV4dCwgaSkge1xuICAgIC8vIFN0YXJ0IHdpdGggYSAxLzQgbGVuZ3RoIHN1YnN0cmluZyBhdCBwb3NpdGlvbiBpIGFzIGEgc2VlZC5cbiAgICB2YXIgc2VlZCA9IGxvbmd0ZXh0LnN1YnN0cmluZyhpLCBpICsgTWF0aC5mbG9vcihsb25ndGV4dC5sZW5ndGggLyA0KSk7XG4gICAgdmFyIGogPSAtMTtcbiAgICB2YXIgYmVzdF9jb21tb24gPSAnJztcbiAgICB2YXIgYmVzdF9sb25ndGV4dF9hLCBiZXN0X2xvbmd0ZXh0X2IsIGJlc3Rfc2hvcnR0ZXh0X2EsIGJlc3Rfc2hvcnR0ZXh0X2I7XG4gICAgd2hpbGUgKChqID0gc2hvcnR0ZXh0LmluZGV4T2Yoc2VlZCwgaiArIDEpKSAhPSAtMSkge1xuICAgICAgdmFyIHByZWZpeExlbmd0aCA9IGRpZmZfY29tbW9uUHJlZml4KGxvbmd0ZXh0LnN1YnN0cmluZyhpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9ydHRleHQuc3Vic3RyaW5nKGopKTtcbiAgICAgIHZhciBzdWZmaXhMZW5ndGggPSBkaWZmX2NvbW1vblN1ZmZpeChsb25ndGV4dC5zdWJzdHJpbmcoMCwgaSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvcnR0ZXh0LnN1YnN0cmluZygwLCBqKSk7XG4gICAgICBpZiAoYmVzdF9jb21tb24ubGVuZ3RoIDwgc3VmZml4TGVuZ3RoICsgcHJlZml4TGVuZ3RoKSB7XG4gICAgICAgIGJlc3RfY29tbW9uID0gc2hvcnR0ZXh0LnN1YnN0cmluZyhqIC0gc3VmZml4TGVuZ3RoLCBqKSArXG4gICAgICAgICAgICBzaG9ydHRleHQuc3Vic3RyaW5nKGosIGogKyBwcmVmaXhMZW5ndGgpO1xuICAgICAgICBiZXN0X2xvbmd0ZXh0X2EgPSBsb25ndGV4dC5zdWJzdHJpbmcoMCwgaSAtIHN1ZmZpeExlbmd0aCk7XG4gICAgICAgIGJlc3RfbG9uZ3RleHRfYiA9IGxvbmd0ZXh0LnN1YnN0cmluZyhpICsgcHJlZml4TGVuZ3RoKTtcbiAgICAgICAgYmVzdF9zaG9ydHRleHRfYSA9IHNob3J0dGV4dC5zdWJzdHJpbmcoMCwgaiAtIHN1ZmZpeExlbmd0aCk7XG4gICAgICAgIGJlc3Rfc2hvcnR0ZXh0X2IgPSBzaG9ydHRleHQuc3Vic3RyaW5nKGogKyBwcmVmaXhMZW5ndGgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYmVzdF9jb21tb24ubGVuZ3RoICogMiA+PSBsb25ndGV4dC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBbYmVzdF9sb25ndGV4dF9hLCBiZXN0X2xvbmd0ZXh0X2IsXG4gICAgICAgICAgICAgIGJlc3Rfc2hvcnR0ZXh0X2EsIGJlc3Rfc2hvcnR0ZXh0X2IsIGJlc3RfY29tbW9uXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLy8gRmlyc3QgY2hlY2sgaWYgdGhlIHNlY29uZCBxdWFydGVyIGlzIHRoZSBzZWVkIGZvciBhIGhhbGYtbWF0Y2guXG4gIHZhciBobTEgPSBkaWZmX2hhbGZNYXRjaElfKGxvbmd0ZXh0LCBzaG9ydHRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguY2VpbChsb25ndGV4dC5sZW5ndGggLyA0KSk7XG4gIC8vIENoZWNrIGFnYWluIGJhc2VkIG9uIHRoZSB0aGlyZCBxdWFydGVyLlxuICB2YXIgaG0yID0gZGlmZl9oYWxmTWF0Y2hJXyhsb25ndGV4dCwgc2hvcnR0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmNlaWwobG9uZ3RleHQubGVuZ3RoIC8gMikpO1xuICB2YXIgaG07XG4gIGlmICghaG0xICYmICFobTIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIGlmICghaG0yKSB7XG4gICAgaG0gPSBobTE7XG4gIH0gZWxzZSBpZiAoIWhtMSkge1xuICAgIGhtID0gaG0yO1xuICB9IGVsc2Uge1xuICAgIC8vIEJvdGggbWF0Y2hlZC4gIFNlbGVjdCB0aGUgbG9uZ2VzdC5cbiAgICBobSA9IGhtMVs0XS5sZW5ndGggPiBobTJbNF0ubGVuZ3RoID8gaG0xIDogaG0yO1xuICB9XG5cbiAgLy8gQSBoYWxmLW1hdGNoIHdhcyBmb3VuZCwgc29ydCBvdXQgdGhlIHJldHVybiBkYXRhLlxuICB2YXIgdGV4dDFfYSwgdGV4dDFfYiwgdGV4dDJfYSwgdGV4dDJfYjtcbiAgaWYgKHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCkge1xuICAgIHRleHQxX2EgPSBobVswXTtcbiAgICB0ZXh0MV9iID0gaG1bMV07XG4gICAgdGV4dDJfYSA9IGhtWzJdO1xuICAgIHRleHQyX2IgPSBobVszXTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0Ml9hID0gaG1bMF07XG4gICAgdGV4dDJfYiA9IGhtWzFdO1xuICAgIHRleHQxX2EgPSBobVsyXTtcbiAgICB0ZXh0MV9iID0gaG1bM107XG4gIH1cbiAgdmFyIG1pZF9jb21tb24gPSBobVs0XTtcbiAgcmV0dXJuIFt0ZXh0MV9hLCB0ZXh0MV9iLCB0ZXh0Ml9hLCB0ZXh0Ml9iLCBtaWRfY29tbW9uXTtcbn07XG5cblxuLyoqXG4gKiBSZW9yZGVyIGFuZCBtZXJnZSBsaWtlIGVkaXQgc2VjdGlvbnMuICBNZXJnZSBlcXVhbGl0aWVzLlxuICogQW55IGVkaXQgc2VjdGlvbiBjYW4gbW92ZSBhcyBsb25nIGFzIGl0IGRvZXNuJ3QgY3Jvc3MgYW4gZXF1YWxpdHkuXG4gKiBAcGFyYW0ge0FycmF5fSBkaWZmcyBBcnJheSBvZiBkaWZmIHR1cGxlcy5cbiAqL1xuZnVuY3Rpb24gZGlmZl9jbGVhbnVwTWVyZ2UoZGlmZnMpIHtcbiAgZGlmZnMucHVzaChbRElGRl9FUVVBTCwgJyddKTsgIC8vIEFkZCBhIGR1bW15IGVudHJ5IGF0IHRoZSBlbmQuXG4gIHZhciBwb2ludGVyID0gMDtcbiAgdmFyIGNvdW50X2RlbGV0ZSA9IDA7XG4gIHZhciBjb3VudF9pbnNlcnQgPSAwO1xuICB2YXIgdGV4dF9kZWxldGUgPSAnJztcbiAgdmFyIHRleHRfaW5zZXJ0ID0gJyc7XG4gIHZhciBjb21tb25sZW5ndGg7XG4gIHdoaWxlIChwb2ludGVyIDwgZGlmZnMubGVuZ3RoKSB7XG4gICAgc3dpdGNoIChkaWZmc1twb2ludGVyXVswXSkge1xuICAgICAgY2FzZSBESUZGX0lOU0VSVDpcbiAgICAgICAgY291bnRfaW5zZXJ0Kys7XG4gICAgICAgIHRleHRfaW5zZXJ0ICs9IGRpZmZzW3BvaW50ZXJdWzFdO1xuICAgICAgICBwb2ludGVyKys7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBESUZGX0RFTEVURTpcbiAgICAgICAgY291bnRfZGVsZXRlKys7XG4gICAgICAgIHRleHRfZGVsZXRlICs9IGRpZmZzW3BvaW50ZXJdWzFdO1xuICAgICAgICBwb2ludGVyKys7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBESUZGX0VRVUFMOlxuICAgICAgICAvLyBVcG9uIHJlYWNoaW5nIGFuIGVxdWFsaXR5LCBjaGVjayBmb3IgcHJpb3IgcmVkdW5kYW5jaWVzLlxuICAgICAgICBpZiAoY291bnRfZGVsZXRlICsgY291bnRfaW5zZXJ0ID4gMSkge1xuICAgICAgICAgIGlmIChjb3VudF9kZWxldGUgIT09IDAgJiYgY291bnRfaW5zZXJ0ICE9PSAwKSB7XG4gICAgICAgICAgICAvLyBGYWN0b3Igb3V0IGFueSBjb21tb24gcHJlZml4aWVzLlxuICAgICAgICAgICAgY29tbW9ubGVuZ3RoID0gZGlmZl9jb21tb25QcmVmaXgodGV4dF9pbnNlcnQsIHRleHRfZGVsZXRlKTtcbiAgICAgICAgICAgIGlmIChjb21tb25sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgaWYgKChwb2ludGVyIC0gY291bnRfZGVsZXRlIC0gY291bnRfaW5zZXJ0KSA+IDAgJiZcbiAgICAgICAgICAgICAgICAgIGRpZmZzW3BvaW50ZXIgLSBjb3VudF9kZWxldGUgLSBjb3VudF9pbnNlcnQgLSAxXVswXSA9PVxuICAgICAgICAgICAgICAgICAgRElGRl9FUVVBTCkge1xuICAgICAgICAgICAgICAgIGRpZmZzW3BvaW50ZXIgLSBjb3VudF9kZWxldGUgLSBjb3VudF9pbnNlcnQgLSAxXVsxXSArPVxuICAgICAgICAgICAgICAgICAgICB0ZXh0X2luc2VydC5zdWJzdHJpbmcoMCwgY29tbW9ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkaWZmcy5zcGxpY2UoMCwgMCwgW0RJRkZfRVFVQUwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0X2luc2VydC5zdWJzdHJpbmcoMCwgY29tbW9ubGVuZ3RoKV0pO1xuICAgICAgICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0ZXh0X2luc2VydCA9IHRleHRfaW5zZXJ0LnN1YnN0cmluZyhjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgICB0ZXh0X2RlbGV0ZSA9IHRleHRfZGVsZXRlLnN1YnN0cmluZyhjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRmFjdG9yIG91dCBhbnkgY29tbW9uIHN1ZmZpeGllcy5cbiAgICAgICAgICAgIGNvbW1vbmxlbmd0aCA9IGRpZmZfY29tbW9uU3VmZml4KHRleHRfaW5zZXJ0LCB0ZXh0X2RlbGV0ZSk7XG4gICAgICAgICAgICBpZiAoY29tbW9ubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgIGRpZmZzW3BvaW50ZXJdWzFdID0gdGV4dF9pbnNlcnQuc3Vic3RyaW5nKHRleHRfaW5zZXJ0Lmxlbmd0aCAtXG4gICAgICAgICAgICAgICAgICBjb21tb25sZW5ndGgpICsgZGlmZnNbcG9pbnRlcl1bMV07XG4gICAgICAgICAgICAgIHRleHRfaW5zZXJ0ID0gdGV4dF9pbnNlcnQuc3Vic3RyaW5nKDAsIHRleHRfaW5zZXJ0Lmxlbmd0aCAtXG4gICAgICAgICAgICAgICAgICBjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgICB0ZXh0X2RlbGV0ZSA9IHRleHRfZGVsZXRlLnN1YnN0cmluZygwLCB0ZXh0X2RlbGV0ZS5sZW5ndGggLVxuICAgICAgICAgICAgICAgICAgY29tbW9ubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gRGVsZXRlIHRoZSBvZmZlbmRpbmcgcmVjb3JkcyBhbmQgYWRkIHRoZSBtZXJnZWQgb25lcy5cbiAgICAgICAgICBpZiAoY291bnRfZGVsZXRlID09PSAwKSB7XG4gICAgICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciAtIGNvdW50X2luc2VydCxcbiAgICAgICAgICAgICAgICBjb3VudF9kZWxldGUgKyBjb3VudF9pbnNlcnQsIFtESUZGX0lOU0VSVCwgdGV4dF9pbnNlcnRdKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvdW50X2luc2VydCA9PT0gMCkge1xuICAgICAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIgLSBjb3VudF9kZWxldGUsXG4gICAgICAgICAgICAgICAgY291bnRfZGVsZXRlICsgY291bnRfaW5zZXJ0LCBbRElGRl9ERUxFVEUsIHRleHRfZGVsZXRlXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyIC0gY291bnRfZGVsZXRlIC0gY291bnRfaW5zZXJ0LFxuICAgICAgICAgICAgICAgIGNvdW50X2RlbGV0ZSArIGNvdW50X2luc2VydCwgW0RJRkZfREVMRVRFLCB0ZXh0X2RlbGV0ZV0sXG4gICAgICAgICAgICAgICAgW0RJRkZfSU5TRVJULCB0ZXh0X2luc2VydF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwb2ludGVyID0gcG9pbnRlciAtIGNvdW50X2RlbGV0ZSAtIGNvdW50X2luc2VydCArXG4gICAgICAgICAgICAgICAgICAgIChjb3VudF9kZWxldGUgPyAxIDogMCkgKyAoY291bnRfaW5zZXJ0ID8gMSA6IDApICsgMTtcbiAgICAgICAgfSBlbHNlIGlmIChwb2ludGVyICE9PSAwICYmIGRpZmZzW3BvaW50ZXIgLSAxXVswXSA9PSBESUZGX0VRVUFMKSB7XG4gICAgICAgICAgLy8gTWVyZ2UgdGhpcyBlcXVhbGl0eSB3aXRoIHRoZSBwcmV2aW91cyBvbmUuXG4gICAgICAgICAgZGlmZnNbcG9pbnRlciAtIDFdWzFdICs9IGRpZmZzW3BvaW50ZXJdWzFdO1xuICAgICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyLCAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgIH1cbiAgICAgICAgY291bnRfaW5zZXJ0ID0gMDtcbiAgICAgICAgY291bnRfZGVsZXRlID0gMDtcbiAgICAgICAgdGV4dF9kZWxldGUgPSAnJztcbiAgICAgICAgdGV4dF9pbnNlcnQgPSAnJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChkaWZmc1tkaWZmcy5sZW5ndGggLSAxXVsxXSA9PT0gJycpIHtcbiAgICBkaWZmcy5wb3AoKTsgIC8vIFJlbW92ZSB0aGUgZHVtbXkgZW50cnkgYXQgdGhlIGVuZC5cbiAgfVxuXG4gIC8vIFNlY29uZCBwYXNzOiBsb29rIGZvciBzaW5nbGUgZWRpdHMgc3Vycm91bmRlZCBvbiBib3RoIHNpZGVzIGJ5IGVxdWFsaXRpZXNcbiAgLy8gd2hpY2ggY2FuIGJlIHNoaWZ0ZWQgc2lkZXdheXMgdG8gZWxpbWluYXRlIGFuIGVxdWFsaXR5LlxuICAvLyBlLmc6IEE8aW5zPkJBPC9pbnM+QyAtPiA8aW5zPkFCPC9pbnM+QUNcbiAgdmFyIGNoYW5nZXMgPSBmYWxzZTtcbiAgcG9pbnRlciA9IDE7XG4gIC8vIEludGVudGlvbmFsbHkgaWdub3JlIHRoZSBmaXJzdCBhbmQgbGFzdCBlbGVtZW50IChkb24ndCBuZWVkIGNoZWNraW5nKS5cbiAgd2hpbGUgKHBvaW50ZXIgPCBkaWZmcy5sZW5ndGggLSAxKSB7XG4gICAgaWYgKGRpZmZzW3BvaW50ZXIgLSAxXVswXSA9PSBESUZGX0VRVUFMICYmXG4gICAgICAgIGRpZmZzW3BvaW50ZXIgKyAxXVswXSA9PSBESUZGX0VRVUFMKSB7XG4gICAgICAvLyBUaGlzIGlzIGEgc2luZ2xlIGVkaXQgc3Vycm91bmRlZCBieSBlcXVhbGl0aWVzLlxuICAgICAgaWYgKGRpZmZzW3BvaW50ZXJdWzFdLnN1YnN0cmluZyhkaWZmc1twb2ludGVyXVsxXS5sZW5ndGggLVxuICAgICAgICAgIGRpZmZzW3BvaW50ZXIgLSAxXVsxXS5sZW5ndGgpID09IGRpZmZzW3BvaW50ZXIgLSAxXVsxXSkge1xuICAgICAgICAvLyBTaGlmdCB0aGUgZWRpdCBvdmVyIHRoZSBwcmV2aW91cyBlcXVhbGl0eS5cbiAgICAgICAgZGlmZnNbcG9pbnRlcl1bMV0gPSBkaWZmc1twb2ludGVyIC0gMV1bMV0gK1xuICAgICAgICAgICAgZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKDAsIGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZnNbcG9pbnRlciAtIDFdWzFdLmxlbmd0aCk7XG4gICAgICAgIGRpZmZzW3BvaW50ZXIgKyAxXVsxXSA9IGRpZmZzW3BvaW50ZXIgLSAxXVsxXSArIGRpZmZzW3BvaW50ZXIgKyAxXVsxXTtcbiAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIgLSAxLCAxKTtcbiAgICAgICAgY2hhbmdlcyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGRpZmZzW3BvaW50ZXJdWzFdLnN1YnN0cmluZygwLCBkaWZmc1twb2ludGVyICsgMV1bMV0ubGVuZ3RoKSA9PVxuICAgICAgICAgIGRpZmZzW3BvaW50ZXIgKyAxXVsxXSkge1xuICAgICAgICAvLyBTaGlmdCB0aGUgZWRpdCBvdmVyIHRoZSBuZXh0IGVxdWFsaXR5LlxuICAgICAgICBkaWZmc1twb2ludGVyIC0gMV1bMV0gKz0gZGlmZnNbcG9pbnRlciArIDFdWzFdO1xuICAgICAgICBkaWZmc1twb2ludGVyXVsxXSA9XG4gICAgICAgICAgICBkaWZmc1twb2ludGVyXVsxXS5zdWJzdHJpbmcoZGlmZnNbcG9pbnRlciArIDFdWzFdLmxlbmd0aCkgK1xuICAgICAgICAgICAgZGlmZnNbcG9pbnRlciArIDFdWzFdO1xuICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciArIDEsIDEpO1xuICAgICAgICBjaGFuZ2VzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcG9pbnRlcisrO1xuICB9XG4gIC8vIElmIHNoaWZ0cyB3ZXJlIG1hZGUsIHRoZSBkaWZmIG5lZWRzIHJlb3JkZXJpbmcgYW5kIGFub3RoZXIgc2hpZnQgc3dlZXAuXG4gIGlmIChjaGFuZ2VzKSB7XG4gICAgZGlmZl9jbGVhbnVwTWVyZ2UoZGlmZnMpO1xuICB9XG59O1xuXG5cbnZhciBkaWZmID0gZGlmZl9tYWluO1xuZGlmZi5JTlNFUlQgPSBESUZGX0lOU0VSVDtcbmRpZmYuREVMRVRFID0gRElGRl9ERUxFVEU7XG5kaWZmLkVRVUFMID0gRElGRl9FUVVBTDtcblxubW9kdWxlLmV4cG9ydHMgPSBkaWZmO1xuXG4vKlxuICogTW9kaWZ5IGEgZGlmZiBzdWNoIHRoYXQgdGhlIGN1cnNvciBwb3NpdGlvbiBwb2ludHMgdG8gdGhlIHN0YXJ0IG9mIGEgY2hhbmdlOlxuICogRS5nLlxuICogICBjdXJzb3Jfbm9ybWFsaXplX2RpZmYoW1tESUZGX0VRVUFMLCAnYWJjJ11dLCAxKVxuICogICAgID0+IFsxLCBbW0RJRkZfRVFVQUwsICdhJ10sIFtESUZGX0VRVUFMLCAnYmMnXV1dXG4gKiAgIGN1cnNvcl9ub3JtYWxpemVfZGlmZihbW0RJRkZfSU5TRVJULCAnbmV3J10sIFtESUZGX0RFTEVURSwgJ3h5eiddXSwgMilcbiAqICAgICA9PiBbMiwgW1tESUZGX0lOU0VSVCwgJ25ldyddLCBbRElGRl9ERUxFVEUsICd4eSddLCBbRElGRl9ERUxFVEUsICd6J11dXVxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRpZmZzIEFycmF5IG9mIGRpZmYgdHVwbGVzXG4gKiBAcGFyYW0ge0ludH0gY3Vyc29yX3BvcyBTdWdnZXN0ZWQgZWRpdCBwb3NpdGlvbi4gTXVzdCBub3QgYmUgb3V0IG9mIGJvdW5kcyFcbiAqIEByZXR1cm4ge0FycmF5fSBBIHR1cGxlIFtjdXJzb3IgbG9jYXRpb24gaW4gdGhlIG1vZGlmaWVkIGRpZmYsIG1vZGlmaWVkIGRpZmZdXG4gKi9cbmZ1bmN0aW9uIGN1cnNvcl9ub3JtYWxpemVfZGlmZiAoZGlmZnMsIGN1cnNvcl9wb3MpIHtcbiAgaWYgKGN1cnNvcl9wb3MgPT09IDApIHtcbiAgICByZXR1cm4gW0RJRkZfRVFVQUwsIGRpZmZzXTtcbiAgfVxuICBmb3IgKHZhciBjdXJyZW50X3BvcyA9IDAsIGkgPSAwOyBpIDwgZGlmZnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZCA9IGRpZmZzW2ldO1xuICAgIGlmIChkWzBdID09PSBESUZGX0RFTEVURSB8fCBkWzBdID09PSBESUZGX0VRVUFMKSB7XG4gICAgICB2YXIgbmV4dF9wb3MgPSBjdXJyZW50X3BvcyArIGRbMV0ubGVuZ3RoO1xuICAgICAgaWYgKGN1cnNvcl9wb3MgPT09IG5leHRfcG9zKSB7XG4gICAgICAgIHJldHVybiBbaSArIDEsIGRpZmZzXTtcbiAgICAgIH0gZWxzZSBpZiAoY3Vyc29yX3BvcyA8IG5leHRfcG9zKSB7XG4gICAgICAgIC8vIGNvcHkgdG8gcHJldmVudCBzaWRlIGVmZmVjdHNcbiAgICAgICAgZGlmZnMgPSBkaWZmcy5zbGljZSgpO1xuICAgICAgICAvLyBzcGxpdCBkIGludG8gdHdvIGRpZmYgY2hhbmdlc1xuICAgICAgICB2YXIgc3BsaXRfcG9zID0gY3Vyc29yX3BvcyAtIGN1cnJlbnRfcG9zO1xuICAgICAgICB2YXIgZF9sZWZ0ID0gW2RbMF0sIGRbMV0uc2xpY2UoMCwgc3BsaXRfcG9zKV07XG4gICAgICAgIHZhciBkX3JpZ2h0ID0gW2RbMF0sIGRbMV0uc2xpY2Uoc3BsaXRfcG9zKV07XG4gICAgICAgIGRpZmZzLnNwbGljZShpLCAxLCBkX2xlZnQsIGRfcmlnaHQpO1xuICAgICAgICByZXR1cm4gW2kgKyAxLCBkaWZmc107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50X3BvcyA9IG5leHRfcG9zO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ2N1cnNvcl9wb3MgaXMgb3V0IG9mIGJvdW5kcyEnKVxufVxuXG4vKlxuICogTW9kaWZ5IGEgZGlmZiBzdWNoIHRoYXQgdGhlIGVkaXQgcG9zaXRpb24gaXMgXCJzaGlmdGVkXCIgdG8gdGhlIHByb3Bvc2VkIGVkaXQgbG9jYXRpb24gKGN1cnNvcl9wb3NpdGlvbikuXG4gKlxuICogQ2FzZSAxKVxuICogICBDaGVjayBpZiBhIG5haXZlIHNoaWZ0IGlzIHBvc3NpYmxlOlxuICogICAgIFswLCBYXSwgWyAxLCBZXSAtPiBbIDEsIFldLCBbMCwgWF0gICAgKGlmIFggKyBZID09PSBZICsgWClcbiAqICAgICBbMCwgWF0sIFstMSwgWV0gLT4gWy0xLCBZXSwgWzAsIFhdICAgIChpZiBYICsgWSA9PT0gWSArIFgpIC0gaG9sZHMgc2FtZSByZXN1bHRcbiAqIENhc2UgMilcbiAqICAgQ2hlY2sgaWYgdGhlIGZvbGxvd2luZyBzaGlmdHMgYXJlIHBvc3NpYmxlOlxuICogICAgIFswLCAncHJlJ10sIFsgMSwgJ3ByZWZpeCddIC0+IFsgMSwgJ3ByZSddLCBbMCwgJ3ByZSddLCBbIDEsICdmaXgnXVxuICogICAgIFswLCAncHJlJ10sIFstMSwgJ3ByZWZpeCddIC0+IFstMSwgJ3ByZSddLCBbMCwgJ3ByZSddLCBbLTEsICdmaXgnXVxuICogICAgICAgICBeICAgICAgICAgICAgXlxuICogICAgICAgICBkICAgICAgICAgIGRfbmV4dFxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRpZmZzIEFycmF5IG9mIGRpZmYgdHVwbGVzXG4gKiBAcGFyYW0ge0ludH0gY3Vyc29yX3BvcyBTdWdnZXN0ZWQgZWRpdCBwb3NpdGlvbi4gTXVzdCBub3QgYmUgb3V0IG9mIGJvdW5kcyFcbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBkaWZmIHR1cGxlc1xuICovXG5mdW5jdGlvbiBmaXhfY3Vyc29yIChkaWZmcywgY3Vyc29yX3Bvcykge1xuICB2YXIgbm9ybSA9IGN1cnNvcl9ub3JtYWxpemVfZGlmZihkaWZmcywgY3Vyc29yX3Bvcyk7XG4gIHZhciBuZGlmZnMgPSBub3JtWzFdO1xuICB2YXIgY3Vyc29yX3BvaW50ZXIgPSBub3JtWzBdO1xuICB2YXIgZCA9IG5kaWZmc1tjdXJzb3JfcG9pbnRlcl07XG4gIHZhciBkX25leHQgPSBuZGlmZnNbY3Vyc29yX3BvaW50ZXIgKyAxXTtcblxuICBpZiAoZCA9PSBudWxsKSB7XG4gICAgLy8gVGV4dCB3YXMgZGVsZXRlZCBmcm9tIGVuZCBvZiBvcmlnaW5hbCBzdHJpbmcsXG4gICAgLy8gY3Vyc29yIGlzIG5vdyBvdXQgb2YgYm91bmRzIGluIG5ldyBzdHJpbmdcbiAgICByZXR1cm4gZGlmZnM7XG4gIH0gZWxzZSBpZiAoZFswXSAhPT0gRElGRl9FUVVBTCkge1xuICAgIC8vIEEgbW9kaWZpY2F0aW9uIGhhcHBlbmVkIGF0IHRoZSBjdXJzb3IgbG9jYXRpb24uXG4gICAgLy8gVGhpcyBpcyB0aGUgZXhwZWN0ZWQgb3V0Y29tZSwgc28gd2UgY2FuIHJldHVybiB0aGUgb3JpZ2luYWwgZGlmZi5cbiAgICByZXR1cm4gZGlmZnM7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRfbmV4dCAhPSBudWxsICYmIGRbMV0gKyBkX25leHRbMV0gPT09IGRfbmV4dFsxXSArIGRbMV0pIHtcbiAgICAgIC8vIENhc2UgMSlcbiAgICAgIC8vIEl0IGlzIHBvc3NpYmxlIHRvIHBlcmZvcm0gYSBuYWl2ZSBzaGlmdFxuICAgICAgbmRpZmZzLnNwbGljZShjdXJzb3JfcG9pbnRlciwgMiwgZF9uZXh0LCBkKVxuICAgICAgcmV0dXJuIG1lcmdlX3R1cGxlcyhuZGlmZnMsIGN1cnNvcl9wb2ludGVyLCAyKVxuICAgIH0gZWxzZSBpZiAoZF9uZXh0ICE9IG51bGwgJiYgZF9uZXh0WzFdLmluZGV4T2YoZFsxXSkgPT09IDApIHtcbiAgICAgIC8vIENhc2UgMilcbiAgICAgIC8vIGRbMV0gaXMgYSBwcmVmaXggb2YgZF9uZXh0WzFdXG4gICAgICAvLyBXZSBjYW4gYXNzdW1lIHRoYXQgZF9uZXh0WzBdICE9PSAwLCBzaW5jZSBkWzBdID09PSAwXG4gICAgICAvLyBTaGlmdCBlZGl0IGxvY2F0aW9ucy4uXG4gICAgICBuZGlmZnMuc3BsaWNlKGN1cnNvcl9wb2ludGVyLCAyLCBbZF9uZXh0WzBdLCBkWzFdXSwgWzAsIGRbMV1dKTtcbiAgICAgIHZhciBzdWZmaXggPSBkX25leHRbMV0uc2xpY2UoZFsxXS5sZW5ndGgpO1xuICAgICAgaWYgKHN1ZmZpeC5sZW5ndGggPiAwKSB7XG4gICAgICAgIG5kaWZmcy5zcGxpY2UoY3Vyc29yX3BvaW50ZXIgKyAyLCAwLCBbZF9uZXh0WzBdLCBzdWZmaXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXJnZV90dXBsZXMobmRpZmZzLCBjdXJzb3JfcG9pbnRlciwgMylcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTm90IHBvc3NpYmxlIHRvIHBlcmZvcm0gYW55IG1vZGlmaWNhdGlvblxuICAgICAgcmV0dXJuIGRpZmZzO1xuICAgIH1cbiAgfVxufVxuXG4vKlxuICogQ2hlY2sgZGlmZiBkaWQgbm90IHNwbGl0IHN1cnJvZ2F0ZSBwYWlycy5cbiAqIEV4LiBbMCwgJ1xcdUQ4M0QnXSwgWy0xLCAnXFx1REMzNiddLCBbMSwgJ1xcdURDMkYnXSAtPiBbLTEsICdcXHVEODNEXFx1REMzNiddLCBbMSwgJ1xcdUQ4M0RcXHVEQzJGJ11cbiAqICAgICAnXFx1RDgzRFxcdURDMzYnID09PSAn8J+QticsICdcXHVEODNEXFx1REMyRicgPT09ICfwn5CvJ1xuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRpZmZzIEFycmF5IG9mIGRpZmYgdHVwbGVzXG4gKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgZGlmZiB0dXBsZXNcbiAqL1xuZnVuY3Rpb24gZml4X2Vtb2ppIChkaWZmcykge1xuICB2YXIgY29tcGFjdCA9IGZhbHNlO1xuICB2YXIgc3RhcnRzX3dpdGhfcGFpcl9lbmQgPSBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gc3RyLmNoYXJDb2RlQXQoMCkgPj0gMHhEQzAwICYmIHN0ci5jaGFyQ29kZUF0KDApIDw9IDB4REZGRjtcbiAgfVxuICB2YXIgZW5kc193aXRoX3BhaXJfc3RhcnQgPSBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gc3RyLmNoYXJDb2RlQXQoc3RyLmxlbmd0aC0xKSA+PSAweEQ4MDAgJiYgc3RyLmNoYXJDb2RlQXQoc3RyLmxlbmd0aC0xKSA8PSAweERCRkY7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDI7IGkgPCBkaWZmcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChkaWZmc1tpLTJdWzBdID09PSBESUZGX0VRVUFMICYmIGVuZHNfd2l0aF9wYWlyX3N0YXJ0KGRpZmZzW2ktMl1bMV0pICYmXG4gICAgICAgIGRpZmZzW2ktMV1bMF0gPT09IERJRkZfREVMRVRFICYmIHN0YXJ0c193aXRoX3BhaXJfZW5kKGRpZmZzW2ktMV1bMV0pICYmXG4gICAgICAgIGRpZmZzW2ldWzBdID09PSBESUZGX0lOU0VSVCAmJiBzdGFydHNfd2l0aF9wYWlyX2VuZChkaWZmc1tpXVsxXSkpIHtcbiAgICAgIGNvbXBhY3QgPSB0cnVlO1xuXG4gICAgICBkaWZmc1tpLTFdWzFdID0gZGlmZnNbaS0yXVsxXS5zbGljZSgtMSkgKyBkaWZmc1tpLTFdWzFdO1xuICAgICAgZGlmZnNbaV1bMV0gPSBkaWZmc1tpLTJdWzFdLnNsaWNlKC0xKSArIGRpZmZzW2ldWzFdO1xuXG4gICAgICBkaWZmc1tpLTJdWzFdID0gZGlmZnNbaS0yXVsxXS5zbGljZSgwLCAtMSk7XG4gICAgfVxuICB9XG4gIGlmICghY29tcGFjdCkge1xuICAgIHJldHVybiBkaWZmcztcbiAgfVxuICB2YXIgZml4ZWRfZGlmZnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaWZmcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChkaWZmc1tpXVsxXS5sZW5ndGggPiAwKSB7XG4gICAgICBmaXhlZF9kaWZmcy5wdXNoKGRpZmZzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZpeGVkX2RpZmZzO1xufVxuXG4vKlxuICogVHJ5IHRvIG1lcmdlIHR1cGxlcyB3aXRoIHRoZWlyIG5laWdib3JzIGluIGEgZ2l2ZW4gcmFuZ2UuXG4gKiBFLmcuIFswLCAnYSddLCBbMCwgJ2InXSAtPiBbMCwgJ2FiJ11cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBkaWZmcyBBcnJheSBvZiBkaWZmIHR1cGxlcy5cbiAqIEBwYXJhbSB7SW50fSBzdGFydCBQb3NpdGlvbiBvZiB0aGUgZmlyc3QgZWxlbWVudCB0byBtZXJnZSAoZGlmZnNbc3RhcnRdIGlzIGFsc28gbWVyZ2VkIHdpdGggZGlmZnNbc3RhcnQgLSAxXSkuXG4gKiBAcGFyYW0ge0ludH0gbGVuZ3RoIE51bWJlciBvZiBjb25zZWN1dGl2ZSBlbGVtZW50cyB0byBjaGVjay5cbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBtZXJnZWQgZGlmZiB0dXBsZXMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlX3R1cGxlcyAoZGlmZnMsIHN0YXJ0LCBsZW5ndGgpIHtcbiAgLy8gQ2hlY2sgZnJvbSAoc3RhcnQtMSkgdG8gKHN0YXJ0K2xlbmd0aCkuXG4gIGZvciAodmFyIGkgPSBzdGFydCArIGxlbmd0aCAtIDE7IGkgPj0gMCAmJiBpID49IHN0YXJ0IC0gMTsgaS0tKSB7XG4gICAgaWYgKGkgKyAxIDwgZGlmZnMubGVuZ3RoKSB7XG4gICAgICB2YXIgbGVmdF9kID0gZGlmZnNbaV07XG4gICAgICB2YXIgcmlnaHRfZCA9IGRpZmZzW2krMV07XG4gICAgICBpZiAobGVmdF9kWzBdID09PSByaWdodF9kWzFdKSB7XG4gICAgICAgIGRpZmZzLnNwbGljZShpLCAyLCBbbGVmdF9kWzBdLCBsZWZ0X2RbMV0gKyByaWdodF9kWzFdXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkaWZmcztcbn1cblxuXG4vKioqLyB9KSxcbi8qIDUyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gJ2Z1bmN0aW9uJ1xuICA/IE9iamVjdC5rZXlzIDogc2hpbTtcblxuZXhwb3J0cy5zaGltID0gc2hpbTtcbmZ1bmN0aW9uIHNoaW0gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSBrZXlzLnB1c2goa2V5KTtcbiAgcmV0dXJuIGtleXM7XG59XG5cblxuLyoqKi8gfSksXG4vKiA1MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgc3VwcG9ydHNBcmd1bWVudHNDbGFzcyA9IChmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50cylcbn0pKCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHN1cHBvcnRzQXJndW1lbnRzQ2xhc3MgPyBzdXBwb3J0ZWQgOiB1bnN1cHBvcnRlZDtcblxuZXhwb3J0cy5zdXBwb3J0ZWQgPSBzdXBwb3J0ZWQ7XG5mdW5jdGlvbiBzdXBwb3J0ZWQob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn07XG5cbmV4cG9ydHMudW5zdXBwb3J0ZWQgPSB1bnN1cHBvcnRlZDtcbmZ1bmN0aW9uIHVuc3VwcG9ydGVkKG9iamVjdCl7XG4gIHJldHVybiBvYmplY3QgJiZcbiAgICB0eXBlb2Ygb2JqZWN0ID09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIG9iamVjdC5sZW5ndGggPT0gJ251bWJlcicgJiZcbiAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnY2FsbGVlJykgJiZcbiAgICAhT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgJ2NhbGxlZScpIHx8XG4gICAgZmFsc2U7XG59O1xuXG5cbi8qKiovIH0pLFxuLyogNTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuICAsIHByZWZpeCA9ICd+JztcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciB0byBjcmVhdGUgYSBzdG9yYWdlIGZvciBvdXIgYEVFYCBvYmplY3RzLlxuICogQW4gYEV2ZW50c2AgaW5zdGFuY2UgaXMgYSBwbGFpbiBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyBhcmUgZXZlbnQgbmFtZXMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRXZlbnRzKCkge31cblxuLy9cbi8vIFdlIHRyeSB0byBub3QgaW5oZXJpdCBmcm9tIGBPYmplY3QucHJvdG90eXBlYC4gSW4gc29tZSBlbmdpbmVzIGNyZWF0aW5nIGFuXG4vLyBpbnN0YW5jZSBpbiB0aGlzIHdheSBpcyBmYXN0ZXIgdGhhbiBjYWxsaW5nIGBPYmplY3QuY3JlYXRlKG51bGwpYCBkaXJlY3RseS5cbi8vIElmIGBPYmplY3QuY3JlYXRlKG51bGwpYCBpcyBub3Qgc3VwcG9ydGVkIHdlIHByZWZpeCB0aGUgZXZlbnQgbmFtZXMgd2l0aCBhXG4vLyBjaGFyYWN0ZXIgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGJ1aWx0LWluIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBub3Rcbi8vIG92ZXJyaWRkZW4gb3IgdXNlZCBhcyBhbiBhdHRhY2sgdmVjdG9yLlxuLy9cbmlmIChPYmplY3QuY3JlYXRlKSB7XG4gIEV2ZW50cy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIC8vXG4gIC8vIFRoaXMgaGFjayBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgYF9fcHJvdG9fX2AgcHJvcGVydHkgaXMgc3RpbGwgaW5oZXJpdGVkIGluXG4gIC8vIHNvbWUgb2xkIGJyb3dzZXJzIGxpa2UgQW5kcm9pZCA0LCBpUGhvbmUgNS4xLCBPcGVyYSAxMSBhbmQgU2FmYXJpIDUuXG4gIC8vXG4gIGlmICghbmV3IEV2ZW50cygpLl9fcHJvdG9fXykgcHJlZml4ID0gZmFsc2U7XG59XG5cbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgZXZlbnQgbGlzdGVuZXIuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvbmNlPWZhbHNlXSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRUUoZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdGhpcy5mbiA9IGZuO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLm9uY2UgPSBvbmNlIHx8IGZhbHNlO1xufVxuXG4vKipcbiAqIE1pbmltYWwgYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlIHRoYXQgaXMgbW9sZGVkIGFnYWluc3QgdGhlIE5vZGUuanNcbiAqIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIGFuIGFycmF5IGxpc3RpbmcgdGhlIGV2ZW50cyBmb3Igd2hpY2ggdGhlIGVtaXR0ZXIgaGFzIHJlZ2lzdGVyZWRcbiAqIGxpc3RlbmVycy5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICB2YXIgbmFtZXMgPSBbXVxuICAgICwgZXZlbnRzXG4gICAgLCBuYW1lO1xuXG4gIGlmICh0aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgcmV0dXJuIG5hbWVzO1xuXG4gIGZvciAobmFtZSBpbiAoZXZlbnRzID0gdGhpcy5fZXZlbnRzKSkge1xuICAgIGlmIChoYXMuY2FsbChldmVudHMsIG5hbWUpKSBuYW1lcy5wdXNoKHByZWZpeCA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lKTtcbiAgfVxuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgcmV0dXJuIG5hbWVzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGV2ZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIG5hbWVzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfFN5bWJvbH0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGV4aXN0cyBPbmx5IGNoZWNrIGlmIHRoZXJlIGFyZSBsaXN0ZW5lcnMuXG4gKiBAcmV0dXJucyB7QXJyYXl8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKGV2ZW50LCBleGlzdHMpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGF2YWlsYWJsZSA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmIChleGlzdHMpIHJldHVybiAhIWF2YWlsYWJsZTtcbiAgaWYgKCFhdmFpbGFibGUpIHJldHVybiBbXTtcbiAgaWYgKGF2YWlsYWJsZS5mbikgcmV0dXJuIFthdmFpbGFibGUuZm5dO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXZhaWxhYmxlLmxlbmd0aCwgZWUgPSBuZXcgQXJyYXkobCk7IGkgPCBsOyBpKyspIHtcbiAgICBlZVtpXSA9IGF2YWlsYWJsZVtpXS5mbjtcbiAgfVxuXG4gIHJldHVybiBlZTtcbn07XG5cbi8qKlxuICogQ2FsbHMgZWFjaCBvZiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8U3ltYm9sfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGV2ZW50IGhhZCBsaXN0ZW5lcnMsIGVsc2UgYGZhbHNlYC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZlbnQsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdXG4gICAgLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBhcmdzXG4gICAgLCBpO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAobGlzdGVuZXJzLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVycy5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCksIHRydWU7XG4gICAgICBjYXNlIDI6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEpLCB0cnVlO1xuICAgICAgY2FzZSAzOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiksIHRydWU7XG4gICAgICBjYXNlIDQ6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMyksIHRydWU7XG4gICAgICBjYXNlIDU6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQpLCB0cnVlO1xuICAgICAgY2FzZSA2OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0LCBhNSksIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mbi5hcHBseShsaXN0ZW5lcnMuY29udGV4dCwgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGhcbiAgICAgICwgajtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbaV0uZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICAgIGNhc2UgMTogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQpOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgNDogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMiwgYTMpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoIWFyZ3MpIGZvciAoaiA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBhcmdzW2ogLSAxXSA9IGFyZ3VtZW50c1tqXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2ldLmNvbnRleHQsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xTeW1ib2x9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgdGhpcylcbiAgICAsIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgdGhpcy5fZXZlbnRzW2V2dF0gPSBsaXN0ZW5lciwgdGhpcy5fZXZlbnRzQ291bnQrKztcbiAgZWxzZSBpZiAoIXRoaXMuX2V2ZW50c1tldnRdLmZuKSB0aGlzLl9ldmVudHNbZXZ0XS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZSB0aGlzLl9ldmVudHNbZXZ0XSA9IFt0aGlzLl9ldmVudHNbZXZ0XSwgbGlzdGVuZXJdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBZGQgYSBvbmUtdGltZSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xTeW1ib2x9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZShldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgdmFyIGxpc3RlbmVyID0gbmV3IEVFKGZuLCBjb250ZXh0IHx8IHRoaXMsIHRydWUpXG4gICAgLCBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHRoaXMuX2V2ZW50c1tldnRdID0gbGlzdGVuZXIsIHRoaXMuX2V2ZW50c0NvdW50Kys7XG4gIGVsc2UgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XS5mbikgdGhpcy5fZXZlbnRzW2V2dF0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2UgdGhpcy5fZXZlbnRzW2V2dF0gPSBbdGhpcy5fZXZlbnRzW2V2dF0sIGxpc3RlbmVyXTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBsaXN0ZW5lcnMgb2YgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xTeW1ib2x9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IG1hdGNoIHRoaXMgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge01peGVkfSBjb250ZXh0IE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBoYXZlIHRoaXMgY29udGV4dC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IHJlbW92ZSBvbmUtdGltZSBsaXN0ZW5lcnMuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiB0aGlzO1xuICBpZiAoIWZuKSB7XG4gICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9ldmVudHNbZXZ0XTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKFxuICAgICAgICAgbGlzdGVuZXJzLmZuID09PSBmblxuICAgICAgJiYgKCFvbmNlIHx8IGxpc3RlbmVycy5vbmNlKVxuICAgICAgJiYgKCFjb250ZXh0IHx8IGxpc3RlbmVycy5jb250ZXh0ID09PSBjb250ZXh0KVxuICAgICkge1xuICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICAgIGVsc2UgZGVsZXRlIHRoaXMuX2V2ZW50c1tldnRdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMCwgZXZlbnRzID0gW10sIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKFxuICAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4gIT09IGZuXG4gICAgICAgIHx8IChvbmNlICYmICFsaXN0ZW5lcnNbaV0ub25jZSlcbiAgICAgICAgfHwgKGNvbnRleHQgJiYgbGlzdGVuZXJzW2ldLmNvbnRleHQgIT09IGNvbnRleHQpXG4gICAgICApIHtcbiAgICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIFJlc2V0IHRoZSBhcnJheSwgb3IgcmVtb3ZlIGl0IGNvbXBsZXRlbHkgaWYgd2UgaGF2ZSBubyBtb3JlIGxpc3RlbmVycy5cbiAgICAvL1xuICAgIGlmIChldmVudHMubGVuZ3RoKSB0aGlzLl9ldmVudHNbZXZ0XSA9IGV2ZW50cy5sZW5ndGggPT09IDEgPyBldmVudHNbMF0gOiBldmVudHM7XG4gICAgZWxzZSBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgIGVsc2UgZGVsZXRlIHRoaXMuX2V2ZW50c1tldnRdO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgbGlzdGVuZXJzLCBvciB0aG9zZSBvZiB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfFN5bWJvbH0gW2V2ZW50XSBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KSB7XG4gIHZhciBldnQ7XG5cbiAgaWYgKGV2ZW50KSB7XG4gICAgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcbiAgICBpZiAodGhpcy5fZXZlbnRzW2V2dF0pIHtcbiAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gICAgICBlbHNlIGRlbGV0ZSB0aGlzLl9ldmVudHNbZXZ0XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIEFsaWFzIG1ldGhvZHMgbmFtZXMgYmVjYXVzZSBwZW9wbGUgcm9sbCBsaWtlIHRoYXQuXG4vL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cbi8vXG4vLyBUaGlzIGZ1bmN0aW9uIGRvZXNuJ3QgYXBwbHkgYW55bW9yZS5cbi8vXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBwcmVmaXguXG4vL1xuRXZlbnRFbWl0dGVyLnByZWZpeGVkID0gcHJlZml4O1xuXG4vL1xuLy8gQWxsb3cgYEV2ZW50RW1pdHRlcmAgdG8gYmUgaW1wb3J0ZWQgYXMgbW9kdWxlIG5hbWVzcGFjZS5cbi8vXG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xuaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbW9kdWxlKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xufVxuXG5cbi8qKiovIH0pLFxuLyogNTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMubWF0Y2hUZXh0ID0gZXhwb3J0cy5tYXRjaFNwYWNpbmcgPSBleHBvcnRzLm1hdGNoTmV3bGluZSA9IGV4cG9ydHMubWF0Y2hCbG90ID0gZXhwb3J0cy5tYXRjaEF0dHJpYnV0b3IgPSBleHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2V4dGVuZDIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX2V4dGVuZDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmQyKTtcblxudmFyIF9xdWlsbERlbHRhID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxudmFyIF9xdWlsbERlbHRhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1aWxsRGVsdGEpO1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbnZhciBfcXVpbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG52YXIgX3F1aWxsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1aWxsKTtcblxudmFyIF9sb2dnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxudmFyIF9sb2dnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9nZ2VyKTtcblxudmFyIF9tb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXG52YXIgX21vZHVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb2R1bGUpO1xuXG52YXIgX2FsaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7XG5cbnZhciBfYmFja2dyb3VuZCA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpO1xuXG52YXIgX2NvZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblxudmFyIF9jb2RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvZGUpO1xuXG52YXIgX2NvbG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cbnZhciBfZGlyZWN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cbnZhciBfZm9udCA9IF9fd2VicGFja19yZXF1aXJlX18oMzkpO1xuXG52YXIgX3NpemUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgZGVidWcgPSAoMCwgX2xvZ2dlcjIuZGVmYXVsdCkoJ3F1aWxsOmNsaXBib2FyZCcpO1xuXG52YXIgRE9NX0tFWSA9ICdfX3FsLW1hdGNoZXInO1xuXG52YXIgQ0xJUEJPQVJEX0NPTkZJRyA9IFtbTm9kZS5URVhUX05PREUsIG1hdGNoVGV4dF0sIFtOb2RlLlRFWFRfTk9ERSwgbWF0Y2hOZXdsaW5lXSwgWydicicsIG1hdGNoQnJlYWtdLCBbTm9kZS5FTEVNRU5UX05PREUsIG1hdGNoTmV3bGluZV0sIFtOb2RlLkVMRU1FTlRfTk9ERSwgbWF0Y2hCbG90XSwgW05vZGUuRUxFTUVOVF9OT0RFLCBtYXRjaFNwYWNpbmddLCBbTm9kZS5FTEVNRU5UX05PREUsIG1hdGNoQXR0cmlidXRvcl0sIFtOb2RlLkVMRU1FTlRfTk9ERSwgbWF0Y2hTdHlsZXNdLCBbJ2xpJywgbWF0Y2hJbmRlbnRdLCBbJ2InLCBtYXRjaEFsaWFzLmJpbmQobWF0Y2hBbGlhcywgJ2JvbGQnKV0sIFsnaScsIG1hdGNoQWxpYXMuYmluZChtYXRjaEFsaWFzLCAnaXRhbGljJyldLCBbJ3N0eWxlJywgbWF0Y2hJZ25vcmVdXTtcblxudmFyIEFUVFJJQlVURV9BVFRSSUJVVE9SUyA9IFtfYWxpZ24uQWxpZ25BdHRyaWJ1dGUsIF9kaXJlY3Rpb24uRGlyZWN0aW9uQXR0cmlidXRlXS5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGF0dHIpIHtcbiAgbWVtb1thdHRyLmtleU5hbWVdID0gYXR0cjtcbiAgcmV0dXJuIG1lbW87XG59LCB7fSk7XG5cbnZhciBTVFlMRV9BVFRSSUJVVE9SUyA9IFtfYWxpZ24uQWxpZ25TdHlsZSwgX2JhY2tncm91bmQuQmFja2dyb3VuZFN0eWxlLCBfY29sb3IuQ29sb3JTdHlsZSwgX2RpcmVjdGlvbi5EaXJlY3Rpb25TdHlsZSwgX2ZvbnQuRm9udFN0eWxlLCBfc2l6ZS5TaXplU3R5bGVdLnJlZHVjZShmdW5jdGlvbiAobWVtbywgYXR0cikge1xuICBtZW1vW2F0dHIua2V5TmFtZV0gPSBhdHRyO1xuICByZXR1cm4gbWVtbztcbn0sIHt9KTtcblxudmFyIENsaXBib2FyZCA9IGZ1bmN0aW9uIChfTW9kdWxlKSB7XG4gIF9pbmhlcml0cyhDbGlwYm9hcmQsIF9Nb2R1bGUpO1xuXG4gIGZ1bmN0aW9uIENsaXBib2FyZChxdWlsbCwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDbGlwYm9hcmQpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENsaXBib2FyZC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENsaXBib2FyZCkpLmNhbGwodGhpcywgcXVpbGwsIG9wdGlvbnMpKTtcblxuICAgIF90aGlzLnF1aWxsLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcigncGFzdGUnLCBfdGhpcy5vblBhc3RlLmJpbmQoX3RoaXMpKTtcbiAgICBfdGhpcy5jb250YWluZXIgPSBfdGhpcy5xdWlsbC5hZGRDb250YWluZXIoJ3FsLWNsaXBib2FyZCcpO1xuICAgIF90aGlzLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIHRydWUpO1xuICAgIF90aGlzLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgLTEpO1xuICAgIF90aGlzLm1hdGNoZXJzID0gW107XG4gICAgQ0xJUEJPQVJEX0NPTkZJRy5jb25jYXQoX3RoaXMub3B0aW9ucy5tYXRjaGVycykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgICAgc2VsZWN0b3IgPSBfcmVmMlswXSxcbiAgICAgICAgICBtYXRjaGVyID0gX3JlZjJbMV07XG5cbiAgICAgIGlmICghb3B0aW9ucy5tYXRjaFZpc3VhbCAmJiBtYXRjaGVyID09PSBtYXRjaFNwYWNpbmcpIHJldHVybjtcbiAgICAgIF90aGlzLmFkZE1hdGNoZXIoc2VsZWN0b3IsIG1hdGNoZXIpO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDbGlwYm9hcmQsIFt7XG4gICAga2V5OiAnYWRkTWF0Y2hlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZE1hdGNoZXIoc2VsZWN0b3IsIG1hdGNoZXIpIHtcbiAgICAgIHRoaXMubWF0Y2hlcnMucHVzaChbc2VsZWN0b3IsIG1hdGNoZXJdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb252ZXJ0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29udmVydChodG1sKSB7XG4gICAgICBpZiAodHlwZW9mIGh0bWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9IGh0bWwucmVwbGFjZSgvXFw+XFxyP1xcbiArXFw8L2csICc+PCcpOyAvLyBSZW1vdmUgc3BhY2VzIGJldHdlZW4gdGFnc1xuICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0KCk7XG4gICAgICB9XG4gICAgICB2YXIgZm9ybWF0cyA9IHRoaXMucXVpbGwuZ2V0Rm9ybWF0KHRoaXMucXVpbGwuc2VsZWN0aW9uLnNhdmVkUmFuZ2UuaW5kZXgpO1xuICAgICAgaWYgKGZvcm1hdHNbX2NvZGUyLmRlZmF1bHQuYmxvdE5hbWVdKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gdGhpcy5jb250YWluZXIuaW5uZXJUZXh0O1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgcmV0dXJuIG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLmluc2VydCh0ZXh0LCBfZGVmaW5lUHJvcGVydHkoe30sIF9jb2RlMi5kZWZhdWx0LmJsb3ROYW1lLCBmb3JtYXRzW19jb2RlMi5kZWZhdWx0LmJsb3ROYW1lXSkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3ByZXBhcmVNYXRjaGluZyA9IHRoaXMucHJlcGFyZU1hdGNoaW5nKCksXG4gICAgICAgICAgX3ByZXBhcmVNYXRjaGluZzIgPSBfc2xpY2VkVG9BcnJheShfcHJlcGFyZU1hdGNoaW5nLCAyKSxcbiAgICAgICAgICBlbGVtZW50TWF0Y2hlcnMgPSBfcHJlcGFyZU1hdGNoaW5nMlswXSxcbiAgICAgICAgICB0ZXh0TWF0Y2hlcnMgPSBfcHJlcGFyZU1hdGNoaW5nMlsxXTtcblxuICAgICAgdmFyIGRlbHRhID0gdHJhdmVyc2UodGhpcy5jb250YWluZXIsIGVsZW1lbnRNYXRjaGVycywgdGV4dE1hdGNoZXJzKTtcbiAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyBuZXdsaW5lXG4gICAgICBpZiAoZGVsdGFFbmRzV2l0aChkZWx0YSwgJ1xcbicpICYmIGRlbHRhLm9wc1tkZWx0YS5vcHMubGVuZ3RoIC0gMV0uYXR0cmlidXRlcyA9PSBudWxsKSB7XG4gICAgICAgIGRlbHRhID0gZGVsdGEuY29tcG9zZShuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5yZXRhaW4oZGVsdGEubGVuZ3RoKCkgLSAxKS5kZWxldGUoMSkpO1xuICAgICAgfVxuICAgICAgZGVidWcubG9nKCdjb252ZXJ0JywgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MLCBkZWx0YSk7XG4gICAgICB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgIHJldHVybiBkZWx0YTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkYW5nZXJvdXNseVBhc3RlSFRNTCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRhbmdlcm91c2x5UGFzdGVIVE1MKGluZGV4LCBodG1sKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5BUEk7XG5cbiAgICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMucXVpbGwuc2V0Q29udGVudHModGhpcy5jb252ZXJ0KGluZGV4KSwgaHRtbCk7XG4gICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKDAsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcGFzdGUgPSB0aGlzLmNvbnZlcnQoaHRtbCk7XG4gICAgICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMobmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkucmV0YWluKGluZGV4KS5jb25jYXQocGFzdGUpLCBzb3VyY2UpO1xuICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihpbmRleCArIHBhc3RlLmxlbmd0aCgpLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29uUGFzdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvblBhc3RlKGUpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAoZS5kZWZhdWx0UHJldmVudGVkIHx8ICF0aGlzLnF1aWxsLmlzRW5hYmxlZCgpKSByZXR1cm47XG4gICAgICB2YXIgcmFuZ2UgPSB0aGlzLnF1aWxsLmdldFNlbGVjdGlvbigpO1xuICAgICAgdmFyIGRlbHRhID0gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkucmV0YWluKHJhbmdlLmluZGV4KTtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLnF1aWxsLnNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3A7XG4gICAgICB0aGlzLmNvbnRhaW5lci5mb2N1cygpO1xuICAgICAgdGhpcy5xdWlsbC5zZWxlY3Rpb24udXBkYXRlKF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVsdGEgPSBkZWx0YS5jb25jYXQoX3RoaXMyLmNvbnZlcnQoKSkuZGVsZXRlKHJhbmdlLmxlbmd0aCk7XG4gICAgICAgIF90aGlzMi5xdWlsbC51cGRhdGVDb250ZW50cyhkZWx0YSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgIC8vIHJhbmdlLmxlbmd0aCBjb250cmlidXRlcyB0byBkZWx0YS5sZW5ndGgoKVxuICAgICAgICBfdGhpczIucXVpbGwuc2V0U2VsZWN0aW9uKGRlbHRhLmxlbmd0aCgpIC0gcmFuZ2UubGVuZ3RoLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpO1xuICAgICAgICBfdGhpczIucXVpbGwuc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgICAgX3RoaXMyLnF1aWxsLmZvY3VzKCk7XG4gICAgICB9LCAxKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwcmVwYXJlTWF0Y2hpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVwYXJlTWF0Y2hpbmcoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuICAgICAgICAgIHRleHRNYXRjaGVycyA9IFtdO1xuICAgICAgdGhpcy5tYXRjaGVycy5mb3JFYWNoKGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgICAgIHZhciBfcGFpciA9IF9zbGljZWRUb0FycmF5KHBhaXIsIDIpLFxuICAgICAgICAgICAgc2VsZWN0b3IgPSBfcGFpclswXSxcbiAgICAgICAgICAgIG1hdGNoZXIgPSBfcGFpclsxXTtcblxuICAgICAgICBzd2l0Y2ggKHNlbGVjdG9yKSB7XG4gICAgICAgICAgY2FzZSBOb2RlLlRFWFRfTk9ERTpcbiAgICAgICAgICAgIHRleHRNYXRjaGVycy5wdXNoKG1hdGNoZXIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpcbiAgICAgICAgICAgIGVsZW1lbnRNYXRjaGVycy5wdXNoKG1hdGNoZXIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChfdGhpczMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAvLyBUT0RPIHVzZSB3ZWFrbWFwXG4gICAgICAgICAgICAgIG5vZGVbRE9NX0tFWV0gPSBub2RlW0RPTV9LRVldIHx8IFtdO1xuICAgICAgICAgICAgICBub2RlW0RPTV9LRVldLnB1c2gobWF0Y2hlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBbZWxlbWVudE1hdGNoZXJzLCB0ZXh0TWF0Y2hlcnNdO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDbGlwYm9hcmQ7XG59KF9tb2R1bGUyLmRlZmF1bHQpO1xuXG5DbGlwYm9hcmQuREVGQVVMVFMgPSB7XG4gIG1hdGNoZXJzOiBbXSxcbiAgbWF0Y2hWaXN1YWw6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGFwcGx5Rm9ybWF0KGRlbHRhLCBmb3JtYXQsIHZhbHVlKSB7XG4gIGlmICgodHlwZW9mIGZvcm1hdCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZm9ybWF0KSkgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGZvcm1hdCkucmVkdWNlKGZ1bmN0aW9uIChkZWx0YSwga2V5KSB7XG4gICAgICByZXR1cm4gYXBwbHlGb3JtYXQoZGVsdGEsIGtleSwgZm9ybWF0W2tleV0pO1xuICAgIH0sIGRlbHRhKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZGVsdGEucmVkdWNlKGZ1bmN0aW9uIChkZWx0YSwgb3ApIHtcbiAgICAgIGlmIChvcC5hdHRyaWJ1dGVzICYmIG9wLmF0dHJpYnV0ZXNbZm9ybWF0XSkge1xuICAgICAgICByZXR1cm4gZGVsdGEucHVzaChvcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVsdGEuaW5zZXJ0KG9wLmluc2VydCwgKDAsIF9leHRlbmQzLmRlZmF1bHQpKHt9LCBfZGVmaW5lUHJvcGVydHkoe30sIGZvcm1hdCwgdmFsdWUpLCBvcC5hdHRyaWJ1dGVzKSk7XG4gICAgICB9XG4gICAgfSwgbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZShub2RlKSB7XG4gIGlmIChub2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkgcmV0dXJuIHt9O1xuICB2YXIgRE9NX0tFWSA9ICdfX3FsLWNvbXB1dGVkLXN0eWxlJztcbiAgcmV0dXJuIG5vZGVbRE9NX0tFWV0gfHwgKG5vZGVbRE9NX0tFWV0gPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKSk7XG59XG5cbmZ1bmN0aW9uIGRlbHRhRW5kc1dpdGgoZGVsdGEsIHRleHQpIHtcbiAgdmFyIGVuZFRleHQgPSBcIlwiO1xuICBmb3IgKHZhciBpID0gZGVsdGEub3BzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiBlbmRUZXh0Lmxlbmd0aCA8IHRleHQubGVuZ3RoOyAtLWkpIHtcbiAgICB2YXIgb3AgPSBkZWx0YS5vcHNbaV07XG4gICAgaWYgKHR5cGVvZiBvcC5pbnNlcnQgIT09ICdzdHJpbmcnKSBicmVhaztcbiAgICBlbmRUZXh0ID0gb3AuaW5zZXJ0ICsgZW5kVGV4dDtcbiAgfVxuICByZXR1cm4gZW5kVGV4dC5zbGljZSgtMSAqIHRleHQubGVuZ3RoKSA9PT0gdGV4dDtcbn1cblxuZnVuY3Rpb24gaXNMaW5lKG5vZGUpIHtcbiAgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZTsgLy8gRXhjbHVkZSBlbWJlZCBibG9ja3NcbiAgdmFyIHN0eWxlID0gY29tcHV0ZVN0eWxlKG5vZGUpO1xuICByZXR1cm4gWydibG9jaycsICdsaXN0LWl0ZW0nXS5pbmRleE9mKHN0eWxlLmRpc3BsYXkpID4gLTE7XG59XG5cbmZ1bmN0aW9uIHRyYXZlcnNlKG5vZGUsIGVsZW1lbnRNYXRjaGVycywgdGV4dE1hdGNoZXJzKSB7XG4gIC8vIFBvc3Qtb3JkZXJcbiAgaWYgKG5vZGUubm9kZVR5cGUgPT09IG5vZGUuVEVYVF9OT0RFKSB7XG4gICAgcmV0dXJuIHRleHRNYXRjaGVycy5yZWR1Y2UoZnVuY3Rpb24gKGRlbHRhLCBtYXRjaGVyKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlcihub2RlLCBkZWx0YSk7XG4gICAgfSwgbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkpO1xuICB9IGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IG5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgcmV0dXJuIFtdLnJlZHVjZS5jYWxsKG5vZGUuY2hpbGROb2RlcyB8fCBbXSwgZnVuY3Rpb24gKGRlbHRhLCBjaGlsZE5vZGUpIHtcbiAgICAgIHZhciBjaGlsZHJlbkRlbHRhID0gdHJhdmVyc2UoY2hpbGROb2RlLCBlbGVtZW50TWF0Y2hlcnMsIHRleHRNYXRjaGVycyk7XG4gICAgICBpZiAoY2hpbGROb2RlLm5vZGVUeXBlID09PSBub2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICBjaGlsZHJlbkRlbHRhID0gZWxlbWVudE1hdGNoZXJzLnJlZHVjZShmdW5jdGlvbiAoY2hpbGRyZW5EZWx0YSwgbWF0Y2hlcikge1xuICAgICAgICAgIHJldHVybiBtYXRjaGVyKGNoaWxkTm9kZSwgY2hpbGRyZW5EZWx0YSk7XG4gICAgICAgIH0sIGNoaWxkcmVuRGVsdGEpO1xuICAgICAgICBjaGlsZHJlbkRlbHRhID0gKGNoaWxkTm9kZVtET01fS0VZXSB8fCBbXSkucmVkdWNlKGZ1bmN0aW9uIChjaGlsZHJlbkRlbHRhLCBtYXRjaGVyKSB7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoZXIoY2hpbGROb2RlLCBjaGlsZHJlbkRlbHRhKTtcbiAgICAgICAgfSwgY2hpbGRyZW5EZWx0YSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVsdGEuY29uY2F0KGNoaWxkcmVuRGVsdGEpO1xuICAgIH0sIG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF0Y2hBbGlhcyhmb3JtYXQsIG5vZGUsIGRlbHRhKSB7XG4gIHJldHVybiBhcHBseUZvcm1hdChkZWx0YSwgZm9ybWF0LCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hBdHRyaWJ1dG9yKG5vZGUsIGRlbHRhKSB7XG4gIHZhciBhdHRyaWJ1dGVzID0gX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLkF0dHJpYnV0ZS5rZXlzKG5vZGUpO1xuICB2YXIgY2xhc3NlcyA9IF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5DbGFzcy5rZXlzKG5vZGUpO1xuICB2YXIgc3R5bGVzID0gX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLlN0eWxlLmtleXMobm9kZSk7XG4gIHZhciBmb3JtYXRzID0ge307XG4gIGF0dHJpYnV0ZXMuY29uY2F0KGNsYXNzZXMpLmNvbmNhdChzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgYXR0ciA9IF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkobmFtZSwgX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5BVFRSSUJVVEUpO1xuICAgIGlmIChhdHRyICE9IG51bGwpIHtcbiAgICAgIGZvcm1hdHNbYXR0ci5hdHRyTmFtZV0gPSBhdHRyLnZhbHVlKG5vZGUpO1xuICAgICAgaWYgKGZvcm1hdHNbYXR0ci5hdHRyTmFtZV0pIHJldHVybjtcbiAgICB9XG4gICAgYXR0ciA9IEFUVFJJQlVURV9BVFRSSUJVVE9SU1tuYW1lXTtcbiAgICBpZiAoYXR0ciAhPSBudWxsICYmIChhdHRyLmF0dHJOYW1lID09PSBuYW1lIHx8IGF0dHIua2V5TmFtZSA9PT0gbmFtZSkpIHtcbiAgICAgIGZvcm1hdHNbYXR0ci5hdHRyTmFtZV0gPSBhdHRyLnZhbHVlKG5vZGUpIHx8IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgYXR0ciA9IFNUWUxFX0FUVFJJQlVUT1JTW25hbWVdO1xuICAgIGlmIChhdHRyICE9IG51bGwgJiYgKGF0dHIuYXR0ck5hbWUgPT09IG5hbWUgfHwgYXR0ci5rZXlOYW1lID09PSBuYW1lKSkge1xuICAgICAgYXR0ciA9IFNUWUxFX0FUVFJJQlVUT1JTW25hbWVdO1xuICAgICAgZm9ybWF0c1thdHRyLmF0dHJOYW1lXSA9IGF0dHIudmFsdWUobm9kZSkgfHwgdW5kZWZpbmVkO1xuICAgIH1cbiAgfSk7XG4gIGlmIChPYmplY3Qua2V5cyhmb3JtYXRzKS5sZW5ndGggPiAwKSB7XG4gICAgZGVsdGEgPSBhcHBseUZvcm1hdChkZWx0YSwgZm9ybWF0cyk7XG4gIH1cbiAgcmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBtYXRjaEJsb3Qobm9kZSwgZGVsdGEpIHtcbiAgdmFyIG1hdGNoID0gX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeShub2RlKTtcbiAgaWYgKG1hdGNoID09IG51bGwpIHJldHVybiBkZWx0YTtcbiAgaWYgKG1hdGNoLnByb3RvdHlwZSBpbnN0YW5jZW9mIF9wYXJjaG1lbnQyLmRlZmF1bHQuRW1iZWQpIHtcbiAgICB2YXIgZW1iZWQgPSB7fTtcbiAgICB2YXIgdmFsdWUgPSBtYXRjaC52YWx1ZShub2RlKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgZW1iZWRbbWF0Y2guYmxvdE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWx0YSA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLmluc2VydChlbWJlZCwgbWF0Y2guZm9ybWF0cyhub2RlKSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBtYXRjaC5mb3JtYXRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZGVsdGEgPSBhcHBseUZvcm1hdChkZWx0YSwgbWF0Y2guYmxvdE5hbWUsIG1hdGNoLmZvcm1hdHMobm9kZSkpO1xuICB9XG4gIHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hCcmVhayhub2RlLCBkZWx0YSkge1xuICBpZiAoIWRlbHRhRW5kc1dpdGgoZGVsdGEsICdcXG4nKSkge1xuICAgIGRlbHRhLmluc2VydCgnXFxuJyk7XG4gIH1cbiAgcmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBtYXRjaElnbm9yZSgpIHtcbiAgcmV0dXJuIG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpO1xufVxuXG5mdW5jdGlvbiBtYXRjaEluZGVudChub2RlLCBkZWx0YSkge1xuICB2YXIgbWF0Y2ggPSBfcGFyY2htZW50Mi5kZWZhdWx0LnF1ZXJ5KG5vZGUpO1xuICBpZiAobWF0Y2ggPT0gbnVsbCB8fCBtYXRjaC5ibG90TmFtZSAhPT0gJ2xpc3QtaXRlbScgfHwgIWRlbHRhRW5kc1dpdGgoZGVsdGEsICdcXG4nKSkge1xuICAgIHJldHVybiBkZWx0YTtcbiAgfVxuICB2YXIgaW5kZW50ID0gLTEsXG4gICAgICBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gIHdoaWxlICghcGFyZW50LmNsYXNzTGlzdC5jb250YWlucygncWwtY2xpcGJvYXJkJykpIHtcbiAgICBpZiAoKF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkocGFyZW50KSB8fCB7fSkuYmxvdE5hbWUgPT09ICdsaXN0Jykge1xuICAgICAgaW5kZW50ICs9IDE7XG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICB9XG4gIGlmIChpbmRlbnQgPD0gMCkgcmV0dXJuIGRlbHRhO1xuICByZXR1cm4gZGVsdGEuY29tcG9zZShuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5yZXRhaW4oZGVsdGEubGVuZ3RoKCkgLSAxKS5yZXRhaW4oMSwgeyBpbmRlbnQ6IGluZGVudCB9KSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoTmV3bGluZShub2RlLCBkZWx0YSkge1xuICBpZiAoIWRlbHRhRW5kc1dpdGgoZGVsdGEsICdcXG4nKSkge1xuICAgIGlmIChpc0xpbmUobm9kZSkgfHwgZGVsdGEubGVuZ3RoKCkgPiAwICYmIG5vZGUubmV4dFNpYmxpbmcgJiYgaXNMaW5lKG5vZGUubmV4dFNpYmxpbmcpKSB7XG4gICAgICBkZWx0YS5pbnNlcnQoJ1xcbicpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIG1hdGNoU3BhY2luZyhub2RlLCBkZWx0YSkge1xuICBpZiAoaXNMaW5lKG5vZGUpICYmIG5vZGUubmV4dEVsZW1lbnRTaWJsaW5nICE9IG51bGwgJiYgIWRlbHRhRW5kc1dpdGgoZGVsdGEsICdcXG5cXG4nKSkge1xuICAgIHZhciBub2RlSGVpZ2h0ID0gbm9kZS5vZmZzZXRIZWlnaHQgKyBwYXJzZUZsb2F0KGNvbXB1dGVTdHlsZShub2RlKS5tYXJnaW5Ub3ApICsgcGFyc2VGbG9hdChjb21wdXRlU3R5bGUobm9kZSkubWFyZ2luQm90dG9tKTtcbiAgICBpZiAobm9kZS5uZXh0RWxlbWVudFNpYmxpbmcub2Zmc2V0VG9wID4gbm9kZS5vZmZzZXRUb3AgKyBub2RlSGVpZ2h0ICogMS41KSB7XG4gICAgICBkZWx0YS5pbnNlcnQoJ1xcbicpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIG1hdGNoU3R5bGVzKG5vZGUsIGRlbHRhKSB7XG4gIHZhciBmb3JtYXRzID0ge307XG4gIHZhciBzdHlsZSA9IG5vZGUuc3R5bGUgfHwge307XG4gIGlmIChzdHlsZS5mb250U3R5bGUgJiYgY29tcHV0ZVN0eWxlKG5vZGUpLmZvbnRTdHlsZSA9PT0gJ2l0YWxpYycpIHtcbiAgICBmb3JtYXRzLml0YWxpYyA9IHRydWU7XG4gIH1cbiAgaWYgKHN0eWxlLmZvbnRXZWlnaHQgJiYgKGNvbXB1dGVTdHlsZShub2RlKS5mb250V2VpZ2h0LnN0YXJ0c1dpdGgoJ2JvbGQnKSB8fCBwYXJzZUludChjb21wdXRlU3R5bGUobm9kZSkuZm9udFdlaWdodCkgPj0gNzAwKSkge1xuICAgIGZvcm1hdHMuYm9sZCA9IHRydWU7XG4gIH1cbiAgaWYgKE9iamVjdC5rZXlzKGZvcm1hdHMpLmxlbmd0aCA+IDApIHtcbiAgICBkZWx0YSA9IGFwcGx5Rm9ybWF0KGRlbHRhLCBmb3JtYXRzKTtcbiAgfVxuICBpZiAocGFyc2VGbG9hdChzdHlsZS50ZXh0SW5kZW50IHx8IDApID4gMCkge1xuICAgIC8vIENvdWxkIGJlIDAuNWluXG4gICAgZGVsdGEgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5pbnNlcnQoJ1xcdCcpLmNvbmNhdChkZWx0YSk7XG4gIH1cbiAgcmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBtYXRjaFRleHQobm9kZSwgZGVsdGEpIHtcbiAgdmFyIHRleHQgPSBub2RlLmRhdGE7XG4gIC8vIFdvcmQgcmVwcmVzZW50cyBlbXB0eSBsaW5lIHdpdGggPG86cD4mbmJzcDs8L286cD5cbiAgaWYgKG5vZGUucGFyZW50Tm9kZS50YWdOYW1lID09PSAnTzpQJykge1xuICAgIHJldHVybiBkZWx0YS5pbnNlcnQodGV4dC50cmltKCkpO1xuICB9XG4gIGlmICh0ZXh0LnRyaW0oKS5sZW5ndGggPT09IDAgJiYgbm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC5jb250YWlucygncWwtY2xpcGJvYXJkJykpIHtcbiAgICByZXR1cm4gZGVsdGE7XG4gIH1cbiAgaWYgKCFjb21wdXRlU3R5bGUobm9kZS5wYXJlbnROb2RlKS53aGl0ZVNwYWNlLnN0YXJ0c1dpdGgoJ3ByZScpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtc3R5bGVcbiAgICB2YXIgcmVwbGFjZXIgPSBmdW5jdGlvbiByZXBsYWNlcihjb2xsYXBzZSwgbWF0Y2gpIHtcbiAgICAgIG1hdGNoID0gbWF0Y2gucmVwbGFjZSgvW15cXHUwMGEwXS9nLCAnJyk7IC8vIFxcdTAwYTAgaXMgbmJzcDtcbiAgICAgIHJldHVybiBtYXRjaC5sZW5ndGggPCAxICYmIGNvbGxhcHNlID8gJyAnIDogbWF0Y2g7XG4gICAgfTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHJcXG4vZywgJyAnKS5yZXBsYWNlKC9cXG4vZywgJyAnKTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHNcXHMrL2csIHJlcGxhY2VyLmJpbmQocmVwbGFjZXIsIHRydWUpKTsgLy8gY29sbGFwc2Ugd2hpdGVzcGFjZVxuICAgIGlmIChub2RlLnByZXZpb3VzU2libGluZyA9PSBudWxsICYmIGlzTGluZShub2RlLnBhcmVudE5vZGUpIHx8IG5vZGUucHJldmlvdXNTaWJsaW5nICE9IG51bGwgJiYgaXNMaW5lKG5vZGUucHJldmlvdXNTaWJsaW5nKSkge1xuICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXlxccysvLCByZXBsYWNlci5iaW5kKHJlcGxhY2VyLCBmYWxzZSkpO1xuICAgIH1cbiAgICBpZiAobm9kZS5uZXh0U2libGluZyA9PSBudWxsICYmIGlzTGluZShub2RlLnBhcmVudE5vZGUpIHx8IG5vZGUubmV4dFNpYmxpbmcgIT0gbnVsbCAmJiBpc0xpbmUobm9kZS5uZXh0U2libGluZykpIHtcbiAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xccyskLywgcmVwbGFjZXIuYmluZChyZXBsYWNlciwgZmFsc2UpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlbHRhLmluc2VydCh0ZXh0KTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gQ2xpcGJvYXJkO1xuZXhwb3J0cy5tYXRjaEF0dHJpYnV0b3IgPSBtYXRjaEF0dHJpYnV0b3I7XG5leHBvcnRzLm1hdGNoQmxvdCA9IG1hdGNoQmxvdDtcbmV4cG9ydHMubWF0Y2hOZXdsaW5lID0gbWF0Y2hOZXdsaW5lO1xuZXhwb3J0cy5tYXRjaFNwYWNpbmcgPSBtYXRjaFNwYWNpbmc7XG5leHBvcnRzLm1hdGNoVGV4dCA9IG1hdGNoVGV4dDtcblxuLyoqKi8gfSksXG4vKiA1NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfaW5saW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxudmFyIF9pbmxpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5saW5lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQm9sZCA9IGZ1bmN0aW9uIChfSW5saW5lKSB7XG4gIF9pbmhlcml0cyhCb2xkLCBfSW5saW5lKTtcblxuICBmdW5jdGlvbiBCb2xkKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCb2xkKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQm9sZC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJvbGQpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCb2xkLCBbe1xuICAgIGtleTogJ29wdGltaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3B0aW1pemUoY29udGV4dCkge1xuICAgICAgX2dldChCb2xkLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJvbGQucHJvdG90eXBlKSwgJ29wdGltaXplJywgdGhpcykuY2FsbCh0aGlzLCBjb250ZXh0KTtcbiAgICAgIGlmICh0aGlzLmRvbU5vZGUudGFnTmFtZSAhPT0gdGhpcy5zdGF0aWNzLnRhZ05hbWVbMF0pIHtcbiAgICAgICAgdGhpcy5yZXBsYWNlV2l0aCh0aGlzLnN0YXRpY3MuYmxvdE5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAnY3JlYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgcmV0dXJuIF9nZXQoQm9sZC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJvbGQpLCAnY3JlYXRlJywgdGhpcykuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0cygpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCb2xkO1xufShfaW5saW5lMi5kZWZhdWx0KTtcblxuQm9sZC5ibG90TmFtZSA9ICdib2xkJztcbkJvbGQudGFnTmFtZSA9IFsnU1RST05HJywgJ0InXTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQm9sZDtcblxuLyoqKi8gfSksXG4vKiA1NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hZGRDb250cm9scyA9IGV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3F1aWxsRGVsdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3F1aWxsRGVsdGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGxEZWx0YSk7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9xdWlsbCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfcXVpbGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGwpO1xuXG52YXIgX2xvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG52YXIgX2xvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dnZXIpO1xuXG52YXIgX21vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfbW9kdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vZHVsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGRlYnVnID0gKDAsIF9sb2dnZXIyLmRlZmF1bHQpKCdxdWlsbDp0b29sYmFyJyk7XG5cbnZhciBUb29sYmFyID0gZnVuY3Rpb24gKF9Nb2R1bGUpIHtcbiAgX2luaGVyaXRzKFRvb2xiYXIsIF9Nb2R1bGUpO1xuXG4gIGZ1bmN0aW9uIFRvb2xiYXIocXVpbGwsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9vbGJhcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVG9vbGJhci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRvb2xiYXIpKS5jYWxsKHRoaXMsIHF1aWxsLCBvcHRpb25zKSk7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShfdGhpcy5vcHRpb25zLmNvbnRhaW5lcikpIHtcbiAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGFkZENvbnRyb2xzKGNvbnRhaW5lciwgX3RoaXMub3B0aW9ucy5jb250YWluZXIpO1xuICAgICAgcXVpbGwuY29udGFpbmVyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgcXVpbGwuY29udGFpbmVyKTtcbiAgICAgIF90aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBfdGhpcy5vcHRpb25zLmNvbnRhaW5lciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIF90aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoX3RoaXMub3B0aW9ucy5jb250YWluZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5jb250YWluZXIgPSBfdGhpcy5vcHRpb25zLmNvbnRhaW5lcjtcbiAgICB9XG4gICAgaWYgKCEoX3RoaXMuY29udGFpbmVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgICB2YXIgX3JldDtcblxuICAgICAgcmV0dXJuIF9yZXQgPSBkZWJ1Zy5lcnJvcignQ29udGFpbmVyIHJlcXVpcmVkIGZvciB0b29sYmFyJywgX3RoaXMub3B0aW9ucyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG4gICAgX3RoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3FsLXRvb2xiYXInKTtcbiAgICBfdGhpcy5jb250cm9scyA9IFtdO1xuICAgIF90aGlzLmhhbmRsZXJzID0ge307XG4gICAgT2JqZWN0LmtleXMoX3RoaXMub3B0aW9ucy5oYW5kbGVycykuZm9yRWFjaChmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICBfdGhpcy5hZGRIYW5kbGVyKGZvcm1hdCwgX3RoaXMub3B0aW9ucy5oYW5kbGVyc1tmb3JtYXRdKTtcbiAgICB9KTtcbiAgICBbXS5mb3JFYWNoLmNhbGwoX3RoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbiwgc2VsZWN0JyksIGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgX3RoaXMuYXR0YWNoKGlucHV0KTtcbiAgICB9KTtcbiAgICBfdGhpcy5xdWlsbC5vbihfcXVpbGwyLmRlZmF1bHQuZXZlbnRzLkVESVRPUl9DSEFOR0UsIGZ1bmN0aW9uICh0eXBlLCByYW5nZSkge1xuICAgICAgaWYgKHR5cGUgPT09IF9xdWlsbDIuZGVmYXVsdC5ldmVudHMuU0VMRUNUSU9OX0NIQU5HRSkge1xuICAgICAgICBfdGhpcy51cGRhdGUocmFuZ2UpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF90aGlzLnF1aWxsLm9uKF9xdWlsbDIuZGVmYXVsdC5ldmVudHMuU0NST0xMX09QVElNSVpFLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcXVpbGwkc2VsZWN0aW9uID0gX3RoaXMucXVpbGwuc2VsZWN0aW9uLmdldFJhbmdlKCksXG4gICAgICAgICAgX3RoaXMkcXVpbGwkc2VsZWN0aW9uMiA9IF9zbGljZWRUb0FycmF5KF90aGlzJHF1aWxsJHNlbGVjdGlvbiwgMSksXG4gICAgICAgICAgcmFuZ2UgPSBfdGhpcyRxdWlsbCRzZWxlY3Rpb24yWzBdOyAvLyBxdWlsbC5nZXRTZWxlY3Rpb24gdHJpZ2dlcnMgdXBkYXRlXG5cblxuICAgICAgX3RoaXMudXBkYXRlKHJhbmdlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVG9vbGJhciwgW3tcbiAgICBrZXk6ICdhZGRIYW5kbGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkSGFuZGxlcihmb3JtYXQsIGhhbmRsZXIpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnNbZm9ybWF0XSA9IGhhbmRsZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYXR0YWNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXR0YWNoKGlucHV0KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGZvcm1hdCA9IFtdLmZpbmQuY2FsbChpbnB1dC5jbGFzc0xpc3QsIGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZS5pbmRleE9mKCdxbC0nKSA9PT0gMDtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFmb3JtYXQpIHJldHVybjtcbiAgICAgIGZvcm1hdCA9IGZvcm1hdC5zbGljZSgncWwtJy5sZW5ndGgpO1xuICAgICAgaWYgKGlucHV0LnRhZ05hbWUgPT09ICdCVVRUT04nKSB7XG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICdidXR0b24nKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmhhbmRsZXJzW2Zvcm1hdF0gPT0gbnVsbCkge1xuICAgICAgICBpZiAodGhpcy5xdWlsbC5zY3JvbGwud2hpdGVsaXN0ICE9IG51bGwgJiYgdGhpcy5xdWlsbC5zY3JvbGwud2hpdGVsaXN0W2Zvcm1hdF0gPT0gbnVsbCkge1xuICAgICAgICAgIGRlYnVnLndhcm4oJ2lnbm9yaW5nIGF0dGFjaGluZyB0byBkaXNhYmxlZCBmb3JtYXQnLCBmb3JtYXQsIGlucHV0KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkoZm9ybWF0KSA9PSBudWxsKSB7XG4gICAgICAgICAgZGVidWcud2FybignaWdub3JpbmcgYXR0YWNoaW5nIHRvIG5vbmV4aXN0ZW50IGZvcm1hdCcsIGZvcm1hdCwgaW5wdXQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGV2ZW50TmFtZSA9IGlucHV0LnRhZ05hbWUgPT09ICdTRUxFQ1QnID8gJ2NoYW5nZScgOiAnY2xpY2snO1xuICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGlucHV0LnRhZ05hbWUgPT09ICdTRUxFQ1QnKSB7XG4gICAgICAgICAgaWYgKGlucHV0LnNlbGVjdGVkSW5kZXggPCAwKSByZXR1cm47XG4gICAgICAgICAgdmFyIHNlbGVjdGVkID0gaW5wdXQub3B0aW9uc1tpbnB1dC5zZWxlY3RlZEluZGV4XTtcbiAgICAgICAgICBpZiAoc2VsZWN0ZWQuaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHNlbGVjdGVkLnZhbHVlIHx8IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1hY3RpdmUnKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBpbnB1dC52YWx1ZSB8fCAhaW5wdXQuaGFzQXR0cmlidXRlKCd2YWx1ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMyLnF1aWxsLmZvY3VzKCk7XG5cbiAgICAgICAgdmFyIF9xdWlsbCRzZWxlY3Rpb24kZ2V0UiA9IF90aGlzMi5xdWlsbC5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcbiAgICAgICAgICAgIF9xdWlsbCRzZWxlY3Rpb24kZ2V0UjIgPSBfc2xpY2VkVG9BcnJheShfcXVpbGwkc2VsZWN0aW9uJGdldFIsIDEpLFxuICAgICAgICAgICAgcmFuZ2UgPSBfcXVpbGwkc2VsZWN0aW9uJGdldFIyWzBdO1xuXG4gICAgICAgIGlmIChfdGhpczIuaGFuZGxlcnNbZm9ybWF0XSAhPSBudWxsKSB7XG4gICAgICAgICAgX3RoaXMyLmhhbmRsZXJzW2Zvcm1hdF0uY2FsbChfdGhpczIsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChfcGFyY2htZW50Mi5kZWZhdWx0LnF1ZXJ5KGZvcm1hdCkucHJvdG90eXBlIGluc3RhbmNlb2YgX3BhcmNobWVudDIuZGVmYXVsdC5FbWJlZCkge1xuICAgICAgICAgIHZhbHVlID0gcHJvbXB0KCdFbnRlciAnICsgZm9ybWF0KTtcbiAgICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm47XG4gICAgICAgICAgX3RoaXMyLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihyYW5nZS5pbmRleCkuZGVsZXRlKHJhbmdlLmxlbmd0aCkuaW5zZXJ0KF9kZWZpbmVQcm9wZXJ0eSh7fSwgZm9ybWF0LCB2YWx1ZSkpLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczIucXVpbGwuZm9ybWF0KGZvcm1hdCwgdmFsdWUsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzMi51cGRhdGUocmFuZ2UpO1xuICAgICAgfSk7XG4gICAgICAvLyBUT0RPIHVzZSB3ZWFrbWFwXG4gICAgICB0aGlzLmNvbnRyb2xzLnB1c2goW2Zvcm1hdCwgaW5wdXRdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUocmFuZ2UpIHtcbiAgICAgIHZhciBmb3JtYXRzID0gcmFuZ2UgPT0gbnVsbCA/IHt9IDogdGhpcy5xdWlsbC5nZXRGb3JtYXQocmFuZ2UpO1xuICAgICAgdGhpcy5jb250cm9scy5mb3JFYWNoKGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgICAgIHZhciBfcGFpciA9IF9zbGljZWRUb0FycmF5KHBhaXIsIDIpLFxuICAgICAgICAgICAgZm9ybWF0ID0gX3BhaXJbMF0sXG4gICAgICAgICAgICBpbnB1dCA9IF9wYWlyWzFdO1xuXG4gICAgICAgIGlmIChpbnB1dC50YWdOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgICAgIHZhciBvcHRpb24gPSB2b2lkIDA7XG4gICAgICAgICAgaWYgKHJhbmdlID09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbiA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXRzW2Zvcm1hdF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9uID0gaW5wdXQucXVlcnlTZWxlY3Rvcignb3B0aW9uW3NlbGVjdGVkXScpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoZm9ybWF0c1tmb3JtYXRdKSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gZm9ybWF0c1tmb3JtYXRdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXFwiL2csICdcXFxcXCInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbiA9IGlucHV0LnF1ZXJ5U2VsZWN0b3IoJ29wdGlvblt2YWx1ZT1cIicgKyB2YWx1ZSArICdcIl0nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9wdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICBpbnB1dC52YWx1ZSA9ICcnOyAvLyBUT0RPIG1ha2UgY29uZmlndXJhYmxlP1xuICAgICAgICAgICAgaW5wdXQuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocmFuZ2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSgncWwtYWN0aXZlJyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5oYXNBdHRyaWJ1dGUoJ3ZhbHVlJykpIHtcbiAgICAgICAgICAgIC8vIGJvdGggYmVpbmcgbnVsbCBzaG91bGQgbWF0Y2ggKGRlZmF1bHQgdmFsdWVzKVxuICAgICAgICAgICAgLy8gJzEnIHNob3VsZCBtYXRjaCB3aXRoIDEgKGhlYWRlcnMpXG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBmb3JtYXRzW2Zvcm1hdF0gPT09IGlucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSB8fCBmb3JtYXRzW2Zvcm1hdF0gIT0gbnVsbCAmJiBmb3JtYXRzW2Zvcm1hdF0udG9TdHJpbmcoKSA9PT0gaW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpIHx8IGZvcm1hdHNbZm9ybWF0XSA9PSBudWxsICYmICFpbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QudG9nZ2xlKCdxbC1hY3RpdmUnLCBpc0FjdGl2ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0LmNsYXNzTGlzdC50b2dnbGUoJ3FsLWFjdGl2ZScsIGZvcm1hdHNbZm9ybWF0XSAhPSBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUb29sYmFyO1xufShfbW9kdWxlMi5kZWZhdWx0KTtcblxuVG9vbGJhci5ERUZBVUxUUyA9IHt9O1xuXG5mdW5jdGlvbiBhZGRCdXR0b24oY29udGFpbmVyLCBmb3JtYXQsIHZhbHVlKSB7XG4gIHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYnV0dG9uJyk7XG4gIGlucHV0LmNsYXNzTGlzdC5hZGQoJ3FsLScgKyBmb3JtYXQpO1xuICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgIGlucHV0LnZhbHVlID0gdmFsdWU7XG4gIH1cbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGlucHV0KTtcbn1cblxuZnVuY3Rpb24gYWRkQ29udHJvbHMoY29udGFpbmVyLCBncm91cHMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGdyb3Vwc1swXSkpIHtcbiAgICBncm91cHMgPSBbZ3JvdXBzXTtcbiAgfVxuICBncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICB2YXIgZ3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgZ3JvdXAuY2xhc3NMaXN0LmFkZCgncWwtZm9ybWF0cycpO1xuICAgIGNvbnRyb2xzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2wpIHtcbiAgICAgIGlmICh0eXBlb2YgY29udHJvbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYWRkQnV0dG9uKGdyb3VwLCBjb250cm9sKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSBPYmplY3Qua2V5cyhjb250cm9sKVswXTtcbiAgICAgICAgdmFyIHZhbHVlID0gY29udHJvbFtmb3JtYXRdO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICBhZGRTZWxlY3QoZ3JvdXAsIGZvcm1hdCwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZEJ1dHRvbihncm91cCwgZm9ybWF0LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZ3JvdXApO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkU2VsZWN0KGNvbnRhaW5lciwgZm9ybWF0LCB2YWx1ZXMpIHtcbiAgdmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XG4gIGlucHV0LmNsYXNzTGlzdC5hZGQoJ3FsLScgKyBmb3JtYXQpO1xuICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgaWYgKHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZSgndmFsdWUnLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgfVxuICAgIGlucHV0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gIH0pO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaW5wdXQpO1xufVxuXG5Ub29sYmFyLkRFRkFVTFRTID0ge1xuICBjb250YWluZXI6IG51bGwsXG4gIGhhbmRsZXJzOiB7XG4gICAgY2xlYW46IGZ1bmN0aW9uIGNsZWFuKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciByYW5nZSA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICBpZiAocmFuZ2UgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgaWYgKHJhbmdlLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHZhciBmb3JtYXRzID0gdGhpcy5xdWlsbC5nZXRGb3JtYXQoKTtcbiAgICAgICAgT2JqZWN0LmtleXMoZm9ybWF0cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIC8vIENsZWFuIGZ1bmN0aW9uYWxpdHkgaW4gZXhpc3RpbmcgYXBwcyBvbmx5IGNsZWFuIGlubGluZSBmb3JtYXRzXG4gICAgICAgICAgaWYgKF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkobmFtZSwgX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5JTkxJTkUpICE9IG51bGwpIHtcbiAgICAgICAgICAgIF90aGlzMy5xdWlsbC5mb3JtYXQobmFtZSwgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnF1aWxsLnJlbW92ZUZvcm1hdChyYW5nZSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICB9XG4gICAgfSxcbiAgICBkaXJlY3Rpb246IGZ1bmN0aW9uIGRpcmVjdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIGFsaWduID0gdGhpcy5xdWlsbC5nZXRGb3JtYXQoKVsnYWxpZ24nXTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJ3J0bCcgJiYgYWxpZ24gPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnYWxpZ24nLCAncmlnaHQnLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH0gZWxzZSBpZiAoIXZhbHVlICYmIGFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdhbGlnbicsIGZhbHNlLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdkaXJlY3Rpb24nLCB2YWx1ZSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgfSxcbiAgICBpbmRlbnQ6IGZ1bmN0aW9uIGluZGVudCh2YWx1ZSkge1xuICAgICAgdmFyIHJhbmdlID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIHZhciBmb3JtYXRzID0gdGhpcy5xdWlsbC5nZXRGb3JtYXQocmFuZ2UpO1xuICAgICAgdmFyIGluZGVudCA9IHBhcnNlSW50KGZvcm1hdHMuaW5kZW50IHx8IDApO1xuICAgICAgaWYgKHZhbHVlID09PSAnKzEnIHx8IHZhbHVlID09PSAnLTEnKSB7XG4gICAgICAgIHZhciBtb2RpZmllciA9IHZhbHVlID09PSAnKzEnID8gMSA6IC0xO1xuICAgICAgICBpZiAoZm9ybWF0cy5kaXJlY3Rpb24gPT09ICdydGwnKSBtb2RpZmllciAqPSAtMTtcbiAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2luZGVudCcsIGluZGVudCArIG1vZGlmaWVyLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICB2YWx1ZSA9IHByb21wdCgnRW50ZXIgbGluayBVUkw6Jyk7XG4gICAgICB9XG4gICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnbGluaycsIHZhbHVlLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICB9LFxuICAgIGxpc3Q6IGZ1bmN0aW9uIGxpc3QodmFsdWUpIHtcbiAgICAgIHZhciByYW5nZSA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICB2YXIgZm9ybWF0cyA9IHRoaXMucXVpbGwuZ2V0Rm9ybWF0KHJhbmdlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJ2NoZWNrJykge1xuICAgICAgICBpZiAoZm9ybWF0c1snbGlzdCddID09PSAnY2hlY2tlZCcgfHwgZm9ybWF0c1snbGlzdCddID09PSAndW5jaGVja2VkJykge1xuICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdsaXN0JywgZmFsc2UsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdsaXN0JywgJ3VuY2hlY2tlZCcsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnbGlzdCcsIHZhbHVlLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFRvb2xiYXI7XG5leHBvcnRzLmFkZENvbnRyb2xzID0gYWRkQ29udHJvbHM7XG5cbi8qKiovIH0pLFxuLyogNTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBvbHlsaW5lIGNsYXNzPVxcXCJxbC1ldmVuIHFsLXN0cm9rZVxcXCIgcG9pbnRzPVxcXCI1IDcgMyA5IDUgMTFcXFwiPjwvcG9seWxpbmU+IDxwb2x5bGluZSBjbGFzcz1cXFwicWwtZXZlbiBxbC1zdHJva2VcXFwiIHBvaW50cz1cXFwiMTMgNyAxNSA5IDEzIDExXFxcIj48L3BvbHlsaW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTAgeDI9OCB5MT01IHkyPTEzPjwvbGluZT4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogNTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX3BpY2tlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpO1xuXG52YXIgX3BpY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9waWNrZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBDb2xvclBpY2tlciA9IGZ1bmN0aW9uIChfUGlja2VyKSB7XG4gIF9pbmhlcml0cyhDb2xvclBpY2tlciwgX1BpY2tlcik7XG5cbiAgZnVuY3Rpb24gQ29sb3JQaWNrZXIoc2VsZWN0LCBsYWJlbCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xvclBpY2tlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ29sb3JQaWNrZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb2xvclBpY2tlcikpLmNhbGwodGhpcywgc2VsZWN0KSk7XG5cbiAgICBfdGhpcy5sYWJlbC5pbm5lckhUTUwgPSBsYWJlbDtcbiAgICBfdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncWwtY29sb3ItcGlja2VyJyk7XG4gICAgW10uc2xpY2UuY2FsbChfdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnFsLXBpY2tlci1pdGVtJyksIDAsIDcpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgncWwtcHJpbWFyeScpO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb2xvclBpY2tlciwgW3tcbiAgICBrZXk6ICdidWlsZEl0ZW0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZEl0ZW0ob3B0aW9uKSB7XG4gICAgICB2YXIgaXRlbSA9IF9nZXQoQ29sb3JQaWNrZXIucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29sb3JQaWNrZXIucHJvdG90eXBlKSwgJ2J1aWxkSXRlbScsIHRoaXMpLmNhbGwodGhpcywgb3B0aW9uKTtcbiAgICAgIGl0ZW0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gb3B0aW9uLmdldEF0dHJpYnV0ZSgndmFsdWUnKSB8fCAnJztcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NlbGVjdEl0ZW0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWxlY3RJdGVtKGl0ZW0sIHRyaWdnZXIpIHtcbiAgICAgIF9nZXQoQ29sb3JQaWNrZXIucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29sb3JQaWNrZXIucHJvdG90eXBlKSwgJ3NlbGVjdEl0ZW0nLCB0aGlzKS5jYWxsKHRoaXMsIGl0ZW0sIHRyaWdnZXIpO1xuICAgICAgdmFyIGNvbG9yTGFiZWwgPSB0aGlzLmxhYmVsLnF1ZXJ5U2VsZWN0b3IoJy5xbC1jb2xvci1sYWJlbCcpO1xuICAgICAgdmFyIHZhbHVlID0gaXRlbSA/IGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykgfHwgJycgOiAnJztcbiAgICAgIGlmIChjb2xvckxhYmVsKSB7XG4gICAgICAgIGlmIChjb2xvckxhYmVsLnRhZ05hbWUgPT09ICdsaW5lJykge1xuICAgICAgICAgIGNvbG9yTGFiZWwuc3R5bGUuc3Ryb2tlID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29sb3JMYWJlbC5zdHlsZS5maWxsID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29sb3JQaWNrZXI7XG59KF9waWNrZXIyLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDb2xvclBpY2tlcjtcblxuLyoqKi8gfSksXG4vKiA2MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfcGlja2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cbnZhciBfcGlja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BpY2tlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEljb25QaWNrZXIgPSBmdW5jdGlvbiAoX1BpY2tlcikge1xuICBfaW5oZXJpdHMoSWNvblBpY2tlciwgX1BpY2tlcik7XG5cbiAgZnVuY3Rpb24gSWNvblBpY2tlcihzZWxlY3QsIGljb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEljb25QaWNrZXIpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEljb25QaWNrZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJY29uUGlja2VyKSkuY2FsbCh0aGlzLCBzZWxlY3QpKTtcblxuICAgIF90aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdxbC1pY29uLXBpY2tlcicpO1xuICAgIFtdLmZvckVhY2guY2FsbChfdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnFsLXBpY2tlci1pdGVtJyksIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICBpdGVtLmlubmVySFRNTCA9IGljb25zW2l0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykgfHwgJyddO1xuICAgIH0pO1xuICAgIF90aGlzLmRlZmF1bHRJdGVtID0gX3RoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5xbC1zZWxlY3RlZCcpO1xuICAgIF90aGlzLnNlbGVjdEl0ZW0oX3RoaXMuZGVmYXVsdEl0ZW0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhJY29uUGlja2VyLCBbe1xuICAgIGtleTogJ3NlbGVjdEl0ZW0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWxlY3RJdGVtKGl0ZW0sIHRyaWdnZXIpIHtcbiAgICAgIF9nZXQoSWNvblBpY2tlci5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJY29uUGlja2VyLnByb3RvdHlwZSksICdzZWxlY3RJdGVtJywgdGhpcykuY2FsbCh0aGlzLCBpdGVtLCB0cmlnZ2VyKTtcbiAgICAgIGl0ZW0gPSBpdGVtIHx8IHRoaXMuZGVmYXVsdEl0ZW07XG4gICAgICB0aGlzLmxhYmVsLmlubmVySFRNTCA9IGl0ZW0uaW5uZXJIVE1MO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJY29uUGlja2VyO1xufShfcGlja2VyMi5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gSWNvblBpY2tlcjtcblxuLyoqKi8gfSksXG4vKiA2MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgVG9vbHRpcCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVG9vbHRpcChxdWlsbCwgYm91bmRzQ29udGFpbmVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb29sdGlwKTtcblxuICAgIHRoaXMucXVpbGwgPSBxdWlsbDtcbiAgICB0aGlzLmJvdW5kc0NvbnRhaW5lciA9IGJvdW5kc0NvbnRhaW5lciB8fCBkb2N1bWVudC5ib2R5O1xuICAgIHRoaXMucm9vdCA9IHF1aWxsLmFkZENvbnRhaW5lcigncWwtdG9vbHRpcCcpO1xuICAgIHRoaXMucm9vdC5pbm5lckhUTUwgPSB0aGlzLmNvbnN0cnVjdG9yLlRFTVBMQVRFO1xuICAgIGlmICh0aGlzLnF1aWxsLnJvb3QgPT09IHRoaXMucXVpbGwuc2Nyb2xsaW5nQ29udGFpbmVyKSB7XG4gICAgICB0aGlzLnF1aWxsLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5yb290LnN0eWxlLm1hcmdpblRvcCA9IC0xICogX3RoaXMucXVpbGwucm9vdC5zY3JvbGxUb3AgKyAncHgnO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuaGlkZSgpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRvb2x0aXAsIFt7XG4gICAga2V5OiAnaGlkZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LmFkZCgncWwtaGlkZGVuJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwb3NpdGlvbihyZWZlcmVuY2UpIHtcbiAgICAgIHZhciBsZWZ0ID0gcmVmZXJlbmNlLmxlZnQgKyByZWZlcmVuY2Uud2lkdGggLyAyIC0gdGhpcy5yb290Lm9mZnNldFdpZHRoIC8gMjtcbiAgICAgIC8vIHJvb3Quc2Nyb2xsVG9wIHNob3VsZCBiZSAwIGlmIHNjcm9sbENvbnRhaW5lciAhPT0gcm9vdFxuICAgICAgdmFyIHRvcCA9IHJlZmVyZW5jZS5ib3R0b20gKyB0aGlzLnF1aWxsLnJvb3Quc2Nyb2xsVG9wO1xuICAgICAgdGhpcy5yb290LnN0eWxlLmxlZnQgPSBsZWZ0ICsgJ3B4JztcbiAgICAgIHRoaXMucm9vdC5zdHlsZS50b3AgPSB0b3AgKyAncHgnO1xuICAgICAgdGhpcy5yb290LmNsYXNzTGlzdC5yZW1vdmUoJ3FsLWZsaXAnKTtcbiAgICAgIHZhciBjb250YWluZXJCb3VuZHMgPSB0aGlzLmJvdW5kc0NvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciByb290Qm91bmRzID0gdGhpcy5yb290LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIHNoaWZ0ID0gMDtcbiAgICAgIGlmIChyb290Qm91bmRzLnJpZ2h0ID4gY29udGFpbmVyQm91bmRzLnJpZ2h0KSB7XG4gICAgICAgIHNoaWZ0ID0gY29udGFpbmVyQm91bmRzLnJpZ2h0IC0gcm9vdEJvdW5kcy5yaWdodDtcbiAgICAgICAgdGhpcy5yb290LnN0eWxlLmxlZnQgPSBsZWZ0ICsgc2hpZnQgKyAncHgnO1xuICAgICAgfVxuICAgICAgaWYgKHJvb3RCb3VuZHMubGVmdCA8IGNvbnRhaW5lckJvdW5kcy5sZWZ0KSB7XG4gICAgICAgIHNoaWZ0ID0gY29udGFpbmVyQm91bmRzLmxlZnQgLSByb290Qm91bmRzLmxlZnQ7XG4gICAgICAgIHRoaXMucm9vdC5zdHlsZS5sZWZ0ID0gbGVmdCArIHNoaWZ0ICsgJ3B4JztcbiAgICAgIH1cbiAgICAgIGlmIChyb290Qm91bmRzLmJvdHRvbSA+IGNvbnRhaW5lckJvdW5kcy5ib3R0b20pIHtcbiAgICAgICAgdmFyIGhlaWdodCA9IHJvb3RCb3VuZHMuYm90dG9tIC0gcm9vdEJvdW5kcy50b3A7XG4gICAgICAgIHZhciB2ZXJ0aWNhbFNoaWZ0ID0gcmVmZXJlbmNlLmJvdHRvbSAtIHJlZmVyZW5jZS50b3AgKyBoZWlnaHQ7XG4gICAgICAgIHRoaXMucm9vdC5zdHlsZS50b3AgPSB0b3AgLSB2ZXJ0aWNhbFNoaWZ0ICsgJ3B4JztcbiAgICAgICAgdGhpcy5yb290LmNsYXNzTGlzdC5hZGQoJ3FsLWZsaXAnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzaGlmdDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzaG93JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgIHRoaXMucm9vdC5jbGFzc0xpc3QucmVtb3ZlKCdxbC1lZGl0aW5nJyk7XG4gICAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZSgncWwtaGlkZGVuJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRvb2x0aXA7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFRvb2x0aXA7XG5cbi8qKiovIH0pLFxuLyogNjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZXh0ZW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9leHRlbmQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kKTtcblxudmFyIF9lbWl0dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxudmFyIF9lbWl0dGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VtaXR0ZXIpO1xuXG52YXIgX2Jhc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKTtcblxudmFyIF9iYXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jhc2UpO1xuXG52YXIgX2xpbmsgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblxudmFyIF9saW5rMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpbmspO1xuXG52YXIgX3NlbGVjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXG52YXIgX2ljb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5cbnZhciBfaWNvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaWNvbnMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBUT09MQkFSX0NPTkZJRyA9IFtbeyBoZWFkZXI6IFsnMScsICcyJywgJzMnLCBmYWxzZV0gfV0sIFsnYm9sZCcsICdpdGFsaWMnLCAndW5kZXJsaW5lJywgJ2xpbmsnXSwgW3sgbGlzdDogJ29yZGVyZWQnIH0sIHsgbGlzdDogJ2J1bGxldCcgfV0sIFsnY2xlYW4nXV07XG5cbnZhciBTbm93VGhlbWUgPSBmdW5jdGlvbiAoX0Jhc2VUaGVtZSkge1xuICBfaW5oZXJpdHMoU25vd1RoZW1lLCBfQmFzZVRoZW1lKTtcblxuICBmdW5jdGlvbiBTbm93VGhlbWUocXVpbGwsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU25vd1RoZW1lKTtcblxuICAgIGlmIChvcHRpb25zLm1vZHVsZXMudG9vbGJhciAhPSBudWxsICYmIG9wdGlvbnMubW9kdWxlcy50b29sYmFyLmNvbnRhaW5lciA9PSBudWxsKSB7XG4gICAgICBvcHRpb25zLm1vZHVsZXMudG9vbGJhci5jb250YWluZXIgPSBUT09MQkFSX0NPTkZJRztcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU25vd1RoZW1lLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU25vd1RoZW1lKSkuY2FsbCh0aGlzLCBxdWlsbCwgb3B0aW9ucykpO1xuXG4gICAgX3RoaXMucXVpbGwuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3FsLXNub3cnKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU25vd1RoZW1lLCBbe1xuICAgIGtleTogJ2V4dGVuZFRvb2xiYXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHRlbmRUb29sYmFyKHRvb2xiYXIpIHtcbiAgICAgIHRvb2xiYXIuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3FsLXNub3cnKTtcbiAgICAgIHRoaXMuYnVpbGRCdXR0b25zKFtdLnNsaWNlLmNhbGwodG9vbGJhci5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJykpLCBfaWNvbnMyLmRlZmF1bHQpO1xuICAgICAgdGhpcy5idWlsZFBpY2tlcnMoW10uc2xpY2UuY2FsbCh0b29sYmFyLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdzZWxlY3QnKSksIF9pY29uczIuZGVmYXVsdCk7XG4gICAgICB0aGlzLnRvb2x0aXAgPSBuZXcgU25vd1Rvb2x0aXAodGhpcy5xdWlsbCwgdGhpcy5vcHRpb25zLmJvdW5kcyk7XG4gICAgICBpZiAodG9vbGJhci5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnFsLWxpbmsnKSkge1xuICAgICAgICB0aGlzLnF1aWxsLmtleWJvYXJkLmFkZEJpbmRpbmcoeyBrZXk6ICdLJywgc2hvcnRLZXk6IHRydWUgfSwgZnVuY3Rpb24gKHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgICAgdG9vbGJhci5oYW5kbGVyc1snbGluayddLmNhbGwodG9vbGJhciwgIWNvbnRleHQuZm9ybWF0LmxpbmspO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU25vd1RoZW1lO1xufShfYmFzZTIuZGVmYXVsdCk7XG5cblNub3dUaGVtZS5ERUZBVUxUUyA9ICgwLCBfZXh0ZW5kMi5kZWZhdWx0KSh0cnVlLCB7fSwgX2Jhc2UyLmRlZmF1bHQuREVGQVVMVFMsIHtcbiAgbW9kdWxlczoge1xuICAgIHRvb2xiYXI6IHtcbiAgICAgIGhhbmRsZXJzOiB7XG4gICAgICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsodmFsdWUpIHtcbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICBpZiAocmFuZ2UgPT0gbnVsbCB8fCByYW5nZS5sZW5ndGggPT0gMCkgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIHByZXZpZXcgPSB0aGlzLnF1aWxsLmdldFRleHQocmFuZ2UpO1xuICAgICAgICAgICAgaWYgKC9eXFxTK0BcXFMrXFwuXFxTKyQvLnRlc3QocHJldmlldykgJiYgcHJldmlldy5pbmRleE9mKCdtYWlsdG86JykgIT09IDApIHtcbiAgICAgICAgICAgICAgcHJldmlldyA9ICdtYWlsdG86JyArIHByZXZpZXc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdG9vbHRpcCA9IHRoaXMucXVpbGwudGhlbWUudG9vbHRpcDtcbiAgICAgICAgICAgIHRvb2x0aXAuZWRpdCgnbGluaycsIHByZXZpZXcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnbGluaycsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgU25vd1Rvb2x0aXAgPSBmdW5jdGlvbiAoX0Jhc2VUb29sdGlwKSB7XG4gIF9pbmhlcml0cyhTbm93VG9vbHRpcCwgX0Jhc2VUb29sdGlwKTtcblxuICBmdW5jdGlvbiBTbm93VG9vbHRpcChxdWlsbCwgYm91bmRzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNub3dUb29sdGlwKTtcblxuICAgIHZhciBfdGhpczIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU25vd1Rvb2x0aXAuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTbm93VG9vbHRpcCkpLmNhbGwodGhpcywgcXVpbGwsIGJvdW5kcykpO1xuXG4gICAgX3RoaXMyLnByZXZpZXcgPSBfdGhpczIucm9vdC5xdWVyeVNlbGVjdG9yKCdhLnFsLXByZXZpZXcnKTtcbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNub3dUb29sdGlwLCBbe1xuICAgIGtleTogJ2xpc3RlbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlbigpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBfZ2V0KFNub3dUb29sdGlwLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNub3dUb29sdGlwLnByb3RvdHlwZSksICdsaXN0ZW4nLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3IoJ2EucWwtYWN0aW9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKF90aGlzMy5yb290LmNsYXNzTGlzdC5jb250YWlucygncWwtZWRpdGluZycpKSB7XG4gICAgICAgICAgX3RoaXMzLnNhdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczMuZWRpdCgnbGluaycsIF90aGlzMy5wcmV2aWV3LnRleHRDb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcignYS5xbC1yZW1vdmUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoX3RoaXMzLmxpbmtSYW5nZSAhPSBudWxsKSB7XG4gICAgICAgICAgdmFyIHJhbmdlID0gX3RoaXMzLmxpbmtSYW5nZTtcbiAgICAgICAgICBfdGhpczMucmVzdG9yZUZvY3VzKCk7XG4gICAgICAgICAgX3RoaXMzLnF1aWxsLmZvcm1hdFRleHQocmFuZ2UsICdsaW5rJywgZmFsc2UsIF9lbWl0dGVyMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgICAgZGVsZXRlIF90aGlzMy5saW5rUmFuZ2U7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3RoaXMzLmhpZGUoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5xdWlsbC5vbihfZW1pdHRlcjIuZGVmYXVsdC5ldmVudHMuU0VMRUNUSU9OX0NIQU5HRSwgZnVuY3Rpb24gKHJhbmdlLCBvbGRSYW5nZSwgc291cmNlKSB7XG4gICAgICAgIGlmIChyYW5nZSA9PSBudWxsKSByZXR1cm47XG4gICAgICAgIGlmIChyYW5nZS5sZW5ndGggPT09IDAgJiYgc291cmNlID09PSBfZW1pdHRlcjIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpIHtcbiAgICAgICAgICB2YXIgX3F1aWxsJHNjcm9sbCRkZXNjZW5kID0gX3RoaXMzLnF1aWxsLnNjcm9sbC5kZXNjZW5kYW50KF9saW5rMi5kZWZhdWx0LCByYW5nZS5pbmRleCksXG4gICAgICAgICAgICAgIF9xdWlsbCRzY3JvbGwkZGVzY2VuZDIgPSBfc2xpY2VkVG9BcnJheShfcXVpbGwkc2Nyb2xsJGRlc2NlbmQsIDIpLFxuICAgICAgICAgICAgICBsaW5rID0gX3F1aWxsJHNjcm9sbCRkZXNjZW5kMlswXSxcbiAgICAgICAgICAgICAgb2Zmc2V0ID0gX3F1aWxsJHNjcm9sbCRkZXNjZW5kMlsxXTtcblxuICAgICAgICAgIGlmIChsaW5rICE9IG51bGwpIHtcbiAgICAgICAgICAgIF90aGlzMy5saW5rUmFuZ2UgPSBuZXcgX3NlbGVjdGlvbi5SYW5nZShyYW5nZS5pbmRleCAtIG9mZnNldCwgbGluay5sZW5ndGgoKSk7XG4gICAgICAgICAgICB2YXIgcHJldmlldyA9IF9saW5rMi5kZWZhdWx0LmZvcm1hdHMobGluay5kb21Ob2RlKTtcbiAgICAgICAgICAgIF90aGlzMy5wcmV2aWV3LnRleHRDb250ZW50ID0gcHJldmlldztcbiAgICAgICAgICAgIF90aGlzMy5wcmV2aWV3LnNldEF0dHJpYnV0ZSgnaHJlZicsIHByZXZpZXcpO1xuICAgICAgICAgICAgX3RoaXMzLnNob3coKTtcbiAgICAgICAgICAgIF90aGlzMy5wb3NpdGlvbihfdGhpczMucXVpbGwuZ2V0Qm91bmRzKF90aGlzMy5saW5rUmFuZ2UpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIF90aGlzMy5saW5rUmFuZ2U7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMzLmhpZGUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgX2dldChTbm93VG9vbHRpcC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTbm93VG9vbHRpcC5wcm90b3R5cGUpLCAnc2hvdycsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLnJvb3QucmVtb3ZlQXR0cmlidXRlKCdkYXRhLW1vZGUnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU25vd1Rvb2x0aXA7XG59KF9iYXNlLkJhc2VUb29sdGlwKTtcblxuU25vd1Rvb2x0aXAuVEVNUExBVEUgPSBbJzxhIGNsYXNzPVwicWwtcHJldmlld1wiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJhYm91dDpibGFua1wiPjwvYT4nLCAnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgZGF0YS1mb3JtdWxhPVwiZT1tY14yXCIgZGF0YS1saW5rPVwiaHR0cHM6Ly9xdWlsbGpzLmNvbVwiIGRhdGEtdmlkZW89XCJFbWJlZCBVUkxcIj4nLCAnPGEgY2xhc3M9XCJxbC1hY3Rpb25cIj48L2E+JywgJzxhIGNsYXNzPVwicWwtcmVtb3ZlXCI+PC9hPiddLmpvaW4oJycpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTbm93VGhlbWU7XG5cbi8qKiovIH0pLFxuLyogNjMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSk7XG5cbnZhciBfY29yZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb3JlKTtcblxudmFyIF9hbGlnbiA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xuXG52YXIgX2RpcmVjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMzgpO1xuXG52YXIgX2luZGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNjQpO1xuXG52YXIgX2Jsb2NrcXVvdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1KTtcblxudmFyIF9ibG9ja3F1b3RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jsb2NrcXVvdGUpO1xuXG52YXIgX2hlYWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oNjYpO1xuXG52YXIgX2hlYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWFkZXIpO1xuXG52YXIgX2xpc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY3KTtcblxudmFyIF9saXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpc3QpO1xuXG52YXIgX2JhY2tncm91bmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KTtcblxudmFyIF9jb2xvciA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXG52YXIgX2ZvbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTtcblxudmFyIF9zaXplID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XG5cbnZhciBfYm9sZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTYpO1xuXG52YXIgX2JvbGQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYm9sZCk7XG5cbnZhciBfaXRhbGljID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OCk7XG5cbnZhciBfaXRhbGljMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0YWxpYyk7XG5cbnZhciBfbGluayA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpO1xuXG52YXIgX2xpbmsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbGluayk7XG5cbnZhciBfc2NyaXB0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OSk7XG5cbnZhciBfc2NyaXB0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NjcmlwdCk7XG5cbnZhciBfc3RyaWtlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MCk7XG5cbnZhciBfc3RyaWtlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0cmlrZSk7XG5cbnZhciBfdW5kZXJsaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MSk7XG5cbnZhciBfdW5kZXJsaW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VuZGVybGluZSk7XG5cbnZhciBfaW1hZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyKTtcblxudmFyIF9pbWFnZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbWFnZSk7XG5cbnZhciBfdmlkZW8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczKTtcblxudmFyIF92aWRlbzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92aWRlbyk7XG5cbnZhciBfY29kZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXG52YXIgX2NvZGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29kZSk7XG5cbnZhciBfZm9ybXVsYSA9IF9fd2VicGFja19yZXF1aXJlX18oNzQpO1xuXG52YXIgX2Zvcm11bGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZm9ybXVsYSk7XG5cbnZhciBfc3ludGF4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NSk7XG5cbnZhciBfc3ludGF4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bnRheCk7XG5cbnZhciBfdG9vbGJhciA9IF9fd2VicGFja19yZXF1aXJlX18oNTcpO1xuXG52YXIgX3Rvb2xiYXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9vbGJhcik7XG5cbnZhciBfaWNvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblxudmFyIF9pY29uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pY29ucyk7XG5cbnZhciBfcGlja2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cbnZhciBfcGlja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BpY2tlcik7XG5cbnZhciBfY29sb3JQaWNrZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU5KTtcblxudmFyIF9jb2xvclBpY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb2xvclBpY2tlcik7XG5cbnZhciBfaWNvblBpY2tlciA9IF9fd2VicGFja19yZXF1aXJlX18oNjApO1xuXG52YXIgX2ljb25QaWNrZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaWNvblBpY2tlcik7XG5cbnZhciBfdG9vbHRpcCA9IF9fd2VicGFja19yZXF1aXJlX18oNjEpO1xuXG52YXIgX3Rvb2x0aXAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9vbHRpcCk7XG5cbnZhciBfYnViYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDgpO1xuXG52YXIgX2J1YmJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9idWJibGUpO1xuXG52YXIgX3Nub3cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYyKTtcblxudmFyIF9zbm93MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Nub3cpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5fY29yZTIuZGVmYXVsdC5yZWdpc3Rlcih7XG4gICdhdHRyaWJ1dG9ycy9hdHRyaWJ1dGUvZGlyZWN0aW9uJzogX2RpcmVjdGlvbi5EaXJlY3Rpb25BdHRyaWJ1dGUsXG5cbiAgJ2F0dHJpYnV0b3JzL2NsYXNzL2FsaWduJzogX2FsaWduLkFsaWduQ2xhc3MsXG4gICdhdHRyaWJ1dG9ycy9jbGFzcy9iYWNrZ3JvdW5kJzogX2JhY2tncm91bmQuQmFja2dyb3VuZENsYXNzLFxuICAnYXR0cmlidXRvcnMvY2xhc3MvY29sb3InOiBfY29sb3IuQ29sb3JDbGFzcyxcbiAgJ2F0dHJpYnV0b3JzL2NsYXNzL2RpcmVjdGlvbic6IF9kaXJlY3Rpb24uRGlyZWN0aW9uQ2xhc3MsXG4gICdhdHRyaWJ1dG9ycy9jbGFzcy9mb250JzogX2ZvbnQuRm9udENsYXNzLFxuICAnYXR0cmlidXRvcnMvY2xhc3Mvc2l6ZSc6IF9zaXplLlNpemVDbGFzcyxcblxuICAnYXR0cmlidXRvcnMvc3R5bGUvYWxpZ24nOiBfYWxpZ24uQWxpZ25TdHlsZSxcbiAgJ2F0dHJpYnV0b3JzL3N0eWxlL2JhY2tncm91bmQnOiBfYmFja2dyb3VuZC5CYWNrZ3JvdW5kU3R5bGUsXG4gICdhdHRyaWJ1dG9ycy9zdHlsZS9jb2xvcic6IF9jb2xvci5Db2xvclN0eWxlLFxuICAnYXR0cmlidXRvcnMvc3R5bGUvZGlyZWN0aW9uJzogX2RpcmVjdGlvbi5EaXJlY3Rpb25TdHlsZSxcbiAgJ2F0dHJpYnV0b3JzL3N0eWxlL2ZvbnQnOiBfZm9udC5Gb250U3R5bGUsXG4gICdhdHRyaWJ1dG9ycy9zdHlsZS9zaXplJzogX3NpemUuU2l6ZVN0eWxlXG59LCB0cnVlKTtcblxuX2NvcmUyLmRlZmF1bHQucmVnaXN0ZXIoe1xuICAnZm9ybWF0cy9hbGlnbic6IF9hbGlnbi5BbGlnbkNsYXNzLFxuICAnZm9ybWF0cy9kaXJlY3Rpb24nOiBfZGlyZWN0aW9uLkRpcmVjdGlvbkNsYXNzLFxuICAnZm9ybWF0cy9pbmRlbnQnOiBfaW5kZW50LkluZGVudENsYXNzLFxuXG4gICdmb3JtYXRzL2JhY2tncm91bmQnOiBfYmFja2dyb3VuZC5CYWNrZ3JvdW5kU3R5bGUsXG4gICdmb3JtYXRzL2NvbG9yJzogX2NvbG9yLkNvbG9yU3R5bGUsXG4gICdmb3JtYXRzL2ZvbnQnOiBfZm9udC5Gb250Q2xhc3MsXG4gICdmb3JtYXRzL3NpemUnOiBfc2l6ZS5TaXplQ2xhc3MsXG5cbiAgJ2Zvcm1hdHMvYmxvY2txdW90ZSc6IF9ibG9ja3F1b3RlMi5kZWZhdWx0LFxuICAnZm9ybWF0cy9jb2RlLWJsb2NrJzogX2NvZGUyLmRlZmF1bHQsXG4gICdmb3JtYXRzL2hlYWRlcic6IF9oZWFkZXIyLmRlZmF1bHQsXG4gICdmb3JtYXRzL2xpc3QnOiBfbGlzdDIuZGVmYXVsdCxcblxuICAnZm9ybWF0cy9ib2xkJzogX2JvbGQyLmRlZmF1bHQsXG4gICdmb3JtYXRzL2NvZGUnOiBfY29kZS5Db2RlLFxuICAnZm9ybWF0cy9pdGFsaWMnOiBfaXRhbGljMi5kZWZhdWx0LFxuICAnZm9ybWF0cy9saW5rJzogX2xpbmsyLmRlZmF1bHQsXG4gICdmb3JtYXRzL3NjcmlwdCc6IF9zY3JpcHQyLmRlZmF1bHQsXG4gICdmb3JtYXRzL3N0cmlrZSc6IF9zdHJpa2UyLmRlZmF1bHQsXG4gICdmb3JtYXRzL3VuZGVybGluZSc6IF91bmRlcmxpbmUyLmRlZmF1bHQsXG5cbiAgJ2Zvcm1hdHMvaW1hZ2UnOiBfaW1hZ2UyLmRlZmF1bHQsXG4gICdmb3JtYXRzL3ZpZGVvJzogX3ZpZGVvMi5kZWZhdWx0LFxuXG4gICdmb3JtYXRzL2xpc3QvaXRlbSc6IF9saXN0Lkxpc3RJdGVtLFxuXG4gICdtb2R1bGVzL2Zvcm11bGEnOiBfZm9ybXVsYTIuZGVmYXVsdCxcbiAgJ21vZHVsZXMvc3ludGF4JzogX3N5bnRheDIuZGVmYXVsdCxcbiAgJ21vZHVsZXMvdG9vbGJhcic6IF90b29sYmFyMi5kZWZhdWx0LFxuXG4gICd0aGVtZXMvYnViYmxlJzogX2J1YmJsZTIuZGVmYXVsdCxcbiAgJ3RoZW1lcy9zbm93JzogX3Nub3cyLmRlZmF1bHQsXG5cbiAgJ3VpL2ljb25zJzogX2ljb25zMi5kZWZhdWx0LFxuICAndWkvcGlja2VyJzogX3BpY2tlcjIuZGVmYXVsdCxcbiAgJ3VpL2ljb24tcGlja2VyJzogX2ljb25QaWNrZXIyLmRlZmF1bHQsXG4gICd1aS9jb2xvci1waWNrZXInOiBfY29sb3JQaWNrZXIyLmRlZmF1bHQsXG4gICd1aS90b29sdGlwJzogX3Rvb2x0aXAyLmRlZmF1bHRcbn0sIHRydWUpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfY29yZTIuZGVmYXVsdDtcblxuLyoqKi8gfSksXG4vKiA2NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5JbmRlbnRDbGFzcyA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIElkZW50QXR0cmlidXRvciA9IGZ1bmN0aW9uIChfUGFyY2htZW50JEF0dHJpYnV0b3IpIHtcbiAgX2luaGVyaXRzKElkZW50QXR0cmlidXRvciwgX1BhcmNobWVudCRBdHRyaWJ1dG9yKTtcblxuICBmdW5jdGlvbiBJZGVudEF0dHJpYnV0b3IoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIElkZW50QXR0cmlidXRvcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKElkZW50QXR0cmlidXRvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKElkZW50QXR0cmlidXRvcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKElkZW50QXR0cmlidXRvciwgW3tcbiAgICBrZXk6ICdhZGQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQobm9kZSwgdmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJysxJyB8fCB2YWx1ZSA9PT0gJy0xJykge1xuICAgICAgICB2YXIgaW5kZW50ID0gdGhpcy52YWx1ZShub2RlKSB8fCAwO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlID09PSAnKzEnID8gaW5kZW50ICsgMSA6IGluZGVudCAtIDE7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgICAgdGhpcy5yZW1vdmUobm9kZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9nZXQoSWRlbnRBdHRyaWJ1dG9yLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKElkZW50QXR0cmlidXRvci5wcm90b3R5cGUpLCAnYWRkJywgdGhpcykuY2FsbCh0aGlzLCBub2RlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2FuQWRkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuQWRkKG5vZGUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gX2dldChJZGVudEF0dHJpYnV0b3IucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSWRlbnRBdHRyaWJ1dG9yLnByb3RvdHlwZSksICdjYW5BZGQnLCB0aGlzKS5jYWxsKHRoaXMsIG5vZGUsIHZhbHVlKSB8fCBfZ2V0KElkZW50QXR0cmlidXRvci5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJZGVudEF0dHJpYnV0b3IucHJvdG90eXBlKSwgJ2NhbkFkZCcsIHRoaXMpLmNhbGwodGhpcywgbm9kZSwgcGFyc2VJbnQodmFsdWUpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd2YWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKG5vZGUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludChfZ2V0KElkZW50QXR0cmlidXRvci5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJZGVudEF0dHJpYnV0b3IucHJvdG90eXBlKSwgJ3ZhbHVlJywgdGhpcykuY2FsbCh0aGlzLCBub2RlKSkgfHwgdW5kZWZpbmVkOyAvLyBEb24ndCByZXR1cm4gTmFOXG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIElkZW50QXR0cmlidXRvcjtcbn0oX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLkNsYXNzKTtcblxudmFyIEluZGVudENsYXNzID0gbmV3IElkZW50QXR0cmlidXRvcignaW5kZW50JywgJ3FsLWluZGVudCcsIHtcbiAgc2NvcGU6IF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuQkxPQ0ssXG4gIHdoaXRlbGlzdDogWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDhdXG59KTtcblxuZXhwb3J0cy5JbmRlbnRDbGFzcyA9IEluZGVudENsYXNzO1xuXG4vKioqLyB9KSxcbi8qIDY1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfYmxvY2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2Jsb2NrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jsb2NrKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQmxvY2txdW90ZSA9IGZ1bmN0aW9uIChfQmxvY2spIHtcbiAgX2luaGVyaXRzKEJsb2NrcXVvdGUsIF9CbG9jayk7XG5cbiAgZnVuY3Rpb24gQmxvY2txdW90ZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmxvY2txdW90ZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJsb2NrcXVvdGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCbG9ja3F1b3RlKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICByZXR1cm4gQmxvY2txdW90ZTtcbn0oX2Jsb2NrMi5kZWZhdWx0KTtcblxuQmxvY2txdW90ZS5ibG90TmFtZSA9ICdibG9ja3F1b3RlJztcbkJsb2NrcXVvdGUudGFnTmFtZSA9ICdibG9ja3F1b3RlJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gQmxvY2txdW90ZTtcblxuLyoqKi8gfSksXG4vKiA2NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2Jsb2NrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIF9ibG9jazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ibG9jayk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEhlYWRlciA9IGZ1bmN0aW9uIChfQmxvY2spIHtcbiAgX2luaGVyaXRzKEhlYWRlciwgX0Jsb2NrKTtcblxuICBmdW5jdGlvbiBIZWFkZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhlYWRlcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEhlYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEhlYWRlcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEhlYWRlciwgbnVsbCwgW3tcbiAgICBrZXk6ICdmb3JtYXRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0cyhkb21Ob2RlKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWdOYW1lLmluZGV4T2YoZG9tTm9kZS50YWdOYW1lKSArIDE7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEhlYWRlcjtcbn0oX2Jsb2NrMi5kZWZhdWx0KTtcblxuSGVhZGVyLmJsb3ROYW1lID0gJ2hlYWRlcic7XG5IZWFkZXIudGFnTmFtZSA9IFsnSDEnLCAnSDInLCAnSDMnLCAnSDQnLCAnSDUnLCAnSDYnXTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gSGVhZGVyO1xuXG4vKioqLyB9KSxcbi8qIDY3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLkxpc3RJdGVtID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9ibG9jayA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfYmxvY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmxvY2spO1xuXG52YXIgX2NvbnRhaW5lciA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xuXG52YXIgX2NvbnRhaW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb250YWluZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBMaXN0SXRlbSA9IGZ1bmN0aW9uIChfQmxvY2spIHtcbiAgX2luaGVyaXRzKExpc3RJdGVtLCBfQmxvY2spO1xuXG4gIGZ1bmN0aW9uIExpc3RJdGVtKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaXN0SXRlbSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKExpc3RJdGVtLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGlzdEl0ZW0pKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMaXN0SXRlbSwgW3tcbiAgICBrZXk6ICdmb3JtYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXQobmFtZSwgdmFsdWUpIHtcbiAgICAgIGlmIChuYW1lID09PSBMaXN0LmJsb3ROYW1lICYmICF2YWx1ZSkge1xuICAgICAgICB0aGlzLnJlcGxhY2VXaXRoKF9wYXJjaG1lbnQyLmRlZmF1bHQuY3JlYXRlKHRoaXMuc3RhdGljcy5zY29wZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2dldChMaXN0SXRlbS5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMaXN0SXRlbS5wcm90b3R5cGUpLCAnZm9ybWF0JywgdGhpcykuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgaWYgKHRoaXMucHJldiA9PSBudWxsICYmIHRoaXMubmV4dCA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMucGFyZW50LnJlbW92ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2dldChMaXN0SXRlbS5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMaXN0SXRlbS5wcm90b3R5cGUpLCAncmVtb3ZlJywgdGhpcykuY2FsbCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZXBsYWNlV2l0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcGxhY2VXaXRoKG5hbWUsIHZhbHVlKSB7XG4gICAgICB0aGlzLnBhcmVudC5pc29sYXRlKHRoaXMub2Zmc2V0KHRoaXMucGFyZW50KSwgdGhpcy5sZW5ndGgoKSk7XG4gICAgICBpZiAobmFtZSA9PT0gdGhpcy5wYXJlbnQuc3RhdGljcy5ibG90TmFtZSkge1xuICAgICAgICB0aGlzLnBhcmVudC5yZXBsYWNlV2l0aChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wYXJlbnQudW53cmFwKCk7XG4gICAgICAgIHJldHVybiBfZ2V0KExpc3RJdGVtLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExpc3RJdGVtLnByb3RvdHlwZSksICdyZXBsYWNlV2l0aCcsIHRoaXMpLmNhbGwodGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAnZm9ybWF0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdHMoZG9tTm9kZSkge1xuICAgICAgcmV0dXJuIGRvbU5vZGUudGFnTmFtZSA9PT0gdGhpcy50YWdOYW1lID8gdW5kZWZpbmVkIDogX2dldChMaXN0SXRlbS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExpc3RJdGVtKSwgJ2Zvcm1hdHMnLCB0aGlzKS5jYWxsKHRoaXMsIGRvbU5vZGUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMaXN0SXRlbTtcbn0oX2Jsb2NrMi5kZWZhdWx0KTtcblxuTGlzdEl0ZW0uYmxvdE5hbWUgPSAnbGlzdC1pdGVtJztcbkxpc3RJdGVtLnRhZ05hbWUgPSAnTEknO1xuXG52YXIgTGlzdCA9IGZ1bmN0aW9uIChfQ29udGFpbmVyKSB7XG4gIF9pbmhlcml0cyhMaXN0LCBfQ29udGFpbmVyKTtcblxuICBfY3JlYXRlQ2xhc3MoTGlzdCwgbnVsbCwgW3tcbiAgICBrZXk6ICdjcmVhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUodmFsdWUpIHtcbiAgICAgIHZhciB0YWdOYW1lID0gdmFsdWUgPT09ICdvcmRlcmVkJyA/ICdPTCcgOiAnVUwnO1xuICAgICAgdmFyIG5vZGUgPSBfZ2V0KExpc3QuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMaXN0KSwgJ2NyZWF0ZScsIHRoaXMpLmNhbGwodGhpcywgdGFnTmFtZSk7XG4gICAgICBpZiAodmFsdWUgPT09ICdjaGVja2VkJyB8fCB2YWx1ZSA9PT0gJ3VuY2hlY2tlZCcpIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtY2hlY2tlZCcsIHZhbHVlID09PSAnY2hlY2tlZCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdHMoZG9tTm9kZSkge1xuICAgICAgaWYgKGRvbU5vZGUudGFnTmFtZSA9PT0gJ09MJykgcmV0dXJuICdvcmRlcmVkJztcbiAgICAgIGlmIChkb21Ob2RlLnRhZ05hbWUgPT09ICdVTCcpIHtcbiAgICAgICAgaWYgKGRvbU5vZGUuaGFzQXR0cmlidXRlKCdkYXRhLWNoZWNrZWQnKSkge1xuICAgICAgICAgIHJldHVybiBkb21Ob2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1jaGVja2VkJykgPT09ICd0cnVlJyA/ICdjaGVja2VkJyA6ICd1bmNoZWNrZWQnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAnYnVsbGV0JztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1dKTtcblxuICBmdW5jdGlvbiBMaXN0KGRvbU5vZGUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGlzdCk7XG5cbiAgICB2YXIgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKExpc3QuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMaXN0KSkuY2FsbCh0aGlzLCBkb21Ob2RlKSk7XG5cbiAgICB2YXIgbGlzdEV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIGxpc3RFdmVudEhhbmRsZXIoZSkge1xuICAgICAgaWYgKGUudGFyZ2V0LnBhcmVudE5vZGUgIT09IGRvbU5vZGUpIHJldHVybjtcbiAgICAgIHZhciBmb3JtYXQgPSBfdGhpczIuc3RhdGljcy5mb3JtYXRzKGRvbU5vZGUpO1xuICAgICAgdmFyIGJsb3QgPSBfcGFyY2htZW50Mi5kZWZhdWx0LmZpbmQoZS50YXJnZXQpO1xuICAgICAgaWYgKGZvcm1hdCA9PT0gJ2NoZWNrZWQnKSB7XG4gICAgICAgIGJsb3QuZm9ybWF0KCdsaXN0JywgJ3VuY2hlY2tlZCcpO1xuICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICd1bmNoZWNrZWQnKSB7XG4gICAgICAgIGJsb3QuZm9ybWF0KCdsaXN0JywgJ2NoZWNrZWQnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZG9tTm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgbGlzdEV2ZW50SGFuZGxlcik7XG4gICAgZG9tTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBsaXN0RXZlbnRIYW5kbGVyKTtcbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKExpc3QsIFt7XG4gICAga2V5OiAnZm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0KG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4udGFpbC5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRzKCkge1xuICAgICAgLy8gV2UgZG9uJ3QgaW5oZXJpdCBmcm9tIEZvcm1hdEJsb3RcbiAgICAgIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIHRoaXMuc3RhdGljcy5ibG90TmFtZSwgdGhpcy5zdGF0aWNzLmZvcm1hdHModGhpcy5kb21Ob2RlKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5zZXJ0QmVmb3JlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0QmVmb3JlKGJsb3QsIHJlZikge1xuICAgICAgaWYgKGJsb3QgaW5zdGFuY2VvZiBMaXN0SXRlbSkge1xuICAgICAgICBfZ2V0KExpc3QucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGlzdC5wcm90b3R5cGUpLCAnaW5zZXJ0QmVmb3JlJywgdGhpcykuY2FsbCh0aGlzLCBibG90LCByZWYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGluZGV4ID0gcmVmID09IG51bGwgPyB0aGlzLmxlbmd0aCgpIDogcmVmLm9mZnNldCh0aGlzKTtcbiAgICAgICAgdmFyIGFmdGVyID0gdGhpcy5zcGxpdChpbmRleCk7XG4gICAgICAgIGFmdGVyLnBhcmVudC5pbnNlcnRCZWZvcmUoYmxvdCwgYWZ0ZXIpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29wdGltaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3B0aW1pemUoY29udGV4dCkge1xuICAgICAgX2dldChMaXN0LnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExpc3QucHJvdG90eXBlKSwgJ29wdGltaXplJywgdGhpcykuY2FsbCh0aGlzLCBjb250ZXh0KTtcbiAgICAgIHZhciBuZXh0ID0gdGhpcy5uZXh0O1xuICAgICAgaWYgKG5leHQgIT0gbnVsbCAmJiBuZXh0LnByZXYgPT09IHRoaXMgJiYgbmV4dC5zdGF0aWNzLmJsb3ROYW1lID09PSB0aGlzLnN0YXRpY3MuYmxvdE5hbWUgJiYgbmV4dC5kb21Ob2RlLnRhZ05hbWUgPT09IHRoaXMuZG9tTm9kZS50YWdOYW1lICYmIG5leHQuZG9tTm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2hlY2tlZCcpID09PSB0aGlzLmRvbU5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWNoZWNrZWQnKSkge1xuICAgICAgICBuZXh0Lm1vdmVDaGlsZHJlbih0aGlzKTtcbiAgICAgICAgbmV4dC5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZXBsYWNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVwbGFjZSh0YXJnZXQpIHtcbiAgICAgIGlmICh0YXJnZXQuc3RhdGljcy5ibG90TmFtZSAhPT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lKSB7XG4gICAgICAgIHZhciBpdGVtID0gX3BhcmNobWVudDIuZGVmYXVsdC5jcmVhdGUodGhpcy5zdGF0aWNzLmRlZmF1bHRDaGlsZCk7XG4gICAgICAgIHRhcmdldC5tb3ZlQ2hpbGRyZW4oaXRlbSk7XG4gICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoaXRlbSk7XG4gICAgICB9XG4gICAgICBfZ2V0KExpc3QucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGlzdC5wcm90b3R5cGUpLCAncmVwbGFjZScsIHRoaXMpLmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTGlzdDtcbn0oX2NvbnRhaW5lcjIuZGVmYXVsdCk7XG5cbkxpc3QuYmxvdE5hbWUgPSAnbGlzdCc7XG5MaXN0LnNjb3BlID0gX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5CTE9DS19CTE9UO1xuTGlzdC50YWdOYW1lID0gWydPTCcsICdVTCddO1xuTGlzdC5kZWZhdWx0Q2hpbGQgPSAnbGlzdC1pdGVtJztcbkxpc3QuYWxsb3dlZENoaWxkcmVuID0gW0xpc3RJdGVtXTtcblxuZXhwb3J0cy5MaXN0SXRlbSA9IExpc3RJdGVtO1xuZXhwb3J0cy5kZWZhdWx0ID0gTGlzdDtcblxuLyoqKi8gfSksXG4vKiA2OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2JvbGQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2KTtcblxudmFyIF9ib2xkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2JvbGQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBJdGFsaWMgPSBmdW5jdGlvbiAoX0JvbGQpIHtcbiAgX2luaGVyaXRzKEl0YWxpYywgX0JvbGQpO1xuXG4gIGZ1bmN0aW9uIEl0YWxpYygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSXRhbGljKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoSXRhbGljLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSXRhbGljKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICByZXR1cm4gSXRhbGljO1xufShfYm9sZDIuZGVmYXVsdCk7XG5cbkl0YWxpYy5ibG90TmFtZSA9ICdpdGFsaWMnO1xuSXRhbGljLnRhZ05hbWUgPSBbJ0VNJywgJ0knXTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gSXRhbGljO1xuXG4vKioqLyB9KSxcbi8qIDY5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9pbmxpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX2lubGluZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmxpbmUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTY3JpcHQgPSBmdW5jdGlvbiAoX0lubGluZSkge1xuICBfaW5oZXJpdHMoU2NyaXB0LCBfSW5saW5lKTtcblxuICBmdW5jdGlvbiBTY3JpcHQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNjcmlwdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNjcmlwdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNjcmlwdCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNjcmlwdCwgbnVsbCwgW3tcbiAgICBrZXk6ICdjcmVhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJ3N1cGVyJykge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3VwJyk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnc3ViJykge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3ViJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gX2dldChTY3JpcHQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTY3JpcHQpLCAnY3JlYXRlJywgdGhpcykuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdHMoZG9tTm9kZSkge1xuICAgICAgaWYgKGRvbU5vZGUudGFnTmFtZSA9PT0gJ1NVQicpIHJldHVybiAnc3ViJztcbiAgICAgIGlmIChkb21Ob2RlLnRhZ05hbWUgPT09ICdTVVAnKSByZXR1cm4gJ3N1cGVyJztcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNjcmlwdDtcbn0oX2lubGluZTIuZGVmYXVsdCk7XG5cblNjcmlwdC5ibG90TmFtZSA9ICdzY3JpcHQnO1xuU2NyaXB0LnRhZ05hbWUgPSBbJ1NVQicsICdTVVAnXTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2NyaXB0O1xuXG4vKioqLyB9KSxcbi8qIDcwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfaW5saW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxudmFyIF9pbmxpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5saW5lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgU3RyaWtlID0gZnVuY3Rpb24gKF9JbmxpbmUpIHtcbiAgX2luaGVyaXRzKFN0cmlrZSwgX0lubGluZSk7XG5cbiAgZnVuY3Rpb24gU3RyaWtlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdHJpa2UpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTdHJpa2UuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTdHJpa2UpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBTdHJpa2U7XG59KF9pbmxpbmUyLmRlZmF1bHQpO1xuXG5TdHJpa2UuYmxvdE5hbWUgPSAnc3RyaWtlJztcblN0cmlrZS50YWdOYW1lID0gJ1MnO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTdHJpa2U7XG5cbi8qKiovIH0pLFxuLyogNzEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9pbmxpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX2lubGluZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmxpbmUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBVbmRlcmxpbmUgPSBmdW5jdGlvbiAoX0lubGluZSkge1xuICBfaW5oZXJpdHMoVW5kZXJsaW5lLCBfSW5saW5lKTtcblxuICBmdW5jdGlvbiBVbmRlcmxpbmUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVuZGVybGluZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFVuZGVybGluZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFVuZGVybGluZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIFVuZGVybGluZTtcbn0oX2lubGluZTIuZGVmYXVsdCk7XG5cblVuZGVybGluZS5ibG90TmFtZSA9ICd1bmRlcmxpbmUnO1xuVW5kZXJsaW5lLnRhZ05hbWUgPSAnVSc7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFVuZGVybGluZTtcblxuLyoqKi8gfSksXG4vKiA3MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9saW5rID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEFUVFJJQlVURVMgPSBbJ2FsdCcsICdoZWlnaHQnLCAnd2lkdGgnXTtcblxudmFyIEltYWdlID0gZnVuY3Rpb24gKF9QYXJjaG1lbnQkRW1iZWQpIHtcbiAgX2luaGVyaXRzKEltYWdlLCBfUGFyY2htZW50JEVtYmVkKTtcblxuICBmdW5jdGlvbiBJbWFnZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW1hZ2UpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChJbWFnZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEltYWdlKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSW1hZ2UsIFt7XG4gICAga2V5OiAnZm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0KG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAoQVRUUklCVVRFUy5pbmRleE9mKG5hbWUpID4gLTEpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5kb21Ob2RlLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kb21Ob2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2dldChJbWFnZS5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJbWFnZS5wcm90b3R5cGUpLCAnZm9ybWF0JywgdGhpcykuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6ICdjcmVhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUodmFsdWUpIHtcbiAgICAgIHZhciBub2RlID0gX2dldChJbWFnZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEltYWdlKSwgJ2NyZWF0ZScsIHRoaXMpLmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIHRoaXMuc2FuaXRpemUodmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRzKGRvbU5vZGUpIHtcbiAgICAgIHJldHVybiBBVFRSSUJVVEVTLnJlZHVjZShmdW5jdGlvbiAoZm9ybWF0cywgYXR0cmlidXRlKSB7XG4gICAgICAgIGlmIChkb21Ob2RlLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpKSB7XG4gICAgICAgICAgZm9ybWF0c1thdHRyaWJ1dGVdID0gZG9tTm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0cztcbiAgICAgIH0sIHt9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdtYXRjaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1hdGNoKHVybCkge1xuICAgICAgcmV0dXJuICgvXFwuKGpwZT9nfGdpZnxwbmcpJC8udGVzdCh1cmwpIHx8IC9eZGF0YTppbWFnZVxcLy4rO2Jhc2U2NC8udGVzdCh1cmwpXG4gICAgICApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nhbml0aXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2FuaXRpemUodXJsKSB7XG4gICAgICByZXR1cm4gKDAsIF9saW5rLnNhbml0aXplKSh1cmwsIFsnaHR0cCcsICdodHRwcycsICdkYXRhJ10pID8gdXJsIDogJy8vOjAnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3ZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoZG9tTm9kZSkge1xuICAgICAgcmV0dXJuIGRvbU5vZGUuZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSW1hZ2U7XG59KF9wYXJjaG1lbnQyLmRlZmF1bHQuRW1iZWQpO1xuXG5JbWFnZS5ibG90TmFtZSA9ICdpbWFnZSc7XG5JbWFnZS50YWdOYW1lID0gJ0lNRyc7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEltYWdlO1xuXG4vKioqLyB9KSxcbi8qIDczICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9ibG9jayA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfbGluayA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpO1xuXG52YXIgX2xpbmsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbGluayk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEFUVFJJQlVURVMgPSBbJ2hlaWdodCcsICd3aWR0aCddO1xuXG52YXIgVmlkZW8gPSBmdW5jdGlvbiAoX0Jsb2NrRW1iZWQpIHtcbiAgX2luaGVyaXRzKFZpZGVvLCBfQmxvY2tFbWJlZCk7XG5cbiAgZnVuY3Rpb24gVmlkZW8oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZGVvKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVmlkZW8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihWaWRlbykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFZpZGVvLCBbe1xuICAgIGtleTogJ2Zvcm1hdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdChuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKEFUVFJJQlVURVMuaW5kZXhPZihuYW1lKSA+IC0xKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHRoaXMuZG9tTm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZG9tTm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9nZXQoVmlkZW8ucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVmlkZW8ucHJvdG90eXBlKSwgJ2Zvcm1hdCcsIHRoaXMpLmNhbGwodGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAnY3JlYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZSA9IF9nZXQoVmlkZW8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihWaWRlbyksICdjcmVhdGUnLCB0aGlzKS5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdmcmFtZWJvcmRlcicsICcwJyk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnYWxsb3dmdWxsc2NyZWVuJywgdHJ1ZSk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnc3JjJywgdGhpcy5zYW5pdGl6ZSh2YWx1ZSkpO1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdHMoZG9tTm9kZSkge1xuICAgICAgcmV0dXJuIEFUVFJJQlVURVMucmVkdWNlKGZ1bmN0aW9uIChmb3JtYXRzLCBhdHRyaWJ1dGUpIHtcbiAgICAgICAgaWYgKGRvbU5vZGUuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICBmb3JtYXRzW2F0dHJpYnV0ZV0gPSBkb21Ob2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXRzO1xuICAgICAgfSwge30pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nhbml0aXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2FuaXRpemUodXJsKSB7XG4gICAgICByZXR1cm4gX2xpbmsyLmRlZmF1bHQuc2FuaXRpemUodXJsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd2YWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKGRvbU5vZGUpIHtcbiAgICAgIHJldHVybiBkb21Ob2RlLmdldEF0dHJpYnV0ZSgnc3JjJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFZpZGVvO1xufShfYmxvY2suQmxvY2tFbWJlZCk7XG5cblZpZGVvLmJsb3ROYW1lID0gJ3ZpZGVvJztcblZpZGVvLmNsYXNzTmFtZSA9ICdxbC12aWRlbyc7XG5WaWRlby50YWdOYW1lID0gJ0lGUkFNRSc7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFZpZGVvO1xuXG4vKioqLyB9KSxcbi8qIDc0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLkZvcm11bGFCbG90ID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfZW1iZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcblxudmFyIF9lbWJlZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbWJlZCk7XG5cbnZhciBfcXVpbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG52YXIgX3F1aWxsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1aWxsKTtcblxudmFyIF9tb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXG52YXIgX21vZHVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb2R1bGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBGb3JtdWxhQmxvdCA9IGZ1bmN0aW9uIChfRW1iZWQpIHtcbiAgX2luaGVyaXRzKEZvcm11bGFCbG90LCBfRW1iZWQpO1xuXG4gIGZ1bmN0aW9uIEZvcm11bGFCbG90KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGb3JtdWxhQmxvdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEZvcm11bGFCbG90Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRm9ybXVsYUJsb3QpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhGb3JtdWxhQmxvdCwgbnVsbCwgW3tcbiAgICBrZXk6ICdjcmVhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUodmFsdWUpIHtcbiAgICAgIHZhciBub2RlID0gX2dldChGb3JtdWxhQmxvdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZvcm11bGFCbG90KSwgJ2NyZWF0ZScsIHRoaXMpLmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgd2luZG93LmthdGV4LnJlbmRlcih2YWx1ZSwgbm9kZSwge1xuICAgICAgICAgIHRocm93T25FcnJvcjogZmFsc2UsXG4gICAgICAgICAgZXJyb3JDb2xvcjogJyNmMDAnXG4gICAgICAgIH0pO1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScsIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3ZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoZG9tTm9kZSkge1xuICAgICAgcmV0dXJuIGRvbU5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZvcm11bGFCbG90O1xufShfZW1iZWQyLmRlZmF1bHQpO1xuXG5Gb3JtdWxhQmxvdC5ibG90TmFtZSA9ICdmb3JtdWxhJztcbkZvcm11bGFCbG90LmNsYXNzTmFtZSA9ICdxbC1mb3JtdWxhJztcbkZvcm11bGFCbG90LnRhZ05hbWUgPSAnU1BBTic7XG5cbnZhciBGb3JtdWxhID0gZnVuY3Rpb24gKF9Nb2R1bGUpIHtcbiAgX2luaGVyaXRzKEZvcm11bGEsIF9Nb2R1bGUpO1xuXG4gIF9jcmVhdGVDbGFzcyhGb3JtdWxhLCBudWxsLCBbe1xuICAgIGtleTogJ3JlZ2lzdGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXIoKSB7XG4gICAgICBfcXVpbGwyLmRlZmF1bHQucmVnaXN0ZXIoRm9ybXVsYUJsb3QsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIGZ1bmN0aW9uIEZvcm11bGEoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvcm11bGEpO1xuXG4gICAgdmFyIF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChGb3JtdWxhLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRm9ybXVsYSkpLmNhbGwodGhpcykpO1xuXG4gICAgaWYgKHdpbmRvdy5rYXRleCA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Zvcm11bGEgbW9kdWxlIHJlcXVpcmVzIEthVGVYLicpO1xuICAgIH1cbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgcmV0dXJuIEZvcm11bGE7XG59KF9tb2R1bGUyLmRlZmF1bHQpO1xuXG5leHBvcnRzLkZvcm11bGFCbG90ID0gRm9ybXVsYUJsb3Q7XG5leHBvcnRzLmRlZmF1bHQgPSBGb3JtdWxhO1xuXG4vKioqLyB9KSxcbi8qIDc1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLkNvZGVUb2tlbiA9IGV4cG9ydHMuQ29kZUJsb2NrID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9xdWlsbCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfcXVpbGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGwpO1xuXG52YXIgX21vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfbW9kdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vZHVsZSk7XG5cbnZhciBfY29kZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXG52YXIgX2NvZGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29kZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFN5bnRheENvZGVCbG9jayA9IGZ1bmN0aW9uIChfQ29kZUJsb2NrKSB7XG4gIF9pbmhlcml0cyhTeW50YXhDb2RlQmxvY2ssIF9Db2RlQmxvY2spO1xuXG4gIGZ1bmN0aW9uIFN5bnRheENvZGVCbG9jaygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3ludGF4Q29kZUJsb2NrKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU3ludGF4Q29kZUJsb2NrLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3ludGF4Q29kZUJsb2NrKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU3ludGF4Q29kZUJsb2NrLCBbe1xuICAgIGtleTogJ3JlcGxhY2VXaXRoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVwbGFjZVdpdGgoYmxvY2spIHtcbiAgICAgIHRoaXMuZG9tTm9kZS50ZXh0Q29udGVudCA9IHRoaXMuZG9tTm9kZS50ZXh0Q29udGVudDtcbiAgICAgIHRoaXMuYXR0YWNoKCk7XG4gICAgICBfZ2V0KFN5bnRheENvZGVCbG9jay5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTeW50YXhDb2RlQmxvY2sucHJvdG90eXBlKSwgJ3JlcGxhY2VXaXRoJywgdGhpcykuY2FsbCh0aGlzLCBibG9jayk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGlnaGxpZ2h0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGlnaGxpZ2h0KF9oaWdobGlnaHQpIHtcbiAgICAgIHZhciB0ZXh0ID0gdGhpcy5kb21Ob2RlLnRleHRDb250ZW50O1xuICAgICAgaWYgKHRoaXMuY2FjaGVkVGV4dCAhPT0gdGV4dCkge1xuICAgICAgICBpZiAodGV4dC50cmltKCkubGVuZ3RoID4gMCB8fCB0aGlzLmNhY2hlZFRleHQgPT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuZG9tTm9kZS5pbm5lckhUTUwgPSBfaGlnaGxpZ2h0KHRleHQpO1xuICAgICAgICAgIHRoaXMuZG9tTm9kZS5ub3JtYWxpemUoKTtcbiAgICAgICAgICB0aGlzLmF0dGFjaCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FjaGVkVGV4dCA9IHRleHQ7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN5bnRheENvZGVCbG9jaztcbn0oX2NvZGUyLmRlZmF1bHQpO1xuXG5TeW50YXhDb2RlQmxvY2suY2xhc3NOYW1lID0gJ3FsLXN5bnRheCc7XG5cbnZhciBDb2RlVG9rZW4gPSBuZXcgX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLkNsYXNzKCd0b2tlbicsICdobGpzJywge1xuICBzY29wZTogX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5JTkxJTkVcbn0pO1xuXG52YXIgU3ludGF4ID0gZnVuY3Rpb24gKF9Nb2R1bGUpIHtcbiAgX2luaGVyaXRzKFN5bnRheCwgX01vZHVsZSk7XG5cbiAgX2NyZWF0ZUNsYXNzKFN5bnRheCwgbnVsbCwgW3tcbiAgICBrZXk6ICdyZWdpc3RlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyKCkge1xuICAgICAgX3F1aWxsMi5kZWZhdWx0LnJlZ2lzdGVyKENvZGVUb2tlbiwgdHJ1ZSk7XG4gICAgICBfcXVpbGwyLmRlZmF1bHQucmVnaXN0ZXIoU3ludGF4Q29kZUJsb2NrLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICBmdW5jdGlvbiBTeW50YXgocXVpbGwsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3ludGF4KTtcblxuICAgIHZhciBfdGhpczIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU3ludGF4Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3ludGF4KSkuY2FsbCh0aGlzLCBxdWlsbCwgb3B0aW9ucykpO1xuXG4gICAgaWYgKHR5cGVvZiBfdGhpczIub3B0aW9ucy5oaWdobGlnaHQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3ludGF4IG1vZHVsZSByZXF1aXJlcyBoaWdobGlnaHQuanMuIFBsZWFzZSBpbmNsdWRlIHRoZSBsaWJyYXJ5IG9uIHRoZSBwYWdlIGJlZm9yZSBRdWlsbC4nKTtcbiAgICB9XG4gICAgdmFyIHRpbWVyID0gbnVsbDtcbiAgICBfdGhpczIucXVpbGwub24oX3F1aWxsMi5kZWZhdWx0LmV2ZW50cy5TQ1JPTExfT1BUSU1JWkUsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuaGlnaGxpZ2h0KCk7XG4gICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgIH0sIF90aGlzMi5vcHRpb25zLmludGVydmFsKTtcbiAgICB9KTtcbiAgICBfdGhpczIuaGlnaGxpZ2h0KCk7XG4gICAgcmV0dXJuIF90aGlzMjtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTeW50YXgsIFt7XG4gICAga2V5OiAnaGlnaGxpZ2h0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGlnaGxpZ2h0KCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLnF1aWxsLnNlbGVjdGlvbi5jb21wb3NpbmcpIHJldHVybjtcbiAgICAgIHRoaXMucXVpbGwudXBkYXRlKF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgdmFyIHJhbmdlID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIHRoaXMucXVpbGwuc2Nyb2xsLmRlc2NlbmRhbnRzKFN5bnRheENvZGVCbG9jaykuZm9yRWFjaChmdW5jdGlvbiAoY29kZSkge1xuICAgICAgICBjb2RlLmhpZ2hsaWdodChfdGhpczMub3B0aW9ucy5oaWdobGlnaHQpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnF1aWxsLnVwZGF0ZShfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpO1xuICAgICAgaWYgKHJhbmdlICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN5bnRheDtcbn0oX21vZHVsZTIuZGVmYXVsdCk7XG5cblN5bnRheC5ERUZBVUxUUyA9IHtcbiAgaGlnaGxpZ2h0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHdpbmRvdy5obGpzID09IG51bGwpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHdpbmRvdy5obGpzLmhpZ2hsaWdodEF1dG8odGV4dCk7XG4gICAgICByZXR1cm4gcmVzdWx0LnZhbHVlO1xuICAgIH07XG4gIH0oKSxcbiAgaW50ZXJ2YWw6IDEwMDBcbn07XG5cbmV4cG9ydHMuQ29kZUJsb2NrID0gU3ludGF4Q29kZUJsb2NrO1xuZXhwb3J0cy5Db2RlVG9rZW4gPSBDb2RlVG9rZW47XG5leHBvcnRzLmRlZmF1bHQgPSBTeW50YXg7XG5cbi8qKiovIH0pLFxuLyogNzYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTMgeDI9MTUgeTE9OSB5Mj05PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTMgeDI9MTMgeTE9MTQgeTI9MTQ+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MyB4Mj05IHkxPTQgeTI9ND48L2xpbmU+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDc3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xNSB4Mj0zIHkxPTkgeTI9OT48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xNCB4Mj00IHkxPTE0IHkyPTE0PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTEyIHgyPTYgeTE9NCB5Mj00PjwvbGluZT4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogNzggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTE1IHgyPTMgeTE9OSB5Mj05PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTE1IHgyPTUgeTE9MTQgeTI9MTQ+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTUgeDI9OSB5MT00IHkyPTQ+PC9saW5lPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA3OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTUgeDI9MyB5MT05IHkyPTk+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTUgeDI9MyB5MT0xNCB5Mj0xND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xNSB4Mj0zIHkxPTQgeTI9ND48L2xpbmU+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDgwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxnIGNsYXNzPVxcXCJxbC1maWxsIHFsLWNvbG9yLWxhYmVsXFxcIj4gPHBvbHlnb24gcG9pbnRzPVxcXCI2IDYuODY4IDYgNiA1IDYgNSA3IDUuOTQyIDcgNiA2Ljg2OFxcXCI+PC9wb2x5Z29uPiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9NCB5PTQ+PC9yZWN0PiA8cG9seWdvbiBwb2ludHM9XFxcIjYuODE3IDUgNiA1IDYgNiA2LjM4IDYgNi44MTcgNVxcXCI+PC9wb2x5Z29uPiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MiB5PTY+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MyB5PTU+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9NCB5PTc+PC9yZWN0PiA8cG9seWdvbiBwb2ludHM9XFxcIjQgMTEuNDM5IDQgMTEgMyAxMSAzIDEyIDMuNzU1IDEyIDQgMTEuNDM5XFxcIj48L3BvbHlnb24+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0yIHk9MTI+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MiB5PTk+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MiB5PTE1PjwvcmVjdD4gPHBvbHlnb24gcG9pbnRzPVxcXCI0LjYzIDEwIDQgMTAgNCAxMSA0LjE5MiAxMSA0LjYzIDEwXFxcIj48L3BvbHlnb24+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0zIHk9OD48L3JlY3Q+IDxwYXRoIGQ9TTEwLjgzMiw0LjJMMTEsNC41ODJWNEgxMC43MDhBMS45NDgsMS45NDgsMCwwLDEsMTAuODMyLDQuMlo+PC9wYXRoPiA8cGF0aCBkPU03LDQuNTgyTDcuMTY4LDQuMkExLjkyOSwxLjkyOSwwLDAsMSw3LjI5Miw0SDdWNC41ODJaPjwvcGF0aD4gPHBhdGggZD1NOCwxM0g3LjY4M2wtMC4zNTEuOGExLjkzMywxLjkzMywwLDAsMS0uMTI0LjJIOFYxM1o+PC9wYXRoPiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTIgeT0yPjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTExIHk9Mz48L3JlY3Q+IDxwYXRoIGQ9TTksM0g4VjMuMjgyQTEuOTg1LDEuOTg1LDAsMCwxLDksM1o+PC9wYXRoPiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MiB5PTM+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9NiB5PTI+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MyB5PTI+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9NSB5PTM+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9OSB5PTI+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTUgeT0xND48L3JlY3Q+IDxwb2x5Z29uIHBvaW50cz1cXFwiMTMuNDQ3IDEwLjE3NCAxMy40NjkgMTAuMjI1IDEzLjQ3MiAxMC4yMzIgMTMuODA4IDExIDE0IDExIDE0IDEwIDEzLjM3IDEwIDEzLjQ0NyAxMC4xNzRcXFwiPjwvcG9seWdvbj4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTEzIHk9Nz48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xNSB5PTU+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTQgeT02PjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTE1IHk9OD48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xNCB5PTk+PC9yZWN0PiA8cGF0aCBkPU0zLjc3NSwxNEgzdjFINFYxNC4zMTRBMS45NywxLjk3LDAsMCwxLDMuNzc1LDE0Wj48L3BhdGg+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xNCB5PTM+PC9yZWN0PiA8cG9seWdvbiBwb2ludHM9XFxcIjEyIDYuODY4IDEyIDYgMTEuNjIgNiAxMiA2Ljg2OFxcXCI+PC9wb2x5Z29uPiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTUgeT0yPjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTEyIHk9NT48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xMyB5PTQ+PC9yZWN0PiA8cG9seWdvbiBwb2ludHM9XFxcIjEyLjkzMyA5IDEzIDkgMTMgOCAxMi40OTUgOCAxMi45MzMgOVxcXCI+PC9wb2x5Z29uPiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9OSB5PTE0PjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTggeT0xNT48L3JlY3Q+IDxwYXRoIGQ9TTYsMTQuOTI2VjE1SDdWMTQuMzE2QTEuOTkzLDEuOTkzLDAsMCwxLDYsMTQuOTI2Wj48L3BhdGg+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD01IHk9MTU+PC9yZWN0PiA8cGF0aCBkPU0xMC42NjgsMTMuOEwxMC4zMTcsMTNIMTB2MWgwLjc5MkExLjk0NywxLjk0NywwLDAsMSwxMC42NjgsMTMuOFo+PC9wYXRoPiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTEgeT0xNT48L3JlY3Q+IDxwYXRoIGQ9TTE0LjMzMiwxMi4yYTEuOTksMS45OSwwLDAsMSwuMTY2LjhIMTVWMTJIMTQuMjQ1Wj48L3BhdGg+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xNCB5PTE1PjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTE1IHk9MTE+PC9yZWN0PiA8L2c+IDxwb2x5bGluZSBjbGFzcz1xbC1zdHJva2UgcG9pbnRzPVxcXCI1LjUgMTMgOSA1IDEyLjUgMTNcXFwiPjwvcG9seWxpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xMS42MyB4Mj02LjM4IHkxPTExIHkyPTExPjwvbGluZT4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogODEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHJlY3QgY2xhc3M9XFxcInFsLWZpbGwgcWwtc3Ryb2tlXFxcIiBoZWlnaHQ9MyB3aWR0aD0zIHg9NCB5PTU+PC9yZWN0PiA8cmVjdCBjbGFzcz1cXFwicWwtZmlsbCBxbC1zdHJva2VcXFwiIGhlaWdodD0zIHdpZHRoPTMgeD0xMSB5PTU+PC9yZWN0PiA8cGF0aCBjbGFzcz1cXFwicWwtZXZlbiBxbC1maWxsIHFsLXN0cm9rZVxcXCIgZD1NNyw4YzAsNC4wMzEtMyw1LTMsNT48L3BhdGg+IDxwYXRoIGNsYXNzPVxcXCJxbC1ldmVuIHFsLWZpbGwgcWwtc3Ryb2tlXFxcIiBkPU0xNCw4YzAsNC4wMzEtMyw1LTMsNT48L3BhdGg+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDgyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwYXRoIGNsYXNzPXFsLXN0cm9rZSBkPU01LDRIOS41QTIuNSwyLjUsMCwwLDEsMTIsNi41djBBMi41LDIuNSwwLDAsMSw5LjUsOUg1QTAsMCwwLDAsMSw1LDlWNEEwLDAsMCwwLDEsNSw0Wj48L3BhdGg+IDxwYXRoIGNsYXNzPXFsLXN0cm9rZSBkPU01LDloNS41QTIuNSwyLjUsMCwwLDEsMTMsMTEuNXYwQTIuNSwyLjUsMCwwLDEsMTAuNSwxNEg1YTAsMCwwLDAsMSwwLDBWOUEwLDAsMCwwLDEsNSw5Wj48L3BhdGg+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDgzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIGNsYXNzPVxcXCJcXFwiIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT01IHgyPTEzIHkxPTMgeTI9Mz48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT02IHgyPTkuMzUgeTE9MTIgeTI9Mz48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xMSB4Mj0xNSB5MT0xMSB5Mj0xNT48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xNSB4Mj0xMSB5MT0xMSB5Mj0xNT48L2xpbmU+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEgcng9MC41IHJ5PTAuNSB3aWR0aD03IHg9MiB5PTE0PjwvcmVjdD4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogODQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9XFxcInFsLWNvbG9yLWxhYmVsIHFsLXN0cm9rZSBxbC10cmFuc3BhcmVudFxcXCIgeDE9MyB4Mj0xNSB5MT0xNSB5Mj0xNT48L2xpbmU+IDxwb2x5bGluZSBjbGFzcz1xbC1zdHJva2UgcG9pbnRzPVxcXCI1LjUgMTEgOSAzIDEyLjUgMTFcXFwiPjwvcG9seWxpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xMS42MyB4Mj02LjM4IHkxPTkgeTI9OT48L2xpbmU+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDg1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwb2x5Z29uIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtZmlsbFxcXCIgcG9pbnRzPVxcXCIzIDExIDUgOSAzIDcgMyAxMVxcXCI+PC9wb2x5Z29uPiA8bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlIHFsLWZpbGxcXFwiIHgxPTE1IHgyPTExIHkxPTQgeTI9ND48L2xpbmU+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTEsM2EzLDMsMCwwLDAsMCw2aDFWM0gxMVo+PC9wYXRoPiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xMSB3aWR0aD0xIHg9MTEgeT00PjwvcmVjdD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MTEgd2lkdGg9MSB4PTEzIHk9ND48L3JlY3Q+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDg2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwb2x5Z29uIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtZmlsbFxcXCIgcG9pbnRzPVxcXCIxNSAxMiAxMyAxMCAxNSA4IDE1IDEyXFxcIj48L3BvbHlnb24+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtZmlsbFxcXCIgeDE9OSB4Mj01IHkxPTQgeTI9ND48L2xpbmU+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NNSwzQTMsMywwLDAsMCw1LDlINlYzSDVaPjwvcGF0aD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MTEgd2lkdGg9MSB4PTUgeT00PjwvcmVjdD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MTEgd2lkdGg9MSB4PTcgeT00PjwvcmVjdD4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogODcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xNCwxNkg0YTEsMSwwLDAsMSwwLTJIMTRBMSwxLDAsMCwxLDE0LDE2WiAvPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTE0LDRINEExLDEsMCwwLDEsNCwySDE0QTEsMSwwLDAsMSwxNCw0WiAvPiA8cmVjdCBjbGFzcz1xbC1maWxsIHg9MyB5PTYgd2lkdGg9MTIgaGVpZ2h0PTYgcng9MSByeT0xIC8+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDg4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTMsMTZINWExLDEsMCwwLDEsMC0yaDhBMSwxLDAsMCwxLDEzLDE2WiAvPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTEzLDRINUExLDEsMCwwLDEsNSwyaDhBMSwxLDAsMCwxLDEzLDRaIC8+IDxyZWN0IGNsYXNzPXFsLWZpbGwgeD0yIHk9NiB3aWR0aD0xNCBoZWlnaHQ9NiByeD0xIHJ5PTEgLz4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogODkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xNSw4SDEzYTEsMSwwLDAsMSwwLTJoMkExLDEsMCwwLDEsMTUsOFogLz4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xNSwxMkgxM2ExLDEsMCwwLDEsMC0yaDJBMSwxLDAsMCwxLDE1LDEyWiAvPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTE1LDE2SDVhMSwxLDAsMCwxLDAtMkgxNUExLDEsMCwwLDEsMTUsMTZaIC8+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTUsNEg1QTEsMSwwLDAsMSw1LDJIMTVBMSwxLDAsMCwxLDE1LDRaIC8+IDxyZWN0IGNsYXNzPXFsLWZpbGwgeD0yIHk9NiB3aWR0aD04IGhlaWdodD02IHJ4PTEgcnk9MSAvPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA5MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTUsOEgzQTEsMSwwLDAsMSwzLDZINUExLDEsMCwwLDEsNSw4WiAvPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTUsMTJIM2ExLDEsMCwwLDEsMC0ySDVBMSwxLDAsMCwxLDUsMTJaIC8+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTMsMTZIM2ExLDEsMCwwLDEsMC0ySDEzQTEsMSwwLDAsMSwxMywxNlogLz4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xMyw0SDNBMSwxLDAsMCwxLDMsMkgxM0ExLDEsMCwwLDEsMTMsNFogLz4gPHJlY3QgY2xhc3M9cWwtZmlsbCB4PTggeT02IHdpZHRoPTggaGVpZ2h0PTYgcng9MSByeT0xIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDI0IDE4KSByb3RhdGUoLTE4MClcXFwiLz4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogOTEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xMS43NTksMi40ODJhMi41NjEsMi41NjEsMCwwLDAtMy41My42MDdBNy42NTYsNy42NTYsMCwwLDAsNi44LDYuMkM2LjEwOSw5LjE4OCw1LjI3NSwxNC42NzcsNC4xNSwxNC45MjdhMS41NDUsMS41NDUsMCwwLDAtMS4zLS45MzNBMC45MjIsMC45MjIsMCwwLDAsMiwxNS4wMzZTMS45NTQsMTYsNC4xMTksMTZzMy4wOTEtMi42OTEsMy43LTUuNTUzYzAuMTc3LS44MjYuMzYtMS43MjYsMC41NTQtMi42TDguNzc1LDYuMmMwLjM4MS0xLjQyMS44MDctMi41MjEsMS4zMDYtMi42NzZhMS4wMTQsMS4wMTQsMCwwLDAsMS4wMi41NkEwLjk2NiwwLjk2NiwwLDAsMCwxMS43NTksMi40ODJaPjwvcGF0aD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MS42IHJ4PTAuOCByeT0wLjggd2lkdGg9NSB4PTUuMTUgeT02LjI+PC9yZWN0PiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTEzLjY2MywxMi4wMjdhMS42NjIsMS42NjIsMCwwLDEsLjI2Ni0wLjI3NnEwLjE5MywwLjA2OS40NTYsMC4xMzhhMi4xLDIuMSwwLDAsMCwuNTM1LjA2OSwxLjA3NSwxLjA3NSwwLDAsMCwuNzY3LTAuMywxLjA0NCwxLjA0NCwwLDAsMCwuMzE0LTAuOCwwLjg0LDAuODQsMCwwLDAtLjIzOC0wLjYxOSwwLjgsMC44LDAsMCwwLS41OTQtMC4yMzksMS4xNTQsMS4xNTQsMCwwLDAtLjc4MS4zLDQuNjA3LDQuNjA3LDAsMCwwLS43ODEsMXEtMC4wOTEuMTUtLjIxOCwwLjM0NmwtMC4yNDYuMzhjLTAuMDY4LS4yODgtMC4xMzctMC41ODItMC4yMTItMC44ODUtMC40NTktMS44NDctMi40OTQtLjk4NC0yLjk0MS0wLjgtMC40ODIuMi0uMzUzLDAuNjQ3LTAuMDk0LDAuNTI5YTAuODY5LDAuODY5LDAsMCwxLDEuMjgxLjU4NWMwLjIxNywwLjc1MS4zNzcsMS40MzYsMC41MjcsMi4wMzhhNS42ODgsNS42ODgsMCwwLDEtLjM2Mi40NjcsMi42OSwyLjY5LDAsMCwxLS4yNjQuMjcxcS0wLjIyMS0uMDgtMC40NzEtMC4xNDdhMi4wMjksMi4wMjksMCwwLDAtLjUyMi0wLjA2NiwxLjA3OSwxLjA3OSwwLDAsMC0uNzY4LjNBMS4wNTgsMS4wNTgsMCwwLDAsOSwxNS4xMzFhMC44MiwwLjgyLDAsMCwwLC44MzIuODUyLDEuMTM0LDEuMTM0LDAsMCwwLC43ODctMC4zLDUuMTEsNS4xMSwwLDAsMCwuNzc2LTAuOTkzcTAuMTQxLS4yMTkuMjE1LTAuMzRjMC4wNDYtLjA3Ni4xMjItMC4xOTQsMC4yMjMtMC4zNDZhMi43ODYsMi43ODYsMCwwLDAsLjkxOCwxLjcyNiwyLjU4MiwyLjU4MiwwLDAsMCwyLjM3Ni0uMTg1YzAuMzE3LS4xODEuMjEyLTAuNTY1LDAtMC40OTRBMC44MDcsMC44MDcsMCwwLDEsMTQuMTc2LDE1YTUuMTU5LDUuMTU5LDAsMCwxLS45MTMtMi40NDZsMCwwUTEzLjQ4NywxMi4yNCwxMy42NjMsMTIuMDI3Wj48L3BhdGg+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDkyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdCb3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTAsNFYxNGExLDEsMCwwLDEtMiwwVjEwSDN2NGExLDEsMCwwLDEtMiwwVjRBMSwxLDAsMCwxLDMsNFY4SDhWNGExLDEsMCwwLDEsMiwwWm02LjA2Nzg3LDkuMjA5SDE0Ljk4OTc1VjcuNTk4NjNhLjU0MDg1LjU0MDg1LDAsMCwwLS42MDUtLjYwNTQ3aC0uNjI3NDRhMS4wMTExOSwxLjAxMTE5LDAsMCwwLS43NDguMjk2ODhMMTEuNjQ1LDguNTY2NDFhLjU0MzUuNTQzNSwwLDAsMC0uMDIyLjg1ODRsLjI4NjEzLjMwNzYyYS41Mzg2MS41Mzg2MSwwLDAsMCwuODQ3MTcuMDMzMmwuMDk5MTItLjA4Nzg5YTEuMjEzNywxLjIxMzcsMCwwLDAsLjI0MTctLjM1MjU0aC4wMjI0NnMtLjAxMTIzLjMwODU5LS4wMTEyMy42MDU0N1YxMy4yMDlIMTIuMDQxYS41NDA4NS41NDA4NSwwLDAsMC0uNjA1LjYwNTQ3di40Mzk0NWEuNTQwODUuNTQwODUsMCwwLDAsLjYwNS42MDU0N2g0LjAyNjg2YS41NDA4NS41NDA4NSwwLDAsMCwuNjA1LS42MDU0N3YtLjQzOTQ1QS41NDA4NS41NDA4NSwwLDAsMCwxNi4wNjc4NywxMy4yMDlaIC8+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDkzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdCb3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTYuNzM5NzUsMTMuODE0NDV2LjQzOTQ1YS41NDA4NS41NDA4NSwwLDAsMS0uNjA1LjYwNTQ3SDExLjg1NWEuNTgzOTIuNTgzOTIsMCwwLDEtLjY0ODkzLS42MDU0N1YxNC4wMTI3YzAtMi45MDUyNywzLjM5OTQxLTMuNDIxODcsMy4zOTk0MS00LjU1NDY5YS43NzY3NS43NzY3NSwwLDAsMC0uODQ3MTctLjc4MTI1LDEuMTc2ODQsMS4xNzY4NCwwLDAsMC0uODM1OTQuMzg0NzdjLS4yNzQ5LjI2MzY3LS41NjEuMzc0LS44NTc5MS4xMzE4NGwtLjQyOTItLjM0MDgyYy0uMzA4MTEtLjI0MjE5LS4zODUyNS0uNTE3NTgtLjE1NDMtLjgxNDQ1YTIuOTcxNTUsMi45NzE1NSwwLDAsMSwyLjQ1MzYxLTEuMTc2NzYsMi40NTM5MywyLjQ1MzkzLDAsMCwxLDIuNjg0MDgsMi40MDkxOGMwLDIuNDUzMTItMy4xNzkyLDIuOTI2NzYtMy4yNzgzMiwzLjkzODQ4aDIuNzk0NDNBLjU0MDg1LjU0MDg1LDAsMCwxLDE2LjczOTc1LDEzLjgxNDQ1Wk05LDNBLjk5OTc0Ljk5OTc0LDAsMCwwLDgsNFY4SDNWNEExLDEsMCwwLDAsMSw0VjE0YTEsMSwwLDAsMCwyLDBWMTBIOHY0YTEsMSwwLDAsMCwyLDBWNEEuOTk5NzQuOTk5NzQsMCwwLDAsOSwzWiAvPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA5NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9NyB4Mj0xMyB5MT00IHkyPTQ+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9NSB4Mj0xMSB5MT0xNCB5Mj0xND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT04IHgyPTEwIHkxPTE0IHkyPTQ+PC9saW5lPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA5NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cmVjdCBjbGFzcz1xbC1zdHJva2UgaGVpZ2h0PTEwIHdpZHRoPTEyIHg9MyB5PTQ+PC9yZWN0PiA8Y2lyY2xlIGNsYXNzPXFsLWZpbGwgY3g9NiBjeT03IHI9MT48L2NpcmNsZT4gPHBvbHlsaW5lIGNsYXNzPVxcXCJxbC1ldmVuIHFsLWZpbGxcXFwiIHBvaW50cz1cXFwiNSAxMiA1IDExIDcgOSA4IDEwIDExIDcgMTMgOSAxMyAxMiA1IDEyXFxcIj48L3BvbHlsaW5lPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA5NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MyB4Mj0xNSB5MT0xNCB5Mj0xND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0zIHgyPTE1IHkxPTQgeTI9ND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT05IHgyPTE1IHkxPTkgeTI9OT48L2xpbmU+IDxwb2x5bGluZSBjbGFzcz1cXFwicWwtZmlsbCBxbC1zdHJva2VcXFwiIHBvaW50cz1cXFwiMyA3IDMgMTEgNSA5IDMgN1xcXCI+PC9wb2x5bGluZT4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogOTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTMgeDI9MTUgeTE9MTQgeTI9MTQ+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MyB4Mj0xNSB5MT00IHkyPTQ+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9OSB4Mj0xNSB5MT05IHkyPTk+PC9saW5lPiA8cG9seWxpbmUgY2xhc3M9cWwtc3Ryb2tlIHBvaW50cz1cXFwiNSA3IDUgMTEgMyA5IDUgN1xcXCI+PC9wb2x5bGluZT4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogOTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTcgeDI9MTEgeTE9NyB5Mj0xMT48L2xpbmU+IDxwYXRoIGNsYXNzPVxcXCJxbC1ldmVuIHFsLXN0cm9rZVxcXCIgZD1NOC45LDQuNTc3YTMuNDc2LDMuNDc2LDAsMCwxLC4zNiw0LjY3OUEzLjQ3NiwzLjQ3NiwwLDAsMSw0LjU3Nyw4LjlDMy4xODUsNy41LDIuMDM1LDYuNCw0LjIxNyw0LjIxN1M3LjUsMy4xODUsOC45LDQuNTc3Wj48L3BhdGg+IDxwYXRoIGNsYXNzPVxcXCJxbC1ldmVuIHFsLXN0cm9rZVxcXCIgZD1NMTMuNDIzLDkuMWEzLjQ3NiwzLjQ3NiwwLDAsMC00LjY3OS0uMzYsMy40NzYsMy40NzYsMCwwLDAsLjM2LDQuNjc5YzEuMzkyLDEuMzkyLDIuNSwyLjU0Miw0LjY3OS4zNlMxNC44MTUsMTAuNSwxMy40MjMsOS4xWj48L3BhdGg+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDk5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT03IHgyPTE1IHkxPTQgeTI9ND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT03IHgyPTE1IHkxPTkgeTI9OT48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT03IHgyPTE1IHkxPTE0IHkyPTE0PjwvbGluZT4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZSBxbC10aGluXFxcIiB4MT0yLjUgeDI9NC41IHkxPTUuNSB5Mj01LjU+PC9saW5lPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTMuNSw2QTAuNSwwLjUsMCwwLDEsMyw1LjVWMy4wODVsLTAuMjc2LjEzOEEwLjUsMC41LDAsMCwxLDIuMDUzLDNjLTAuMTI0LS4yNDctMC4wMjMtMC4zMjQuMjI0LTAuNDQ3bDEtLjVBMC41LDAuNSwwLDAsMSw0LDIuNXYzQTAuNSwwLjUsMCwwLDEsMy41LDZaPjwvcGF0aD4gPHBhdGggY2xhc3M9XFxcInFsLXN0cm9rZSBxbC10aGluXFxcIiBkPU00LjUsMTAuNWgtMmMwLS4yMzQsMS44NS0xLjA3NiwxLjg1LTIuMjM0QTAuOTU5LDAuOTU5LDAsMCwwLDIuNSw4LjE1Nj48L3BhdGg+IDxwYXRoIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtdGhpblxcXCIgZD1NMi41LDE0Ljg0NmEwLjk1OSwwLjk1OSwwLDAsMCwxLjg1LS4xMDlBMC43LDAuNywwLDAsMCwzLjc1LDE0YTAuNjg4LDAuNjg4LDAsMCwwLC42LTAuNzM2LDAuOTU5LDAuOTU5LDAsMCwwLTEuODUtLjEwOT48L3BhdGg+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDEwMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9NiB4Mj0xNSB5MT00IHkyPTQ+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9NiB4Mj0xNSB5MT05IHkyPTk+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9NiB4Mj0xNSB5MT0xNCB5Mj0xND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0zIHgyPTMgeTE9NCB5Mj00PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTMgeDI9MyB5MT05IHkyPTk+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MyB4Mj0zIHkxPTE0IHkyPTE0PjwvbGluZT4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogMTAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIGNsYXNzPVxcXCJcXFwiIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT05IHgyPTE1IHkxPTQgeTI9ND48L2xpbmU+IDxwb2x5bGluZSBjbGFzcz1xbC1zdHJva2UgcG9pbnRzPVxcXCIzIDQgNCA1IDYgM1xcXCI+PC9wb2x5bGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTkgeDI9MTUgeTE9MTQgeTI9MTQ+PC9saW5lPiA8cG9seWxpbmUgY2xhc3M9cWwtc3Ryb2tlIHBvaW50cz1cXFwiMyAxNCA0IDE1IDYgMTNcXFwiPjwvcG9seWxpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT05IHgyPTE1IHkxPTkgeTI9OT48L2xpbmU+IDxwb2x5bGluZSBjbGFzcz1xbC1zdHJva2UgcG9pbnRzPVxcXCIzIDkgNCAxMCA2IDhcXFwiPjwvcG9seWxpbmU+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDEwMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTE1LjUsMTVIMTMuODYxYTMuODU4LDMuODU4LDAsMCwwLDEuOTE0LTIuOTc1LDEuOCwxLjgsMCwwLDAtMS42LTEuNzUxQTEuOTIxLDEuOTIxLDAsMCwwLDEyLjAyMSwxMS43YTAuNTAwMTMsMC41MDAxMywwLDEsMCwuOTU3LjI5MWgwYTAuOTE0LDAuOTE0LDAsMCwxLDEuMDUzLS43MjUsMC44MSwwLjgxLDAsMCwxLC43NDQuNzYyYzAsMS4wNzYtMS4xNjk3MSwxLjg2OTgyLTEuOTM5NzEsMi40MzA4MkExLjQ1NjM5LDEuNDU2MzksMCwwLDAsMTIsMTUuNWEwLjUsMC41LDAsMCwwLC41LjVoM0EwLjUsMC41LDAsMCwwLDE1LjUsMTVaIC8+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NOS42NSw1LjI0MWExLDEsMCwwLDAtMS40MDkuMTA4TDYsNy45NjQsMy43NTksNS4zNDlBMSwxLDAsMCwwLDIuMTkyLDYuNTkxNzhRMi4yMTU0MSw2LjYyMTMsMi4yNDEsNi42NDlMNC42ODQsOS41LDIuMjQxLDEyLjM1QTEsMSwwLDAsMCwzLjcxLDEzLjcwNzIycTAuMDI1NTctLjAyNzY4LjA0OS0wLjA1NzIyTDYsMTEuMDM2LDguMjQxLDEzLjY1YTEsMSwwLDEsMCwxLjU2Ny0xLjI0Mjc3UTkuNzg0NTksMTIuMzc3Nyw5Ljc1OSwxMi4zNUw3LjMxNiw5LjUsOS43NTksNi42NTFBMSwxLDAsMCwwLDkuNjUsNS4yNDFaIC8+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDEwMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTE1LjUsN0gxMy44NjFhNC4wMTUsNC4wMTUsMCwwLDAsMS45MTQtMi45NzUsMS44LDEuOCwwLDAsMC0xLjYtMS43NTFBMS45MjIsMS45MjIsMCwwLDAsMTIuMDIxLDMuN2EwLjUsMC41LDAsMSwwLC45NTcuMjkxLDAuOTE3LDAuOTE3LDAsMCwxLDEuMDUzLS43MjUsMC44MSwwLjgxLDAsMCwxLC43NDQuNzYyYzAsMS4wNzctMS4xNjQsMS45MjUtMS45MzQsMi40ODZBMS40MjMsMS40MjMsMCwwLDAsMTIsNy41YTAuNSwwLjUsMCwwLDAsLjUuNWgzQTAuNSwwLjUsMCwwLDAsMTUuNSw3WiAvPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTkuNjUxLDUuMjQxYTEsMSwwLDAsMC0xLjQxLjEwOEw2LDcuOTY0LDMuNzU5LDUuMzQ5YTEsMSwwLDEsMC0xLjUxOSwxLjNMNC42ODMsOS41LDIuMjQxLDEyLjM1YTEsMSwwLDEsMCwxLjUxOSwxLjNMNiwxMS4wMzYsOC4yNDEsMTMuNjVhMSwxLDAsMCwwLDEuNTE5LTEuM0w3LjMxNyw5LjUsOS43NTksNi42NTFBMSwxLDAsMCwwLDkuNjUxLDUuMjQxWiAvPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiAxMDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZSBxbC10aGluXFxcIiB4MT0xNS41IHgyPTIuNSB5MT04LjUgeTI9OS41PjwvbGluZT4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU05LjAwNyw4QzYuNTQyLDcuNzkxLDYsNy41MTksNiw2LjUsNiw1Ljc5Miw3LjI4Myw1LDksNWMxLjU3MSwwLDIuNzY1LjY3OSwyLjk2OSwxLjMwOWExLDEsMCwwLDAsMS45LS42MTdDMTMuMzU2LDQuMTA2LDExLjM1NCwzLDksMyw2LjIsMyw0LDQuNTM4LDQsNi41YTMuMiwzLjIsMCwwLDAsLjUsMS44NDNaPjwvcGF0aD4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU04Ljk4NCwxMEMxMS40NTcsMTAuMjA4LDEyLDEwLjQ3OSwxMiwxMS41YzAsMC43MDgtMS4yODMsMS41LTMsMS41LTEuNTcxLDAtMi43NjUtLjY3OS0yLjk2OS0xLjMwOWExLDEsMCwxLDAtMS45LjYxN0M0LjY0NCwxMy44OTQsNi42NDYsMTUsOSwxNWMyLjgsMCw1LTEuNTM4LDUtMy41YTMuMiwzLjIsMCwwLDAtLjUtMS44NDNaPjwvcGF0aD4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogMTA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwYXRoIGNsYXNzPXFsLXN0cm9rZSBkPU01LDNWOWE0LjAxMiw0LjAxMiwwLDAsMCw0LDRIOWE0LjAxMiw0LjAxMiwwLDAsMCw0LTRWMz48L3BhdGg+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEgcng9MC41IHJ5PTAuNSB3aWR0aD0xMiB4PTMgeT0xNT48L3JlY3Q+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDEwNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cmVjdCBjbGFzcz1xbC1zdHJva2UgaGVpZ2h0PTEyIHdpZHRoPTEyIHg9MyB5PTM+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xMiB3aWR0aD0xIHg9NSB5PTM+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xMiB3aWR0aD0xIHg9MTIgeT0zPjwvcmVjdD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MiB3aWR0aD04IHg9NSB5PTg+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xIHdpZHRoPTMgeD0zIHk9NT48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEgd2lkdGg9MyB4PTMgeT03PjwvcmVjdD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MSB3aWR0aD0zIHg9MyB5PTEwPjwvcmVjdD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MSB3aWR0aD0zIHg9MyB5PTEyPjwvcmVjdD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MSB3aWR0aD0zIHg9MTIgeT01PjwvcmVjdD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MSB3aWR0aD0zIHg9MTIgeT03PjwvcmVjdD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MSB3aWR0aD0zIHg9MTIgeT0xMD48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEgd2lkdGg9MyB4PTEyIHk9MTI+PC9yZWN0PiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiAxMDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBvbHlnb24gY2xhc3M9cWwtc3Ryb2tlIHBvaW50cz1cXFwiNyAxMSA5IDEzIDExIDExIDcgMTFcXFwiPjwvcG9seWdvbj4gPHBvbHlnb24gY2xhc3M9cWwtc3Ryb2tlIHBvaW50cz1cXFwiNyA3IDkgNSAxMSA3IDcgN1xcXCI+PC9wb2x5Z29uPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiAxMDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuQnViYmxlVG9vbHRpcCA9IHVuZGVmaW5lZDtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2V4dGVuZCA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfZXh0ZW5kMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZCk7XG5cbnZhciBfZW1pdHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfZW1pdHRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbWl0dGVyKTtcblxudmFyIF9iYXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Myk7XG5cbnZhciBfYmFzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9iYXNlKTtcblxudmFyIF9zZWxlY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblxudmFyIF9pY29ucyA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpO1xuXG52YXIgX2ljb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ljb25zKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgVE9PTEJBUl9DT05GSUcgPSBbWydib2xkJywgJ2l0YWxpYycsICdsaW5rJ10sIFt7IGhlYWRlcjogMSB9LCB7IGhlYWRlcjogMiB9LCAnYmxvY2txdW90ZSddXTtcblxudmFyIEJ1YmJsZVRoZW1lID0gZnVuY3Rpb24gKF9CYXNlVGhlbWUpIHtcbiAgX2luaGVyaXRzKEJ1YmJsZVRoZW1lLCBfQmFzZVRoZW1lKTtcblxuICBmdW5jdGlvbiBCdWJibGVUaGVtZShxdWlsbCwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWJibGVUaGVtZSk7XG5cbiAgICBpZiAob3B0aW9ucy5tb2R1bGVzLnRvb2xiYXIgIT0gbnVsbCAmJiBvcHRpb25zLm1vZHVsZXMudG9vbGJhci5jb250YWluZXIgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucy5tb2R1bGVzLnRvb2xiYXIuY29udGFpbmVyID0gVE9PTEJBUl9DT05GSUc7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJ1YmJsZVRoZW1lLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnViYmxlVGhlbWUpKS5jYWxsKHRoaXMsIHF1aWxsLCBvcHRpb25zKSk7XG5cbiAgICBfdGhpcy5xdWlsbC5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncWwtYnViYmxlJyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJ1YmJsZVRoZW1lLCBbe1xuICAgIGtleTogJ2V4dGVuZFRvb2xiYXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHRlbmRUb29sYmFyKHRvb2xiYXIpIHtcbiAgICAgIHRoaXMudG9vbHRpcCA9IG5ldyBCdWJibGVUb29sdGlwKHRoaXMucXVpbGwsIHRoaXMub3B0aW9ucy5ib3VuZHMpO1xuICAgICAgdGhpcy50b29sdGlwLnJvb3QuYXBwZW5kQ2hpbGQodG9vbGJhci5jb250YWluZXIpO1xuICAgICAgdGhpcy5idWlsZEJ1dHRvbnMoW10uc2xpY2UuY2FsbCh0b29sYmFyLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKSksIF9pY29uczIuZGVmYXVsdCk7XG4gICAgICB0aGlzLmJ1aWxkUGlja2VycyhbXS5zbGljZS5jYWxsKHRvb2xiYXIuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlbGVjdCcpKSwgX2ljb25zMi5kZWZhdWx0KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQnViYmxlVGhlbWU7XG59KF9iYXNlMi5kZWZhdWx0KTtcblxuQnViYmxlVGhlbWUuREVGQVVMVFMgPSAoMCwgX2V4dGVuZDIuZGVmYXVsdCkodHJ1ZSwge30sIF9iYXNlMi5kZWZhdWx0LkRFRkFVTFRTLCB7XG4gIG1vZHVsZXM6IHtcbiAgICB0b29sYmFyOiB7XG4gICAgICBoYW5kbGVyczoge1xuICAgICAgICBsaW5rOiBmdW5jdGlvbiBsaW5rKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2xpbmsnLCBmYWxzZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucXVpbGwudGhlbWUudG9vbHRpcC5lZGl0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxudmFyIEJ1YmJsZVRvb2x0aXAgPSBmdW5jdGlvbiAoX0Jhc2VUb29sdGlwKSB7XG4gIF9pbmhlcml0cyhCdWJibGVUb29sdGlwLCBfQmFzZVRvb2x0aXApO1xuXG4gIGZ1bmN0aW9uIEJ1YmJsZVRvb2x0aXAocXVpbGwsIGJvdW5kcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWJibGVUb29sdGlwKTtcblxuICAgIHZhciBfdGhpczIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQnViYmxlVG9vbHRpcC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJ1YmJsZVRvb2x0aXApKS5jYWxsKHRoaXMsIHF1aWxsLCBib3VuZHMpKTtcblxuICAgIF90aGlzMi5xdWlsbC5vbihfZW1pdHRlcjIuZGVmYXVsdC5ldmVudHMuRURJVE9SX0NIQU5HRSwgZnVuY3Rpb24gKHR5cGUsIHJhbmdlLCBvbGRSYW5nZSwgc291cmNlKSB7XG4gICAgICBpZiAodHlwZSAhPT0gX2VtaXR0ZXIyLmRlZmF1bHQuZXZlbnRzLlNFTEVDVElPTl9DSEFOR0UpIHJldHVybjtcbiAgICAgIGlmIChyYW5nZSAhPSBudWxsICYmIHJhbmdlLmxlbmd0aCA+IDAgJiYgc291cmNlID09PSBfZW1pdHRlcjIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpIHtcbiAgICAgICAgX3RoaXMyLnNob3coKTtcbiAgICAgICAgLy8gTG9jayBvdXIgd2lkdGggc28gd2Ugd2lsbCBleHBhbmQgYmV5b25kIG91ciBvZmZzZXRQYXJlbnQgYm91bmRhcmllc1xuICAgICAgICBfdGhpczIucm9vdC5zdHlsZS5sZWZ0ID0gJzBweCc7XG4gICAgICAgIF90aGlzMi5yb290LnN0eWxlLndpZHRoID0gJyc7XG4gICAgICAgIF90aGlzMi5yb290LnN0eWxlLndpZHRoID0gX3RoaXMyLnJvb3Qub2Zmc2V0V2lkdGggKyAncHgnO1xuICAgICAgICB2YXIgbGluZXMgPSBfdGhpczIucXVpbGwuZ2V0TGluZXMocmFuZ2UuaW5kZXgsIHJhbmdlLmxlbmd0aCk7XG4gICAgICAgIGlmIChsaW5lcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBfdGhpczIucG9zaXRpb24oX3RoaXMyLnF1aWxsLmdldEJvdW5kcyhyYW5nZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBsYXN0TGluZSA9IGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIHZhciBpbmRleCA9IF90aGlzMi5xdWlsbC5nZXRJbmRleChsYXN0TGluZSk7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGxhc3RMaW5lLmxlbmd0aCgpIC0gMSwgcmFuZ2UuaW5kZXggKyByYW5nZS5sZW5ndGggLSBpbmRleCk7XG4gICAgICAgICAgdmFyIF9ib3VuZHMgPSBfdGhpczIucXVpbGwuZ2V0Qm91bmRzKG5ldyBfc2VsZWN0aW9uLlJhbmdlKGluZGV4LCBsZW5ndGgpKTtcbiAgICAgICAgICBfdGhpczIucG9zaXRpb24oX2JvdW5kcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gX3RoaXMyLnRleHRib3ggJiYgX3RoaXMyLnF1aWxsLmhhc0ZvY3VzKCkpIHtcbiAgICAgICAgX3RoaXMyLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJ1YmJsZVRvb2x0aXAsIFt7XG4gICAga2V5OiAnbGlzdGVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdGVuKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIF9nZXQoQnViYmxlVG9vbHRpcC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCdWJibGVUb29sdGlwLnByb3RvdHlwZSksICdsaXN0ZW4nLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3IoJy5xbC1jbG9zZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMucm9vdC5jbGFzc0xpc3QucmVtb3ZlKCdxbC1lZGl0aW5nJyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucXVpbGwub24oX2VtaXR0ZXIyLmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9PUFRJTUlaRSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBMZXQgc2VsZWN0aW9uIGJlIHJlc3RvcmVkIGJ5IHRvb2xiYXIgaGFuZGxlcnMgYmVmb3JlIHJlcG9zaXRpb25pbmdcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF90aGlzMy5yb290LmNsYXNzTGlzdC5jb250YWlucygncWwtaGlkZGVuJykpIHJldHVybjtcbiAgICAgICAgICB2YXIgcmFuZ2UgPSBfdGhpczMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgaWYgKHJhbmdlICE9IG51bGwpIHtcbiAgICAgICAgICAgIF90aGlzMy5wb3NpdGlvbihfdGhpczMucXVpbGwuZ2V0Qm91bmRzKHJhbmdlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAxKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NhbmNlbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Bvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcG9zaXRpb24ocmVmZXJlbmNlKSB7XG4gICAgICB2YXIgc2hpZnQgPSBfZ2V0KEJ1YmJsZVRvb2x0aXAucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnViYmxlVG9vbHRpcC5wcm90b3R5cGUpLCAncG9zaXRpb24nLCB0aGlzKS5jYWxsKHRoaXMsIHJlZmVyZW5jZSk7XG4gICAgICB2YXIgYXJyb3cgPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcignLnFsLXRvb2x0aXAtYXJyb3cnKTtcbiAgICAgIGFycm93LnN0eWxlLm1hcmdpbkxlZnQgPSAnJztcbiAgICAgIGlmIChzaGlmdCA9PT0gMCkgcmV0dXJuIHNoaWZ0O1xuICAgICAgYXJyb3cuc3R5bGUubWFyZ2luTGVmdCA9IC0xICogc2hpZnQgLSBhcnJvdy5vZmZzZXRXaWR0aCAvIDIgKyAncHgnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCdWJibGVUb29sdGlwO1xufShfYmFzZS5CYXNlVG9vbHRpcCk7XG5cbkJ1YmJsZVRvb2x0aXAuVEVNUExBVEUgPSBbJzxzcGFuIGNsYXNzPVwicWwtdG9vbHRpcC1hcnJvd1wiPjwvc3Bhbj4nLCAnPGRpdiBjbGFzcz1cInFsLXRvb2x0aXAtZWRpdG9yXCI+JywgJzxpbnB1dCB0eXBlPVwidGV4dFwiIGRhdGEtZm9ybXVsYT1cImU9bWNeMlwiIGRhdGEtbGluaz1cImh0dHBzOi8vcXVpbGxqcy5jb21cIiBkYXRhLXZpZGVvPVwiRW1iZWQgVVJMXCI+JywgJzxhIGNsYXNzPVwicWwtY2xvc2VcIj48L2E+JywgJzwvZGl2PiddLmpvaW4oJycpO1xuXG5leHBvcnRzLkJ1YmJsZVRvb2x0aXAgPSBCdWJibGVUb29sdGlwO1xuZXhwb3J0cy5kZWZhdWx0ID0gQnViYmxlVGhlbWU7XG5cbi8qKiovIH0pLFxuLyogMTA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Myk7XG5cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pW1wiZGVmYXVsdFwiXTtcbn0pOyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnFsLXZpZGVvLWVtYmVke3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7cGFkZGluZy10b3A6NTYlfS5xbC12aWRlby1lbWJlZCBpZnJhbWV7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO2JvcmRlcjowO21hcmdpbjowO3BhZGRpbmc6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9taW5pbWl6ZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOmZhbHNlfSEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1ZpZGVvRW1iZWQudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjU5ZTcxMTQ1XCIsIGNvbnRlbnQsIHRydWUsIHt9KTsiLCJmdW5jdGlvbiBpbmplY3RTdHlsZSAoY29udGV4dCkge1xuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/bWluaW1pemUhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjpmYWxzZX0hc2Fzcy1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9WaWRlb0VtYmVkLnZ1ZVwiKVxufVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9WaWRlb0VtYmVkLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vVmlkZW9FbWJlZC52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCB7cmVuZGVyIGFzIF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnMgYXMgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfX30gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMzUwMWFlOTlcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVmlkZW9FbWJlZC52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbmltcG9ydCBub3JtYWxpemVDb21wb25lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplclwiXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfcmVuZGVyX18sXG4gIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuIiwidmFyIGJhc2VUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VUb1N0cmluZycpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9TdHJpbmc7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b051bWJlcjtcbiIsInZhciB0b051bWJlciA9IHJlcXVpcmUoJy4vdG9OdW1iZXInKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBmaW5pdGUgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMi4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9GaW5pdGUoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDtcbiAgfVxuICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgaWYgKHZhbHVlID09PSBJTkZJTklUWSB8fCB2YWx1ZSA9PT0gLUlORklOSVRZKSB7XG4gICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICB9XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9GaW5pdGU7XG4iLCJ2YXIgdG9GaW5pdGUgPSByZXF1aXJlKCcuL3RvRmluaXRlJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9JbnRlZ2VyKDMuMik7XG4gKiAvLyA9PiAzXG4gKlxuICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiAwXG4gKlxuICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAqXG4gKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gKiAvLyA9PiAzXG4gKi9cbmZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gdG9GaW5pdGUodmFsdWUpLFxuICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9JbnRlZ2VyO1xuIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbnZhciByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbnZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pY29kZVRvQXJyYXk7XG4iLCIvKipcbiAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzY2lpVG9BcnJheTtcbiIsInZhciBhc2NpaVRvQXJyYXkgPSByZXF1aXJlKCcuL19hc2NpaVRvQXJyYXknKSxcbiAgICBoYXNVbmljb2RlID0gcmVxdWlyZSgnLi9faGFzVW5pY29kZScpLFxuICAgIHVuaWNvZGVUb0FycmF5ID0gcmVxdWlyZSgnLi9fdW5pY29kZVRvQXJyYXknKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgID8gdW5pY29kZVRvQXJyYXkoc3RyaW5nKVxuICAgIDogYXNjaWlUb0FycmF5KHN0cmluZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nVG9BcnJheTtcbiIsIi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbnZhciByc0FzdHJhbFJhbmdlID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnLFxuICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLFxuICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZic7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbnZhciByc0FzdHJhbCA9ICdbJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJyxcbiAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknLFxuICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXScsXG4gICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG52YXIgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sXG4gICAgcnNTeW1ib2wgPSAnKD86JyArIFtyc05vbkFzdHJhbCArIHJzQ29tYm8gKyAnPycsIHJzQ29tYm8sIHJzUmVnaW9uYWwsIHJzU3VyclBhaXIsIHJzQXN0cmFsXS5qb2luKCd8JykgKyAnKSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG52YXIgcmVVbmljb2RlID0gUmVnRXhwKHJzRml0eiArICcoPz0nICsgcnNGaXR6ICsgJyl8JyArIHJzU3ltYm9sICsgcnNTZXEsICdnJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgc2l6ZSBvZiBhIFVuaWNvZGUgYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gKi9cbmZ1bmN0aW9uIHVuaWNvZGVTaXplKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gIHdoaWxlIChyZVVuaWNvZGUudGVzdChzdHJpbmcpKSB7XG4gICAgKytyZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1bmljb2RlU2l6ZTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5O1xuIiwidmFyIGJhc2VQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eScpO1xuXG4vKipcbiAqIEdldHMgdGhlIHNpemUgb2YgYW4gQVNDSUkgYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gKi9cbnZhciBhc2NpaVNpemUgPSBiYXNlUHJvcGVydHkoJ2xlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzY2lpU2l6ZTtcbiIsInZhciBhc2NpaVNpemUgPSByZXF1aXJlKCcuL19hc2NpaVNpemUnKSxcbiAgICBoYXNVbmljb2RlID0gcmVxdWlyZSgnLi9faGFzVW5pY29kZScpLFxuICAgIHVuaWNvZGVTaXplID0gcmVxdWlyZSgnLi9fdW5pY29kZVNpemUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgID8gdW5pY29kZVNpemUoc3RyaW5nKVxuICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nU2l6ZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufTtcclxuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5hcnk7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNSZWdFeHBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1JlZ0V4cCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzUmVnRXhwO1xuIiwidmFyIGJhc2VJc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2Jhc2VJc1JlZ0V4cCcpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNSZWdFeHAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1JlZ0V4cDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNSZWdFeHAoL2FiYy8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNSZWdFeHAoJy9hYmMvJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNSZWdFeHAgPSBub2RlSXNSZWdFeHAgPyBiYXNlVW5hcnkobm9kZUlzUmVnRXhwKSA6IGJhc2VJc1JlZ0V4cDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1JlZ0V4cDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgfVxuICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlbmd0aDtcbiAgfVxuICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gIHN0YXJ0ID4+Pj0gMDtcblxuICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU2xpY2U7XG4iLCJ2YXIgYmFzZVNsaWNlID0gcmVxdWlyZSgnLi9fYmFzZVNsaWNlJyk7XG5cbi8qKlxuICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gKi9cbmZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgcmV0dXJuICghc3RhcnQgJiYgZW5kID49IGxlbmd0aCkgPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdFNsaWNlO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheU1hcDtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiIsInZhciBiYXNlVG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlVG9TdHJpbmcnKSxcbiAgICBjYXN0U2xpY2UgPSByZXF1aXJlKCcuL19jYXN0U2xpY2UnKSxcbiAgICBoYXNVbmljb2RlID0gcmVxdWlyZSgnLi9faGFzVW5pY29kZScpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9pc1JlZ0V4cCcpLFxuICAgIHN0cmluZ1NpemUgPSByZXF1aXJlKCcuL19zdHJpbmdTaXplJyksXG4gICAgc3RyaW5nVG9BcnJheSA9IHJlcXVpcmUoJy4vX3N0cmluZ1RvQXJyYXknKSxcbiAgICB0b0ludGVnZXIgPSByZXF1aXJlKCcuL3RvSW50ZWdlcicpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpO1xuXG4vKiogVXNlZCBhcyBkZWZhdWx0IG9wdGlvbnMgZm9yIGBfLnRydW5jYXRlYC4gKi9cbnZhciBERUZBVUxUX1RSVU5DX0xFTkdUSCA9IDMwLFxuICAgIERFRkFVTFRfVFJVTkNfT01JU1NJT04gPSAnLi4uJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbi8qKlxuICogVHJ1bmNhdGVzIGBzdHJpbmdgIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gKiBzdHJpbmcgd2hpY2ggZGVmYXVsdHMgdG8gXCIuLi5cIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cnVuY2F0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5vbWlzc2lvbj0nLi4uJ10gVGhlIHN0cmluZyB0byBpbmRpY2F0ZSB0ZXh0IGlzIG9taXR0ZWQuXG4gKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtvcHRpb25zLnNlcGFyYXRvcl0gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHRydW5jYXRlIHRvLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hiby4uLidcbiAqXG4gKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICogICAnbGVuZ3RoJzogMjQsXG4gKiAgICdzZXBhcmF0b3InOiAnICdcbiAqIH0pO1xuICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwuLi4nXG4gKlxuICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAqICAgJ2xlbmd0aCc6IDI0LFxuICogICAnc2VwYXJhdG9yJzogLyw/ICsvXG4gKiB9KTtcbiAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUuLi4nXG4gKlxuICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAqICAgJ29taXNzaW9uJzogJyBbLi4uXSdcbiAqIH0pO1xuICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAqL1xuZnVuY3Rpb24gdHJ1bmNhdGUoc3RyaW5nLCBvcHRpb25zKSB7XG4gIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgIG9taXNzaW9uID0gREVGQVVMVF9UUlVOQ19PTUlTU0lPTjtcblxuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgIGxlbmd0aCA9ICdsZW5ndGgnIGluIG9wdGlvbnMgPyB0b0ludGVnZXIob3B0aW9ucy5sZW5ndGgpIDogbGVuZ3RoO1xuICAgIG9taXNzaW9uID0gJ29taXNzaW9uJyBpbiBvcHRpb25zID8gYmFzZVRvU3RyaW5nKG9wdGlvbnMub21pc3Npb24pIDogb21pc3Npb247XG4gIH1cbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICB2YXIgc3RyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpO1xuICAgIHN0ckxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuICB9XG4gIGlmIChsZW5ndGggPj0gc3RyTGVuZ3RoKSB7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfVxuICB2YXIgZW5kID0gbGVuZ3RoIC0gc3RyaW5nU2l6ZShvbWlzc2lvbik7XG4gIGlmIChlbmQgPCAxKSB7XG4gICAgcmV0dXJuIG9taXNzaW9uO1xuICB9XG4gIHZhciByZXN1bHQgPSBzdHJTeW1ib2xzXG4gICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgIDogc3RyaW5nLnNsaWNlKDAsIGVuZCk7XG5cbiAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICB9XG4gIGlmIChzdHJTeW1ib2xzKSB7XG4gICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgfVxuICBpZiAoaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgdmFyIG1hdGNoLFxuICAgICAgICAgIHN1YnN0cmluZyA9IHJlc3VsdDtcblxuICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCB0b1N0cmluZyhyZUZsYWdzLmV4ZWMoc2VwYXJhdG9yKSkgKyAnZycpO1xuICAgICAgfVxuICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICB3aGlsZSAoKG1hdGNoID0gc2VwYXJhdG9yLmV4ZWMoc3Vic3RyaW5nKSkpIHtcbiAgICAgICAgdmFyIG5ld0VuZCA9IG1hdGNoLmluZGV4O1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIG5ld0VuZCA9PT0gdW5kZWZpbmVkID8gZW5kIDogbmV3RW5kKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgdmFyIGluZGV4ID0gcmVzdWx0Lmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0cnVuY2F0ZTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnFsLWVtYmVkLXNvdXJjZS1pbWFnZXtoZWlnaHQ6MTAwJTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9LnFsLWVtYmVkLXNvdXJjZS1pbWFnZSBpbWd7bWF4LWhlaWdodDoxMDAlO3dpZHRoOmF1dG87b2JqZWN0LWZpdDpjb250YWluO2p1c3RpZnktc2VsZjpyaWdodH0ucWwtZW1iZWQtc291cmNlLWltYWdlIHNwYW57YmFja2dyb3VuZC1jb2xvcjojZmZmO21pbi1oZWlnaHQ6MTAwcHg7d2lkdGg6MTAwJTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7cGFkZGluZzoxMHB4fS5xbC1lbWJlZC1zb3VyY2UtaW1hZ2Ugc3BhbiBzdmd7d2lkdGg6NjBweDtoZWlnaHQ6YXV0bztjb2xvcjojZWVlfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9taW5pbWl6ZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOmZhbHNlfSEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1NvdXJjZUltYWdlLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIxYmVhNzI4MVwiLCBjb250ZW50LCB0cnVlLCB7fSk7IiwiZnVuY3Rpb24gaW5qZWN0U3R5bGUgKGNvbnRleHQpIHtcbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP21pbmltaXplIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6ZmFsc2V9IXNhc3MtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vU291cmNlSW1hZ2UudnVlXCIpXG59XG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1NvdXJjZUltYWdlLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vU291cmNlSW1hZ2UudnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQge3JlbmRlciBhcyBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zIGFzIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX199IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTAzNmFiNTQ2XFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1NvdXJjZUltYWdlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuaW1wb3J0IG5vcm1hbGl6ZUNvbXBvbmVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudC1ub3JtYWxpemVyXCJcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV9yZW5kZXJfXyxcbiAgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5xbC1lbWJlZC1zb3VyY2UtaWNvbnttYXJnaW4tcmlnaHQ6M3B4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjE2cHg7aGVpZ2h0OjE2cHh9LnFsLWVtYmVkLXNvdXJjZS1pY29uIGltZ3toZWlnaHQ6MTAwJTt3aWR0aDoxMDAlfS5xbC1lbWJlZC1zb3VyY2UtaWNvbiBzcGFue2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7ZGlzcGxheTppbmxpbmUtZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOiM5OTk7Ym9yZGVyLXJhZGl1czo1MCU7Y29sb3I6I2ZmZn0ucWwtZW1iZWQtc291cmNlLWljb24gc3BhbiBzdmd7d2lkdGg6NXB4O2hlaWdodDphdXRvfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9taW5pbWl6ZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOmZhbHNlfSEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1NvdXJjZUljb24udnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjBiNGI5ZjFlXCIsIGNvbnRlbnQsIHRydWUsIHt9KTsiLCJmdW5jdGlvbiBpbmplY3RTdHlsZSAoY29udGV4dCkge1xuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/bWluaW1pemUhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjpmYWxzZX0hc2Fzcy1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9Tb3VyY2VJY29uLnZ1ZVwiKVxufVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Tb3VyY2VJY29uLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vU291cmNlSWNvbi52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCB7cmVuZGVyIGFzIF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnMgYXMgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfX30gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNTgxZTZlMzJcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vU291cmNlSWNvbi52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbmltcG9ydCBub3JtYWxpemVDb21wb25lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplclwiXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfcmVuZGVyX18sXG4gIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucWwtbGluay1lbWJlZCAucWwtZW1iZWQtbGluaywucWwtbGluay1lbWJlZCAucWwtZW1iZWQtbGluazpob3ZlciwucWwtbGluay1lbWJlZCAucWwtZW1iZWQtbGluazpsaW5re2NvbG9yOmdyYXk7dGV4dC1kZWNvcmF0aW9uOm5vbmV9LnFsLWxpbmstZW1iZWQgLnFsLWVtYmVkLWxpbmt7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtY29sb3I6I2ZiZmFmYTtib3JkZXI6MXB4IHNvbGlkICNlZWVkZWQ7Zm9udC1zaXplOi45ZW07bWF4LWhlaWdodDoyMDBweH0ucWwtbGluay1lbWJlZCAucWwtZW1iZWQtY29udGVudHt3aWR0aDo3MCU7ZmxleDowIDAgNzAlO3BhZGRpbmc6MTVweDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5xbC1saW5rLWVtYmVkIC5xbC1lbWJlZC1kZXNjcmlwdGlvbntmbGV4OjEgMSAwfS5xbC1saW5rLWVtYmVkIC5xbC1lbWJlZC1zb3VyY2V7bWFyZ2luLXRvcDoxNXB4O2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXJ9LnFsLWxpbmstZW1iZWQgLnFsLWVtYmVkLWltYWdle3dpZHRoOjMwJTtmbGV4OjAgMCAzMCU7cGFkZGluZzoxNXB4O2JhY2tncm91bmQtY29sb3I6I2NjY31cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/bWluaW1pemUhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjpmYWxzZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9MaW5rRW1iZWQudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjQ0NmU2MGJlXCIsIGNvbnRlbnQsIHRydWUsIHt9KTsiLCJmdW5jdGlvbiBpbmplY3RTdHlsZSAoY29udGV4dCkge1xuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/bWluaW1pemUhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjpmYWxzZX0hc2Fzcy1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9MaW5rRW1iZWQudnVlXCIpXG59XG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0xpbmtFbWJlZC52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0xpbmtFbWJlZC52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCB7cmVuZGVyIGFzIF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnMgYXMgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfX30gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtYzM4NDAwNzRcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vTGlua0VtYmVkLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuaW1wb3J0IG5vcm1hbGl6ZUNvbXBvbmVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudC1ub3JtYWxpemVyXCJcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV9yZW5kZXJfXyxcbiAgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9taW5pbWl6ZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOmZhbHNlfSEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0VtYmVkSXRlbS52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiOTMyMmE2ZmVcIiwgY29udGVudCwgdHJ1ZSwge30pOyIsImZ1bmN0aW9uIGluamVjdFN0eWxlIChjb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9taW5pbWl6ZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOmZhbHNlfSFzYXNzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0VtYmVkSXRlbS52dWVcIilcbn1cbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vRW1iZWRJdGVtLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vRW1iZWRJdGVtLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IHtyZW5kZXIgYXMgX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZucyBhcyBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19ffSBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi1jMTNiOTU3MlxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9FbWJlZEl0ZW0udnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG5pbXBvcnQgbm9ybWFsaXplQ29tcG9uZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXJcIlxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3JlbmRlcl9fLFxuICBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsInZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1laWRhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiIsIi8qIVxuICogVnVlLmpzIHYyLjUuMTZcbiAqIChjKSAyMDE0LTIwMTggRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuLyogICovXG5cbnZhciBlbXB0eU9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG4vLyB0aGVzZSBoZWxwZXJzIHByb2R1Y2VzIGJldHRlciB2bSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4vLyBleHBsaWNpdG5lc3MgYW5kIGZ1bmN0aW9uIGlubGluaW5nXG5mdW5jdGlvbiBpc1VuZGVmICh2KSB7XG4gIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc0RlZiAodikge1xuICByZXR1cm4gdiAhPT0gdW5kZWZpbmVkICYmIHYgIT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNUcnVlICh2KSB7XG4gIHJldHVybiB2ID09PSB0cnVlXG59XG5cbmZ1bmN0aW9uIGlzRmFsc2UgKHYpIHtcbiAgcmV0dXJuIHYgPT09IGZhbHNlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgcHJpbWl0aXZlXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSBlLmcuIFtvYmplY3QgT2JqZWN0XVxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogdHlwZW9mIHZhbCA9PT0gJ29iamVjdCdcbiAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCBudWxsLCAyKVxuICAgICAgOiBTdHJpbmcodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4gKi9cbnZhciBpc1Jlc2VydmVkQXR0cmlidXRlID0gbWFrZU1hcCgna2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMnKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZSAoYXJyLCBpdGVtKSB7XG4gIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpXG4gIH0pXG59XG5cbi8qKlxuICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy5cbiAqL1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSk7XG5cbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG59KTtcblxuLyoqXG4gKiBTaW1wbGUgYmluZCBwb2x5ZmlsbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXQuLi4gZS5nLlxuICogUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHkgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmUgc2luY2UgbmF0aXZlIGJpbmQgaXNcbiAqIG5vdyBtb3JlIHBlcmZvcm1hbnQgaW4gbW9zdCBicm93c2VycywgYnV0IHJlbW92aW5nIGl0IHdvdWxkIGJlIGJyZWFraW5nIGZvclxuICogY29kZSB0aGF0IHdhcyBhYmxlIHRvIHJ1biBpbiBQaGFudG9tSlMgMS54LCBzbyB0aGlzIG11c3QgYmUga2VwdCBmb3JcbiAqIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKVxuICovXG5mdW5jdGlvbiBub29wIChhLCBiLCBjKSB7fVxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gKi9cbnZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyoqXG4gKiBSZXR1cm4gc2FtZSB2YWx1ZVxuICovXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHN0YXRpYyBrZXlzIHN0cmluZyBmcm9tIGNvbXBpbGVyIG1vZHVsZXMuXG4gKi9cblxuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBmdW5jdGlvbiBpcyBjYWxsZWQgb25seSBvbmNlLlxuICovXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgU1NSX0FUVFIgPSAnZGF0YS1zZXJ2ZXItcmVuZGVyZWQnO1xuXG52YXIgQVNTRVRfVFlQRVMgPSBbXG4gICdjb21wb25lbnQnLFxuICAnZGlyZWN0aXZlJyxcbiAgJ2ZpbHRlcidcbl07XG5cbnZhciBMSUZFQ1lDTEVfSE9PS1MgPSBbXG4gICdiZWZvcmVDcmVhdGUnLFxuICAnY3JlYXRlZCcsXG4gICdiZWZvcmVNb3VudCcsXG4gICdtb3VudGVkJyxcbiAgJ2JlZm9yZVVwZGF0ZScsXG4gICd1cGRhdGVkJyxcbiAgJ2JlZm9yZURlc3Ryb3knLFxuICAnZGVzdHJveWVkJyxcbiAgJ2FjdGl2YXRlZCcsXG4gICdkZWFjdGl2YXRlZCcsXG4gICdlcnJvckNhcHR1cmVkJ1xuXTtcblxuLyogICovXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgKi9cbiAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBFcnJvciBoYW5kbGVyIGZvciB3YXRjaGVyIGVycm9yc1xuICAgKi9cbiAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcbiAgICovXG4gIHdhcm5IYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICovXG4gIGlnbm9yZWRFbGVtZW50czogW10sXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB1c2VyIGtleSBhbGlhc2VzIGZvciB2LW9uXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRBdHRyOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LU1xufSlcblxuLyogICovXG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gL1teXFx3LiRdLztcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xuXG4vLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG52YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuXG52YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm0gfHwge307XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG5cbnZhciB1aWQgPSAwO1xuXG4vKipcbiAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cbiAqL1xudmFyIERlcCA9IGZ1bmN0aW9uIERlcCAoKSB7XG4gIHRoaXMuaWQgPSB1aWQrKztcbiAgdGhpcy5zdWJzID0gW107XG59O1xuXG5EZXAucHJvdG90eXBlLmFkZFN1YiA9IGZ1bmN0aW9uIGFkZFN1YiAoc3ViKSB7XG4gIHRoaXMuc3Vicy5wdXNoKHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7XG4gIHJlbW92ZSh0aGlzLnN1YnMsIHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgRGVwLnRhcmdldC5hZGREZXAodGhpcyk7XG4gIH1cbn07XG5cbkRlcC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5ICgpIHtcbiAgLy8gc3RhYmlsaXplIHRoZSBzdWJzY3JpYmVyIGxpc3QgZmlyc3RcbiAgdmFyIHN1YnMgPSB0aGlzLnN1YnMuc2xpY2UoKTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIHRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIHRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb25seSBvbmVcbi8vIHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkIGF0IGFueSB0aW1lLlxuRGVwLnRhcmdldCA9IG51bGw7XG52YXIgdGFyZ2V0U3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gcHVzaFRhcmdldCAoX3RhcmdldCkge1xuICBpZiAoRGVwLnRhcmdldCkgeyB0YXJnZXRTdGFjay5wdXNoKERlcC50YXJnZXQpOyB9XG4gIERlcC50YXJnZXQgPSBfdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0U3RhY2sucG9wKCk7XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9ucyxcbiAgYXN5bmNGYWN0b3J5XG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZm5Db250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgdm5vZGUuY2hpbGRyZW4sXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7XG4gIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtcblxudmFyIG1ldGhvZHNUb1BhdGNoID0gW1xuICAncHVzaCcsXG4gICdwb3AnLFxuICAnc2hpZnQnLFxuICAndW5zaGlmdCcsXG4gICdzcGxpY2UnLFxuICAnc29ydCcsXG4gICdyZXZlcnNlJ1xuXTtcblxuLyoqXG4gKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcbiAqL1xubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gKi9cbnZhciBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICBzaG91bGRPYnNlcnZlID0gdmFsdWU7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBpcyBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdmFyIGF1Z21lbnQgPSBoYXNQcm90b1xuICAgICAgPyBwcm90b0F1Z21lbnRcbiAgICAgIDogY29weUF1Z21lbnQ7XG4gICAgYXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBlYWNoIHByb3BlcnR5IGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWZpbmVSZWFjdGl2ZShvYmosIGtleXNbaV0pO1xuICB9XG59O1xuXG4vKipcbiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9ic2VydmUoaXRlbXNbaV0pO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbi8qKlxuICogQXVnbWVudCBhbiB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhbiB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgaWYgKCFnZXR0ZXIgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmICghb2IpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3QgZGVsZXRlIHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgaWYgKCF2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmcm9tKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiYgaXNQbGFpbk9iamVjdChmcm9tVmFsKSkge1xuICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogRGF0YVxuICovXG5mdW5jdGlvbiBtZXJnZURhdGFPckZuIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbiAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICB9XG4gICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nID8gY2hpbGRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IGNoaWxkVmFsLFxuICAgICAgICB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nID8gcGFyZW50VmFsLmNhbGwodGhpcywgdGhpcykgOiBwYXJlbnRWYWxcbiAgICAgIClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogY2hpbGRWYWw7XG4gICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IHBhcmVudFZhbDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgcmV0dXJuIGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbFxufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghL15bYS16QS1aXVtcXHctXSokLy50ZXN0KG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAnY2FuIG9ubHkgY29udGFpbiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyBhbmQgdGhlIGh5cGhlbiwgJyArXG4gICAgICAnYW5kIG11c3Qgc3RhcnQgd2l0aCBhIGxldHRlci4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYsIHVwZGF0ZTogZGVmIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG4gIHZhciBleHRlbmRzRnJvbSA9IGNoaWxkLmV4dGVuZHM7XG4gIGlmIChleHRlbmRzRnJvbSkge1xuICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGV4dGVuZHNGcm9tLCB2bSk7XG4gIH1cbiAgaWYgKGNoaWxkLm1peGlucykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgfVxuICB9XG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGJvb2xlYW4gY2FzdGluZ1xuICB2YXIgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XG4gIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkge1xuICAgICAgLy8gb25seSBjYXN0IGVtcHR5IHN0cmluZyAvIHNhbWUgbmFtZSB0byBib29sZWFuIGlmXG4gICAgICAvLyBib29sZWFuIGhhcyBoaWdoZXIgcHJpb3JpdHlcbiAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgdmFyIHByZXZTaG91bGRPYnNlcnZlID0gc2hvdWxkT2JzZXJ2ZTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgb2JzZXJ2ZSh2YWx1ZSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHByZXZTaG91bGRPYnNlcnZlKTtcbiAgfVxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIC8vIHNraXAgdmFsaWRhdGlvbiBmb3Igd2VleCByZWN5Y2xlLWxpc3QgY2hpbGQgY29tcG9uZW50IHByb3BzXG4gICAgIShmYWxzZSAmJiBpc09iamVjdCh2YWx1ZSkgJiYgKCdAYmluZGluZycgaW4gdmFsdWUpKVxuICApIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG4gIGlmICghdmFsaWQpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIuXCIgK1xuICAgICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSkgK1xuICAgICAgXCIsIGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBoYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAodm0pIHtcbiAgICB2YXIgY3VyID0gdm07XG4gICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgaWYgKGhvb2tzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGNhcHR1cmUgPSBob29rc1tpXS5jYWxsKGN1ciwgZXJyLCB2bSwgaW5mbykgPT09IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBnbG9iYWxIYW5kbGVFcnJvcihlLCBjdXIsICdlcnJvckNhcHR1cmVkIGhvb2snKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZ2xvYmFsSGFuZGxlRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGdsb2JhbEhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChjb25maWcuZXJyb3JIYW5kbGVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZXJyLCB2bSwgaW5mbylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG4vKiBnbG9iYWxzIE1lc3NhZ2VDaGFubmVsICovXG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIGJvdGggbWljcm90YXNrcyBhbmQgKG1hY3JvKSB0YXNrcy5cbi8vIEluIDwgMi40IHdlIHVzZWQgbWljcm90YXNrcyBldmVyeXdoZXJlLCBidXQgdGhlcmUgYXJlIHNvbWUgc2NlbmFyaW9zIHdoZXJlXG4vLyBtaWNyb3Rhc2tzIGhhdmUgdG9vIGhpZ2ggYSBwcmlvcml0eSBhbmQgZmlyZSBpbiBiZXR3ZWVuIHN1cHBvc2VkbHlcbi8vIHNlcXVlbnRpYWwgZXZlbnRzIChlLmcuICM0NTIxLCAjNjY5MCkgb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lXG4vLyBldmVudCAoIzY1NjYpLiBIb3dldmVyLCB1c2luZyAobWFjcm8pIHRhc2tzIGV2ZXJ5d2hlcmUgYWxzbyBoYXMgc3VidGxlIHByb2JsZW1zXG4vLyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnQgKGUuZy4gIzY4MTMsIG91dC1pbiB0cmFuc2l0aW9ucykuXG4vLyBIZXJlIHdlIHVzZSBtaWNyb3Rhc2sgYnkgZGVmYXVsdCwgYnV0IGV4cG9zZSBhIHdheSB0byBmb3JjZSAobWFjcm8pIHRhc2sgd2hlblxuLy8gbmVlZGVkIChlLmcuIGluIGV2ZW50IGhhbmRsZXJzIGF0dGFjaGVkIGJ5IHYtb24pLlxudmFyIG1pY3JvVGltZXJGdW5jO1xudmFyIG1hY3JvVGltZXJGdW5jO1xudmFyIHVzZU1hY3JvVGFzayA9IGZhbHNlO1xuXG4vLyBEZXRlcm1pbmUgKG1hY3JvKSB0YXNrIGRlZmVyIGltcGxlbWVudGF0aW9uLlxuLy8gVGVjaG5pY2FsbHkgc2V0SW1tZWRpYXRlIHNob3VsZCBiZSB0aGUgaWRlYWwgY2hvaWNlLCBidXQgaXQncyBvbmx5IGF2YWlsYWJsZVxuLy8gaW4gSUUuIFRoZSBvbmx5IHBvbHlmaWxsIHRoYXQgY29uc2lzdGVudGx5IHF1ZXVlcyB0aGUgY2FsbGJhY2sgYWZ0ZXIgYWxsIERPTVxuLy8gZXZlbnRzIHRyaWdnZXJlZCBpbiB0aGUgc2FtZSBsb29wIGlzIGJ5IHVzaW5nIE1lc3NhZ2VDaGFubmVsLlxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSkge1xuICBtYWNyb1RpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRJbW1lZGlhdGUoZmx1c2hDYWxsYmFja3MpO1xuICB9O1xufSBlbHNlIGlmICh0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTWVzc2FnZUNoYW5uZWwpIHx8XG4gIC8vIFBoYW50b21KU1xuICBNZXNzYWdlQ2hhbm5lbC50b1N0cmluZygpID09PSAnW29iamVjdCBNZXNzYWdlQ2hhbm5lbENvbnN0cnVjdG9yXSdcbikpIHtcbiAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgdmFyIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZsdXNoQ2FsbGJhY2tzO1xuICBtYWNyb1RpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwb3J0LnBvc3RNZXNzYWdlKDEpO1xuICB9O1xufSBlbHNlIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgbWFjcm9UaW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dChmbHVzaENhbGxiYWNrcywgMCk7XG4gIH07XG59XG5cbi8vIERldGVybWluZSBtaWNyb3Rhc2sgZGVmZXIgaW1wbGVtZW50YXRpb24uXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCwgJGZsb3ctZGlzYWJsZS1saW5lICovXG5pZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIG1pY3JvVGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gaW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gZmFsbGJhY2sgdG8gbWFjcm9cbiAgbWljcm9UaW1lckZ1bmMgPSBtYWNyb1RpbWVyRnVuYztcbn1cblxuLyoqXG4gKiBXcmFwIGEgZnVuY3Rpb24gc28gdGhhdCBpZiBhbnkgY29kZSBpbnNpZGUgdHJpZ2dlcnMgc3RhdGUgY2hhbmdlLFxuICogdGhlIGNoYW5nZXMgYXJlIHF1ZXVlZCB1c2luZyBhIChtYWNybykgdGFzayBpbnN0ZWFkIG9mIGEgbWljcm90YXNrLlxuICovXG5mdW5jdGlvbiB3aXRoTWFjcm9UYXNrIChmbikge1xuICByZXR1cm4gZm4uX3dpdGhUYXNrIHx8IChmbi5fd2l0aFRhc2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgdXNlTWFjcm9UYXNrID0gdHJ1ZTtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB1c2VNYWNyb1Rhc2sgPSBmYWxzZTtcbiAgICByZXR1cm4gcmVzXG4gIH0pXG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrIChjYiwgY3R4KSB7XG4gIHZhciBfcmVzb2x2ZTtcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbChjdHgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCBjdHgsICduZXh0VGljaycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlKGN0eCk7XG4gICAgfVxuICB9KTtcbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgcGVuZGluZyA9IHRydWU7XG4gICAgaWYgKHVzZU1hY3JvVGFzaykge1xuICAgICAgbWFjcm9UaW1lckZ1bmMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWljcm9UaW1lckZ1bmMoKTtcbiAgICB9XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciBoYXNQcm94eSA9XG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm94eSk7XG5cbiAgaWYgKGhhc1Byb3h5KSB7XG4gICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpO1xuICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcbiAgICAgICAgICB3YXJuKChcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiICsga2V5KSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFzSGFuZGxlciA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0O1xuICAgICAgdmFyIGlzQWxsb3dlZCA9IGFsbG93ZWRHbG9iYWxzKGtleSkgfHwga2V5LmNoYXJBdCgwKSA9PT0gJ18nO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEhhbmRsZXIgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKTtcbiAgICB9O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjbG9uZWRbaV0uYXBwbHkobnVsbCwgYXJndW1lbnRzJDEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGZucy5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50Lm9uY2UsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW5zdXJlQ3RvciAoY29tcCwgYmFzZSkge1xuICBpZiAoXG4gICAgY29tcC5fX2VzTW9kdWxlIHx8XG4gICAgKGhhc1N5bWJvbCAmJiBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxuICApIHtcbiAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBpc09iamVjdChjb21wKVxuICAgID8gYmFzZS5leHRlbmQoY29tcClcbiAgICA6IGNvbXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoXG4gIGZhY3RvcnksXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgbm9kZS5hc3luY0ZhY3RvcnkgPSBmYWN0b3J5O1xuICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9O1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvcixcbiAgY29udGV4dFxuKSB7XG4gIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wXG4gIH1cblxuICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZFxuICB9XG5cbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LmNvbnRleHRzKSkge1xuICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgIGZhY3RvcnkuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29udGV4dHMgPSBmYWN0b3J5LmNvbnRleHRzID0gW2NvbnRleHRdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY29udGV4dHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvbnRleHRzW2ldLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlcykge1xuICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcbiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAodHlwZW9mIHJlcy50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKHJlcy5jb21wb25lbnQpICYmIHR5cGVvZiByZXMuY29tcG9uZW50LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICAgICAgICAgID8gKFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIilcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuLCBvbmNlKSB7XG4gIGlmIChvbmNlKSB7XG4gICAgdGFyZ2V0LiRvbmNlKGV2ZW50LCBmbik7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgdm0pO1xuICB0YXJnZXQgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0aGlzJDEuJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG9uICgpIHtcbiAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBvbi5mbiA9IGZuO1xuICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBhcnJheSBvZiBldmVudHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMkMS4kb2ZmKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKGZuKSB7XG4gICAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgICB2YXIgY2I7XG4gICAgICB2YXIgaSQxID0gY2JzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpJDEtLSkge1xuICAgICAgICBjYiA9IGNic1tpJDFdO1xuICAgICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICAgIGNicy5zcGxpY2UoaSQxLCAxKTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiB2bS5fZXZlbnRzW2xvd2VyQ2FzZUV2ZW50XSkge1xuICAgICAgICB0aXAoXG4gICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICBcIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIChoeXBoZW5hdGUoZXZlbnQpKSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2JzW2ldLmFwcGx5KHZtLCBhcmdzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIHZhciBzbG90cyA9IHt9O1xuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIHNsb3RzXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICB2YXIgZGF0YSA9IGNoaWxkLmRhdGE7XG4gICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZVxuICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7XG4gICAgICBkZWxldGUgZGF0YS5hdHRycy5zbG90O1xuICAgIH1cbiAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAvLyBzYW1lIGNvbnRleHQuXG4gICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgIGRhdGEgJiYgZGF0YS5zbG90ICE9IG51bGxcbiAgICApIHtcbiAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlc1xuKSB7XG4gIHJlcyA9IHJlcyB8fCB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnNbaV0pKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoZm5zW2ldLCByZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNbZm5zW2ldLmtleV0gPSBmbnNbaV0uZm47XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cbiAgLy8gbG9jYXRlIGZpcnN0IG5vbi1hYnN0cmFjdCBwYXJlbnRcbiAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBpZiAocGFyZW50ICYmICFvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgd2hpbGUgKHBhcmVudC4kb3B0aW9ucy5hYnN0cmFjdCAmJiBwYXJlbnQuJHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIHBhcmVudC4kY2hpbGRyZW4ucHVzaCh2bSk7XG4gIH1cblxuICB2bS4kcGFyZW50ID0gcGFyZW50O1xuICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtO1xuXG4gIHZtLiRjaGlsZHJlbiA9IFtdO1xuICB2bS4kcmVmcyA9IHt9O1xuXG4gIHZtLl93YXRjaGVyID0gbnVsbDtcbiAgdm0uX2luYWN0aXZlID0gbnVsbDtcbiAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNNb3VudGVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZVVwZGF0ZScpO1xuICAgIH1cbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICAgIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18oXG4gICAgICAgIHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyxcbiAgICAgICAgdm0uJG9wdGlvbnMuX3BhcmVudEVsbSxcbiAgICAgICAgdm0uJG9wdGlvbnMuX3JlZkVsbVxuICAgICAgKTtcbiAgICAgIC8vIG5vIG5lZWQgZm9yIHRoZSByZWYgbm9kZXMgYWZ0ZXIgaW5pdGlhbCBwYXRjaFxuICAgICAgLy8gdGhpcyBwcmV2ZW50cyBrZWVwaW5nIGEgZGV0YWNoZWQgRE9NIHRyZWUgaW4gbWVtb3J5ICgjNTg1MSlcbiAgICAgIHZtLiRvcHRpb25zLl9wYXJlbnRFbG0gPSB2bS4kb3B0aW9ucy5fcmVmRWxtID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIG51bGwsIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW5cbiAgdmFyIGhhc0NoaWxkcmVuID0gISEoXG4gICAgcmVuZGVyQ2hpbGRyZW4gfHwgICAgICAgICAgICAgICAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xuICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCAgLy8gaGFzIG9sZCBzdGF0aWMgc2xvdHNcbiAgICBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzIHx8IC8vIGhhcyBuZXcgc2NvcGVkIHNsb3RzXG4gICAgdm0uJHNjb3BlZFNsb3RzICE9PSBlbXB0eU9iamVjdCAvLyBoYXMgb2xkIHNjb3BlZCBzbG90c1xuICApO1xuXG4gIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuICB2bS4kdm5vZGUgPSBwYXJlbnRWbm9kZTsgLy8gdXBkYXRlIHZtJ3MgcGxhY2Vob2xkZXIgbm9kZSB3aXRob3V0IHJlLXJlbmRlclxuXG4gIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICB2bS5fdm5vZGUucGFyZW50ID0gcGFyZW50Vm5vZGU7XG4gIH1cbiAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbiAgLy8gdXBkYXRlICRhdHRycyBhbmQgJGxpc3RlbmVycyBoYXNoXG4gIC8vIHRoZXNlIGFyZSBhbHNvIHJlYWN0aXZlIHNvIHRoZXkgbWF5IHRyaWdnZXIgY2hpbGQgdXBkYXRlIGlmIHRoZSBjaGlsZFxuICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICB2bS4kYXR0cnMgPSBwYXJlbnRWbm9kZS5kYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0O1xuICB2bS4kbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuXG4gIC8vIHVwZGF0ZSBwcm9wc1xuICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgIHZhciBwcm9wT3B0aW9ucyA9IHZtLiRvcHRpb25zLnByb3BzOyAvLyB3dGYgZmxvdz9cbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgfVxuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICB9XG5cbiAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZhciBvbGRMaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcblxuICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICBpZiAoaGFzQ2hpbGRyZW4pIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgcHVzaFRhcmdldCgpO1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGhhbmRsZXJzW2ldLmNhbGwodm0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG59XG5cbi8qICAqL1xuXG5cbnZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwO1xuXG52YXIgcXVldWUgPSBbXTtcbnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xudmFyIGhhcyA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgdmFyIHdhdGNoZXIsIGlkO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1tpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xufVxuXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICBoYXNbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcbiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHVpZCQxID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zLFxuICBpc1JlbmRlcldhdGNoZXJcbikge1xuICB0aGlzLnZtID0gdm07XG4gIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gIH1cbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgfVxuICB0aGlzLmNiID0gY2I7XG4gIHRoaXMuaWQgPSArK3VpZCQxOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgdGhpcy5kZXBzID0gW107XG4gIHRoaXMubmV3RGVwcyA9IFtdO1xuICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5leHByZXNzaW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgID8gZXhwT3JGbi50b1N0cmluZygpXG4gICAgOiAnJztcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcyQxLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzJDEubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMkMSk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB0aGlzLnZtLCAoXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgdmFsdWUgb2YgdGhlIHdhdGNoZXIuXG4gKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUgKCkge1xuICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBEZXBlbmQgb24gYWxsIGRlcHMgY29sbGVjdGVkIGJ5IHRoaXMgd2F0Y2hlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzJDEuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSB2bSdzIHdhdGNoZXIgbGlzdFxuICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXRcbiAgICAvLyBpZiB0aGUgdm0gaXMgYmVpbmcgZGVzdHJveWVkLlxuICAgIGlmICghdGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmVtb3ZlKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTtcbiAgICB9XG4gICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMkMS5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzJDEpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2bS4kcGFyZW50ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmaW5lUmVhY3RpdmUocHJvcHMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gXCIgK1xuICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICBwcm94eSh2bSwgXCJfZGF0YVwiLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhLCB2bSkge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcImRhdGEoKVwiKTtcbiAgICByZXR1cm4ge31cbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG52YXIgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsgbGF6eTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHdhdGNoZXJzID0gdm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBqdXN0IGdldHRlcnMgZHVyaW5nIFNTUlxuICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xuXG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAvLyBjcmVhdGUgaW50ZXJuYWwgd2F0Y2hlciBmb3IgdGhlIGNvbXB1dGVkIHByb3BlcnR5LlxuICAgICAgd2F0Y2hlcnNba2V5XSA9IG5ldyBXYXRjaGVyKFxuICAgICAgICB2bSxcbiAgICAgICAgZ2V0dGVyIHx8IG5vb3AsXG4gICAgICAgIG5vb3AsXG4gICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgIC8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXG4gICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIGRlZmluZUNvbXB1dGVkKHZtLCBrZXksIHVzZXJEZWYpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGtleSBpbiB2bS4kZGF0YSkge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIGRhdGEuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcC5cIiksIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lQ29tcHV0ZWQgKFxuICB0YXJnZXQsXG4gIGtleSxcbiAgdXNlckRlZlxuKSB7XG4gIHZhciBzaG91bGRDYWNoZSA9ICFpc1NlcnZlclJlbmRlcmluZygpO1xuICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gc2hvdWxkQ2FjaGVcbiAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgOiB1c2VyRGVmO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBub29wO1xuICB9IGVsc2Uge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgPyBzaG91bGRDYWNoZSAmJiB1c2VyRGVmLmNhY2hlICE9PSBmYWxzZVxuICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgICAgOiB1c2VyRGVmLmdldFxuICAgICAgOiBub29wO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSB1c2VyRGVmLnNldFxuICAgICAgPyB1c2VyRGVmLnNldFxuICAgICAgOiBub29wO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID09PSBub29wKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgYXNzaWduZWQgdG8gYnV0IGl0IGhhcyBubyBzZXR0ZXIuXCIpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZEdldHRlciAoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgdmFyIHdhdGNoZXIgPSB0aGlzLl9jb21wdXRlZFdhdGNoZXJzICYmIHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnNba2V5XTtcbiAgICBpZiAod2F0Y2hlcikge1xuICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcbiAgICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykge1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbiB1bmRlZmluZWQgdmFsdWUgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKChrZXkgaW4gdm0pICYmIGlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiBcIiArXG4gICAgICAgICAgXCJBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZtW2tleV0gPSBtZXRob2RzW2tleV0gPT0gbnVsbCA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgaGFuZGxlcixcbiAgb3B0aW9uc1xuKSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgdmFyIHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGF0YURlZi5zZXQgPSBmdW5jdGlvbiAobmV3RGF0YSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICtcbiAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXCIkcHJvcHMgaXMgcmVhZG9ubHkuXCIsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7XG4gIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblxuICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucylcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFByb3ZpZGUgKHZtKSB7XG4gIHZhciBwcm92aWRlID0gdm0uJG9wdGlvbnMucHJvdmlkZTtcbiAgaWYgKHByb3ZpZGUpIHtcbiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm92aWRlLmNhbGwodm0pXG4gICAgICA6IHByb3ZpZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xuICBpZiAocmVzdWx0KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGluamVjdCwga2V5KS5lbnVtZXJhYmxlXG4gICAgICB9KVxuICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgIHZhciBzb3VyY2UgPSB2bTtcbiAgICAgIHdoaWxlIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgaGFzT3duKHNvdXJjZS5fcHJvdmlkZWQsIHByb3ZpZGVLZXkpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVEZWZhdWx0ID0gaW5qZWN0W2tleV0uZGVmYXVsdDtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHR5cGVvZiBwcm92aWRlRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKVxuICAgICAgICAgICAgOiBwcm92aWRlRGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybigoXCJJbmplY3Rpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIG5vdCBmb3VuZFwiKSwgdm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLlxuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgdmFsLFxuICByZW5kZXJcbikge1xuICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwpO1xuICAgIGZvciAoaSA9IDA7IGkgPCB2YWw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKGkgKyAxLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtrZXldLCBrZXksIGkpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNEZWYocmV0KSkge1xuICAgIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgPHNsb3Q+XG4gKi9cbmZ1bmN0aW9uIHJlbmRlclNsb3QgKFxuICBuYW1lLFxuICBmYWxsYmFjayxcbiAgcHJvcHMsXG4gIGJpbmRPYmplY3Rcbikge1xuICB2YXIgc2NvcGVkU2xvdEZuID0gdGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07XG4gIHZhciBub2RlcztcbiAgaWYgKHNjb3BlZFNsb3RGbikgeyAvLyBzY29wZWQgc2xvdFxuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc09iamVjdChiaW5kT2JqZWN0KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JyxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgfVxuICAgIG5vZGVzID0gc2NvcGVkU2xvdEZuKHByb3BzKSB8fCBmYWxsYmFjaztcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xvdE5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV07XG4gICAgLy8gd2FybiBkdXBsaWNhdGUgc2xvdCB1c2FnZVxuICAgIGlmIChzbG90Tm9kZXMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNsb3ROb2Rlcy5fcmVuZGVyZWQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIkR1cGxpY2F0ZSBwcmVzZW5jZSBvZiBzbG90IFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgZm91bmQgaW4gdGhlIHNhbWUgcmVuZGVyIHRyZWUgXCIgK1xuICAgICAgICAgIFwiLSB0aGlzIHdpbGwgbGlrZWx5IGNhdXNlIHJlbmRlciBlcnJvcnMuXCIsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc2xvdE5vZGVzLl9yZW5kZXJlZCA9IHRydWU7XG4gICAgfVxuICAgIG5vZGVzID0gc2xvdE5vZGVzIHx8IGZhbGxiYWNrO1xuICB9XG5cbiAgdmFyIHRhcmdldCA9IHByb3BzICYmIHByb3BzLnNsb3Q7XG4gIGlmICh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnLCB7IHNsb3Q6IHRhcmdldCB9LCBub2RlcylcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbm9kZXNcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIGZpbHRlcnNcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUZpbHRlciAoaWQpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnZmlsdGVycycsIGlkLCB0cnVlKSB8fCBpZGVudGl0eVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNLZXlOb3RNYXRjaCAoZXhwZWN0LCBhY3R1YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0KSkge1xuICAgIHJldHVybiBleHBlY3QuaW5kZXhPZihhY3R1YWwpID09PSAtMVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBleHBlY3QgIT09IGFjdHVhbFxuICB9XG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIGNoZWNraW5nIGtleUNvZGVzIGZyb20gY29uZmlnLlxuICogZXhwb3NlZCBhcyBWdWUucHJvdG90eXBlLl9rXG4gKiBwYXNzaW5nIGluIGV2ZW50S2V5TmFtZSBhcyBsYXN0IGFyZ3VtZW50IHNlcGFyYXRlbHkgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAqL1xuZnVuY3Rpb24gY2hlY2tLZXlDb2RlcyAoXG4gIGV2ZW50S2V5Q29kZSxcbiAga2V5LFxuICBidWlsdEluS2V5Q29kZSxcbiAgZXZlbnRLZXlOYW1lLFxuICBidWlsdEluS2V5TmFtZVxuKSB7XG4gIHZhciBtYXBwZWRLZXlDb2RlID0gY29uZmlnLmtleUNvZGVzW2tleV0gfHwgYnVpbHRJbktleUNvZGU7XG4gIGlmIChidWlsdEluS2V5TmFtZSAmJiBldmVudEtleU5hbWUgJiYgIWNvbmZpZy5rZXlDb2Rlc1trZXldKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2goYnVpbHRJbktleU5hbWUsIGV2ZW50S2V5TmFtZSlcbiAgfSBlbHNlIGlmIChtYXBwZWRLZXlDb2RlKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2gobWFwcGVkS2V5Q29kZSwgZXZlbnRLZXlDb2RlKVxuICB9IGVsc2UgaWYgKGV2ZW50S2V5TmFtZSkge1xuICAgIHJldHVybiBoeXBoZW5hdGUoZXZlbnRLZXlOYW1lKSAhPT0ga2V5XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgdi1iaW5kPVwib2JqZWN0XCIgaW50byBhIFZOb2RlJ3MgZGF0YS5cbiAqL1xuZnVuY3Rpb24gYmluZE9iamVjdFByb3BzIChcbiAgZGF0YSxcbiAgdGFnLFxuICB2YWx1ZSxcbiAgYXNQcm9wLFxuICBpc1N5bmNcbikge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3Qgb3IgQXJyYXkgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgaGFzaDtcbiAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgPT09ICdjbGFzcycgfHxcbiAgICAgICAgICBrZXkgPT09ICdzdHlsZScgfHxcbiAgICAgICAgICBpc1Jlc2VydmVkQXR0cmlidXRlKGtleSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaGFzaCA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcbiAgICAgICAgICBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcbiAgICAgICAgICAgID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KVxuICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgdmFyIHRyZWUgPSBjYWNoZWRbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuXG4gIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgcmV0dXJuIHRyZWVcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgbnVsbCxcbiAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICk7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICovXG5mdW5jdGlvbiBtYXJrT25jZSAoXG4gIHRyZWUsXG4gIGluZGV4LFxuICBrZXlcbikge1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAoXG4gIHRyZWUsXG4gIGtleSxcbiAgaXNPbmNlXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCAoXG4gIGRhdGEsXG4gIHByb3BzLFxuICBjaGlsZHJlbixcbiAgcGFyZW50LFxuICBDdG9yXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIC8vIGVuc3VyZSB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiBpbiBmdW5jdGlvbmFsIGNvbXBvbmVudHNcbiAgLy8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVja1xuICB2YXIgY29udGV4dFZtO1xuICBpZiAoaGFzT3duKHBhcmVudCwgJ191aWQnKSkge1xuICAgIGNvbnRleHRWbSA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBjb250ZXh0Vm0uX29yaWdpbmFsID0gcGFyZW50O1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjb250ZXh0IHZtIHBhc3NlZCBpbiBpcyBhIGZ1bmN0aW9uYWwgY29udGV4dCBhcyB3ZWxsLlxuICAgIC8vIGluIHRoaXMgY2FzZSB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBhcmUgYWJsZSB0byBnZXQgYSBob2xkIHRvIHRoZVxuICAgIC8vIHJlYWwgY29udGV4dCBpbnN0YW5jZS5cbiAgICBjb250ZXh0Vm0gPSBwYXJlbnQ7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcGFyZW50ID0gcGFyZW50Ll9vcmlnaW5hbDtcbiAgfVxuICB2YXIgaXNDb21waWxlZCA9IGlzVHJ1ZShvcHRpb25zLl9jb21waWxlZCk7XG4gIHZhciBuZWVkTm9ybWFsaXphdGlvbiA9ICFpc0NvbXBpbGVkO1xuXG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5saXN0ZW5lcnMgPSBkYXRhLm9uIHx8IGVtcHR5T2JqZWN0O1xuICB0aGlzLmluamVjdGlvbnMgPSByZXNvbHZlSW5qZWN0KG9wdGlvbnMuaW5qZWN0LCBwYXJlbnQpO1xuICB0aGlzLnNsb3RzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpOyB9O1xuXG4gIC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGlzQ29tcGlsZWQpIHtcbiAgICAvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKClcbiAgICB0aGlzLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICAvLyBwcmUtcmVzb2x2ZSBzbG90cyBmb3IgcmVuZGVyU2xvdCgpXG4gICAgdGhpcy4kc2xvdHMgPSB0aGlzLnNsb3RzKCk7XG4gICAgdGhpcy4kc2NvcGVkU2xvdHMgPSBkYXRhLnNjb3BlZFNsb3RzIHx8IGVtcHR5T2JqZWN0O1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucylcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cblxuXG5cbi8vIFJlZ2lzdGVyIHRoZSBjb21wb25lbnQgaG9vayB0byB3ZWV4IG5hdGl2ZSByZW5kZXIgZW5naW5lLlxuLy8gVGhlIGhvb2sgd2lsbCBiZSB0cmlnZ2VyZWQgYnkgbmF0aXZlLCBub3QgamF2YXNjcmlwdC5cblxuXG4vLyBVcGRhdGVzIHRoZSBzdGF0ZSBvZiB0aGUgY29tcG9uZW50IHRvIHdlZXggbmF0aXZlIHJlbmRlciBlbmdpbmUuXG5cbi8qICAqL1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vSGFua3MxMDEwMC93ZWV4LW5hdGl2ZS1kaXJlY3RpdmUvdHJlZS9tYXN0ZXIvY29tcG9uZW50XG5cbi8vIGxpc3RlbmluZyBvbiBuYXRpdmUgY2FsbGJhY2tcblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxudmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKFxuICAgIHZub2RlLFxuICAgIGh5ZHJhdGluZyxcbiAgICBwYXJlbnRFbG0sXG4gICAgcmVmRWxtXG4gICkge1xuICAgIGlmIChcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAhdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkICYmXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZSxcbiAgICAgICAgcGFyZW50RWxtLFxuICAgICAgICByZWZFbG1cbiAgICAgICk7XG4gICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybigoXCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiBcIiArIChTdHJpbmcoQ3RvcikpKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gYXN5bmMgY29tcG9uZW50XG4gIHZhciBhc3luY0ZhY3Rvcnk7XG4gIGlmIChpc1VuZGVmKEN0b3IuY2lkKSkge1xuICAgIGFzeW5jRmFjdG9yeSA9IEN0b3I7XG4gICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yLCBjb250ZXh0KTtcbiAgICBpZiAoQ3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4gICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgIC8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi5cbiAgICAgIHJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKFxuICAgICAgICBhc3luY0ZhY3RvcnksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICB0YWdcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbiAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7XG4gICAgdHJhbnNmb3JtTW9kZWwoQ3Rvci5vcHRpb25zLCBkYXRhKTtcbiAgfVxuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcbiAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSkge1xuICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzICYgc2xvdFxuXG4gICAgLy8gd29yayBhcm91bmQgZmxvd1xuICAgIHZhciBzbG90ID0gZGF0YS5zbG90O1xuICAgIGRhdGEgPSB7fTtcbiAgICBpZiAoc2xvdCkge1xuICAgICAgZGF0YS5zbG90ID0gc2xvdDtcbiAgICB9XG4gIH1cblxuICAvLyBpbnN0YWxsIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgaW5zdGFsbENvbXBvbmVudEhvb2tzKGRhdGEpO1xuXG4gIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlXG4gIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICB2YXIgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgKFwidnVlLWNvbXBvbmVudC1cIiArIChDdG9yLmNpZCkgKyAobmFtZSA/IChcIi1cIiArIG5hbWUpIDogJycpKSxcbiAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LFxuICAgIHsgQ3RvcjogQ3RvciwgcHJvcHNEYXRhOiBwcm9wc0RhdGEsIGxpc3RlbmVyczogbGlzdGVuZXJzLCB0YWc6IHRhZywgY2hpbGRyZW46IGNoaWxkcmVuIH0sXG4gICAgYXN5bmNGYWN0b3J5XG4gICk7XG5cbiAgLy8gV2VleCBzcGVjaWZpYzogaW52b2tlIHJlY3ljbGUtbGlzdCBvcHRpbWl6ZWQgQHJlbmRlciBmdW5jdGlvbiBmb3JcbiAgLy8gZXh0cmFjdGluZyBjZWxsLXNsb3QgdGVtcGxhdGUuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9IYW5rczEwMTAwL3dlZXgtbmF0aXZlLWRpcmVjdGl2ZS90cmVlL21hc3Rlci9jb21wb25lbnRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQsIC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuICBwYXJlbnRFbG0sXG4gIHJlZkVsbVxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIF9wYXJlbnRFbG06IHBhcmVudEVsbSB8fCBudWxsLFxuICAgIF9yZWZFbG06IHJlZkVsbSB8fCBudWxsXG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICBob29rc1trZXldID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICB9XG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCc7KGRhdGEucHJvcHMgfHwgKGRhdGEucHJvcHMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgaWYgKGlzRGVmKG9uW2V2ZW50XSkpIHtcbiAgICBvbltldmVudF0gPSBbZGF0YS5tb2RlbC5jYWxsYmFja10uY29uY2F0KG9uW2V2ZW50XSk7XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlXG4pIHtcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEua2V5KSAmJiAhaXNQcmltaXRpdmUoZGF0YS5rZXkpXG4gICkge1xuICAgIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAgICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmXG4gICAgdHlwZW9mIGNoaWxkcmVuWzBdID09PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XG4gICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IEFMV0FZU19OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9XG4gIHZhciB2bm9kZSwgbnM7XG4gIGlmICh0eXBlb2YgdGFnID09PSAnc3RyaW5nJykge1xuICAgIHZhciBDdG9yO1xuICAgIG5zID0gKGNvbnRleHQuJHZub2RlICYmIGNvbnRleHQuJHZub2RlLm5zKSB8fCBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7XG4gICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdChkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lUmVhY3RpdmUodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICAvLyByZXNldCBfcmVuZGVyZWQgZmxhZyBvbiBzbG90cyBmb3IgZHVwbGljYXRlIHNsb3QgY2hlY2tcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgZm9yICh2YXIga2V5IGluIHZtLiRzbG90cykge1xuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgdm0uJHNsb3RzW2tleV0uX3JlbmRlcmVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKF9wYXJlbnRWbm9kZSkge1xuICAgICAgdm0uJHNjb3BlZFNsb3RzID0gX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMgfHwgZW1wdHlPYmplY3Q7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJcIik7XG4gICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcbiAgICAgIC8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJFcnJvclwiKTtcbiAgICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudFxuICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICByZXR1cm4gdm5vZGVcbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQkMyA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkJDMrKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArICh2bS5fdWlkKTtcbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgIH1cblxuICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgdm0uX2lzVnVlID0gdHJ1ZTtcbiAgICAvLyBtZXJnZSBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcbiAgICAgIC8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG4gICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlXG4gICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cbiAgICAgIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgICAvLyBleHBvc2UgcmVhbCBzZWxmXG4gICAgdm0uX3NlbGYgPSB2bTtcbiAgICBpbml0TGlmZWN5Y2xlKHZtKTtcbiAgICBpbml0RXZlbnRzKHZtKTtcbiAgICBpbml0UmVuZGVyKHZtKTtcbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZUNyZWF0ZScpO1xuICAgIGluaXRJbmplY3Rpb25zKHZtKTsgLy8gcmVzb2x2ZSBpbmplY3Rpb25zIGJlZm9yZSBkYXRhL3Byb3BzXG4gICAgaW5pdFN0YXRlKHZtKTtcbiAgICBpbml0UHJvdmlkZSh2bSk7IC8vIHJlc29sdmUgcHJvdmlkZSBhZnRlciBkYXRhL3Byb3BzXG4gICAgY2FsbEhvb2sodm0sICdjcmVhdGVkJyk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgdm0uX25hbWUgPSBmb3JtYXRDb21wb25lbnROYW1lKHZtLCBmYWxzZSk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh2bS5fbmFtZSkgKyBcIiBpbml0XCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9XG5cbiAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHtcbiAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQgKHZtLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuICB2YXIgcGFyZW50Vm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgb3B0cy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgb3B0cy5fcGFyZW50RWxtID0gb3B0aW9ucy5fcGFyZW50RWxtO1xuICBvcHRzLl9yZWZFbG0gPSBvcHRpb25zLl9yZWZFbG07XG5cbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHBhcmVudFZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcbiAgb3B0cy5fcGFyZW50TGlzdGVuZXJzID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XG5cbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAvLyBuZWVkIHRvIHJlc29sdmUgbmV3IG9wdGlvbnMuXG4gICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgIHZhciBtb2RpZmllZE9wdGlvbnMgPSByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3IpO1xuICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG1vZGlmaWVkO1xuICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgZXh0ZW5kZWQgPSBDdG9yLmV4dGVuZE9wdGlvbnM7XG4gIHZhciBzZWFsZWQgPSBDdG9yLnNlYWxlZE9wdGlvbnM7XG4gIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHtcbiAgICBpZiAobGF0ZXN0W2tleV0gIT09IHNlYWxlZFtrZXldKSB7XG4gICAgICBpZiAoIW1vZGlmaWVkKSB7IG1vZGlmaWVkID0ge307IH1cbiAgICAgIG1vZGlmaWVkW2tleV0gPSBkZWR1cGUobGF0ZXN0W2tleV0sIGV4dGVuZGVkW2tleV0sIHNlYWxlZFtrZXldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkXG59XG5cbmZ1bmN0aW9uIGRlZHVwZSAobGF0ZXN0LCBleHRlbmRlZCwgc2VhbGVkKSB7XG4gIC8vIGNvbXBhcmUgbGF0ZXN0IGFuZCBzZWFsZWQgdG8gZW5zdXJlIGxpZmVjeWNsZSBob29rcyB3b24ndCBiZSBkdXBsaWNhdGVkXG4gIC8vIGJldHdlZW4gbWVyZ2VzXG4gIGlmIChBcnJheS5pc0FycmF5KGxhdGVzdCkpIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgc2VhbGVkID0gQXJyYXkuaXNBcnJheShzZWFsZWQpID8gc2VhbGVkIDogW3NlYWxlZF07XG4gICAgZXh0ZW5kZWQgPSBBcnJheS5pc0FycmF5KGV4dGVuZGVkKSA/IGV4dGVuZGVkIDogW2V4dGVuZGVkXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhdGVzdC5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gcHVzaCBvcmlnaW5hbCBvcHRpb25zIGFuZCBub3Qgc2VhbGVkIG9wdGlvbnMgdG8gZXhjbHVkZSBkdXBsaWNhdGVkIG9wdGlvbnNcbiAgICAgIGlmIChleHRlbmRlZC5pbmRleE9mKGxhdGVzdFtpXSkgPj0gMCB8fCBzZWFsZWQuaW5kZXhPZihsYXRlc3RbaV0pIDwgMCkge1xuICAgICAgICByZXMucHVzaChsYXRlc3RbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxhdGVzdFxuICB9XG59XG5cbmZ1bmN0aW9uIFZ1ZSAob3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICEodGhpcyBpbnN0YW5jZW9mIFZ1ZSlcbiAgKSB7XG4gICAgd2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpO1xuICB9XG4gIHRoaXMuX2luaXQob3B0aW9ucyk7XG59XG5cbmluaXRNaXhpbihWdWUpO1xuc3RhdGVNaXhpbihWdWUpO1xuZXZlbnRzTWl4aW4oVnVlKTtcbmxpZmVjeWNsZU1peGluKFZ1ZSk7XG5yZW5kZXJNaXhpbihWdWUpO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFVzZSAoVnVlKSB7XG4gIFZ1ZS51c2UgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgdmFyIGluc3RhbGxlZFBsdWdpbnMgPSAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyB8fCAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyA9IFtdKSk7XG4gICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID4gLTEpIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzXG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5pbnN0YWxsLmFwcGx5KHBsdWdpbiwgYXJncyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2luID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICAgIGluc3RhbGxlZFBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0TWl4aW4kMSAoVnVlKSB7XG4gIFZ1ZS5taXhpbiA9IGZ1bmN0aW9uIChtaXhpbikge1xuICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIG1peGluKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV4dGVuZCAoVnVlKSB7XG4gIC8qKlxuICAgKiBFYWNoIGluc3RhbmNlIGNvbnN0cnVjdG9yLCBpbmNsdWRpbmcgVnVlLCBoYXMgYSB1bmlxdWVcbiAgICogY2lkLiBUaGlzIGVuYWJsZXMgdXMgdG8gY3JlYXRlIHdyYXBwZWQgXCJjaGlsZFxuICAgKiBjb25zdHJ1Y3RvcnNcIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS5cbiAgICovXG4gIFZ1ZS5jaWQgPSAwO1xuICB2YXIgY2lkID0gMTtcblxuICAvKipcbiAgICogQ2xhc3MgaW5oZXJpdGFuY2VcbiAgICovXG4gIFZ1ZS5leHRlbmQgPSBmdW5jdGlvbiAoZXh0ZW5kT3B0aW9ucykge1xuICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9O1xuICAgIHZhciBTdXBlciA9IHRoaXM7XG4gICAgdmFyIFN1cGVySWQgPSBTdXBlci5jaWQ7XG4gICAgdmFyIGNhY2hlZEN0b3JzID0gZXh0ZW5kT3B0aW9ucy5fQ3RvciB8fCAoZXh0ZW5kT3B0aW9ucy5fQ3RvciA9IHt9KTtcbiAgICBpZiAoY2FjaGVkQ3RvcnNbU3VwZXJJZF0pIHtcbiAgICAgIHJldHVybiBjYWNoZWRDdG9yc1tTdXBlcklkXVxuICAgIH1cblxuICAgIHZhciBuYW1lID0gZXh0ZW5kT3B0aW9ucy5uYW1lIHx8IFN1cGVyLm9wdGlvbnMubmFtZTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lKSB7XG4gICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICB9O1xuICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICBTdXBlci5vcHRpb25zLFxuICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICk7XG4gICAgU3ViWydzdXBlciddID0gU3VwZXI7XG5cbiAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvblxuICAgIC8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4gICAgLy8gYXZvaWRzIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxscyBmb3IgZWFjaCBpbnN0YW5jZSBjcmVhdGVkLlxuICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykge1xuICAgICAgaW5pdFByb3BzJDEoU3ViKTtcbiAgICB9XG4gICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICBpbml0Q29tcHV0ZWQkMShTdWIpO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgU3ViLm1peGluID0gU3VwZXIubWl4aW47XG4gICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblxuICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cblxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN1cGVyIG9wdGlvbnMgYXQgZXh0ZW5zaW9uIHRpbWUuXG4gICAgLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmVcbiAgICAvLyBiZWVuIHVwZGF0ZWQuXG4gICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7XG4gICAgU3ViLmV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zO1xuICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7XG5cbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzJDEgKENvbXApIHtcbiAgdmFyIHByb3BzID0gQ29tcC5vcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBwcm94eShDb21wLnByb3RvdHlwZSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQkMSAoQ29tcCkge1xuICB2YXIgY29tcHV0ZWQgPSBDb21wLm9wdGlvbnMuY29tcHV0ZWQ7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIGRlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAvKipcbiAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgKi9cbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZSA9PT0gJ2NvbXBvbmVudCcpIHtcbiAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoaWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbi5uYW1lID0gZGVmaW5pdGlvbi5uYW1lIHx8IGlkO1xuICAgICAgICAgIGRlZmluaXRpb24gPSB0aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnZGlyZWN0aXZlJyAmJiB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGRlZmluaXRpb24gPSB7IGJpbmQ6IGRlZmluaXRpb24sIHVwZGF0ZTogZGVmaW5pdGlvbiB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF0gPSBkZWZpbml0aW9uO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIGZvciAodmFyIGtleSBpbiB0aGlzJDEuY2FjaGUpIHtcbiAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzJDEuY2FjaGUsIGtleSwgdGhpcyQxLmtleXMpO1xuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuJHdhdGNoKCdpbmNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIHNsb3QgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoc2xvdCk7XG4gICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBpbmNsdWRlID0gcmVmLmluY2x1ZGU7XG4gICAgICB2YXIgZXhjbHVkZSA9IHJlZi5leGNsdWRlO1xuICAgICAgaWYgKFxuICAgICAgICAvLyBub3QgaW5jbHVkZWRcbiAgICAgICAgKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSkgfHxcbiAgICAgICAgLy8gZXhjbHVkZWRcbiAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVmJDEgPSB0aGlzO1xuICAgICAgdmFyIGNhY2hlID0gcmVmJDEuY2FjaGU7XG4gICAgICB2YXIga2V5cyA9IHJlZiQxLmtleXM7XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcbiAgICAgICAgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbiAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KVxuICAgICAgICA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAoXCI6OlwiICsgKGNvbXBvbmVudE9wdGlvbnMudGFnKSkgOiAnJylcbiAgICAgICAgOiB2bm9kZS5rZXk7XG4gICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNhY2hlW2tleV0uY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3RcbiAgICAgICAgcmVtb3ZlKGtleXMsIGtleSk7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgIGlmICh0aGlzLm1heCAmJiBrZXlzLmxlbmd0aCA+IHBhcnNlSW50KHRoaXMubWF4KSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5c1swXSwga2V5cywgdGhpcy5fdm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn1cblxudmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICBLZWVwQWxpdmU6IEtlZXBBbGl2ZVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi41LjE2JztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcbiAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLHRyYW5zbGF0ZSwnICtcbiAgJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnXG4pO1xuXG52YXIgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcblxudmFyIGlzWGxpbmsgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmFtZS5jaGFyQXQoNSkgPT09ICc6JyAmJiBuYW1lLnNsaWNlKDAsIDUpID09PSAneGxpbmsnXG59O1xuXG52YXIgZ2V0WGxpbmtQcm9wID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGlzWGxpbmsobmFtZSkgPyBuYW1lLnNsaWNlKDYsIG5hbWUubGVuZ3RoKSA6ICcnXG59O1xuXG52YXIgaXNGYWxzeUF0dHJWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gZmFsc2Vcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZW5DbGFzc0ZvclZub2RlICh2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKGlzRGVmKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShjaGlsZE5vZGUuZGF0YSwgZGF0YSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChpc0RlZihwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoZGF0YSwgcGFyZW50Tm9kZS5kYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbmRlckNsYXNzKGRhdGEuc3RhdGljQ2xhc3MsIGRhdGEuY2xhc3MpXG59XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhIChjaGlsZCwgcGFyZW50KSB7XG4gIHJldHVybiB7XG4gICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcbiAgICBjbGFzczogaXNEZWYoY2hpbGQuY2xhc3MpXG4gICAgICA/IFtjaGlsZC5jbGFzcywgcGFyZW50LmNsYXNzXVxuICAgICAgOiBwYXJlbnQuY2xhc3NcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJDbGFzcyAoXG4gIHN0YXRpY0NsYXNzLFxuICBkeW5hbWljQ2xhc3Ncbikge1xuICBpZiAoaXNEZWYoc3RhdGljQ2xhc3MpIHx8IGlzRGVmKGR5bmFtaWNDbGFzcykpIHtcbiAgICByZXR1cm4gY29uY2F0KHN0YXRpY0NsYXNzLCBzdHJpbmdpZnlDbGFzcyhkeW5hbWljQ2xhc3MpKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBjb25jYXQgKGEsIGIpIHtcbiAgcmV0dXJuIGEgPyBiID8gKGEgKyAnICcgKyBiKSA6IGEgOiAoYiB8fCAnJylcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5Q2xhc3MgKHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlBcnJheSh2YWx1ZSlcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSlcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlBcnJheSAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgc3RyaW5naWZpZWQ7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGlzRGVmKHN0cmluZ2lmaWVkID0gc3RyaW5naWZ5Q2xhc3ModmFsdWVbaV0pKSAmJiBzdHJpbmdpZmllZCAhPT0gJycpIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IHN0cmluZ2lmaWVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeU9iamVjdCAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAodmFsdWVba2V5XSkge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgbmFtZXNwYWNlTWFwID0ge1xuICBzdmc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gIG1hdGg6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJ1xufTtcblxudmFyIGlzSFRNTFRhZyA9IG1ha2VNYXAoXG4gICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSwnICtcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcbiAgJ2RpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgK1xuICAnYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LCcgK1xuICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICtcbiAgJ2NhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLCcgK1xuICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksJyArXG4gICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290J1xuKTtcblxuLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5XG4vLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxudmFyIGlzU1ZHID0gbWFrZU1hcChcbiAgJ3N2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLGZvbnQtZmFjZSwnICtcbiAgJ2ZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcgK1xuICAncG9seWdvbixwb2x5bGluZSxyZWN0LHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0cGF0aCx0c3Bhbix1c2UsdmlldycsXG4gIHRydWVcbik7XG5cblxuXG52YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHKHRhZylcbn07XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gIGlmIChpc1NWRyh0YWcpKSB7XG4gICAgcmV0dXJuICdzdmcnXG4gIH1cbiAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4gIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcbiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgcmV0dXJuICdtYXRoJ1xuICB9XG59XG5cbnZhciB1bmtub3duRWxlbWVudENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChpc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ11cbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbnZhciBpc1RleHRJbnB1dFR5cGUgPSBtYWtlTWFwKCd0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCcpO1xuXG4vKiAgKi9cblxuLyoqXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cbiAqL1xuZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnQ2Fubm90IGZpbmQgZWxlbWVudDogJyArIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgLy8gZmFsc2Ugb3IgbnVsbCB3aWxsIHJlbW92ZSB0aGUgYXR0cmlidXRlIGJ1dCB1bmRlZmluZWQgd2lsbCBub3RcbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGVTY29wZSAobm9kZSwgc2NvcGVJZCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG59XG5cblxudmFyIG5vZGVPcHMgPSBPYmplY3QuZnJlZXplKHtcblx0Y3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLFxuXHRjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcblx0Y3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuXHRjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuXHRpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcblx0cmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuXHRhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG5cdHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG5cdG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcblx0dGFnTmFtZTogdGFnTmFtZSxcblx0c2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuXHRzZXRTdHlsZVNjb3BlOiBzZXRTdHlsZVNjb3BlXG59KTtcblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlIChfLCB2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmVcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8sIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgIH1cbiAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxuICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzVHJ1ZShpc1JlYWN0aXZhdGVkKSkge1xuICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKSB7XG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XG4gICAgICB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQgPSBudWxsO1xuICAgIH1cbiAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7XG4gICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpO1xuICAgIC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb25cbiAgICAvLyBkb2VzIG5vdCB0cmlnZ2VyIGJlY2F1c2UgdGhlIGlubmVyIG5vZGUncyBjcmVhdGVkIGhvb2tzIGFyZSBub3QgY2FsbGVkXG4gICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG4gICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC5cbiAgICB2YXIgaW5uZXJOb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgaW5uZXJOb2RlID0gaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChpc0RlZihpID0gaW5uZXJOb2RlLmRhdGEpICYmIGlzRGVmKGkgPSBpLnRyYW5zaXRpb24pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuICAgIC8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmXG4gICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0IChwYXJlbnQsIGVsbSwgcmVmJCQxKSB7XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIGlmIChpc0RlZihyZWYkJDEpKSB7XG4gICAgICAgIGlmIChyZWYkJDEucGFyZW50Tm9kZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50LCBlbG0sIHJlZiQkMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LCBlbG0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuICh2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3JlYXRlRWxtKGNoaWxkcmVuW2ldLCBpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmVsbSwgbnVsbCwgdHJ1ZSwgY2hpbGRyZW4sIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUodm5vZGUudGV4dCkpIHtcbiAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQodm5vZGUuZWxtLCBub2RlT3BzLmNyZWF0ZVRleHROb2RlKFN0cmluZyh2bm9kZS50ZXh0KSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUGF0Y2hhYmxlICh2bm9kZSkge1xuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgfVxuICAgIHJldHVybiBpc0RlZih2bm9kZS50YWcpXG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VDcmVhdGVIb29rcyAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBpID0gdm5vZGUuZGF0YS5ob29rOyAvLyBSZXVzZSB2YXJpYWJsZVxuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgaWYgKGlzRGVmKGkuY3JlYXRlKSkgeyBpLmNyZWF0ZShlbXB0eU5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkuaW5zZXJ0KSkgeyBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICAvLyBzZXQgc2NvcGUgaWQgYXR0cmlidXRlIGZvciBzY29wZWQgQ1NTLlxuICAvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuICAvLyBvZiBnb2luZyB0aHJvdWdoIHRoZSBub3JtYWwgYXR0cmlidXRlIHBhdGNoaW5nIHByb2Nlc3MuXG4gIGZ1bmN0aW9uIHNldFNjb3BlICh2bm9kZSkge1xuICAgIHZhciBpO1xuICAgIGlmIChpc0RlZihpID0gdm5vZGUuZm5TY29wZUlkKSkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlO1xuICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgIGlmIChpc0RlZihpID0gYW5jZXN0b3IuY29udGV4dCkgJiYgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpKSB7XG4gICAgICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGZvciBzbG90IGNvbnRlbnQgdGhleSBzaG91bGQgYWxzbyBnZXQgdGhlIHNjb3BlSWQgZnJvbSB0aGUgaG9zdCBpbnN0YW5jZS5cbiAgICBpZiAoaXNEZWYoaSA9IGFjdGl2ZUluc3RhbmNlKSAmJlxuICAgICAgaSAhPT0gdm5vZGUuY29udGV4dCAmJlxuICAgICAgaSAhPT0gdm5vZGUuZm5Db250ZXh0ICYmXG4gICAgICBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZClcbiAgICApIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFZub2RlcyAocGFyZW50RWxtLCByZWZFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgY3JlYXRlRWxtKHZub2Rlc1tzdGFydElkeF0sIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0sIGZhbHNlLCB2bm9kZXMsIHN0YXJ0SWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayAodm5vZGUpIHtcbiAgICB2YXIgaSwgajtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuZGVzdHJveSkpIHsgaSh2bm9kZSk7IH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkgeyBjYnMuZGVzdHJveVtpXSh2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jaGlsZHJlbikpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7ICsraikge1xuICAgICAgICBpbnZva2VEZXN0cm95SG9vayh2bm9kZS5jaGlsZHJlbltqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlVm5vZGVzIChwYXJlbnRFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XG4gICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICB9IGVsc2UgeyAvLyBUZXh0IG5vZGVcbiAgICAgICAgICByZW1vdmVOb2RlKGNoLmVsbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rICh2bm9kZSwgcm0pIHtcbiAgICBpZiAoaXNEZWYocm0pIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG4gICAgICBpZiAoaXNEZWYocm0pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbGlzdGVuZXJzIGNvdW50XG4gICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgfVxuICAgICAgLy8gcmVjdXJzaXZlbHkgaW52b2tlIGhvb2tzIG9uIGNoaWxkIGNvbXBvbmVudCByb290IG5vZGVcbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGlzRGVmKGkgPSBpLl92bm9kZSkgJiYgaXNEZWYoaS5kYXRhKSkge1xuICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5yZW1vdmUpKSB7XG4gICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU5vZGUodm5vZGUuZWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbiAocGFyZW50RWxtLCBvbGRDaCwgbmV3Q2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDtcbiAgICB2YXIgb2xkRW5kSWR4ID0gb2xkQ2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gICAgdmFyIG5ld0VuZElkeCA9IG5ld0NoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICAgIHZhciBvbGRLZXlUb0lkeCwgaWR4SW5PbGQsIHZub2RlVG9Nb3ZlLCByZWZFbG07XG5cbiAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG4gICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnNcbiAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhuZXdDaCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZEVuZFZub2RlKSkge1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgcmlnaHRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIHZub2RlVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcbiAgICAgIHJlZkVsbSA9IGlzVW5kZWYobmV3Q2hbbmV3RW5kSWR4ICsgMV0pID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLmVsbTtcbiAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIGlmIChuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBlbG0gPSB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07XG5cbiAgICBpZiAoaXNUcnVlKG9sZFZub2RlLmlzQXN5bmNQbGFjZWhvbGRlcikpIHtcbiAgICAgIGlmIChpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgIGh5ZHJhdGUob2xkVm5vZGUuZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyByZXVzZSBlbGVtZW50IGZvciBzdGF0aWMgdHJlZXMuXG4gICAgLy8gbm90ZSB3ZSBvbmx5IGRvIHRoaXMgaWYgdGhlIHZub2RlIGlzIGNsb25lZCAtXG4gICAgLy8gaWYgdGhlIG5ldyBub2RlIGlzIG5vdCBjbG9uZWQgaXQgbWVhbnMgdGhlIHJlbmRlciBmdW5jdGlvbnMgaGF2ZSBiZWVuXG4gICAgLy8gcmVzZXQgYnkgdGhlIGhvdC1yZWxvYWQtYXBpIGFuZCB3ZSBuZWVkIHRvIGRvIGEgcHJvcGVyIHJlLXJlbmRlci5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgaXNUcnVlKG9sZFZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgdm5vZGUua2V5ID09PSBvbGRWbm9kZS5rZXkgJiZcbiAgICAgIChpc1RydWUodm5vZGUuaXNDbG9uZWQpIHx8IGlzVHJ1ZSh2bm9kZS5pc09uY2UpKVxuICAgICkge1xuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucHJlcGF0Y2gpKSB7XG4gICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIG9sZENoID0gb2xkVm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy51cGRhdGUubGVuZ3RoOyArK2kpIHsgY2JzLnVwZGF0ZVtpXShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkudXBkYXRlKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzVW5kZWYodm5vZGUudGV4dCkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRDaCkgJiYgaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChvbGRDaCAhPT0gY2gpIHsgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7IH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKGVsbSwgb2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5LCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIGlmIChpc1VuZGVmKHZub2RlKSkge1xuICAgICAgaWYgKGlzRGVmKG9sZFZub2RlKSkgeyBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7IH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpc0luaXRpYWxQYXRjaCA9IGZhbHNlO1xuICAgIHZhciBpbnNlcnRlZFZub2RlUXVldWUgPSBbXTtcblxuICAgIGlmIChpc1VuZGVmKG9sZFZub2RlKSkge1xuICAgICAgLy8gZW1wdHkgbW91bnQgKGxpa2VseSBhcyBjb21wb25lbnQpLCBjcmVhdGUgbmV3IHJvb3QgZWxlbWVudFxuICAgICAgaXNJbml0aWFsUGF0Y2ggPSB0cnVlO1xuICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XG4gICAgICBpZiAoIWlzUmVhbEVsZW1lbnQgJiYgc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHtcbiAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG4gICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQgYW5kIGlmIHdlIGNhbiBwZXJmb3JtXG4gICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cbiAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKFNTUl9BVFRSKSkge1xuICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKFNTUl9BVFRSKTtcbiAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1RydWUoaHlkcmF0aW5nKSkge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnICtcbiAgICAgICAgICAgICAgICAnc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQuIFRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBpbmNvcnJlY3QgJyArXG4gICAgICAgICAgICAgICAgJ0hUTUwgbWFya3VwLCBmb3IgZXhhbXBsZSBuZXN0aW5nIGJsb2NrLWxldmVsIGVsZW1lbnRzIGluc2lkZSAnICtcbiAgICAgICAgICAgICAgICAnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcgK1xuICAgICAgICAgICAgICAgICdmdWxsIGNsaWVudC1zaWRlIHJlbmRlci4nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGVpdGhlciBub3Qgc2VydmVyLXJlbmRlcmVkLCBvciBoeWRyYXRpb24gZmFpbGVkLlxuICAgICAgICAgIC8vIGNyZWF0ZSBhbiBlbXB0eSBub2RlIGFuZCByZXBsYWNlIGl0XG4gICAgICAgICAgb2xkVm5vZGUgPSBlbXB0eU5vZGVBdChvbGRWbm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXBsYWNpbmcgZXhpc3RpbmcgZWxlbWVudFxuICAgICAgICB2YXIgb2xkRWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICB2YXIgcGFyZW50RWxtJDEgPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IG5vZGVcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSQxLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0kMSkpIHtcbiAgICAgICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtJDEsIFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGl2ZXMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xuICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBvbGREaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcywgb2xkVm5vZGUuY29udGV4dCk7XG4gIHZhciBuZXdEaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcywgdm5vZGUuY29udGV4dCk7XG5cbiAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107XG4gIHZhciBkaXJzV2l0aFBvc3RwYXRjaCA9IFtdO1xuXG4gIHZhciBrZXksIG9sZERpciwgZGlyO1xuICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7XG4gICAgb2xkRGlyID0gb2xkRGlyc1trZXldO1xuICAgIGRpciA9IG5ld0RpcnNba2V5XTtcbiAgICBpZiAoIW9sZERpcikge1xuICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZFxuICAgICAgY2FsbEhvb2skMShkaXIsICdiaW5kJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZVxuICAgICAgZGlyLm9sZFZhbHVlID0gb2xkRGlyLnZhbHVlO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQXR0cnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgb3B0cyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5hdHRycykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmF0dHJzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1ciwgb2xkO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKGF0dHJzLl9fb2JfXykpIHtcbiAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xuICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyKTtcbiAgICB9XG4gIH1cbiAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKChpc0lFIHx8IGlzRWRnZSkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChpc1VuZGVmKGF0dHJzW2tleV0pKSB7XG4gICAgICBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoZWwudGFnTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChpc0Jvb2xlYW5BdHRyKGtleSkpIHtcbiAgICAvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGVjaG5pY2FsbHkgYWxsb3dmdWxsc2NyZWVuIGlzIGEgYm9vbGVhbiBhdHRyaWJ1dGUgZm9yIDxpZnJhbWU+LFxuICAgICAgLy8gYnV0IEZsYXNoIGV4cGVjdHMgYSB2YWx1ZSBvZiBcInRydWVcIiB3aGVuIHVzZWQgb24gPGVtYmVkPiB0YWdcbiAgICAgIHZhbHVlID0ga2V5ID09PSAnYWxsb3dmdWxsc2NyZWVuJyAmJiBlbC50YWdOYW1lID09PSAnRU1CRUQnXG4gICAgICAgID8gJ3RydWUnXG4gICAgICAgIDoga2V5O1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJyA/ICdmYWxzZScgOiAndHJ1ZScpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2VTZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyAjNzEzODogSUUxMCAmIDExIGZpcmVzIGlucHV0IGV2ZW50IHdoZW4gc2V0dGluZyBwbGFjZWhvbGRlciBvblxuICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAvLyBpbW1lZGlhdGVseS5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoXG4gICAgICBpc0lFICYmICFpc0lFOSAmJlxuICAgICAgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJlxuICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcbiAgaWYgKFxuICAgIGlzVW5kZWYoZGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICBpc1VuZGVmKGRhdGEuY2xhc3MpICYmIChcbiAgICAgIGlzVW5kZWYob2xkRGF0YSkgfHwgKFxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5jbGFzcylcbiAgICAgIClcbiAgICApXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNscyA9IGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpO1xuXG4gIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcbiAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgaWYgKGlzRGVmKHRyYW5zaXRpb25DbGFzcykpIHtcbiAgICBjbHMgPSBjb25jYXQoY2xzLCBzdHJpbmdpZnlDbGFzcyh0cmFuc2l0aW9uQ2xhc3MpKTtcbiAgfVxuXG4gIC8vIHNldCB0aGUgY2xhc3NcbiAgaWYgKGNscyAhPT0gZWwuX3ByZXZDbGFzcykge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuICAgIGVsLl9wcmV2Q2xhc3MgPSBjbHM7XG4gIH1cbn1cblxudmFyIGtsYXNzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUNsYXNzLFxuICB1cGRhdGU6IHVwZGF0ZUNsYXNzXG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuXG5cblxuXG5cblxuXG5cbi8vIGFkZCBhIHJhdyBhdHRyICh1c2UgdGhpcyBpbiBwcmVUcmFuc2Zvcm1zKVxuXG5cblxuXG5cblxuXG5cbi8vIG5vdGU6IHRoaXMgb25seSByZW1vdmVzIHRoZSBhdHRyIGZyb20gdGhlIEFycmF5IChhdHRyc0xpc3QpIHNvIHRoYXQgaXRcbi8vIGRvZXNuJ3QgZ2V0IHByb2Nlc3NlZCBieSBwcm9jZXNzQXR0cnMuXG4vLyBCeSBkZWZhdWx0IGl0IGRvZXMgTk9UIHJlbW92ZSBpdCBmcm9tIHRoZSBtYXAgKGF0dHJzTWFwKSBiZWNhdXNlIHRoZSBtYXAgaXNcbi8vIG5lZWRlZCBkdXJpbmcgY29kZWdlbi5cblxuLyogICovXG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZSBnZW5lcmF0aW9uIGZvciBjb21wb25lbnQgdi1tb2RlbFxuICovXG5cblxuLyoqXG4gKiBDcm9zcy1wbGF0Zm9ybSBjb2RlZ2VuIGhlbHBlciBmb3IgZ2VuZXJhdGluZyB2LW1vZGVsIHZhbHVlIGFzc2lnbm1lbnQgY29kZS5cbiAqL1xuXG4vKiAgKi9cblxuLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZVxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cbnZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xudmFyIENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7XG5cbi8qICAqL1xuXG4vLyBub3JtYWxpemUgdi1tb2RlbCBldmVudCB0b2tlbnMgdGhhdCBjYW4gb25seSBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWUuXG4vLyBpdCdzIGltcG9ydGFudCB0byBwbGFjZSB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGluIHRoZSBhcnJheSBiZWNhdXNlXG4vLyB0aGUgd2hvbGUgcG9pbnQgaXMgZW5zdXJpbmcgdGhlIHYtbW9kZWwgY2FsbGJhY2sgZ2V0cyBjYWxsZWQgYmVmb3JlXG4vLyB1c2VyLWF0dGFjaGVkIGhhbmRsZXJzLlxuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnRzIChvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW1JBTkdFX1RPS0VOXSkpIHtcbiAgICAvLyBJRSBpbnB1dFt0eXBlPXJhbmdlXSBvbmx5IHN1cHBvcnRzIGBjaGFuZ2VgIGV2ZW50XG4gICAgdmFyIGV2ZW50ID0gaXNJRSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgICBvbltldmVudF0gPSBbXS5jb25jYXQob25bUkFOR0VfVE9LRU5dLCBvbltldmVudF0gfHwgW10pO1xuICAgIGRlbGV0ZSBvbltSQU5HRV9UT0tFTl07XG4gIH1cbiAgLy8gVGhpcyB3YXMgb3JpZ2luYWxseSBpbnRlbmRlZCB0byBmaXggIzQ1MjEgYnV0IG5vIGxvbmdlciBuZWNlc3NhcnlcbiAgLy8gYWZ0ZXIgMi41LiBLZWVwaW5nIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggZ2VuZXJhdGVkIGNvZGUgZnJvbSA8IDIuNFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSkpIHtcbiAgICBvbi5jaGFuZ2UgPSBbXS5jb25jYXQob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dLCBvbi5jaGFuZ2UgfHwgW10pO1xuICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07XG4gIH1cbn1cblxudmFyIHRhcmdldCQxO1xuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciAoaGFuZGxlciwgZXZlbnQsIGNhcHR1cmUpIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZCQxIChcbiAgZXZlbnQsXG4gIGhhbmRsZXIsXG4gIG9uY2UkJDEsXG4gIGNhcHR1cmUsXG4gIHBhc3NpdmVcbikge1xuICBoYW5kbGVyID0gd2l0aE1hY3JvVGFzayhoYW5kbGVyKTtcbiAgaWYgKG9uY2UkJDEpIHsgaGFuZGxlciA9IGNyZWF0ZU9uY2VIYW5kbGVyKGhhbmRsZXIsIGV2ZW50LCBjYXB0dXJlKTsgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKFxuICAgIGV2ZW50LFxuICAgIGhhbmRsZXIsXG4gICAgc3VwcG9ydHNQYXNzaXZlXG4gICAgICA/IHsgY2FwdHVyZTogY2FwdHVyZSwgcGFzc2l2ZTogcGFzc2l2ZSB9XG4gICAgICA6IGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDIgKFxuICBldmVudCxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIGV2ZW50LFxuICAgIGhhbmRsZXIuX3dpdGhUYXNrIHx8IGhhbmRsZXIsXG4gICAgY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLm9uKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEub24pKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9uID0gdm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdGFyZ2V0JDEgPSB2bm9kZS5lbG07XG4gIG5vcm1hbGl6ZUV2ZW50cyhvbik7XG4gIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCQxLCByZW1vdmUkMiwgdm5vZGUuY29udGV4dCk7XG4gIHRhcmdldCQxID0gdW5kZWZpbmVkO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcbiAgdXBkYXRlOiB1cGRhdGVET01MaXN0ZW5lcnNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZURPTVByb3BzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5kb21Qcm9wcykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmRvbVByb3BzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1cjtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihwcm9wcy5fX29iX18pKSB7XG4gICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgIGlmIChpc1VuZGVmKHByb3BzW2tleV0pKSB7XG4gICAgICBlbG1ba2V5XSA9ICcnO1xuICAgIH1cbiAgfVxuICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgIGN1ciA9IHByb3BzW2tleV07XG4gICAgLy8gaWdub3JlIGNoaWxkcmVuIGlmIHRoZSBub2RlIGhhcyB0ZXh0Q29udGVudCBvciBpbm5lckhUTUwsXG4gICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuICAgIGlmIChrZXkgPT09ICd0ZXh0Q29udGVudCcgfHwga2V5ID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfVxuICAgICAgLy8gIzY2MDEgd29yayBhcm91bmQgQ2hyb21lIHZlcnNpb24gPD0gNTUgYnVnIHdoZXJlIHNpbmdsZSB0ZXh0Tm9kZVxuICAgICAgLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbiAgICAgIGlmIChlbG0uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnKSB7XG4gICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuICAgICAgZWxtLl92YWx1ZSA9IGN1cjtcbiAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgdmFyIHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBzdHJDdXIpKSB7XG4gICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWxtW2tleV0gPSBjdXI7XG4gICAgfVxuICB9XG59XG5cbi8vIGNoZWNrIHBsYXRmb3Jtcy93ZWIvdXRpbC9hdHRycy5qcyBhY2NlcHRWYWx1ZVxuXG5cbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVZhbHVlIChlbG0sIGNoZWNrVmFsKSB7XG4gIHJldHVybiAoIWVsbS5jb21wb3NpbmcgJiYgKFxuICAgIGVsbS50YWdOYW1lID09PSAnT1BUSU9OJyB8fFxuICAgIGlzTm90SW5Gb2N1c0FuZERpcnR5KGVsbSwgY2hlY2tWYWwpIHx8XG4gICAgaXNEaXJ0eVdpdGhNb2RpZmllcnMoZWxtLCBjaGVja1ZhbClcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNOb3RJbkZvY3VzQW5kRGlydHkgKGVsbSwgY2hlY2tWYWwpIHtcbiAgLy8gcmV0dXJuIHRydWUgd2hlbiB0ZXh0Ym94ICgubnVtYmVyIGFuZCAudHJpbSkgbG9zZXMgZm9jdXMgYW5kIGl0cyB2YWx1ZSBpc1xuICAvLyBub3QgZXF1YWwgdG8gdGhlIHVwZGF0ZWQgdmFsdWVcbiAgdmFyIG5vdEluRm9jdXMgPSB0cnVlO1xuICAvLyAjNjE1N1xuICAvLyB3b3JrIGFyb3VuZCBJRSBidWcgd2hlbiBhY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbiBhbiBpZnJhbWVcbiAgdHJ5IHsgbm90SW5Gb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsbTsgfSBjYXRjaCAoZSkge31cbiAgcmV0dXJuIG5vdEluRm9jdXMgJiYgZWxtLnZhbHVlICE9PSBjaGVja1ZhbFxufVxuXG5mdW5jdGlvbiBpc0RpcnR5V2l0aE1vZGlmaWVycyAoZWxtLCBuZXdWYWwpIHtcbiAgdmFyIHZhbHVlID0gZWxtLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZWxtLl92TW9kaWZpZXJzOyAvLyBpbmplY3RlZCBieSB2LW1vZGVsIHJ1bnRpbWVcbiAgaWYgKGlzRGVmKG1vZGlmaWVycykpIHtcbiAgICBpZiAobW9kaWZpZXJzLmxhenkpIHtcbiAgICAgIC8vIGlucHV0cyB3aXRoIGxhenkgc2hvdWxkIG9ubHkgYmUgdXBkYXRlZCB3aGVuIG5vdCBpbiBmb2N1c1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxufVxuXG52YXIgZG9tUHJvcHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NUHJvcHNcbn1cblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cbiAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgIC8vIFNldCB0aGVtIG9uZSBieSBvbmUsIGFuZCB0aGUgYnJvd3NlciB3aWxsIG9ubHkgc2V0IHRob3NlIGl0IGNhbiByZWNvZ25pemVcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIGVtcHR5U3R5bGU7XG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gIGVtcHR5U3R5bGUgPSBlbXB0eVN0eWxlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgIHJldHVybiBwcm9wXG4gIH1cbiAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuYW1lID0gdmVuZG9yTmFtZXNbaV0gKyBjYXBOYW1lO1xuICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoaXNVbmRlZihkYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKGRhdGEuc3R5bGUpICYmXG4gICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTtcblxuICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YVxuICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKHZub2RlLmRhdGEuc3R5bGUpIHx8IHt9O1xuXG4gIC8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmZcbiAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAvLyB0byBtdXRhdGUgaXQuXG4gIHZub2RlLmRhdGEubm9ybWFsaXplZFN0eWxlID0gaXNEZWYoc3R5bGUuX19vYl9fKVxuICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICA6IHN0eWxlO1xuXG4gIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAoaXNVbmRlZihuZXdTdHlsZVtuYW1lXSkpIHtcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7XG4gICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgaWYgKGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgIC8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYpIHtcbiAgaWYgKCFkZWYpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZi5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXJcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICAgIDogc2V0VGltZW91dFxuICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10uc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG5cbiAgdmFyIHR5cGU7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgdmFyIHByb3BDb3VudCA9IDA7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XG4gICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IFRSQU5TSVRJT047XG4gICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgdHlwZSA9IHRpbWVvdXQgPiAwXG4gICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxuICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgOiBBTklNQVRJT05cbiAgICAgIDogbnVsbDtcbiAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cbiAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuICB2YXIgaGFzVHJhbnNmb3JtID1cbiAgICB0eXBlID09PSBUUkFOU0lUSU9OICYmXG4gICAgdHJhbnNmb3JtUkUudGVzdChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnUHJvcGVydHknXSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuICAgIGhhc1RyYW5zZm9ybTogaGFzVHJhbnNmb3JtXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZW91dCAoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKVxuICB9KSlcbn1cblxuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgPyBhcHBlYXJDbGFzc1xuICAgIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA/IGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpXG4gICAgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKVxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZClcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24uZW50ZXJcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpO1xuXG4gIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24ubGVhdmVcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24sICdsZWF2ZScsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlICgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpWyh2bm9kZS5rZXkpXSA9IHZub2RlO1xuICAgIH1cbiAgICBiZWZvcmVMZWF2ZSAmJiBiZWZvcmVMZWF2ZShlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRMZWF2ZUR1cmF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7XG4gICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBvbmx5IHVzZWQgaW4gZGV2IG1vZGVcbmZ1bmN0aW9uIGNoZWNrRHVyYXRpb24gKHZhbCwgbmFtZSwgdm5vZGUpIHtcbiAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIFwiICtcbiAgICAgIFwiZ290IFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbCkpICsgXCIuXCIsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIE5hTiAtIFwiICtcbiAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyxcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOlxuICogLSBhIG1lcmdlZCBob29rIChpbnZva2VyKSB3aXRoIHRoZSBvcmlnaW5hbCBpbiAuZm5zXG4gKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aClcbiAqL1xuZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCAoZm4pIHtcbiAgaWYgKGlzVW5kZWYoZm4pKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIGludm9rZXJGbnMgPSBmbi5mbnM7XG4gIGlmIChpc0RlZihpbnZva2VyRm5zKSkge1xuICAgIC8vIGludm9rZXJcbiAgICByZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChcbiAgICAgIEFycmF5LmlzQXJyYXkoaW52b2tlckZucylcbiAgICAgICAgPyBpbnZva2VyRm5zWzBdXG4gICAgICAgIDogaW52b2tlckZuc1xuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDFcbiAgfVxufVxuXG5mdW5jdGlvbiBfZW50ZXIgKF8sIHZub2RlKSB7XG4gIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICBlbnRlcih2bm9kZSk7XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG4gIGNyZWF0ZTogX2VudGVyLFxuICBhY3RpdmF0ZTogX2VudGVyLFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSQkMSAodm5vZGUsIHJtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufSA6IHt9XG5cbnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbXG4gIGF0dHJzLFxuICBrbGFzcyxcbiAgZXZlbnRzLFxuICBkb21Qcm9wcyxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb25cbl1cblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xuICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRpcmVjdGl2ZSA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vICM2OTAzXG4gICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRpcmVjdGl2ZS5jb21wb25lbnRVcGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmXG4gICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXG4gICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgID8gYmluZGluZy52YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiBoYXNOb01hdGNoaW5nT3B0aW9uKHYsIGN1ck9wdGlvbnMpOyB9KVxuICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpO1xuICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgdHJpZ2dlcihlbCwgJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFIHx8IGlzRWRnZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICB2YXIgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIjxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD1cXFwiXCIgKyAoYmluZGluZy5leHByZXNzaW9uKSArIFwiXFxcIj4gXCIgK1xuICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlbGVjdGVkLCBvcHRpb247XG4gIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc011bHRpcGxlKSB7XG4gICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHtcbiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgID8gb3B0aW9uLl92YWx1ZVxuICAgIDogb3B0aW9uLnZhbHVlXG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG4gIC8vIHByZXZlbnQgdHJpZ2dlcmluZyBhbiBpbnB1dCBldmVudCBmb3Igbm8gcmVhc29uXG4gIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSB7IHJldHVybiB9XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyKGUudGFyZ2V0LCAnaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlciAoZWwsIHR5cGUpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbn1cblxuLyogICovXG5cbi8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3RcbmZ1bmN0aW9uIGxvY2F0ZU5vZGUgKHZub2RlKSB7XG4gIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICA/IGxvY2F0ZU5vZGUodm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKVxuICAgIDogdm5vZGVcbn1cblxudmFyIHNob3cgPSB7XG4gIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuICAgIGlmICh2YWx1ZSAmJiB0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBvcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufVxuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBtb2RlbDogZGlyZWN0aXZlLFxuICBzaG93OiBzaG93XG59XG5cbi8qICAqL1xuXG4vLyBQcm92aWRlcyB0cmFuc2l0aW9uIHN1cHBvcnQgZm9yIGEgc2luZ2xlIGVsZW1lbnQvY29tcG9uZW50LlxuLy8gc3VwcG9ydHMgdHJhbnNpdGlvbiBtb2RlIChvdXQtaW4gLyBpbi1vdXQpXG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBjc3M6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBlbnRlckNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBkdXJhdGlvbjogW051bWJlciwgU3RyaW5nLCBPYmplY3RdXG59O1xuXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG4gIC8vIHByb3BzXG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyIChoLCByYXdDaGlsZCkge1xuICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgcmV0dXJuIGgoJ2tlZXAtYWxpdmUnLCB7XG4gICAgICBwcm9wczogcmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGFcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gIHdoaWxlICgodm5vZGUgPSB2bm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lQ2hpbGQgKGNoaWxkLCBvbGRDaGlsZCkge1xuICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcbn1cblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIG5hbWU6ICd0cmFuc2l0aW9uJyxcbiAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpOyB9KTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZSA9IHRoaXMubW9kZTtcblxuICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1vZGUgJiYgbW9kZSAhPT0gJ2luLW91dCcgJiYgbW9kZSAhPT0gJ291dC1pbidcbiAgICApIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnICsgbW9kZSxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciByYXdDaGlsZCA9IGNoaWxkcmVuWzBdO1xuXG4gICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xuICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLlxuICAgIGlmIChoYXNQYXJlbnRUcmFuc2l0aW9uKHRoaXMuJHZub2RlKSkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgLy8gYXBwbHkgdHJhbnNpdGlvbiBkYXRhIHRvIGNoaWxkXG4gICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuICAgIHZhciBjaGlsZCA9IGdldFJlYWxDaGlsZChyYXdDaGlsZCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICB9XG5cbiAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxuICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcbiAgICAvLyBkdXJpbmcgZW50ZXJpbmcuXG4gICAgdmFyIGlkID0gXCJfX3RyYW5zaXRpb24tXCIgKyAodGhpcy5fdWlkKSArIFwiLVwiO1xuICAgIGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsXG4gICAgICA/IGNoaWxkLmlzQ29tbWVudFxuICAgICAgICA/IGlkICsgJ2NvbW1lbnQnXG4gICAgICAgIDogaWQgKyBjaGlsZC50YWdcbiAgICAgIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KVxuICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICA6IGNoaWxkLmtleTtcblxuICAgIHZhciBkYXRhID0gKGNoaWxkLmRhdGEgfHwgKGNoaWxkLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG4gICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG4gICAgdmFyIG9sZENoaWxkID0gZ2V0UmVhbENoaWxkKG9sZFJhd0NoaWxkKTtcblxuICAgIC8vIG1hcmsgdi1zaG93XG4gICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgaWYgKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyAmJiBjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH0pKSB7XG4gICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG9sZENoaWxkICYmXG4gICAgICBvbGRDaGlsZC5kYXRhICYmXG4gICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgIWlzQXN5bmNQbGFjZWhvbGRlcihvbGRDaGlsZCkgJiZcbiAgICAgIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlXG4gICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgKSB7XG4gICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbiAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn1cblxuLyogICovXG5cbi8vIFByb3ZpZGVzIHRyYW5zaXRpb24gc3VwcG9ydCBmb3IgbGlzdCBpdGVtcy5cbi8vIHN1cHBvcnRzIG1vdmUgdHJhbnNpdGlvbnMgdXNpbmcgdGhlIEZMSVAgdGVjaG5pcXVlLlxuXG4vLyBCZWNhdXNlIHRoZSB2ZG9tJ3MgY2hpbGRyZW4gdXBkYXRlIGFsZ29yaXRobSBpcyBcInVuc3RhYmxlXCIgLSBpLmUuXG4vLyBpdCBkb2Vzbid0IGd1YXJhbnRlZSB0aGUgcmVsYXRpdmUgcG9zaXRpb25pbmcgb2YgcmVtb3ZlZCBlbGVtZW50cyxcbi8vIHdlIGZvcmNlIHRyYW5zaXRpb24tZ3JvdXAgdG8gdXBkYXRlIGl0cyBjaGlsZHJlbiBpbnRvIHR3byBwYXNzZXM6XG4vLyBpbiB0aGUgZmlyc3QgcGFzcywgd2UgcmVtb3ZlIGFsbCBub2RlcyB0aGF0IG5lZWQgdG8gYmUgcmVtb3ZlZCxcbi8vIHRyaWdnZXJpbmcgdGhlaXIgbGVhdmluZyB0cmFuc2l0aW9uOyBpbiB0aGUgc2Vjb25kIHBhc3MsIHdlIGluc2VydC9tb3ZlXG4vLyBpbnRvIHRoZSBmaW5hbCBkZXNpcmVkIHN0YXRlLiBUaGlzIHdheSBpbiB0aGUgc2Vjb25kIHBhc3MgcmVtb3ZlZFxuLy8gbm9kZXMgd2lsbCByZW1haW4gd2hlcmUgdGhleSBzaG91bGQgYmUuXG5cbnZhciBwcm9wcyA9IGV4dGVuZCh7XG4gIHRhZzogU3RyaW5nLFxuICBtb3ZlQ2xhc3M6IFN0cmluZ1xufSwgdHJhbnNpdGlvblByb3BzKTtcblxuZGVsZXRlIHByb3BzLm1vZGU7XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gIHByb3BzOiBwcm9wcyxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgdHJhbnNpdGlvbkRhdGEgPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgaWYgKGMudGFnKSB7XG4gICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICBtYXBbYy5rZXldID0gY1xuICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICBiZWZvcmVVcGRhdGU6IGZ1bmN0aW9uIGJlZm9yZVVwZGF0ZSAoKSB7XG4gICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgIHRoaXMuX19wYXRjaF9fKFxuICAgICAgdGhpcy5fdm5vZGUsXG4gICAgICB0aGlzLmtlcHQsXG4gICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICApO1xuICAgIHRoaXMuX3Zub2RlID0gdGhpcy5rZXB0O1xuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAvLyBhc3NpZ24gdG8gdGhpcyB0byBhdm9pZCBiZWluZyByZW1vdmVkIGluIHRyZWUtc2hha2luZ1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTsgfSk7XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyAoYykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHtcbiAgICBjLmVsbS5fbW92ZUNiKCk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fZW50ZXJDYikge1xuICAgIGMuZWxtLl9lbnRlckNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcbiAgYy5kYXRhLm5ld1BvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7XG4gIHZhciBvbGRQb3MgPSBjLmRhdGEucG9zO1xuICB2YXIgbmV3UG9zID0gYy5kYXRhLm5ld1BvcztcbiAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgdmFyIGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gIGlmIChkeCB8fCBkeSkge1xuICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XG4gICAgdmFyIHMgPSBjLmVsbS5zdHlsZTtcbiAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyBkeCArIFwicHgsXCIgKyBkeSArIFwicHgpXCI7XG4gICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICB9XG59XG5cbnZhciBwbGF0Zm9ybUNvbXBvbmVudHMgPSB7XG4gIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG4gIFRyYW5zaXRpb25Hcm91cDogVHJhbnNpdGlvbkdyb3VwXG59XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xuXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGluQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgICAgaXNDaHJvbWVcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICBjb25maWcucHJvZHVjdGlvblRpcCAhPT0gZmFsc2UgJiZcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgIFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiICtcbiAgICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgICAgICk7XG4gICAgfVxuICB9LCAwKTtcbn1cblxuLyogICovXG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIFN1cHBvcnQgYmFzZVVSTCBjb25maWdcbiAgaWYgKGNvbmZpZy5iYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKGNvbmZpZy51cmwpKSB7XG4gICAgY29uZmlnLnVybCA9IGNvbWJpbmVVUkxzKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgfVxuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnMgfHwge31cbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgfSxcblxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGJ0b2EgcG9seWZpbGwgZm9yIElFPDEwIGNvdXJ0ZXN5IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXZpZGNoYW1iZXJzL0Jhc2U2NC5qc1xuXG52YXIgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuXG5mdW5jdGlvbiBFKCkge1xuICB0aGlzLm1lc3NhZ2UgPSAnU3RyaW5nIGNvbnRhaW5zIGFuIGludmFsaWQgY2hhcmFjdGVyJztcbn1cbkUucHJvdG90eXBlID0gbmV3IEVycm9yO1xuRS5wcm90b3R5cGUuY29kZSA9IDU7XG5FLnByb3RvdHlwZS5uYW1lID0gJ0ludmFsaWRDaGFyYWN0ZXJFcnJvcic7XG5cbmZ1bmN0aW9uIGJ0b2EoaW5wdXQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhpbnB1dCk7XG4gIHZhciBvdXRwdXQgPSAnJztcbiAgZm9yIChcbiAgICAvLyBpbml0aWFsaXplIHJlc3VsdCBhbmQgY291bnRlclxuICAgIHZhciBibG9jaywgY2hhckNvZGUsIGlkeCA9IDAsIG1hcCA9IGNoYXJzO1xuICAgIC8vIGlmIHRoZSBuZXh0IHN0ciBpbmRleCBkb2VzIG5vdCBleGlzdDpcbiAgICAvLyAgIGNoYW5nZSB0aGUgbWFwcGluZyB0YWJsZSB0byBcIj1cIlxuICAgIC8vICAgY2hlY2sgaWYgZCBoYXMgbm8gZnJhY3Rpb25hbCBkaWdpdHNcbiAgICBzdHIuY2hhckF0KGlkeCB8IDApIHx8IChtYXAgPSAnPScsIGlkeCAlIDEpO1xuICAgIC8vIFwiOCAtIGlkeCAlIDEgKiA4XCIgZ2VuZXJhdGVzIHRoZSBzZXF1ZW5jZSAyLCA0LCA2LCA4XG4gICAgb3V0cHV0ICs9IG1hcC5jaGFyQXQoNjMgJiBibG9jayA+PiA4IC0gaWR4ICUgMSAqIDgpXG4gICkge1xuICAgIGNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoaWR4ICs9IDMgLyA0KTtcbiAgICBpZiAoY2hhckNvZGUgPiAweEZGKSB7XG4gICAgICB0aHJvdyBuZXcgRSgpO1xuICAgIH1cbiAgICBibG9jayA9IGJsb2NrIDw8IDggfCBjaGFyQ29kZTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ0b2E7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICAvLyBOb3RlOiBzdGF0dXMgaXMgbm90IGV4cG9zZWQgYnkgWERvbWFpblJlcXVlc3RcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gdXRpbHMubWVyZ2Uoe1xuICAgICAgdXJsOiBhcmd1bWVudHNbMF1cbiAgICB9LCBhcmd1bWVudHNbMV0pO1xuICB9XG5cbiAgY29uZmlnID0gdXRpbHMubWVyZ2UoZGVmYXVsdHMsIHttZXRob2Q6ICdnZXQnfSwgdGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UodXRpbHMubWVyZ2UoZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCJ2YXIgZXF1YWwgPSByZXF1aXJlKCdkZWVwLWVxdWFsJyk7XG52YXIgZXh0ZW5kID0gcmVxdWlyZSgnZXh0ZW5kJyk7XG5cblxudmFyIGxpYiA9IHtcbiAgYXR0cmlidXRlczoge1xuICAgIGNvbXBvc2U6IGZ1bmN0aW9uIChhLCBiLCBrZWVwTnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBhICE9PSAnb2JqZWN0JykgYSA9IHt9O1xuICAgICAgaWYgKHR5cGVvZiBiICE9PSAnb2JqZWN0JykgYiA9IHt9O1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBleHRlbmQodHJ1ZSwge30sIGIpO1xuICAgICAgaWYgKCFrZWVwTnVsbCkge1xuICAgICAgICBhdHRyaWJ1dGVzID0gT2JqZWN0LmtleXMoYXR0cmlidXRlcykucmVkdWNlKGZ1bmN0aW9uIChjb3B5LCBrZXkpIHtcbiAgICAgICAgICBpZiAoYXR0cmlidXRlc1trZXldICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvcHlba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgICAgIH0sIHt9KTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBhKSB7XG4gICAgICAgIGlmIChhW2tleV0gIT09IHVuZGVmaW5lZCAmJiBiW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGF0dHJpYnV0ZXNba2V5XSA9IGFba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCA+IDAgPyBhdHRyaWJ1dGVzIDogdW5kZWZpbmVkO1xuICAgIH0sXG5cbiAgICBkaWZmOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICBpZiAodHlwZW9mIGEgIT09ICdvYmplY3QnKSBhID0ge307XG4gICAgICBpZiAodHlwZW9mIGIgIT09ICdvYmplY3QnKSBiID0ge307XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKGEpLmNvbmNhdChPYmplY3Qua2V5cyhiKSkucmVkdWNlKGZ1bmN0aW9uIChhdHRyaWJ1dGVzLCBrZXkpIHtcbiAgICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSBiW2tleV0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBiW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZXM7XG4gICAgICB9LCB7fSk7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoID4gMCA/IGF0dHJpYnV0ZXMgOiB1bmRlZmluZWQ7XG4gICAgfSxcblxuICAgIHRyYW5zZm9ybTogZnVuY3Rpb24gKGEsIGIsIHByaW9yaXR5KSB7XG4gICAgICBpZiAodHlwZW9mIGEgIT09ICdvYmplY3QnKSByZXR1cm4gYjtcbiAgICAgIGlmICh0eXBlb2YgYiAhPT0gJ29iamVjdCcpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICBpZiAoIXByaW9yaXR5KSByZXR1cm4gYjsgIC8vIGIgc2ltcGx5IG92ZXJ3cml0ZXMgdXMgd2l0aG91dCBwcmlvcml0eVxuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyhiKS5yZWR1Y2UoZnVuY3Rpb24gKGF0dHJpYnV0ZXMsIGtleSkge1xuICAgICAgICBpZiAoYVtrZXldID09PSB1bmRlZmluZWQpIGF0dHJpYnV0ZXNba2V5XSA9IGJba2V5XTsgIC8vIG51bGwgaXMgYSB2YWxpZCB2YWx1ZVxuICAgICAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgICAgIH0sIHt9KTtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwID8gYXR0cmlidXRlcyA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG5cbiAgaXRlcmF0b3I6IGZ1bmN0aW9uIChvcHMpIHtcbiAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKG9wcyk7XG4gIH0sXG5cbiAgbGVuZ3RoOiBmdW5jdGlvbiAob3ApIHtcbiAgICBpZiAodHlwZW9mIG9wWydkZWxldGUnXSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBvcFsnZGVsZXRlJ107XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb3AucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIG9wLnJldGFpbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvcC5pbnNlcnQgPT09ICdzdHJpbmcnID8gb3AuaW5zZXJ0Lmxlbmd0aCA6IDE7XG4gICAgfVxuICB9XG59O1xuXG5cbmZ1bmN0aW9uIEl0ZXJhdG9yKG9wcykge1xuICB0aGlzLm9wcyA9IG9wcztcbiAgdGhpcy5pbmRleCA9IDA7XG4gIHRoaXMub2Zmc2V0ID0gMDtcbn07XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5oYXNOZXh0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5wZWVrTGVuZ3RoKCkgPCBJbmZpbml0eTtcbn07XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICBpZiAoIWxlbmd0aCkgbGVuZ3RoID0gSW5maW5pdHk7XG4gIHZhciBuZXh0T3AgPSB0aGlzLm9wc1t0aGlzLmluZGV4XTtcbiAgaWYgKG5leHRPcCkge1xuICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICB2YXIgb3BMZW5ndGggPSBsaWIubGVuZ3RoKG5leHRPcClcbiAgICBpZiAobGVuZ3RoID49IG9wTGVuZ3RoIC0gb2Zmc2V0KSB7XG4gICAgICBsZW5ndGggPSBvcExlbmd0aCAtIG9mZnNldDtcbiAgICAgIHRoaXMuaW5kZXggKz0gMTtcbiAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vZmZzZXQgKz0gbGVuZ3RoO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5leHRPcFsnZGVsZXRlJ10gPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4geyAnZGVsZXRlJzogbGVuZ3RoIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciByZXRPcCA9IHt9O1xuICAgICAgaWYgKG5leHRPcC5hdHRyaWJ1dGVzKSB7XG4gICAgICAgIHJldE9wLmF0dHJpYnV0ZXMgPSBuZXh0T3AuYXR0cmlidXRlcztcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbmV4dE9wLnJldGFpbiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0T3AucmV0YWluID0gbGVuZ3RoO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmV4dE9wLmluc2VydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0T3AuaW5zZXJ0ID0gbmV4dE9wLmluc2VydC5zdWJzdHIob2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gb2Zmc2V0IHNob3VsZCA9PT0gMCwgbGVuZ3RoIHNob3VsZCA9PT0gMVxuICAgICAgICByZXRPcC5pbnNlcnQgPSBuZXh0T3AuaW5zZXJ0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldE9wO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geyByZXRhaW46IEluZmluaXR5IH07XG4gIH1cbn07XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5vcHNbdGhpcy5pbmRleF07XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUucGVla0xlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMub3BzW3RoaXMuaW5kZXhdKSB7XG4gICAgLy8gU2hvdWxkIG5ldmVyIHJldHVybiAwIGlmIG91ciBpbmRleCBpcyBiZWluZyBtYW5hZ2VkIGNvcnJlY3RseVxuICAgIHJldHVybiBsaWIubGVuZ3RoKHRoaXMub3BzW3RoaXMuaW5kZXhdKSAtIHRoaXMub2Zmc2V0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBJbmZpbml0eTtcbiAgfVxufTtcblxuSXRlcmF0b3IucHJvdG90eXBlLnBlZWtUeXBlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5vcHNbdGhpcy5pbmRleF0pIHtcbiAgICBpZiAodHlwZW9mIHRoaXMub3BzW3RoaXMuaW5kZXhdWydkZWxldGUnXSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiAnZGVsZXRlJztcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLm9wc1t0aGlzLmluZGV4XS5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gJ3JldGFpbic7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnaW5zZXJ0JztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICdyZXRhaW4nO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpYjtcbiIsInZhciBzdXBwb3J0c0FyZ3VtZW50c0NsYXNzID0gKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnRzKVxufSkoKSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gc3VwcG9ydHNBcmd1bWVudHNDbGFzcyA/IHN1cHBvcnRlZCA6IHVuc3VwcG9ydGVkO1xuXG5leHBvcnRzLnN1cHBvcnRlZCA9IHN1cHBvcnRlZDtcbmZ1bmN0aW9uIHN1cHBvcnRlZChvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufTtcblxuZXhwb3J0cy51bnN1cHBvcnRlZCA9IHVuc3VwcG9ydGVkO1xuZnVuY3Rpb24gdW5zdXBwb3J0ZWQob2JqZWN0KXtcbiAgcmV0dXJuIG9iamVjdCAmJlxuICAgIHR5cGVvZiBvYmplY3QgPT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2Ygb2JqZWN0Lmxlbmd0aCA9PSAnbnVtYmVyJyAmJlxuICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdjYWxsZWUnKSAmJlxuICAgICFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCAnY2FsbGVlJykgfHxcbiAgICBmYWxzZTtcbn07XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbidcbiAgPyBPYmplY3Qua2V5cyA6IHNoaW07XG5cbmV4cG9ydHMuc2hpbSA9IHNoaW07XG5mdW5jdGlvbiBzaGltIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XG4gIHJldHVybiBrZXlzO1xufVxuIiwiLyoqXG4gKiBUaGlzIGxpYnJhcnkgbW9kaWZpZXMgdGhlIGRpZmYtcGF0Y2gtbWF0Y2ggbGlicmFyeSBieSBOZWlsIEZyYXNlclxuICogYnkgcmVtb3ZpbmcgdGhlIHBhdGNoIGFuZCBtYXRjaCBmdW5jdGlvbmFsaXR5IGFuZCBjZXJ0YWluIGFkdmFuY2VkXG4gKiBvcHRpb25zIGluIHRoZSBkaWZmIGZ1bmN0aW9uLiBUaGUgb3JpZ2luYWwgbGljZW5zZSBpcyBhcyBmb2xsb3dzOlxuICpcbiAqID09PVxuICpcbiAqIERpZmYgTWF0Y2ggYW5kIFBhdGNoXG4gKlxuICogQ29weXJpZ2h0IDIwMDYgR29vZ2xlIEluYy5cbiAqIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9nb29nbGUtZGlmZi1tYXRjaC1wYXRjaC9cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuLyoqXG4gKiBUaGUgZGF0YSBzdHJ1Y3R1cmUgcmVwcmVzZW50aW5nIGEgZGlmZiBpcyBhbiBhcnJheSBvZiB0dXBsZXM6XG4gKiBbW0RJRkZfREVMRVRFLCAnSGVsbG8nXSwgW0RJRkZfSU5TRVJULCAnR29vZGJ5ZSddLCBbRElGRl9FUVVBTCwgJyB3b3JsZC4nXV1cbiAqIHdoaWNoIG1lYW5zOiBkZWxldGUgJ0hlbGxvJywgYWRkICdHb29kYnllJyBhbmQga2VlcCAnIHdvcmxkLidcbiAqL1xudmFyIERJRkZfREVMRVRFID0gLTE7XG52YXIgRElGRl9JTlNFUlQgPSAxO1xudmFyIERJRkZfRVFVQUwgPSAwO1xuXG5cbi8qKlxuICogRmluZCB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiB0d28gdGV4dHMuICBTaW1wbGlmaWVzIHRoZSBwcm9ibGVtIGJ5IHN0cmlwcGluZ1xuICogYW55IGNvbW1vbiBwcmVmaXggb3Igc3VmZml4IG9mZiB0aGUgdGV4dHMgYmVmb3JlIGRpZmZpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgT2xkIHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgTmV3IHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge0ludH0gY3Vyc29yX3BvcyBFeHBlY3RlZCBlZGl0IHBvc2l0aW9uIGluIHRleHQxIChvcHRpb25hbClcbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBkaWZmIHR1cGxlcy5cbiAqL1xuZnVuY3Rpb24gZGlmZl9tYWluKHRleHQxLCB0ZXh0MiwgY3Vyc29yX3Bvcykge1xuICAvLyBDaGVjayBmb3IgZXF1YWxpdHkgKHNwZWVkdXApLlxuICBpZiAodGV4dDEgPT0gdGV4dDIpIHtcbiAgICBpZiAodGV4dDEpIHtcbiAgICAgIHJldHVybiBbW0RJRkZfRVFVQUwsIHRleHQxXV07XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIC8vIENoZWNrIGN1cnNvcl9wb3Mgd2l0aGluIGJvdW5kc1xuICBpZiAoY3Vyc29yX3BvcyA8IDAgfHwgdGV4dDEubGVuZ3RoIDwgY3Vyc29yX3Bvcykge1xuICAgIGN1cnNvcl9wb3MgPSBudWxsO1xuICB9XG5cbiAgLy8gVHJpbSBvZmYgY29tbW9uIHByZWZpeCAoc3BlZWR1cCkuXG4gIHZhciBjb21tb25sZW5ndGggPSBkaWZmX2NvbW1vblByZWZpeCh0ZXh0MSwgdGV4dDIpO1xuICB2YXIgY29tbW9ucHJlZml4ID0gdGV4dDEuc3Vic3RyaW5nKDAsIGNvbW1vbmxlbmd0aCk7XG4gIHRleHQxID0gdGV4dDEuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCk7XG4gIHRleHQyID0gdGV4dDIuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCk7XG5cbiAgLy8gVHJpbSBvZmYgY29tbW9uIHN1ZmZpeCAoc3BlZWR1cCkuXG4gIGNvbW1vbmxlbmd0aCA9IGRpZmZfY29tbW9uU3VmZml4KHRleHQxLCB0ZXh0Mik7XG4gIHZhciBjb21tb25zdWZmaXggPSB0ZXh0MS5zdWJzdHJpbmcodGV4dDEubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKTtcbiAgdGV4dDEgPSB0ZXh0MS5zdWJzdHJpbmcoMCwgdGV4dDEubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKTtcbiAgdGV4dDIgPSB0ZXh0Mi5zdWJzdHJpbmcoMCwgdGV4dDIubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKTtcblxuICAvLyBDb21wdXRlIHRoZSBkaWZmIG9uIHRoZSBtaWRkbGUgYmxvY2suXG4gIHZhciBkaWZmcyA9IGRpZmZfY29tcHV0ZV8odGV4dDEsIHRleHQyKTtcblxuICAvLyBSZXN0b3JlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgaWYgKGNvbW1vbnByZWZpeCkge1xuICAgIGRpZmZzLnVuc2hpZnQoW0RJRkZfRVFVQUwsIGNvbW1vbnByZWZpeF0pO1xuICB9XG4gIGlmIChjb21tb25zdWZmaXgpIHtcbiAgICBkaWZmcy5wdXNoKFtESUZGX0VRVUFMLCBjb21tb25zdWZmaXhdKTtcbiAgfVxuICBkaWZmX2NsZWFudXBNZXJnZShkaWZmcyk7XG4gIGlmIChjdXJzb3JfcG9zICE9IG51bGwpIHtcbiAgICBkaWZmcyA9IGZpeF9jdXJzb3IoZGlmZnMsIGN1cnNvcl9wb3MpO1xuICB9XG4gIGRpZmZzID0gZml4X2Vtb2ppKGRpZmZzKTtcbiAgcmV0dXJuIGRpZmZzO1xufTtcblxuXG4vKipcbiAqIEZpbmQgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gdHdvIHRleHRzLiAgQXNzdW1lcyB0aGF0IHRoZSB0ZXh0cyBkbyBub3RcbiAqIGhhdmUgYW55IGNvbW1vbiBwcmVmaXggb3Igc3VmZml4LlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIE9sZCBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIE5ldyBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICovXG5mdW5jdGlvbiBkaWZmX2NvbXB1dGVfKHRleHQxLCB0ZXh0Mikge1xuICB2YXIgZGlmZnM7XG5cbiAgaWYgKCF0ZXh0MSkge1xuICAgIC8vIEp1c3QgYWRkIHNvbWUgdGV4dCAoc3BlZWR1cCkuXG4gICAgcmV0dXJuIFtbRElGRl9JTlNFUlQsIHRleHQyXV07XG4gIH1cblxuICBpZiAoIXRleHQyKSB7XG4gICAgLy8gSnVzdCBkZWxldGUgc29tZSB0ZXh0IChzcGVlZHVwKS5cbiAgICByZXR1cm4gW1tESUZGX0RFTEVURSwgdGV4dDFdXTtcbiAgfVxuXG4gIHZhciBsb25ndGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQxIDogdGV4dDI7XG4gIHZhciBzaG9ydHRleHQgPSB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyB0ZXh0MiA6IHRleHQxO1xuICB2YXIgaSA9IGxvbmd0ZXh0LmluZGV4T2Yoc2hvcnR0ZXh0KTtcbiAgaWYgKGkgIT0gLTEpIHtcbiAgICAvLyBTaG9ydGVyIHRleHQgaXMgaW5zaWRlIHRoZSBsb25nZXIgdGV4dCAoc3BlZWR1cCkuXG4gICAgZGlmZnMgPSBbW0RJRkZfSU5TRVJULCBsb25ndGV4dC5zdWJzdHJpbmcoMCwgaSldLFxuICAgICAgICAgICAgIFtESUZGX0VRVUFMLCBzaG9ydHRleHRdLFxuICAgICAgICAgICAgIFtESUZGX0lOU0VSVCwgbG9uZ3RleHQuc3Vic3RyaW5nKGkgKyBzaG9ydHRleHQubGVuZ3RoKV1dO1xuICAgIC8vIFN3YXAgaW5zZXJ0aW9ucyBmb3IgZGVsZXRpb25zIGlmIGRpZmYgaXMgcmV2ZXJzZWQuXG4gICAgaWYgKHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCkge1xuICAgICAgZGlmZnNbMF1bMF0gPSBkaWZmc1syXVswXSA9IERJRkZfREVMRVRFO1xuICAgIH1cbiAgICByZXR1cm4gZGlmZnM7XG4gIH1cblxuICBpZiAoc2hvcnR0ZXh0Lmxlbmd0aCA9PSAxKSB7XG4gICAgLy8gU2luZ2xlIGNoYXJhY3RlciBzdHJpbmcuXG4gICAgLy8gQWZ0ZXIgdGhlIHByZXZpb3VzIHNwZWVkdXAsIHRoZSBjaGFyYWN0ZXIgY2FuJ3QgYmUgYW4gZXF1YWxpdHkuXG4gICAgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXSwgW0RJRkZfSU5TRVJULCB0ZXh0Ml1dO1xuICB9XG5cbiAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBwcm9ibGVtIGNhbiBiZSBzcGxpdCBpbiB0d28uXG4gIHZhciBobSA9IGRpZmZfaGFsZk1hdGNoXyh0ZXh0MSwgdGV4dDIpO1xuICBpZiAoaG0pIHtcbiAgICAvLyBBIGhhbGYtbWF0Y2ggd2FzIGZvdW5kLCBzb3J0IG91dCB0aGUgcmV0dXJuIGRhdGEuXG4gICAgdmFyIHRleHQxX2EgPSBobVswXTtcbiAgICB2YXIgdGV4dDFfYiA9IGhtWzFdO1xuICAgIHZhciB0ZXh0Ml9hID0gaG1bMl07XG4gICAgdmFyIHRleHQyX2IgPSBobVszXTtcbiAgICB2YXIgbWlkX2NvbW1vbiA9IGhtWzRdO1xuICAgIC8vIFNlbmQgYm90aCBwYWlycyBvZmYgZm9yIHNlcGFyYXRlIHByb2Nlc3NpbmcuXG4gICAgdmFyIGRpZmZzX2EgPSBkaWZmX21haW4odGV4dDFfYSwgdGV4dDJfYSk7XG4gICAgdmFyIGRpZmZzX2IgPSBkaWZmX21haW4odGV4dDFfYiwgdGV4dDJfYik7XG4gICAgLy8gTWVyZ2UgdGhlIHJlc3VsdHMuXG4gICAgcmV0dXJuIGRpZmZzX2EuY29uY2F0KFtbRElGRl9FUVVBTCwgbWlkX2NvbW1vbl1dLCBkaWZmc19iKTtcbiAgfVxuXG4gIHJldHVybiBkaWZmX2Jpc2VjdF8odGV4dDEsIHRleHQyKTtcbn07XG5cblxuLyoqXG4gKiBGaW5kIHRoZSAnbWlkZGxlIHNuYWtlJyBvZiBhIGRpZmYsIHNwbGl0IHRoZSBwcm9ibGVtIGluIHR3b1xuICogYW5kIHJldHVybiB0aGUgcmVjdXJzaXZlbHkgY29uc3RydWN0ZWQgZGlmZi5cbiAqIFNlZSBNeWVycyAxOTg2IHBhcGVyOiBBbiBPKE5EKSBEaWZmZXJlbmNlIEFsZ29yaXRobSBhbmQgSXRzIFZhcmlhdGlvbnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgT2xkIHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgTmV3IHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgZGlmZiB0dXBsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBkaWZmX2Jpc2VjdF8odGV4dDEsIHRleHQyKSB7XG4gIC8vIENhY2hlIHRoZSB0ZXh0IGxlbmd0aHMgdG8gcHJldmVudCBtdWx0aXBsZSBjYWxscy5cbiAgdmFyIHRleHQxX2xlbmd0aCA9IHRleHQxLmxlbmd0aDtcbiAgdmFyIHRleHQyX2xlbmd0aCA9IHRleHQyLmxlbmd0aDtcbiAgdmFyIG1heF9kID0gTWF0aC5jZWlsKCh0ZXh0MV9sZW5ndGggKyB0ZXh0Ml9sZW5ndGgpIC8gMik7XG4gIHZhciB2X29mZnNldCA9IG1heF9kO1xuICB2YXIgdl9sZW5ndGggPSAyICogbWF4X2Q7XG4gIHZhciB2MSA9IG5ldyBBcnJheSh2X2xlbmd0aCk7XG4gIHZhciB2MiA9IG5ldyBBcnJheSh2X2xlbmd0aCk7XG4gIC8vIFNldHRpbmcgYWxsIGVsZW1lbnRzIHRvIC0xIGlzIGZhc3RlciBpbiBDaHJvbWUgJiBGaXJlZm94IHRoYW4gbWl4aW5nXG4gIC8vIGludGVnZXJzIGFuZCB1bmRlZmluZWQuXG4gIGZvciAodmFyIHggPSAwOyB4IDwgdl9sZW5ndGg7IHgrKykge1xuICAgIHYxW3hdID0gLTE7XG4gICAgdjJbeF0gPSAtMTtcbiAgfVxuICB2MVt2X29mZnNldCArIDFdID0gMDtcbiAgdjJbdl9vZmZzZXQgKyAxXSA9IDA7XG4gIHZhciBkZWx0YSA9IHRleHQxX2xlbmd0aCAtIHRleHQyX2xlbmd0aDtcbiAgLy8gSWYgdGhlIHRvdGFsIG51bWJlciBvZiBjaGFyYWN0ZXJzIGlzIG9kZCwgdGhlbiB0aGUgZnJvbnQgcGF0aCB3aWxsIGNvbGxpZGVcbiAgLy8gd2l0aCB0aGUgcmV2ZXJzZSBwYXRoLlxuICB2YXIgZnJvbnQgPSAoZGVsdGEgJSAyICE9IDApO1xuICAvLyBPZmZzZXRzIGZvciBzdGFydCBhbmQgZW5kIG9mIGsgbG9vcC5cbiAgLy8gUHJldmVudHMgbWFwcGluZyBvZiBzcGFjZSBiZXlvbmQgdGhlIGdyaWQuXG4gIHZhciBrMXN0YXJ0ID0gMDtcbiAgdmFyIGsxZW5kID0gMDtcbiAgdmFyIGsyc3RhcnQgPSAwO1xuICB2YXIgazJlbmQgPSAwO1xuICBmb3IgKHZhciBkID0gMDsgZCA8IG1heF9kOyBkKyspIHtcbiAgICAvLyBXYWxrIHRoZSBmcm9udCBwYXRoIG9uZSBzdGVwLlxuICAgIGZvciAodmFyIGsxID0gLWQgKyBrMXN0YXJ0OyBrMSA8PSBkIC0gazFlbmQ7IGsxICs9IDIpIHtcbiAgICAgIHZhciBrMV9vZmZzZXQgPSB2X29mZnNldCArIGsxO1xuICAgICAgdmFyIHgxO1xuICAgICAgaWYgKGsxID09IC1kIHx8IChrMSAhPSBkICYmIHYxW2sxX29mZnNldCAtIDFdIDwgdjFbazFfb2Zmc2V0ICsgMV0pKSB7XG4gICAgICAgIHgxID0gdjFbazFfb2Zmc2V0ICsgMV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MSA9IHYxW2sxX29mZnNldCAtIDFdICsgMTtcbiAgICAgIH1cbiAgICAgIHZhciB5MSA9IHgxIC0gazE7XG4gICAgICB3aGlsZSAoeDEgPCB0ZXh0MV9sZW5ndGggJiYgeTEgPCB0ZXh0Ml9sZW5ndGggJiZcbiAgICAgICAgICAgICB0ZXh0MS5jaGFyQXQoeDEpID09IHRleHQyLmNoYXJBdCh5MSkpIHtcbiAgICAgICAgeDErKztcbiAgICAgICAgeTErKztcbiAgICAgIH1cbiAgICAgIHYxW2sxX29mZnNldF0gPSB4MTtcbiAgICAgIGlmICh4MSA+IHRleHQxX2xlbmd0aCkge1xuICAgICAgICAvLyBSYW4gb2ZmIHRoZSByaWdodCBvZiB0aGUgZ3JhcGguXG4gICAgICAgIGsxZW5kICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKHkxID4gdGV4dDJfbGVuZ3RoKSB7XG4gICAgICAgIC8vIFJhbiBvZmYgdGhlIGJvdHRvbSBvZiB0aGUgZ3JhcGguXG4gICAgICAgIGsxc3RhcnQgKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoZnJvbnQpIHtcbiAgICAgICAgdmFyIGsyX29mZnNldCA9IHZfb2Zmc2V0ICsgZGVsdGEgLSBrMTtcbiAgICAgICAgaWYgKGsyX29mZnNldCA+PSAwICYmIGsyX29mZnNldCA8IHZfbGVuZ3RoICYmIHYyW2syX29mZnNldF0gIT0gLTEpIHtcbiAgICAgICAgICAvLyBNaXJyb3IgeDIgb250byB0b3AtbGVmdCBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgICAgICB2YXIgeDIgPSB0ZXh0MV9sZW5ndGggLSB2MltrMl9vZmZzZXRdO1xuICAgICAgICAgIGlmICh4MSA+PSB4Mikge1xuICAgICAgICAgICAgLy8gT3ZlcmxhcCBkZXRlY3RlZC5cbiAgICAgICAgICAgIHJldHVybiBkaWZmX2Jpc2VjdFNwbGl0Xyh0ZXh0MSwgdGV4dDIsIHgxLCB5MSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gV2FsayB0aGUgcmV2ZXJzZSBwYXRoIG9uZSBzdGVwLlxuICAgIGZvciAodmFyIGsyID0gLWQgKyBrMnN0YXJ0OyBrMiA8PSBkIC0gazJlbmQ7IGsyICs9IDIpIHtcbiAgICAgIHZhciBrMl9vZmZzZXQgPSB2X29mZnNldCArIGsyO1xuICAgICAgdmFyIHgyO1xuICAgICAgaWYgKGsyID09IC1kIHx8IChrMiAhPSBkICYmIHYyW2syX29mZnNldCAtIDFdIDwgdjJbazJfb2Zmc2V0ICsgMV0pKSB7XG4gICAgICAgIHgyID0gdjJbazJfb2Zmc2V0ICsgMV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MiA9IHYyW2syX29mZnNldCAtIDFdICsgMTtcbiAgICAgIH1cbiAgICAgIHZhciB5MiA9IHgyIC0gazI7XG4gICAgICB3aGlsZSAoeDIgPCB0ZXh0MV9sZW5ndGggJiYgeTIgPCB0ZXh0Ml9sZW5ndGggJiZcbiAgICAgICAgICAgICB0ZXh0MS5jaGFyQXQodGV4dDFfbGVuZ3RoIC0geDIgLSAxKSA9PVxuICAgICAgICAgICAgIHRleHQyLmNoYXJBdCh0ZXh0Ml9sZW5ndGggLSB5MiAtIDEpKSB7XG4gICAgICAgIHgyKys7XG4gICAgICAgIHkyKys7XG4gICAgICB9XG4gICAgICB2MltrMl9vZmZzZXRdID0geDI7XG4gICAgICBpZiAoeDIgPiB0ZXh0MV9sZW5ndGgpIHtcbiAgICAgICAgLy8gUmFuIG9mZiB0aGUgbGVmdCBvZiB0aGUgZ3JhcGguXG4gICAgICAgIGsyZW5kICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKHkyID4gdGV4dDJfbGVuZ3RoKSB7XG4gICAgICAgIC8vIFJhbiBvZmYgdGhlIHRvcCBvZiB0aGUgZ3JhcGguXG4gICAgICAgIGsyc3RhcnQgKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoIWZyb250KSB7XG4gICAgICAgIHZhciBrMV9vZmZzZXQgPSB2X29mZnNldCArIGRlbHRhIC0gazI7XG4gICAgICAgIGlmIChrMV9vZmZzZXQgPj0gMCAmJiBrMV9vZmZzZXQgPCB2X2xlbmd0aCAmJiB2MVtrMV9vZmZzZXRdICE9IC0xKSB7XG4gICAgICAgICAgdmFyIHgxID0gdjFbazFfb2Zmc2V0XTtcbiAgICAgICAgICB2YXIgeTEgPSB2X29mZnNldCArIHgxIC0gazFfb2Zmc2V0O1xuICAgICAgICAgIC8vIE1pcnJvciB4MiBvbnRvIHRvcC1sZWZ0IGNvb3JkaW5hdGUgc3lzdGVtLlxuICAgICAgICAgIHgyID0gdGV4dDFfbGVuZ3RoIC0geDI7XG4gICAgICAgICAgaWYgKHgxID49IHgyKSB7XG4gICAgICAgICAgICAvLyBPdmVybGFwIGRldGVjdGVkLlxuICAgICAgICAgICAgcmV0dXJuIGRpZmZfYmlzZWN0U3BsaXRfKHRleHQxLCB0ZXh0MiwgeDEsIHkxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gRGlmZiB0b29rIHRvbyBsb25nIGFuZCBoaXQgdGhlIGRlYWRsaW5lIG9yXG4gIC8vIG51bWJlciBvZiBkaWZmcyBlcXVhbHMgbnVtYmVyIG9mIGNoYXJhY3RlcnMsIG5vIGNvbW1vbmFsaXR5IGF0IGFsbC5cbiAgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXSwgW0RJRkZfSU5TRVJULCB0ZXh0Ml1dO1xufTtcblxuXG4vKipcbiAqIEdpdmVuIHRoZSBsb2NhdGlvbiBvZiB0aGUgJ21pZGRsZSBzbmFrZScsIHNwbGl0IHRoZSBkaWZmIGluIHR3byBwYXJ0c1xuICogYW5kIHJlY3Vyc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgT2xkIHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgTmV3IHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge251bWJlcn0geCBJbmRleCBvZiBzcGxpdCBwb2ludCBpbiB0ZXh0MS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB5IEluZGV4IG9mIHNwbGl0IHBvaW50IGluIHRleHQyLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICovXG5mdW5jdGlvbiBkaWZmX2Jpc2VjdFNwbGl0Xyh0ZXh0MSwgdGV4dDIsIHgsIHkpIHtcbiAgdmFyIHRleHQxYSA9IHRleHQxLnN1YnN0cmluZygwLCB4KTtcbiAgdmFyIHRleHQyYSA9IHRleHQyLnN1YnN0cmluZygwLCB5KTtcbiAgdmFyIHRleHQxYiA9IHRleHQxLnN1YnN0cmluZyh4KTtcbiAgdmFyIHRleHQyYiA9IHRleHQyLnN1YnN0cmluZyh5KTtcblxuICAvLyBDb21wdXRlIGJvdGggZGlmZnMgc2VyaWFsbHkuXG4gIHZhciBkaWZmcyA9IGRpZmZfbWFpbih0ZXh0MWEsIHRleHQyYSk7XG4gIHZhciBkaWZmc2IgPSBkaWZmX21haW4odGV4dDFiLCB0ZXh0MmIpO1xuXG4gIHJldHVybiBkaWZmcy5jb25jYXQoZGlmZnNiKTtcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgdGhlIGNvbW1vbiBwcmVmaXggb2YgdHdvIHN0cmluZ3MuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgRmlyc3Qgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIFNlY29uZCBzdHJpbmcuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBjb21tb24gdG8gdGhlIHN0YXJ0IG9mIGVhY2hcbiAqICAgICBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGRpZmZfY29tbW9uUHJlZml4KHRleHQxLCB0ZXh0Mikge1xuICAvLyBRdWljayBjaGVjayBmb3IgY29tbW9uIG51bGwgY2FzZXMuXG4gIGlmICghdGV4dDEgfHwgIXRleHQyIHx8IHRleHQxLmNoYXJBdCgwKSAhPSB0ZXh0Mi5jaGFyQXQoMCkpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICAvLyBCaW5hcnkgc2VhcmNoLlxuICAvLyBQZXJmb3JtYW5jZSBhbmFseXNpczogaHR0cDovL25laWwuZnJhc2VyLm5hbWUvbmV3cy8yMDA3LzEwLzA5L1xuICB2YXIgcG9pbnRlcm1pbiA9IDA7XG4gIHZhciBwb2ludGVybWF4ID0gTWF0aC5taW4odGV4dDEubGVuZ3RoLCB0ZXh0Mi5sZW5ndGgpO1xuICB2YXIgcG9pbnRlcm1pZCA9IHBvaW50ZXJtYXg7XG4gIHZhciBwb2ludGVyc3RhcnQgPSAwO1xuICB3aGlsZSAocG9pbnRlcm1pbiA8IHBvaW50ZXJtaWQpIHtcbiAgICBpZiAodGV4dDEuc3Vic3RyaW5nKHBvaW50ZXJzdGFydCwgcG9pbnRlcm1pZCkgPT1cbiAgICAgICAgdGV4dDIuc3Vic3RyaW5nKHBvaW50ZXJzdGFydCwgcG9pbnRlcm1pZCkpIHtcbiAgICAgIHBvaW50ZXJtaW4gPSBwb2ludGVybWlkO1xuICAgICAgcG9pbnRlcnN0YXJ0ID0gcG9pbnRlcm1pbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnRlcm1heCA9IHBvaW50ZXJtaWQ7XG4gICAgfVxuICAgIHBvaW50ZXJtaWQgPSBNYXRoLmZsb29yKChwb2ludGVybWF4IC0gcG9pbnRlcm1pbikgLyAyICsgcG9pbnRlcm1pbik7XG4gIH1cbiAgcmV0dXJuIHBvaW50ZXJtaWQ7XG59O1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIHRoZSBjb21tb24gc3VmZml4IG9mIHR3byBzdHJpbmdzLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIEZpcnN0IHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBTZWNvbmQgc3RyaW5nLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgY29tbW9uIHRvIHRoZSBlbmQgb2YgZWFjaCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGRpZmZfY29tbW9uU3VmZml4KHRleHQxLCB0ZXh0Mikge1xuICAvLyBRdWljayBjaGVjayBmb3IgY29tbW9uIG51bGwgY2FzZXMuXG4gIGlmICghdGV4dDEgfHwgIXRleHQyIHx8XG4gICAgICB0ZXh0MS5jaGFyQXQodGV4dDEubGVuZ3RoIC0gMSkgIT0gdGV4dDIuY2hhckF0KHRleHQyLmxlbmd0aCAtIDEpKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgLy8gQmluYXJ5IHNlYXJjaC5cbiAgLy8gUGVyZm9ybWFuY2UgYW5hbHlzaXM6IGh0dHA6Ly9uZWlsLmZyYXNlci5uYW1lL25ld3MvMjAwNy8xMC8wOS9cbiAgdmFyIHBvaW50ZXJtaW4gPSAwO1xuICB2YXIgcG9pbnRlcm1heCA9IE1hdGgubWluKHRleHQxLmxlbmd0aCwgdGV4dDIubGVuZ3RoKTtcbiAgdmFyIHBvaW50ZXJtaWQgPSBwb2ludGVybWF4O1xuICB2YXIgcG9pbnRlcmVuZCA9IDA7XG4gIHdoaWxlIChwb2ludGVybWluIDwgcG9pbnRlcm1pZCkge1xuICAgIGlmICh0ZXh0MS5zdWJzdHJpbmcodGV4dDEubGVuZ3RoIC0gcG9pbnRlcm1pZCwgdGV4dDEubGVuZ3RoIC0gcG9pbnRlcmVuZCkgPT1cbiAgICAgICAgdGV4dDIuc3Vic3RyaW5nKHRleHQyLmxlbmd0aCAtIHBvaW50ZXJtaWQsIHRleHQyLmxlbmd0aCAtIHBvaW50ZXJlbmQpKSB7XG4gICAgICBwb2ludGVybWluID0gcG9pbnRlcm1pZDtcbiAgICAgIHBvaW50ZXJlbmQgPSBwb2ludGVybWluO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb2ludGVybWF4ID0gcG9pbnRlcm1pZDtcbiAgICB9XG4gICAgcG9pbnRlcm1pZCA9IE1hdGguZmxvb3IoKHBvaW50ZXJtYXggLSBwb2ludGVybWluKSAvIDIgKyBwb2ludGVybWluKTtcbiAgfVxuICByZXR1cm4gcG9pbnRlcm1pZDtcbn07XG5cblxuLyoqXG4gKiBEbyB0aGUgdHdvIHRleHRzIHNoYXJlIGEgc3Vic3RyaW5nIHdoaWNoIGlzIGF0IGxlYXN0IGhhbGYgdGhlIGxlbmd0aCBvZiB0aGVcbiAqIGxvbmdlciB0ZXh0P1xuICogVGhpcyBzcGVlZHVwIGNhbiBwcm9kdWNlIG5vbi1taW5pbWFsIGRpZmZzLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIEZpcnN0IHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBTZWNvbmQgc3RyaW5nLlxuICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59IEZpdmUgZWxlbWVudCBBcnJheSwgY29udGFpbmluZyB0aGUgcHJlZml4IG9mXG4gKiAgICAgdGV4dDEsIHRoZSBzdWZmaXggb2YgdGV4dDEsIHRoZSBwcmVmaXggb2YgdGV4dDIsIHRoZSBzdWZmaXggb2ZcbiAqICAgICB0ZXh0MiBhbmQgdGhlIGNvbW1vbiBtaWRkbGUuICBPciBudWxsIGlmIHRoZXJlIHdhcyBubyBtYXRjaC5cbiAqL1xuZnVuY3Rpb24gZGlmZl9oYWxmTWF0Y2hfKHRleHQxLCB0ZXh0Mikge1xuICB2YXIgbG9uZ3RleHQgPSB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyB0ZXh0MSA6IHRleHQyO1xuICB2YXIgc2hvcnR0ZXh0ID0gdGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoID8gdGV4dDIgOiB0ZXh0MTtcbiAgaWYgKGxvbmd0ZXh0Lmxlbmd0aCA8IDQgfHwgc2hvcnR0ZXh0Lmxlbmd0aCAqIDIgPCBsb25ndGV4dC5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDsgIC8vIFBvaW50bGVzcy5cbiAgfVxuXG4gIC8qKlxuICAgKiBEb2VzIGEgc3Vic3RyaW5nIG9mIHNob3J0dGV4dCBleGlzdCB3aXRoaW4gbG9uZ3RleHQgc3VjaCB0aGF0IHRoZSBzdWJzdHJpbmdcbiAgICogaXMgYXQgbGVhc3QgaGFsZiB0aGUgbGVuZ3RoIG9mIGxvbmd0ZXh0P1xuICAgKiBDbG9zdXJlLCBidXQgZG9lcyBub3QgcmVmZXJlbmNlIGFueSBleHRlcm5hbCB2YXJpYWJsZXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb25ndGV4dCBMb25nZXIgc3RyaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2hvcnR0ZXh0IFNob3J0ZXIgc3RyaW5nLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaSBTdGFydCBpbmRleCBvZiBxdWFydGVyIGxlbmd0aCBzdWJzdHJpbmcgd2l0aGluIGxvbmd0ZXh0LlxuICAgKiBAcmV0dXJuIHtBcnJheS48c3RyaW5nPn0gRml2ZSBlbGVtZW50IEFycmF5LCBjb250YWluaW5nIHRoZSBwcmVmaXggb2ZcbiAgICogICAgIGxvbmd0ZXh0LCB0aGUgc3VmZml4IG9mIGxvbmd0ZXh0LCB0aGUgcHJlZml4IG9mIHNob3J0dGV4dCwgdGhlIHN1ZmZpeFxuICAgKiAgICAgb2Ygc2hvcnR0ZXh0IGFuZCB0aGUgY29tbW9uIG1pZGRsZS4gIE9yIG51bGwgaWYgdGhlcmUgd2FzIG5vIG1hdGNoLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZGlmZl9oYWxmTWF0Y2hJXyhsb25ndGV4dCwgc2hvcnR0ZXh0LCBpKSB7XG4gICAgLy8gU3RhcnQgd2l0aCBhIDEvNCBsZW5ndGggc3Vic3RyaW5nIGF0IHBvc2l0aW9uIGkgYXMgYSBzZWVkLlxuICAgIHZhciBzZWVkID0gbG9uZ3RleHQuc3Vic3RyaW5nKGksIGkgKyBNYXRoLmZsb29yKGxvbmd0ZXh0Lmxlbmd0aCAvIDQpKTtcbiAgICB2YXIgaiA9IC0xO1xuICAgIHZhciBiZXN0X2NvbW1vbiA9ICcnO1xuICAgIHZhciBiZXN0X2xvbmd0ZXh0X2EsIGJlc3RfbG9uZ3RleHRfYiwgYmVzdF9zaG9ydHRleHRfYSwgYmVzdF9zaG9ydHRleHRfYjtcbiAgICB3aGlsZSAoKGogPSBzaG9ydHRleHQuaW5kZXhPZihzZWVkLCBqICsgMSkpICE9IC0xKSB7XG4gICAgICB2YXIgcHJlZml4TGVuZ3RoID0gZGlmZl9jb21tb25QcmVmaXgobG9uZ3RleHQuc3Vic3RyaW5nKGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0dGV4dC5zdWJzdHJpbmcoaikpO1xuICAgICAgdmFyIHN1ZmZpeExlbmd0aCA9IGRpZmZfY29tbW9uU3VmZml4KGxvbmd0ZXh0LnN1YnN0cmluZygwLCBpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9ydHRleHQuc3Vic3RyaW5nKDAsIGopKTtcbiAgICAgIGlmIChiZXN0X2NvbW1vbi5sZW5ndGggPCBzdWZmaXhMZW5ndGggKyBwcmVmaXhMZW5ndGgpIHtcbiAgICAgICAgYmVzdF9jb21tb24gPSBzaG9ydHRleHQuc3Vic3RyaW5nKGogLSBzdWZmaXhMZW5ndGgsIGopICtcbiAgICAgICAgICAgIHNob3J0dGV4dC5zdWJzdHJpbmcoaiwgaiArIHByZWZpeExlbmd0aCk7XG4gICAgICAgIGJlc3RfbG9uZ3RleHRfYSA9IGxvbmd0ZXh0LnN1YnN0cmluZygwLCBpIC0gc3VmZml4TGVuZ3RoKTtcbiAgICAgICAgYmVzdF9sb25ndGV4dF9iID0gbG9uZ3RleHQuc3Vic3RyaW5nKGkgKyBwcmVmaXhMZW5ndGgpO1xuICAgICAgICBiZXN0X3Nob3J0dGV4dF9hID0gc2hvcnR0ZXh0LnN1YnN0cmluZygwLCBqIC0gc3VmZml4TGVuZ3RoKTtcbiAgICAgICAgYmVzdF9zaG9ydHRleHRfYiA9IHNob3J0dGV4dC5zdWJzdHJpbmcoaiArIHByZWZpeExlbmd0aCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChiZXN0X2NvbW1vbi5sZW5ndGggKiAyID49IGxvbmd0ZXh0Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFtiZXN0X2xvbmd0ZXh0X2EsIGJlc3RfbG9uZ3RleHRfYixcbiAgICAgICAgICAgICAgYmVzdF9zaG9ydHRleHRfYSwgYmVzdF9zaG9ydHRleHRfYiwgYmVzdF9jb21tb25dO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBGaXJzdCBjaGVjayBpZiB0aGUgc2Vjb25kIHF1YXJ0ZXIgaXMgdGhlIHNlZWQgZm9yIGEgaGFsZi1tYXRjaC5cbiAgdmFyIGhtMSA9IGRpZmZfaGFsZk1hdGNoSV8obG9uZ3RleHQsIHNob3J0dGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5jZWlsKGxvbmd0ZXh0Lmxlbmd0aCAvIDQpKTtcbiAgLy8gQ2hlY2sgYWdhaW4gYmFzZWQgb24gdGhlIHRoaXJkIHF1YXJ0ZXIuXG4gIHZhciBobTIgPSBkaWZmX2hhbGZNYXRjaElfKGxvbmd0ZXh0LCBzaG9ydHRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguY2VpbChsb25ndGV4dC5sZW5ndGggLyAyKSk7XG4gIHZhciBobTtcbiAgaWYgKCFobTEgJiYgIWhtMikge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2UgaWYgKCFobTIpIHtcbiAgICBobSA9IGhtMTtcbiAgfSBlbHNlIGlmICghaG0xKSB7XG4gICAgaG0gPSBobTI7XG4gIH0gZWxzZSB7XG4gICAgLy8gQm90aCBtYXRjaGVkLiAgU2VsZWN0IHRoZSBsb25nZXN0LlxuICAgIGhtID0gaG0xWzRdLmxlbmd0aCA+IGhtMls0XS5sZW5ndGggPyBobTEgOiBobTI7XG4gIH1cblxuICAvLyBBIGhhbGYtbWF0Y2ggd2FzIGZvdW5kLCBzb3J0IG91dCB0aGUgcmV0dXJuIGRhdGEuXG4gIHZhciB0ZXh0MV9hLCB0ZXh0MV9iLCB0ZXh0Ml9hLCB0ZXh0Ml9iO1xuICBpZiAodGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoKSB7XG4gICAgdGV4dDFfYSA9IGhtWzBdO1xuICAgIHRleHQxX2IgPSBobVsxXTtcbiAgICB0ZXh0Ml9hID0gaG1bMl07XG4gICAgdGV4dDJfYiA9IGhtWzNdO1xuICB9IGVsc2Uge1xuICAgIHRleHQyX2EgPSBobVswXTtcbiAgICB0ZXh0Ml9iID0gaG1bMV07XG4gICAgdGV4dDFfYSA9IGhtWzJdO1xuICAgIHRleHQxX2IgPSBobVszXTtcbiAgfVxuICB2YXIgbWlkX2NvbW1vbiA9IGhtWzRdO1xuICByZXR1cm4gW3RleHQxX2EsIHRleHQxX2IsIHRleHQyX2EsIHRleHQyX2IsIG1pZF9jb21tb25dO1xufTtcblxuXG4vKipcbiAqIFJlb3JkZXIgYW5kIG1lcmdlIGxpa2UgZWRpdCBzZWN0aW9ucy4gIE1lcmdlIGVxdWFsaXRpZXMuXG4gKiBBbnkgZWRpdCBzZWN0aW9uIGNhbiBtb3ZlIGFzIGxvbmcgYXMgaXQgZG9lc24ndCBjcm9zcyBhbiBlcXVhbGl0eS5cbiAqIEBwYXJhbSB7QXJyYXl9IGRpZmZzIEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICovXG5mdW5jdGlvbiBkaWZmX2NsZWFudXBNZXJnZShkaWZmcykge1xuICBkaWZmcy5wdXNoKFtESUZGX0VRVUFMLCAnJ10pOyAgLy8gQWRkIGEgZHVtbXkgZW50cnkgYXQgdGhlIGVuZC5cbiAgdmFyIHBvaW50ZXIgPSAwO1xuICB2YXIgY291bnRfZGVsZXRlID0gMDtcbiAgdmFyIGNvdW50X2luc2VydCA9IDA7XG4gIHZhciB0ZXh0X2RlbGV0ZSA9ICcnO1xuICB2YXIgdGV4dF9pbnNlcnQgPSAnJztcbiAgdmFyIGNvbW1vbmxlbmd0aDtcbiAgd2hpbGUgKHBvaW50ZXIgPCBkaWZmcy5sZW5ndGgpIHtcbiAgICBzd2l0Y2ggKGRpZmZzW3BvaW50ZXJdWzBdKSB7XG4gICAgICBjYXNlIERJRkZfSU5TRVJUOlxuICAgICAgICBjb3VudF9pbnNlcnQrKztcbiAgICAgICAgdGV4dF9pbnNlcnQgKz0gZGlmZnNbcG9pbnRlcl1bMV07XG4gICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERJRkZfREVMRVRFOlxuICAgICAgICBjb3VudF9kZWxldGUrKztcbiAgICAgICAgdGV4dF9kZWxldGUgKz0gZGlmZnNbcG9pbnRlcl1bMV07XG4gICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERJRkZfRVFVQUw6XG4gICAgICAgIC8vIFVwb24gcmVhY2hpbmcgYW4gZXF1YWxpdHksIGNoZWNrIGZvciBwcmlvciByZWR1bmRhbmNpZXMuXG4gICAgICAgIGlmIChjb3VudF9kZWxldGUgKyBjb3VudF9pbnNlcnQgPiAxKSB7XG4gICAgICAgICAgaWYgKGNvdW50X2RlbGV0ZSAhPT0gMCAmJiBjb3VudF9pbnNlcnQgIT09IDApIHtcbiAgICAgICAgICAgIC8vIEZhY3RvciBvdXQgYW55IGNvbW1vbiBwcmVmaXhpZXMuXG4gICAgICAgICAgICBjb21tb25sZW5ndGggPSBkaWZmX2NvbW1vblByZWZpeCh0ZXh0X2luc2VydCwgdGV4dF9kZWxldGUpO1xuICAgICAgICAgICAgaWYgKGNvbW1vbmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICBpZiAoKHBvaW50ZXIgLSBjb3VudF9kZWxldGUgLSBjb3VudF9pbnNlcnQpID4gMCAmJlxuICAgICAgICAgICAgICAgICAgZGlmZnNbcG9pbnRlciAtIGNvdW50X2RlbGV0ZSAtIGNvdW50X2luc2VydCAtIDFdWzBdID09XG4gICAgICAgICAgICAgICAgICBESUZGX0VRVUFMKSB7XG4gICAgICAgICAgICAgICAgZGlmZnNbcG9pbnRlciAtIGNvdW50X2RlbGV0ZSAtIGNvdW50X2luc2VydCAtIDFdWzFdICs9XG4gICAgICAgICAgICAgICAgICAgIHRleHRfaW5zZXJ0LnN1YnN0cmluZygwLCBjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpZmZzLnNwbGljZSgwLCAwLCBbRElGRl9FUVVBTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfaW5zZXJ0LnN1YnN0cmluZygwLCBjb21tb25sZW5ndGgpXSk7XG4gICAgICAgICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRleHRfaW5zZXJ0ID0gdGV4dF9pbnNlcnQuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCk7XG4gICAgICAgICAgICAgIHRleHRfZGVsZXRlID0gdGV4dF9kZWxldGUuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGYWN0b3Igb3V0IGFueSBjb21tb24gc3VmZml4aWVzLlxuICAgICAgICAgICAgY29tbW9ubGVuZ3RoID0gZGlmZl9jb21tb25TdWZmaXgodGV4dF9pbnNlcnQsIHRleHRfZGVsZXRlKTtcbiAgICAgICAgICAgIGlmIChjb21tb25sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgZGlmZnNbcG9pbnRlcl1bMV0gPSB0ZXh0X2luc2VydC5zdWJzdHJpbmcodGV4dF9pbnNlcnQubGVuZ3RoIC1cbiAgICAgICAgICAgICAgICAgIGNvbW1vbmxlbmd0aCkgKyBkaWZmc1twb2ludGVyXVsxXTtcbiAgICAgICAgICAgICAgdGV4dF9pbnNlcnQgPSB0ZXh0X2luc2VydC5zdWJzdHJpbmcoMCwgdGV4dF9pbnNlcnQubGVuZ3RoIC1cbiAgICAgICAgICAgICAgICAgIGNvbW1vbmxlbmd0aCk7XG4gICAgICAgICAgICAgIHRleHRfZGVsZXRlID0gdGV4dF9kZWxldGUuc3Vic3RyaW5nKDAsIHRleHRfZGVsZXRlLmxlbmd0aCAtXG4gICAgICAgICAgICAgICAgICBjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBEZWxldGUgdGhlIG9mZmVuZGluZyByZWNvcmRzIGFuZCBhZGQgdGhlIG1lcmdlZCBvbmVzLlxuICAgICAgICAgIGlmIChjb3VudF9kZWxldGUgPT09IDApIHtcbiAgICAgICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyIC0gY291bnRfaW5zZXJ0LFxuICAgICAgICAgICAgICAgIGNvdW50X2RlbGV0ZSArIGNvdW50X2luc2VydCwgW0RJRkZfSU5TRVJULCB0ZXh0X2luc2VydF0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY291bnRfaW5zZXJ0ID09PSAwKSB7XG4gICAgICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciAtIGNvdW50X2RlbGV0ZSxcbiAgICAgICAgICAgICAgICBjb3VudF9kZWxldGUgKyBjb3VudF9pbnNlcnQsIFtESUZGX0RFTEVURSwgdGV4dF9kZWxldGVdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIgLSBjb3VudF9kZWxldGUgLSBjb3VudF9pbnNlcnQsXG4gICAgICAgICAgICAgICAgY291bnRfZGVsZXRlICsgY291bnRfaW5zZXJ0LCBbRElGRl9ERUxFVEUsIHRleHRfZGVsZXRlXSxcbiAgICAgICAgICAgICAgICBbRElGRl9JTlNFUlQsIHRleHRfaW5zZXJ0XSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvaW50ZXIgPSBwb2ludGVyIC0gY291bnRfZGVsZXRlIC0gY291bnRfaW5zZXJ0ICtcbiAgICAgICAgICAgICAgICAgICAgKGNvdW50X2RlbGV0ZSA/IDEgOiAwKSArIChjb3VudF9pbnNlcnQgPyAxIDogMCkgKyAxO1xuICAgICAgICB9IGVsc2UgaWYgKHBvaW50ZXIgIT09IDAgJiYgZGlmZnNbcG9pbnRlciAtIDFdWzBdID09IERJRkZfRVFVQUwpIHtcbiAgICAgICAgICAvLyBNZXJnZSB0aGlzIGVxdWFsaXR5IHdpdGggdGhlIHByZXZpb3VzIG9uZS5cbiAgICAgICAgICBkaWZmc1twb2ludGVyIC0gMV1bMV0gKz0gZGlmZnNbcG9pbnRlcl1bMV07XG4gICAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIsIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgfVxuICAgICAgICBjb3VudF9pbnNlcnQgPSAwO1xuICAgICAgICBjb3VudF9kZWxldGUgPSAwO1xuICAgICAgICB0ZXh0X2RlbGV0ZSA9ICcnO1xuICAgICAgICB0ZXh0X2luc2VydCA9ICcnO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGRpZmZzW2RpZmZzLmxlbmd0aCAtIDFdWzFdID09PSAnJykge1xuICAgIGRpZmZzLnBvcCgpOyAgLy8gUmVtb3ZlIHRoZSBkdW1teSBlbnRyeSBhdCB0aGUgZW5kLlxuICB9XG5cbiAgLy8gU2Vjb25kIHBhc3M6IGxvb2sgZm9yIHNpbmdsZSBlZGl0cyBzdXJyb3VuZGVkIG9uIGJvdGggc2lkZXMgYnkgZXF1YWxpdGllc1xuICAvLyB3aGljaCBjYW4gYmUgc2hpZnRlZCBzaWRld2F5cyB0byBlbGltaW5hdGUgYW4gZXF1YWxpdHkuXG4gIC8vIGUuZzogQTxpbnM+QkE8L2lucz5DIC0+IDxpbnM+QUI8L2lucz5BQ1xuICB2YXIgY2hhbmdlcyA9IGZhbHNlO1xuICBwb2ludGVyID0gMTtcbiAgLy8gSW50ZW50aW9uYWxseSBpZ25vcmUgdGhlIGZpcnN0IGFuZCBsYXN0IGVsZW1lbnQgKGRvbid0IG5lZWQgY2hlY2tpbmcpLlxuICB3aGlsZSAocG9pbnRlciA8IGRpZmZzLmxlbmd0aCAtIDEpIHtcbiAgICBpZiAoZGlmZnNbcG9pbnRlciAtIDFdWzBdID09IERJRkZfRVFVQUwgJiZcbiAgICAgICAgZGlmZnNbcG9pbnRlciArIDFdWzBdID09IERJRkZfRVFVQUwpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBzaW5nbGUgZWRpdCBzdXJyb3VuZGVkIGJ5IGVxdWFsaXRpZXMuXG4gICAgICBpZiAoZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCAtXG4gICAgICAgICAgZGlmZnNbcG9pbnRlciAtIDFdWzFdLmxlbmd0aCkgPT0gZGlmZnNbcG9pbnRlciAtIDFdWzFdKSB7XG4gICAgICAgIC8vIFNoaWZ0IHRoZSBlZGl0IG92ZXIgdGhlIHByZXZpb3VzIGVxdWFsaXR5LlxuICAgICAgICBkaWZmc1twb2ludGVyXVsxXSA9IGRpZmZzW3BvaW50ZXIgLSAxXVsxXSArXG4gICAgICAgICAgICBkaWZmc1twb2ludGVyXVsxXS5zdWJzdHJpbmcoMCwgZGlmZnNbcG9pbnRlcl1bMV0ubGVuZ3RoIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmc1twb2ludGVyIC0gMV1bMV0ubGVuZ3RoKTtcbiAgICAgICAgZGlmZnNbcG9pbnRlciArIDFdWzFdID0gZGlmZnNbcG9pbnRlciAtIDFdWzFdICsgZGlmZnNbcG9pbnRlciArIDFdWzFdO1xuICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciAtIDEsIDEpO1xuICAgICAgICBjaGFuZ2VzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKDAsIGRpZmZzW3BvaW50ZXIgKyAxXVsxXS5sZW5ndGgpID09XG4gICAgICAgICAgZGlmZnNbcG9pbnRlciArIDFdWzFdKSB7XG4gICAgICAgIC8vIFNoaWZ0IHRoZSBlZGl0IG92ZXIgdGhlIG5leHQgZXF1YWxpdHkuXG4gICAgICAgIGRpZmZzW3BvaW50ZXIgLSAxXVsxXSArPSBkaWZmc1twb2ludGVyICsgMV1bMV07XG4gICAgICAgIGRpZmZzW3BvaW50ZXJdWzFdID1cbiAgICAgICAgICAgIGRpZmZzW3BvaW50ZXJdWzFdLnN1YnN0cmluZyhkaWZmc1twb2ludGVyICsgMV1bMV0ubGVuZ3RoKSArXG4gICAgICAgICAgICBkaWZmc1twb2ludGVyICsgMV1bMV07XG4gICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyICsgMSwgMSk7XG4gICAgICAgIGNoYW5nZXMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBwb2ludGVyKys7XG4gIH1cbiAgLy8gSWYgc2hpZnRzIHdlcmUgbWFkZSwgdGhlIGRpZmYgbmVlZHMgcmVvcmRlcmluZyBhbmQgYW5vdGhlciBzaGlmdCBzd2VlcC5cbiAgaWYgKGNoYW5nZXMpIHtcbiAgICBkaWZmX2NsZWFudXBNZXJnZShkaWZmcyk7XG4gIH1cbn07XG5cblxudmFyIGRpZmYgPSBkaWZmX21haW47XG5kaWZmLklOU0VSVCA9IERJRkZfSU5TRVJUO1xuZGlmZi5ERUxFVEUgPSBESUZGX0RFTEVURTtcbmRpZmYuRVFVQUwgPSBESUZGX0VRVUFMO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRpZmY7XG5cbi8qXG4gKiBNb2RpZnkgYSBkaWZmIHN1Y2ggdGhhdCB0aGUgY3Vyc29yIHBvc2l0aW9uIHBvaW50cyB0byB0aGUgc3RhcnQgb2YgYSBjaGFuZ2U6XG4gKiBFLmcuXG4gKiAgIGN1cnNvcl9ub3JtYWxpemVfZGlmZihbW0RJRkZfRVFVQUwsICdhYmMnXV0sIDEpXG4gKiAgICAgPT4gWzEsIFtbRElGRl9FUVVBTCwgJ2EnXSwgW0RJRkZfRVFVQUwsICdiYyddXV1cbiAqICAgY3Vyc29yX25vcm1hbGl6ZV9kaWZmKFtbRElGRl9JTlNFUlQsICduZXcnXSwgW0RJRkZfREVMRVRFLCAneHl6J11dLCAyKVxuICogICAgID0+IFsyLCBbW0RJRkZfSU5TRVJULCAnbmV3J10sIFtESUZGX0RFTEVURSwgJ3h5J10sIFtESUZGX0RFTEVURSwgJ3onXV1dXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGlmZnMgQXJyYXkgb2YgZGlmZiB0dXBsZXNcbiAqIEBwYXJhbSB7SW50fSBjdXJzb3JfcG9zIFN1Z2dlc3RlZCBlZGl0IHBvc2l0aW9uLiBNdXN0IG5vdCBiZSBvdXQgb2YgYm91bmRzIVxuICogQHJldHVybiB7QXJyYXl9IEEgdHVwbGUgW2N1cnNvciBsb2NhdGlvbiBpbiB0aGUgbW9kaWZpZWQgZGlmZiwgbW9kaWZpZWQgZGlmZl1cbiAqL1xuZnVuY3Rpb24gY3Vyc29yX25vcm1hbGl6ZV9kaWZmIChkaWZmcywgY3Vyc29yX3Bvcykge1xuICBpZiAoY3Vyc29yX3BvcyA9PT0gMCkge1xuICAgIHJldHVybiBbRElGRl9FUVVBTCwgZGlmZnNdO1xuICB9XG4gIGZvciAodmFyIGN1cnJlbnRfcG9zID0gMCwgaSA9IDA7IGkgPCBkaWZmcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkID0gZGlmZnNbaV07XG4gICAgaWYgKGRbMF0gPT09IERJRkZfREVMRVRFIHx8IGRbMF0gPT09IERJRkZfRVFVQUwpIHtcbiAgICAgIHZhciBuZXh0X3BvcyA9IGN1cnJlbnRfcG9zICsgZFsxXS5sZW5ndGg7XG4gICAgICBpZiAoY3Vyc29yX3BvcyA9PT0gbmV4dF9wb3MpIHtcbiAgICAgICAgcmV0dXJuIFtpICsgMSwgZGlmZnNdO1xuICAgICAgfSBlbHNlIGlmIChjdXJzb3JfcG9zIDwgbmV4dF9wb3MpIHtcbiAgICAgICAgLy8gY29weSB0byBwcmV2ZW50IHNpZGUgZWZmZWN0c1xuICAgICAgICBkaWZmcyA9IGRpZmZzLnNsaWNlKCk7XG4gICAgICAgIC8vIHNwbGl0IGQgaW50byB0d28gZGlmZiBjaGFuZ2VzXG4gICAgICAgIHZhciBzcGxpdF9wb3MgPSBjdXJzb3JfcG9zIC0gY3VycmVudF9wb3M7XG4gICAgICAgIHZhciBkX2xlZnQgPSBbZFswXSwgZFsxXS5zbGljZSgwLCBzcGxpdF9wb3MpXTtcbiAgICAgICAgdmFyIGRfcmlnaHQgPSBbZFswXSwgZFsxXS5zbGljZShzcGxpdF9wb3MpXTtcbiAgICAgICAgZGlmZnMuc3BsaWNlKGksIDEsIGRfbGVmdCwgZF9yaWdodCk7XG4gICAgICAgIHJldHVybiBbaSArIDEsIGRpZmZzXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRfcG9zID0gbmV4dF9wb3M7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBFcnJvcignY3Vyc29yX3BvcyBpcyBvdXQgb2YgYm91bmRzIScpXG59XG5cbi8qXG4gKiBNb2RpZnkgYSBkaWZmIHN1Y2ggdGhhdCB0aGUgZWRpdCBwb3NpdGlvbiBpcyBcInNoaWZ0ZWRcIiB0byB0aGUgcHJvcG9zZWQgZWRpdCBsb2NhdGlvbiAoY3Vyc29yX3Bvc2l0aW9uKS5cbiAqXG4gKiBDYXNlIDEpXG4gKiAgIENoZWNrIGlmIGEgbmFpdmUgc2hpZnQgaXMgcG9zc2libGU6XG4gKiAgICAgWzAsIFhdLCBbIDEsIFldIC0+IFsgMSwgWV0sIFswLCBYXSAgICAoaWYgWCArIFkgPT09IFkgKyBYKVxuICogICAgIFswLCBYXSwgWy0xLCBZXSAtPiBbLTEsIFldLCBbMCwgWF0gICAgKGlmIFggKyBZID09PSBZICsgWCkgLSBob2xkcyBzYW1lIHJlc3VsdFxuICogQ2FzZSAyKVxuICogICBDaGVjayBpZiB0aGUgZm9sbG93aW5nIHNoaWZ0cyBhcmUgcG9zc2libGU6XG4gKiAgICAgWzAsICdwcmUnXSwgWyAxLCAncHJlZml4J10gLT4gWyAxLCAncHJlJ10sIFswLCAncHJlJ10sIFsgMSwgJ2ZpeCddXG4gKiAgICAgWzAsICdwcmUnXSwgWy0xLCAncHJlZml4J10gLT4gWy0xLCAncHJlJ10sIFswLCAncHJlJ10sIFstMSwgJ2ZpeCddXG4gKiAgICAgICAgIF4gICAgICAgICAgICBeXG4gKiAgICAgICAgIGQgICAgICAgICAgZF9uZXh0XG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGlmZnMgQXJyYXkgb2YgZGlmZiB0dXBsZXNcbiAqIEBwYXJhbSB7SW50fSBjdXJzb3JfcG9zIFN1Z2dlc3RlZCBlZGl0IHBvc2l0aW9uLiBNdXN0IG5vdCBiZSBvdXQgb2YgYm91bmRzIVxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzXG4gKi9cbmZ1bmN0aW9uIGZpeF9jdXJzb3IgKGRpZmZzLCBjdXJzb3JfcG9zKSB7XG4gIHZhciBub3JtID0gY3Vyc29yX25vcm1hbGl6ZV9kaWZmKGRpZmZzLCBjdXJzb3JfcG9zKTtcbiAgdmFyIG5kaWZmcyA9IG5vcm1bMV07XG4gIHZhciBjdXJzb3JfcG9pbnRlciA9IG5vcm1bMF07XG4gIHZhciBkID0gbmRpZmZzW2N1cnNvcl9wb2ludGVyXTtcbiAgdmFyIGRfbmV4dCA9IG5kaWZmc1tjdXJzb3JfcG9pbnRlciArIDFdO1xuXG4gIGlmIChkID09IG51bGwpIHtcbiAgICAvLyBUZXh0IHdhcyBkZWxldGVkIGZyb20gZW5kIG9mIG9yaWdpbmFsIHN0cmluZyxcbiAgICAvLyBjdXJzb3IgaXMgbm93IG91dCBvZiBib3VuZHMgaW4gbmV3IHN0cmluZ1xuICAgIHJldHVybiBkaWZmcztcbiAgfSBlbHNlIGlmIChkWzBdICE9PSBESUZGX0VRVUFMKSB7XG4gICAgLy8gQSBtb2RpZmljYXRpb24gaGFwcGVuZWQgYXQgdGhlIGN1cnNvciBsb2NhdGlvbi5cbiAgICAvLyBUaGlzIGlzIHRoZSBleHBlY3RlZCBvdXRjb21lLCBzbyB3ZSBjYW4gcmV0dXJuIHRoZSBvcmlnaW5hbCBkaWZmLlxuICAgIHJldHVybiBkaWZmcztcbiAgfSBlbHNlIHtcbiAgICBpZiAoZF9uZXh0ICE9IG51bGwgJiYgZFsxXSArIGRfbmV4dFsxXSA9PT0gZF9uZXh0WzFdICsgZFsxXSkge1xuICAgICAgLy8gQ2FzZSAxKVxuICAgICAgLy8gSXQgaXMgcG9zc2libGUgdG8gcGVyZm9ybSBhIG5haXZlIHNoaWZ0XG4gICAgICBuZGlmZnMuc3BsaWNlKGN1cnNvcl9wb2ludGVyLCAyLCBkX25leHQsIGQpXG4gICAgICByZXR1cm4gbWVyZ2VfdHVwbGVzKG5kaWZmcywgY3Vyc29yX3BvaW50ZXIsIDIpXG4gICAgfSBlbHNlIGlmIChkX25leHQgIT0gbnVsbCAmJiBkX25leHRbMV0uaW5kZXhPZihkWzFdKSA9PT0gMCkge1xuICAgICAgLy8gQ2FzZSAyKVxuICAgICAgLy8gZFsxXSBpcyBhIHByZWZpeCBvZiBkX25leHRbMV1cbiAgICAgIC8vIFdlIGNhbiBhc3N1bWUgdGhhdCBkX25leHRbMF0gIT09IDAsIHNpbmNlIGRbMF0gPT09IDBcbiAgICAgIC8vIFNoaWZ0IGVkaXQgbG9jYXRpb25zLi5cbiAgICAgIG5kaWZmcy5zcGxpY2UoY3Vyc29yX3BvaW50ZXIsIDIsIFtkX25leHRbMF0sIGRbMV1dLCBbMCwgZFsxXV0pO1xuICAgICAgdmFyIHN1ZmZpeCA9IGRfbmV4dFsxXS5zbGljZShkWzFdLmxlbmd0aCk7XG4gICAgICBpZiAoc3VmZml4Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgbmRpZmZzLnNwbGljZShjdXJzb3JfcG9pbnRlciArIDIsIDAsIFtkX25leHRbMF0sIHN1ZmZpeF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lcmdlX3R1cGxlcyhuZGlmZnMsIGN1cnNvcl9wb2ludGVyLCAzKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOb3QgcG9zc2libGUgdG8gcGVyZm9ybSBhbnkgbW9kaWZpY2F0aW9uXG4gICAgICByZXR1cm4gZGlmZnM7XG4gICAgfVxuICB9XG59XG5cbi8qXG4gKiBDaGVjayBkaWZmIGRpZCBub3Qgc3BsaXQgc3Vycm9nYXRlIHBhaXJzLlxuICogRXguIFswLCAnXFx1RDgzRCddLCBbLTEsICdcXHVEQzM2J10sIFsxLCAnXFx1REMyRiddIC0+IFstMSwgJ1xcdUQ4M0RcXHVEQzM2J10sIFsxLCAnXFx1RDgzRFxcdURDMkYnXVxuICogICAgICdcXHVEODNEXFx1REMzNicgPT09ICfwn5C2JywgJ1xcdUQ4M0RcXHVEQzJGJyA9PT0gJ/CfkK8nXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGlmZnMgQXJyYXkgb2YgZGlmZiB0dXBsZXNcbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBkaWZmIHR1cGxlc1xuICovXG5mdW5jdGlvbiBmaXhfZW1vamkgKGRpZmZzKSB7XG4gIHZhciBjb21wYWN0ID0gZmFsc2U7XG4gIHZhciBzdGFydHNfd2l0aF9wYWlyX2VuZCA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckNvZGVBdCgwKSA+PSAweERDMDAgJiYgc3RyLmNoYXJDb2RlQXQoMCkgPD0gMHhERkZGO1xuICB9XG4gIHZhciBlbmRzX3dpdGhfcGFpcl9zdGFydCA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckNvZGVBdChzdHIubGVuZ3RoLTEpID49IDB4RDgwMCAmJiBzdHIuY2hhckNvZGVBdChzdHIubGVuZ3RoLTEpIDw9IDB4REJGRjtcbiAgfVxuICBmb3IgKHZhciBpID0gMjsgaSA8IGRpZmZzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGRpZmZzW2ktMl1bMF0gPT09IERJRkZfRVFVQUwgJiYgZW5kc193aXRoX3BhaXJfc3RhcnQoZGlmZnNbaS0yXVsxXSkgJiZcbiAgICAgICAgZGlmZnNbaS0xXVswXSA9PT0gRElGRl9ERUxFVEUgJiYgc3RhcnRzX3dpdGhfcGFpcl9lbmQoZGlmZnNbaS0xXVsxXSkgJiZcbiAgICAgICAgZGlmZnNbaV1bMF0gPT09IERJRkZfSU5TRVJUICYmIHN0YXJ0c193aXRoX3BhaXJfZW5kKGRpZmZzW2ldWzFdKSkge1xuICAgICAgY29tcGFjdCA9IHRydWU7XG5cbiAgICAgIGRpZmZzW2ktMV1bMV0gPSBkaWZmc1tpLTJdWzFdLnNsaWNlKC0xKSArIGRpZmZzW2ktMV1bMV07XG4gICAgICBkaWZmc1tpXVsxXSA9IGRpZmZzW2ktMl1bMV0uc2xpY2UoLTEpICsgZGlmZnNbaV1bMV07XG5cbiAgICAgIGRpZmZzW2ktMl1bMV0gPSBkaWZmc1tpLTJdWzFdLnNsaWNlKDAsIC0xKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFjb21wYWN0KSB7XG4gICAgcmV0dXJuIGRpZmZzO1xuICB9XG4gIHZhciBmaXhlZF9kaWZmcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpZmZzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGRpZmZzW2ldWzFdLmxlbmd0aCA+IDApIHtcbiAgICAgIGZpeGVkX2RpZmZzLnB1c2goZGlmZnNbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZml4ZWRfZGlmZnM7XG59XG5cbi8qXG4gKiBUcnkgdG8gbWVyZ2UgdHVwbGVzIHdpdGggdGhlaXIgbmVpZ2JvcnMgaW4gYSBnaXZlbiByYW5nZS5cbiAqIEUuZy4gWzAsICdhJ10sIFswLCAnYiddIC0+IFswLCAnYWInXVxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRpZmZzIEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICogQHBhcmFtIHtJbnR9IHN0YXJ0IFBvc2l0aW9uIG9mIHRoZSBmaXJzdCBlbGVtZW50IHRvIG1lcmdlIChkaWZmc1tzdGFydF0gaXMgYWxzbyBtZXJnZWQgd2l0aCBkaWZmc1tzdGFydCAtIDFdKS5cbiAqIEBwYXJhbSB7SW50fSBsZW5ndGggTnVtYmVyIG9mIGNvbnNlY3V0aXZlIGVsZW1lbnRzIHRvIGNoZWNrLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIG1lcmdlZCBkaWZmIHR1cGxlcy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VfdHVwbGVzIChkaWZmcywgc3RhcnQsIGxlbmd0aCkge1xuICAvLyBDaGVjayBmcm9tIChzdGFydC0xKSB0byAoc3RhcnQrbGVuZ3RoKS5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0ICsgbGVuZ3RoIC0gMTsgaSA+PSAwICYmIGkgPj0gc3RhcnQgLSAxOyBpLS0pIHtcbiAgICBpZiAoaSArIDEgPCBkaWZmcy5sZW5ndGgpIHtcbiAgICAgIHZhciBsZWZ0X2QgPSBkaWZmc1tpXTtcbiAgICAgIHZhciByaWdodF9kID0gZGlmZnNbaSsxXTtcbiAgICAgIGlmIChsZWZ0X2RbMF0gPT09IHJpZ2h0X2RbMV0pIHtcbiAgICAgICAgZGlmZnMuc3BsaWNlKGksIDIsIFtsZWZ0X2RbMF0sIGxlZnRfZFsxXSArIHJpZ2h0X2RbMV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRpZmZzO1xufVxuIiwidmFyIGRpZmYgPSByZXF1aXJlKCdmYXN0LWRpZmYnKTtcbnZhciBlcXVhbCA9IHJlcXVpcmUoJ2RlZXAtZXF1YWwnKTtcbnZhciBleHRlbmQgPSByZXF1aXJlKCdleHRlbmQnKTtcbnZhciBvcCA9IHJlcXVpcmUoJy4vb3AnKTtcblxuXG52YXIgTlVMTF9DSEFSQUNURVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDApOyAgLy8gUGxhY2Vob2xkZXIgY2hhciBmb3IgZW1iZWQgaW4gZGlmZigpXG5cblxudmFyIERlbHRhID0gZnVuY3Rpb24gKG9wcykge1xuICAvLyBBc3N1bWUgd2UgYXJlIGdpdmVuIGEgd2VsbCBmb3JtZWQgb3BzXG4gIGlmIChBcnJheS5pc0FycmF5KG9wcykpIHtcbiAgICB0aGlzLm9wcyA9IG9wcztcbiAgfSBlbHNlIGlmIChvcHMgIT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KG9wcy5vcHMpKSB7XG4gICAgdGhpcy5vcHMgPSBvcHMub3BzO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3BzID0gW107XG4gIH1cbn07XG5cblxuRGVsdGEucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uICh0ZXh0LCBhdHRyaWJ1dGVzKSB7XG4gIHZhciBuZXdPcCA9IHt9O1xuICBpZiAodGV4dC5sZW5ndGggPT09IDApIHJldHVybiB0aGlzO1xuICBuZXdPcC5pbnNlcnQgPSB0ZXh0O1xuICBpZiAoYXR0cmlidXRlcyAhPSBudWxsICYmIHR5cGVvZiBhdHRyaWJ1dGVzID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwKSB7XG4gICAgbmV3T3AuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gIH1cbiAgcmV0dXJuIHRoaXMucHVzaChuZXdPcCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICBpZiAobGVuZ3RoIDw9IDApIHJldHVybiB0aGlzO1xuICByZXR1cm4gdGhpcy5wdXNoKHsgJ2RlbGV0ZSc6IGxlbmd0aCB9KTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5yZXRhaW4gPSBmdW5jdGlvbiAobGVuZ3RoLCBhdHRyaWJ1dGVzKSB7XG4gIGlmIChsZW5ndGggPD0gMCkgcmV0dXJuIHRoaXM7XG4gIHZhciBuZXdPcCA9IHsgcmV0YWluOiBsZW5ndGggfTtcbiAgaWYgKGF0dHJpYnV0ZXMgIT0gbnVsbCAmJiB0eXBlb2YgYXR0cmlidXRlcyA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoID4gMCkge1xuICAgIG5ld09wLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICB9XG4gIHJldHVybiB0aGlzLnB1c2gobmV3T3ApO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAobmV3T3ApIHtcbiAgdmFyIGluZGV4ID0gdGhpcy5vcHMubGVuZ3RoO1xuICB2YXIgbGFzdE9wID0gdGhpcy5vcHNbaW5kZXggLSAxXTtcbiAgbmV3T3AgPSBleHRlbmQodHJ1ZSwge30sIG5ld09wKTtcbiAgaWYgKHR5cGVvZiBsYXN0T3AgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHR5cGVvZiBuZXdPcFsnZGVsZXRlJ10gPT09ICdudW1iZXInICYmIHR5cGVvZiBsYXN0T3BbJ2RlbGV0ZSddID09PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5vcHNbaW5kZXggLSAxXSA9IHsgJ2RlbGV0ZSc6IGxhc3RPcFsnZGVsZXRlJ10gKyBuZXdPcFsnZGVsZXRlJ10gfTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBTaW5jZSBpdCBkb2VzIG5vdCBtYXR0ZXIgaWYgd2UgaW5zZXJ0IGJlZm9yZSBvciBhZnRlciBkZWxldGluZyBhdCB0aGUgc2FtZSBpbmRleCxcbiAgICAvLyBhbHdheXMgcHJlZmVyIHRvIGluc2VydCBmaXJzdFxuICAgIGlmICh0eXBlb2YgbGFzdE9wWydkZWxldGUnXSA9PT0gJ251bWJlcicgJiYgbmV3T3AuaW5zZXJ0ICE9IG51bGwpIHtcbiAgICAgIGluZGV4IC09IDE7XG4gICAgICBsYXN0T3AgPSB0aGlzLm9wc1tpbmRleCAtIDFdO1xuICAgICAgaWYgKHR5cGVvZiBsYXN0T3AgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRoaXMub3BzLnVuc2hpZnQobmV3T3ApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVxdWFsKG5ld09wLmF0dHJpYnV0ZXMsIGxhc3RPcC5hdHRyaWJ1dGVzKSkge1xuICAgICAgaWYgKHR5cGVvZiBuZXdPcC5pbnNlcnQgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBsYXN0T3AuaW5zZXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLm9wc1tpbmRleCAtIDFdID0geyBpbnNlcnQ6IGxhc3RPcC5pbnNlcnQgKyBuZXdPcC5pbnNlcnQgfTtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdPcC5hdHRyaWJ1dGVzID09PSAnb2JqZWN0JykgdGhpcy5vcHNbaW5kZXggLSAxXS5hdHRyaWJ1dGVzID0gbmV3T3AuYXR0cmlidXRlc1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5ld09wLnJldGFpbiA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGxhc3RPcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHRoaXMub3BzW2luZGV4IC0gMV0gPSB7IHJldGFpbjogbGFzdE9wLnJldGFpbiArIG5ld09wLnJldGFpbiB9O1xuICAgICAgICBpZiAodHlwZW9mIG5ld09wLmF0dHJpYnV0ZXMgPT09ICdvYmplY3QnKSB0aGlzLm9wc1tpbmRleCAtIDFdLmF0dHJpYnV0ZXMgPSBuZXdPcC5hdHRyaWJ1dGVzXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaW5kZXggPT09IHRoaXMub3BzLmxlbmd0aCkge1xuICAgIHRoaXMub3BzLnB1c2gobmV3T3ApO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3BzLnNwbGljZShpbmRleCwgMCwgbmV3T3ApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmNob3AgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsYXN0T3AgPSB0aGlzLm9wc1t0aGlzLm9wcy5sZW5ndGggLSAxXTtcbiAgaWYgKGxhc3RPcCAmJiBsYXN0T3AucmV0YWluICYmICFsYXN0T3AuYXR0cmlidXRlcykge1xuICAgIHRoaXMub3BzLnBvcCgpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcbiAgcmV0dXJuIHRoaXMub3BzLmZpbHRlcihwcmVkaWNhdGUpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gIHRoaXMub3BzLmZvckVhY2gocHJlZGljYXRlKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gIHJldHVybiB0aGlzLm9wcy5tYXAocHJlZGljYXRlKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5wYXJ0aXRpb24gPSBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gIHZhciBwYXNzZWQgPSBbXSwgZmFpbGVkID0gW107XG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbihvcCkge1xuICAgIHZhciB0YXJnZXQgPSBwcmVkaWNhdGUob3ApID8gcGFzc2VkIDogZmFpbGVkO1xuICAgIHRhcmdldC5wdXNoKG9wKTtcbiAgfSk7XG4gIHJldHVybiBbcGFzc2VkLCBmYWlsZWRdO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChwcmVkaWNhdGUsIGluaXRpYWwpIHtcbiAgcmV0dXJuIHRoaXMub3BzLnJlZHVjZShwcmVkaWNhdGUsIGluaXRpYWwpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmNoYW5nZUxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucmVkdWNlKGZ1bmN0aW9uIChsZW5ndGgsIGVsZW0pIHtcbiAgICBpZiAoZWxlbS5pbnNlcnQpIHtcbiAgICAgIHJldHVybiBsZW5ndGggKyBvcC5sZW5ndGgoZWxlbSk7XG4gICAgfSBlbHNlIGlmIChlbGVtLmRlbGV0ZSkge1xuICAgICAgcmV0dXJuIGxlbmd0aCAtIGVsZW0uZGVsZXRlO1xuICAgIH1cbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9LCAwKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnJlZHVjZShmdW5jdGlvbiAobGVuZ3RoLCBlbGVtKSB7XG4gICAgcmV0dXJuIGxlbmd0aCArIG9wLmxlbmd0aChlbGVtKTtcbiAgfSwgMCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJykgZW5kID0gSW5maW5pdHk7XG4gIHZhciBvcHMgPSBbXTtcbiAgdmFyIGl0ZXIgPSBvcC5pdGVyYXRvcih0aGlzLm9wcyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHdoaWxlIChpbmRleCA8IGVuZCAmJiBpdGVyLmhhc05leHQoKSkge1xuICAgIHZhciBuZXh0T3A7XG4gICAgaWYgKGluZGV4IDwgc3RhcnQpIHtcbiAgICAgIG5leHRPcCA9IGl0ZXIubmV4dChzdGFydCAtIGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dE9wID0gaXRlci5uZXh0KGVuZCAtIGluZGV4KTtcbiAgICAgIG9wcy5wdXNoKG5leHRPcCk7XG4gICAgfVxuICAgIGluZGV4ICs9IG9wLmxlbmd0aChuZXh0T3ApO1xuICB9XG4gIHJldHVybiBuZXcgRGVsdGEob3BzKTtcbn07XG5cblxuRGVsdGEucHJvdG90eXBlLmNvbXBvc2UgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgdmFyIHRoaXNJdGVyID0gb3AuaXRlcmF0b3IodGhpcy5vcHMpO1xuICB2YXIgb3RoZXJJdGVyID0gb3AuaXRlcmF0b3Iob3RoZXIub3BzKTtcbiAgdmFyIGRlbHRhID0gbmV3IERlbHRhKCk7XG4gIHdoaWxlICh0aGlzSXRlci5oYXNOZXh0KCkgfHwgb3RoZXJJdGVyLmhhc05leHQoKSkge1xuICAgIGlmIChvdGhlckl0ZXIucGVla1R5cGUoKSA9PT0gJ2luc2VydCcpIHtcbiAgICAgIGRlbHRhLnB1c2gob3RoZXJJdGVyLm5leHQoKSk7XG4gICAgfSBlbHNlIGlmICh0aGlzSXRlci5wZWVrVHlwZSgpID09PSAnZGVsZXRlJykge1xuICAgICAgZGVsdGEucHVzaCh0aGlzSXRlci5uZXh0KCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGVuZ3RoID0gTWF0aC5taW4odGhpc0l0ZXIucGVla0xlbmd0aCgpLCBvdGhlckl0ZXIucGVla0xlbmd0aCgpKTtcbiAgICAgIHZhciB0aGlzT3AgPSB0aGlzSXRlci5uZXh0KGxlbmd0aCk7XG4gICAgICB2YXIgb3RoZXJPcCA9IG90aGVySXRlci5uZXh0KGxlbmd0aCk7XG4gICAgICBpZiAodHlwZW9mIG90aGVyT3AucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgICB2YXIgbmV3T3AgPSB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzT3AucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIG5ld09wLnJldGFpbiA9IGxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdPcC5pbnNlcnQgPSB0aGlzT3AuaW5zZXJ0O1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXNlcnZlIG51bGwgd2hlbiBjb21wb3Npbmcgd2l0aCBhIHJldGFpbiwgb3RoZXJ3aXNlIHJlbW92ZSBpdCBmb3IgaW5zZXJ0c1xuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IG9wLmF0dHJpYnV0ZXMuY29tcG9zZSh0aGlzT3AuYXR0cmlidXRlcywgb3RoZXJPcC5hdHRyaWJ1dGVzLCB0eXBlb2YgdGhpc09wLnJldGFpbiA9PT0gJ251bWJlcicpO1xuICAgICAgICBpZiAoYXR0cmlidXRlcykgbmV3T3AuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIGRlbHRhLnB1c2gobmV3T3ApO1xuICAgICAgLy8gT3RoZXIgb3Agc2hvdWxkIGJlIGRlbGV0ZSwgd2UgY291bGQgYmUgYW4gaW5zZXJ0IG9yIHJldGFpblxuICAgICAgLy8gSW5zZXJ0ICsgZGVsZXRlIGNhbmNlbHMgb3V0XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvdGhlck9wWydkZWxldGUnXSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHRoaXNPcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgIGRlbHRhLnB1c2gob3RoZXJPcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWx0YS5jaG9wKCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIHZhciBkZWx0YSA9IG5ldyBEZWx0YSh0aGlzLm9wcy5zbGljZSgpKTtcbiAgaWYgKG90aGVyLm9wcy5sZW5ndGggPiAwKSB7XG4gICAgZGVsdGEucHVzaChvdGhlci5vcHNbMF0pO1xuICAgIGRlbHRhLm9wcyA9IGRlbHRhLm9wcy5jb25jYXQob3RoZXIub3BzLnNsaWNlKDEpKTtcbiAgfVxuICByZXR1cm4gZGVsdGE7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuZGlmZiA9IGZ1bmN0aW9uIChvdGhlciwgaW5kZXgpIHtcbiAgaWYgKHRoaXMub3BzID09PSBvdGhlci5vcHMpIHtcbiAgICByZXR1cm4gbmV3IERlbHRhKCk7XG4gIH1cbiAgdmFyIHN0cmluZ3MgPSBbdGhpcywgb3RoZXJdLm1hcChmdW5jdGlvbiAoZGVsdGEpIHtcbiAgICByZXR1cm4gZGVsdGEubWFwKGZ1bmN0aW9uIChvcCkge1xuICAgICAgaWYgKG9wLmluc2VydCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb3AuaW5zZXJ0ID09PSAnc3RyaW5nJyA/IG9wLmluc2VydCA6IE5VTExfQ0hBUkFDVEVSO1xuICAgICAgfVxuICAgICAgdmFyIHByZXAgPSAoZGVsdGEgPT09IG90aGVyKSA/ICdvbicgOiAnd2l0aCc7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpZmYoKSBjYWxsZWQgJyArIHByZXAgKyAnIG5vbi1kb2N1bWVudCcpO1xuICAgIH0pLmpvaW4oJycpO1xuICB9KTtcbiAgdmFyIGRlbHRhID0gbmV3IERlbHRhKCk7XG4gIHZhciBkaWZmUmVzdWx0ID0gZGlmZihzdHJpbmdzWzBdLCBzdHJpbmdzWzFdLCBpbmRleCk7XG4gIHZhciB0aGlzSXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIG90aGVySXRlciA9IG9wLml0ZXJhdG9yKG90aGVyLm9wcyk7XG4gIGRpZmZSZXN1bHQuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgdmFyIGxlbmd0aCA9IGNvbXBvbmVudFsxXS5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBvcExlbmd0aCA9IDA7XG4gICAgICBzd2l0Y2ggKGNvbXBvbmVudFswXSkge1xuICAgICAgICBjYXNlIGRpZmYuSU5TRVJUOlxuICAgICAgICAgIG9wTGVuZ3RoID0gTWF0aC5taW4ob3RoZXJJdGVyLnBlZWtMZW5ndGgoKSwgbGVuZ3RoKTtcbiAgICAgICAgICBkZWx0YS5wdXNoKG90aGVySXRlci5uZXh0KG9wTGVuZ3RoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZGlmZi5ERUxFVEU6XG4gICAgICAgICAgb3BMZW5ndGggPSBNYXRoLm1pbihsZW5ndGgsIHRoaXNJdGVyLnBlZWtMZW5ndGgoKSk7XG4gICAgICAgICAgdGhpc0l0ZXIubmV4dChvcExlbmd0aCk7XG4gICAgICAgICAgZGVsdGFbJ2RlbGV0ZSddKG9wTGVuZ3RoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBkaWZmLkVRVUFMOlxuICAgICAgICAgIG9wTGVuZ3RoID0gTWF0aC5taW4odGhpc0l0ZXIucGVla0xlbmd0aCgpLCBvdGhlckl0ZXIucGVla0xlbmd0aCgpLCBsZW5ndGgpO1xuICAgICAgICAgIHZhciB0aGlzT3AgPSB0aGlzSXRlci5uZXh0KG9wTGVuZ3RoKTtcbiAgICAgICAgICB2YXIgb3RoZXJPcCA9IG90aGVySXRlci5uZXh0KG9wTGVuZ3RoKTtcbiAgICAgICAgICBpZiAoZXF1YWwodGhpc09wLmluc2VydCwgb3RoZXJPcC5pbnNlcnQpKSB7XG4gICAgICAgICAgICBkZWx0YS5yZXRhaW4ob3BMZW5ndGgsIG9wLmF0dHJpYnV0ZXMuZGlmZih0aGlzT3AuYXR0cmlidXRlcywgb3RoZXJPcC5hdHRyaWJ1dGVzKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbHRhLnB1c2gob3RoZXJPcClbJ2RlbGV0ZSddKG9wTGVuZ3RoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBsZW5ndGggLT0gb3BMZW5ndGg7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRlbHRhLmNob3AoKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5lYWNoTGluZSA9IGZ1bmN0aW9uIChwcmVkaWNhdGUsIG5ld2xpbmUpIHtcbiAgbmV3bGluZSA9IG5ld2xpbmUgfHwgJ1xcbic7XG4gIHZhciBpdGVyID0gb3AuaXRlcmF0b3IodGhpcy5vcHMpO1xuICB2YXIgbGluZSA9IG5ldyBEZWx0YSgpO1xuICB2YXIgaSA9IDA7XG4gIHdoaWxlIChpdGVyLmhhc05leHQoKSkge1xuICAgIGlmIChpdGVyLnBlZWtUeXBlKCkgIT09ICdpbnNlcnQnKSByZXR1cm47XG4gICAgdmFyIHRoaXNPcCA9IGl0ZXIucGVlaygpO1xuICAgIHZhciBzdGFydCA9IG9wLmxlbmd0aCh0aGlzT3ApIC0gaXRlci5wZWVrTGVuZ3RoKCk7XG4gICAgdmFyIGluZGV4ID0gdHlwZW9mIHRoaXNPcC5pbnNlcnQgPT09ICdzdHJpbmcnID9cbiAgICAgIHRoaXNPcC5pbnNlcnQuaW5kZXhPZihuZXdsaW5lLCBzdGFydCkgLSBzdGFydCA6IC0xO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIGxpbmUucHVzaChpdGVyLm5leHQoKSk7XG4gICAgfSBlbHNlIGlmIChpbmRleCA+IDApIHtcbiAgICAgIGxpbmUucHVzaChpdGVyLm5leHQoaW5kZXgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByZWRpY2F0ZShsaW5lLCBpdGVyLm5leHQoMSkuYXR0cmlidXRlcyB8fCB7fSwgaSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGkgKz0gMTtcbiAgICAgIGxpbmUgPSBuZXcgRGVsdGEoKTtcbiAgICB9XG4gIH1cbiAgaWYgKGxpbmUubGVuZ3RoKCkgPiAwKSB7XG4gICAgcHJlZGljYXRlKGxpbmUsIHt9LCBpKTtcbiAgfVxufTtcblxuRGVsdGEucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIChvdGhlciwgcHJpb3JpdHkpIHtcbiAgcHJpb3JpdHkgPSAhIXByaW9yaXR5O1xuICBpZiAodHlwZW9mIG90aGVyID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybVBvc2l0aW9uKG90aGVyLCBwcmlvcml0eSk7XG4gIH1cbiAgdmFyIHRoaXNJdGVyID0gb3AuaXRlcmF0b3IodGhpcy5vcHMpO1xuICB2YXIgb3RoZXJJdGVyID0gb3AuaXRlcmF0b3Iob3RoZXIub3BzKTtcbiAgdmFyIGRlbHRhID0gbmV3IERlbHRhKCk7XG4gIHdoaWxlICh0aGlzSXRlci5oYXNOZXh0KCkgfHwgb3RoZXJJdGVyLmhhc05leHQoKSkge1xuICAgIGlmICh0aGlzSXRlci5wZWVrVHlwZSgpID09PSAnaW5zZXJ0JyAmJiAocHJpb3JpdHkgfHwgb3RoZXJJdGVyLnBlZWtUeXBlKCkgIT09ICdpbnNlcnQnKSkge1xuICAgICAgZGVsdGEucmV0YWluKG9wLmxlbmd0aCh0aGlzSXRlci5uZXh0KCkpKTtcbiAgICB9IGVsc2UgaWYgKG90aGVySXRlci5wZWVrVHlwZSgpID09PSAnaW5zZXJ0Jykge1xuICAgICAgZGVsdGEucHVzaChvdGhlckl0ZXIubmV4dCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWluKHRoaXNJdGVyLnBlZWtMZW5ndGgoKSwgb3RoZXJJdGVyLnBlZWtMZW5ndGgoKSk7XG4gICAgICB2YXIgdGhpc09wID0gdGhpc0l0ZXIubmV4dChsZW5ndGgpO1xuICAgICAgdmFyIG90aGVyT3AgPSBvdGhlckl0ZXIubmV4dChsZW5ndGgpO1xuICAgICAgaWYgKHRoaXNPcFsnZGVsZXRlJ10pIHtcbiAgICAgICAgLy8gT3VyIGRlbGV0ZSBlaXRoZXIgbWFrZXMgdGhlaXIgZGVsZXRlIHJlZHVuZGFudCBvciByZW1vdmVzIHRoZWlyIHJldGFpblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAob3RoZXJPcFsnZGVsZXRlJ10pIHtcbiAgICAgICAgZGVsdGEucHVzaChvdGhlck9wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdlIHJldGFpbiBlaXRoZXIgdGhlaXIgcmV0YWluIG9yIGluc2VydFxuICAgICAgICBkZWx0YS5yZXRhaW4obGVuZ3RoLCBvcC5hdHRyaWJ1dGVzLnRyYW5zZm9ybSh0aGlzT3AuYXR0cmlidXRlcywgb3RoZXJPcC5hdHRyaWJ1dGVzLCBwcmlvcml0eSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGVsdGEuY2hvcCgpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnRyYW5zZm9ybVBvc2l0aW9uID0gZnVuY3Rpb24gKGluZGV4LCBwcmlvcml0eSkge1xuICBwcmlvcml0eSA9ICEhcHJpb3JpdHk7XG4gIHZhciB0aGlzSXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIG9mZnNldCA9IDA7XG4gIHdoaWxlICh0aGlzSXRlci5oYXNOZXh0KCkgJiYgb2Zmc2V0IDw9IGluZGV4KSB7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXNJdGVyLnBlZWtMZW5ndGgoKTtcbiAgICB2YXIgbmV4dFR5cGUgPSB0aGlzSXRlci5wZWVrVHlwZSgpO1xuICAgIHRoaXNJdGVyLm5leHQoKTtcbiAgICBpZiAobmV4dFR5cGUgPT09ICdkZWxldGUnKSB7XG4gICAgICBpbmRleCAtPSBNYXRoLm1pbihsZW5ndGgsIGluZGV4IC0gb2Zmc2V0KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAobmV4dFR5cGUgPT09ICdpbnNlcnQnICYmIChvZmZzZXQgPCBpbmRleCB8fCAhcHJpb3JpdHkpKSB7XG4gICAgICBpbmRleCArPSBsZW5ndGg7XG4gICAgfVxuICAgIG9mZnNldCArPSBsZW5ndGg7XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IERlbHRhO1xuIiwiaW1wb3J0IERlbHRhIGZyb20gJ3F1aWxsLWRlbHRhJ1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXG5pbXBvcnQgRW1iZWRJdGVtIGZyb20gJy4vY29tcG9uZW50cy9FbWJlZEl0ZW0udnVlJ1xuVnVlLmNvbXBvbmVudChFbWJlZEl0ZW0pXG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuICAvLyBPbmx5IG1hdGNoIHNpbmdsZSBsaW5lIHVybHNcbiAgdXJsUmVnZXg6IC9eaHR0cHM/OlxcL1xcL1tcXFNdKyQvZ21cbn1cblxuY2xhc3MgVXJsRW1iZWRzIHtcbiAgY29uc3RydWN0b3IgKHF1aWxsLCBvcHRpb25zKSB7XG4gICAgdGhpcy5xdWlsbCA9IHF1aWxsXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgICB0aGlzLm9wdGlvbnMgPSB7Li4uZGVmYXVsdHMsIC4uLm9wdGlvbnN9XG4gICAgdGhpcy5yZWdpc3RlclR5cGVMaXN0ZW5lcigpXG4gICAgdGhpcy5yZWdpc3RlclBhc3RlTGlzdGVuZXIoKVxuICB9XG4gIHJlZ2lzdGVyUGFzdGVMaXN0ZW5lciAoKSB7XG4gICAgdGhpcy5xdWlsbC5jbGlwYm9hcmQuYWRkTWF0Y2hlcihOb2RlLlRFWFRfTk9ERSwgKG5vZGUsIGRlbHRhKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIG5vZGUuZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBjb25zdCBtYXRjaGVzID0gbm9kZS5kYXRhLm1hdGNoKHRoaXMub3B0aW9ucy51cmxSZWdleClcbiAgICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBuZXdEZWx0YSA9IG5ldyBEZWx0YSgpXG4gICAgICAgIGxldCBzdHIgPSBub2RlLmRhdGFcbiAgICAgICAgbWF0Y2hlcy5mb3JFYWNoKHVybCA9PiB7XG4gICAgICAgICAgY29uc3Qgc3BsaXQgPSBzdHIuc3BsaXQodXJsKVxuICAgICAgICAgIGNvbnN0IGJlZm9yZUxpbmsgPSBzcGxpdC5zaGlmdCgpXG4gICAgICAgICAgY29uc3QgdXJsRW1iZWQgPSB0aGlzLmJ1aWxkVXJsRW1iZWQodXJsKVxuICAgICAgICAgIG5ld0RlbHRhLmluc2VydChiZWZvcmVMaW5rKVxuICAgICAgICAgIG5ld0RlbHRhLmluc2VydCh1cmxFbWJlZClcbiAgICAgICAgICBzdHIgPSBzcGxpdC5qb2luKHVybClcbiAgICAgICAgfSlcbiAgICAgICAgbmV3RGVsdGEuaW5zZXJ0KHN0cilcbiAgICAgICAgZGVsdGEub3BzID0gbmV3RGVsdGEub3BzXG4gICAgICB9XG4gICAgICByZXR1cm4gZGVsdGFcbiAgICB9KVxuICB9XG4gIHJlZ2lzdGVyVHlwZUxpc3RlbmVyICgpIHtcbiAgICB0aGlzLnF1aWxsLm9uKCd0ZXh0LWNoYW5nZScsIChkZWx0YSkgPT4ge1xuICAgICAgbGV0IG9wcyA9IGRlbHRhLm9wc1xuICAgICAgLy8gT25seSByZXR1cm4gdHJ1ZSwgaWYgbGFzdCBvcGVyYXRpb24gaW5jbHVkZXMgd2hpdGVzcGFjZSBpbnNlcnRzXG4gICAgICAvLyBFcXVpdmFsZW50IHRvIGxpc3RlbmluZyBmb3IgZW50ZXIsIHRhYiBvciBzcGFjZVxuICAgICAgaWYgKCFvcHMgfHwgb3BzLmxlbmd0aCA8IDEgfHwgb3BzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBsZXQgbGFzdE9wID0gb3BzW29wcy5sZW5ndGggLSAxXVxuICAgICAgaWYgKCFsYXN0T3AuaW5zZXJ0IHx8IHR5cGVvZiBsYXN0T3AuaW5zZXJ0ICE9PSAnc3RyaW5nJyB8fCAhbGFzdE9wLmluc2VydC5tYXRjaCgvXFxzLykpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB0aGlzLmNoZWNrVGV4dEZvclVybCgpXG4gICAgfSlcbiAgfVxuICBjaGVja1RleHRGb3JVcmwgKCkge1xuICAgIGxldCBzZWwgPSB0aGlzLnF1aWxsLmdldFNlbGVjdGlvbigpXG4gICAgaWYgKCFzZWwpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBsZXQgW2xlYWZdID0gdGhpcy5xdWlsbC5nZXRMZWFmKHNlbC5pbmRleClcbiAgICBpZiAoIWxlYWYudGV4dCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGxlYWYudGV4dClcbiAgICBjb25zdCBtYXRjaGVzID0gbGVhZi50ZXh0Lm1hdGNoKHRoaXMub3B0aW9ucy51cmxSZWdleClcbiAgICBpZiAoIW1hdGNoZXMgfHwgIW1hdGNoZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgbGV0IHN0ZXBzQmFjayA9IGxlYWYudGV4dC5sZW5ndGhcbiAgICBsZXQgaW5kZXggPSBzZWwuaW5kZXggLSBzdGVwc0JhY2tcbiAgICB0aGlzLnRleHRUb1VybChpbmRleCwgbWF0Y2hlc1swXSlcbiAgfVxuICBhc3luYyB0ZXh0VG9VcmwgKGluZGV4LCB1cmwpIHtcbiAgICBjb25zdCB1cmxFbWJlZCA9IGF3YWl0IHRoaXMuYnVpbGRVcmxFbWJlZCh1cmwpXG4gICAgY29uc3Qgb3BzID0gbmV3IERlbHRhKClcbiAgICAgIC5yZXRhaW4oaW5kZXgpXG4gICAgICAuZGVsZXRlKHVybC5sZW5ndGgpXG4gICAgICAuaW5zZXJ0KHVybEVtYmVkKVxuICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMob3BzKVxuICB9XG4gIGJ1aWxkVXJsRW1iZWQgKHVybCkge1xuICAgIGNvbnN0IGVtYmVkID0ge1xuICAgICAgdXJsRW1iZWQ6IHtcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIGh0bWw6IHVybFxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFkZE1ldGFJbmZvKHVybClcbiAgICByZXR1cm4gZW1iZWRcbiAgfVxuICBhc3luYyBhZGRNZXRhSW5mbyAodXJsKSB7XG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmdldE1ldGFJbmZvKHVybClcbiAgICBjb25zdCBlbWJlZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGBbZGF0YS11cmwtZW1iZWQ9XCIke3VybH1cIl1gKVxuICAgIGlmICghZW1iZWRzIHx8ICFlbWJlZHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZW1iZWRzLmZvckVhY2goZW1iZWQgPT4ge1xuICAgICAgY29uc3QgZW1iZWREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgZW1iZWQuaW5uZXJIVE1MID0gJydcbiAgICAgIGVtYmVkLmFwcGVuZENoaWxkKGVtYmVkRGl2KVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBjb25zdCBlbWJlZENvbXBvbmVudCA9IG5ldyBWdWUoe1xuICAgICAgICBlbDogZW1iZWREaXYsXG4gICAgICAgIHJlbmRlciAoY3JlYXRlRWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KEVtYmVkSXRlbSwge1xuICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgICBtZXRhOiBkYXRhXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG4gIGFzeW5jIGdldE1ldGFJbmZvICh1cmwpIHtcbiAgICB1cmwgPSBlbmNvZGVVUklDb21wb25lbnQodXJsKVxuICAgIGNvbnN0IHJlcXVlc3RVcmwgPSBgJHt0aGlzLm9wdGlvbnMubWV0YUFwaX0vZW1iZWRzP3VybD0ke3VybH1gXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQocmVxdWVzdFVybClcbiAgICByZXR1cm4gcmVzcG9uc2VcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVcmxFbWJlZHNcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gcGxhY2VIb2xkZXJzQ291bnQgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycylcbiAgLy8gaWYgdGhlcmUgYXJlIHR3byBwbGFjZWhvbGRlcnMsIHRoYW4gdGhlIHR3byBjaGFyYWN0ZXJzIGJlZm9yZSBpdFxuICAvLyByZXByZXNlbnQgb25lIGJ5dGVcbiAgLy8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzXG4gIC8vIHRoaXMgaXMganVzdCBhIGNoZWFwIGhhY2sgdG8gbm90IGRvIGluZGV4T2YgdHdpY2VcbiAgcmV0dXJuIGI2NFtsZW4gLSAyXSA9PT0gJz0nID8gMiA6IGI2NFtsZW4gLSAxXSA9PT0gJz0nID8gMSA6IDBcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuICByZXR1cm4gKGI2NC5sZW5ndGggKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNDb3VudChiNjQpXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIGksIGwsIHRtcCwgcGxhY2VIb2xkZXJzLCBhcnJcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcbiAgcGxhY2VIb2xkZXJzID0gcGxhY2VIb2xkZXJzQ291bnQoYjY0KVxuXG4gIGFyciA9IG5ldyBBcnIoKGxlbiAqIDMgLyA0KSAtIHBsYWNlSG9sZGVycylcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIGwgPSBwbGFjZUhvbGRlcnMgPiAwID8gbGVuIC0gNCA6IGxlblxuXG4gIHZhciBMID0gMFxuXG4gIGZvciAoaSA9IDA7IGkgPCBsOyBpICs9IDQpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHwgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbTCsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnMgPT09IDIpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9IGVsc2UgaWYgKHBsYWNlSG9sZGVycyA9PT0gMSkge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICsgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9ICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICsgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICsgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBvdXRwdXQgPSAnJ1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aCkpKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMl1cbiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXVxuICAgIG91dHB1dCArPSAnPT0nXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArICh1aW50OFtsZW4gLSAxXSlcbiAgICBvdXRwdXQgKz0gbG9va3VwW3RtcCA+PiAxMF1cbiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9ICc9J1xuICB9XG5cbiAgcGFydHMucHVzaChvdXRwdXQpXG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCJpbXBvcnQgUXVpbGwgZnJvbSAncXVpbGwnXG5jb25zdCBCbG9ja0VtYmVkID0gUXVpbGwuaW1wb3J0KCdibG90cy9ibG9jay9lbWJlZCcpXG5cbmNsYXNzIFVybEVtYmVkIGV4dGVuZHMgQmxvY2tFbWJlZCB7XG4gIHN0YXRpYyBjcmVhdGUgKHt1cmwsIGh0bWx9KSB7XG4gICAgbGV0IG5vZGUgPSBzdXBlci5jcmVhdGUoKVxuICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLXVybC1lbWJlZCcsIHVybClcbiAgICBub2RlLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgJ2ZhbHNlJylcbiAgICBub2RlLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgaHRtbClcbiAgICByZXR1cm4gbm9kZVxuICB9XG5cbiAgc3RhdGljIHZhbHVlIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXVybC1lbWJlZCcpXG4gIH1cbn1cblVybEVtYmVkLmJsb3ROYW1lID0gJ3VybEVtYmVkJ1xuVXJsRW1iZWQuY2xhc3NOYW1lID0gJ3VybC1lbWJlZCdcblVybEVtYmVkLnRhZ05hbWUgPSAnZGl2J1xuXG5leHBvcnQgZGVmYXVsdCBVcmxFbWJlZFxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmVnRXhwLCByZXBsYWNlKSB7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIFN0cmluZyhpdCkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcbiAgfTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZSA9IHJlcXVpcmUoJy4vX3JlcGxhY2VyJykoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywgeyBlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCkgeyByZXR1cm4gJHJlKGl0KTsgfSB9KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5SZWdFeHAuZXNjYXBlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9tYXN0ZXIvTElDRU5TRSBmaWxlLiBBblxuICogYWRkaXRpb25hbCBncmFudCBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluXG4gKiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwucHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBnbG9iYWwucHJvY2Vzcy5kb21haW4pIHtcbiAgICAgIGludm9rZSA9IGdsb2JhbC5wcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXG4gIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdFxuICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLlxuICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6XG4gIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHRoaXNcbik7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHRhc2sgPSByZXF1aXJlKCcuL190YXNrJyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiwge1xuICBzZXRJbW1lZGlhdGU6ICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTtcbiIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZm4sIHRpbWUgLyogLCAuLi5hcmdzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XG4gICAgcmV0dXJuIHNldChib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWUpO1xuICB9O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemVucGFyc2luZy9lcy1vYnNlcnZhYmxlXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBPQlNFUlZBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ29ic2VydmFibGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBSRVRVUk4gPSBmb3JPZi5SRVRVUk47XG5cbnZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZuID09IG51bGwgPyB1bmRlZmluZWQgOiBhRnVuY3Rpb24oZm4pO1xufTtcblxudmFyIGNsZWFudXBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHZhciBjbGVhbnVwID0gc3Vic2NyaXB0aW9uLl9jO1xuICBpZiAoY2xlYW51cCkge1xuICAgIHN1YnNjcmlwdGlvbi5fYyA9IHVuZGVmaW5lZDtcbiAgICBjbGVhbnVwKCk7XG4gIH1cbn07XG5cbnZhciBzdWJzY3JpcHRpb25DbG9zZWQgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHJldHVybiBzdWJzY3JpcHRpb24uX28gPT09IHVuZGVmaW5lZDtcbn07XG5cbnZhciBjbG9zZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gIH1cbn07XG5cbnZhciBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHN1YnNjcmliZXIpIHtcbiAgYW5PYmplY3Qob2JzZXJ2ZXIpO1xuICB0aGlzLl9jID0gdW5kZWZpbmVkO1xuICB0aGlzLl9vID0gb2JzZXJ2ZXI7XG4gIG9ic2VydmVyID0gbmV3IFN1YnNjcmlwdGlvbk9ic2VydmVyKHRoaXMpO1xuICB0cnkge1xuICAgIHZhciBjbGVhbnVwID0gc3Vic2NyaWJlcihvYnNlcnZlcik7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNsZWFudXA7XG4gICAgaWYgKGNsZWFudXAgIT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBjbGVhbnVwLnVuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nKSBjbGVhbnVwID0gZnVuY3Rpb24gKCkgeyBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsgfTtcbiAgICAgIGVsc2UgYUZ1bmN0aW9uKGNsZWFudXApO1xuICAgICAgdGhpcy5fYyA9IGNsZWFudXA7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgcmV0dXJuO1xuICB9IGlmIChzdWJzY3JpcHRpb25DbG9zZWQodGhpcykpIGNsZWFudXBTdWJzY3JpcHRpb24odGhpcyk7XG59O1xuXG5TdWJzY3JpcHRpb24ucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkgeyBjbG9zZVN1YnNjcmlwdGlvbih0aGlzKTsgfVxufSk7XG5cbnZhciBTdWJzY3JpcHRpb25PYnNlcnZlciA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgdGhpcy5fcyA9IHN1YnNjcmlwdGlvbjtcbn07XG5cblN1YnNjcmlwdGlvbk9ic2VydmVyLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIG5leHQ6IGZ1bmN0aW9uIG5leHQodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5uZXh0KTtcbiAgICAgICAgaWYgKG0pIHJldHVybiBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbG9zZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGVycm9yOiBmdW5jdGlvbiBlcnJvcih2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmIChzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkgdGhyb3cgdmFsdWU7XG4gICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuZXJyb3IpO1xuICAgICAgaWYgKCFtKSB0aHJvdyB2YWx1ZTtcbiAgICAgIHZhbHVlID0gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmNvbXBsZXRlKTtcbiAgICAgICAgdmFsdWUgPSBtID8gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSkgOiB1bmRlZmluZWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufSk7XG5cbnZhciAkT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlcikge1xuICBhbkluc3RhbmNlKHRoaXMsICRPYnNlcnZhYmxlLCAnT2JzZXJ2YWJsZScsICdfZicpLl9mID0gYUZ1bmN0aW9uKHN1YnNjcmliZXIpO1xufTtcblxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUucHJvdG90eXBlLCB7XG4gIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24ob2JzZXJ2ZXIsIHRoaXMuX2YpO1xuICB9LFxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgKGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgYUZ1bmN0aW9uKGZuKTtcbiAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGF0LnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZm4odmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgY29tcGxldGU6IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59KTtcblxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUsIHtcbiAgZnJvbTogZnVuY3Rpb24gZnJvbSh4KSB7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZTtcbiAgICB2YXIgbWV0aG9kID0gZ2V0TWV0aG9kKGFuT2JqZWN0KHgpW09CU0VSVkFCTEVdKTtcbiAgICBpZiAobWV0aG9kKSB7XG4gICAgICB2YXIgb2JzZXJ2YWJsZSA9IGFuT2JqZWN0KG1ldGhvZC5jYWxsKHgpKTtcbiAgICAgIHJldHVybiBvYnNlcnZhYmxlLmNvbnN0cnVjdG9yID09PSBDID8gb2JzZXJ2YWJsZSA6IG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5zdWJzY3JpYmUob2JzZXJ2ZXIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWRvbmUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGZvck9mKHgsIGZhbHNlLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdCk7XG4gICAgICAgICAgICAgIGlmIChkb25lKSByZXR1cm4gUkVUVVJOO1xuICAgICAgICAgICAgfSkgPT09IFJFVFVSTikgcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChkb25lKSB0aHJvdyBlO1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IGRvbmUgPSB0cnVlOyB9O1xuICAgIH0pO1xuICB9LFxuICBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoLCBpdGVtcyA9IG5ldyBBcnJheShsKTsgaSA8IGw7KSBpdGVtc1tpXSA9IGFyZ3VtZW50c1tpKytdO1xuICAgIHJldHVybiBuZXcgKHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlKShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWRvbmUpIHtcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGl0ZW1zLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0ZW1zW2pdKTtcbiAgICAgICAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IGRvbmUgPSB0cnVlOyB9O1xuICAgIH0pO1xuICB9XG59KTtcblxuaGlkZSgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIE9CU0VSVkFCTEUsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBPYnNlcnZhYmxlOiAkT2JzZXJ2YWJsZSB9KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnT2JzZXJ2YWJsZScpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL3RjMzktbm90ZXMvYmxvYi9tYXN0ZXIvZXM2LzIwMTQtMDkvc2VwdC0yNS5tZCM1MTAtZ2xvYmFsYXNhcC1mb3ItZW5xdWV1aW5nLWEtbWljcm90YXNrXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgcHJvY2VzcyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnByb2Nlc3M7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG4kZXhwb3J0KCRleHBvcnQuRywge1xuICBhc2FwOiBmdW5jdGlvbiBhc2FwKGZuKSB7XG4gICAgdmFyIGRvbWFpbiA9IGlzTm9kZSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTtcbiIsInZhciAkbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvTWV0YUtleSA9ICRtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9ICRtZXRhZGF0YS5zZXQ7XG5cbiRtZXRhZGF0YS5leHAoeyBtZXRhZGF0YTogZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHRhcmdldEtleSkge1xuICAgIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoXG4gICAgICBtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSxcbiAgICAgICh0YXJnZXRLZXkgIT09IHVuZGVmaW5lZCA/IGFuT2JqZWN0IDogYUZ1bmN0aW9uKSh0YXJnZXQpLFxuICAgICAgdG9NZXRhS2V5KHRhcmdldEtleSlcbiAgICApO1xuICB9O1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgaGFzT3duTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5SGFzTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZiAoaGFzT3duKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IGZhbHNlO1xufTtcblxubWV0YWRhdGEuZXhwKHsgaGFzTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGE6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBTZXQgPSByZXF1aXJlKCcuL2VzNi5zZXQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xudmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeU1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uIChPLCBQKSB7XG4gIHZhciBvS2V5cyA9IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIGlmIChwYXJlbnQgPT09IG51bGwpIHJldHVybiBvS2V5cztcbiAgdmFyIHBLZXlzID0gb3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTtcbiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGZyb20obmV3IFNldChvS2V5cy5jb25jYXQocEtleXMpKSkgOiBwS2V5cyA6IG9LZXlzO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRNZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5R2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZiAoaGFzT3duKSByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiB1bmRlZmluZWQ7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YTogZnVuY3Rpb24gZ2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlHZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcbnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwO1xudmFyIHN0b3JlID0gbWV0YWRhdGEuc3RvcmU7XG5cbm1ldGFkYXRhLmV4cCh7IGRlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pO1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpO1xuICBpZiAobWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCB8fCAhbWV0YWRhdGFNYXBbJ2RlbGV0ZSddKG1ldGFkYXRhS2V5KSkgcmV0dXJuIGZhbHNlO1xuICBpZiAobWV0YWRhdGFNYXAuc2l6ZSkgcmV0dXJuIHRydWU7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICB0YXJnZXRNZXRhZGF0YVsnZGVsZXRlJ10odGFyZ2V0S2V5KTtcbiAgcmV0dXJuICEhdGFyZ2V0TWV0YWRhdGEuc2l6ZSB8fCBzdG9yZVsnZGVsZXRlJ10odGFyZ2V0KTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7IGRlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtdHJ5XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUHJvbWlzZScsIHsgJ3RyeSc6IGZ1bmN0aW9uIChjYWxsYmFja2ZuKSB7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYodGhpcyk7XG4gIHZhciByZXN1bHQgPSBwZXJmb3JtKGNhbGxiYWNrZm4pO1xuICAocmVzdWx0LmUgPyBwcm9taXNlQ2FwYWJpbGl0eS5yZWplY3QgOiBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlKShyZXN1bHQudik7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtZmluYWxseVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1Byb21pc2UnLCB7ICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpO1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgcmV0dXJuIHRoaXMudGhlbihcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICB9IDogb25GaW5hbGx5LFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgfSA6IG9uRmluYWxseVxuICApO1xufSB9KTtcbiIsIi8vIGh0dHA6Ly9qZmJhc3RpZW4uZ2l0aHViLmlvL3BhcGVycy9NYXRoLnNpZ25iaXQuaHRtbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduYml0OiBmdW5jdGlvbiBzaWduYml0KHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgIT0geCA/IHggOiB4ID09IDAgPyAxIC8geCA9PSBJbmZpbml0eSA6IHggPiAwO1xufSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+Pj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4+IDE2O1xuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+PiAxNik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzY2FsZTogcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpIH0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBERUdfUEVSX1JBRCA9IE1hdGguUEkgLyAxODA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgcmFkaWFuczogZnVuY3Rpb24gcmFkaWFucyhkZWdyZWVzKSB7XG4gICAgcmV0dXJuIGRlZ3JlZXMgKiBERUdfUEVSX1JBRDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IFJBRF9QRVJfREVHOiAxODAgLyBNYXRoLlBJIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaW11bGg6IGZ1bmN0aW9uIGltdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+IDE2O1xuICAgIHZhciB2MSA9ICR2ID4+IDE2O1xuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4gMTYpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlzdWJoOiBmdW5jdGlvbiBpc3ViaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgLSAoeTEgPj4+IDApIC0gKCh+JHgwICYgJHkwIHwgfigkeDAgXiAkeTApICYgJHgwIC0gJHkwID4+PiAwKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2NhbGUgPSByZXF1aXJlKCcuL19tYXRoLXNjYWxlJyk7XG52YXIgZnJvdW5kID0gcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBmc2NhbGU6IGZ1bmN0aW9uIGZzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgICByZXR1cm4gZnJvdW5kKHNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgUkFEX1BFUl9ERUcgPSAxODAgLyBNYXRoLlBJO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGRlZ3JlZXM6IGZ1bmN0aW9uIGRlZ3JlZXMocmFkaWFucykge1xuICAgIHJldHVybiByYWRpYW5zICogUkFEX1BFUl9ERUc7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBERUdfUEVSX1JBRDogTWF0aC5QSSAvIDE4MCB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2xhbXA6IGZ1bmN0aW9uIGNsYW1wKHgsIGxvd2VyLCB1cHBlcikge1xuICAgIHJldHVybiBNYXRoLm1pbih1cHBlciwgTWF0aC5tYXgobG93ZXIsIHgpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL3Byb3Bvc2FsLWlzLWVycm9yXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0Vycm9yJywge1xuICBpc0Vycm9yOiBmdW5jdGlvbiBpc0Vycm9yKGl0KSB7XG4gICAgcmV0dXJuIGNvZihpdCkgPT09ICdFcnJvcic7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N5c3RlbScsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnV2Vha01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0LmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1dlYWtTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1dlYWtNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ01hcCcpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ01hcCcpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwU2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwU2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuc2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuZ2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMyBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lU2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgc2V0OiBhRnVuY3Rpb24oc2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IGdldDogYUZ1bmN0aW9uKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpIHtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4vX293bi1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleSwgZGVzYztcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpKSB7XG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGdldEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAocmVnZXhwLCBzdHJpbmcpIHtcbiAgdGhpcy5fciA9IHJlZ2V4cDtcbiAgdGhpcy5fcyA9IHN0cmluZztcbn07XG5cbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLCAnUmVnRXhwIFN0cmluZycsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBtYXRjaCA9IHRoaXMuX3IuZXhlYyh0aGlzLl9zKTtcbiAgcmV0dXJuIHsgdmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbCB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XG4gICAgZGVmaW5lZCh0aGlzKTtcbiAgICBpZiAoIWlzUmVnRXhwKHJlZ2V4cCkpIHRocm93IFR5cGVFcnJvcihyZWdleHAgKyAnIGlzIG5vdCBhIHJlZ2V4cCEnKTtcbiAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICB2YXIgZmxhZ3MgPSAnZmxhZ3MnIGluIFJlZ0V4cFByb3RvID8gU3RyaW5nKHJlZ2V4cC5mbGFncykgOiBnZXRGbGFncy5jYWxsKHJlZ2V4cCk7XG4gICAgdmFyIHJ4ID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7XG4gICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7XG4gICAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocngsIFMpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KSwgJ1N0cmluZycsIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdHRlblxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0dGVuOiBmdW5jdGlvbiBmbGF0dGVuKC8qIGRlcHRoQXJnID0gMSAqLykge1xuICAgIHZhciBkZXB0aEFyZyA9IGFyZ3VtZW50c1swXTtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIGRlcHRoQXJnID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoQXJnKSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdHRlbicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXRNYXBcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiwgQTtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdE1hcCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTtcbiIsIi8vIDI2LjEuMTQgUmVmbGVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzZXRQcm90byA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpO1xuXG5pZiAoc2V0UHJvdG8pICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcbiAgICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTtcbiAgICB0cnkge1xuICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzYyA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZiAoIW93bkRlc2MpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkge1xuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkgfHwgY3JlYXRlRGVzYygwKTtcbiAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IHNldDogc2V0IH0pO1xuIiwiLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgkcHJldmVudEV4dGVuc2lvbnMpICRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IG93bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJykgfSk7XG4iLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS44IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnZXRQcm90byA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzYywgcHJvdG87XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmIChkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgZ2V0OiBnZXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XG52YXIgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciByQXBwbHkgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHk7XG52YXIgZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fdHlwZWQnKS5BQlYsIHtcbiAgRGF0YVZpZXc6IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpLkRhdGFWaWV3XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIEFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuQXJyYXlCdWZmZXI7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbnZhciAkRGF0YVZpZXcgPSBidWZmZXIuRGF0YVZpZXc7XG52YXIgJGlzVmlldyA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3O1xudmFyICRzbGljZSA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG52YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEFycmF5QnVmZmVyICE9PSAkQXJyYXlCdWZmZXIpLCB7IEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0O1xuICB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlUgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFuZXcgJEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgaWYgKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgdmFyIGxlbiA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIGZpcnN0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBmaW5hbCA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluYWwgLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluYWwpIHtcbiAgICAgIHZpZXdULnNldFVpbnQ4KGluZGV4KyssIHZpZXdTLmdldFVpbnQ4KGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKEFSUkFZX0JVRkZFUik7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfU0VUID0gJ1dlYWtTZXQnO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIvLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbiAgdmFyIF9zcGxpdCA9ICRzcGxpdDtcbiAgdmFyICRwdXNoID0gW10ucHVzaDtcbiAgdmFyICRTUExJVCA9ICdzcGxpdCc7XG4gIHZhciBMRU5HVEggPSAnbGVuZ3RoJztcbiAgdmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcbiAgaWYgKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApIHtcbiAgICB2YXIgTlBDRyA9IC8oKT8/Ly5leGVjKCcnKVsxXSA9PT0gdW5kZWZpbmVkOyAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgICRzcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gX3NwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyA0Mjk0OTY3Mjk1IDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoLCBpO1xuICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0XG4gICAgICBpZiAoIU5QQ0cpIHNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKCdeJyArIHNlcGFyYXRvckNvcHkuc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgICB3aGlsZSAobWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKSkge1xuICAgICAgICAvLyBgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXhgIGlzIG5vdCByZWxpYWJsZSBjcm9zcy1icm93c2VyXG4gICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3IgTlBDR1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgICAgICBpZiAoIU5QQ0cgJiYgbWF0Y2hbTEVOR1RIXSA+IDEpIG1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50c1tMRU5HVEhdIC0gMjsgaSsrKSBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSAkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xuICAgICRzcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IF9zcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH1cbiAgLy8gMjEuMS4zLjE3IFN0cmluZy5wcm90b3R5cGUuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdClcbiAgcmV0dXJuIFtmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KSA6ICRzcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gIH0sICRzcGxpdF07XG59KTtcbiIsIi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gpIHtcbiAgLy8gMjEuMS4zLjE1IFN0cmluZy5wcm90b3R5cGUuc2VhcmNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICB9LCAkc2VhcmNoXTtcbn0pO1xuIiwiLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UpIHtcbiAgLy8gMjEuMS4zLjE0IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKVxuICByZXR1cm4gW2Z1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gIH0sICRyZXBsYWNlXTtcbn0pO1xuIiwiLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoKSB7XG4gIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICB9LCAkbWF0Y2hdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmIChyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KSkge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYgKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORykge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTtcbiIsInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciAkbmF0aXZlID0gW10uaW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgU1RSSUNUID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChyZXF1aXJlKCcuL19pb2JqZWN0JykgIT0gT2JqZWN0IHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoYXJyYXlKb2luKSksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUgKGFMZW4gPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgTlVNQkVSID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgaWYgKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59O1xuIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcbiIsInZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xudmFyICR0b0lTT1N0cmluZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gIGlmICghaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSkgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIHZhciBkID0gdGhpcztcbiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG59IDogJHRvSVNPU3RyaW5nO1xuIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcbiAgcmVwZWF0OiByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jylcbn0pO1xuIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgRU5EU19XSVRIID0gJ2VuZHNXaXRoJztcbnZhciAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aCk7XG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKSB7XG4gICAgdmFyIHRwbCA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0cGwubGVuZ3RoKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAobGVuID4gaSkge1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZiAoaSA8IGFMZW4pIHJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KSB7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcbiAgICAgID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcbiIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgbG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKSB9KTtcbiIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHsgZXhwbTE6ICRleHBtMSB9KTtcbiIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcbiIsIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyk7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwiLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpIH0pO1xuIiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG52YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7XG52YXIgWkVSTyA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGMyID0gYztcbiAgd2hpbGUgKCsraSA8IDYpIHtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgYyA9IDA7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaSA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGlmIChzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uICh4LCBuLCBhY2MpIHtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKTtcbiAgICB2YXIgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9IFpFUk87XG4gICAgdmFyIGUsIHosIGosIGs7XG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmICh4ICE9IHgpIHJldHVybiAnTmFOJztcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA+IDFlLTIxKSB7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmIChlID4gMCkge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlIChqID49IDcpIHtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGYgPiAwKSB7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSEFTX0lOU1RBTkNFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgaWYgKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gTykgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn0gfSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJykgfSk7XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24gKCRzZWFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pO1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsInJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcuYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLW1hcC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLXNldC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZ2xvYmFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5jbGFtcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmZzY2FsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaXN1YmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pbXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNjYWxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgudW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5zaWduYml0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hc2FwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9tb2R1bGVzL19jb3JlJyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcImNvcmUtanMvc2hpbVwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vcmVnZXhwL2VzY2FwZVwiKTtcblxuaWYgKGdsb2JhbC5fYmFiZWxQb2x5ZmlsbCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJvbmx5IG9uZSBpbnN0YW5jZSBvZiBiYWJlbC1wb2x5ZmlsbCBpcyBhbGxvd2VkXCIpO1xufVxuZ2xvYmFsLl9iYWJlbFBvbHlmaWxsID0gdHJ1ZTtcblxudmFyIERFRklORV9QUk9QRVJUWSA9IFwiZGVmaW5lUHJvcGVydHlcIjtcbmZ1bmN0aW9uIGRlZmluZShPLCBrZXksIHZhbHVlKSB7XG4gIE9ba2V5XSB8fCBPYmplY3RbREVGSU5FX1BST1BFUlRZXShPLCBrZXksIHtcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHZhbHVlXG4gIH0pO1xufVxuXG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRMZWZ0XCIsIFwiXCIucGFkU3RhcnQpO1xuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkUmlnaHRcIiwgXCJcIi5wYWRFbmQpO1xuXG5cInBvcCxyZXZlcnNlLHNoaWZ0LGtleXMsdmFsdWVzLGVudHJpZXMsaW5kZXhPZixldmVyeSxzb21lLGZvckVhY2gsbWFwLGZpbHRlcixmaW5kLGZpbmRJbmRleCxpbmNsdWRlcyxqb2luLHNsaWNlLGNvbmNhdCxwdXNoLHNwbGljZSx1bnNoaWZ0LHNvcnQsbGFzdEluZGV4T2YscmVkdWNlLHJlZHVjZVJpZ2h0LGNvcHlXaXRoaW4sZmlsbFwiLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgW11ba2V5XSAmJiBkZWZpbmUoQXJyYXksIGtleSwgRnVuY3Rpb24uY2FsbC5iaW5kKFtdW2tleV0pKTtcbn0pOyIsImltcG9ydCAnYmFiZWwtcG9seWZpbGwnXG5pbXBvcnQgdXJsRW1iZWQgZnJvbSAnLi9ibG90J1xuaW1wb3J0IHVybEVtYmVkTW9kdWxlIGZyb20gJy4vbW9kdWxlJ1xuXG5leHBvcnQge1xuICB1cmxFbWJlZCxcbiAgdXJsRW1iZWRNb2R1bGVcbn1cbiIsImltcG9ydCBRdWlsbCBmcm9tICdxdWlsbCdcbmltcG9ydCB7IHVybEVtYmVkLCB1cmxFbWJlZE1vZHVsZSB9IGZyb20gJy4vaW5kZXgnXG5RdWlsbC5yZWdpc3Rlcih7XG4gICdibG90cy91cmxFbWJlZCc6IHVybEVtYmVkLFxuICAnbW9kdWxlcy91cmxFbWJlZHMnOiB1cmxFbWJlZE1vZHVsZVxufSlcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5sZXQgcXVpbGwgPSBuZXcgUXVpbGwoJyNlZGl0b3InLCB7XG4gIHRoZW1lOiAnc25vdycsXG4gIG1vZHVsZXM6IHtcbiAgICB1cmxFbWJlZHM6IHtcbiAgICAgIG1ldGFBcGk6ICdodHRwOi8vbG9jYWxob3N0OjMwNTAnXG4gICAgfVxuICB9LFxuICBwbGFjZWhvbGRlcjogJ1Bhc3RlIG9yIHR5cGUgYSB1cmwgLi4uJ1xufSlcbiJdLCJzb3VyY2VSb290IjoiIn0=